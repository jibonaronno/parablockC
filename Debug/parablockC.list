
parablockC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad0  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b1  20000000  08004de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001244  200000b4  08004e99  000200b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200012f8  08004e99  000212f8  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY
 10 .debug_info   00076ce5  00000000  00000000  0002012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000064ba  00000000  00000000  00096e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002020  00000000  00000000  0009d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001977  00000000  00000000  0009f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000073a8  00000000  00000000  000a0c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002cb41  00000000  00000000  000a800f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017e26d  00000000  00000000  000d4b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000089a0  00000000  00000000  00252dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  0025b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000b4 	.word	0x200000b4
 8000254:	00000000 	.word	0x00000000
 8000258:	08004cf0 	.word	0x08004cf0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000b8 	.word	0x200000b8
 8000274:	08004cf0 	.word	0x08004cf0

08000278 <limitsGetState>:
#endif // STEP_INJECT_ENABLE

// Returns limit state as an axes_signals_t variable.
// Each bitfield bit indicates an axis limit, where triggered is 1 and not triggered is 0.
inline static limit_signals_t limitsGetState()
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
    limit_signals_t signals = {0};
 800027e:	2300      	movs	r3, #0
 8000280:	603b      	str	r3, [r7, #0]

    signals.min.mask = settings.limits.invert.mask;
 8000282:	4b26      	ldr	r3, [pc, #152]	; (800031c <limitsGetState+0xa4>)
 8000284:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8000288:	703b      	strb	r3, [r7, #0]
#ifdef MAX_LIMIT_SWITCHES
    signals.max.mask = settings.limits.invert.mask;
#endif

#if LIMIT_INMODE == GPIO_SINGLE
    signals.min.x = DIGITAL_IN(X_LIMIT_PORT, X_LIMIT_BIT);
 800028a:	4b25      	ldr	r3, [pc, #148]	; (8000320 <limitsGetState+0xa8>)
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000292:	2b00      	cmp	r3, #0
 8000294:	bf14      	ite	ne
 8000296:	2301      	movne	r3, #1
 8000298:	2300      	moveq	r3, #0
 800029a:	b2da      	uxtb	r2, r3
 800029c:	783b      	ldrb	r3, [r7, #0]
 800029e:	f362 0300 	bfi	r3, r2, #0, #1
 80002a2:	703b      	strb	r3, [r7, #0]
    signals.min.y = DIGITAL_IN(Y_LIMIT_PORT, Y_LIMIT_BIT);
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <limitsGetState+0xa8>)
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf14      	ite	ne
 80002b0:	2301      	movne	r3, #1
 80002b2:	2300      	moveq	r3, #0
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	783b      	ldrb	r3, [r7, #0]
 80002b8:	f362 0341 	bfi	r3, r2, #1, #1
 80002bc:	703b      	strb	r3, [r7, #0]
    signals.min.z = DIGITAL_IN(Z_LIMIT_PORT, Z_LIMIT_BIT);
 80002be:	4b19      	ldr	r3, [pc, #100]	; (8000324 <limitsGetState+0xac>)
 80002c0:	691b      	ldr	r3, [r3, #16]
 80002c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	bf14      	ite	ne
 80002ca:	2301      	movne	r3, #1
 80002cc:	2300      	moveq	r3, #0
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	783b      	ldrb	r3, [r7, #0]
 80002d2:	f362 0382 	bfi	r3, r2, #2, #1
 80002d6:	703b      	strb	r3, [r7, #0]
#endif
#ifdef Z_LIMIT_PIN_MAX
    signals.max.z = DIGITAL_IN(Z_LIMIT_PORT_MAX, Z_LIMIT_BIT_MAX);
#endif

    if (settings.limits.invert.mask) {
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <limitsGetState+0xa4>)
 80002da:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d006      	beq.n	80002f0 <limitsGetState+0x78>
        signals.min.value ^= settings.limits.invert.mask;
 80002e2:	783a      	ldrb	r2, [r7, #0]
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <limitsGetState+0xa4>)
 80002e6:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80002ea:	4053      	eors	r3, r2
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	703b      	strb	r3, [r7, #0]
#ifdef MAX_LIMIT_SWITCHES
        signals.max.value ^= settings.limits.invert.mask;
#endif
    }

    return signals;
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	2300      	movs	r3, #0
 80002f6:	793a      	ldrb	r2, [r7, #4]
 80002f8:	f362 0307 	bfi	r3, r2, #0, #8
 80002fc:	797a      	ldrb	r2, [r7, #5]
 80002fe:	f362 230f 	bfi	r3, r2, #8, #8
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	f362 4317 	bfi	r3, r2, #16, #8
 8000308:	79fa      	ldrb	r2, [r7, #7]
 800030a:	f362 631f 	bfi	r3, r2, #24, #8
}
 800030e:	4618      	mov	r0, r3
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20001170 	.word	0x20001170
 8000320:	42020c00 	.word	0x42020c00
 8000324:	42020000 	.word	0x42020000

08000328 <systemGetState>:

// Returns system state as a control_signals_t variable.
// Each bitfield bit indicates a control signal, where triggered is 1 and not triggered is 0.
static control_signals_t systemGetState (void)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
    control_signals_t signals;

    signals.mask = settings.control_invert.mask;
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <systemGetState+0x84>)
 8000330:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8000334:	80bb      	strh	r3, [r7, #4]

#if CONTROL_INMODE == GPIO_SINGLE
  #if ESTOP_ENABLE
    signals.e_stop = DIGITAL_IN(RESET_PORT, RESET_BIT);
 8000336:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <systemGetState+0x88>)
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	f003 0308 	and.w	r3, r3, #8
 800033e:	2b00      	cmp	r3, #0
 8000340:	bf14      	ite	ne
 8000342:	2301      	movne	r3, #1
 8000344:	2300      	moveq	r3, #0
 8000346:	b2da      	uxtb	r2, r3
 8000348:	793b      	ldrb	r3, [r7, #4]
 800034a:	f362 1386 	bfi	r3, r2, #6, #1
 800034e:	713b      	strb	r3, [r7, #4]
  #else
    signals.reset = DIGITAL_IN(RESET_PORT, RESET_BIT);
  #endif
    signals.feed_hold = DIGITAL_IN(FEED_HOLD_PORT, FEED_HOLD_BIT);
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <systemGetState+0x8c>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	bf14      	ite	ne
 800035c:	2301      	movne	r3, #1
 800035e:	2300      	moveq	r3, #0
 8000360:	b2da      	uxtb	r2, r3
 8000362:	793b      	ldrb	r3, [r7, #4]
 8000364:	f362 0341 	bfi	r3, r2, #1, #1
 8000368:	713b      	strb	r3, [r7, #4]
    signals.cycle_start = DIGITAL_IN(CYCLE_START_PORT, CYCLE_START_BIT);
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <systemGetState+0x90>)
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	f003 0310 	and.w	r3, r3, #16
 8000372:	2b00      	cmp	r3, #0
 8000374:	bf14      	ite	ne
 8000376:	2301      	movne	r3, #1
 8000378:	2300      	moveq	r3, #0
 800037a:	b2da      	uxtb	r2, r3
 800037c:	793b      	ldrb	r3, [r7, #4]
 800037e:	f362 0382 	bfi	r3, r2, #2, #1
 8000382:	713b      	strb	r3, [r7, #4]
    signals.e_stop = signals.reset;
    signals.reset = settings.control_invert.reset;
  #endif
#endif

    if(settings.control_invert.mask)
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <systemGetState+0x84>)
 8000386:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800038a:	2b00      	cmp	r3, #0
 800038c:	d006      	beq.n	800039c <systemGetState+0x74>
        signals.value ^= settings.control_invert.mask;
 800038e:	88ba      	ldrh	r2, [r7, #4]
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <systemGetState+0x84>)
 8000392:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8000396:	4053      	eors	r3, r2
 8000398:	b29b      	uxth	r3, r3
 800039a:	80bb      	strh	r3, [r7, #4]

    return signals;
 800039c:	88bb      	ldrh	r3, [r7, #4]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20001170 	.word	0x20001170
 80003b0:	42020000 	.word	0x42020000
 80003b4:	42020800 	.word	0x42020800
 80003b8:	42021400 	.word	0x42021400

080003bc <TIM5_IRQHandler>:

/* interrupt handlers */

// Main stepper driver
void STEPPER_TIMER_IRQHandler (void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    if ((STEPPER_TIMER->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <TIM5_IRQHandler+0x24>)
 80003c2:	691b      	ldr	r3, [r3, #16]
 80003c4:	f003 0301 	and.w	r3, r3, #1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d007      	beq.n	80003dc <TIM5_IRQHandler+0x20>
    {
        STEPPER_TIMER->SR = ~TIM_SR_UIF; // clear UIF flag
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <TIM5_IRQHandler+0x24>)
 80003ce:	f06f 0201 	mvn.w	r2, #1
 80003d2:	611a      	str	r2, [r3, #16]
        hal.stepper.interrupt_callback();
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <TIM5_IRQHandler+0x28>)
 80003d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80003da:	4798      	blx	r3
    }
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40000c00 	.word	0x40000c00
 80003e4:	20000f6c 	.word	0x20000f6c

080003e8 <TIM4_IRQHandler>:

// This interrupt is enabled when Grbl sets the motor port bits to execute
// a step. This ISR resets the motor port after a short period (settings.pulse_microseconds)
// completing one step cycle.
void PULSE_TIMER_IRQHandler (void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
    PULSE_TIMER->SR &= ~TIM_SR_UIF;                 // Clear UIF flag
 80003ee:	4b41      	ldr	r3, [pc, #260]	; (80004f4 <TIM4_IRQHandler+0x10c>)
 80003f0:	691b      	ldr	r3, [r3, #16]
 80003f2:	4a40      	ldr	r2, [pc, #256]	; (80004f4 <TIM4_IRQHandler+0x10c>)
 80003f4:	f023 0301 	bic.w	r3, r3, #1
 80003f8:	6113      	str	r3, [r2, #16]

    if (PULSE_TIMER->ARR == pulse_delay) {          // Delayed step pulse?
 80003fa:	4b3e      	ldr	r3, [pc, #248]	; (80004f4 <TIM4_IRQHandler+0x10c>)
 80003fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003fe:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <TIM4_IRQHandler+0x110>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	429a      	cmp	r2, r3
 8000404:	d13f      	bne.n	8000486 <TIM4_IRQHandler+0x9e>
        PULSE_TIMER->ARR = pulse_length;
 8000406:	4a3b      	ldr	r2, [pc, #236]	; (80004f4 <TIM4_IRQHandler+0x10c>)
 8000408:	4b3c      	ldr	r3, [pc, #240]	; (80004fc <TIM4_IRQHandler+0x114>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800040e:	4b3c      	ldr	r3, [pc, #240]	; (8000500 <TIM4_IRQHandler+0x118>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	713b      	strb	r3, [r7, #4]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8000414:	793a      	ldrb	r2, [r7, #4]
 8000416:	4b3b      	ldr	r3, [pc, #236]	; (8000504 <TIM4_IRQHandler+0x11c>)
 8000418:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800041c:	4053      	eors	r3, r2
 800041e:	b2db      	uxtb	r3, r3
 8000420:	713b      	strb	r3, [r7, #4]
    DIGITAL_OUT(X_STEP_PORT, X_STEP_BIT, step_outbits.x);
 8000422:	793b      	ldrb	r3, [r7, #4]
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <TIM4_IRQHandler+0x4c>
 800042e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000432:	e001      	b.n	8000438 <TIM4_IRQHandler+0x50>
 8000434:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000438:	4a33      	ldr	r2, [pc, #204]	; (8000508 <TIM4_IRQHandler+0x120>)
 800043a:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_BIT, step_outbits.y);
 800043c:	793b      	ldrb	r3, [r7, #4]
 800043e:	f003 0302 	and.w	r3, r3, #2
 8000442:	b2db      	uxtb	r3, r3
 8000444:	2b00      	cmp	r3, #0
 8000446:	d002      	beq.n	800044e <TIM4_IRQHandler+0x66>
 8000448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044c:	e001      	b.n	8000452 <TIM4_IRQHandler+0x6a>
 800044e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000452:	4a2d      	ldr	r2, [pc, #180]	; (8000508 <TIM4_IRQHandler+0x120>)
 8000454:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_BIT, step_outbits.z);
 8000456:	793b      	ldrb	r3, [r7, #4]
 8000458:	f003 0304 	and.w	r3, r3, #4
 800045c:	b2db      	uxtb	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	d002      	beq.n	8000468 <TIM4_IRQHandler+0x80>
 8000462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000466:	e001      	b.n	800046c <TIM4_IRQHandler+0x84>
 8000468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800046c:	4a26      	ldr	r2, [pc, #152]	; (8000508 <TIM4_IRQHandler+0x120>)
 800046e:	6193      	str	r3, [r2, #24]
}
 8000470:	bf00      	nop
        stepperSetStepOutputs(next_step_outbits);   // begin step pulse
        PULSE_TIMER->EGR = TIM_EGR_UG;
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <TIM4_IRQHandler+0x10c>)
 8000474:	2201      	movs	r2, #1
 8000476:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <TIM4_IRQHandler+0x10c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <TIM4_IRQHandler+0x10c>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6013      	str	r3, [r2, #0]
    } else
        stepperSetStepOutputs((axes_signals_t){0}); // end step pulse
}
 8000484:	e030      	b.n	80004e8 <TIM4_IRQHandler+0x100>
        stepperSetStepOutputs((axes_signals_t){0}); // end step pulse
 8000486:	2300      	movs	r3, #0
 8000488:	703b      	strb	r3, [r7, #0]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 800048a:	783a      	ldrb	r2, [r7, #0]
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <TIM4_IRQHandler+0x11c>)
 800048e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000492:	4053      	eors	r3, r2
 8000494:	b2db      	uxtb	r3, r3
 8000496:	703b      	strb	r3, [r7, #0]
    DIGITAL_OUT(X_STEP_PORT, X_STEP_BIT, step_outbits.x);
 8000498:	783b      	ldrb	r3, [r7, #0]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <TIM4_IRQHandler+0xc2>
 80004a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a8:	e001      	b.n	80004ae <TIM4_IRQHandler+0xc6>
 80004aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80004ae:	4a16      	ldr	r2, [pc, #88]	; (8000508 <TIM4_IRQHandler+0x120>)
 80004b0:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_BIT, step_outbits.y);
 80004b2:	783b      	ldrb	r3, [r7, #0]
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <TIM4_IRQHandler+0xdc>
 80004be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c2:	e001      	b.n	80004c8 <TIM4_IRQHandler+0xe0>
 80004c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004c8:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <TIM4_IRQHandler+0x120>)
 80004ca:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_BIT, step_outbits.z);
 80004cc:	783b      	ldrb	r3, [r7, #0]
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <TIM4_IRQHandler+0xf6>
 80004d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004dc:	e001      	b.n	80004e2 <TIM4_IRQHandler+0xfa>
 80004de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e2:	4a09      	ldr	r2, [pc, #36]	; (8000508 <TIM4_IRQHandler+0x120>)
 80004e4:	6193      	str	r3, [r2, #24]
}
 80004e6:	bf00      	nop
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40000800 	.word	0x40000800
 80004f8:	200000d4 	.word	0x200000d4
 80004fc:	200000d0 	.word	0x200000d0
 8000500:	200000d8 	.word	0x200000d8
 8000504:	20001170 	.word	0x20001170
 8000508:	42021000 	.word	0x42021000

0800050c <TIM3_IRQHandler>:
    return hal.driver_cap.software_debounce;
}

// Debounce timer interrupt handler
void DEBOUNCE_TIMER_IRQHandler (void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
    DEBOUNCE_TIMER->SR = ~TIM_SR_UIF; // clear UIF flag;
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <TIM3_IRQHandler+0x80>)
 8000514:	f06f 0201 	mvn.w	r2, #1
 8000518:	611a      	str	r2, [r3, #16]

    if(debounce.limits) {
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <TIM3_IRQHandler+0x84>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b00      	cmp	r3, #0
 8000526:	d013      	beq.n	8000550 <TIM3_IRQHandler+0x44>
        debounce.limits = Off;
 8000528:	4a19      	ldr	r2, [pc, #100]	; (8000590 <TIM3_IRQHandler+0x84>)
 800052a:	7813      	ldrb	r3, [r2, #0]
 800052c:	f36f 0300 	bfc	r3, #0, #1
 8000530:	7013      	strb	r3, [r2, #0]
        limit_signals_t state = limitsGetState();
 8000532:	f7ff fea1 	bl	8000278 <limitsGetState>
 8000536:	4603      	mov	r3, r0
 8000538:	607b      	str	r3, [r7, #4]
        if(limit_signals_merge(state).value) //TODO: add check for limit switches having same state as when limit_isr were invoked?
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f000 fc91 	bl	8000e62 <limit_signals_merge>
 8000540:	4603      	mov	r3, r0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d003      	beq.n	8000550 <TIM3_IRQHandler+0x44>
            hal.limits.interrupt_callback(state);
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <TIM3_IRQHandler+0x88>)
 800054a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	4798      	blx	r3
    }

    if(debounce.door) {
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <TIM3_IRQHandler+0x84>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d012      	beq.n	8000584 <TIM3_IRQHandler+0x78>
        debounce.door = Off;
 800055e:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <TIM3_IRQHandler+0x84>)
 8000560:	7813      	ldrb	r3, [r2, #0]
 8000562:	f36f 0341 	bfc	r3, #1, #1
 8000566:	7013      	strb	r3, [r2, #0]
        control_signals_t state = systemGetState();
 8000568:	f7ff fede 	bl	8000328 <systemGetState>
 800056c:	4603      	mov	r3, r0
 800056e:	803b      	strh	r3, [r7, #0]
        if(state.safety_door_ajar)
 8000570:	783b      	ldrb	r3, [r7, #0]
 8000572:	f003 0308 	and.w	r3, r3, #8
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d003      	beq.n	8000584 <TIM3_IRQHandler+0x78>
            hal.control.interrupt_callback(state);
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <TIM3_IRQHandler+0x88>)
 800057e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000580:	8838      	ldrh	r0, [r7, #0]
 8000582:	4798      	blx	r3
    }
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40000400 	.word	0x40000400
 8000590:	200000dc 	.word	0x200000dc
 8000594:	20000f6c 	.word	0x20000f6c

08000598 <EXTI0_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|PROBE_IRQ_BIT|AUXINPUT_MASK) & (1<<0)

void EXTI0_IRQHandler(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(1<<0);
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <EXTI0_IRQHandler+0x50>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d105      	bne.n	80005b6 <EXTI0_IRQHandler+0x1e>
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <EXTI0_IRQHandler+0x50>)
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <EXTI0_IRQHandler+0x22>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <EXTI0_IRQHandler+0x24>
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]

    if(ifg) {
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00c      	beq.n	80005de <EXTI0_IRQHandler+0x46>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <EXTI0_IRQHandler+0x50>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60d3      	str	r3, [r2, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <EXTI0_IRQHandler+0x50>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6113      	str	r3, [r2, #16]
#if CONTROL_MASK & (1<<0)
  #if SAFETY_DOOR_BIT & (1<<0)
        if(!(debounce.door = debounce_start()))
  #endif
        hal.control.interrupt_callback(systemGetState());
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <EXTI0_IRQHandler+0x54>)
 80005d2:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 80005d4:	f7ff fea8 	bl	8000328 <systemGetState>
 80005d8:	4603      	mov	r3, r0
 80005da:	4618      	mov	r0, r3
 80005dc:	47a0      	blx	r4
#elif QEI_SELECT_ENABLED && (QEI_SELECT_BIT & (1<<0))
        if(!(debounce.qei_select = debounce_start()))
            qei_select_handler();
#endif
    }
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	bf00      	nop
 80005e8:	46022000 	.word	0x46022000
 80005ec:	20000f6c 	.word	0x20000f6c

080005f0 <EXTI3_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|PROBE_IRQ_BIT|AUXINPUT_MASK) & (1<<3)

void EXTI3_IRQHandler(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(1<<3);
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <EXTI3_IRQHandler+0x50>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f003 0308 	and.w	r3, r3, #8
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d105      	bne.n	800060e <EXTI3_IRQHandler+0x1e>
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <EXTI3_IRQHandler+0x50>)
 8000604:	691b      	ldr	r3, [r3, #16]
 8000606:	f003 0308 	and.w	r3, r3, #8
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <EXTI3_IRQHandler+0x22>
 800060e:	2301      	movs	r3, #1
 8000610:	e000      	b.n	8000614 <EXTI3_IRQHandler+0x24>
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]

    if(ifg) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00c      	beq.n	8000636 <EXTI3_IRQHandler+0x46>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <EXTI3_IRQHandler+0x50>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60d3      	str	r3, [r2, #12]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <EXTI3_IRQHandler+0x50>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6113      	str	r3, [r2, #16]
#if CONTROL_MASK & (1<<3)
  #if SAFETY_DOOR_BIT & (1<<3)
        if(!(debounce.door = debounce_start()))
  #endif
        hal.control.interrupt_callback(systemGetState());
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <EXTI3_IRQHandler+0x54>)
 800062a:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800062c:	f7ff fe7c 	bl	8000328 <systemGetState>
 8000630:	4603      	mov	r3, r0
 8000632:	4618      	mov	r0, r3
 8000634:	47a0      	blx	r4
#elif QEI_SELECT_ENABLED && (QEI_SELECT_BIT & (1<<3))
        if(!(debounce.qei_select = debounce_start()))
            qei_select_handler();
#endif
    }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	bf00      	nop
 8000640:	46022000 	.word	0x46022000
 8000644:	20000f6c 	.word	0x20000f6c

08000648 <EXTI4_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|PROBE_IRQ_BIT|AUXINPUT_MASK) & (1<<4)

void EXTI4_IRQHandler(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(1<<4);
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <EXTI4_IRQHandler+0x50>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	f003 0310 	and.w	r3, r3, #16
 8000656:	2b00      	cmp	r3, #0
 8000658:	d105      	bne.n	8000666 <EXTI4_IRQHandler+0x1e>
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <EXTI4_IRQHandler+0x50>)
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <EXTI4_IRQHandler+0x22>
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <EXTI4_IRQHandler+0x24>
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]

    if(ifg) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00c      	beq.n	800068e <EXTI4_IRQHandler+0x46>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 8000674:	4a08      	ldr	r2, [pc, #32]	; (8000698 <EXTI4_IRQHandler+0x50>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60d3      	str	r3, [r2, #12]
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <EXTI4_IRQHandler+0x50>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6113      	str	r3, [r2, #16]
#if CONTROL_MASK & (1<<4)
  #if SAFETY_DOOR_BIT & (1<<4)
        if(!(debounce.door = debounce_start()))
  #endif
        hal.control.interrupt_callback(systemGetState());
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <EXTI4_IRQHandler+0x54>)
 8000682:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8000684:	f7ff fe50 	bl	8000328 <systemGetState>
 8000688:	4603      	mov	r3, r0
 800068a:	4618      	mov	r0, r3
 800068c:	47a0      	blx	r4
#elif QEI_SELECT_ENABLED && (QEI_SELECT_BIT & (1<<4))
        if(!(debounce.qei_select = debounce_start()))
            qei_select_handler();
#endif
    }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	bf00      	nop
 8000698:	46022000 	.word	0x46022000
 800069c:	20000f6c 	.word	0x20000f6c

080006a0 <I2C1_EV_IRQHandler>:
    hal.periph_port.register_pin(&sda);
}

#if I2C_PORT == 1
void I2C1_EV_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&i2c_port);
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <I2C1_EV_IRQHandler+0x10>)
 80006a6:	f001 fd0f 	bl	80020c8 <HAL_I2C_EV_IRQHandler>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000000 	.word	0x20000000

080006b4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&i2c_port);
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <I2C1_ER_IRQHandler+0x10>)
 80006ba:	f001 fd1f 	bl	80020fc <HAL_I2C_ER_IRQHandler>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f001 f998 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f809 	bl	80006e6 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006d4:	f000 f863 	bl	800079e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f000 f8b2 	bl	8000840 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80006dc:	f000 f86f 	bl	80007be <MX_ICACHE_Init>
  MX_MEMORYMAP_Init();
 80006e0:	f000 f8a7 	bl	8000832 <MX_MEMORYMAP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0x1c>

080006e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b09e      	sub	sp, #120	; 0x78
 80006ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	2260      	movs	r2, #96	; 0x60
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fac1 	bl	8004c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800070a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800070e:	f002 fb43 	bl	8002d98 <HAL_PWREx_ControlVoltageScaling>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000718:	f000 f9a6 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800071c:	2310      	movs	r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000730:	2301      	movs	r3, #1
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000738:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800073a:	2303      	movs	r3, #3
 800073c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800073e:	230a      	movs	r3, #10
 8000740:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800074e:	230c      	movs	r3, #12
 8000750:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fc18 	bl	8002f90 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000766:	f000 f97f 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	231f      	movs	r3, #31
 800076c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2303      	movs	r3, #3
 8000770:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	2104      	movs	r1, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fade 	bl	8003d48 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000792:	f000 f969 	bl	8000a68 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3778      	adds	r7, #120	; 0x78
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80007a2:	f002 fbd5 	bl	8002f50 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007a6:	f002 fbe3 	bl	8002f70 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80007aa:	2002      	movs	r0, #2
 80007ac:	f002 fb80 	bl	8002eb0 <HAL_PWREx_ConfigSupply>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80007b6:	f000 f957 	bl	8000a68 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}

080007be <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 80007d2:	f002 fa5f 	bl	8002c94 <HAL_ICACHE_Disable>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80007dc:	f000 f944 	bl	8000a68 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 80007e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007e4:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 80007e6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80007ea:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 80007ec:	2301      	movs	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	2000      	movs	r0, #0
 80007fe:	f002 fa79 	bl	8002cf4 <HAL_ICACHE_EnableRemapRegion>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000808:	f000 f92e 	bl	8000a68 <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800080c:	2000      	movs	r0, #0
 800080e:	f002 fa11 	bl	8002c34 <HAL_ICACHE_ConfigAssociativityMode>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ICACHE_Init+0x5e>
  {
    Error_Handler();
 8000818:	f000 f926 	bl	8000a68 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800081c:	f002 fa2a 	bl	8002c74 <HAL_ICACHE_Enable>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ICACHE_Init+0x6c>
  {
    Error_Handler();
 8000826:	f000 f91f 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b75      	ldr	r3, [pc, #468]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 8000858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800085c:	4a73      	ldr	r2, [pc, #460]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000866:	4b71      	ldr	r3, [pc, #452]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 8000868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000874:	4b6d      	ldr	r3, [pc, #436]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 8000876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800087a:	4a6c      	ldr	r2, [pc, #432]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000884:	4b69      	ldr	r3, [pc, #420]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 8000886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b66      	ldr	r3, [pc, #408]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 8000894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000898:	4a64      	ldr	r2, [pc, #400]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008a2:	4b62      	ldr	r3, [pc, #392]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 80008a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008a8:	f003 0302 	and.w	r3, r3, #2
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b0:	4b5e      	ldr	r3, [pc, #376]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 80008b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008b6:	4a5d      	ldr	r2, [pc, #372]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 80008b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008c0:	4b5a      	ldr	r3, [pc, #360]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 80008c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b57      	ldr	r3, [pc, #348]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 80008d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008d4:	4a55      	ldr	r2, [pc, #340]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008de:	4b53      	ldr	r3, [pc, #332]	; (8000a2c <MX_GPIO_Init+0x1ec>)
 80008e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2104      	movs	r1, #4
 80008f0:	484f      	ldr	r0, [pc, #316]	; (8000a30 <MX_GPIO_Init+0x1f0>)
 80008f2:	f001 fbd1 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	484e      	ldr	r0, [pc, #312]	; (8000a34 <MX_GPIO_Init+0x1f4>)
 80008fc:	f001 fbcc 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	21a0      	movs	r1, #160	; 0xa0
 8000904:	484c      	ldr	r0, [pc, #304]	; (8000a38 <MX_GPIO_Init+0x1f8>)
 8000906:	f001 fbc7 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x1fc>)
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4845      	ldr	r0, [pc, #276]	; (8000a34 <MX_GPIO_Init+0x1f4>)
 8000920:	f001 f9e2 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000924:	2304      	movs	r3, #4
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	483f      	ldr	r0, [pc, #252]	; (8000a34 <MX_GPIO_Init+0x1f4>)
 8000938:	f001 f9d6 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800093c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4839      	ldr	r0, [pc, #228]	; (8000a38 <MX_GPIO_Init+0x1f8>)
 8000952:	f001 f9c9 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4833      	ldr	r0, [pc, #204]	; (8000a38 <MX_GPIO_Init+0x1f8>)
 800096c:	f001 f9bc 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000970:	2304      	movs	r3, #4
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	482a      	ldr	r0, [pc, #168]	; (8000a30 <MX_GPIO_Init+0x1f0>)
 8000988:	f001 f9ae 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4824      	ldr	r0, [pc, #144]	; (8000a34 <MX_GPIO_Init+0x1f4>)
 80009a4:	f001 f9a0 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	481e      	ldr	r0, [pc, #120]	; (8000a40 <MX_GPIO_Init+0x200>)
 80009c6:	f001 f98f 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80009dc:	230a      	movs	r3, #10
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_GPIO_Init+0x200>)
 80009e8:	f001 f97e 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f2:	2303      	movs	r3, #3
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_GPIO_Init+0x200>)
 8000a02:	f001 f971 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8000a06:	23a0      	movs	r3, #160	; 0xa0
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_GPIO_Init+0x1f8>)
 8000a1e:	f001 f963 	bl	8001ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	46020c00 	.word	0x46020c00
 8000a30:	42021800 	.word	0x42021800
 8000a34:	42020800 	.word	0x42020800
 8000a38:	42020400 	.word	0x42020400
 8000a3c:	10110000 	.word	0x10110000
 8000a40:	42020000 	.word	0x42020000

08000a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a56:	f001 f801 	bl	8001a5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40014800 	.word	0x40014800

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <USART3_IRQHandler>:

    return &stream;
}

void UART0_IRQHandler (void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
    if(UART0->ISR & USART_ISR_RXNE) {
 8000a7a:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <USART3_IRQHandler+0xc4>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 0320 	and.w	r3, r3, #32
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d02a      	beq.n	8000adc <USART3_IRQHandler+0x68>
        uint32_t data = UART0->RDR;
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <USART3_IRQHandler+0xc4>)
 8000a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8a:	60fb      	str	r3, [r7, #12]
        if(!enqueue_realtime_command((char)data)) {             // Check and strip realtime commands...
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <USART3_IRQHandler+0xc8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	4610      	mov	r0, r2
 8000a96:	4798      	blx	r3
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f083 0301 	eor.w	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01b      	beq.n	8000adc <USART3_IRQHandler+0x68>
            uint16_t next_head = BUFNEXT(rxbuf.head, rxbuf);    // Get and increment buffer pointer
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <USART3_IRQHandler+0xcc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	3301      	adds	r3, #1
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ab2:	817b      	strh	r3, [r7, #10]
            if(next_head == rxbuf.tail)                         // If buffer full
 8000ab4:	897a      	ldrh	r2, [r7, #10]
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <USART3_IRQHandler+0xcc>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d103      	bne.n	8000ac6 <USART3_IRQHandler+0x52>
                rxbuf.overflow = 1;                             // flag overflow
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <USART3_IRQHandler+0xcc>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	725a      	strb	r2, [r3, #9]
 8000ac4:	e00a      	b.n	8000adc <USART3_IRQHandler+0x68>
            else {
                rxbuf.data[rxbuf.head] = (char)data;            // if not add data to buffer
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <USART3_IRQHandler+0xcc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	b2d1      	uxtb	r1, r2
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <USART3_IRQHandler+0xcc>)
 8000ad0:	4413      	add	r3, r2
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	72da      	strb	r2, [r3, #11]
                rxbuf.head = next_head;                         // and update pointer
 8000ad6:	897b      	ldrh	r3, [r7, #10]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <USART3_IRQHandler+0xcc>)
 8000ada:	6013      	str	r3, [r2, #0]
            }
        }
    }

    if((UART0->ISR & USART_ISR_TXE) && (UART0->CR1 & USART_CR1_TXEIE)) {
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <USART3_IRQHandler+0xc4>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d022      	beq.n	8000b2e <USART3_IRQHandler+0xba>
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <USART3_IRQHandler+0xc4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d01c      	beq.n	8000b2e <USART3_IRQHandler+0xba>
        uint_fast16_t tail = txbuf.tail;            // Get buffer pointer
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <USART3_IRQHandler+0xd0>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	607b      	str	r3, [r7, #4]
        UART0->TDR = txbuf.data[tail];              // Send next character
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <USART3_IRQHandler+0xd0>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	3308      	adds	r3, #8
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <USART3_IRQHandler+0xc4>)
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
        txbuf.tail = tail = BUFNEXT(tail, txbuf);   // and increment pointer
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <USART3_IRQHandler+0xd0>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6053      	str	r3, [r2, #4]
        if(tail == txbuf.head)                      // If buffer empty then
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <USART3_IRQHandler+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d105      	bne.n	8000b2e <USART3_IRQHandler+0xba>
            UART0->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <USART3_IRQHandler+0xc4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <USART3_IRQHandler+0xc4>)
 8000b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b2c:	6013      	str	r3, [r2, #0]
   }
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004800 	.word	0x40004800
 8000b3c:	20000054 	.word	0x20000054
 8000b40:	200000e0 	.word	0x200000e0
 8000b44:	200004ec 	.word	0x200004ec

08000b48 <USART1_IRQHandler>:

    return &stream;
}

void UART1_IRQHandler (void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
    if(UART1->ISR & USART_ISR_RXNE) {
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <USART1_IRQHandler+0xc4>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d02a      	beq.n	8000bb0 <USART1_IRQHandler+0x68>
        uint32_t data = UART1->RDR;
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <USART1_IRQHandler+0xc4>)
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5e:	60fb      	str	r3, [r7, #12]
        if(!enqueue_realtime_command1((char)data)) {            // Check and strip realtime commands...
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <USART1_IRQHandler+0xc8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	4610      	mov	r0, r2
 8000b6a:	4798      	blx	r3
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	f083 0301 	eor.w	r3, r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d01b      	beq.n	8000bb0 <USART1_IRQHandler+0x68>
            uint16_t next_head = BUFNEXT(rxbuf1.head, rxbuf1);  // Get and increment buffer pointer
 8000b78:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <USART1_IRQHandler+0xcc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b86:	817b      	strh	r3, [r7, #10]
            if(next_head == rxbuf1.tail)                        // If buffer full
 8000b88:	897a      	ldrh	r2, [r7, #10]
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <USART1_IRQHandler+0xcc>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d103      	bne.n	8000b9a <USART1_IRQHandler+0x52>
                rxbuf1.overflow = 1;                            // flag overflow
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <USART1_IRQHandler+0xcc>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	725a      	strb	r2, [r3, #9]
 8000b98:	e00a      	b.n	8000bb0 <USART1_IRQHandler+0x68>
            else {
                rxbuf1.data[rxbuf1.head] = (char)data;          // if not add data to buffer
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <USART1_IRQHandler+0xcc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	b2d1      	uxtb	r1, r2
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <USART1_IRQHandler+0xcc>)
 8000ba4:	4413      	add	r3, r2
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	72da      	strb	r2, [r3, #11]
                rxbuf1.head = next_head;                        // and update pointer
 8000baa:	897b      	ldrh	r3, [r7, #10]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <USART1_IRQHandler+0xcc>)
 8000bae:	6013      	str	r3, [r2, #0]
            }
        }
    }

    if((UART1->ISR & USART_ISR_TXE) && (UART1->CR1 & USART_CR1_TXEIE)) {
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <USART1_IRQHandler+0xc4>)
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d022      	beq.n	8000c02 <USART1_IRQHandler+0xba>
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <USART1_IRQHandler+0xc4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d01c      	beq.n	8000c02 <USART1_IRQHandler+0xba>
        uint_fast16_t tail = txbuf1.tail;           // Get buffer pointer
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <USART1_IRQHandler+0xd0>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	607b      	str	r3, [r7, #4]
        UART1->TDR = txbuf1.data[tail];             // Send next character
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <USART1_IRQHandler+0xd0>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <USART1_IRQHandler+0xc4>)
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
        txbuf1.tail = tail = BUFNEXT(tail, txbuf1); // and increment pointer
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3301      	adds	r3, #1
 8000be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <USART1_IRQHandler+0xd0>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6053      	str	r3, [r2, #4]
        if(tail == txbuf1.head)                     // If buffer empty then
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <USART1_IRQHandler+0xd0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d105      	bne.n	8000c02 <USART1_IRQHandler+0xba>
            UART1->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <USART1_IRQHandler+0xc4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <USART1_IRQHandler+0xc4>)
 8000bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c00:	6013      	str	r3, [r2, #0]
   }
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	20000058 	.word	0x20000058
 8000c14:	200006f4 	.word	0x200006f4
 8000c18:	20000b00 	.word	0x20000b00

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_MspInit+0x34>)
 8000c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <HAL_MspInit+0x34>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_MspInit+0x34>)
 8000c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000c40:	2004      	movs	r0, #4
 8000c42:	f000 ffd8 	bl	8001bf6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	46020c00 	.word	0x46020c00

08000c54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000c64:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <HAL_InitTick+0xcc>)
 8000c66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c6a:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <HAL_InitTick+0xcc>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <HAL_InitTick+0xcc>)
 8000c76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c82:	f107 0210 	add.w	r2, r7, #16
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fb7d 	bl	800438c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c92:	f003 fb67 	bl	8004364 <HAL_RCC_GetPCLK2Freq>
 8000c96:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9a:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <HAL_InitTick+0xd0>)
 8000c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca0:	0c9b      	lsrs	r3, r3, #18
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_InitTick+0xd4>)
 8000ca8:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <HAL_InitTick+0xd8>)
 8000caa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_InitTick+0xd4>)
 8000cae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <HAL_InitTick+0xd4>)
 8000cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_InitTick+0xd4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_InitTick+0xd4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000cc6:	4818      	ldr	r0, [pc, #96]	; (8000d28 <HAL_InitTick+0xd4>)
 8000cc8:	f003 fc1e 	bl	8004508 <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d118      	bne.n	8000d0c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000cda:	4813      	ldr	r0, [pc, #76]	; (8000d28 <HAL_InitTick+0xd4>)
 8000cdc:	f003 fc76 	bl	80045cc <HAL_TIM_Base_Start_IT>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000ce6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10e      	bne.n	8000d0c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d808      	bhi.n	8000d06 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	2047      	movs	r0, #71	; 0x47
 8000cfa:	f000 ff87 	bl	8001c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfe:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_InitTick+0xdc>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e002      	b.n	8000d0c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000d0c:	2047      	movs	r0, #71	; 0x47
 8000d0e:	f000 ff97 	bl	8001c40 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000d12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3738      	adds	r7, #56	; 0x38
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	46020c00 	.word	0x46020c00
 8000d24:	431bde83 	.word	0x431bde83
 8000d28:	20000d08 	.word	0x20000d08
 8000d2c:	40014800 	.word	0x40014800
 8000d30:	200000ac 	.word	0x200000ac

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM17_IRQHandler+0x10>)
 8000d92:	f003 fcbb 	bl	800470c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000d08 	.word	0x20000d08

08000da0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <SystemInit+0x68>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <SystemInit+0x68>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <SystemInit+0x6c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <SystemInit+0x6c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <SystemInit+0x6c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <SystemInit+0x6c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <SystemInit+0x6c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <SystemInit+0x6c>)
 8000dd2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dd6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000dda:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <SystemInit+0x6c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <SystemInit+0x6c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <SystemInit+0x6c>)
 8000de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <SystemInit+0x6c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SystemInit+0x68>)
 8000df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfa:	609a      	str	r2, [r3, #8]
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	46020c00 	.word	0x46020c00

08000e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e14:	f7ff ffc4 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e1a:	e003      	b.n	8000e24 <LoopCopyDataInit>

08000e1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e22:	3104      	adds	r1, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e2c:	d3f6      	bcc.n	8000e1c <CopyDataInit>
	ldr	r2, =_sbss
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e30:	e002      	b.n	8000e38 <LoopFillZerobss>

08000e32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e34:	f842 3b04 	str.w	r3, [r2], #4

08000e38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <LoopForever+0x16>)
	cmp	r2, r3
 8000e3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e3c:	d3f9      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f003 ff25 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e42:	f7ff fc41 	bl	80006c8 <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e48:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000e4c:	08004de8 	.word	0x08004de8
	ldr	r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e54:	200000b1 	.word	0x200000b1
	ldr	r2, =_sbss
 8000e58:	200000b4 	.word	0x200000b4
	ldr	r3, = _ebss
 8000e5c:	200012f8 	.word	0x200012f8

08000e60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC1_IRQHandler>

08000e62 <limit_signals_merge>:

#include "config.h"

// Merge (bitwise or) all limit switch inputs.
ISR_CODE axes_signals_t ISR_FUNC(limit_signals_merge)(limit_signals_t signals)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
    axes_signals_t state;

    state.mask = signals.min.mask | signals.min2.mask | signals.max.mask | signals.max2.mask;
 8000e6a:	793a      	ldrb	r2, [r7, #4]
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	797b      	ldrb	r3, [r7, #5]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	733b      	strb	r3, [r7, #12]

    return state;
 8000e80:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
ISR_CODE void ISR_FUNC(mc_reset)(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    // Only this function can set the system reset. Helps prevent multiple kill calls.
    if (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8000e94:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <mc_reset+0xe4>)
 8000e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e98:	f003 0320 	and.w	r3, r3, #32
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d166      	bne.n	8000f6e <mc_reset+0xde>

        system_set_exec_state_flag(EXEC_RESET);
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <mc_reset+0xe8>)
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4835      	ldr	r0, [pc, #212]	; (8000f7c <mc_reset+0xec>)
 8000ea8:	4798      	blx	r3

        if(hal.stream.suspend_read)
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <mc_reset+0xe8>)
 8000eac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <mc_reset+0x2e>
            hal.stream.suspend_read(false);
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <mc_reset+0xe8>)
 8000eb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eba:	2000      	movs	r0, #0
 8000ebc:	4798      	blx	r3

        // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
        // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
        // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
        // violated, by which, all bets are off.
        if ((state_get() & (STATE_CYCLE|STATE_HOMING|STATE_JOG)) || sys.step_control.execute_hold || sys.step_control.execute_sys_motion) {
 8000ebe:	f000 fc27 	bl	8001710 <state_get>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f003 032c 	and.w	r3, r3, #44	; 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10d      	bne.n	8000ee8 <mc_reset+0x58>
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <mc_reset+0xe4>)
 8000ece:	7e1b      	ldrb	r3, [r3, #24]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d106      	bne.n	8000ee8 <mc_reset+0x58>
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <mc_reset+0xe4>)
 8000edc:	7e1b      	ldrb	r3, [r3, #24]
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d018      	beq.n	8000f1a <mc_reset+0x8a>

            sys.position_lost = true;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <mc_reset+0xe4>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	70da      	strb	r2, [r3, #3]

            if (state_get() != STATE_HOMING)
 8000eee:	f000 fc0f 	bl	8001710 <state_get>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d005      	beq.n	8000f04 <mc_reset+0x74>
                system_set_exec_alarm(Alarm_AbortCycle);
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <mc_reset+0xe8>)
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	2103      	movs	r1, #3
 8000efe:	4820      	ldr	r0, [pc, #128]	; (8000f80 <mc_reset+0xf0>)
 8000f00:	4798      	blx	r3
 8000f02:	e008      	b.n	8000f16 <mc_reset+0x86>
            else if (!sys.rt_exec_alarm)
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <mc_reset+0xe4>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d104      	bne.n	8000f16 <mc_reset+0x86>
                system_set_exec_alarm(Alarm_HomingFailReset);
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <mc_reset+0xe8>)
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f10:	2106      	movs	r1, #6
 8000f12:	481b      	ldr	r0, [pc, #108]	; (8000f80 <mc_reset+0xf0>)
 8000f14:	4798      	blx	r3

            st_go_idle(); // Force kill steppers. Position has likely been lost.
 8000f16:	f000 fc21 	bl	800175c <st_go_idle>
        }

        if(hal.control.get_state().e_stop)
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <mc_reset+0xe8>)
 8000f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f1e:	4798      	blx	r3
 8000f20:	4603      	mov	r3, r0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <mc_reset+0xaa>
            system_set_exec_alarm(Alarm_EStop);
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <mc_reset+0xe8>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	210a      	movs	r1, #10
 8000f34:	4812      	ldr	r0, [pc, #72]	; (8000f80 <mc_reset+0xf0>)
 8000f36:	4798      	blx	r3
 8000f38:	e010      	b.n	8000f5c <mc_reset+0xcc>
        else if(hal.control.get_state().motor_fault)
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <mc_reset+0xe8>)
 8000f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f3e:	4798      	blx	r3
 8000f40:	4603      	mov	r3, r0
 8000f42:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <mc_reset+0xcc>
            system_set_exec_alarm(Alarm_MotorFault);
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <mc_reset+0xe8>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	2111      	movs	r1, #17
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <mc_reset+0xf0>)
 8000f5a:	4798      	blx	r3

        if(grbl.on_reset)
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <mc_reset+0xf4>)
 8000f5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <mc_reset+0xde>
            grbl.on_reset();
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <mc_reset+0xf4>)
 8000f68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000f6c:	4798      	blx	r3
    }
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000dec 	.word	0x20000dec
 8000f78:	20000f6c 	.word	0x20000f6c
 8000f7c:	20000e34 	.word	0x20000e34
 8000f80:	20000e38 	.word	0x20000e38
 8000f84:	20000e84 	.word	0x20000e84

08000f88 <enqueue_feed_override>:
} override_queue_t;

static override_queue_t feed = {0}, spindle = {0}, coolant = {0};

ISR_CODE void ISR_FUNC(enqueue_feed_override)(uint8_t cmd)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = (feed.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <enqueue_feed_override+0x40>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	60fb      	str	r3, [r7, #12]

    if(bptr != feed.tail) {         // If not buffer full
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <enqueue_feed_override+0x40>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d008      	beq.n	8000fba <enqueue_feed_override+0x32>
        feed.buf[feed.head] = cmd;  // add data to buffer
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <enqueue_feed_override+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <enqueue_feed_override+0x40>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	79fa      	ldrb	r2, [r7, #7]
 8000fb2:	721a      	strb	r2, [r3, #8]
        feed.head = bptr;           // and update pointer
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <enqueue_feed_override+0x40>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6013      	str	r3, [r2, #0]
    }
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20001120 	.word	0x20001120

08000fcc <enqueue_spindle_override>:

    return data;
}

ISR_CODE void ISR_FUNC(enqueue_spindle_override)(uint8_t cmd)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = (spindle.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <enqueue_spindle_override+0x40>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	60fb      	str	r3, [r7, #12]

    if(bptr != spindle.tail) {              // If not buffer full
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <enqueue_spindle_override+0x40>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d008      	beq.n	8000ffe <enqueue_spindle_override+0x32>
        spindle.buf[spindle.head] = cmd;    // add data to buffer
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <enqueue_spindle_override+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <enqueue_spindle_override+0x40>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	721a      	strb	r2, [r3, #8]
        spindle.head = bptr;                // and update pointer
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <enqueue_spindle_override+0x40>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6013      	str	r3, [r2, #0]
    }
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20001138 	.word	0x20001138

08001010 <enqueue_coolant_override>:

    return data;
}

ISR_CODE void ISR_FUNC(enqueue_coolant_override)(uint8_t cmd)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = (coolant.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <enqueue_coolant_override+0x40>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	60fb      	str	r3, [r7, #12]

    if(bptr != coolant.tail) {              // If not buffer full
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <enqueue_coolant_override+0x40>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d008      	beq.n	8001042 <enqueue_coolant_override+0x32>
        coolant.buf[coolant.head] = cmd;    // add data to buffer
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <enqueue_coolant_override+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <enqueue_coolant_override+0x40>)
 8001036:	4413      	add	r3, r2
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	721a      	strb	r2, [r3, #8]
        coolant.head = bptr;                // and update pointer
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <enqueue_coolant_override+0x40>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6013      	str	r3, [r2, #0]
    }
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20001150 	.word	0x20001150

08001054 <protocol_enqueue_realtime_command>:
// Pick off (drop) real-time command characters from input stream.
// These characters are not passed into the main buffer,
// but rather sets system state flag bits for later execution by protocol_exec_rt_system().
// Called from input stream interrupt handler.
ISR_CODE bool ISR_FUNC(protocol_enqueue_realtime_command)(char c)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
    static bool esc = false;

    bool drop = false;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]

    // 1. Process characters in the ranges 0x - 1x and 8x-Ax
    // Characters with functions assigned are always acted upon even when the input stream
    // is redirected to a non-interactive stream such as from a SD card.

    switch ((unsigned char)c) {
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	3b03      	subs	r3, #3
 8001066:	2ba1      	cmp	r3, #161	; 0xa1
 8001068:	f200 8290 	bhi.w	800158c <protocol_enqueue_realtime_command+0x538>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <protocol_enqueue_realtime_command+0x20>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	0800135f 	.word	0x0800135f
 8001078:	0800158d 	.word	0x0800158d
 800107c:	080013bb 	.word	0x080013bb
 8001080:	0800158d 	.word	0x0800158d
 8001084:	0800158d 	.word	0x0800158d
 8001088:	0800158d 	.word	0x0800158d
 800108c:	0800158d 	.word	0x0800158d
 8001090:	080015d1 	.word	0x080015d1
 8001094:	0800158d 	.word	0x0800158d
 8001098:	0800158d 	.word	0x0800158d
 800109c:	080015d1 	.word	0x080015d1
 80010a0:	0800158d 	.word	0x0800158d
 80010a4:	0800158d 	.word	0x0800158d
 80010a8:	0800158d 	.word	0x0800158d
 80010ac:	0800158d 	.word	0x0800158d
 80010b0:	0800158d 	.word	0x0800158d
 80010b4:	0800158d 	.word	0x0800158d
 80010b8:	08001549 	.word	0x08001549
 80010bc:	0800158d 	.word	0x0800158d
 80010c0:	0800158d 	.word	0x0800158d
 80010c4:	0800158d 	.word	0x0800158d
 80010c8:	08001341 	.word	0x08001341
 80010cc:	08001323 	.word	0x08001323
 80010d0:	0800158d 	.word	0x0800158d
 80010d4:	0800158d 	.word	0x0800158d
 80010d8:	0800158d 	.word	0x0800158d
 80010dc:	0800158d 	.word	0x0800158d
 80010e0:	0800158d 	.word	0x0800158d
 80010e4:	0800158d 	.word	0x0800158d
 80010e8:	0800158d 	.word	0x0800158d
 80010ec:	0800158d 	.word	0x0800158d
 80010f0:	0800158d 	.word	0x0800158d
 80010f4:	0800158d 	.word	0x0800158d
 80010f8:	080012fd 	.word	0x080012fd
 80010fc:	0800158d 	.word	0x0800158d
 8001100:	0800158d 	.word	0x0800158d
 8001104:	0800158d 	.word	0x0800158d
 8001108:	0800158d 	.word	0x0800158d
 800110c:	0800158d 	.word	0x0800158d
 8001110:	0800158d 	.word	0x0800158d
 8001114:	0800158d 	.word	0x0800158d
 8001118:	0800158d 	.word	0x0800158d
 800111c:	0800158d 	.word	0x0800158d
 8001120:	0800158d 	.word	0x0800158d
 8001124:	0800158d 	.word	0x0800158d
 8001128:	0800158d 	.word	0x0800158d
 800112c:	0800158d 	.word	0x0800158d
 8001130:	0800158d 	.word	0x0800158d
 8001134:	0800158d 	.word	0x0800158d
 8001138:	0800158d 	.word	0x0800158d
 800113c:	0800158d 	.word	0x0800158d
 8001140:	0800158d 	.word	0x0800158d
 8001144:	0800158d 	.word	0x0800158d
 8001148:	0800158d 	.word	0x0800158d
 800114c:	0800158d 	.word	0x0800158d
 8001150:	0800158d 	.word	0x0800158d
 8001154:	0800158d 	.word	0x0800158d
 8001158:	0800158d 	.word	0x0800158d
 800115c:	0800158d 	.word	0x0800158d
 8001160:	0800158d 	.word	0x0800158d
 8001164:	0800158d 	.word	0x0800158d
 8001168:	0800158d 	.word	0x0800158d
 800116c:	0800158d 	.word	0x0800158d
 8001170:	0800158d 	.word	0x0800158d
 8001174:	0800158d 	.word	0x0800158d
 8001178:	0800158d 	.word	0x0800158d
 800117c:	0800158d 	.word	0x0800158d
 8001180:	0800158d 	.word	0x0800158d
 8001184:	0800158d 	.word	0x0800158d
 8001188:	0800158d 	.word	0x0800158d
 800118c:	0800158d 	.word	0x0800158d
 8001190:	0800158d 	.word	0x0800158d
 8001194:	0800158d 	.word	0x0800158d
 8001198:	0800158d 	.word	0x0800158d
 800119c:	0800158d 	.word	0x0800158d
 80011a0:	0800158d 	.word	0x0800158d
 80011a4:	0800158d 	.word	0x0800158d
 80011a8:	0800158d 	.word	0x0800158d
 80011ac:	0800158d 	.word	0x0800158d
 80011b0:	0800158d 	.word	0x0800158d
 80011b4:	0800158d 	.word	0x0800158d
 80011b8:	0800158d 	.word	0x0800158d
 80011bc:	0800158d 	.word	0x0800158d
 80011c0:	0800158d 	.word	0x0800158d
 80011c4:	0800158d 	.word	0x0800158d
 80011c8:	0800158d 	.word	0x0800158d
 80011cc:	0800158d 	.word	0x0800158d
 80011d0:	0800158d 	.word	0x0800158d
 80011d4:	0800158d 	.word	0x0800158d
 80011d8:	0800158d 	.word	0x0800158d
 80011dc:	0800158d 	.word	0x0800158d
 80011e0:	0800158d 	.word	0x0800158d
 80011e4:	0800158d 	.word	0x0800158d
 80011e8:	0800158d 	.word	0x0800158d
 80011ec:	0800158d 	.word	0x0800158d
 80011f0:	0800158d 	.word	0x0800158d
 80011f4:	0800158d 	.word	0x0800158d
 80011f8:	0800158d 	.word	0x0800158d
 80011fc:	0800158d 	.word	0x0800158d
 8001200:	0800158d 	.word	0x0800158d
 8001204:	0800158d 	.word	0x0800158d
 8001208:	0800158d 	.word	0x0800158d
 800120c:	0800158d 	.word	0x0800158d
 8001210:	0800158d 	.word	0x0800158d
 8001214:	0800158d 	.word	0x0800158d
 8001218:	0800158d 	.word	0x0800158d
 800121c:	0800158d 	.word	0x0800158d
 8001220:	0800158d 	.word	0x0800158d
 8001224:	0800158d 	.word	0x0800158d
 8001228:	0800158d 	.word	0x0800158d
 800122c:	0800158d 	.word	0x0800158d
 8001230:	0800158d 	.word	0x0800158d
 8001234:	0800158d 	.word	0x0800158d
 8001238:	0800158d 	.word	0x0800158d
 800123c:	0800158d 	.word	0x0800158d
 8001240:	0800158d 	.word	0x0800158d
 8001244:	0800158d 	.word	0x0800158d
 8001248:	0800158d 	.word	0x0800158d
 800124c:	0800158d 	.word	0x0800158d
 8001250:	0800158d 	.word	0x0800158d
 8001254:	0800158d 	.word	0x0800158d
 8001258:	0800158d 	.word	0x0800158d
 800125c:	0800158d 	.word	0x0800158d
 8001260:	0800158d 	.word	0x0800158d
 8001264:	0800158d 	.word	0x0800158d
 8001268:	080013bb 	.word	0x080013bb
 800126c:	080013d9 	.word	0x080013d9
 8001270:	080013f1 	.word	0x080013f1
 8001274:	0800144d 	.word	0x0800144d
 8001278:	08001401 	.word	0x08001401
 800127c:	0800141d 	.word	0x0800141d
 8001280:	0800158d 	.word	0x0800158d
 8001284:	08001373 	.word	0x08001373
 8001288:	08001475 	.word	0x08001475
 800128c:	080014a7 	.word	0x080014a7
 8001290:	0800153b 	.word	0x0800153b
 8001294:	080014e5 	.word	0x080014e5
 8001298:	080014f7 	.word	0x080014f7
 800129c:	0800158d 	.word	0x0800158d
 80012a0:	0800158d 	.word	0x0800158d
 80012a4:	0800158d 	.word	0x0800158d
 80012a8:	0800151f 	.word	0x0800151f
 80012ac:	0800151f 	.word	0x0800151f
 80012b0:	0800151f 	.word	0x0800151f
 80012b4:	0800151f 	.word	0x0800151f
 80012b8:	0800151f 	.word	0x0800151f
 80012bc:	0800151f 	.word	0x0800151f
 80012c0:	0800151f 	.word	0x0800151f
 80012c4:	0800151f 	.word	0x0800151f
 80012c8:	0800158d 	.word	0x0800158d
 80012cc:	0800152d 	.word	0x0800152d
 80012d0:	0800152d 	.word	0x0800152d
 80012d4:	0800152d 	.word	0x0800152d
 80012d8:	0800152d 	.word	0x0800152d
 80012dc:	0800152d 	.word	0x0800152d
 80012e0:	0800152d 	.word	0x0800152d
 80012e4:	0800158d 	.word	0x0800158d
 80012e8:	0800153b 	.word	0x0800153b
 80012ec:	0800153b 	.word	0x0800153b
 80012f0:	080014d3 	.word	0x080014d3
 80012f4:	0800158d 	.word	0x0800158d
 80012f8:	0800145f 	.word	0x0800145f
        case '\n':
        case '\r':
            break;

        case '$':
            if(char_counter == 0)
 80012fc:	4b99      	ldr	r3, [pc, #612]	; (8001564 <protocol_enqueue_realtime_command+0x510>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 8167 	bne.w	80015d4 <protocol_enqueue_realtime_command+0x580>
                keep_rt_commands = !settings.flags.legacy_rt_commands;
 8001306:	4b98      	ldr	r3, [pc, #608]	; (8001568 <protocol_enqueue_realtime_command+0x514>)
 8001308:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800130c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b93      	ldr	r3, [pc, #588]	; (800156c <protocol_enqueue_realtime_command+0x518>)
 800131e:	701a      	strb	r2, [r3, #0]
            break;
 8001320:	e158      	b.n	80015d4 <protocol_enqueue_realtime_command+0x580>

        case CMD_STOP:
            system_set_exec_state_flag(EXEC_STOP);
 8001322:	4b93      	ldr	r3, [pc, #588]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 8001324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001326:	2110      	movs	r1, #16
 8001328:	4892      	ldr	r0, [pc, #584]	; (8001574 <protocol_enqueue_realtime_command+0x520>)
 800132a:	4798      	blx	r3
            char_counter = 0;
 800132c:	4b8d      	ldr	r3, [pc, #564]	; (8001564 <protocol_enqueue_realtime_command+0x510>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 8001332:	4b8f      	ldr	r3, [pc, #572]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 8001334:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001338:	4798      	blx	r3
            drop = true;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
            break;
 800133e:	e15c      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_RESET: // Call motion control reset routine.
            if(!hal.control.get_state().e_stop)
 8001340:	4b8b      	ldr	r3, [pc, #556]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 8001342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001344:	4798      	blx	r3
 8001346:	4603      	mov	r3, r0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <protocol_enqueue_realtime_command+0x304>
                mc_reset();
 8001354:	f7ff fd9c 	bl	8000e90 <mc_reset>
            drop = true;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
            break;
 800135c:	e14d      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

#if COMPATIBILITY_LEVEL == 0
        case CMD_EXIT: // Call motion control reset routine.
            mc_reset();
 800135e:	f7ff fd97 	bl	8000e90 <mc_reset>
            sys.flags.exit = On;
 8001362:	4a85      	ldr	r2, [pc, #532]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 8001364:	7d93      	ldrb	r3, [r2, #22]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	7593      	strb	r3, [r2, #22]
            drop = true;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
            break;
 8001370:	e143      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_STATUS_REPORT_ALL: // Add all statuses to report
            {
                report_tracking_flags_t report;

                report.value = (uint32_t)Report_All;
 8001372:	4b82      	ldr	r3, [pc, #520]	; (800157c <protocol_enqueue_realtime_command+0x528>)
 8001374:	60bb      	str	r3, [r7, #8]
                report.tool_offset = sys.report.tool_offset;
 8001376:	4b80      	ldr	r3, [pc, #512]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 8001378:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800137c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7a7b      	ldrb	r3, [r7, #9]
 8001384:	f362 0382 	bfi	r3, r2, #2, #1
 8001388:	727b      	strb	r3, [r7, #9]
                report.m66result = sys.var5399 > -2;
 800138a:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 800138c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001392:	bfac      	ite	ge
 8001394:	2301      	movge	r3, #1
 8001396:	2300      	movlt	r3, #0
 8001398:	b2da      	uxtb	r2, r3
 800139a:	7a7b      	ldrb	r3, [r7, #9]
 800139c:	f362 03c3 	bfi	r3, r2, #3, #1
 80013a0:	727b      	strb	r3, [r7, #9]

                system_add_rt_report((report_tracking_t)report.value);
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 faf1 	bl	800198c <system_add_rt_report>
            }
            system_set_exec_state_flag(EXEC_STATUS_REPORT);
 80013aa:	4b71      	ldr	r3, [pc, #452]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 80013ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ae:	2101      	movs	r1, #1
 80013b0:	4870      	ldr	r0, [pc, #448]	; (8001574 <protocol_enqueue_realtime_command+0x520>)
 80013b2:	4798      	blx	r3
            drop = true;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
            break;
 80013b8:	e11f      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_STATUS_REPORT:
        case 0x05:
            if(!sys.flags.auto_reporting)
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 80013bc:	7ddb      	ldrb	r3, [r3, #23]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <protocol_enqueue_realtime_command+0x37e>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 80013c8:	4b69      	ldr	r3, [pc, #420]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 80013ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013cc:	2101      	movs	r1, #1
 80013ce:	4869      	ldr	r0, [pc, #420]	; (8001574 <protocol_enqueue_realtime_command+0x520>)
 80013d0:	4798      	blx	r3
            drop = true;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
            break;
 80013d6:	e110      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_CYCLE_START:
            system_set_exec_state_flag(EXEC_CYCLE_START);
 80013d8:	4b65      	ldr	r3, [pc, #404]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 80013da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013dc:	2102      	movs	r1, #2
 80013de:	4865      	ldr	r0, [pc, #404]	; (8001574 <protocol_enqueue_realtime_command+0x520>)
 80013e0:	4798      	blx	r3
            // Cancel any pending tool change
            gc_state.tool_change = false;
 80013e2:	4b67      	ldr	r3, [pc, #412]	; (8001580 <protocol_enqueue_realtime_command+0x52c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
            drop = true;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
            break;
 80013ee:	e104      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_FEED_HOLD:
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 80013f0:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	2108      	movs	r1, #8
 80013f6:	485f      	ldr	r0, [pc, #380]	; (8001574 <protocol_enqueue_realtime_command+0x520>)
 80013f8:	4798      	blx	r3
            drop = true;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
            break;
 80013fe:	e0fc      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_SAFETY_DOOR:
            if(state_get() != STATE_SAFETY_DOOR) {
 8001400:	f000 f986 	bl	8001710 <state_get>
 8001404:	4603      	mov	r3, r0
 8001406:	2b40      	cmp	r3, #64	; 0x40
 8001408:	f000 80e6 	beq.w	80015d8 <protocol_enqueue_realtime_command+0x584>
                system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 800140e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001410:	2140      	movs	r1, #64	; 0x40
 8001412:	4858      	ldr	r0, [pc, #352]	; (8001574 <protocol_enqueue_realtime_command+0x520>)
 8001414:	4798      	blx	r3
                drop = true;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800141a:	e0dd      	b.n	80015d8 <protocol_enqueue_realtime_command+0x584>

        case CMD_JOG_CANCEL:
            char_counter = 0;
 800141c:	4b51      	ldr	r3, [pc, #324]	; (8001564 <protocol_enqueue_realtime_command+0x510>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
            drop = true;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
            hal.stream.cancel_read_buffer();
 8001426:	4b52      	ldr	r3, [pc, #328]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 8001428:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800142c:	4798      	blx	r3
#ifdef KINEMATICS_API // needed when kinematics algorithm segments long jog distances (as it blocks reading from input stream)
            if (state_get() & STATE_JOG) // Block all other states from invoking motion cancel.
                system_set_exec_state_flag(EXEC_MOTION_CANCEL);
#endif
            if(grbl.on_jog_cancel)
 800142e:	4b55      	ldr	r3, [pc, #340]	; (8001584 <protocol_enqueue_realtime_command+0x530>)
 8001430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80d1 	beq.w	80015dc <protocol_enqueue_realtime_command+0x588>
                grbl.on_jog_cancel(state_get());
 800143a:	4b52      	ldr	r3, [pc, #328]	; (8001584 <protocol_enqueue_realtime_command+0x530>)
 800143c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8001440:	f000 f966 	bl	8001710 <state_get>
 8001444:	4603      	mov	r3, r0
 8001446:	4618      	mov	r0, r3
 8001448:	47a0      	blx	r4
            break;
 800144a:	e0c7      	b.n	80015dc <protocol_enqueue_realtime_command+0x588>

        case CMD_GCODE_REPORT:
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 800144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001450:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001454:	4847      	ldr	r0, [pc, #284]	; (8001574 <protocol_enqueue_realtime_command+0x520>)
 8001456:	4798      	blx	r3
            drop = true;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
            break;
 800145c:	e0cd      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_PROBE_CONNECTED_TOGGLE:
            if(hal.probe.connected_toggle)
 800145e:	4b44      	ldr	r3, [pc, #272]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 8001460:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80bb 	beq.w	80015e0 <protocol_enqueue_realtime_command+0x58c>
                hal.probe.connected_toggle();
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 800146c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001470:	4798      	blx	r3
            break;
 8001472:	e0b5      	b.n	80015e0 <protocol_enqueue_realtime_command+0x58c>

        case CMD_OPTIONAL_STOP_TOGGLE:
            if(!hal.signals_cap.stop_disable) // Not available as realtime command if HAL supports physical switch
 8001474:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 8001476:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	f040 80af 	bne.w	80015e4 <protocol_enqueue_realtime_command+0x590>
                sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 8001486:	4b3c      	ldr	r3, [pc, #240]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 8001488:	7d9b      	ldrb	r3, [r3, #22]
 800148a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2d9      	uxtb	r1, r3
 800149a:	4a37      	ldr	r2, [pc, #220]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 800149c:	7d93      	ldrb	r3, [r2, #22]
 800149e:	f361 1386 	bfi	r3, r1, #6, #1
 80014a2:	7593      	strb	r3, [r2, #22]
            break;
 80014a4:	e09e      	b.n	80015e4 <protocol_enqueue_realtime_command+0x590>

        case CMD_SINGLE_BLOCK_TOGGLE:
            if(!hal.signals_cap.single_block) // Not available as realtime command if HAL supports physical switch
 80014a6:	4b32      	ldr	r3, [pc, #200]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 80014a8:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 8098 	bne.w	80015e8 <protocol_enqueue_realtime_command+0x594>
                sys.flags.single_block = !sys.flags.single_block;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 80014ba:	7d9b      	ldrb	r3, [r3, #22]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	09db      	lsrs	r3, r3, #7
 80014c4:	b2d9      	uxtb	r1, r3
 80014c6:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 80014c8:	7d93      	ldrb	r3, [r2, #22]
 80014ca:	f361 13c7 	bfi	r3, r1, #7, #1
 80014ce:	7593      	strb	r3, [r2, #22]
            break;
 80014d0:	e08a      	b.n	80015e8 <protocol_enqueue_realtime_command+0x594>

        case CMD_PID_REPORT:
            system_set_exec_state_flag(EXEC_PID_REPORT);
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 80014d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014da:	4826      	ldr	r0, [pc, #152]	; (8001574 <protocol_enqueue_realtime_command+0x520>)
 80014dc:	4798      	blx	r3
            drop = true;
 80014de:	2301      	movs	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
            break;
 80014e2:	e08a      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_MPG_MODE_TOGGLE:           // Switch off MPG mode
            if(hal.stream.type == StreamType_MPG)
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 80014e6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d17e      	bne.n	80015ec <protocol_enqueue_realtime_command+0x598>
                stream_mpg_enable(false);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f980 	bl	80017f4 <stream_mpg_enable>
            break;
 80014f4:	e07a      	b.n	80015ec <protocol_enqueue_realtime_command+0x598>

        case CMD_AUTO_REPORTING_TOGGLE:
            if(settings.report_interval)
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <protocol_enqueue_realtime_command+0x514>)
 80014f8:	8a9b      	ldrh	r3, [r3, #20]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d078      	beq.n	80015f0 <protocol_enqueue_realtime_command+0x59c>
                sys.flags.auto_reporting = !sys.flags.auto_reporting;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 8001500:	7ddb      	ldrb	r3, [r3, #23]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2d9      	uxtb	r1, r3
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <protocol_enqueue_realtime_command+0x524>)
 8001514:	7dd3      	ldrb	r3, [r2, #23]
 8001516:	f361 0341 	bfi	r3, r1, #1, #1
 800151a:	75d3      	strb	r3, [r2, #23]
            break;
 800151c:	e068      	b.n	80015f0 <protocol_enqueue_realtime_command+0x59c>
        case CMD_OVERRIDE_FEED_FINE_PLUS:
        case CMD_OVERRIDE_FEED_FINE_MINUS:
        case CMD_OVERRIDE_RAPID_RESET:
        case CMD_OVERRIDE_RAPID_MEDIUM:
        case CMD_OVERRIDE_RAPID_LOW:
            drop = true;
 800151e:	2301      	movs	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
            enqueue_feed_override(c);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fd2f 	bl	8000f88 <enqueue_feed_override>
            break;
 800152a:	e066      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
        case CMD_OVERRIDE_SPINDLE_COARSE_PLUS:
        case CMD_OVERRIDE_SPINDLE_COARSE_MINUS:
        case CMD_OVERRIDE_SPINDLE_FINE_PLUS:
        case CMD_OVERRIDE_SPINDLE_FINE_MINUS:
        case CMD_OVERRIDE_SPINDLE_STOP:
            drop = true;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
            enqueue_spindle_override((uint8_t)c);
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fd4a 	bl	8000fcc <enqueue_spindle_override>
            break;
 8001538:	e05f      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_OVERRIDE_COOLANT_FLOOD_TOGGLE:
        case CMD_OVERRIDE_COOLANT_MIST_TOGGLE:
        case CMD_OVERRIDE_FAN0_TOGGLE:
            drop = true;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
            enqueue_coolant_override((uint8_t)c);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fd65 	bl	8001010 <enqueue_coolant_override>
            break;
 8001546:	e058      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>

        case CMD_REBOOT:
            if(esc && hal.reboot)
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <protocol_enqueue_realtime_command+0x534>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d051      	beq.n	80015f4 <protocol_enqueue_realtime_command+0x5a0>
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 8001552:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001556:	2b00      	cmp	r3, #0
 8001558:	d04c      	beq.n	80015f4 <protocol_enqueue_realtime_command+0x5a0>
                hal.reboot(); // Force MCU reboot. This call should never return.
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <protocol_enqueue_realtime_command+0x51c>)
 800155c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001560:	4798      	blx	r3
            break;
 8001562:	e047      	b.n	80015f4 <protocol_enqueue_realtime_command+0x5a0>
 8001564:	20001168 	.word	0x20001168
 8001568:	20001170 	.word	0x20001170
 800156c:	2000116c 	.word	0x2000116c
 8001570:	20000f6c 	.word	0x20000f6c
 8001574:	20000e34 	.word	0x20000e34
 8001578:	20000dec 	.word	0x20000dec
 800157c:	8001ffff 	.word	0x8001ffff
 8001580:	20000d54 	.word	0x20000d54
 8001584:	20000e84 	.word	0x20000e84
 8001588:	2000116d 	.word	0x2000116d

        default:
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b1f      	cmp	r3, #31
 8001590:	d802      	bhi.n	8001598 <protocol_enqueue_realtime_command+0x544>
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b08      	cmp	r3, #8
 8001596:	d106      	bne.n	80015a6 <protocol_enqueue_realtime_command+0x552>
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	da2b      	bge.n	80015f8 <protocol_enqueue_realtime_command+0x5a4>
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2bbf      	cmp	r3, #191	; 0xbf
 80015a4:	d828      	bhi.n	80015f8 <protocol_enqueue_realtime_command+0x5a4>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <protocol_enqueue_realtime_command+0x6a0>)
 80015a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <protocol_enqueue_realtime_command+0x56a>
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <protocol_enqueue_realtime_command+0x6a0>)
 80015b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	4610      	mov	r0, r2
 80015b6:	4798      	blx	r3
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <protocol_enqueue_realtime_command+0x56e>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <protocol_enqueue_realtime_command+0x570>
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
            break;
 80015ce:	e013      	b.n	80015f8 <protocol_enqueue_realtime_command+0x5a4>
            break;
 80015d0:	bf00      	nop
 80015d2:	e012      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015d4:	bf00      	nop
 80015d6:	e010      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015d8:	bf00      	nop
 80015da:	e00e      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015dc:	bf00      	nop
 80015de:	e00c      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015e0:	bf00      	nop
 80015e2:	e00a      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015e4:	bf00      	nop
 80015e6:	e008      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015e8:	bf00      	nop
 80015ea:	e006      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015ec:	bf00      	nop
 80015ee:	e004      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015f0:	bf00      	nop
 80015f2:	e002      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015f4:	bf00      	nop
 80015f6:	e000      	b.n	80015fa <protocol_enqueue_realtime_command+0x5a6>
            break;
 80015f8:	bf00      	nop

    // 2. Process printable ASCII characters and top-bit set characters
    //    If legacy realtime commands are disabled they are returned to the input stream
    //    when appearing in settings ($ commands) or comments

    if(!drop) switch ((unsigned char)c) {
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f083 0301 	eor.w	r3, r3, #1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d069      	beq.n	80016da <protocol_enqueue_realtime_command+0x686>
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b7e      	cmp	r3, #126	; 0x7e
 800160a:	d01c      	beq.n	8001646 <protocol_enqueue_realtime_command+0x5f2>
 800160c:	2b7e      	cmp	r3, #126	; 0x7e
 800160e:	dc4c      	bgt.n	80016aa <protocol_enqueue_realtime_command+0x656>
 8001610:	2b21      	cmp	r3, #33	; 0x21
 8001612:	d033      	beq.n	800167c <protocol_enqueue_realtime_command+0x628>
 8001614:	2b3f      	cmp	r3, #63	; 0x3f
 8001616:	d148      	bne.n	80016aa <protocol_enqueue_realtime_command+0x656>

        case CMD_STATUS_REPORT_LEGACY:
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <protocol_enqueue_realtime_command+0x6a4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	f083 0301 	eor.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d107      	bne.n	8001636 <protocol_enqueue_realtime_command+0x5e2>
 8001626:	4b35      	ldr	r3, [pc, #212]	; (80016fc <protocol_enqueue_realtime_command+0x6a8>)
 8001628:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d04c      	beq.n	80016d0 <protocol_enqueue_realtime_command+0x67c>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <protocol_enqueue_realtime_command+0x6ac>)
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	2101      	movs	r1, #1
 800163c:	4831      	ldr	r0, [pc, #196]	; (8001704 <protocol_enqueue_realtime_command+0x6b0>)
 800163e:	4798      	blx	r3
                drop = true;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8001644:	e044      	b.n	80016d0 <protocol_enqueue_realtime_command+0x67c>

        case CMD_CYCLE_START_LEGACY:
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <protocol_enqueue_realtime_command+0x6a4>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	f083 0301 	eor.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <protocol_enqueue_realtime_command+0x610>
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <protocol_enqueue_realtime_command+0x6a8>)
 8001656:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d037      	beq.n	80016d4 <protocol_enqueue_realtime_command+0x680>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <protocol_enqueue_realtime_command+0x6ac>)
 8001666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001668:	2102      	movs	r1, #2
 800166a:	4826      	ldr	r0, [pc, #152]	; (8001704 <protocol_enqueue_realtime_command+0x6b0>)
 800166c:	4798      	blx	r3
                // Cancel any pending tool change
                gc_state.tool_change = false;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <protocol_enqueue_realtime_command+0x6b4>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
                drop = true;
 8001676:	2301      	movs	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800167a:	e02b      	b.n	80016d4 <protocol_enqueue_realtime_command+0x680>

        case CMD_FEED_HOLD_LEGACY:
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <protocol_enqueue_realtime_command+0x6a4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	f083 0301 	eor.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d107      	bne.n	800169a <protocol_enqueue_realtime_command+0x646>
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <protocol_enqueue_realtime_command+0x6a8>)
 800168c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8001690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01e      	beq.n	80016d8 <protocol_enqueue_realtime_command+0x684>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <protocol_enqueue_realtime_command+0x6ac>)
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	2108      	movs	r1, #8
 80016a0:	4818      	ldr	r0, [pc, #96]	; (8001704 <protocol_enqueue_realtime_command+0x6b0>)
 80016a2:	4798      	blx	r3
                drop = true;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80016a8:	e016      	b.n	80016d8 <protocol_enqueue_realtime_command+0x684>

        default: // Drop top bit set characters
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <protocol_enqueue_realtime_command+0x6a4>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	f083 0301 	eor.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <protocol_enqueue_realtime_command+0x66e>
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b7e      	cmp	r3, #126	; 0x7e
 80016bc:	d901      	bls.n	80016c2 <protocol_enqueue_realtime_command+0x66e>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <protocol_enqueue_realtime_command+0x670>
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
            break;
 80016ce:	e004      	b.n	80016da <protocol_enqueue_realtime_command+0x686>
            break;
 80016d0:	bf00      	nop
 80016d2:	e002      	b.n	80016da <protocol_enqueue_realtime_command+0x686>
            break;
 80016d4:	bf00      	nop
 80016d6:	e000      	b.n	80016da <protocol_enqueue_realtime_command+0x686>
            break;
 80016d8:	bf00      	nop
    }

    esc = c == ASCII_ESC;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b1b      	cmp	r3, #27
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <protocol_enqueue_realtime_command+0x6b8>)
 80016e8:	701a      	strb	r2, [r3, #0]

    return drop;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	20000e84 	.word	0x20000e84
 80016f8:	2000116c 	.word	0x2000116c
 80016fc:	20001170 	.word	0x20001170
 8001700:	20000f6c 	.word	0x20000f6c
 8001704:	20000e34 	.word	0x20000e34
 8001708:	20000d54 	.word	0x20000d54
 800170c:	2000116d 	.word	0x2000116d

08001710 <state_get>:

    stateHandler(rt_exec);
}

ISR_CODE sys_state_t ISR_FUNC(state_get)(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
    return sys_state;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <state_get+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200012dc 	.word	0x200012dc

08001728 <st_deenergize>:
    }
}

// Callback from delay to deenergize steppers after movement, might been cancelled
void st_deenergize (void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
    if(sys.steppers_deenergize) {
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <st_deenergize+0x28>)
 800172e:	799b      	ldrb	r3, [r3, #6]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <st_deenergize+0x22>
        hal.stepper.enable(settings.steppers.deenergize);
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <st_deenergize+0x2c>)
 8001738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <st_deenergize+0x30>)
 800173e:	f892 00ec 	ldrb.w	r0, [r2, #236]	; 0xec
 8001742:	4798      	blx	r3
        sys.steppers_deenergize = false;
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <st_deenergize+0x28>)
 8001746:	2200      	movs	r2, #0
 8001748:	719a      	strb	r2, [r3, #6]
    }
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000dec 	.word	0x20000dec
 8001754:	20000f6c 	.word	0x20000f6c
 8001758:	20001170 	.word	0x20001170

0800175c <st_go_idle>:
    hal.stepper.wake_up();
}

// Stepper shutdown
ISR_CODE void ISR_FUNC(st_go_idle)(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
    // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.

    sys_state_t state = state_get();
 8001762:	f7ff ffd5 	bl	8001710 <state_get>
 8001766:	6078      	str	r0, [r7, #4]

    hal.stepper.go_idle(false);
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <st_go_idle+0x88>)
 800176a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800176e:	2000      	movs	r0, #0
 8001770:	4798      	blx	r3

    // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
    if (((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <st_go_idle+0x8c>)
 8001774:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	d106      	bne.n	800178a <st_go_idle+0x2e>
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <st_go_idle+0x90>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <st_go_idle+0x2e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b80      	cmp	r3, #128	; 0x80
 8001788:	d118      	bne.n	80017bc <st_go_idle+0x60>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d015      	beq.n	80017bc <st_go_idle+0x60>
        if(state == STATE_SLEEP)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b80      	cmp	r3, #128	; 0x80
 8001794:	d106      	bne.n	80017a4 <st_go_idle+0x48>
            hal.stepper.enable((axes_signals_t){0});
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <st_go_idle+0x88>)
 8001798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179c:	2200      	movs	r2, #0
 800179e:	4610      	mov	r0, r2
 80017a0:	4798      	blx	r3
        if(state == STATE_SLEEP)
 80017a2:	e01b      	b.n	80017dc <st_go_idle+0x80>
        else {
            // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
            // stop and not drift from residual inertial forces at the end of the last movement.
            sys.steppers_deenergize = true;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <st_go_idle+0x90>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	719a      	strb	r2, [r3, #6]
            hal.delay_ms(settings.steppers.idle_lock_time, st_deenergize);
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <st_go_idle+0x88>)
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <st_go_idle+0x8c>)
 80017b0:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 80017b4:	490e      	ldr	r1, [pc, #56]	; (80017f0 <st_go_idle+0x94>)
 80017b6:	4610      	mov	r0, r2
 80017b8:	4798      	blx	r3
        if(state == STATE_SLEEP)
 80017ba:	e00f      	b.n	80017dc <st_go_idle+0x80>
        }
    } else
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <st_go_idle+0x88>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <st_go_idle+0x8c>)
 80017c4:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 80017c8:	2aff      	cmp	r2, #255	; 0xff
 80017ca:	d101      	bne.n	80017d0 <st_go_idle+0x74>
 80017cc:	2207      	movs	r2, #7
 80017ce:	e002      	b.n	80017d6 <st_go_idle+0x7a>
 80017d0:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <st_go_idle+0x8c>)
 80017d2:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
 80017d6:	4610      	mov	r0, r2
 80017d8:	4798      	blx	r3
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000f6c 	.word	0x20000f6c
 80017e8:	20001170 	.word	0x20001170
 80017ec:	20000dec 	.word	0x20000dec
 80017f0:	08001729 	.word	0x08001729

080017f4 <stream_mpg_enable>:

    return connection != NULL;
}

bool stream_mpg_enable (bool on)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
    static io_stream_t org_stream = {
        .type = StreamType_Redirected
    };

    if(mpg.stream == NULL)
 80017fe:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <stream_mpg_enable+0x180>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <stream_mpg_enable+0x16>
        return false;
 8001806:	2300      	movs	r3, #0
 8001808:	e0af      	b.n	800196a <stream_mpg_enable+0x176>

    sys_state_t state = state_get();
 800180a:	f7ff ff81 	bl	8001710 <state_get>
 800180e:	60f8      	str	r0, [r7, #12]

    // Deny entering MPG mode if busy
    if(on == sys.mpg_mode || (on && (gc_state.file_run || !(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP)))))) {
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <stream_mpg_enable+0x184>)
 8001812:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	429a      	cmp	r2, r3
 800181a:	d010      	beq.n	800183e <stream_mpg_enable+0x4a>
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <stream_mpg_enable+0x54>
 8001822:	4b56      	ldr	r3, [pc, #344]	; (800197c <stream_mpg_enable+0x188>)
 8001824:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001828:	2b00      	cmp	r3, #0
 800182a:	d108      	bne.n	800183e <stream_mpg_enable+0x4a>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <stream_mpg_enable+0x54>
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f240 1301 	movw	r3, #257	; 0x101
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d104      	bne.n	8001848 <stream_mpg_enable+0x54>
        protocol_enqueue_realtime_command(CMD_STATUS_REPORT_ALL);
 800183e:	2087      	movs	r0, #135	; 0x87
 8001840:	f7ff fc08 	bl	8001054 <protocol_enqueue_realtime_command>
        return false;
 8001844:	2300      	movs	r3, #0
 8001846:	e090      	b.n	800196a <stream_mpg_enable+0x176>
    }

    if(on) {
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d04e      	beq.n	80018ec <stream_mpg_enable+0xf8>
        if(org_stream.type == StreamType_Redirected) {
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <stream_mpg_enable+0x18c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d174      	bne.n	8001940 <stream_mpg_enable+0x14c>
            memcpy(&org_stream, &hal.stream, sizeof(io_stream_t));
 8001856:	4a4a      	ldr	r2, [pc, #296]	; (8001980 <stream_mpg_enable+0x18c>)
 8001858:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <stream_mpg_enable+0x190>)
 800185a:	4610      	mov	r0, r2
 800185c:	33a8      	adds	r3, #168	; 0xa8
 800185e:	224c      	movs	r2, #76	; 0x4c
 8001860:	4619      	mov	r1, r3
 8001862:	f003 fa37 	bl	8004cd4 <memcpy>
            if(hal.stream.disable_rx)
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <stream_mpg_enable+0x190>)
 8001868:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <stream_mpg_enable+0x86>
                hal.stream.disable_rx(true);
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <stream_mpg_enable+0x190>)
 8001872:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001876:	2001      	movs	r0, #1
 8001878:	4798      	blx	r3
            mpg.stream->disable_rx(false);
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <stream_mpg_enable+0x180>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	2000      	movs	r0, #0
 8001882:	4798      	blx	r3
            mpg.stream->set_enqueue_rt_handler(org_stream.set_enqueue_rt_handler(NULL));
 8001884:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <stream_mpg_enable+0x180>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <stream_mpg_enable+0x18c>)
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	2000      	movs	r0, #0
 8001890:	4798      	blx	r3
 8001892:	4603      	mov	r3, r0
 8001894:	4618      	mov	r0, r3
 8001896:	47a0      	blx	r4
            hal.stream.type = StreamType_MPG;
 8001898:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <stream_mpg_enable+0x190>)
 800189a:	2201      	movs	r2, #1
 800189c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
            hal.stream.read = mpg.stream->read;
 80018a0:	4b34      	ldr	r3, [pc, #208]	; (8001974 <stream_mpg_enable+0x180>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a37      	ldr	r2, [pc, #220]	; (8001984 <stream_mpg_enable+0x190>)
 80018a8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
            if(mpg.flags.is_mpg_tx)
 80018ac:	4b31      	ldr	r3, [pc, #196]	; (8001974 <stream_mpg_enable+0x180>)
 80018ae:	7a1b      	ldrb	r3, [r3, #8]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <stream_mpg_enable+0xd2>
                hal.stream.write = mpg.stream->write;
 80018ba:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <stream_mpg_enable+0x180>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4a30      	ldr	r2, [pc, #192]	; (8001984 <stream_mpg_enable+0x190>)
 80018c2:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
            hal.stream.get_rx_buffer_free = mpg.stream->get_rx_buffer_free;
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <stream_mpg_enable+0x180>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <stream_mpg_enable+0x190>)
 80018ce:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
            hal.stream.cancel_read_buffer = mpg.stream->cancel_read_buffer;
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <stream_mpg_enable+0x180>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <stream_mpg_enable+0x190>)
 80018da:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            hal.stream.reset_read_buffer = mpg.stream->reset_read_buffer;
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <stream_mpg_enable+0x180>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a27      	ldr	r2, [pc, #156]	; (8001984 <stream_mpg_enable+0x190>)
 80018e6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
 80018ea:	e029      	b.n	8001940 <stream_mpg_enable+0x14c>
        }
    } else if(org_stream.type != StreamType_Redirected) {
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <stream_mpg_enable+0x18c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d025      	beq.n	8001940 <stream_mpg_enable+0x14c>
        if(mpg_write_char)
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <stream_mpg_enable+0x194>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <stream_mpg_enable+0x118>
            mpg.stream->set_enqueue_rt_handler(mpg_write_char);
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <stream_mpg_enable+0x180>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	4a21      	ldr	r2, [pc, #132]	; (8001988 <stream_mpg_enable+0x194>)
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	4610      	mov	r0, r2
 8001908:	4798      	blx	r3
 800190a:	e004      	b.n	8001916 <stream_mpg_enable+0x122>
        else
            mpg.stream->disable_rx(true);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <stream_mpg_enable+0x180>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001912:	2001      	movs	r0, #1
 8001914:	4798      	blx	r3
        memcpy(&hal.stream, &org_stream, sizeof(io_stream_t));
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <stream_mpg_enable+0x190>)
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <stream_mpg_enable+0x18c>)
 800191a:	33a8      	adds	r3, #168	; 0xa8
 800191c:	4611      	mov	r1, r2
 800191e:	224c      	movs	r2, #76	; 0x4c
 8001920:	4618      	mov	r0, r3
 8001922:	f003 f9d7 	bl	8004cd4 <memcpy>
        org_stream.type = StreamType_Redirected;
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <stream_mpg_enable+0x18c>)
 8001928:	2206      	movs	r2, #6
 800192a:	701a      	strb	r2, [r3, #0]
        if(hal.stream.disable_rx)
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <stream_mpg_enable+0x190>)
 800192e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <stream_mpg_enable+0x14c>
            hal.stream.disable_rx(false);
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <stream_mpg_enable+0x190>)
 8001938:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800193c:	2000      	movs	r0, #0
 800193e:	4798      	blx	r3
    }

    hal.stream.reset_read_buffer();
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <stream_mpg_enable+0x190>)
 8001942:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001946:	4798      	blx	r3

    sys.mpg_mode = on;
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <stream_mpg_enable+0x184>)
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
    system_add_rt_report(Report_MPGMode);
 8001950:	2001      	movs	r0, #1
 8001952:	f000 f81b 	bl	800198c <system_add_rt_report>

    // Force a realtime status report, all reports when MPG mode active
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <stream_mpg_enable+0x16c>
 800195c:	2387      	movs	r3, #135	; 0x87
 800195e:	e000      	b.n	8001962 <stream_mpg_enable+0x16e>
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fb76 	bl	8001054 <protocol_enqueue_realtime_command>

    return true;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	bf00      	nop
 8001974:	200012e0 	.word	0x200012e0
 8001978:	20000dec 	.word	0x20000dec
 800197c:	20000d54 	.word	0x20000d54
 8001980:	20000060 	.word	0x20000060
 8001984:	20000f6c 	.word	0x20000f6c
 8001988:	200012f0 	.word	0x200012f0

0800198c <system_add_rt_report>:
{
    return sys.report;
}

void system_add_rt_report (report_tracking_t report)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    if(report == Report_ClearAll)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <system_add_rt_report+0x16>
        sys.report.value = 0;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <system_add_rt_report+0x68>)
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
 80019a0:	e016      	b.n	80019d0 <system_add_rt_report+0x44>
    else if(report == Report_MPGMode)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10d      	bne.n	80019c4 <system_add_rt_report+0x38>
        sys.report.mpg_mode = hal.driver_cap.mpg_mode;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <system_add_rt_report+0x6c>)
 80019aa:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 80019ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80019b2:	b2d9      	uxtb	r1, r3
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <system_add_rt_report+0x68>)
 80019b6:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80019ba:	f361 0300 	bfi	r3, r1, #0, #1
 80019be:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 80019c2:	e005      	b.n	80019d0 <system_add_rt_report+0x44>
    else
        sys.report.value |= (uint32_t)report;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <system_add_rt_report+0x68>)
 80019c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <system_add_rt_report+0x68>)
 80019ce:	6313      	str	r3, [r2, #48]	; 0x30

    if(sys.report.value && grbl.on_rt_reports_added)
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <system_add_rt_report+0x68>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <system_add_rt_report+0x5e>
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <system_add_rt_report+0x70>)
 80019da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <system_add_rt_report+0x5e>
        grbl.on_rt_reports_added((report_tracking_flags_t)((uint32_t)report));
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <system_add_rt_report+0x70>)
 80019e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4610      	mov	r0, r2
 80019e8:	4798      	blx	r3
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000dec 	.word	0x20000dec
 80019f8:	20000f6c 	.word	0x20000f6c
 80019fc:	20000e84 	.word	0x20000e84

08001a00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_Init+0x4c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_Init+0x4c>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 f8f0 	bl	8001bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a16:	f002 fb89 	bl	800412c <HAL_RCC_GetSysClockFreq>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_Init+0x50>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	490b      	ldr	r1, [pc, #44]	; (8001a54 <HAL_Init+0x54>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_Init+0x58>)
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a30:	2007      	movs	r0, #7
 8001a32:	f7ff f90f 	bl	8000c54 <HAL_InitTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e002      	b.n	8001a46 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff f8ec 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	46020c00 	.word	0x46020c00
 8001a54:	08004d08 	.word	0x08004d08
 8001a58:	2000005c 	.word	0x2000005c

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	200000b0 	.word	0x200000b0
 8001a80:	200012f4 	.word	0x200012f4

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200012f4 	.word	0x200012f4

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff4c 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1a:	f7ff ff63 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	6978      	ldr	r0, [r7, #20]
 8001c26:	f7ff ffb3 	bl	8001b90 <NVIC_EncodePriority>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff82 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c38:	bf00      	nop
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff56 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e019      	b.n	8001ca2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d004      	beq.n	8001c84 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e00e      	b.n	8001ca2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2204      	movs	r2, #4
 8001c88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cbc:	b2db      	uxtb	r3, r3
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b2db      	uxtb	r3, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cfa:	e1ba      	b.n	8002072 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 81aa 	beq.w	800206c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a55      	ldr	r2, [pc, #340]	; (8001e70 <HAL_GPIO_Init+0x188>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d15d      	bne.n	8001ddc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001d26:	2201      	movs	r2, #1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001d50:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <HAL_GPIO_Init+0x18c>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d58:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001d5a:	4a46      	ldr	r2, [pc, #280]	; (8001e74 <HAL_GPIO_Init+0x18c>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d72:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220b      	movs	r2, #11
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69f9      	ldr	r1, [r7, #28]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2202      	movs	r2, #2
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e067      	b.n	8001eac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x104>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	d145      	bne.n	8001e78 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f003 020f 	and.w	r2, r3, #15
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	69f9      	ldr	r1, [r7, #28]
 8001e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e01e      	b.n	8001eac <HAL_GPIO_Init+0x1c4>
 8001e6e:	bf00      	nop
 8001e70:	46020000 	.word	0x46020000
 8001e74:	08004d60 	.word	0x08004d60
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0203 	and.w	r2, r3, #3
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d00b      	beq.n	8001ecc <HAL_GPIO_Init+0x1e4>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec0:	2b11      	cmp	r3, #17
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	d130      	bne.n	8001f2e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001f02:	2201      	movs	r2, #1
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 0201 	and.w	r2, r3, #1
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d017      	beq.n	8001f66 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d07c      	beq.n	800206c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	3318      	adds	r3, #24
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0a9a      	lsrs	r2, r3, #10
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_GPIO_Init+0x3ac>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	00d2      	lsls	r2, r2, #3
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001fae:	4938      	ldr	r1, [pc, #224]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001fbc:	4b34      	ldr	r3, [pc, #208]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001fe0:	4a2b      	ldr	r2, [pc, #172]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8002012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002016:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	4013      	ands	r3, r2
 8002020:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002036:	4a16      	ldr	r2, [pc, #88]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8002040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002044:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	4013      	ands	r3, r2
 800204e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_GPIO_Init+0x3a8>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	f47f ae3d 	bne.w	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	3724      	adds	r7, #36	; 0x24
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	46022000 	.word	0x46022000
 8002094:	002f7f7f 	.word	0x002f7f7f

08002098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
 80020a4:	4613      	mov	r3, r2
 80020a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a8:	787b      	ldrb	r3, [r7, #1]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	68f9      	ldr	r1, [r7, #12]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
  }
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00f      	beq.n	800213e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800213c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00f      	beq.n	8002168 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f043 0208 	orr.w	r2, r3, #8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002166:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00f      	beq.n	8002192 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f043 0202 	orr.w	r2, r3, #2
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002190:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 030b 	and.w	r3, r3, #11
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80021a2:	68f9      	ldr	r1, [r7, #12]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fb8d 	bl	80028c4 <I2C_ITError>
  }
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70fb      	strb	r3, [r7, #3]
 80021e6:	4613      	mov	r3, r2
 80021e8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <I2C_Slave_ISR_IT+0x24>
 8002252:	2302      	movs	r3, #2
 8002254:	e0e1      	b.n	800241a <I2C_Slave_ISR_IT+0x1e8>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002272:	6939      	ldr	r1, [r7, #16]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f9b5 	bl	80025e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d04b      	beq.n	800231c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800228a:	2b00      	cmp	r3, #0
 800228c:	d046      	beq.n	800231c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d128      	bne.n	80022ea <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b28      	cmp	r3, #40	; 0x28
 80022a2:	d108      	bne.n	80022b6 <I2C_Slave_ISR_IT+0x84>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022aa:	d104      	bne.n	80022b6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80022ac:	6939      	ldr	r1, [r7, #16]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fab4 	bl	800281c <I2C_ITListenCplt>
 80022b4:	e031      	b.n	800231a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b29      	cmp	r3, #41	; 0x29
 80022c0:	d10e      	bne.n	80022e0 <I2C_Slave_ISR_IT+0xae>
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022c8:	d00a      	beq.n	80022e0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2210      	movs	r2, #16
 80022d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fc0d 	bl	8002af2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f926 	bl	800252a <I2C_ITSlaveSeqCplt>
 80022de:	e01c      	b.n	800231a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2210      	movs	r2, #16
 80022e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80022e8:	e08f      	b.n	800240a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2210      	movs	r2, #16
 80022f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f043 0204 	orr.w	r2, r3, #4
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <I2C_Slave_ISR_IT+0xda>
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230a:	d17e      	bne.n	800240a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	4619      	mov	r1, r3
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fad6 	bl	80028c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002318:	e077      	b.n	800240a <I2C_Slave_ISR_IT+0x1d8>
 800231a:	e076      	b.n	800240a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d02f      	beq.n	8002386 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800232c:	2b00      	cmp	r3, #0
 800232e:	d02a      	beq.n	8002386 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d018      	beq.n	800236c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d14b      	bne.n	800240e <I2C_Slave_ISR_IT+0x1dc>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800237c:	d047      	beq.n	800240e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8d3 	bl	800252a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002384:	e043      	b.n	800240e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800239a:	6939      	ldr	r1, [r7, #16]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f840 	bl	8002422 <I2C_ITAddrCplt>
 80023a2:	e035      	b.n	8002410 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d030      	beq.n	8002410 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02b      	beq.n	8002410 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d018      	beq.n	80023f4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80023f2:	e00d      	b.n	8002410 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fa:	d002      	beq.n	8002402 <I2C_Slave_ISR_IT+0x1d0>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f891 	bl	800252a <I2C_ITSlaveSeqCplt>
 8002408:	e002      	b.n	8002410 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800240a:	bf00      	nop
 800240c:	e000      	b.n	8002410 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800240e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002438:	2b28      	cmp	r3, #40	; 0x28
 800243a:	d16a      	bne.n	8002512 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	0c1b      	lsrs	r3, r3, #16
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	0c1b      	lsrs	r3, r3, #16
 8002454:	b29b      	uxth	r3, r3
 8002456:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800245a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002468:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	b29b      	uxth	r3, r3
 8002472:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002476:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d138      	bne.n	80024f2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002480:	897b      	ldrh	r3, [r7, #10]
 8002482:	09db      	lsrs	r3, r3, #7
 8002484:	b29a      	uxth	r2, r3
 8002486:	89bb      	ldrh	r3, [r7, #12]
 8002488:	4053      	eors	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	f003 0306 	and.w	r3, r3, #6
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11c      	bne.n	80024ce <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002494:	897b      	ldrh	r3, [r7, #10]
 8002496:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d13b      	bne.n	8002522 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2208      	movs	r2, #8
 80024b6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024c0:	89ba      	ldrh	r2, [r7, #12]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fe87 	bl	80021da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80024cc:	e029      	b.n	8002522 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80024ce:	893b      	ldrh	r3, [r7, #8]
 80024d0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fb4d 	bl	8002b76 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024e4:	89ba      	ldrh	r2, [r7, #12]
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fe75 	bl	80021da <HAL_I2C_AddrCallback>
}
 80024f0:	e017      	b.n	8002522 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fb3d 	bl	8002b76 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002504:	89ba      	ldrh	r2, [r7, #12]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fe65 	bl	80021da <HAL_I2C_AddrCallback>
}
 8002510:	e007      	b.n	8002522 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2208      	movs	r2, #8
 8002518:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e00c      	b.n	8002578 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b29      	cmp	r3, #41	; 0x29
 8002582:	d112      	bne.n	80025aa <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2228      	movs	r2, #40	; 0x28
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2221      	movs	r2, #33	; 0x21
 8002590:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002592:	2101      	movs	r1, #1
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 faee 	bl	8002b76 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fe05 	bl	80021b2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80025a8:	e017      	b.n	80025da <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b2a      	cmp	r3, #42	; 0x2a
 80025b4:	d111      	bne.n	80025da <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2228      	movs	r2, #40	; 0x28
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2222      	movs	r2, #34	; 0x22
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025c4:	2102      	movs	r1, #2
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fad5 	bl	8002b76 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fdf6 	bl	80021c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002600:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2220      	movs	r2, #32
 8002608:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b21      	cmp	r3, #33	; 0x21
 800260e:	d005      	beq.n	800261c <I2C_ITSlaveCplt+0x38>
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b29      	cmp	r3, #41	; 0x29
 8002614:	d002      	beq.n	800261c <I2C_ITSlaveCplt+0x38>
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b28      	cmp	r3, #40	; 0x28
 800261a:	d108      	bne.n	800262e <I2C_ITSlaveCplt+0x4a>
      (tmpstate == HAL_I2C_STATE_LISTEN))
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800261c:	f248 0101 	movw	r1, #32769	; 0x8001
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 faa8 	bl	8002b76 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2221      	movs	r2, #33	; 0x21
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
 800262c:	e00d      	b.n	800264a <I2C_ITSlaveCplt+0x66>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b22      	cmp	r3, #34	; 0x22
 8002632:	d002      	beq.n	800263a <I2C_ITSlaveCplt+0x56>
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	2b2a      	cmp	r3, #42	; 0x2a
 8002638:	d107      	bne.n	800264a <I2C_ITSlaveCplt+0x66>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800263a:	f248 0102 	movw	r1, #32770	; 0x8002
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa99 	bl	8002b76 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2222      	movs	r2, #34	; 0x22
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002658:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b6b      	ldr	r3, [pc, #428]	; (8002814 <I2C_ITSlaveCplt+0x230>)
 8002666:	400b      	ands	r3, r1
 8002668:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa41 	bl	8002af2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01c      	beq.n	80026b4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002688:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	2b00      	cmp	r3, #0
 8002690:	d031      	beq.n	80026f6 <I2C_ITSlaveCplt+0x112>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269a:	b29c      	uxth	r4, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fb12 	bl	8001cca <HAL_DMAEx_GetFifoLevel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4423      	add	r3, r4
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026b2:	e020      	b.n	80026f6 <I2C_ITSlaveCplt+0x112>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01b      	beq.n	80026f6 <I2C_ITSlaveCplt+0x112>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00f      	beq.n	80026f6 <I2C_ITSlaveCplt+0x112>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	b29c      	uxth	r4, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff faf0 	bl	8001cca <HAL_DMAEx_GetFifoLevel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	4423      	add	r3, r4
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <I2C_ITSlaveCplt+0x15e>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f023 0304 	bic.w	r3, r3, #4
 8002706:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00c      	beq.n	8002742 <I2C_ITSlaveCplt+0x15e>
    {
      hi2c->XferSize--;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <I2C_ITSlaveCplt+0x174>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f043 0204 	orr.w	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <I2C_ITSlaveCplt+0x1ac>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4619      	mov	r1, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8a5 	bl	80028c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b28      	cmp	r3, #40	; 0x28
 8002784:	d141      	bne.n	800280a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002786:	6979      	ldr	r1, [r7, #20]
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f847 	bl	800281c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800278e:	e03c      	b.n	800280a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002798:	d014      	beq.n	80027c4 <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fec5 	bl	800252a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <I2C_ITSlaveCplt+0x234>)
 80027a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fd1a 	bl	80021f6 <HAL_I2C_ListenCpltCallback>
}
 80027c2:	e022      	b.n	800280a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b22      	cmp	r3, #34	; 0x22
 80027ce:	d10e      	bne.n	80027ee <I2C_ITSlaveCplt+0x20a>
    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fced 	bl	80021c6 <HAL_I2C_SlaveRxCpltCallback>
}
 80027ec:	e00d      	b.n	800280a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fcd4 	bl	80021b2 <HAL_I2C_SlaveTxCpltCallback>
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}
 8002812:	bf00      	nop
 8002814:	fe00e800 	.word	0xfe00e800
 8002818:	ffff0000 	.word	0xffff0000

0800281c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <I2C_ITListenCplt+0xa4>)
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d022      	beq.n	8002898 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d012      	beq.n	8002898 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002898:	f248 0103 	movw	r1, #32771	; 0x8003
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f96a 	bl	8002b76 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2210      	movs	r2, #16
 80028a8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fc9f 	bl	80021f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	ffff0000 	.word	0xffff0000

080028c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a6d      	ldr	r2, [pc, #436]	; (8002a98 <I2C_ITError+0x1d4>)
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b28      	cmp	r3, #40	; 0x28
 80028fa:	d005      	beq.n	8002908 <I2C_ITError+0x44>
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b29      	cmp	r3, #41	; 0x29
 8002900:	d002      	beq.n	8002908 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b2a      	cmp	r3, #42	; 0x2a
 8002906:	d10b      	bne.n	8002920 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002908:	2103      	movs	r1, #3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f933 	bl	8002b76 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2228      	movs	r2, #40	; 0x28
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a60      	ldr	r2, [pc, #384]	; (8002a9c <I2C_ITError+0x1d8>)
 800291c:	635a      	str	r2, [r3, #52]	; 0x34
 800291e:	e030      	b.n	8002982 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002920:	f248 0103 	movw	r1, #32771	; 0x8003
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f926 	bl	8002b76 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8e1 	bl	8002af2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b60      	cmp	r3, #96	; 0x60
 800293a:	d01f      	beq.n	800297c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b20      	cmp	r3, #32
 8002950:	d114      	bne.n	800297c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b10      	cmp	r3, #16
 800295e:	d109      	bne.n	8002974 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2210      	movs	r2, #16
 8002966:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f043 0204 	orr.w	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2220      	movs	r2, #32
 800297a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	635a      	str	r2, [r3, #52]	; 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d039      	beq.n	8002a04 <I2C_ITError+0x140>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b11      	cmp	r3, #17
 8002994:	d002      	beq.n	800299c <I2C_ITError+0xd8>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b21      	cmp	r3, #33	; 0x21
 800299a:	d133      	bne.n	8002a04 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029aa:	d107      	bne.n	80029bc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f974 	bl	8001cae <HAL_DMA_GetState>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d017      	beq.n	80029fc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <I2C_ITError+0x1dc>)
 80029d2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f93b 	bl	8001c5c <HAL_DMA_Abort_IT>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d04d      	beq.n	8002a88 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029f6:	4610      	mov	r0, r2
 80029f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80029fa:	e045      	b.n	8002a88 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f851 	bl	8002aa4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a02:	e041      	b.n	8002a88 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d039      	beq.n	8002a80 <I2C_ITError+0x1bc>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	d002      	beq.n	8002a18 <I2C_ITError+0x154>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b22      	cmp	r3, #34	; 0x22
 8002a16:	d133      	bne.n	8002a80 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a26:	d107      	bne.n	8002a38 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff f936 	bl	8001cae <HAL_DMA_GetState>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d017      	beq.n	8002a78 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <I2C_ITError+0x1dc>)
 8002a4e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff f8fd 	bl	8001c5c <HAL_DMA_Abort_IT>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d011      	beq.n	8002a8c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a72:	4610      	mov	r0, r2
 8002a74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a76:	e009      	b.n	8002a8c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f813 	bl	8002aa4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a7e:	e005      	b.n	8002a8c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f80f 	bl	8002aa4 <I2C_TreatErrorCallback>
  }
}
 8002a86:	e002      	b.n	8002a8e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a8c:	bf00      	nop
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	ffff0000 	.word	0xffff0000
 8002a9c:	08002233 	.word	0x08002233
 8002aa0:	08002b3b 	.word	0x08002b3b

08002aa4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b60      	cmp	r3, #96	; 0x60
 8002ab6:	d10e      	bne.n	8002ad6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fba5 	bl	800221e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ad4:	e009      	b.n	8002aea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fb90 	bl	800220a <HAL_I2C_ErrorCallback>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d103      	bne.n	8002b10 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d007      	beq.n	8002b2e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	619a      	str	r2, [r3, #24]
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	2200      	movs	r2, #0
 8002b56:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	2200      	movs	r2, #0
 8002b66:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff ff9b 	bl	8002aa4 <I2C_TreatErrorCallback>
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00f      	beq.n	8002bb0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002b96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ba4:	2b28      	cmp	r3, #40	; 0x28
 8002ba6:	d003      	beq.n	8002bb0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002bae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00f      	beq.n	8002bda <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002bc0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bce:	2b28      	cmp	r3, #40	; 0x28
 8002bd0:	d003      	beq.n	8002bda <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002bd8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002bda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	da03      	bge.n	8002bea <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002bea:	887b      	ldrh	r3, [r7, #2]
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d103      	bne.n	8002bf8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d103      	bne.n	8002c06 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f043 0320 	orr.w	r3, r3, #32
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002c06:	887b      	ldrh	r3, [r7, #2]
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d103      	bne.n	8002c14 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	400a      	ands	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e007      	b.n	8002c62 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 0204 	bic.w	r2, r3, #4
 8002c5a:	4905      	ldr	r1, [pc, #20]	; (8002c70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40030400 	.word	0x40030400

08002c74 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_ICACHE_Enable+0x1c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_ICACHE_Enable+0x1c>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40030400 	.word	0x40030400

08002c94 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_ICACHE_Disable+0x5c>)
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_ICACHE_Disable+0x5c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_ICACHE_Disable+0x5c>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb0:	f7fe fee8 	bl	8001a84 <HAL_GetTick>
 8002cb4:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002cb6:	e00f      	b.n	8002cd8 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8002cb8:	f7fe fee4 	bl	8001a84 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d908      	bls.n	8002cd8 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_ICACHE_Disable+0x5c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	71fb      	strb	r3, [r7, #7]
        break;
 8002cd6:	e005      	b.n	8002ce4 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_ICACHE_Disable+0x5c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e9      	bne.n	8002cb8 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40030400 	.word	0x40030400

08002cf4 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_ICACHE_EnableRemapRegion+0x98>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	75fb      	strb	r3, [r7, #23]
 8002d12:	e034      	b.n	8002d7e <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	009a      	lsls	r2, r3, #2
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
 8002d2e:	e026      	b.n	8002d7e <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	425b      	negs	r3, r3
 8002d4e:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8002d50:	401a      	ands	r2, r3
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	025a      	lsls	r2, r3, #9
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40030400 	.word	0x40030400
 8002d90:	40030420 	.word	0x40030420
 8002d94:	07ff0000 	.word	0x07ff0000

08002d98 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002da0:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d10b      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d905      	bls.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002dba:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a32      	ldr	r2, [pc, #200]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e057      	b.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d90a      	bls.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	60d3      	str	r3, [r2, #12]
 8002de6:	e007      	b.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002df0:	4925      	ldr	r1, [pc, #148]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	099b      	lsrs	r3, r3, #6
 8002e04:	2232      	movs	r2, #50	; 0x32
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	4a21      	ldr	r2, [pc, #132]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	3301      	adds	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002e16:	e002      	b.n	8002e1e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f3      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01b      	beq.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	099b      	lsrs	r3, r3, #6
 8002e42:	2232      	movs	r2, #50	; 0x32
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	3301      	adds	r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002e54:	e002      	b.n	8002e5c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f3      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e000      	b.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	46020800 	.word	0x46020800
 8002e8c:	2000005c 	.word	0x2000005c
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_PWREx_GetVoltageRange+0x18>)
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	46020800 	.word	0x46020800

08002eb0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_PWREx_ConfigSupply+0x94>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <HAL_PWREx_ConfigSupply+0x98>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	2232      	movs	r2, #50	; 0x32
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_PWREx_ConfigSupply+0x98>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d113      	bne.n	8002f04 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8002ee2:	f023 0302 	bic.w	r3, r3, #2
 8002ee6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002ee8:	e002      	b.n	8002ef0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d116      	bne.n	8002f2a <HAL_PWREx_ConfigSupply+0x7a>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f3      	bne.n	8002eea <HAL_PWREx_ConfigSupply+0x3a>
 8002f02:	e012      	b.n	8002f2a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002f10:	e002      	b.n	8002f18 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <HAL_PWREx_ConfigSupply+0x7a>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f3      	bne.n	8002f12 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e000      	b.n	8002f36 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	2000005c 	.word	0x2000005c
 8002f48:	10624dd3 	.word	0x10624dd3
 8002f4c:	46020800 	.word	0x46020800

08002f50 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f5e:	6113      	str	r3, [r2, #16]
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	46020800 	.word	0x46020800

08002f70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	46020800 	.word	0x46020800

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08e      	sub	sp, #56	; 0x38
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f000 bec8 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002faa:	4b99      	ldr	r3, [pc, #612]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb4:	4b96      	ldr	r3, [pc, #600]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 816c 	beq.w	80032a4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x52>
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	f040 80de 	bne.w	8003196 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	f040 80da 	bne.w	8003196 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f000 bea5 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff4:	4b86      	ldr	r3, [pc, #536]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_RCC_OscConfig+0x7a>
 8003000:	4b83      	ldr	r3, [pc, #524]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003008:	e005      	b.n	8003016 <HAL_RCC_OscConfig+0x86>
 800300a:	4b81      	ldr	r3, [pc, #516]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800300c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003016:	4293      	cmp	r3, r2
 8003018:	d255      	bcs.n	80030c6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	4618      	mov	r0, r3
 8003026:	f001 f9e9 	bl	80043fc <RCC_SetFlashLatencyFromMSIRange>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f000 be82 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800303c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003040:	6093      	str	r3, [r2, #8]
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	4970      	ldr	r1, [pc, #448]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800305c:	d309      	bcc.n	8003072 <HAL_RCC_OscConfig+0xe2>
 800305e:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f023 021f 	bic.w	r2, r3, #31
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4969      	ldr	r1, [pc, #420]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800306c:	4313      	orrs	r3, r2
 800306e:	60cb      	str	r3, [r1, #12]
 8003070:	e07e      	b.n	8003170 <HAL_RCC_OscConfig+0x1e0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2b00      	cmp	r3, #0
 8003078:	da0a      	bge.n	8003090 <HAL_RCC_OscConfig+0x100>
 800307a:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	4961      	ldr	r1, [pc, #388]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800308a:	4313      	orrs	r3, r2
 800308c:	60cb      	str	r3, [r1, #12]
 800308e:	e06f      	b.n	8003170 <HAL_RCC_OscConfig+0x1e0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d30a      	bcc.n	80030b0 <HAL_RCC_OscConfig+0x120>
 800309a:	4b5d      	ldr	r3, [pc, #372]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	4959      	ldr	r1, [pc, #356]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60cb      	str	r3, [r1, #12]
 80030ae:	e05f      	b.n	8003170 <HAL_RCC_OscConfig+0x1e0>
 80030b0:	4b57      	ldr	r3, [pc, #348]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	03db      	lsls	r3, r3, #15
 80030be:	4954      	ldr	r1, [pc, #336]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60cb      	str	r3, [r1, #12]
 80030c4:	e054      	b.n	8003170 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80030c6:	4b52      	ldr	r3, [pc, #328]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4a51      	ldr	r2, [pc, #324]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030d0:	6093      	str	r3, [r2, #8]
 80030d2:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	494c      	ldr	r1, [pc, #304]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80030ec:	d309      	bcc.n	8003102 <HAL_RCC_OscConfig+0x172>
 80030ee:	4b48      	ldr	r3, [pc, #288]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 021f 	bic.w	r2, r3, #31
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4945      	ldr	r1, [pc, #276]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
 8003100:	e028      	b.n	8003154 <HAL_RCC_OscConfig+0x1c4>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	da0a      	bge.n	8003120 <HAL_RCC_OscConfig+0x190>
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	015b      	lsls	r3, r3, #5
 8003118:	493d      	ldr	r1, [pc, #244]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800311a:	4313      	orrs	r3, r2
 800311c:	60cb      	str	r3, [r1, #12]
 800311e:	e019      	b.n	8003154 <HAL_RCC_OscConfig+0x1c4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d30a      	bcc.n	8003140 <HAL_RCC_OscConfig+0x1b0>
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	029b      	lsls	r3, r3, #10
 8003138:	4935      	ldr	r1, [pc, #212]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 800313a:	4313      	orrs	r3, r2
 800313c:	60cb      	str	r3, [r1, #12]
 800313e:	e009      	b.n	8003154 <HAL_RCC_OscConfig+0x1c4>
 8003140:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	03db      	lsls	r3, r3, #15
 800314e:	4930      	ldr	r1, [pc, #192]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003150:	4313      	orrs	r3, r2
 8003152:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f94c 	bl	80043fc <RCC_SetFlashLatencyFromMSIRange>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f000 bde5 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003170:	f001 f8de 	bl	8004330 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_OscConfig+0x284>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fd6b 	bl	8000c54 <HAL_InitTick>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 808a 	beq.w	80032a2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800318e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003192:	f000 bdd2 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d066      	beq.n	800326c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80031aa:	f7fe fc6b 	bl	8001a84 <HAL_GetTick>
 80031ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80031b0:	e009      	b.n	80031c6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b2:	f7fe fc67 	bl	8001a84 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d902      	bls.n	80031c6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	f000 bdba 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ef      	beq.n	80031b2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	4909      	ldr	r1, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80031f8:	d30e      	bcc.n	8003218 <HAL_RCC_OscConfig+0x288>
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 021f 	bic.w	r2, r3, #31
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4902      	ldr	r1, [pc, #8]	; (8003210 <HAL_RCC_OscConfig+0x280>)
 8003208:	4313      	orrs	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
 800320c:	e04a      	b.n	80032a4 <HAL_RCC_OscConfig+0x314>
 800320e:	bf00      	nop
 8003210:	46020c00 	.word	0x46020c00
 8003214:	200000ac 	.word	0x200000ac
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2b00      	cmp	r3, #0
 800321e:	da0a      	bge.n	8003236 <HAL_RCC_OscConfig+0x2a6>
 8003220:	4b98      	ldr	r3, [pc, #608]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	015b      	lsls	r3, r3, #5
 800322e:	4995      	ldr	r1, [pc, #596]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	60cb      	str	r3, [r1, #12]
 8003234:	e036      	b.n	80032a4 <HAL_RCC_OscConfig+0x314>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323e:	d30a      	bcc.n	8003256 <HAL_RCC_OscConfig+0x2c6>
 8003240:	4b90      	ldr	r3, [pc, #576]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	029b      	lsls	r3, r3, #10
 800324e:	498d      	ldr	r1, [pc, #564]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
 8003254:	e026      	b.n	80032a4 <HAL_RCC_OscConfig+0x314>
 8003256:	4b8b      	ldr	r3, [pc, #556]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	03db      	lsls	r3, r3, #15
 8003264:	4987      	ldr	r1, [pc, #540]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	60cb      	str	r3, [r1, #12]
 800326a:	e01b      	b.n	80032a4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800326c:	4b85      	ldr	r3, [pc, #532]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a84      	ldr	r2, [pc, #528]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003278:	f7fe fc04 	bl	8001a84 <HAL_GetTick>
 800327c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800327e:	e009      	b.n	8003294 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003280:	f7fe fc00 	bl	8001a84 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d902      	bls.n	8003294 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	f000 bd53 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003294:	4b7b      	ldr	r3, [pc, #492]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ef      	bne.n	8003280 <HAL_RCC_OscConfig+0x2f0>
 80032a0:	e000      	b.n	80032a4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 808b 	beq.w	80033c8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x334>
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d17d      	bne.n	80033c8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f000 bd34 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x35a>
 80032dc:	4b69      	ldr	r3, [pc, #420]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a68      	ldr	r2, [pc, #416]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e041      	b.n	800336e <HAL_RCC_OscConfig+0x3de>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f2:	d112      	bne.n	800331a <HAL_RCC_OscConfig+0x38a>
 80032f4:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a62      	ldr	r2, [pc, #392]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 80032fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b60      	ldr	r3, [pc, #384]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5f      	ldr	r2, [pc, #380]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003306:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a5c      	ldr	r2, [pc, #368]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e029      	b.n	800336e <HAL_RCC_OscConfig+0x3de>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003322:	d112      	bne.n	800334a <HAL_RCC_OscConfig+0x3ba>
 8003324:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a56      	ldr	r2, [pc, #344]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b54      	ldr	r3, [pc, #336]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a53      	ldr	r2, [pc, #332]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4b51      	ldr	r3, [pc, #324]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a50      	ldr	r2, [pc, #320]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	e011      	b.n	800336e <HAL_RCC_OscConfig+0x3de>
 800334a:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a4d      	ldr	r2, [pc, #308]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a4a      	ldr	r2, [pc, #296]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b48      	ldr	r3, [pc, #288]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a47      	ldr	r2, [pc, #284]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003368:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800336c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d014      	beq.n	80033a0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003376:	f7fe fb85 	bl	8001a84 <HAL_GetTick>
 800337a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337c:	e009      	b.n	8003392 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337e:	f7fe fb81 	bl	8001a84 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b64      	cmp	r3, #100	; 0x64
 800338a:	d902      	bls.n	8003392 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	f000 bcd4 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003392:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ef      	beq.n	800337e <HAL_RCC_OscConfig+0x3ee>
 800339e:	e013      	b.n	80033c8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80033a0:	f7fe fb70 	bl	8001a84 <HAL_GetTick>
 80033a4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033a6:	e009      	b.n	80033bc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fb6c 	bl	8001a84 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d902      	bls.n	80033bc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	f000 bcbf 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033bc:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ef      	bne.n	80033a8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d05f      	beq.n	8003494 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x456>
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d114      	bne.n	800340a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d111      	bne.n	800340a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f000 bca3 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b23      	ldr	r3, [pc, #140]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	4920      	ldr	r1, [pc, #128]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003408:	e044      	b.n	8003494 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d024      	beq.n	800345c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003412:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800341e:	f7fe fb31 	bl	8001a84 <HAL_GetTick>
 8003422:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003424:	e009      	b.n	800343a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fe fb2d 	bl	8001a84 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d902      	bls.n	800343a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	f000 bc80 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ef      	beq.n	8003426 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	490b      	ldr	r1, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	610b      	str	r3, [r1, #16]
 800345a:	e01b      	b.n	8003494 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a08      	ldr	r2, [pc, #32]	; (8003484 <HAL_RCC_OscConfig+0x4f4>)
 8003462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003466:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003468:	f7fe fb0c 	bl	8001a84 <HAL_GetTick>
 800346c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800346e:	e00b      	b.n	8003488 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003470:	f7fe fb08 	bl	8001a84 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d904      	bls.n	8003488 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	f000 bc5b 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
 8003484:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003488:	4baf      	ldr	r3, [pc, #700]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1ed      	bne.n	8003470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80c8 	beq.w	8003632 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a8:	4ba7      	ldr	r3, [pc, #668]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d111      	bne.n	80034da <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	4ba4      	ldr	r3, [pc, #656]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80034b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034bc:	4aa2      	ldr	r2, [pc, #648]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80034c6:	4ba0      	ldr	r3, [pc, #640]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80034c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034da:	4b9c      	ldr	r3, [pc, #624]	; (800374c <HAL_RCC_OscConfig+0x7bc>)
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d119      	bne.n	800351a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80034e6:	4b99      	ldr	r3, [pc, #612]	; (800374c <HAL_RCC_OscConfig+0x7bc>)
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	4a98      	ldr	r2, [pc, #608]	; (800374c <HAL_RCC_OscConfig+0x7bc>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f2:	f7fe fac7 	bl	8001a84 <HAL_GetTick>
 80034f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034f8:	e009      	b.n	800350e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7fe fac3 	bl	8001a84 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d902      	bls.n	800350e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	f000 bc16 	b.w	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800350e:	4b8f      	ldr	r3, [pc, #572]	; (800374c <HAL_RCC_OscConfig+0x7bc>)
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ef      	beq.n	80034fa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d05f      	beq.n	80035e2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003522:	4b89      	ldr	r3, [pc, #548]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003528:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	429a      	cmp	r2, r3
 8003536:	d037      	beq.n	80035a8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e3f4      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01b      	beq.n	8003592 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800355a:	4b7b      	ldr	r3, [pc, #492]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 800355c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003560:	4a79      	ldr	r2, [pc, #484]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003562:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003566:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800356a:	f7fe fa8b 	bl	8001a84 <HAL_GetTick>
 800356e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003572:	f7fe fa87 	bl	8001a84 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b05      	cmp	r3, #5
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e3da      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003584:	4b70      	ldr	r3, [pc, #448]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800358a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1ef      	bne.n	8003572 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003592:	4b6d      	ldr	r3, [pc, #436]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003598:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	4969      	ldr	r1, [pc, #420]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80035a8:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80035aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ae:	4a66      	ldr	r2, [pc, #408]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80035b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80035b8:	f7fe fa64 	bl	8001a84 <HAL_GetTick>
 80035bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c0:	f7fe fa60 	bl	8001a84 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e3b3      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80035d2:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80035d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ef      	beq.n	80035c0 <HAL_RCC_OscConfig+0x630>
 80035e0:	e01b      	b.n	800361a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80035e2:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80035e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035e8:	4a57      	ldr	r2, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80035ea:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80035ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80035f2:	f7fe fa47 	bl	8001a84 <HAL_GetTick>
 80035f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe fa43 	bl	8001a84 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b05      	cmp	r3, #5
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e396      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800360c:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 800360e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1ef      	bne.n	80035fa <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800361a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003622:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003628:	4a47      	ldr	r2, [pc, #284]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8111 	beq.w	8003862 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003640:	2300      	movs	r3, #0
 8003642:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d111      	bne.n	8003678 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003654:	4b3c      	ldr	r3, [pc, #240]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365a:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003664:	4b38      	ldr	r3, [pc, #224]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCC_OscConfig+0x7bc>)
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d118      	bne.n	80036b6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCC_OscConfig+0x7bc>)
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	4a30      	ldr	r2, [pc, #192]	; (800374c <HAL_RCC_OscConfig+0x7bc>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003690:	f7fe f9f8 	bl	8001a84 <HAL_GetTick>
 8003694:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003698:	f7fe f9f4 	bl	8001a84 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e347      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80036aa:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_RCC_OscConfig+0x7bc>)
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01f      	beq.n	8003702 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80036d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80036e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036ee:	e018      	b.n	8003722 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80036f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003700:	e00f      	b.n	8003722 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003708:	4a0f      	ldr	r2, [pc, #60]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 8003714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003718:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <HAL_RCC_OscConfig+0x7b8>)
 800371a:	f023 0304 	bic.w	r3, r3, #4
 800371e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d057      	beq.n	80037da <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800372a:	f7fe f9ab 	bl	8001a84 <HAL_GetTick>
 800372e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003730:	e00e      	b.n	8003750 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe f9a7 	bl	8001a84 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d905      	bls.n	8003750 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e2f8      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
 8003748:	46020c00 	.word	0x46020c00
 800374c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003750:	4b9c      	ldr	r3, [pc, #624]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0e9      	beq.n	8003732 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01b      	beq.n	80037a2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800376a:	4b96      	ldr	r3, [pc, #600]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800376c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003770:	4a94      	ldr	r2, [pc, #592]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003776:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe f982 	bl	8001a84 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e2d3      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003792:	4b8c      	ldr	r3, [pc, #560]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ed      	beq.n	800377c <HAL_RCC_OscConfig+0x7ec>
 80037a0:	e053      	b.n	800384a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80037a2:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80037a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a8:	4a86      	ldr	r2, [pc, #536]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80037aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fe f966 	bl	8001a84 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e2b7      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037ca:	4b7e      	ldr	r3, [pc, #504]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80037cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ed      	bne.n	80037b4 <HAL_RCC_OscConfig+0x824>
 80037d8:	e037      	b.n	800384a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80037da:	f7fe f953 	bl	8001a84 <HAL_GetTick>
 80037de:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fe f94f 	bl	8001a84 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e2a0      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f8:	4b72      	ldr	r3, [pc, #456]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80037fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ed      	bne.n	80037e2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003806:	4b6f      	ldr	r3, [pc, #444]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01a      	beq.n	800384a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003814:	4b6b      	ldr	r3, [pc, #428]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800381a:	4a6a      	ldr	r2, [pc, #424]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800381c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003820:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe f92d 	bl	8001a84 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e27e      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800383c:	4b61      	ldr	r3, [pc, #388]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800383e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ed      	bne.n	8003826 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800384a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b5c      	ldr	r3, [pc, #368]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003858:	4a5a      	ldr	r2, [pc, #360]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800385a:	f023 0304 	bic.w	r3, r3, #4
 800385e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d036      	beq.n	80038dc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d019      	beq.n	80038aa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003876:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800387c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003880:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003882:	f7fe f8ff 	bl	8001a84 <HAL_GetTick>
 8003886:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800388a:	f7fe f8fb 	bl	8001a84 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e24e      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800389c:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x8fa>
 80038a8:	e018      	b.n	80038dc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80038aa:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a45      	ldr	r2, [pc, #276]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80038b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80038b6:	f7fe f8e5 	bl	8001a84 <HAL_GetTick>
 80038ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038be:	f7fe f8e1 	bl	8001a84 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e234      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80038d0:	4b3c      	ldr	r3, [pc, #240]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d036      	beq.n	8003956 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d019      	beq.n	8003924 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a33      	ldr	r2, [pc, #204]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80038f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80038fc:	f7fe f8c2 	bl	8001a84 <HAL_GetTick>
 8003900:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003904:	f7fe f8be 	bl	8001a84 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e211      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003916:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x974>
 8003922:	e018      	b.n	8003956 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a26      	ldr	r2, [pc, #152]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800392a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003930:	f7fe f8a8 	bl	8001a84 <HAL_GetTick>
 8003934:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003938:	f7fe f8a4 	bl	8001a84 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e1f7      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d07f      	beq.n	8003a62 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003966:	2b00      	cmp	r3, #0
 8003968:	d062      	beq.n	8003a30 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003974:	6093      	str	r3, [r2, #8]
 8003976:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	4910      	ldr	r1, [pc, #64]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003990:	d309      	bcc.n	80039a6 <HAL_RCC_OscConfig+0xa16>
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f023 021f 	bic.w	r2, r3, #31
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4909      	ldr	r1, [pc, #36]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60cb      	str	r3, [r1, #12]
 80039a4:	e02a      	b.n	80039fc <HAL_RCC_OscConfig+0xa6c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da0c      	bge.n	80039c8 <HAL_RCC_OscConfig+0xa38>
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	015b      	lsls	r3, r3, #5
 80039bc:	4901      	ldr	r1, [pc, #4]	; (80039c4 <HAL_RCC_OscConfig+0xa34>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	60cb      	str	r3, [r1, #12]
 80039c2:	e01b      	b.n	80039fc <HAL_RCC_OscConfig+0xa6c>
 80039c4:	46020c00 	.word	0x46020c00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d30a      	bcc.n	80039e8 <HAL_RCC_OscConfig+0xa58>
 80039d2:	4ba1      	ldr	r3, [pc, #644]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	029b      	lsls	r3, r3, #10
 80039e0:	499d      	ldr	r1, [pc, #628]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60cb      	str	r3, [r1, #12]
 80039e6:	e009      	b.n	80039fc <HAL_RCC_OscConfig+0xa6c>
 80039e8:	4b9b      	ldr	r3, [pc, #620]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	03db      	lsls	r3, r3, #15
 80039f6:	4998      	ldr	r1, [pc, #608]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80039fc:	4b96      	ldr	r3, [pc, #600]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a95      	ldr	r2, [pc, #596]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003a02:	f043 0310 	orr.w	r3, r3, #16
 8003a06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003a08:	f7fe f83c 	bl	8001a84 <HAL_GetTick>
 8003a0c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003a10:	f7fe f838 	bl	8001a84 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e18b      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003a22:	4b8d      	ldr	r3, [pc, #564]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0xa80>
 8003a2e:	e018      	b.n	8003a62 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003a30:	4b89      	ldr	r3, [pc, #548]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a88      	ldr	r2, [pc, #544]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003a36:	f023 0310 	bic.w	r3, r3, #16
 8003a3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003a3c:	f7fe f822 	bl	8001a84 <HAL_GetTick>
 8003a40:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003a44:	f7fe f81e 	bl	8001a84 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e171      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003a56:	4b80      	ldr	r3, [pc, #512]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8166 	beq.w	8003d38 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a72:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	f000 80f2 	beq.w	8003c64 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	f040 80c5 	bne.w	8003c14 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a72      	ldr	r2, [pc, #456]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a94:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a96:	f7fd fff5 	bl	8001a84 <HAL_GetTick>
 8003a9a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fd fff1 	bl	8001a84 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e144      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ab0:	4b69      	ldr	r3, [pc, #420]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f0      	bne.n	8003a9e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003abc:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d111      	bne.n	8003aee <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003aca:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad0:	4a61      	ldr	r2, [pc, #388]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
 8003ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003ada:	4b5f      	ldr	r3, [pc, #380]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003aee:	4b5b      	ldr	r3, [pc, #364]	; (8003c5c <HAL_RCC_OscConfig+0xccc>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003afa:	d102      	bne.n	8003b02 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003b02:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <HAL_RCC_OscConfig+0xccc>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4a55      	ldr	r2, [pc, #340]	; (8003c5c <HAL_RCC_OscConfig+0xccc>)
 8003b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b0c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003b0e:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b22:	3a01      	subs	r2, #1
 8003b24:	0212      	lsls	r2, r2, #8
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	494a      	ldr	r1, [pc, #296]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	628b      	str	r3, [r1, #40]	; 0x28
 8003b34:	4b48      	ldr	r3, [pc, #288]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b38:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <HAL_RCC_OscConfig+0xcd0>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b40:	3a01      	subs	r2, #1
 8003b42:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	0252      	lsls	r2, r2, #9
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b56:	3a01      	subs	r2, #1
 8003b58:	0412      	lsls	r2, r2, #16
 8003b5a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0612      	lsls	r2, r2, #24
 8003b68:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	493a      	ldr	r1, [pc, #232]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003b74:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	4a37      	ldr	r2, [pc, #220]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b7a:	f023 0310 	bic.w	r3, r3, #16
 8003b7e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	4a32      	ldr	r2, [pc, #200]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b90:	f043 0310 	orr.w	r3, r3, #16
 8003b94:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	f023 020c 	bic.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	492d      	ldr	r1, [pc, #180]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003bb0:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <HAL_RCC_OscConfig+0xccc>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a29      	ldr	r2, [pc, #164]	; (8003c5c <HAL_RCC_OscConfig+0xccc>)
 8003bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bba:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003bbc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bd4:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bde:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bec:	f7fd ff4a 	bl	8001a84 <HAL_GetTick>
 8003bf0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fd ff46 	bl	8001a84 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e099      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003c06:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0xc64>
 8003c12:	e091      	b.n	8003d38 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c20:	f7fd ff30 	bl	8001a84 <HAL_GetTick>
 8003c24:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fd ff2c 	bl	8001a84 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e07f      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	4a03      	ldr	r2, [pc, #12]	; (8003c58 <HAL_RCC_OscConfig+0xcc8>)
 8003c4c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003c50:	f023 0303 	bic.w	r3, r3, #3
 8003c54:	6293      	str	r3, [r2, #40]	; 0x28
 8003c56:	e06f      	b.n	8003d38 <HAL_RCC_OscConfig+0xda8>
 8003c58:	46020c00 	.word	0x46020c00
 8003c5c:	46020800 	.word	0x46020800
 8003c60:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003c64:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_RCC_OscConfig+0xdb4>)
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c6a:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <HAL_RCC_OscConfig+0xdb4>)
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d039      	beq.n	8003cec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0203 	and.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d132      	bne.n	8003cec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d129      	bne.n	8003cec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d122      	bne.n	8003cec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d11a      	bne.n	8003cec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	0a5b      	lsrs	r3, r3, #9
 8003cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d111      	bne.n	8003cec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d108      	bne.n	8003cec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e024      	b.n	8003d3a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003cf0:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <HAL_RCC_OscConfig+0xdb4>)
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	08db      	lsrs	r3, r3, #3
 8003cf6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d01a      	beq.n	8003d38 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <HAL_RCC_OscConfig+0xdb4>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	4a0f      	ldr	r2, [pc, #60]	; (8003d44 <HAL_RCC_OscConfig+0xdb4>)
 8003d08:	f023 0310 	bic.w	r3, r3, #16
 8003d0c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fd feb9 	bl	8001a84 <HAL_GetTick>
 8003d12:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003d14:	bf00      	nop
 8003d16:	f7fd feb5 	bl	8001a84 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d0f9      	beq.n	8003d16 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d26:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <HAL_RCC_OscConfig+0xdb4>)
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_OscConfig+0xdb4>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HAL_RCC_OscConfig+0xdb4>)
 8003d32:	f043 0310 	orr.w	r3, r3, #16
 8003d36:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3738      	adds	r7, #56	; 0x38
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	46020c00 	.word	0x46020c00

08003d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e1d9      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b9b      	ldr	r3, [pc, #620]	; (8003fcc <HAL_RCC_ClockConfig+0x284>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b98      	ldr	r3, [pc, #608]	; (8003fcc <HAL_RCC_ClockConfig+0x284>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 020f 	bic.w	r2, r3, #15
 8003d72:	4996      	ldr	r1, [pc, #600]	; (8003fcc <HAL_RCC_ClockConfig+0x284>)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7a:	4b94      	ldr	r3, [pc, #592]	; (8003fcc <HAL_RCC_ClockConfig+0x284>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e1c1      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d908      	bls.n	8003dba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003da8:	4b89      	ldr	r3, [pc, #548]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	4986      	ldr	r1, [pc, #536]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	4b81      	ldr	r3, [pc, #516]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d909      	bls.n	8003dec <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003dd8:	4b7d      	ldr	r3, [pc, #500]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	497a      	ldr	r1, [pc, #488]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d010      	beq.n	8003e1a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	4b74      	ldr	r3, [pc, #464]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d908      	bls.n	8003e1a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003e08:	4b71      	ldr	r3, [pc, #452]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	496e      	ldr	r1, [pc, #440]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d010      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	4b69      	ldr	r3, [pc, #420]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d908      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003e36:	4b66      	ldr	r3, [pc, #408]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	f023 020f 	bic.w	r2, r3, #15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4963      	ldr	r1, [pc, #396]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80d2 	beq.w	8003ffa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d143      	bne.n	8003eea <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b5b      	ldr	r3, [pc, #364]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d110      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b57      	ldr	r3, [pc, #348]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e76:	4a56      	ldr	r2, [pc, #344]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e78:	f043 0304 	orr.w	r3, r3, #4
 8003e7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e80:	4b53      	ldr	r3, [pc, #332]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003e92:	f7fd fdf7 	bl	8001a84 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003e98:	4b4e      	ldr	r3, [pc, #312]	; (8003fd4 <HAL_RCC_ClockConfig+0x28c>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00f      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003ea6:	f7fd fded 	bl	8001a84 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e12b      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003eb8:	4b46      	ldr	r3, [pc, #280]	; (8003fd4 <HAL_RCC_ClockConfig+0x28c>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed0:	4a3f      	ldr	r2, [pc, #252]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003ed2:	f023 0304 	bic.w	r3, r3, #4
 8003ed6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003eda:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d121      	bne.n	8003f2a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e112      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef2:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d115      	bne.n	8003f2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e106      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d107      	bne.n	8003f1a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f0a:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0fa      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f1a:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0f2      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003f2a:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4926      	ldr	r1, [pc, #152]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003f3c:	f7fd fda2 	bl	8001a84 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d112      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7fd fd9a 	bl	8001a84 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0d6      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f62:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d1ee      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x204>
 8003f6e:	e044      	b.n	8003ffa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d112      	bne.n	8003f9e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7a:	f7fd fd83 	bl	8001a84 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0bf      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d1ee      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x232>
 8003f9c:	e02d      	b.n	8003ffa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d123      	bne.n	8003fee <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa8:	f7fd fd6c 	bl	8001a84 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0a8      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fbe:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1ee      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x260>
 8003fca:	e016      	b.n	8003ffa <HAL_RCC_ClockConfig+0x2b2>
 8003fcc:	40022000 	.word	0x40022000
 8003fd0:	46020c00 	.word	0x46020c00
 8003fd4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd8:	f7fd fd54 	bl	8001a84 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e090      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fee:	4b4a      	ldr	r3, [pc, #296]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d1ee      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d010      	beq.n	8004028 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	429a      	cmp	r2, r3
 8004014:	d208      	bcs.n	8004028 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004016:	4b40      	ldr	r3, [pc, #256]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 020f 	bic.w	r2, r3, #15
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	493d      	ldr	r1, [pc, #244]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 8004024:	4313      	orrs	r3, r2
 8004026:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004028:	4b3c      	ldr	r3, [pc, #240]	; (800411c <HAL_RCC_ClockConfig+0x3d4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d210      	bcs.n	8004058 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b39      	ldr	r3, [pc, #228]	; (800411c <HAL_RCC_ClockConfig+0x3d4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 020f 	bic.w	r2, r3, #15
 800403e:	4937      	ldr	r1, [pc, #220]	; (800411c <HAL_RCC_ClockConfig+0x3d4>)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b35      	ldr	r3, [pc, #212]	; (800411c <HAL_RCC_ClockConfig+0x3d4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e05b      	b.n	8004110 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d010      	beq.n	8004086 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	4b2b      	ldr	r3, [pc, #172]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004070:	429a      	cmp	r2, r3
 8004072:	d208      	bcs.n	8004086 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4925      	ldr	r1, [pc, #148]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 8004082:	4313      	orrs	r3, r2
 8004084:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d012      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d209      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80040a4:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4919      	ldr	r1, [pc, #100]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d208      	bcs.n	80040e6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80040d4:	4b10      	ldr	r3, [pc, #64]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	490d      	ldr	r1, [pc, #52]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80040e6:	f000 f821 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ea:	4602      	mov	r2, r0
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x3d0>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	490a      	ldr	r1, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x3d8>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x3dc>)
 80040fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x3e0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fda5 	bl	8000c54 <HAL_InitTick>
 800410a:	4603      	mov	r3, r0
 800410c:	73fb      	strb	r3, [r7, #15]

  return status;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	46020c00 	.word	0x46020c00
 800411c:	40022000 	.word	0x40022000
 8004120:	08004d08 	.word	0x08004d08
 8004124:	2000005c 	.word	0x2000005c
 8004128:	200000ac 	.word	0x200000ac

0800412c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	b08b      	sub	sp, #44	; 0x2c
 8004130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413a:	4b78      	ldr	r3, [pc, #480]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004144:	4b75      	ldr	r3, [pc, #468]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x34>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b0c      	cmp	r3, #12
 8004158:	d121      	bne.n	800419e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d11e      	bne.n	800419e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004160:	4b6e      	ldr	r3, [pc, #440]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d107      	bne.n	800417c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800416c:	4b6b      	ldr	r3, [pc, #428]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800416e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004172:	0b1b      	lsrs	r3, r3, #12
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	e005      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800417c:	4b67      	ldr	r3, [pc, #412]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	0f1b      	lsrs	r3, r3, #28
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004188:	4a65      	ldr	r2, [pc, #404]	; (8004320 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004190:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d110      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800419c:	e00d      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419e:	4b5f      	ldr	r3, [pc, #380]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d102      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80041ac:	623b      	str	r3, [r7, #32]
 80041ae:	e004      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041b6:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80041b8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	f040 80a5 	bne.w	800430c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80041c2:	4b56      	ldr	r3, [pc, #344]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80041cc:	4b53      	ldr	r3, [pc, #332]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80041da:	4b50      	ldr	r3, [pc, #320]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80041e6:	4b4d      	ldr	r3, [pc, #308]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	08db      	lsrs	r3, r3, #3
 80041ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d003      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0xe4>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b03      	cmp	r3, #3
 800420c:	d022      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x128>
 800420e:	e043      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8004328 <HAL_RCC_GetSysClockFreq+0x1fc>
 800421e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004222:	4b3e      	ldr	r3, [pc, #248]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004232:	ed97 6a01 	vldr	s12, [r7, #4]
 8004236:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800432c <HAL_RCC_GetSysClockFreq+0x200>
 800423a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800423e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004246:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004252:	e046      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004328 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004266:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004276:	ed97 6a01 	vldr	s12, [r7, #4]
 800427a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800432c <HAL_RCC_GetSysClockFreq+0x200>
 800427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004296:	e024      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b0:	4b1a      	ldr	r3, [pc, #104]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b8:	ee07 3a90 	vmov	s15, r3
 80042bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80042c0:	ed97 6a01 	vldr	s12, [r7, #4]
 80042c4:	eddf 5a19 	vldr	s11, [pc, #100]	; 800432c <HAL_RCC_GetSysClockFreq+0x200>
 80042c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80042d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042e0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ec:	3301      	adds	r3, #1
 80042ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80042fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 3a90 	vmov	r3, s15
 800430a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800430c:	6a3b      	ldr	r3, [r7, #32]
}
 800430e:	4618      	mov	r0, r3
 8004310:	372c      	adds	r7, #44	; 0x2c
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	46020c00 	.word	0x46020c00
 8004320:	08004d20 	.word	0x08004d20
 8004324:	00f42400 	.word	0x00f42400
 8004328:	4b742400 	.word	0x4b742400
 800432c:	46000000 	.word	0x46000000

08004330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004334:	f7ff fefa 	bl	800412c <HAL_RCC_GetSysClockFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <HAL_RCC_GetHCLKFreq+0x28>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	4906      	ldr	r1, [pc, #24]	; (800435c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004344:	5ccb      	ldrb	r3, [r1, r3]
 8004346:	fa22 f303 	lsr.w	r3, r2, r3
 800434a:	4a05      	ldr	r2, [pc, #20]	; (8004360 <HAL_RCC_GetHCLKFreq+0x30>)
 800434c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCC_GetHCLKFreq+0x30>)
 8004350:	681b      	ldr	r3, [r3, #0]
}
 8004352:	4618      	mov	r0, r3
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	46020c00 	.word	0x46020c00
 800435c:	08004d08 	.word	0x08004d08
 8004360:	2000005c 	.word	0x2000005c

08004364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004368:	f7ff ffe2 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4903      	ldr	r1, [pc, #12]	; (8004388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	46020c00 	.word	0x46020c00
 8004388:	08004d18 	.word	0x08004d18

0800438c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	221f      	movs	r2, #31
 800439a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <HAL_RCC_GetClockConfig+0x68>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f003 0203 	and.w	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80043a8:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_GetClockConfig+0x68>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f003 020f 	and.w	r2, r3, #15
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <HAL_RCC_GetClockConfig+0x68>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_RCC_GetClockConfig+0x68>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCC_GetClockConfig+0x68>)
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <HAL_RCC_GetClockConfig+0x6c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 020f 	and.w	r2, r3, #15
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	601a      	str	r2, [r3, #0]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	46020c00 	.word	0x46020c00
 80043f8:	40022000 	.word	0x40022000

080043fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004404:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004412:	f7fe fd3f 	bl	8002e94 <HAL_PWREx_GetVoltageRange>
 8004416:	6178      	str	r0, [r7, #20]
 8004418:	e019      	b.n	800444e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	4b39      	ldr	r3, [pc, #228]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800441c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004420:	4a37      	ldr	r2, [pc, #220]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004422:	f043 0304 	orr.w	r3, r3, #4
 8004426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800442a:	4b35      	ldr	r3, [pc, #212]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800442c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004438:	f7fe fd2c 	bl	8002e94 <HAL_PWREx_GetVoltageRange>
 800443c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800443e:	4b30      	ldr	r3, [pc, #192]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004444:	4a2e      	ldr	r2, [pc, #184]	; (8004500 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004446:	f023 0304 	bic.w	r3, r3, #4
 800444a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004454:	d003      	beq.n	800445e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800445c:	d109      	bne.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004464:	d202      	bcs.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004466:	2301      	movs	r3, #1
 8004468:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800446a:	e033      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004470:	e030      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004478:	d208      	bcs.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d102      	bne.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004482:	2303      	movs	r3, #3
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e025      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e035      	b.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004492:	d90f      	bls.n	80044b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044a0:	d902      	bls.n	80044a8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e015      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80044a8:	2301      	movs	r3, #1
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	e012      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	e00f      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ba:	d109      	bne.n	80044d0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c2:	d102      	bne.n	80044ca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80044c4:	2301      	movs	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	e004      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80044ca:	2302      	movs	r3, #2
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	e001      	b.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80044d0:	2301      	movs	r3, #1
 80044d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 020f 	bic.w	r2, r3, #15
 80044dc:	4909      	ldr	r1, [pc, #36]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d001      	beq.n	80044f6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	46020c00 	.word	0x46020c00
 8004504:	40022000 	.word	0x40022000

08004508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e049      	b.n	80045ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f841 	bl	80045b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f000 fa58 	bl	80049fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e072      	b.n	80046ca <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a35      	ldr	r2, [pc, #212]	; (80046d8 <HAL_TIM_Base_Start_IT+0x10c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d040      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a34      	ldr	r2, [pc, #208]	; (80046dc <HAL_TIM_Base_Start_IT+0x110>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d03b      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d036      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004622:	d031      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <HAL_TIM_Base_Start_IT+0x114>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d02c      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <HAL_TIM_Base_Start_IT+0x118>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d027      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2a      	ldr	r2, [pc, #168]	; (80046e8 <HAL_TIM_Base_Start_IT+0x11c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d022      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a29      	ldr	r2, [pc, #164]	; (80046ec <HAL_TIM_Base_Start_IT+0x120>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d01d      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a27      	ldr	r2, [pc, #156]	; (80046f0 <HAL_TIM_Base_Start_IT+0x124>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d018      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a26      	ldr	r2, [pc, #152]	; (80046f4 <HAL_TIM_Base_Start_IT+0x128>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d013      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a24      	ldr	r2, [pc, #144]	; (80046f8 <HAL_TIM_Base_Start_IT+0x12c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a23      	ldr	r2, [pc, #140]	; (80046fc <HAL_TIM_Base_Start_IT+0x130>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a21      	ldr	r2, [pc, #132]	; (8004700 <HAL_TIM_Base_Start_IT+0x134>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0xbc>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a20      	ldr	r2, [pc, #128]	; (8004704 <HAL_TIM_Base_Start_IT+0x138>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d115      	bne.n	80046b4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <HAL_TIM_Base_Start_IT+0x13c>)
 8004690:	4013      	ands	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d015      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0xfa>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a0:	d011      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	e008      	b.n	80046c6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e000      	b.n	80046c8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	50012c00 	.word	0x50012c00
 80046e0:	40000400 	.word	0x40000400
 80046e4:	50000400 	.word	0x50000400
 80046e8:	40000800 	.word	0x40000800
 80046ec:	50000800 	.word	0x50000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	50000c00 	.word	0x50000c00
 80046f8:	40013400 	.word	0x40013400
 80046fc:	50013400 	.word	0x50013400
 8004700:	40014000 	.word	0x40014000
 8004704:	50014000 	.word	0x50014000
 8004708:	00010007 	.word	0x00010007

0800470c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d020      	beq.n	8004770 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01b      	beq.n	8004770 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0202 	mvn.w	r2, #2
 8004740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f931 	bl	80049be <HAL_TIM_IC_CaptureCallback>
 800475c:	e005      	b.n	800476a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f923 	bl	80049aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f934 	bl	80049d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	d020      	beq.n	80047bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01b      	beq.n	80047bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0204 	mvn.w	r2, #4
 800478c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f90b 	bl	80049be <HAL_TIM_IC_CaptureCallback>
 80047a8:	e005      	b.n	80047b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8fd 	bl	80049aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f90e 	bl	80049d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d020      	beq.n	8004808 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01b      	beq.n	8004808 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0208 	mvn.w	r2, #8
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2204      	movs	r2, #4
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f8e5 	bl	80049be <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8d7 	bl	80049aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8e8 	bl	80049d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b00      	cmp	r3, #0
 8004810:	d020      	beq.n	8004854 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01b      	beq.n	8004854 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0210 	mvn.w	r2, #16
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2208      	movs	r2, #8
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f8bf 	bl	80049be <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f8b1 	bl	80049aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8c2 	bl	80049d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0201 	mvn.w	r2, #1
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc f8e6 	bl	8000a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f9af 	bl	8004c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00c      	beq.n	80048ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f9a7 	bl	8004c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00c      	beq.n	80048ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f87c 	bl	80049e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00c      	beq.n	8004912 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f06f 0220 	mvn.w	r2, #32
 800490a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f96f 	bl	8004bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00c      	beq.n	8004936 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800492e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f97b 	bl	8004c2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00c      	beq.n	800495a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f973 	bl	8004c40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00c      	beq.n	800497e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f96b 	bl	8004c54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00c      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800499a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f963 	bl	8004c68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a68      	ldr	r2, [pc, #416]	; (8004bb0 <TIM_Base_SetConfig+0x1b4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d02b      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a67      	ldr	r2, [pc, #412]	; (8004bb4 <TIM_Base_SetConfig+0x1b8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d027      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a22:	d023      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a2a:	d01f      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a62      	ldr	r2, [pc, #392]	; (8004bb8 <TIM_Base_SetConfig+0x1bc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d01b      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a61      	ldr	r2, [pc, #388]	; (8004bbc <TIM_Base_SetConfig+0x1c0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d017      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a60      	ldr	r2, [pc, #384]	; (8004bc0 <TIM_Base_SetConfig+0x1c4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a5f      	ldr	r2, [pc, #380]	; (8004bc4 <TIM_Base_SetConfig+0x1c8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a5e      	ldr	r2, [pc, #376]	; (8004bc8 <TIM_Base_SetConfig+0x1cc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a5d      	ldr	r2, [pc, #372]	; (8004bcc <TIM_Base_SetConfig+0x1d0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a5c      	ldr	r2, [pc, #368]	; (8004bd0 <TIM_Base_SetConfig+0x1d4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x70>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a5b      	ldr	r2, [pc, #364]	; (8004bd4 <TIM_Base_SetConfig+0x1d8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a4b      	ldr	r2, [pc, #300]	; (8004bb0 <TIM_Base_SetConfig+0x1b4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d043      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a4a      	ldr	r2, [pc, #296]	; (8004bb4 <TIM_Base_SetConfig+0x1b8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d03f      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a94:	d03b      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a9c:	d037      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a45      	ldr	r2, [pc, #276]	; (8004bb8 <TIM_Base_SetConfig+0x1bc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d033      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a44      	ldr	r2, [pc, #272]	; (8004bbc <TIM_Base_SetConfig+0x1c0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d02f      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a43      	ldr	r2, [pc, #268]	; (8004bc0 <TIM_Base_SetConfig+0x1c4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d02b      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a42      	ldr	r2, [pc, #264]	; (8004bc4 <TIM_Base_SetConfig+0x1c8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d027      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a41      	ldr	r2, [pc, #260]	; (8004bc8 <TIM_Base_SetConfig+0x1cc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d023      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a40      	ldr	r2, [pc, #256]	; (8004bcc <TIM_Base_SetConfig+0x1d0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01f      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a3f      	ldr	r2, [pc, #252]	; (8004bd0 <TIM_Base_SetConfig+0x1d4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01b      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a3e      	ldr	r2, [pc, #248]	; (8004bd4 <TIM_Base_SetConfig+0x1d8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d017      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a3d      	ldr	r2, [pc, #244]	; (8004bd8 <TIM_Base_SetConfig+0x1dc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a3c      	ldr	r2, [pc, #240]	; (8004bdc <TIM_Base_SetConfig+0x1e0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00f      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a3b      	ldr	r2, [pc, #236]	; (8004be0 <TIM_Base_SetConfig+0x1e4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00b      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a3a      	ldr	r2, [pc, #232]	; (8004be4 <TIM_Base_SetConfig+0x1e8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d007      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a39      	ldr	r2, [pc, #228]	; (8004be8 <TIM_Base_SetConfig+0x1ec>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d003      	beq.n	8004b0e <TIM_Base_SetConfig+0x112>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a38      	ldr	r2, [pc, #224]	; (8004bec <TIM_Base_SetConfig+0x1f0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d108      	bne.n	8004b20 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a1a      	ldr	r2, [pc, #104]	; (8004bb0 <TIM_Base_SetConfig+0x1b4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d023      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <TIM_Base_SetConfig+0x1b8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d01f      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <TIM_Base_SetConfig+0x1d4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d01b      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <TIM_Base_SetConfig+0x1d8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d017      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1c      	ldr	r2, [pc, #112]	; (8004bd8 <TIM_Base_SetConfig+0x1dc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <TIM_Base_SetConfig+0x1e0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00f      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <TIM_Base_SetConfig+0x1e4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <TIM_Base_SetConfig+0x1e8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <TIM_Base_SetConfig+0x1ec>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0x198>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a17      	ldr	r2, [pc, #92]	; (8004bec <TIM_Base_SetConfig+0x1f0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	50012c00 	.word	0x50012c00
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	50000400 	.word	0x50000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	50000800 	.word	0x50000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	50000c00 	.word	0x50000c00
 8004bd0:	40013400 	.word	0x40013400
 8004bd4:	50013400 	.word	0x50013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	50014000 	.word	0x50014000
 8004be0:	40014400 	.word	0x40014400
 8004be4:	50014400 	.word	0x50014400
 8004be8:	40014800 	.word	0x40014800
 8004bec:	50014800 	.word	0x50014800

08004bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <memset>:
 8004c7c:	4402      	add	r2, r0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d100      	bne.n	8004c86 <memset+0xa>
 8004c84:	4770      	bx	lr
 8004c86:	f803 1b01 	strb.w	r1, [r3], #1
 8004c8a:	e7f9      	b.n	8004c80 <memset+0x4>

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4d0d      	ldr	r5, [pc, #52]	; (8004cc4 <__libc_init_array+0x38>)
 8004c90:	2600      	movs	r6, #0
 8004c92:	4c0d      	ldr	r4, [pc, #52]	; (8004cc8 <__libc_init_array+0x3c>)
 8004c94:	1b64      	subs	r4, r4, r5
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	42a6      	cmp	r6, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	4d0b      	ldr	r5, [pc, #44]	; (8004ccc <__libc_init_array+0x40>)
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	4c0b      	ldr	r4, [pc, #44]	; (8004cd0 <__libc_init_array+0x44>)
 8004ca2:	f000 f825 	bl	8004cf0 <_init>
 8004ca6:	1b64      	subs	r4, r4, r5
 8004ca8:	10a4      	asrs	r4, r4, #2
 8004caa:	42a6      	cmp	r6, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	4798      	blx	r3
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbe:	3601      	adds	r6, #1
 8004cc0:	4798      	blx	r3
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	08004de0 	.word	0x08004de0
 8004cc8:	08004de0 	.word	0x08004de0
 8004ccc:	08004de0 	.word	0x08004de0
 8004cd0:	08004de4 	.word	0x08004de4

08004cd4 <memcpy>:
 8004cd4:	440a      	add	r2, r1
 8004cd6:	1e43      	subs	r3, r0, #1
 8004cd8:	4291      	cmp	r1, r2
 8004cda:	d100      	bne.n	8004cde <memcpy+0xa>
 8004cdc:	4770      	bx	lr
 8004cde:	b510      	push	{r4, lr}
 8004ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce4:	4291      	cmp	r1, r2
 8004ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cea:	d1f9      	bne.n	8004ce0 <memcpy+0xc>
 8004cec:	bd10      	pop	{r4, pc}
	...

08004cf0 <_init>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr

08004cfc <_fini>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr
