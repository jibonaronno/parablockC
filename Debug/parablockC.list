
parablockC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000282ac  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cca0  080284e8  080284e8  000384e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08035188  08035188  00045188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0803518c  0803518c  0004518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005c8  20000000  08035190  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002594  200005c8  08035758  000505c8  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20002b5c  08035758  00052b5c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  000505c8  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000505fe  2**0
                  CONTENTS, READONLY
 10 .debug_info   000ce941  00000000  00000000  00050641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a432  00000000  00000000  0011ef82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c00  00000000  00000000  001293b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000022b6  00000000  00000000  0012bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000bc49  00000000  00000000  0012e26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003feb0  00000000  00000000  00139eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00182896  00000000  00000000  00179d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ccf4  00000000  00000000  002fc600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  003092f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200005c8 	.word	0x200005c8
 8000254:	00000000 	.word	0x00000000
 8000258:	080284cc 	.word	0x080284cc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200005cc 	.word	0x200005cc
 8000274:	080284cc 	.word	0x080284cc

08000278 <strcmp>:
 8000278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800027c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000280:	2a01      	cmp	r2, #1
 8000282:	bf28      	it	cs
 8000284:	429a      	cmpcs	r2, r3
 8000286:	d0f7      	beq.n	8000278 <strcmp>
 8000288:	1ad0      	subs	r0, r2, r3
 800028a:	4770      	bx	lr

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	; 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	; 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__enable_irq>:
  \brief   Enable IRQ Interrupts
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000bec:	b662      	cpsie	i
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <__disable_irq>:
  \brief   Disable IRQ Interrupts
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <motor_iterator>:
#ifndef N_GANGED
#define N_GANGED 0
#endif

static void motor_iterator (motor_iterator_callback_ptr callback)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    motor_map_t motor;

    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d011      	beq.n	8000cca <motor_iterator+0x32>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	733b      	strb	r3, [r7, #12]
 8000caa:	e00b      	b.n	8000cc4 <motor_iterator+0x2c>
    {
        if(motor.id < N_AXIS)
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d801      	bhi.n	8000cb6 <motor_iterator+0x1e>
            motor.axis = motor.id;
 8000cb2:	7b3b      	ldrb	r3, [r7, #12]
 8000cb4:	737b      	strb	r3, [r7, #13]
            case Z2_MOTOR:
                motor.axis = Z_AXIS;
                break;
#endif
        }
        callback(motor);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	4798      	blx	r3
    if(callback) for(motor.id = 0; motor.id < N_AXIS + N_GANGED; motor.id++)
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	733b      	strb	r3, [r7, #12]
 8000cc4:	7b3b      	ldrb	r3, [r7, #12]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d9f0      	bls.n	8000cac <motor_iterator+0x14>
    }
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <get_limits_cap>:

static limit_signals_t get_limits_cap (void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
    limit_signals_t limits = {0};
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]

#if X_LIMIT_BIT
    limits.min.x = On;
 8000cdc:	783b      	ldrb	r3, [r7, #0]
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	703b      	strb	r3, [r7, #0]
#endif
#if Y_LIMIT_BIT
    limits.min.y = On;
 8000ce4:	783b      	ldrb	r3, [r7, #0]
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	703b      	strb	r3, [r7, #0]
#endif
#if Z_LIMIT_BIT
    limits.min.z = On;
 8000cec:	783b      	ldrb	r3, [r7, #0]
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	703b      	strb	r3, [r7, #0]
#endif
#if V_LIMIT_BIT_MAX
    limits.max.v = On;
#endif

    return limits;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	793a      	ldrb	r2, [r7, #4]
 8000cfc:	f362 0307 	bfi	r3, r2, #0, #8
 8000d00:	797a      	ldrb	r2, [r7, #5]
 8000d02:	f362 230f 	bfi	r3, r2, #8, #8
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	f362 4317 	bfi	r3, r2, #16, #8
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	f362 631f 	bfi	r3, r2, #24, #8
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <get_home_cap>:

static home_signals_t get_home_cap (void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
    home_signals_t home = {0};
 8000d24:	2300      	movs	r3, #0
 8000d26:	803b      	strh	r3, [r7, #0]
    home.secondary.z = On;
#endif

#endif // HOME_MASK

    return home;
 8000d28:	883b      	ldrh	r3, [r7, #0]
 8000d2a:	80bb      	strh	r3, [r7, #4]
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	793a      	ldrb	r2, [r7, #4]
 8000d30:	f362 0307 	bfi	r3, r2, #0, #8
 8000d34:	797a      	ldrb	r2, [r7, #5]
 8000d36:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <driver_delay>:
static spindle_data_t *spindleGetData (spindle_data_request_t request);

#endif

static void driver_delay (uint32_t ms, delay_callback_ptr callback)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
    if((delay.ms = ms) > 0) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <driver_delay+0x54>)
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d013      	beq.n	8000d84 <driver_delay+0x3c>
        if(!(delay.callback = callback)) {
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <driver_delay+0x54>)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	6053      	str	r3, [r2, #4]
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <driver_delay+0x54>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d114      	bne.n	8000d94 <driver_delay+0x4c>
            while(delay.ms)
 8000d6a:	e006      	b.n	8000d7a <driver_delay+0x32>
                grbl.on_execute_delay(state_get());
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <driver_delay+0x58>)
 8000d6e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000d70:	f01b ffd6 	bl	801cd20 <state_get>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4618      	mov	r0, r3
 8000d78:	47a0      	blx	r4
            while(delay.ms)
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <driver_delay+0x54>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f4      	bne.n	8000d6c <driver_delay+0x24>
    } else {
        delay.callback = NULL;
        if(callback)
            callback();
    }
}
 8000d82:	e007      	b.n	8000d94 <driver_delay+0x4c>
        delay.callback = NULL;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <driver_delay+0x54>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
        if(callback)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <driver_delay+0x4c>
            callback();
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	4798      	blx	r3
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	200002f8 	.word	0x200002f8
 8000da0:	200015b8 	.word	0x200015b8

08000da4 <stepperEnable>:

// Enable/disable stepper motors
static void stepperEnable (axes_signals_t enable)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	7138      	strb	r0, [r7, #4]
    enable.mask ^= settings.steppers.enable_invert.mask;
 8000dac:	793a      	ldrb	r2, [r7, #4]
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <stepperEnable+0x3c>)
 8000db0:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8000db4:	4053      	eors	r3, r2
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	713b      	strb	r3, [r7, #4]
#if TRINAMIC_MOTOR_ENABLE && TRINAMIC_I2C
    axes_signals_t tmc_enable = trinamic_stepper_enable(enable);
#else
 #ifdef STEPPERS_ENABLE_PORT
    DIGITAL_OUT(STEPPERS_ENABLE_PORT, STEPPERS_ENABLE_BIT, enable.x);
 8000dba:	793b      	ldrb	r3, [r7, #4]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <stepperEnable+0x28>
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	e001      	b.n	8000dd0 <stepperEnable+0x2c>
 8000dcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <stepperEnable+0x40>)
 8000dd2:	6193      	str	r3, [r2, #24]
  #ifdef V_ENABLE_PORT
    DIGITAL_OUT(V_ENABLE_PORT, V_ENABLE_BIT, enable.u);
  #endif
 #endif
#endif
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20001cf0 	.word	0x20001cf0
 8000de4:	42021400 	.word	0x42021400

08000de8 <stepperWakeUp>:

// Starts stepper driver ISR timer and forces a stepper driver interrupt callback
static void stepperWakeUp (void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    stepperEnable((axes_signals_t){AXES_BITMASK});
 8000dec:	2307      	movs	r3, #7
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ffd8 	bl	8000da4 <stepperEnable>

    STEPPER_TIMER->ARR = hal.f_step_timer / 500; // ~2ms delay to allow drivers time to wake up
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <stepperWakeUp+0x3c>)
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <stepperWakeUp+0x40>)
 8000dfa:	490c      	ldr	r1, [pc, #48]	; (8000e2c <stepperWakeUp+0x44>)
 8000dfc:	fba1 1303 	umull	r1, r3, r1, r3
 8000e00:	095b      	lsrs	r3, r3, #5
 8000e02:	62d3      	str	r3, [r2, #44]	; 0x2c
    STEPPER_TIMER->EGR = TIM_EGR_UG;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <stepperWakeUp+0x40>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	615a      	str	r2, [r3, #20]
    STEPPER_TIMER->SR = ~TIM_SR_UIF;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <stepperWakeUp+0x40>)
 8000e0c:	f06f 0201 	mvn.w	r2, #1
 8000e10:	611a      	str	r2, [r3, #16]
    STEPPER_TIMER->CR1 |= TIM_CR1_CEN;
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <stepperWakeUp+0x40>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <stepperWakeUp+0x40>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200016a0 	.word	0x200016a0
 8000e28:	40000c00 	.word	0x40000c00
 8000e2c:	10624dd3 	.word	0x10624dd3

08000e30 <stepperGoIdle>:

// Disables stepper driver interrupts
static void stepperGoIdle (bool clear_signals)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <stepperGoIdle+0x28>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <stepperGoIdle+0x28>)
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	6013      	str	r3, [r2, #0]
    STEPPER_TIMER->CNT = 0;
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <stepperGoIdle+0x28>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	40000c00 	.word	0x40000c00

08000e5c <stepperCyclesPerTick>:

// Sets up stepper driver interrupt timeout, "Normal" version
static void stepperCyclesPerTick (uint32_t cycles_per_tick)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    STEPPER_TIMER->ARR = cycles_per_tick < (1UL << 20) ? cycles_per_tick : 0x000FFFFFUL;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <stepperCyclesPerTick+0x24>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4906      	ldr	r1, [pc, #24]	; (8000e84 <stepperCyclesPerTick+0x28>)
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	bf28      	it	cs
 8000e6e:	460b      	movcs	r3, r1
 8000e70:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40000c00 	.word	0x40000c00
 8000e84:	000fffff 	.word	0x000fffff

08000e88 <stepperPulseStart>:
#endif
}

// Sets stepper direction and pulse pins and starts a step pulse.
static void stepperPulseStart (stepper_t *stepper)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7b5b      	ldrb	r3, [r3, #13]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d031      	beq.n	8000efc <stepperPulseStart+0x74>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7bdb      	ldrb	r3, [r3, #15]
 8000e9c:	723b      	strb	r3, [r7, #8]
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 8000e9e:	7a3a      	ldrb	r2, [r7, #8]
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <stepperPulseStart+0x100>)
 8000ea2:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000ea6:	4053      	eors	r3, r2
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	723b      	strb	r3, [r7, #8]
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_BIT, dir_outbits.x);
 8000eac:	7a3b      	ldrb	r3, [r7, #8]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <stepperPulseStart+0x36>
 8000eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ebc:	e001      	b.n	8000ec2 <stepperPulseStart+0x3a>
 8000ebe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ec2:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <stepperPulseStart+0x104>)
 8000ec4:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_BIT, dir_outbits.y);
 8000ec6:	7a3b      	ldrb	r3, [r7, #8]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <stepperPulseStart+0x50>
 8000ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed6:	e001      	b.n	8000edc <stepperPulseStart+0x54>
 8000ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000edc:	4a2b      	ldr	r2, [pc, #172]	; (8000f8c <stepperPulseStart+0x104>)
 8000ede:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_BIT, dir_outbits.z);
 8000ee0:	7a3b      	ldrb	r3, [r7, #8]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <stepperPulseStart+0x6a>
 8000eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef0:	e001      	b.n	8000ef6 <stepperPulseStart+0x6e>
 8000ef2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ef6:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <stepperPulseStart+0x104>)
 8000ef8:	6193      	str	r3, [r2, #24]
}
 8000efa:	bf00      	nop
        stepperSetDirOutputs(stepper->dir_outbits);

    if(stepper->step_outbits.value) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7b9b      	ldrb	r3, [r3, #14]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d03a      	beq.n	8000f7a <stepperPulseStart+0xf2>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7b9b      	ldrb	r3, [r3, #14]
 8000f08:	733b      	strb	r3, [r7, #12]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8000f0a:	7b3a      	ldrb	r2, [r7, #12]
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <stepperPulseStart+0x100>)
 8000f0e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000f12:	4053      	eors	r3, r2
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	733b      	strb	r3, [r7, #12]
    DIGITAL_OUT(X_STEP_PORT, X_STEP_BIT, step_outbits.x);
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <stepperPulseStart+0xa2>
 8000f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f28:	e001      	b.n	8000f2e <stepperPulseStart+0xa6>
 8000f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f2e:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <stepperPulseStart+0x104>)
 8000f30:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_BIT, step_outbits.y);
 8000f32:	7b3b      	ldrb	r3, [r7, #12]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <stepperPulseStart+0xbc>
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	e001      	b.n	8000f48 <stepperPulseStart+0xc0>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <stepperPulseStart+0x104>)
 8000f4a:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_BIT, step_outbits.z);
 8000f4c:	7b3b      	ldrb	r3, [r7, #12]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <stepperPulseStart+0xd6>
 8000f58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f5c:	e001      	b.n	8000f62 <stepperPulseStart+0xda>
 8000f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <stepperPulseStart+0x104>)
 8000f64:	6193      	str	r3, [r2, #24]
}
 8000f66:	bf00      	nop
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <stepperPulseStart+0x108>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <stepperPulseStart+0x108>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <stepperPulseStart+0x108>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6013      	str	r3, [r2, #0]
    }
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20001cf0 	.word	0x20001cf0
 8000f8c:	42021000 	.word	0x42021000
 8000f90:	40000800 	.word	0x40000800

08000f94 <stepperPulseStartDelayed>:

// Start a stepper pulse, delay version.
// Note: delay is only added when there is a direction change and a pulse to be output.
static void stepperPulseStartDelayed (stepper_t *stepper)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
        hal.stepper.pulse_start(stepper);
        return;
    }
#endif

    if(stepper->dir_change) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7b5b      	ldrb	r3, [r3, #13]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d047      	beq.n	8001034 <stepperPulseStartDelayed+0xa0>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7bdb      	ldrb	r3, [r3, #15]
 8000fa8:	723b      	strb	r3, [r7, #8]
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 8000faa:	7a3a      	ldrb	r2, [r7, #8]
 8000fac:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <stepperPulseStartDelayed+0x12c>)
 8000fae:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000fb2:	4053      	eors	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	723b      	strb	r3, [r7, #8]
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_BIT, dir_outbits.x);
 8000fb8:	7a3b      	ldrb	r3, [r7, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <stepperPulseStartDelayed+0x36>
 8000fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc8:	e001      	b.n	8000fce <stepperPulseStartDelayed+0x3a>
 8000fca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000fce:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <stepperPulseStartDelayed+0x130>)
 8000fd0:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_BIT, dir_outbits.y);
 8000fd2:	7a3b      	ldrb	r3, [r7, #8]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <stepperPulseStartDelayed+0x50>
 8000fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe2:	e001      	b.n	8000fe8 <stepperPulseStartDelayed+0x54>
 8000fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fe8:	4a36      	ldr	r2, [pc, #216]	; (80010c4 <stepperPulseStartDelayed+0x130>)
 8000fea:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_BIT, dir_outbits.z);
 8000fec:	7a3b      	ldrb	r3, [r7, #8]
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <stepperPulseStartDelayed+0x6a>
 8000ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffc:	e001      	b.n	8001002 <stepperPulseStartDelayed+0x6e>
 8000ffe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <stepperPulseStartDelayed+0x130>)
 8001004:	6193      	str	r3, [r2, #24]
}
 8001006:	bf00      	nop

        stepperSetDirOutputs(stepper->dir_outbits);

        if(stepper->step_outbits.value) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7b9b      	ldrb	r3, [r3, #14]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d051      	beq.n	80010b4 <stepperPulseStartDelayed+0x120>
            next_step_outbits = stepper->step_outbits; // Store out_bits
 8001010:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <stepperPulseStartDelayed+0x134>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7b9b      	ldrb	r3, [r3, #14]
 8001016:	7013      	strb	r3, [r2, #0]
            PULSE_TIMER->ARR = pulse_delay;
 8001018:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <stepperPulseStartDelayed+0x138>)
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <stepperPulseStartDelayed+0x13c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	62d3      	str	r3, [r2, #44]	; 0x2c
            PULSE_TIMER->EGR = TIM_EGR_UG;
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <stepperPulseStartDelayed+0x138>)
 8001022:	2201      	movs	r2, #1
 8001024:	615a      	str	r2, [r3, #20]
            PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <stepperPulseStartDelayed+0x138>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a28      	ldr	r2, [pc, #160]	; (80010cc <stepperPulseStartDelayed+0x138>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6013      	str	r3, [r2, #0]
        }

        return;
 8001032:	e03f      	b.n	80010b4 <stepperPulseStartDelayed+0x120>
    }

    if(stepper->step_outbits.value) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b9b      	ldrb	r3, [r3, #14]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d03c      	beq.n	80010b6 <stepperPulseStartDelayed+0x122>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7b9b      	ldrb	r3, [r3, #14]
 8001040:	733b      	strb	r3, [r7, #12]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8001042:	7b3a      	ldrb	r2, [r7, #12]
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <stepperPulseStartDelayed+0x12c>)
 8001046:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800104a:	4053      	eors	r3, r2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	733b      	strb	r3, [r7, #12]
    DIGITAL_OUT(X_STEP_PORT, X_STEP_BIT, step_outbits.x);
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <stepperPulseStartDelayed+0xce>
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	e001      	b.n	8001066 <stepperPulseStartDelayed+0xd2>
 8001062:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <stepperPulseStartDelayed+0x130>)
 8001068:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_BIT, step_outbits.y);
 800106a:	7b3b      	ldrb	r3, [r7, #12]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <stepperPulseStartDelayed+0xe8>
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	e001      	b.n	8001080 <stepperPulseStartDelayed+0xec>
 800107c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001080:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <stepperPulseStartDelayed+0x130>)
 8001082:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_BIT, step_outbits.z);
 8001084:	7b3b      	ldrb	r3, [r7, #12]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <stepperPulseStartDelayed+0x102>
 8001090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001094:	e001      	b.n	800109a <stepperPulseStartDelayed+0x106>
 8001096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <stepperPulseStartDelayed+0x130>)
 800109c:	6193      	str	r3, [r2, #24]
}
 800109e:	bf00      	nop
        stepperSetStepOutputs(stepper->step_outbits);
        PULSE_TIMER->EGR = TIM_EGR_UG;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <stepperPulseStartDelayed+0x138>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <stepperPulseStartDelayed+0x138>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <stepperPulseStartDelayed+0x138>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e000      	b.n	80010b6 <stepperPulseStartDelayed+0x122>
        return;
 80010b4:	bf00      	nop
    }
}
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20001cf0 	.word	0x20001cf0
 80010c4:	42021000 	.word	0x42021000
 80010c8:	20000660 	.word	0x20000660
 80010cc:	40000800 	.word	0x40000800
 80010d0:	2000064c 	.word	0x2000064c

080010d4 <limitsEnable>:

#endif

// Enable/disable limit pins interrupt
static void limitsEnable (bool on, axes_signals_t homing_cycle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	7139      	strb	r1, [r7, #4]
 80010de:	71fb      	strb	r3, [r7, #7]
    bool disable = !on;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	bf14      	ite	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	2300      	moveq	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f083 0301 	eor.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	77fb      	strb	r3, [r7, #31]
 80010f4:	7ffb      	ldrb	r3, [r7, #31]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	77fb      	strb	r3, [r7, #31]
    axes_signals_t pin;
    input_signal_t *limit;
    uint_fast8_t idx = limit_inputs.n_pins;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <limitsEnable+0xc4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
    limit_signals_t homing_source = xbar_get_homing_source_from_cycle(homing_cycle);
 8001102:	7938      	ldrb	r0, [r7, #4]
 8001104:	f004 f910 	bl	8005328 <xbar_get_homing_source_from_cycle>
 8001108:	4603      	mov	r3, r0
 800110a:	60fb      	str	r3, [r7, #12]

    do {
        limit = &limit_inputs.pins.inputs[--idx];
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <limitsEnable+0xc4>)
 800110e:	6859      	ldr	r1, [r3, #4]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	3b01      	subs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	617b      	str	r3, [r7, #20]
        if(on && homing_cycle.mask) {
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d022      	beq.n	8001170 <limitsEnable+0x9c>
 800112a:	793b      	ldrb	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01f      	beq.n	8001170 <limitsEnable+0x9c>
            pin = xbar_fn_to_axismask(limit->id);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f004 f86d 	bl	8005214 <xbar_fn_to_axismask>
 800113a:	4603      	mov	r3, r0
 800113c:	743b      	strb	r3, [r7, #16]
            disable = limit->group == PinGroup_Limit ? (pin.mask & homing_source.min.mask) : (pin.mask & homing_source.max.mask);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001146:	d109      	bne.n	800115c <limitsEnable+0x88>
 8001148:	7c3a      	ldrb	r2, [r7, #16]
 800114a:	7b3b      	ldrb	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf14      	ite	ne
 8001154:	2301      	movne	r3, #1
 8001156:	2300      	moveq	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	e008      	b.n	800116e <limitsEnable+0x9a>
 800115c:	7c3a      	ldrb	r2, [r7, #16]
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	4013      	ands	r3, r2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	77fb      	strb	r3, [r7, #31]
        }
        gpio_irq_enable(limit, disable ? IRQ_Mode_None : limit->irq_mode);
 8001170:	7ffb      	ldrb	r3, [r7, #31]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <limitsEnable+0xa6>
 8001176:	2300      	movs	r3, #0
 8001178:	e001      	b.n	800117e <limitsEnable+0xaa>
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	7d9b      	ldrb	r3, [r3, #22]
 800117e:	4619      	mov	r1, r3
 8001180:	6978      	ldr	r0, [r7, #20]
 8001182:	f000 fc77 	bl	8001a74 <gpio_irq_enable>
    } while(idx);
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1bf      	bne.n	800110c <limitsEnable+0x38>
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000658 	.word	0x20000658

0800119c <limitsGetState>:
#endif // STEP_INJECT_ENABLE

// Returns limit state as an axes_signals_t variable.
// Each bitfield bit indicates an axis limit, where triggered is 1 and not triggered is 0.
inline static limit_signals_t limitsGetState()
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
    limit_signals_t signals = {0};
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]

    signals.min.mask = settings.limits.invert.mask;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <limitsGetState+0xa4>)
 80011a8:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 80011ac:	703b      	strb	r3, [r7, #0]
#ifdef MAX_LIMIT_SWITCHES
    signals.max.mask = settings.limits.invert.mask;
#endif

#if LIMIT_INMODE == GPIO_SINGLE
    signals.min.x = DIGITAL_IN(X_LIMIT_PORT, X_LIMIT_BIT);
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <limitsGetState+0xa8>)
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	783b      	ldrb	r3, [r7, #0]
 80011c2:	f362 0300 	bfi	r3, r2, #0, #1
 80011c6:	703b      	strb	r3, [r7, #0]
    signals.min.y = DIGITAL_IN(Y_LIMIT_PORT, Y_LIMIT_BIT);
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <limitsGetState+0xa8>)
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	783b      	ldrb	r3, [r7, #0]
 80011dc:	f362 0341 	bfi	r3, r2, #1, #1
 80011e0:	703b      	strb	r3, [r7, #0]
    signals.min.z = DIGITAL_IN(Z_LIMIT_PORT, Z_LIMIT_BIT);
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <limitsGetState+0xac>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	783b      	ldrb	r3, [r7, #0]
 80011f6:	f362 0382 	bfi	r3, r2, #2, #1
 80011fa:	703b      	strb	r3, [r7, #0]
#endif
#ifdef Z_LIMIT_PIN_MAX
    signals.max.z = DIGITAL_IN(Z_LIMIT_PORT_MAX, Z_LIMIT_BIT_MAX);
#endif

    if (settings.limits.invert.mask) {
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <limitsGetState+0xa4>)
 80011fe:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <limitsGetState+0x78>
        signals.min.value ^= settings.limits.invert.mask;
 8001206:	783a      	ldrb	r2, [r7, #0]
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <limitsGetState+0xa4>)
 800120a:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800120e:	4053      	eors	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	703b      	strb	r3, [r7, #0]
#ifdef MAX_LIMIT_SWITCHES
        signals.max.value ^= settings.limits.invert.mask;
#endif
    }

    return signals;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	2300      	movs	r3, #0
 800121a:	793a      	ldrb	r2, [r7, #4]
 800121c:	f362 0307 	bfi	r3, r2, #0, #8
 8001220:	797a      	ldrb	r2, [r7, #5]
 8001222:	f362 230f 	bfi	r3, r2, #8, #8
 8001226:	79ba      	ldrb	r2, [r7, #6]
 8001228:	f362 4317 	bfi	r3, r2, #16, #8
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	f362 631f 	bfi	r3, r2, #24, #8
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20001cf0 	.word	0x20001cf0
 8001244:	42020c00 	.word	0x42020c00
 8001248:	42020000 	.word	0x42020000

0800124c <systemGetState>:

// Returns system state as a control_signals_t variable.
// Each bitfield bit indicates a control signal, where triggered is 1 and not triggered is 0.
static control_signals_t systemGetState (void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
    control_signals_t signals;

    signals.mask = settings.control_invert.mask;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <systemGetState+0x84>)
 8001254:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001258:	80bb      	strh	r3, [r7, #4]

#if CONTROL_INMODE == GPIO_SINGLE
  #if ESTOP_ENABLE
    signals.e_stop = DIGITAL_IN(RESET_PORT, RESET_BIT);
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <systemGetState+0x88>)
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2da      	uxtb	r2, r3
 800126c:	793b      	ldrb	r3, [r7, #4]
 800126e:	f362 1386 	bfi	r3, r2, #6, #1
 8001272:	713b      	strb	r3, [r7, #4]
  #else
    signals.reset = DIGITAL_IN(RESET_PORT, RESET_BIT);
  #endif
    signals.feed_hold = DIGITAL_IN(FEED_HOLD_PORT, FEED_HOLD_BIT);
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <systemGetState+0x8c>)
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2da      	uxtb	r2, r3
 8001286:	793b      	ldrb	r3, [r7, #4]
 8001288:	f362 0341 	bfi	r3, r2, #1, #1
 800128c:	713b      	strb	r3, [r7, #4]
    signals.cycle_start = DIGITAL_IN(CYCLE_START_PORT, CYCLE_START_BIT);
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <systemGetState+0x90>)
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf14      	ite	ne
 800129a:	2301      	movne	r3, #1
 800129c:	2300      	moveq	r3, #0
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	793b      	ldrb	r3, [r7, #4]
 80012a2:	f362 0382 	bfi	r3, r2, #2, #1
 80012a6:	713b      	strb	r3, [r7, #4]
    signals.e_stop = signals.reset;
    signals.reset = settings.control_invert.reset;
  #endif
#endif

    if(settings.control_invert.mask)
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <systemGetState+0x84>)
 80012aa:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <systemGetState+0x74>
        signals.value ^= settings.control_invert.mask;
 80012b2:	88ba      	ldrh	r2, [r7, #4]
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <systemGetState+0x84>)
 80012b6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80012ba:	4053      	eors	r3, r2
 80012bc:	b29b      	uxth	r3, r3
 80012be:	80bb      	strh	r3, [r7, #4]

    return signals;
 80012c0:	88bb      	ldrh	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20001cf0 	.word	0x20001cf0
 80012d4:	42020000 	.word	0x42020000
 80012d8:	42020800 	.word	0x42020800
 80012dc:	42021400 	.word	0x42021400

080012e0 <probeConfigure>:

// Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
static void probeConfigure (bool is_probe_away, bool probing)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
    probe.triggered = Off;
 80012f0:	4a16      	ldr	r2, [pc, #88]	; (800134c <probeConfigure+0x6c>)
 80012f2:	7813      	ldrb	r3, [r2, #0]
 80012f4:	f36f 0300 	bfc	r3, #0, #1
 80012f8:	7013      	strb	r3, [r2, #0]
    probe.is_probing = probing;
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <probeConfigure+0x6c>)
 80012fc:	7813      	ldrb	r3, [r2, #0]
 80012fe:	79b9      	ldrb	r1, [r7, #6]
 8001300:	f361 03c3 	bfi	r3, r1, #3, #1
 8001304:	7013      	strb	r3, [r2, #0]
    probe.inverted = is_probe_away ? !settings.probe.invert_probe_pin : settings.probe.invert_probe_pin;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00e      	beq.n	800132a <probeConfigure+0x4a>
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <probeConfigure+0x70>)
 800130e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf0c      	ite	eq
 800131c:	2301      	moveq	r3, #1
 800131e:	2300      	movne	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	e005      	b.n	8001336 <probeConfigure+0x56>
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <probeConfigure+0x70>)
 800132c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001330:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4905      	ldr	r1, [pc, #20]	; (800134c <probeConfigure+0x6c>)
 8001338:	780b      	ldrb	r3, [r1, #0]
 800133a:	f362 0382 	bfi	r3, r2, #2, #1
 800133e:	700b      	strb	r3, [r1, #0]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	20000300 	.word	0x20000300
 8001350:	20001cf0 	.word	0x20001cf0

08001354 <probeGetState>:

// Returns the probe connected and triggered pin states.
static probe_state_t probeGetState (void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
    probe_state_t state = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	713b      	strb	r3, [r7, #4]

    state.connected = probe.connected;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <probeGetState+0x5c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	793b      	ldrb	r3, [r7, #4]
 800136a:	f362 0341 	bfi	r3, r2, #1, #1
 800136e:	713b      	strb	r3, [r7, #4]
    state.triggered = !!(PROBE_PORT->IDR & PROBE_BIT) ^ probe.inverted;
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <probeGetState+0x60>)
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf14      	ite	ne
 800137c:	2301      	movne	r3, #1
 800137e:	2300      	moveq	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	b25a      	sxtb	r2, r3
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <probeGetState+0x5c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	b25b      	sxtb	r3, r3
 8001390:	4053      	eors	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	793b      	ldrb	r3, [r7, #4]
 800139c:	f362 0300 	bfi	r3, r2, #0, #1
 80013a0:	713b      	strb	r3, [r7, #4]

    return state;
 80013a2:	793b      	ldrb	r3, [r7, #4]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	20000300 	.word	0x20000300
 80013b4:	42021400 	.word	0x42021400

080013b8 <spindle_off>:
#ifdef DRIVER_SPINDLE

// Static spindle (off, on cw & on ccw)

inline static void spindle_off (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
#ifdef SPINDLE_ENABLE_PIN
    DIGITAL_OUT(SPINDLE_ENABLE_PORT, SPINDLE_ENABLE_BIT, settings.spindle.invert.on);
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <spindle_off+0x2c>)
 80013be:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <spindle_off+0x1a>
 80013cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d0:	e001      	b.n	80013d6 <spindle_off+0x1e>
 80013d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <spindle_off+0x30>)
 80013d8:	6193      	str	r3, [r2, #24]
#endif
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20001cf0 	.word	0x20001cf0
 80013e8:	42020000 	.word	0x42020000

080013ec <spindle_on>:

inline static void spindle_on (void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
#ifdef SPINDLE_ENABLE_PIN
    DIGITAL_OUT(SPINDLE_ENABLE_PORT, SPINDLE_ENABLE_BIT, !settings.spindle.invert.on);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <spindle_on+0x2c>)
 80013f2:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <spindle_on+0x1a>
 8001400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001404:	e001      	b.n	800140a <spindle_on+0x1e>
 8001406:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <spindle_on+0x30>)
 800140c:	6193      	str	r3, [r2, #24]
#endif
#if SPINDLE_SYNC_ENABLE
    spindleDataReset();
#endif
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20001cf0 	.word	0x20001cf0
 800141c:	42020000 	.word	0x42020000

08001420 <spindle_dir>:

inline static void spindle_dir (bool ccw)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
#ifdef SPINDLE_DIRECTION_PIN
    DIGITAL_OUT(SPINDLE_DIRECTION_PORT, SPINDLE_DIRECTION_BIT, ccw ^ settings.spindle.invert.ccw);
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <spindle_dir+0x34>)
 800142c:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8001430:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	79fa      	ldrb	r2, [r7, #7]
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <spindle_dir+0x20>
 800143c:	2320      	movs	r3, #32
 800143e:	e001      	b.n	8001444 <spindle_dir+0x24>
 8001440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <spindle_dir+0x38>)
 8001446:	6193      	str	r3, [r2, #24]
#endif
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	20001cf0 	.word	0x20001cf0
 8001458:	42020000 	.word	0x42020000

0800145c <spindleSetState>:

// Start or stop spindle
static void spindleSetState (spindle_state_t state, float rpm)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	7138      	strb	r0, [r7, #4]
 8001464:	ed87 0a00 	vstr	s0, [r7]
    if (!state.on)
 8001468:	793b      	ldrb	r3, [r7, #4]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <spindleSetState+0x1e>
        spindle_off();
 8001474:	f7ff ffa0 	bl	80013b8 <spindle_off>
    else {
        spindle_dir(state.ccw);
        spindle_on();
    }
}
 8001478:	e00d      	b.n	8001496 <spindleSetState+0x3a>
        spindle_dir(state.ccw);
 800147a:	793b      	ldrb	r3, [r7, #4]
 800147c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf14      	ite	ne
 8001486:	2301      	movne	r3, #1
 8001488:	2300      	moveq	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffc7 	bl	8001420 <spindle_dir>
        spindle_on();
 8001492:	f7ff ffab 	bl	80013ec <spindle_on>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <spindle_set_speed>:
// Sets spindle speed
#ifdef SPINDLE_PWM_TIMER_N

// Sets spindle speed
static void spindle_set_speed (uint_fast16_t pwm_value)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    if (pwm_value == spindle_pwm.off_value) {
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <spindle_set_speed+0x90>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d125      	bne.n	80014fe <spindle_set_speed+0x5e>
        pwmEnabled = false;
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <spindle_set_speed+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
        if(settings.spindle.flags.enable_rpm_controlled)
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <spindle_set_speed+0x98>)
 80014ba:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <spindle_set_speed+0x2c>
            spindle_off();
 80014c8:	f7ff ff76 	bl	80013b8 <spindle_off>
        if(spindle_pwm.always_on) {
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <spindle_set_speed+0x90>)
 80014ce:	7e5b      	ldrb	r3, [r3, #25]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <spindle_set_speed+0x50>
            SPINDLE_PWM_TIMER_CCR = spindle_pwm.off_value;
 80014d4:	4a19      	ldr	r2, [pc, #100]	; (800153c <spindle_set_speed+0x9c>)
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <spindle_set_speed+0x90>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	6393      	str	r3, [r2, #56]	; 0x38
#if SPINDLE_PWM_TIMER_N == 1
            SPINDLE_PWM_TIMER->BDTR |= TIM_BDTR_MOE;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <spindle_set_speed+0x9c>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <spindle_set_speed+0x9c>)
 80014e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e6:	6453      	str	r3, [r2, #68]	; 0x44
#endif
            SPINDLE_PWM_TIMER_CCR = pwm_value;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <spindle_set_speed+0x9c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38
        SPINDLE_PWM_TIMER_CCR = pwm_value;
#if SPINDLE_PWM_TIMER_N == 1
        SPINDLE_PWM_TIMER->BDTR |= TIM_BDTR_MOE;
#endif
    }
}
 80014ee:	e01b      	b.n	8001528 <spindle_set_speed+0x88>
            SPINDLE_PWM_TIMER->BDTR &= ~TIM_BDTR_MOE; // Set PWM output low
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <spindle_set_speed+0x9c>)
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	4a11      	ldr	r2, [pc, #68]	; (800153c <spindle_set_speed+0x9c>)
 80014f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014fa:	6453      	str	r3, [r2, #68]	; 0x44
}
 80014fc:	e014      	b.n	8001528 <spindle_set_speed+0x88>
        if(!pwmEnabled) {
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <spindle_set_speed+0x94>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	f083 0301 	eor.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <spindle_set_speed+0x76>
            spindle_on();
 800150c:	f7ff ff6e 	bl	80013ec <spindle_on>
            pwmEnabled = true;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <spindle_set_speed+0x94>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
        SPINDLE_PWM_TIMER_CCR = pwm_value;
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <spindle_set_speed+0x9c>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6393      	str	r3, [r2, #56]	; 0x38
        SPINDLE_PWM_TIMER->BDTR |= TIM_BDTR_MOE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <spindle_set_speed+0x9c>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <spindle_set_speed+0x9c>)
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200005e8 	.word	0x200005e8
 8001534:	200005e4 	.word	0x200005e4
 8001538:	20001cf0 	.word	0x20001cf0
 800153c:	40012c00 	.word	0x40012c00

08001540 <spindleGetPWM>:

static uint_fast16_t spindleGetPWM (float rpm)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	ed87 0a01 	vstr	s0, [r7, #4]
    return spindle_compute_pwm_value(&spindle_pwm, rpm, false);
 800154a:	2100      	movs	r1, #0
 800154c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <spindleGetPWM+0x20>)
 8001552:	f01b f971 	bl	801c838 <spindle_compute_pwm_value>
 8001556:	4603      	mov	r3, r0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200005e8 	.word	0x200005e8

08001564 <spindleSetStateVariable>:

// Start or stop spindle
static void spindleSetStateVariable (spindle_state_t state, float rpm)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	7138      	strb	r0, [r7, #4]
 800156c:	ed87 0a00 	vstr	s0, [r7]
#ifdef SPINDLE_DIRECTION_PIN
    if(state.on)
 8001570:	793b      	ldrb	r3, [r7, #4]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00b      	beq.n	8001594 <spindleSetStateVariable+0x30>
        spindle_dir(state.ccw);
 800157c:	793b      	ldrb	r3, [r7, #4]
 800157e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff46 	bl	8001420 <spindle_dir>
#endif
    if(!settings.spindle.flags.enable_rpm_controlled) {
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <spindleSetStateVariable+0x84>)
 8001596:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10a      	bne.n	80015ba <spindleSetStateVariable+0x56>
        if(state.on)
 80015a4:	793b      	ldrb	r3, [r7, #4]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <spindleSetStateVariable+0x52>
            spindle_on();
 80015b0:	f7ff ff1c 	bl	80013ec <spindle_on>
 80015b4:	e001      	b.n	80015ba <spindleSetStateVariable+0x56>
        else
            spindle_off();
 80015b6:	f7ff feff 	bl	80013b8 <spindle_off>
    }

    spindle_set_speed(state.on ? spindle_compute_pwm_value(&spindle_pwm, rpm, false) : spindle_pwm.off_value);
 80015ba:	793b      	ldrb	r3, [r7, #4]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <spindleSetStateVariable+0x72>
 80015c6:	2100      	movs	r1, #0
 80015c8:	ed97 0a00 	vldr	s0, [r7]
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <spindleSetStateVariable+0x88>)
 80015ce:	f01b f933 	bl	801c838 <spindle_compute_pwm_value>
 80015d2:	4603      	mov	r3, r0
 80015d4:	e001      	b.n	80015da <spindleSetStateVariable+0x76>
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <spindleSetStateVariable+0x88>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff60 	bl	80014a0 <spindle_set_speed>
    }
    spindle_data.state_programmed.on = state.on;
    spindle_data.state_programmed.ccw = state.ccw;
    spindle_data.rpm_programmed = spindle_data.rpm = rpm;
#endif
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20001cf0 	.word	0x20001cf0
 80015ec:	200005e8 	.word	0x200005e8

080015f0 <spindleConfig>:
}

#endif

bool spindleConfig (spindle_ptrs_t *spindle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b090      	sub	sp, #64	; 0x40
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    if(spindle == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <spindleConfig+0x12>
        return false;
 80015fe:	2300      	movs	r3, #0
 8001600:	e0de      	b.n	80017c0 <spindleConfig+0x1d0>

    RCC_ClkInitTypeDef clock;
    uint32_t latency, prescaler = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c

    HAL_RCC_GetClockConfig(&clock, &latency);
 8001606:	f107 0220 	add.w	r2, r7, #32
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f023 fbfd 	bl	8024e10 <HAL_RCC_GetClockConfig>

  #if SPINDLE_PWM_TIMER_N == 1
    if((spindle->cap.variable = !settings.spindle.flags.pwm_disable && spindle_precompute_pwm_values(spindle, &spindle_pwm, (HAL_RCC_GetPCLK2Freq() * TIMER_CLOCK_MUL(clock.APB2CLKDivider)) / prescaler))) {
 8001616:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <spindleConfig+0x1d8>)
 8001618:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 800161c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d117      	bne.n	8001656 <spindleConfig+0x66>
 8001626:	f023 fbdf 	bl	8024de8 <HAL_RCC_GetPCLK2Freq>
 800162a:	4602      	mov	r2, r0
 800162c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <spindleConfig+0x46>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <spindleConfig+0x48>
 8001636:	2302      	movs	r3, #2
 8001638:	fb03 f202 	mul.w	r2, r3, r2
 800163c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	461a      	mov	r2, r3
 8001644:	4961      	ldr	r1, [pc, #388]	; (80017cc <spindleConfig+0x1dc>)
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f01b f83e 	bl	801c6c8 <spindle_precompute_pwm_values>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <spindleConfig+0x66>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <spindleConfig+0x68>
 8001656:	2300      	movs	r3, #0
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	b2d9      	uxtb	r1, r3
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	7a53      	ldrb	r3, [r2, #9]
 8001662:	f361 0300 	bfi	r3, r1, #0, #1
 8001666:	7253      	strb	r3, [r2, #9]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7a5b      	ldrb	r3, [r3, #9]
 800166c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8087 	beq.w	8001786 <spindleConfig+0x196>
  #else
    if((spindle->cap.variable = !settings.spindle.flags.pwm_disable && spindle_precompute_pwm_values(spindle, &spindle_pwm, (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock.APB1CLKDivider)) / prescaler))) {
  #endif

        while(spindle_pwm.period > 65534) {
 8001678:	e015      	b.n	80016a6 <spindleConfig+0xb6>
            prescaler++;
 800167a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800167c:	3301      	adds	r3, #1
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if SPINDLE_PWM_TIMER_N == 1
            spindle_precompute_pwm_values(spindle, &spindle_pwm, (HAL_RCC_GetPCLK2Freq() * TIMER_CLOCK_MUL(clock.APB2CLKDivider)) / prescaler);
 8001680:	f023 fbb2 	bl	8024de8 <HAL_RCC_GetPCLK2Freq>
 8001684:	4602      	mov	r2, r0
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <spindleConfig+0xa0>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <spindleConfig+0xa2>
 8001690:	2302      	movs	r3, #2
 8001692:	fb03 f202 	mul.w	r2, r3, r2
 8001696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	461a      	mov	r2, r3
 800169e:	494b      	ldr	r1, [pc, #300]	; (80017cc <spindleConfig+0x1dc>)
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f01b f811 	bl	801c6c8 <spindle_precompute_pwm_values>
        while(spindle_pwm.period > 65534) {
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <spindleConfig+0x1dc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d8e3      	bhi.n	800167a <spindleConfig+0x8a>
#else
            spindle_precompute_pwm_values(spindle, &spindle_pwm, (HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock.APB1CLKDivider)) / prescaler);
#endif
        }

        spindle->set_state = spindleSetStateVariable;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a46      	ldr	r2, [pc, #280]	; (80017d0 <spindleConfig+0x1e0>)
 80016b6:	61da      	str	r2, [r3, #28]

        SPINDLE_PWM_TIMER->CR1 &= ~TIM_CR1_CEN;
 80016b8:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <spindleConfig+0x1e4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <spindleConfig+0x1e4>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]

        TIM_Base_InitTypeDef timerInitStructure = {
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
            .Prescaler = prescaler - 1,
 80016d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d8:	3b01      	subs	r3, #1
        TIM_Base_InitTypeDef timerInitStructure = {
 80016da:	60bb      	str	r3, [r7, #8]
            .CounterMode = TIM_COUNTERMODE_UP,
            .Period = spindle_pwm.period - 1,
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <spindleConfig+0x1dc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3b01      	subs	r3, #1
        TIM_Base_InitTypeDef timerInitStructure = {
 80016e2:	613b      	str	r3, [r7, #16]
            .ClockDivision = TIM_CLOCKDIVISION_DIV1,
            .RepetitionCounter = 0
        };

        TIM_Base_SetConfig(SPINDLE_PWM_TIMER, &timerInitStructure);
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	4619      	mov	r1, r3
 80016ea:	483a      	ldr	r0, [pc, #232]	; (80017d4 <spindleConfig+0x1e4>)
 80016ec:	f023 fec8 	bl	8025480 <TIM_Base_SetConfig>

        SPINDLE_PWM_TIMER->CCER &= ~SPINDLE_PWM_CCER_EN;
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <spindleConfig+0x1e4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <spindleConfig+0x1e4>)
 80016f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016fa:	6213      	str	r3, [r2, #32]
        SPINDLE_PWM_TIMER_CCMR &= ~SPINDLE_PWM_CCMR_OCM_CLR;
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <spindleConfig+0x1e4>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a34      	ldr	r2, [pc, #208]	; (80017d4 <spindleConfig+0x1e4>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001706:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 800170a:	6193      	str	r3, [r2, #24]
        SPINDLE_PWM_TIMER_CCMR |= SPINDLE_PWM_CCMR_OCM_SET;
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <spindleConfig+0x1e4>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a30      	ldr	r2, [pc, #192]	; (80017d4 <spindleConfig+0x1e4>)
 8001712:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001716:	6193      	str	r3, [r2, #24]
        SPINDLE_PWM_TIMER_CCR = 0;
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <spindleConfig+0x1e4>)
 800171a:	2200      	movs	r2, #0
 800171c:	639a      	str	r2, [r3, #56]	; 0x38
  #if SPINDLE_PWM_TIMER_N == 1
        SPINDLE_PWM_TIMER->BDTR |= TIM_BDTR_OSSR|TIM_BDTR_OSSI;
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <spindleConfig+0x1e4>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a2c      	ldr	r2, [pc, #176]	; (80017d4 <spindleConfig+0x1e4>)
 8001724:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
  #endif
        if(settings.spindle.invert.pwm) {
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <spindleConfig+0x1d8>)
 800172c:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00c      	beq.n	8001754 <spindleConfig+0x164>
            SPINDLE_PWM_TIMER->CCER |= SPINDLE_PWM_CCER_POL;
 800173a:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <spindleConfig+0x1e4>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <spindleConfig+0x1e4>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6213      	str	r3, [r2, #32]
            SPINDLE_PWM_TIMER->CR2 |= SPINDLE_PWM_CR2_OIS;
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <spindleConfig+0x1e4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <spindleConfig+0x1e4>)
 800174c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001750:	6053      	str	r3, [r2, #4]
 8001752:	e00b      	b.n	800176c <spindleConfig+0x17c>
        } else {
            SPINDLE_PWM_TIMER->CCER &= ~SPINDLE_PWM_CCER_POL;
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <spindleConfig+0x1e4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <spindleConfig+0x1e4>)
 800175a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800175e:	6213      	str	r3, [r2, #32]
            SPINDLE_PWM_TIMER->CR2 &= ~SPINDLE_PWM_CR2_OIS;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <spindleConfig+0x1e4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <spindleConfig+0x1e4>)
 8001766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800176a:	6053      	str	r3, [r2, #4]
        }
        SPINDLE_PWM_TIMER->CCER |= SPINDLE_PWM_CCER_EN;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <spindleConfig+0x1e4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <spindleConfig+0x1e4>)
 8001772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001776:	6213      	str	r3, [r2, #32]
        SPINDLE_PWM_TIMER->CR1 |= TIM_CR1_CEN;
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <spindleConfig+0x1e4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <spindleConfig+0x1e4>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	e00d      	b.n	80017a2 <spindleConfig+0x1b2>

    } else {
        if(pwmEnabled)
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <spindleConfig+0x1e8>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d006      	beq.n	800179c <spindleConfig+0x1ac>
            spindle->set_state((spindle_state_t){0}, 0.0f);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2200      	movs	r2, #0
 8001794:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80017dc <spindleConfig+0x1ec>
 8001798:	4610      	mov	r0, r2
 800179a:	4798      	blx	r3

        spindle->set_state = spindleSetState;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <spindleConfig+0x1f0>)
 80017a0:	61da      	str	r2, [r3, #28]
    }

    spindle_update_caps(spindle, spindle->cap.variable ? &spindle_pwm : NULL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7a5b      	ldrb	r3, [r3, #9]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <spindleConfig+0x1c4>
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <spindleConfig+0x1dc>)
 80017b2:	e000      	b.n	80017b6 <spindleConfig+0x1c6>
 80017b4:	2300      	movs	r3, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f01a fab5 	bl	801bd28 <spindle_update_caps>

#if SPINDLE_SYNC_ENABLE
    spindle->cap.at_speed = spindle->get_data == spindleGetData;
#endif

    return true;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3740      	adds	r7, #64	; 0x40
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20001cf0 	.word	0x20001cf0
 80017cc:	200005e8 	.word	0x200005e8
 80017d0:	08001565 	.word	0x08001565
 80017d4:	40012c00 	.word	0x40012c00
 80017d8:	200005e4 	.word	0x200005e4
 80017dc:	00000000 	.word	0x00000000
 80017e0:	0800145d 	.word	0x0800145d

080017e4 <spindleGetState>:

#endif // SPINDLE_PWM_TIMER_N

// Returns spindle state in a spindle_state_t variable
static spindle_state_t spindleGetState (void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
    spindle_state_t state = {settings.spindle.invert.mask};
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <spindleGetState+0x60>)
 80017ec:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 80017f0:	713b      	strb	r3, [r7, #4]

#ifdef SPINDLE_ENABLE_PIN
    state.on = DIGITAL_IN(SPINDLE_ENABLE_PORT, SPINDLE_ENABLE_BIT);
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <spindleGetState+0x64>)
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2da      	uxtb	r2, r3
 8001804:	793b      	ldrb	r3, [r7, #4]
 8001806:	f362 0300 	bfi	r3, r2, #0, #1
 800180a:	713b      	strb	r3, [r7, #4]
#endif
#ifdef SPINDLE_DIRECTION_PIN
    state.ccw = DIGITAL_IN(SPINDLE_DIRECTION_PORT, SPINDLE_DIRECTION_BIT);
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <spindleGetState+0x64>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2da      	uxtb	r2, r3
 800181e:	793b      	ldrb	r3, [r7, #4]
 8001820:	f362 0341 	bfi	r3, r2, #1, #1
 8001824:	713b      	strb	r3, [r7, #4]
#endif
    state.value ^= settings.spindle.invert.mask;
 8001826:	793a      	ldrb	r2, [r7, #4]
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <spindleGetState+0x60>)
 800182a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 800182e:	4053      	eors	r3, r2
 8001830:	b2db      	uxtb	r3, r3
 8001832:	713b      	strb	r3, [r7, #4]
    float rpm = spindleGetData(SpindleData_RPM)->rpm;
    state.at_speed = settings.spindle.at_speed_tolerance <= 0.0f || (rpm >= spindle_data.rpm_low_limit && rpm <= spindle_data.rpm_high_limit);
    state.encoder_error = spindle_encoder.error_count > 0;
#endif

    return state;
 8001834:	793b      	ldrb	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20001cf0 	.word	0x20001cf0
 8001848:	42020000 	.word	0x42020000

0800184c <coolantSetState>:

#endif // DRIVER_SPINDLE

// Start/stop coolant (and mist if enabled)
static void coolantSetState (coolant_state_t mode)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	7138      	strb	r0, [r7, #4]
    mode.value ^= settings.coolant_invert.mask;
 8001854:	793a      	ldrb	r2, [r7, #4]
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <coolantSetState+0x54>)
 8001858:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800185c:	4053      	eors	r3, r2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	713b      	strb	r3, [r7, #4]
    DIGITAL_OUT(COOLANT_FLOOD_PORT, COOLANT_FLOOD_BIT, mode.flood);
 8001862:	793b      	ldrb	r3, [r7, #4]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <coolantSetState+0x26>
 800186e:	2301      	movs	r3, #1
 8001870:	e001      	b.n	8001876 <coolantSetState+0x2a>
 8001872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <coolantSetState+0x58>)
 8001878:	6193      	str	r3, [r2, #24]
#ifdef COOLANT_MIST_PIN
    DIGITAL_OUT(COOLANT_MIST_PORT, COOLANT_MIST_BIT, mode.mist);
 800187a:	793b      	ldrb	r3, [r7, #4]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <coolantSetState+0x3e>
 8001886:	2320      	movs	r3, #32
 8001888:	e001      	b.n	800188e <coolantSetState+0x42>
 800188a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800188e:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <coolantSetState+0x5c>)
 8001890:	6193      	str	r3, [r2, #24]
#endif
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20001cf0 	.word	0x20001cf0
 80018a4:	42021000 	.word	0x42021000
 80018a8:	42021400 	.word	0x42021400

080018ac <coolantGetState>:

// Returns coolant state in a coolant_state_t variable
static coolant_state_t coolantGetState (void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
    coolant_state_t state = (coolant_state_t){settings.coolant_invert.mask};
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <coolantGetState+0x60>)
 80018b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80018b8:	713b      	strb	r3, [r7, #4]

    state.flood = (COOLANT_FLOOD_PORT->IDR & COOLANT_FLOOD_BIT) != 0;
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <coolantGetState+0x64>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf14      	ite	ne
 80018c6:	2301      	movne	r3, #1
 80018c8:	2300      	moveq	r3, #0
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	793b      	ldrb	r3, [r7, #4]
 80018ce:	f362 0300 	bfi	r3, r2, #0, #1
 80018d2:	713b      	strb	r3, [r7, #4]
#ifdef COOLANT_MIST_PIN
    state.mist  = (COOLANT_MIST_PORT->IDR & COOLANT_MIST_BIT) != 0;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <coolantGetState+0x68>)
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	793b      	ldrb	r3, [r7, #4]
 80018e8:	f362 0341 	bfi	r3, r2, #1, #1
 80018ec:	713b      	strb	r3, [r7, #4]
#endif
    state.value ^= settings.coolant_invert.mask;
 80018ee:	793a      	ldrb	r2, [r7, #4]
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <coolantGetState+0x60>)
 80018f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80018f6:	4053      	eors	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	713b      	strb	r3, [r7, #4]

    return state;
 80018fc:	793b      	ldrb	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20001cf0 	.word	0x20001cf0
 8001910:	42021000 	.word	0x42021000
 8001914:	42021400 	.word	0x42021400

08001918 <bitsSetAtomic>:

// Helper functions for setting/clearing/inverting individual bits atomically (uninterruptable)
static void bitsSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001922:	b672      	cpsid	i
}
 8001924:	bf00      	nop
    __disable_irq();
    *ptr |= bits;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001932:	b662      	cpsie	i
}
 8001934:	bf00      	nop
    __enable_irq();
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <bitsClearAtomic>:

static uint_fast16_t bitsClearAtomic (volatile uint_fast16_t *ptr, uint_fast16_t bits)
{
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
    __disable_irq();
    uint_fast16_t prev = *ptr;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
    *ptr &= ~bits;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001964:	b662      	cpsie	i
}
 8001966:	bf00      	nop
    __enable_irq();
    return prev;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <valueSetAtomic>:

static uint_fast16_t valueSetAtomic (volatile uint_fast16_t *ptr, uint_fast16_t value)
{
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
    __disable_irq();
    uint_fast16_t prev = *ptr;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
    *ptr = value;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001990:	b662      	cpsie	i
}
 8001992:	bf00      	nop
    __enable_irq();
    return prev;
 8001994:	68fb      	ldr	r3, [r7, #12]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <getElapsedMicros>:

static uint32_t getElapsedMicros (void)
{
 80019a4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80019a8:	b08a      	sub	sp, #40	; 0x28
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4e26      	ldr	r6, [pc, #152]	; (8001a48 <getElapsedMicros+0xa4>)
 80019ae:	607e      	str	r6, [r7, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019b0:	687e      	ldr	r6, [r7, #4]
 80019b2:	e856 6f00 	ldrex	r6, [r6]
 80019b6:	603e      	str	r6, [r7, #0]
    uint32_t ms, cycles;
    do {
        __LDREXW(&systick_safe_read);
        ms = uwTick;
 80019b8:	4e24      	ldr	r6, [pc, #144]	; (8001a4c <getElapsedMicros+0xa8>)
 80019ba:	6836      	ldr	r6, [r6, #0]
 80019bc:	627e      	str	r6, [r7, #36]	; 0x24
        cycles = cycle_count;
 80019be:	4e24      	ldr	r6, [pc, #144]	; (8001a50 <getElapsedMicros+0xac>)
 80019c0:	6836      	ldr	r6, [r6, #0]
 80019c2:	623e      	str	r6, [r7, #32]
 80019c4:	2601      	movs	r6, #1
 80019c6:	613e      	str	r6, [r7, #16]
 80019c8:	4e1f      	ldr	r6, [pc, #124]	; (8001a48 <getElapsedMicros+0xa4>)
 80019ca:	60fe      	str	r6, [r7, #12]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	e843 2600 	strex	r6, r2, [r3]
 80019d4:	60be      	str	r6, [r7, #8]
   return(result);
 80019d6:	68be      	ldr	r6, [r7, #8]
    } while(__STREXW(1, &systick_safe_read));
 80019d8:	2e00      	cmp	r6, #0
 80019da:	d1e7      	bne.n	80019ac <getElapsedMicros+0x8>

    uint32_t cyccnt = DWT->CYCCNT;
 80019dc:	4e1d      	ldr	r6, [pc, #116]	; (8001a54 <getElapsedMicros+0xb0>)
 80019de:	6876      	ldr	r6, [r6, #4]
 80019e0:	61fe      	str	r6, [r7, #28]
    asm volatile("" : : : "memory");
    uint32_t ccdelta = cyccnt - cycles;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	6a3e      	ldr	r6, [r7, #32]
 80019e6:	1b9e      	subs	r6, r3, r6
 80019e8:	61be      	str	r6, [r7, #24]
    uint32_t frac = ((uint64_t)ccdelta * cycles2us_factor) >> 32;
 80019ea:	69be      	ldr	r6, [r7, #24]
 80019ec:	f04f 0c00 	mov.w	ip, #0
 80019f0:	4634      	mov	r4, r6
 80019f2:	4665      	mov	r5, ip
 80019f4:	4e18      	ldr	r6, [pc, #96]	; (8001a58 <getElapsedMicros+0xb4>)
 80019f6:	6836      	ldr	r6, [r6, #0]
 80019f8:	f04f 0c00 	mov.w	ip, #0
 80019fc:	4630      	mov	r0, r6
 80019fe:	4661      	mov	r1, ip
 8001a00:	fb00 fc05 	mul.w	ip, r0, r5
 8001a04:	fb04 f601 	mul.w	r6, r4, r1
 8001a08:	4466      	add	r6, ip
 8001a0a:	fba4 8900 	umull	r8, r9, r4, r0
 8001a0e:	eb06 0109 	add.w	r1, r6, r9
 8001a12:	4689      	mov	r9, r1
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	4648      	mov	r0, r9
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	617b      	str	r3, [r7, #20]

    return ms * 1000 + (frac > 1000 ? 1000 : frac);
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2a:	fb03 f202 	mul.w	r2, r3, r2
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a34:	bf28      	it	cs
 8001a36:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8001a3a:	4413      	add	r3, r2
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001a46:	4770      	bx	lr
 8001a48:	20000640 	.word	0x20000640
 8001a4c:	200029e4 	.word	0x200029e4
 8001a50:	20001370 	.word	0x20001370
 8001a54:	e0001000 	.word	0xe0001000
 8001a58:	20000644 	.word	0x20000644

08001a5c <getElapsedTicks>:

static uint32_t getElapsedTicks (void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
    return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <getElapsedTicks+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200029e4 	.word	0x200029e4

08001a74 <gpio_irq_enable>:

void gpio_irq_enable (const input_signal_t *input, pin_irq_mode_t irq_mode)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
        EXTI->IMR &= ~input->bit;   // Disable pin interrupt

    if(irq_mode != IRQ_Mode_None)
        EXTI->IMR |= input->bit;    // Enable pin interrupt
    */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <settings_changed>:

// Configures peripherals when settings are initialized or changed
void settings_changed (settings_t *settings, settings_changed_flags_t changed)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b090      	sub	sp, #64	; 0x40
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	7039      	strb	r1, [r7, #0]

#if USE_STEPDIR_MAP
    stepdirmap_init(settings);
#endif

    if(IOInitDone) {
 8001a96:	4b6e      	ldr	r3, [pc, #440]	; (8001c50 <settings_changed+0x1c4>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 839a 	beq.w	80021d4 <settings_changed+0x748>

        GPIO_InitTypeDef GPIO_Init = {
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
            .Speed = GPIO_SPEED_FREQ_HIGH
        };

        stepperSetStepOutputs((axes_signals_t){0});
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	743b      	strb	r3, [r7, #16]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8001ab8:	7c3a      	ldrb	r2, [r7, #16]
 8001aba:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <settings_changed+0x1c8>)
 8001abc:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001ac0:	4053      	eors	r3, r2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	743b      	strb	r3, [r7, #16]
    DIGITAL_OUT(X_STEP_PORT, X_STEP_BIT, step_outbits.x);
 8001ac6:	7c3b      	ldrb	r3, [r7, #16]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <settings_changed+0x4c>
 8001ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad6:	e001      	b.n	8001adc <settings_changed+0x50>
 8001ad8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001adc:	4a5e      	ldr	r2, [pc, #376]	; (8001c58 <settings_changed+0x1cc>)
 8001ade:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_BIT, step_outbits.y);
 8001ae0:	7c3b      	ldrb	r3, [r7, #16]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <settings_changed+0x66>
 8001aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af0:	e001      	b.n	8001af6 <settings_changed+0x6a>
 8001af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001af6:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <settings_changed+0x1cc>)
 8001af8:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_BIT, step_outbits.z);
 8001afa:	7c3b      	ldrb	r3, [r7, #16]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <settings_changed+0x80>
 8001b06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b0a:	e001      	b.n	8001b10 <settings_changed+0x84>
 8001b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <settings_changed+0x1cc>)
 8001b12:	6193      	str	r3, [r2, #24]
}
 8001b14:	bf00      	nop
        stepperSetDirOutputs((axes_signals_t){0});
 8001b16:	2300      	movs	r3, #0
 8001b18:	733b      	strb	r3, [r7, #12]
    dir_outbits.mask ^= settings.steppers.dir_invert.mask;
 8001b1a:	7b3a      	ldrb	r2, [r7, #12]
 8001b1c:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <settings_changed+0x1c8>)
 8001b1e:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8001b22:	4053      	eors	r3, r2
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	733b      	strb	r3, [r7, #12]
    DIGITAL_OUT(X_DIRECTION_PORT, X_DIRECTION_BIT, dir_outbits.x);
 8001b28:	7b3b      	ldrb	r3, [r7, #12]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <settings_changed+0xae>
 8001b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b38:	e001      	b.n	8001b3e <settings_changed+0xb2>
 8001b3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b3e:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <settings_changed+0x1cc>)
 8001b40:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_DIRECTION_PORT, Y_DIRECTION_BIT, dir_outbits.y);
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <settings_changed+0xc8>
 8001b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b52:	e001      	b.n	8001b58 <settings_changed+0xcc>
 8001b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b58:	4a3f      	ldr	r2, [pc, #252]	; (8001c58 <settings_changed+0x1cc>)
 8001b5a:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_DIRECTION_PORT, Z_DIRECTION_BIT, dir_outbits.z);
 8001b5c:	7b3b      	ldrb	r3, [r7, #12]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <settings_changed+0xe2>
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6c:	e001      	b.n	8001b72 <settings_changed+0xe6>
 8001b6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b72:	4a39      	ldr	r2, [pc, #228]	; (8001c58 <settings_changed+0x1cc>)
 8001b74:	6193      	str	r3, [r2, #24]
}
 8001b76:	bf00      	nop
#ifdef SQUARING_ENABLED
        hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
#endif

#ifdef SPINDLE_PWM_TIMER_N
        if(changed.spindle) {
 8001b78:	783b      	ldrb	r3, [r7, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d019      	beq.n	8001bb8 <settings_changed+0x12c>
            spindleConfig(spindle_get_hal(spindle_id, SpindleHAL_Configured));
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <settings_changed+0x1d0>)
 8001b86:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f01a f80b 	bl	801bba8 <spindle_get_hal>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fd2b 	bl	80015f0 <spindleConfig>
            if(spindle_id == spindle_get_default())
 8001b9a:	f01a f877 	bl	801bc8c <spindle_get_default>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <settings_changed+0x1d0>)
 8001ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d105      	bne.n	8001bb8 <settings_changed+0x12c>
                spindle_select(spindle_id);
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <settings_changed+0x1d0>)
 8001bae:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f019 ffc4 	bl	801bb40 <spindle_select>
            spindleDataReset();
        }

#endif

        pulse_length = (uint32_t)(10.0f * (settings->steppers.pulse_microseconds - STEP_PULSE_LATENCY)) - 1;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8001bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bc6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <settings_changed+0x1d4>)
 8001bda:	6013      	str	r3, [r2, #0]

        if(hal.driver_cap.step_pulse_delay && settings->steppers.pulse_delay_microseconds > 0.0f) {
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <settings_changed+0x1d8>)
 8001bde:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d041      	beq.n	8001c70 <settings_changed+0x1e4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8001bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	dd39      	ble.n	8001c70 <settings_changed+0x1e4>
            pulse_delay = (uint32_t)(10.0f * (settings->steppers.pulse_delay_microseconds - 1.0f));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8001c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c16:	ee17 2a90 	vmov	r2, s15
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <settings_changed+0x1dc>)
 8001c1c:	601a      	str	r2, [r3, #0]
            if(pulse_delay < 2)
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <settings_changed+0x1dc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d803      	bhi.n	8001c2e <settings_changed+0x1a2>
                pulse_delay = 2;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <settings_changed+0x1dc>)
 8001c28:	2202      	movs	r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e00a      	b.n	8001c44 <settings_changed+0x1b8>
            else if(pulse_delay == pulse_length)
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <settings_changed+0x1dc>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <settings_changed+0x1d4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d104      	bne.n	8001c44 <settings_changed+0x1b8>
                pulse_delay++;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <settings_changed+0x1dc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <settings_changed+0x1dc>)
 8001c42:	6013      	str	r3, [r2, #0]
            hal.stepper.pulse_start = &stepperPulseStartDelayed;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <settings_changed+0x1d8>)
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <settings_changed+0x1e0>)
 8001c48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001c4c:	e017      	b.n	8001c7e <settings_changed+0x1f2>
 8001c4e:	bf00      	nop
 8001c50:	20000654 	.word	0x20000654
 8001c54:	20001cf0 	.word	0x20001cf0
 8001c58:	42021000 	.word	0x42021000
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000648 	.word	0x20000648
 8001c64:	200016a0 	.word	0x200016a0
 8001c68:	2000064c 	.word	0x2000064c
 8001c6c:	08000f95 	.word	0x08000f95
        } else {
            pulse_delay = 0;
 8001c70:	4bb6      	ldr	r3, [pc, #728]	; (8001f4c <settings_changed+0x4c0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
            hal.stepper.pulse_start = &stepperPulseStart;
 8001c76:	4bb6      	ldr	r3, [pc, #728]	; (8001f50 <settings_changed+0x4c4>)
 8001c78:	4ab6      	ldr	r2, [pc, #728]	; (8001f54 <settings_changed+0x4c8>)
 8001c7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }

        PULSE_TIMER->ARR = pulse_length;
 8001c7e:	4ab6      	ldr	r2, [pc, #728]	; (8001f58 <settings_changed+0x4cc>)
 8001c80:	4bb6      	ldr	r3, [pc, #728]	; (8001f5c <settings_changed+0x4d0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	62d3      	str	r3, [r2, #44]	; 0x2c
        PULSE_TIMER->EGR = TIM_EGR_UG;
 8001c86:	4bb4      	ldr	r3, [pc, #720]	; (8001f58 <settings_changed+0x4cc>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	615a      	str	r2, [r3, #20]
        /*************************
         *  Control pins config  *
         *************************/

#if (DRIVER_IRQMASK|AUXINPUT_MASK) & (1<<0)
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001c8c:	200b      	movs	r0, #11
 8001c8e:	f020 fd05 	bl	802269c <HAL_NVIC_DisableIRQ>
#endif
#if (DRIVER_IRQMASK|AUXINPUT_MASK) & (1<<2)
        HAL_NVIC_DisableIRQ(EXTI2_IRQn);
#endif
#if (DRIVER_IRQMASK|AUXINPUT_MASK) & (1<<3)
        HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8001c92:	200e      	movs	r0, #14
 8001c94:	f020 fd02 	bl	802269c <HAL_NVIC_DisableIRQ>
#endif
#if (DRIVER_IRQMASK|AUXINPUT_MASK) & (1<<4)
        HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001c98:	200f      	movs	r0, #15
 8001c9a:	f020 fcff 	bl	802269c <HAL_NVIC_DisableIRQ>
#if (DRIVER_IRQMASK|AUXINPUT_MASK) & 0xFC00
// MOD 0C        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
#endif

        bool pullup;
        uint32_t i = sizeof(inputpin) / sizeof(input_signal_t);
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	63bb      	str	r3, [r7, #56]	; 0x38
        input_signal_t *input;

        control_signals_t control_fei;
        control_fei.mask = settings->control_disable_pullup.mask ^ settings->control_invert.mask;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001cae:	4053      	eors	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	833b      	strh	r3, [r7, #24]

        axes_signals_t limit_fei;
        limit_fei.mask = settings->limits.disable_pullup.mask ^ settings->limits.invert.mask;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 2126 	ldrb.w	r2, [r3, #294]	; 0x126
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8001cc0:	4053      	eors	r3, r2
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	753b      	strb	r3, [r7, #20]

        do {

            pullup = false;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            input = &inputpin[--i];
 8001ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4aa0      	ldr	r2, [pc, #640]	; (8001f60 <settings_changed+0x4d4>)
 8001cde:	4413      	add	r3, r2
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
            if(!(input->group == PinGroup_AuxInput || input->group == PinGroup_MPG)) {
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cea:	d00f      	beq.n	8001d0c <settings_changed+0x280>
 8001cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf4:	d00a      	beq.n	8001d0c <settings_changed+0x280>
                input->irq_mode = IRQ_Mode_None;
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	759a      	strb	r2, [r3, #22]
                input->bit = 1 << input->pin;
 8001cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfe:	7a1b      	ldrb	r3, [r3, #8]
 8001d00:	461a      	mov	r2, r3
 8001d02:	2301      	movs	r3, #1
 8001d04:	4093      	lsls	r3, r2
 8001d06:	461a      	mov	r2, r3
 8001d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0a:	60da      	str	r2, [r3, #12]
            }

            switch(input->id) {
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b30      	cmp	r3, #48	; 0x30
 8001d12:	f200 81c9 	bhi.w	80020a8 <settings_changed+0x61c>
 8001d16:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <settings_changed+0x290>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001ed1 	.word	0x08001ed1
 8001d20:	08001e11 	.word	0x08001e11
 8001d24:	08001e41 	.word	0x08001e41
 8001d28:	08001e71 	.word	0x08001e71
 8001d2c:	08001ea1 	.word	0x08001ea1
 8001d30:	080020a9 	.word	0x080020a9
 8001d34:	08001de1 	.word	0x08001de1
 8001d38:	080020a9 	.word	0x080020a9
 8001d3c:	080020a9 	.word	0x080020a9
 8001d40:	080020a9 	.word	0x080020a9
 8001d44:	080020a9 	.word	0x080020a9
 8001d48:	08002085 	.word	0x08002085
 8001d4c:	08001eeb 	.word	0x08001eeb
 8001d50:	08001eeb 	.word	0x08001eeb
 8001d54:	08001eeb 	.word	0x08001eeb
 8001d58:	080020a9 	.word	0x080020a9
 8001d5c:	08001f1b 	.word	0x08001f1b
 8001d60:	08001f1b 	.word	0x08001f1b
 8001d64:	08001f1b 	.word	0x08001f1b
 8001d68:	080020a9 	.word	0x080020a9
 8001d6c:	08001f65 	.word	0x08001f65
 8001d70:	08001f65 	.word	0x08001f65
 8001d74:	08001f65 	.word	0x08001f65
 8001d78:	080020a9 	.word	0x080020a9
 8001d7c:	08001f95 	.word	0x08001f95
 8001d80:	08001f95 	.word	0x08001f95
 8001d84:	080020a9 	.word	0x080020a9
 8001d88:	08001fc5 	.word	0x08001fc5
 8001d8c:	08001fc5 	.word	0x08001fc5
 8001d90:	080020a9 	.word	0x080020a9
 8001d94:	08001ff5 	.word	0x08001ff5
 8001d98:	08001ff5 	.word	0x08001ff5
 8001d9c:	080020a9 	.word	0x080020a9
 8001da0:	08002025 	.word	0x08002025
 8001da4:	08002025 	.word	0x08002025
 8001da8:	080020a9 	.word	0x080020a9
 8001dac:	08002055 	.word	0x08002055
 8001db0:	08002055 	.word	0x08002055
 8001db4:	080020a9 	.word	0x080020a9
 8001db8:	080020a9 	.word	0x080020a9
 8001dbc:	080020a9 	.word	0x080020a9
 8001dc0:	080020a9 	.word	0x080020a9
 8001dc4:	0800208d 	.word	0x0800208d
 8001dc8:	080020a9 	.word	0x080020a9
 8001dcc:	080020a9 	.word	0x080020a9
 8001dd0:	080020a9 	.word	0x080020a9
 8001dd4:	080020a9 	.word	0x080020a9
 8001dd8:	080020a9 	.word	0x080020a9
 8001ddc:	0800209b 	.word	0x0800209b

                case Input_EStop:
                    pullup = !settings->control_disable_pullup.e_stop;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = control_fei.e_stop ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001df8:	7e3b      	ldrb	r3, [r7, #24]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <settings_changed+0x37c>
 8001e04:	2202      	movs	r2, #2
 8001e06:	e000      	b.n	8001e0a <settings_changed+0x37e>
 8001e08:	2201      	movs	r2, #1
 8001e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0c:	759a      	strb	r2, [r3, #22]
                    break;
 8001e0e:	e14c      	b.n	80020aa <settings_changed+0x61e>

                case Input_Reset:
                    pullup = !settings->control_disable_pullup.reset;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = control_fei.reset ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001e28:	7e3b      	ldrb	r3, [r7, #24]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <settings_changed+0x3ac>
 8001e34:	2202      	movs	r2, #2
 8001e36:	e000      	b.n	8001e3a <settings_changed+0x3ae>
 8001e38:	2201      	movs	r2, #1
 8001e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3c:	759a      	strb	r2, [r3, #22]
                    break;
 8001e3e:	e134      	b.n	80020aa <settings_changed+0x61e>

                case Input_FeedHold:
                    pullup = !settings->control_disable_pullup.feed_hold;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = control_fei.feed_hold ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001e58:	7e3b      	ldrb	r3, [r7, #24]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <settings_changed+0x3dc>
 8001e64:	2202      	movs	r2, #2
 8001e66:	e000      	b.n	8001e6a <settings_changed+0x3de>
 8001e68:	2201      	movs	r2, #1
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	759a      	strb	r2, [r3, #22]
                    break;
 8001e6e:	e11c      	b.n	80020aa <settings_changed+0x61e>

                case Input_CycleStart:
                    pullup = !settings->control_disable_pullup.cycle_start;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = control_fei.cycle_start ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001e88:	7e3b      	ldrb	r3, [r7, #24]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <settings_changed+0x40c>
 8001e94:	2202      	movs	r2, #2
 8001e96:	e000      	b.n	8001e9a <settings_changed+0x40e>
 8001e98:	2201      	movs	r2, #1
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9c:	759a      	strb	r2, [r3, #22]
                    break;
 8001e9e:	e104      	b.n	80020aa <settings_changed+0x61e>

                case Input_SafetyDoor:
                    pullup = !settings->control_disable_pullup.safety_door_ajar;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = control_fei.safety_door_ajar ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001eb8:	7e3b      	ldrb	r3, [r7, #24]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <settings_changed+0x43c>
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	e000      	b.n	8001eca <settings_changed+0x43e>
 8001ec8:	2201      	movs	r2, #1
 8001eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ecc:	759a      	strb	r2, [r3, #22]
                    break;
 8001ece:	e0ec      	b.n	80020aa <settings_changed+0x61e>

                case Input_Probe:
                    pullup = hal.driver_cap.probe_pull_up;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <settings_changed+0x4c4>)
 8001ed2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8001ed6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    break;
 8001ee8:	e0df      	b.n	80020aa <settings_changed+0x61e>

                case Input_LimitX:
                case Input_LimitX_2:
                case Input_LimitX_Max:
                    pullup = !settings->limits.disable_pullup.x;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf0c      	ite	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	2300      	movne	r3, #0
 8001efe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = limit_fei.x ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001f02:	7d3b      	ldrb	r3, [r7, #20]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <settings_changed+0x486>
 8001f0e:	2202      	movs	r2, #2
 8001f10:	e000      	b.n	8001f14 <settings_changed+0x488>
 8001f12:	2201      	movs	r2, #1
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	759a      	strb	r2, [r3, #22]
                    break;
 8001f18:	e0c7      	b.n	80020aa <settings_changed+0x61e>

                case Input_LimitY:
                case Input_LimitY_2:
                case Input_LimitY_Max:
                    pullup = !settings->limits.disable_pullup.y;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = limit_fei.y ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001f32:	7d3b      	ldrb	r3, [r7, #20]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <settings_changed+0x4b6>
 8001f3e:	2202      	movs	r2, #2
 8001f40:	e000      	b.n	8001f44 <settings_changed+0x4b8>
 8001f42:	2201      	movs	r2, #1
 8001f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f46:	759a      	strb	r2, [r3, #22]
                    break;
 8001f48:	e0af      	b.n	80020aa <settings_changed+0x61e>
 8001f4a:	bf00      	nop
 8001f4c:	2000064c 	.word	0x2000064c
 8001f50:	200016a0 	.word	0x200016a0
 8001f54:	08000e89 	.word	0x08000e89
 8001f58:	40000800 	.word	0x40000800
 8001f5c:	20000648 	.word	0x20000648
 8001f60:	20000004 	.word	0x20000004

                case Input_LimitZ:
                case Input_LimitZ_2:
                case Input_LimitZ_Max:
                    pullup = !settings->limits.disable_pullup.z;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = limit_fei.z ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001f7c:	7d3b      	ldrb	r3, [r7, #20]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <settings_changed+0x500>
 8001f88:	2202      	movs	r2, #2
 8001f8a:	e000      	b.n	8001f8e <settings_changed+0x502>
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f90:	759a      	strb	r2, [r3, #22]
                    break;
 8001f92:	e08a      	b.n	80020aa <settings_changed+0x61e>

                case Input_LimitA:
                case Input_LimitA_Max:
                    pullup = !settings->limits.disable_pullup.a;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = limit_fei.a ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001fac:	7d3b      	ldrb	r3, [r7, #20]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <settings_changed+0x530>
 8001fb8:	2202      	movs	r2, #2
 8001fba:	e000      	b.n	8001fbe <settings_changed+0x532>
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc0:	759a      	strb	r2, [r3, #22]
                    break;
 8001fc2:	e072      	b.n	80020aa <settings_changed+0x61e>

                case Input_LimitB:
                case Input_LimitB_Max:
                    pullup = !settings->limits.disable_pullup.b;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = limit_fei.b ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 8001fdc:	7d3b      	ldrb	r3, [r7, #20]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <settings_changed+0x560>
 8001fe8:	2202      	movs	r2, #2
 8001fea:	e000      	b.n	8001fee <settings_changed+0x562>
 8001fec:	2201      	movs	r2, #1
 8001fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff0:	759a      	strb	r2, [r3, #22]
                    break;
 8001ff2:	e05a      	b.n	80020aa <settings_changed+0x61e>

                case Input_LimitC:
                case Input_LimitC_Max:
                    pullup = !settings->limits.disable_pullup.c;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = limit_fei.c ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800200c:	7d3b      	ldrb	r3, [r7, #20]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <settings_changed+0x590>
 8002018:	2202      	movs	r2, #2
 800201a:	e000      	b.n	800201e <settings_changed+0x592>
 800201c:	2201      	movs	r2, #1
 800201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002020:	759a      	strb	r2, [r3, #22]
                    break;
 8002022:	e042      	b.n	80020aa <settings_changed+0x61e>

                case Input_LimitU:
                case Input_LimitU_Max:
                    pullup = !settings->limits.disable_pullup.u;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = limit_fei.u ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800203c:	7d3b      	ldrb	r3, [r7, #20]
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <settings_changed+0x5c0>
 8002048:	2202      	movs	r2, #2
 800204a:	e000      	b.n	800204e <settings_changed+0x5c2>
 800204c:	2201      	movs	r2, #1
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	759a      	strb	r2, [r3, #22]
                    break;
 8002052:	e02a      	b.n	80020aa <settings_changed+0x61e>

                case Input_LimitV:
                case Input_LimitV_Max:
                    pullup = !settings->limits.disable_pullup.u;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = limit_fei.v ? IRQ_Mode_Falling : IRQ_Mode_Rising;
 800206c:	7d3b      	ldrb	r3, [r7, #20]
 800206e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <settings_changed+0x5f0>
 8002078:	2202      	movs	r2, #2
 800207a:	e000      	b.n	800207e <settings_changed+0x5f2>
 800207c:	2201      	movs	r2, #1
 800207e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002080:	759a      	strb	r2, [r3, #22]
                    break;
 8002082:	e012      	b.n	80020aa <settings_changed+0x61e>

                case Input_MPGSelect:
                    pullup = true;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    break;
 800208a:	e00e      	b.n	80020aa <settings_changed+0x61e>

                case Input_KeypadStrobe:
                    pullup = true;
 800208c:	2301      	movs	r3, #1
 800208e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = IRQ_Mode_Change;
 8002092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002094:	2204      	movs	r2, #4
 8002096:	759a      	strb	r2, [r3, #22]
                    break;
 8002098:	e007      	b.n	80020aa <settings_changed+0x61e>

                case Input_SpindleIndex:
                    pullup = true;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    input->irq_mode = IRQ_Mode_Falling;
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	2202      	movs	r2, #2
 80020a4:	759a      	strb	r2, [r3, #22]
                    break;
 80020a6:	e000      	b.n	80020aa <settings_changed+0x61e>

                default:
                    break;
 80020a8:	bf00      	nop
            }

            if(input->group == PinGroup_AuxInput) {
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020b2:	d110      	bne.n	80020d6 <settings_changed+0x64a>
                pullup = true;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if(input->cap.irq_mode != IRQ_Mode_None) {
 80020ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020bc:	8b1b      	ldrh	r3, [r3, #24]
 80020be:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <settings_changed+0x64a>
                    aux_irq |= input->bit;
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <settings_changed+0x770>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	4a4a      	ldr	r2, [pc, #296]	; (80021fc <settings_changed+0x770>)
 80020d4:	6013      	str	r3, [r2, #0]
                    extireg |= ((uint32_t)(GPIO_GET_INDEX(input->port)) << ((input->pin & 0b11) << 2));
                    SYSCFG->EXTICR[input->pin >> 2] = extireg; */
                }
            }

            GPIO_Init.Pin = input->bit;
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	61fb      	str	r3, [r7, #28]
            GPIO_Init.Pull = pullup ? GPIO_PULLUP : GPIO_NOPULL;
 80020dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <settings_changed+0x65c>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <settings_changed+0x65e>
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24

            switch(input->irq_mode) {
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	7d9b      	ldrb	r3, [r3, #22]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d00c      	beq.n	800210e <settings_changed+0x682>
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	dc0d      	bgt.n	8002114 <settings_changed+0x688>
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d002      	beq.n	8002102 <settings_changed+0x676>
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d003      	beq.n	8002108 <settings_changed+0x67c>
 8002100:	e008      	b.n	8002114 <settings_changed+0x688>
                case IRQ_Mode_Rising:
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <settings_changed+0x774>)
 8002104:	623b      	str	r3, [r7, #32]
                    break;
 8002106:	e008      	b.n	800211a <settings_changed+0x68e>
                case IRQ_Mode_Falling:
                    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <settings_changed+0x778>)
 800210a:	623b      	str	r3, [r7, #32]
                    break;
 800210c:	e005      	b.n	800211a <settings_changed+0x68e>
                case IRQ_Mode_Change:
                    GPIO_Init.Mode = GPIO_MODE_IT_RISING_FALLING;
 800210e:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <settings_changed+0x77c>)
 8002110:	623b      	str	r3, [r7, #32]
                    break;
 8002112:	e002      	b.n	800211a <settings_changed+0x68e>
                default:
                    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
                    break;
 8002118:	bf00      	nop
            }
            HAL_GPIO_Init(input->port, &GPIO_Init);
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f107 021c 	add.w	r2, r7, #28
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f020 fb0d 	bl	8022744 <HAL_GPIO_Init>

            input->debounce = false;
 800212a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212c:	2200      	movs	r2, #0
 800212e:	755a      	strb	r2, [r3, #21]

        } while(i);
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	2b00      	cmp	r3, #0
 8002134:	f47f adc7 	bne.w	8001cc6 <settings_changed+0x23a>

        uint32_t irq_mask = DRIVER_IRQMASK|aux_irq;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <settings_changed+0x770>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002140:	f043 0359 	orr.w	r3, r3, #89	; 0x59
 8002144:	633b      	str	r3, [r7, #48]	; 0x30

        __HAL_GPIO_EXTI_CLEAR_IT(irq_mask);
 8002146:	4a31      	ldr	r2, [pc, #196]	; (800220c <settings_changed+0x780>)
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	60d3      	str	r3, [r2, #12]
 800214c:	4a2f      	ldr	r2, [pc, #188]	; (800220c <settings_changed+0x780>)
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	6113      	str	r3, [r2, #16]

        if(irq_mask & (1<<0)) {
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <settings_changed+0x6e0>
            HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 2);
 800215c:	2202      	movs	r2, #2
 800215e:	2100      	movs	r1, #0
 8002160:	200b      	movs	r0, #11
 8002162:	f020 fa73 	bl	802264c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002166:	200b      	movs	r0, #11
 8002168:	f020 fa8a 	bl	8022680 <HAL_NVIC_EnableIRQ>
        }
        if(irq_mask & (1<<1)) {
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <settings_changed+0x6fa>
            HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 2);
 8002176:	2202      	movs	r2, #2
 8002178:	2100      	movs	r1, #0
 800217a:	200c      	movs	r0, #12
 800217c:	f020 fa66 	bl	802264c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002180:	200c      	movs	r0, #12
 8002182:	f020 fa7d 	bl	8022680 <HAL_NVIC_EnableIRQ>
        }
        if(irq_mask & (1<<2)) {
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <settings_changed+0x714>
            HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 2);
 8002190:	2202      	movs	r2, #2
 8002192:	2100      	movs	r1, #0
 8002194:	200d      	movs	r0, #13
 8002196:	f020 fa59 	bl	802264c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800219a:	200d      	movs	r0, #13
 800219c:	f020 fa70 	bl	8022680 <HAL_NVIC_EnableIRQ>
        }
        if(irq_mask & (1<<3)) {
 80021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <settings_changed+0x72e>
            HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 2);
 80021aa:	2202      	movs	r2, #2
 80021ac:	2100      	movs	r1, #0
 80021ae:	200e      	movs	r0, #14
 80021b0:	f020 fa4c 	bl	802264c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80021b4:	200e      	movs	r0, #14
 80021b6:	f020 fa63 	bl	8022680 <HAL_NVIC_EnableIRQ>
        }
        if(irq_mask & (1<<4)) {
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <settings_changed+0x748>
            HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 2);
 80021c4:	2202      	movs	r2, #2
 80021c6:	2100      	movs	r1, #0
 80021c8:	200f      	movs	r0, #15
 80021ca:	f020 fa3f 	bl	802264c <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80021ce:	200f      	movs	r0, #15
 80021d0:	f020 fa56 	bl	8022680 <HAL_NVIC_EnableIRQ>
// MOD 0G            HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
// MOD            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
        }
    }

    hal.limits.enable(settings->limits.flags.hard_enabled, (axes_signals_t){0});
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <settings_changed+0x784>)
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f892 2124 	ldrb.w	r2, [r2, #292]	; 0x124
 80021de:	f3c2 0200 	ubfx	r2, r2, #0, #1
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	2a00      	cmp	r2, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2201      	movne	r2, #1
 80021ea:	2200      	moveq	r2, #0
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	2100      	movs	r1, #0
 80021f0:	4610      	mov	r0, r2
 80021f2:	4798      	blx	r3
}
 80021f4:	bf00      	nop
 80021f6:	3740      	adds	r7, #64	; 0x40
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000650 	.word	0x20000650
 8002200:	10110000 	.word	0x10110000
 8002204:	10210000 	.word	0x10210000
 8002208:	10310000 	.word	0x10310000
 800220c:	46022000 	.word	0x46022000
 8002210:	200016a0 	.word	0x200016a0

08002214 <port2char>:

static char *port2char (GPIO_TypeDef *port)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    static char name[3] = "P?";

    name[1] = 'A' + GPIO_GET_INDEX(port);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0a9b      	lsrs	r3, r3, #10
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3341      	adds	r3, #65	; 0x41
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <port2char+0x2c>)
 800222e:	705a      	strb	r2, [r3, #1]

    return name;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <port2char+0x2c>)
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000304 	.word	0x20000304

08002244 <enumeratePins>:

static void enumeratePins (bool low_level, pin_info_ptr pin_info, void *data)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	73fb      	strb	r3, [r7, #15]
    static xbar_t pin = {0};
    uint32_t i = sizeof(inputpin) / sizeof(input_signal_t);
 8002252:	2307      	movs	r3, #7
 8002254:	617b      	str	r3, [r7, #20]

    pin.mode.input = On;
 8002256:	4a7c      	ldr	r2, [pc, #496]	; (8002448 <enumeratePins+0x204>)
 8002258:	7e13      	ldrb	r3, [r2, #24]
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	7613      	strb	r3, [r2, #24]

    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e05a      	b.n	800231c <enumeratePins+0xd8>
        pin.pin = inputpin[i].pin;
 8002266:	4979      	ldr	r1, [pc, #484]	; (800244c <enumeratePins+0x208>)
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	3308      	adds	r3, #8
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <enumeratePins+0x204>)
 800227c:	611a      	str	r2, [r3, #16]
        pin.function = inputpin[i].id;
 800227e:	4973      	ldr	r1, [pc, #460]	; (800244c <enumeratePins+0x208>)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4b6e      	ldr	r3, [pc, #440]	; (8002448 <enumeratePins+0x204>)
 8002290:	701a      	strb	r2, [r3, #0]
        pin.group = inputpin[i].group;
 8002292:	496e      	ldr	r1, [pc, #440]	; (800244c <enumeratePins+0x208>)
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	3310      	adds	r3, #16
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a68      	ldr	r2, [pc, #416]	; (8002448 <enumeratePins+0x204>)
 80022a6:	6053      	str	r3, [r2, #4]
        pin.port = low_level ? (void *)inputpin[i].port : (void *)port2char(inputpin[i].port);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <enumeratePins+0x7e>
 80022ae:	4967      	ldr	r1, [pc, #412]	; (800244c <enumeratePins+0x208>)
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	e00c      	b.n	80022dc <enumeratePins+0x98>
 80022c2:	4962      	ldr	r1, [pc, #392]	; (800244c <enumeratePins+0x208>)
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	3304      	adds	r3, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff9d 	bl	8002214 <port2char>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a5a      	ldr	r2, [pc, #360]	; (8002448 <enumeratePins+0x204>)
 80022de:	6093      	str	r3, [r2, #8]
        pin.mode.pwm = pin.group == PinGroup_SpindlePWM;
 80022e0:	4b59      	ldr	r3, [pc, #356]	; (8002448 <enumeratePins+0x204>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2d9      	uxtb	r1, r3
 80022ee:	4a56      	ldr	r2, [pc, #344]	; (8002448 <enumeratePins+0x204>)
 80022f0:	7e53      	ldrb	r3, [r2, #25]
 80022f2:	f361 0382 	bfi	r3, r1, #2, #1
 80022f6:	7653      	strb	r3, [r2, #25]
        pin.description = inputpin[i].description;
 80022f8:	4954      	ldr	r1, [pc, #336]	; (800244c <enumeratePins+0x208>)
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3320      	adds	r3, #32
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a4f      	ldr	r2, [pc, #316]	; (8002448 <enumeratePins+0x204>)
 800230c:	60d3      	str	r3, [r2, #12]

        pin_info(&pin, data);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	484d      	ldr	r0, [pc, #308]	; (8002448 <enumeratePins+0x204>)
 8002314:	4798      	blx	r3
    for(i = 0; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3301      	adds	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b06      	cmp	r3, #6
 8002320:	d9a1      	bls.n	8002266 <enumeratePins+0x22>
    };

    pin.mode.mask = 0;
 8002322:	4b49      	ldr	r3, [pc, #292]	; (8002448 <enumeratePins+0x204>)
 8002324:	2200      	movs	r2, #0
 8002326:	831a      	strh	r2, [r3, #24]
    pin.mode.output = On;
 8002328:	4a47      	ldr	r2, [pc, #284]	; (8002448 <enumeratePins+0x204>)
 800232a:	7e13      	ldrb	r3, [r2, #24]
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	7613      	strb	r3, [r2, #24]

    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e04e      	b.n	80023d6 <enumeratePins+0x192>
        pin.pin = outputpin[i].pin;
 8002338:	4945      	ldr	r1, [pc, #276]	; (8002450 <enumeratePins+0x20c>)
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3308      	adds	r3, #8
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4b3e      	ldr	r3, [pc, #248]	; (8002448 <enumeratePins+0x204>)
 800234e:	611a      	str	r2, [r3, #16]
        pin.function = outputpin[i].id;
 8002350:	493f      	ldr	r1, [pc, #252]	; (8002450 <enumeratePins+0x20c>)
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <enumeratePins+0x204>)
 8002362:	701a      	strb	r2, [r3, #0]
        pin.group = outputpin[i].group;
 8002364:	493a      	ldr	r1, [pc, #232]	; (8002450 <enumeratePins+0x20c>)
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3310      	adds	r3, #16
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a34      	ldr	r2, [pc, #208]	; (8002448 <enumeratePins+0x204>)
 8002378:	6053      	str	r3, [r2, #4]
        pin.port = low_level ? (void *)outputpin[i].port : (void *)port2char(outputpin[i].port);
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <enumeratePins+0x150>
 8002380:	4933      	ldr	r1, [pc, #204]	; (8002450 <enumeratePins+0x20c>)
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3304      	adds	r3, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	e00c      	b.n	80023ae <enumeratePins+0x16a>
 8002394:	492e      	ldr	r1, [pc, #184]	; (8002450 <enumeratePins+0x20c>)
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3304      	adds	r3, #4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff34 	bl	8002214 <port2char>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a26      	ldr	r2, [pc, #152]	; (8002448 <enumeratePins+0x204>)
 80023b0:	6093      	str	r3, [r2, #8]
        pin.description = outputpin[i].description;
 80023b2:	4927      	ldr	r1, [pc, #156]	; (8002450 <enumeratePins+0x20c>)
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3318      	adds	r3, #24
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <enumeratePins+0x204>)
 80023c6:	60d3      	str	r3, [r2, #12]

        pin_info(&pin, data);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	481e      	ldr	r0, [pc, #120]	; (8002448 <enumeratePins+0x204>)
 80023ce:	4798      	blx	r3
    for(i = 0; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b11      	cmp	r3, #17
 80023da:	d9ad      	bls.n	8002338 <enumeratePins+0xf4>
    };

    periph_signal_t *ppin = periph_pins;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <enumeratePins+0x210>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]

    if(ppin) do {
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02b      	beq.n	8002440 <enumeratePins+0x1fc>
        pin.pin = ppin->pin.pin;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a16      	ldr	r2, [pc, #88]	; (8002448 <enumeratePins+0x204>)
 80023ee:	6113      	str	r3, [r2, #16]
        pin.function = ppin->pin.function;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <enumeratePins+0x204>)
 80023f6:	701a      	strb	r2, [r3, #0]
        pin.group = ppin->pin.group;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <enumeratePins+0x204>)
 80023fe:	6053      	str	r3, [r2, #4]
        pin.port = low_level ? ppin->pin.port : (void *)port2char(ppin->pin.port);
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <enumeratePins+0x1c8>
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	e005      	b.n	8002418 <enumeratePins+0x1d4>
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff feff 	bl	8002214 <port2char>
 8002416:	4603      	mov	r3, r0
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <enumeratePins+0x204>)
 800241a:	6093      	str	r3, [r2, #8]
        pin.mode = ppin->pin.mode;
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <enumeratePins+0x204>)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	8a1b      	ldrh	r3, [r3, #16]
 8002422:	8313      	strh	r3, [r2, #24]
        pin.description = ppin->pin.description;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <enumeratePins+0x204>)
 800242a:	60d3      	str	r3, [r2, #12]

        pin_info(&pin, data);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <enumeratePins+0x204>)
 8002432:	4798      	blx	r3

        ppin = ppin->next;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	613b      	str	r3, [r7, #16]
    } while(ppin);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1d3      	bne.n	80023e8 <enumeratePins+0x1a4>
}
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000668 	.word	0x20000668
 800244c:	20000004 	.word	0x20000004
 8002450:	20000100 	.word	0x20000100
 8002454:	2000063c 	.word	0x2000063c

08002458 <registerPeriphPin>:

void registerPeriphPin (const periph_pin_t *pin)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    periph_signal_t *add_pin = malloc(sizeof(periph_signal_t));
 8002460:	201c      	movs	r0, #28
 8002462:	f023 f989 	bl	8025778 <malloc>
 8002466:	4603      	mov	r3, r0
 8002468:	60bb      	str	r3, [r7, #8]

    if(!add_pin)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01f      	beq.n	80024b0 <registerPeriphPin+0x58>
        return;

    memcpy(&add_pin->pin, pin, sizeof(periph_pin_t));
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2218      	movs	r2, #24
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	f023 fe3e 	bl	80260f8 <memcpy>
    add_pin->next = NULL;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]

    if(periph_pins == NULL) {
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <registerPeriphPin+0x60>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d103      	bne.n	8002492 <registerPeriphPin+0x3a>
        periph_pins = add_pin;
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <registerPeriphPin+0x60>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e00f      	b.n	80024b2 <registerPeriphPin+0x5a>
    } else {
        periph_signal_t *last = periph_pins;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <registerPeriphPin+0x60>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]
        while(last->next)
 8002498:	e002      	b.n	80024a0 <registerPeriphPin+0x48>
            last = last->next;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	60fb      	str	r3, [r7, #12]
        while(last->next)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f8      	bne.n	800249a <registerPeriphPin+0x42>
        last->next = add_pin;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	619a      	str	r2, [r3, #24]
 80024ae:	e000      	b.n	80024b2 <registerPeriphPin+0x5a>
        return;
 80024b0:	bf00      	nop
    }
}
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000063c 	.word	0x2000063c

080024bc <setPeriphPinDescription>:

void setPeriphPinDescription (const pin_function_t function, const pin_group_t group, const char *description)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	73fb      	strb	r3, [r7, #15]
    periph_signal_t *ppin = periph_pins;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <setPeriphPinDescription+0x54>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]

    if(ppin) do {
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d015      	beq.n	8002502 <setPeriphPinDescription+0x46>
        if(ppin->pin.function == function && ppin->pin.group == group) {
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d10a      	bne.n	80024f6 <setPeriphPinDescription+0x3a>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d105      	bne.n	80024f6 <setPeriphPinDescription+0x3a>
            ppin->pin.description = description;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	615a      	str	r2, [r3, #20]
            ppin = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e002      	b.n	80024fc <setPeriphPinDescription+0x40>
        } else
            ppin = ppin->next;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	617b      	str	r3, [r7, #20]
    } while(ppin);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1e9      	bne.n	80024d6 <setPeriphPinDescription+0x1a>
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2000063c 	.word	0x2000063c

08002514 <driver_setup>:

#endif

// Initializes MCU peripherals for Grbl use
static bool driver_setup (settings_t *settings)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
    // Interrupt_disableSleepOnIsrExit();

    GPIO_InitTypeDef GPIO_Init = {
 800251c:	f107 0318 	add.w	r3, r7, #24
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
 800252c:	2301      	movs	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	2302      	movs	r3, #2
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
     *************************/

    uint32_t i;

    // Switch on stepper driver power before enabling other output pins
    for(i = 0 ; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002538:	e061      	b.n	80025fe <driver_setup+0xea>
        if(outputpin[i].group == PinGroup_StepperPower) {
 800253a:	4954      	ldr	r1, [pc, #336]	; (800268c <driver_setup+0x178>)
 800253c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3310      	adds	r3, #16
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d153      	bne.n	80025f8 <driver_setup+0xe4>
            GPIO_Init.Pin = outputpin[i].bit = 1 << outputpin[i].pin;
 8002550:	494e      	ldr	r1, [pc, #312]	; (800268c <driver_setup+0x178>)
 8002552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3308      	adds	r3, #8
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	2301      	movs	r3, #1
 8002566:	4093      	lsls	r3, r2
 8002568:	4618      	mov	r0, r3
 800256a:	4948      	ldr	r1, [pc, #288]	; (800268c <driver_setup+0x178>)
 800256c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	330c      	adds	r3, #12
 800257a:	6018      	str	r0, [r3, #0]
 800257c:	4943      	ldr	r1, [pc, #268]	; (800268c <driver_setup+0x178>)
 800257e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	330c      	adds	r3, #12
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8002590:	493e      	ldr	r1, [pc, #248]	; (800268c <driver_setup+0x178>)
 8002592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	3310      	adds	r3, #16
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <driver_setup+0x9c>
 80025ac:	2311      	movs	r3, #17
 80025ae:	e000      	b.n	80025b2 <driver_setup+0x9e>
 80025b0:	2301      	movs	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 80025b4:	4935      	ldr	r1, [pc, #212]	; (800268c <driver_setup+0x178>)
 80025b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3304      	adds	r3, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f107 0218 	add.w	r2, r7, #24
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f020 f8b9 	bl	8022744 <HAL_GPIO_Init>
            DIGITAL_OUT(outputpin[i].port, outputpin[i].bit, 1);
 80025d2:	492e      	ldr	r1, [pc, #184]	; (800268c <driver_setup+0x178>)
 80025d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3304      	adds	r3, #4
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	4829      	ldr	r0, [pc, #164]	; (800268c <driver_setup+0x178>)
 80025e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4403      	add	r3, r0
 80025f2:	330c      	adds	r3, #12
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	618b      	str	r3, [r1, #24]
    for(i = 0 ; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	3301      	adds	r3, #1
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	2b11      	cmp	r3, #17
 8002602:	d99a      	bls.n	800253a <driver_setup+0x26>
        }
    }

    hal.delay_ms(100, NULL);
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <driver_setup+0x17c>)
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	2100      	movs	r1, #0
 800260a:	2064      	movs	r0, #100	; 0x64
 800260c:	4798      	blx	r3

    for(i = 0 ; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 800260e:	2300      	movs	r3, #0
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002612:	e07c      	b.n	800270e <driver_setup+0x1fa>
        if(outputpin[i].group != PinGroup_StepperPower) {
 8002614:	491d      	ldr	r1, [pc, #116]	; (800268c <driver_setup+0x178>)
 8002616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3310      	adds	r3, #16
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d06e      	beq.n	8002708 <driver_setup+0x1f4>
            GPIO_Init.Pin = outputpin[i].bit = 1 << outputpin[i].pin;
 800262a:	4918      	ldr	r1, [pc, #96]	; (800268c <driver_setup+0x178>)
 800262c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3308      	adds	r3, #8
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	2301      	movs	r3, #1
 8002640:	4093      	lsls	r3, r2
 8002642:	4618      	mov	r0, r3
 8002644:	4911      	ldr	r1, [pc, #68]	; (800268c <driver_setup+0x178>)
 8002646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	330c      	adds	r3, #12
 8002654:	6018      	str	r0, [r3, #0]
 8002656:	490d      	ldr	r1, [pc, #52]	; (800268c <driver_setup+0x178>)
 8002658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	330c      	adds	r3, #12
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
            GPIO_Init.Mode = outputpin[i].mode.open_drain ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <driver_setup+0x178>)
 800266c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3310      	adds	r3, #16
 800267a:	791b      	ldrb	r3, [r3, #4]
 800267c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <driver_setup+0x180>
 8002686:	2311      	movs	r3, #17
 8002688:	e005      	b.n	8002696 <driver_setup+0x182>
 800268a:	bf00      	nop
 800268c:	20000100 	.word	0x20000100
 8002690:	200016a0 	.word	0x200016a0
 8002694:	2301      	movs	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
            HAL_GPIO_Init(outputpin[i].port, &GPIO_Init);
 8002698:	498d      	ldr	r1, [pc, #564]	; (80028d0 <driver_setup+0x3bc>)
 800269a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3304      	adds	r3, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f107 0218 	add.w	r2, r7, #24
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f020 f847 	bl	8022744 <HAL_GPIO_Init>

            if(outputpin[i].group == PinGroup_MotorChipSelect || outputpin[i].group == PinGroup_MotorUART)
 80026b6:	4986      	ldr	r1, [pc, #536]	; (80028d0 <driver_setup+0x3bc>)
 80026b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3310      	adds	r3, #16
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b0d      	cmp	r3, #13
 80026ca:	d00a      	beq.n	80026e2 <driver_setup+0x1ce>
 80026cc:	4980      	ldr	r1, [pc, #512]	; (80028d0 <driver_setup+0x3bc>)
 80026ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	3310      	adds	r3, #16
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b0e      	cmp	r3, #14
 80026e0:	d112      	bne.n	8002708 <driver_setup+0x1f4>
                DIGITAL_OUT(outputpin[i].port, outputpin[i].bit, 1);
 80026e2:	497b      	ldr	r1, [pc, #492]	; (80028d0 <driver_setup+0x3bc>)
 80026e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3304      	adds	r3, #4
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	4876      	ldr	r0, [pc, #472]	; (80028d0 <driver_setup+0x3bc>)
 80026f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4403      	add	r3, r0
 8002702:	330c      	adds	r3, #12
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	618b      	str	r3, [r1, #24]
    for(i = 0 ; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	3301      	adds	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	2b11      	cmp	r3, #17
 8002712:	f67f af7f 	bls.w	8002614 <driver_setup+0x100>
        }
    }

    GPIO_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]

 // Stepper init

    STEPPER_TIMER_CLKEN();
 800271a:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <driver_setup+0x3c0>)
 800271c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002720:	4a6c      	ldr	r2, [pc, #432]	; (80028d4 <driver_setup+0x3c0>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800272a:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <driver_setup+0x3c0>)
 800272c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
    STEPPER_TIMER->CR1 &= ~TIM_CR1_CEN;
 8002738:	4b67      	ldr	r3, [pc, #412]	; (80028d8 <driver_setup+0x3c4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a66      	ldr	r2, [pc, #408]	; (80028d8 <driver_setup+0x3c4>)
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	6013      	str	r3, [r2, #0]
    STEPPER_TIMER->SR &= ~TIM_SR_UIF;
 8002744:	4b64      	ldr	r3, [pc, #400]	; (80028d8 <driver_setup+0x3c4>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4a63      	ldr	r2, [pc, #396]	; (80028d8 <driver_setup+0x3c4>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6113      	str	r3, [r2, #16]
    STEPPER_TIMER->PSC = STEPPER_TIMER_DIV - 1;
 8002750:	4b61      	ldr	r3, [pc, #388]	; (80028d8 <driver_setup+0x3c4>)
 8002752:	2203      	movs	r2, #3
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
    STEPPER_TIMER->CNT = 0;
 8002756:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <driver_setup+0x3c4>)
 8002758:	2200      	movs	r2, #0
 800275a:	625a      	str	r2, [r3, #36]	; 0x24
    STEPPER_TIMER->CR1 |= TIM_CR1_DIR;
 800275c:	4b5e      	ldr	r3, [pc, #376]	; (80028d8 <driver_setup+0x3c4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a5d      	ldr	r2, [pc, #372]	; (80028d8 <driver_setup+0x3c4>)
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	6013      	str	r3, [r2, #0]
    STEPPER_TIMER->DIER |= TIM_DIER_UIE;
 8002768:	4b5b      	ldr	r3, [pc, #364]	; (80028d8 <driver_setup+0x3c4>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a5a      	ldr	r2, [pc, #360]	; (80028d8 <driver_setup+0x3c4>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(STEPPER_TIMER_IRQn, 1);
 8002774:	2101      	movs	r1, #1
 8002776:	2030      	movs	r0, #48	; 0x30
 8002778:	f7fe fa64 	bl	8000c44 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STEPPER_TIMER_IRQn);
 800277c:	2030      	movs	r0, #48	; 0x30
 800277e:	f7fe fa43 	bl	8000c08 <__NVIC_EnableIRQ>

 // Single-shot 100 ns per tick

    PULSE_TIMER_CLKEN();
 8002782:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <driver_setup+0x3c0>)
 8002784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <driver_setup+0x3c0>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002792:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <driver_setup+0x3c0>)
 8002794:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]
    PULSE_TIMER->CR1 |= TIM_CR1_OPM|TIM_CR1_DIR|TIM_CR1_CKD_1|TIM_CR1_ARPE|TIM_CR1_URS;
 80027a0:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <driver_setup+0x3c8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a4d      	ldr	r2, [pc, #308]	; (80028dc <driver_setup+0x3c8>)
 80027a6:	f443 7327 	orr.w	r3, r3, #668	; 0x29c
 80027aa:	6013      	str	r3, [r2, #0]
    PULSE_TIMER->PSC = (hal.f_step_timer * STEPPER_TIMER_DIV) / 10000000UL - 1;
 80027ac:	4b4c      	ldr	r3, [pc, #304]	; (80028e0 <driver_setup+0x3cc>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4a4c      	ldr	r2, [pc, #304]	; (80028e4 <driver_setup+0x3d0>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	0d9b      	lsrs	r3, r3, #22
 80027ba:	4a48      	ldr	r2, [pc, #288]	; (80028dc <driver_setup+0x3c8>)
 80027bc:	3b01      	subs	r3, #1
 80027be:	6293      	str	r3, [r2, #40]	; 0x28
    PULSE_TIMER->SR &= ~(TIM_SR_UIF|TIM_SR_CC1IF);
 80027c0:	4b46      	ldr	r3, [pc, #280]	; (80028dc <driver_setup+0x3c8>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	4a45      	ldr	r2, [pc, #276]	; (80028dc <driver_setup+0x3c8>)
 80027c6:	f023 0303 	bic.w	r3, r3, #3
 80027ca:	6113      	str	r3, [r2, #16]
    PULSE_TIMER->CNT = 0;
 80027cc:	4b43      	ldr	r3, [pc, #268]	; (80028dc <driver_setup+0x3c8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
    PULSE_TIMER->DIER |= TIM_DIER_UIE;
 80027d2:	4b42      	ldr	r3, [pc, #264]	; (80028dc <driver_setup+0x3c8>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	4a41      	ldr	r2, [pc, #260]	; (80028dc <driver_setup+0x3c8>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(PULSE_TIMER_IRQn, 0);
 80027de:	2100      	movs	r1, #0
 80027e0:	202f      	movs	r0, #47	; 0x2f
 80027e2:	f7fe fa2f 	bl	8000c44 <__NVIC_SetPriority>
    NVIC_EnableIRQ(PULSE_TIMER_IRQn);
 80027e6:	202f      	movs	r0, #47	; 0x2f
 80027e8:	f7fe fa0e 	bl	8000c08 <__NVIC_EnableIRQ>
        // MOD 0E HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0x02, 0x02);
    }

 // Control pins init

    if(hal.driver_cap.software_debounce) {
 80027ec:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <driver_setup+0x3cc>)
 80027ee:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d030      	beq.n	800285e <driver_setup+0x34a>
        // Single-shot 0.1 ms per tick
        DEBOUNCE_TIMER_CLKEN();
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <driver_setup+0x3c0>)
 80027fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <driver_setup+0x3c0>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800280c:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <driver_setup+0x3c0>)
 800280e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
        DEBOUNCE_TIMER->CR1 |= TIM_CR1_OPM|TIM_CR1_DIR|TIM_CR1_CKD_1|TIM_CR1_ARPE|TIM_CR1_URS;
 800281a:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <driver_setup+0x3d4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a32      	ldr	r2, [pc, #200]	; (80028e8 <driver_setup+0x3d4>)
 8002820:	f443 7327 	orr.w	r3, r3, #668	; 0x29c
 8002824:	6013      	str	r3, [r2, #0]
        DEBOUNCE_TIMER->PSC = hal.f_step_timer / 10000UL - 1;
 8002826:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <driver_setup+0x3cc>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a30      	ldr	r2, [pc, #192]	; (80028ec <driver_setup+0x3d8>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	0b5b      	lsrs	r3, r3, #13
 8002832:	4a2d      	ldr	r2, [pc, #180]	; (80028e8 <driver_setup+0x3d4>)
 8002834:	3b01      	subs	r3, #1
 8002836:	6293      	str	r3, [r2, #40]	; 0x28
        DEBOUNCE_TIMER->SR &= ~TIM_SR_UIF;
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <driver_setup+0x3d4>)
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <driver_setup+0x3d4>)
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6113      	str	r3, [r2, #16]
        DEBOUNCE_TIMER->ARR = 400; // 40 ms timeout
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <driver_setup+0x3d4>)
 8002846:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
        DEBOUNCE_TIMER->DIER |= TIM_DIER_UIE;
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <driver_setup+0x3d4>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <driver_setup+0x3d4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	60d3      	str	r3, [r2, #12]

        HAL_NVIC_EnableIRQ(DEBOUNCE_TIMER_IRQn); // Enable debounce interrupt
 8002858:	202e      	movs	r0, #46	; 0x2e
 800285a:	f01f ff11 	bl	8022680 <HAL_NVIC_EnableIRQ>

  // Spindle init

#if defined(DRIVER_SPINDLE) && defined(SPINDLE_PWM_TIMER_N)

    SPINDLE_PWM_TIMER_CLKEN();
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <driver_setup+0x3c0>)
 8002860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002864:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <driver_setup+0x3c0>)
 8002866:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800286a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <driver_setup+0x3c0>)
 8002870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]

    GPIO_Init.Pin = (1<<SPINDLE_PWM_PIN);
 800287c:	2301      	movs	r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
    GPIO_Init.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_Init.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
    GPIO_Init.Alternate = SPINDLE_PWM_AF;
 8002888:	2301      	movs	r3, #1
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SPINDLE_PWM_PORT, &GPIO_Init);
 800288c:	f107 0318 	add.w	r3, r7, #24
 8002890:	4619      	mov	r1, r3
 8002892:	4817      	ldr	r0, [pc, #92]	; (80028f0 <driver_setup+0x3dc>)
 8002894:	f01f ff56 	bl	8022744 <HAL_GPIO_Init>
        .port = SPINDLE_PWM_PORT,
        .pin = SPINDLE_PWM_PIN,
        .mode = { .mask = PINMODE_OUTPUT }
    };

    hal.periph_port.register_pin(&pwm);
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <driver_setup+0x3cc>)
 800289a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800289e:	4815      	ldr	r0, [pc, #84]	; (80028f4 <driver_setup+0x3e0>)
 80028a0:	4798      	blx	r3
    GPIO_Init.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(SPINDLE_PULSE_PORT, &GPIO_Init);

#endif

    IOInitDone = settings->version == 22;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b16      	cmp	r3, #22
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <driver_setup+0x3e4>)
 80028b2:	701a      	strb	r2, [r3, #0]

    hal.settings_changed(settings, (settings_changed_flags_t){0});
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <driver_setup+0x3cc>)
 80028b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ba:	2200      	movs	r2, #0
 80028bc:	4611      	mov	r1, r2
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3

#if ETHERNET_ENABLE
    enet_start();
#endif

    return IOInitDone;
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <driver_setup+0x3e4>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3730      	adds	r7, #48	; 0x30
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000100 	.word	0x20000100
 80028d4:	46020c00 	.word	0x46020c00
 80028d8:	40000c00 	.word	0x40000c00
 80028dc:	40000800 	.word	0x40000800
 80028e0:	200016a0 	.word	0x200016a0
 80028e4:	6b5fca6b 	.word	0x6b5fca6b
 80028e8:	40000400 	.word	0x40000400
 80028ec:	d1b71759 	.word	0xd1b71759
 80028f0:	42020400 	.word	0x42020400
 80028f4:	08032500 	.word	0x08032500
 80028f8:	20000654 	.word	0x20000654

080028fc <get_free_mem>:
}

#endif

uint32_t get_free_mem (void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08c      	sub	sp, #48	; 0x30
 8002900:	af00      	add	r7, sp, #0
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <get_free_mem+0x28>)
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <get_free_mem+0x2c>)
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c

    return stack_limit - (uint32_t)&_end - mallinfo().uordblks;
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	4618      	mov	r0, r3
 800290e:	f022 ffef 	bl	80258f0 <mallinfo>
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <get_free_mem+0x30>)
 800291a:	1a9b      	subs	r3, r3, r2
}
 800291c:	4618      	mov	r0, r3
 800291e:	3730      	adds	r7, #48	; 0x30
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200c0000 	.word	0x200c0000
 8002928:	00000400 	.word	0x00000400
 800292c:	20002b60 	.word	0x20002b60

08002930 <driver_init>:

// Initialize HAL pointers, setup serial comms and enable EEPROM
// NOTE: grblHAL is not yet configured (from EEPROM data), driver_setup() will be called when done

bool driver_init (void)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b093      	sub	sp, #76	; 0x4c
 8002934:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b86      	ldr	r3, [pc, #536]	; (8002b50 <driver_init+0x220>)
 8002938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293c:	4a84      	ldr	r2, [pc, #528]	; (8002b50 <driver_init+0x220>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002946:	4b82      	ldr	r3, [pc, #520]	; (8002b50 <driver_init+0x220>)
 8002948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002954:	4b7e      	ldr	r3, [pc, #504]	; (8002b50 <driver_init+0x220>)
 8002956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <driver_init+0x220>)
 800295c:	f043 0302 	orr.w	r3, r3, #2
 8002960:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002964:	4b7a      	ldr	r3, [pc, #488]	; (8002b50 <driver_init+0x220>)
 8002966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002972:	4b77      	ldr	r3, [pc, #476]	; (8002b50 <driver_init+0x220>)
 8002974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002978:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <driver_init+0x220>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002982:	4b73      	ldr	r3, [pc, #460]	; (8002b50 <driver_init+0x220>)
 8002984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002990:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <driver_init+0x220>)
 8002992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002996:	4a6e      	ldr	r2, [pc, #440]	; (8002b50 <driver_init+0x220>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029a0:	4b6b      	ldr	r3, [pc, #428]	; (8002b50 <driver_init+0x220>)
 80029a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ae:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <driver_init+0x220>)
 80029b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b4:	4a66      	ldr	r2, [pc, #408]	; (8002b50 <driver_init+0x220>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029be:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <driver_init+0x220>)
 80029c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029cc:	4b60      	ldr	r3, [pc, #384]	; (8002b50 <driver_init+0x220>)
 80029ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d2:	4a5f      	ldr	r2, [pc, #380]	; (8002b50 <driver_init+0x220>)
 80029d4:	f043 0320 	orr.w	r3, r3, #32
 80029d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029dc:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <driver_init+0x220>)
 80029de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029ea:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <driver_init+0x220>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	4a57      	ldr	r2, [pc, #348]	; (8002b50 <driver_init+0x220>)
 80029f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029fa:	4b55      	ldr	r3, [pc, #340]	; (8002b50 <driver_init+0x220>)
 80029fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]

    uint32_t latency;
    RCC_ClkInitTypeDef clock_cfg;

    HAL_RCC_GetClockConfig(&clock_cfg, &latency);
 8002a08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a0c:	f107 0320 	add.w	r3, r7, #32
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f022 f9fc 	bl	8024e10 <HAL_RCC_GetClockConfig>

    hal.info = "STM32F756";
 8002a18:	4b4e      	ldr	r3, [pc, #312]	; (8002b54 <driver_init+0x224>)
 8002a1a:	4a4f      	ldr	r2, [pc, #316]	; (8002b58 <driver_init+0x228>)
 8002a1c:	605a      	str	r2, [r3, #4]
    hal.driver_version = "250926";
 8002a1e:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <driver_init+0x224>)
 8002a20:	4a4e      	ldr	r2, [pc, #312]	; (8002b5c <driver_init+0x22c>)
 8002a22:	609a      	str	r2, [r3, #8]
    hal.driver_url = GRBL_URL "/STM32F7xx";
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <driver_init+0x224>)
 8002a26:	4a4e      	ldr	r2, [pc, #312]	; (8002b60 <driver_init+0x230>)
 8002a28:	611a      	str	r2, [r3, #16]
#ifdef BOARD_NAME
    hal.board = BOARD_NAME;
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <driver_init+0x224>)
 8002a2c:	4a4d      	ldr	r2, [pc, #308]	; (8002b64 <driver_init+0x234>)
 8002a2e:	615a      	str	r2, [r3, #20]
#endif
#ifdef BOARD_URL
    hal.board = BOARD_URL;
#endif
    hal.driver_setup = driver_setup;
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <driver_init+0x224>)
 8002a32:	4a4d      	ldr	r2, [pc, #308]	; (8002b68 <driver_init+0x238>)
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
    hal.f_mcu = HAL_RCC_GetHCLKFreq() / 1000000UL;
 8002a36:	f022 f9a9 	bl	8024d8c <HAL_RCC_GetHCLKFreq>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <driver_init+0x23c>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0c9b      	lsrs	r3, r3, #18
 8002a44:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <driver_init+0x224>)
 8002a46:	6213      	str	r3, [r2, #32]
    hal.f_step_timer = HAL_RCC_GetPCLK1Freq() * TIMER_CLOCK_MUL(clock_cfg.APB1CLKDivider) / STEPPER_TIMER_DIV;
 8002a48:	f022 f9ba 	bl	8024dc0 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <driver_init+0x128>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <driver_init+0x12a>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	4a3c      	ldr	r2, [pc, #240]	; (8002b54 <driver_init+0x224>)
 8002a62:	61d3      	str	r3, [r2, #28]
    hal.rx_buffer_size = RX_BUFFER_SIZE;
 8002a64:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <driver_init+0x224>)
 8002a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hal.get_free_mem = get_free_mem;
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <driver_init+0x224>)
 8002a6e:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <driver_init+0x240>)
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
    hal.delay_ms = &driver_delay;
 8002a72:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <driver_init+0x224>)
 8002a74:	4a3f      	ldr	r2, [pc, #252]	; (8002b74 <driver_init+0x244>)
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38
    hal.settings_changed = settings_changed;
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <driver_init+0x224>)
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <driver_init+0x248>)
 8002a7c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

    cycles2us_factor = 0xFFFFFFFFU / hal.f_mcu;
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <driver_init+0x224>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	4a3b      	ldr	r2, [pc, #236]	; (8002b7c <driver_init+0x24c>)
 8002a8e:	6013      	str	r3, [r2, #0]

    hal.stepper.wake_up = stepperWakeUp;
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <driver_init+0x224>)
 8002a92:	4a3b      	ldr	r2, [pc, #236]	; (8002b80 <driver_init+0x250>)
 8002a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hal.stepper.go_idle = stepperGoIdle;
 8002a98:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <driver_init+0x224>)
 8002a9a:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <driver_init+0x254>)
 8002a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hal.stepper.enable = stepperEnable;
 8002aa0:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <driver_init+0x224>)
 8002aa2:	4a39      	ldr	r2, [pc, #228]	; (8002b88 <driver_init+0x258>)
 8002aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hal.stepper.cycles_per_tick = stepperCyclesPerTick;
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <driver_init+0x224>)
 8002aaa:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <driver_init+0x25c>)
 8002aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hal.stepper.pulse_start = stepperPulseStart;
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <driver_init+0x224>)
 8002ab2:	4a37      	ldr	r2, [pc, #220]	; (8002b90 <driver_init+0x260>)
 8002ab4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hal.stepper.motor_iterator = motor_iterator;
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <driver_init+0x224>)
 8002aba:	4a36      	ldr	r2, [pc, #216]	; (8002b94 <driver_init+0x264>)
 8002abc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif
#if STEP_INJECT_ENABLE
    hal.stepper.output_step = stepperOutputStep;
#endif

    hal.limits.enable = limitsEnable;
 8002ac0:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <driver_init+0x224>)
 8002ac2:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <driver_init+0x268>)
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
    hal.limits.get_state = limitsGetState;
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <driver_init+0x224>)
 8002ac8:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <driver_init+0x26c>)
 8002aca:	659a      	str	r2, [r3, #88]	; 0x58

    hal.coolant.set_state = coolantSetState;
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <driver_init+0x224>)
 8002ace:	4a34      	ldr	r2, [pc, #208]	; (8002ba0 <driver_init+0x270>)
 8002ad0:	671a      	str	r2, [r3, #112]	; 0x70
    hal.coolant.get_state = coolantGetState;
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <driver_init+0x224>)
 8002ad4:	4a33      	ldr	r2, [pc, #204]	; (8002ba4 <driver_init+0x274>)
 8002ad6:	675a      	str	r2, [r3, #116]	; 0x74

#ifdef PROBE_PIN
    hal.probe.get_state = probeGetState;
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <driver_init+0x224>)
 8002ada:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <driver_init+0x278>)
 8002adc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    hal.probe.configure = probeConfigure;
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <driver_init+0x224>)
 8002ae2:	4a32      	ldr	r2, [pc, #200]	; (8002bac <driver_init+0x27c>)
 8002ae4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
#endif

    hal.control.get_state = systemGetState;
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <driver_init+0x224>)
 8002aea:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <driver_init+0x280>)
 8002aec:	669a      	str	r2, [r3, #104]	; 0x68

    hal.irq_enable = __enable_irq;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <driver_init+0x224>)
 8002af0:	4a30      	ldr	r2, [pc, #192]	; (8002bb4 <driver_init+0x284>)
 8002af2:	649a      	str	r2, [r3, #72]	; 0x48
    hal.irq_disable = __disable_irq;
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <driver_init+0x224>)
 8002af6:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <driver_init+0x288>)
 8002af8:	64da      	str	r2, [r3, #76]	; 0x4c
#if I2C_STROBE_ENABLE
    hal.irq_claim = irq_claim;
#endif
    hal.set_bits_atomic = bitsSetAtomic;
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <driver_init+0x224>)
 8002afc:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <driver_init+0x28c>)
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c
    hal.clear_bits_atomic = bitsClearAtomic;
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <driver_init+0x224>)
 8002b02:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <driver_init+0x290>)
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
    hal.set_value_atomic = valueSetAtomic;
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <driver_init+0x224>)
 8002b08:	4a2e      	ldr	r2, [pc, #184]	; (8002bc4 <driver_init+0x294>)
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
    hal.get_micros = getElapsedMicros;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <driver_init+0x224>)
 8002b0e:	4a2e      	ldr	r2, [pc, #184]	; (8002bc8 <driver_init+0x298>)
 8002b10:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hal.get_elapsed_ticks = getElapsedTicks;
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <driver_init+0x224>)
 8002b16:	4a2d      	ldr	r2, [pc, #180]	; (8002bcc <driver_init+0x29c>)
 8002b18:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hal.enumerate_pins = enumeratePins;
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <driver_init+0x224>)
 8002b1e:	4a2c      	ldr	r2, [pc, #176]	; (8002bd0 <driver_init+0x2a0>)
 8002b20:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    hal.periph_port.register_pin = registerPeriphPin;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <driver_init+0x224>)
 8002b26:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <driver_init+0x2a4>)
 8002b28:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    hal.periph_port.set_pin_description = setPeriphPinDescription;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <driver_init+0x224>)
 8002b2e:	4a2a      	ldr	r2, [pc, #168]	; (8002bd8 <driver_init+0x2a8>)
 8002b30:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#if RTC_ENABLE
    hal.rtc.get_datetime = get_rtc_time;
    hal.rtc.set_datetime = set_rtc_time;
#endif

    serialRegisterStreams();
 8002b34:	f001 fba2 	bl	800427c <serialRegisterStreams>

#if USB_SERIAL_CDC
    stream_connect(usbInit());
#else
    if(!stream_connect_instance(SERIAL_STREAM, BAUD_RATE))
 8002b38:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f01d f8e7 	bl	801fd10 <stream_connect_instance>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f083 0301 	eor.w	r3, r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d046      	beq.n	8002bdc <driver_init+0x2ac>
        while(true); // Cannot boot if no communication channel is available!
 8002b4e:	e7fe      	b.n	8002b4e <driver_init+0x21e>
 8002b50:	46020c00 	.word	0x46020c00
 8002b54:	200016a0 	.word	0x200016a0
 8002b58:	08028a84 	.word	0x08028a84
 8002b5c:	08028a90 	.word	0x08028a90
 8002b60:	08028a98 	.word	0x08028a98
 8002b64:	08028ac0 	.word	0x08028ac0
 8002b68:	08002515 	.word	0x08002515
 8002b6c:	431bde83 	.word	0x431bde83
 8002b70:	080028fd 	.word	0x080028fd
 8002b74:	08000d49 	.word	0x08000d49
 8002b78:	08001a8d 	.word	0x08001a8d
 8002b7c:	20000644 	.word	0x20000644
 8002b80:	08000de9 	.word	0x08000de9
 8002b84:	08000e31 	.word	0x08000e31
 8002b88:	08000da5 	.word	0x08000da5
 8002b8c:	08000e5d 	.word	0x08000e5d
 8002b90:	08000e89 	.word	0x08000e89
 8002b94:	08000c99 	.word	0x08000c99
 8002b98:	080010d5 	.word	0x080010d5
 8002b9c:	0800119d 	.word	0x0800119d
 8002ba0:	0800184d 	.word	0x0800184d
 8002ba4:	080018ad 	.word	0x080018ad
 8002ba8:	08001355 	.word	0x08001355
 8002bac:	080012e1 	.word	0x080012e1
 8002bb0:	0800124d 	.word	0x0800124d
 8002bb4:	08000be9 	.word	0x08000be9
 8002bb8:	08000bf9 	.word	0x08000bf9
 8002bbc:	08001919 	.word	0x08001919
 8002bc0:	08001943 	.word	0x08001943
 8002bc4:	08001977 	.word	0x08001977
 8002bc8:	080019a5 	.word	0x080019a5
 8002bcc:	08001a5d 	.word	0x08001a5d
 8002bd0:	08002245 	.word	0x08002245
 8002bd4:	08002459 	.word	0x08002459
 8002bd8:	080024bd 	.word	0x080024bd
#elif FLASH_ENABLE
    hal.nvs.type = NVS_Flash;
    hal.nvs.memcpy_from_flash = memcpy_from_flash;
    hal.nvs.memcpy_to_flash = memcpy_to_flash;
#else
    hal.nvs.type = NVS_None;
 8002bdc:	4b78      	ldr	r3, [pc, #480]	; (8002dc0 <driver_init+0x490>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        .set_state = spindleSetState,
        .get_state = spindleGetState
    };

 #ifdef SPINDLE_PWM_TIMER_N
    spindle_id = spindle_register(&spindle, "PWM");
 8002be4:	4977      	ldr	r1, [pc, #476]	; (8002dc4 <driver_init+0x494>)
 8002be6:	4878      	ldr	r0, [pc, #480]	; (8002dc8 <driver_init+0x498>)
 8002be8:	f018 ff22 	bl	801ba30 <spindle_register>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b76      	ldr	r3, [pc, #472]	; (8002dcc <driver_init+0x49c>)
 8002bf2:	701a      	strb	r2, [r3, #0]
#endif // DRIVER_SPINDLE

// driver capabilities

#if ESTOP_ENABLE
    hal.signals_cap.e_stop = On;
 8002bf4:	4a72      	ldr	r2, [pc, #456]	; (8002dc0 <driver_init+0x490>)
 8002bf6:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 8002bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfe:	f882 31ac 	strb.w	r3, [r2, #428]	; 0x1ac
    hal.signals_cap.reset = Off;
 8002c02:	4a6f      	ldr	r2, [pc, #444]	; (8002dc0 <driver_init+0x490>)
 8002c04:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 8002c08:	f36f 0300 	bfc	r3, #0, #1
 8002c0c:	f882 31ac 	strb.w	r3, [r2, #428]	; 0x1ac
#endif
#ifdef SAFETY_DOOR_PIN
    hal.signals_cap.safety_door_ajar = On;
#endif
    hal.limits_cap = get_limits_cap();
 8002c10:	4c6b      	ldr	r4, [pc, #428]	; (8002dc0 <driver_init+0x490>)
 8002c12:	f7fe f85e 	bl	8000cd2 <get_limits_cap>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
 8002c1e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002c22:	f884 21af 	strb.w	r2, [r4, #431]	; 0x1af
 8002c26:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002c2a:	f884 21b0 	strb.w	r2, [r4, #432]	; 0x1b0
 8002c2e:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8002c32:	f884 31b1 	strb.w	r3, [r4, #433]	; 0x1b1
    hal.home_cap = get_home_cap();
 8002c36:	4c62      	ldr	r4, [pc, #392]	; (8002dc0 <driver_init+0x490>)
 8002c38:	f7fe f871 	bl	8000d1e <get_home_cap>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f8a4 31b2 	strh.w	r3, [r4, #434]	; 0x1b2
#if SPINDLE_SYNC_ENABLE
    hal.driver_cap.spindle_sync = On;
#endif
#ifdef COOLANT_MIST_PIN
    hal.driver_cap.mist_control = On;
 8002c42:	4a5f      	ldr	r2, [pc, #380]	; (8002dc0 <driver_init+0x490>)
 8002c44:	f892 31a8 	ldrb.w	r3, [r2, #424]	; 0x1a8
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8
#endif
    hal.driver_cap.software_debounce = On;
 8002c50:	4a5b      	ldr	r2, [pc, #364]	; (8002dc0 <driver_init+0x490>)
 8002c52:	f892 31a8 	ldrb.w	r3, [r2, #424]	; 0x1a8
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8
    hal.driver_cap.step_pulse_delay = On;
 8002c5e:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <driver_init+0x490>)
 8002c60:	f892 31a8 	ldrb.w	r3, [r2, #424]	; 0x1a8
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8
    hal.driver_cap.amass_level = 3;
 8002c6c:	4a54      	ldr	r2, [pc, #336]	; (8002dc0 <driver_init+0x490>)
 8002c6e:	f892 31a8 	ldrb.w	r3, [r2, #424]	; 0x1a8
 8002c72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c76:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8
    hal.driver_cap.control_pull_up = On;
 8002c7a:	4a51      	ldr	r2, [pc, #324]	; (8002dc0 <driver_init+0x490>)
 8002c7c:	f892 31a8 	ldrb.w	r3, [r2, #424]	; 0x1a8
 8002c80:	f043 0310 	orr.w	r3, r3, #16
 8002c84:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8
    hal.driver_cap.limits_pull_up = On;
 8002c88:	4a4d      	ldr	r2, [pc, #308]	; (8002dc0 <driver_init+0x490>)
 8002c8a:	f892 31a8 	ldrb.w	r3, [r2, #424]	; 0x1a8
 8002c8e:	f043 0308 	orr.w	r3, r3, #8
 8002c92:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8
#ifdef PROBE_PIN
    hal.driver_cap.probe_pull_up = On;
 8002c96:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <driver_init+0x490>)
 8002c98:	f892 31a8 	ldrb.w	r3, [r2, #424]	; 0x1a8
 8002c9c:	f043 0320 	orr.w	r3, r3, #32
 8002ca0:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8

    uint32_t i;
    input_signal_t *input;
    static pin_group_pins_t aux_inputs = {0}, aux_outputs = {0};

    for(i = 0 ; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca8:	e050      	b.n	8002d4c <driver_init+0x41c>
        input = &inputpin[i];
 8002caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4a46      	ldr	r2, [pc, #280]	; (8002dd0 <driver_init+0x4a0>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(input->group == PinGroup_AuxInput) {
 8002cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cc2:	d12d      	bne.n	8002d20 <driver_init+0x3f0>
            if(aux_inputs.pins.inputs == NULL)
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <driver_init+0x4a4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <driver_init+0x3a2>
                aux_inputs.pins.inputs = input;
 8002ccc:	4a41      	ldr	r2, [pc, #260]	; (8002dd4 <driver_init+0x4a4>)
 8002cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd0:	6053      	str	r3, [r2, #4]
            input->id = (pin_function_t)(Input_Aux0 + aux_inputs.n_pins++);
 8002cd2:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <driver_init+0x4a4>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	b2d1      	uxtb	r1, r2
 8002cda:	4a3e      	ldr	r2, [pc, #248]	; (8002dd4 <driver_init+0x4a4>)
 8002cdc:	7011      	strb	r1, [r2, #0]
 8002cde:	3332      	adds	r3, #50	; 0x32
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	701a      	strb	r2, [r3, #0]
            input->bit = 1 << input->pin;
 8002ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce8:	7a1b      	ldrb	r3, [r3, #8]
 8002cea:	461a      	mov	r2, r3
 8002cec:	2301      	movs	r3, #1
 8002cee:	4093      	lsls	r3, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf4:	60da      	str	r2, [r3, #12]
            input->cap.pull_mode = PullMode_UpDown;
 8002cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf8:	7e13      	ldrb	r3, [r2, #24]
 8002cfa:	f043 0318 	orr.w	r3, r3, #24
 8002cfe:	7613      	strb	r3, [r2, #24]
            input->cap.irq_mode = (input->bit & DRIVER_IRQMASK) ? IRQ_Mode_None : IRQ_Mode_Edges;
 8002d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	f24c 0359 	movw	r3, #49241	; 0xc059
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <driver_init+0x3e2>
 8002d0e:	2100      	movs	r1, #0
 8002d10:	e000      	b.n	8002d14 <driver_init+0x3e4>
 8002d12:	2107      	movs	r1, #7
 8002d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d16:	8b13      	ldrh	r3, [r2, #24]
 8002d18:	f361 1349 	bfi	r3, r1, #5, #5
 8002d1c:	8313      	strh	r3, [r2, #24]
 8002d1e:	e012      	b.n	8002d46 <driver_init+0x416>
        } else if(input->group & (PinGroup_Limit|PinGroup_LimitMax)) {
 8002d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <driver_init+0x416>
            if(limit_inputs.pins.inputs == NULL)
 8002d2c:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <driver_init+0x4a8>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <driver_init+0x40a>
                limit_inputs.pins.inputs = input;
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <driver_init+0x4a8>)
 8002d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d38:	6053      	str	r3, [r2, #4]
            limit_inputs.n_pins++;
 8002d3a:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <driver_init+0x4a8>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <driver_init+0x4a8>)
 8002d44:	701a      	strb	r2, [r3, #0]
    for(i = 0 ; i < sizeof(inputpin) / sizeof(input_signal_t); i++) {
 8002d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d48:	3301      	adds	r3, #1
 8002d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d9ab      	bls.n	8002caa <driver_init+0x37a>
        }
    }

    output_signal_t *output;
    for(i = 0 ; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
 8002d56:	e01f      	b.n	8002d98 <driver_init+0x468>
        output = &outputpin[i];
 8002d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <driver_init+0x4ac>)
 8002d64:	4413      	add	r3, r2
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40
        if(output->group == PinGroup_AuxOutput) {
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d110      	bne.n	8002d92 <driver_init+0x462>
            if(aux_outputs.pins.outputs == NULL)
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <driver_init+0x4b0>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <driver_init+0x44e>
                aux_outputs.pins.outputs = output;
 8002d78:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <driver_init+0x4b0>)
 8002d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7c:	6053      	str	r3, [r2, #4]
            output->id = (pin_function_t)(Output_Aux0 + aux_outputs.n_pins++);
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <driver_init+0x4b0>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	b2d1      	uxtb	r1, r2
 8002d86:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <driver_init+0x4b0>)
 8002d88:	7011      	strb	r1, [r2, #0]
 8002d8a:	337b      	adds	r3, #123	; 0x7b
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d90:	701a      	strb	r2, [r3, #0]
    for(i = 0 ; i < sizeof(outputpin) / sizeof(output_signal_t); i++) {
 8002d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d94:	3301      	adds	r3, #1
 8002d96:	647b      	str	r3, [r7, #68]	; 0x44
 8002d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9a:	2b11      	cmp	r3, #17
 8002d9c:	d9dc      	bls.n	8002d58 <driver_init+0x428>
        }
    }

#ifdef HAS_IOPORTS
    ioports_init(&aux_inputs, &aux_outputs);
 8002d9e:	4910      	ldr	r1, [pc, #64]	; (8002de0 <driver_init+0x4b0>)
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <driver_init+0x4a4>)
 8002da2:	f001 f82f 	bl	8003e04 <ioports_init>
    extern void embroidery_init (void);
    embroidery_init();
#endif

    extern void my_plugin_init (void);
    my_plugin_init();
 8002da6:	f00c fa1f 	bl	800f1e8 <my_plugin_init>

#include "grbl/plugins_init.h"

    // No need to move version check before init.
    // Compiler will fail any signature mismatch for existing entries.
    return hal.version == 10;
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <driver_init+0x490>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b0a      	cmp	r3, #10
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	374c      	adds	r7, #76	; 0x4c
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}
 8002dc0:	200016a0 	.word	0x200016a0
 8002dc4:	08028ad8 	.word	0x08028ad8
 8002dc8:	08032518 	.word	0x08032518
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004
 8002dd4:	20000694 	.word	0x20000694
 8002dd8:	20000658 	.word	0x20000658
 8002ddc:	20000100 	.word	0x20000100
 8002de0:	2000069c 	.word	0x2000069c

08002de4 <TIM5_IRQHandler>:

/* interrupt handlers */

// Main stepper driver
void STEPPER_TIMER_IRQHandler (void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
    if ((STEPPER_TIMER->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8002de8:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <TIM5_IRQHandler+0x24>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <TIM5_IRQHandler+0x20>
    {
        STEPPER_TIMER->SR = ~TIM_SR_UIF; // clear UIF flag
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <TIM5_IRQHandler+0x24>)
 8002df6:	f06f 0201 	mvn.w	r2, #1
 8002dfa:	611a      	str	r2, [r3, #16]
        hal.stepper.interrupt_callback();
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <TIM5_IRQHandler+0x28>)
 8002dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e02:	4798      	blx	r3
    }
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	200016a0 	.word	0x200016a0

08002e10 <TIM4_IRQHandler>:

// This interrupt is enabled when Grbl sets the motor port bits to execute
// a step. This ISR resets the motor port after a short period (settings.pulse_microseconds)
// completing one step cycle.
void PULSE_TIMER_IRQHandler (void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
    PULSE_TIMER->SR &= ~TIM_SR_UIF;                 // Clear UIF flag
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <TIM4_IRQHandler+0x10c>)
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	4a40      	ldr	r2, [pc, #256]	; (8002f1c <TIM4_IRQHandler+0x10c>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6113      	str	r3, [r2, #16]

    if (PULSE_TIMER->ARR == pulse_delay) {          // Delayed step pulse?
 8002e22:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <TIM4_IRQHandler+0x10c>)
 8002e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <TIM4_IRQHandler+0x110>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d13f      	bne.n	8002eae <TIM4_IRQHandler+0x9e>
        PULSE_TIMER->ARR = pulse_length;
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <TIM4_IRQHandler+0x10c>)
 8002e30:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <TIM4_IRQHandler+0x114>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e36:	4b3c      	ldr	r3, [pc, #240]	; (8002f28 <TIM4_IRQHandler+0x118>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	713b      	strb	r3, [r7, #4]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8002e3c:	793a      	ldrb	r2, [r7, #4]
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <TIM4_IRQHandler+0x11c>)
 8002e40:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002e44:	4053      	eors	r3, r2
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	713b      	strb	r3, [r7, #4]
    DIGITAL_OUT(X_STEP_PORT, X_STEP_BIT, step_outbits.x);
 8002e4a:	793b      	ldrb	r3, [r7, #4]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <TIM4_IRQHandler+0x4c>
 8002e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e5a:	e001      	b.n	8002e60 <TIM4_IRQHandler+0x50>
 8002e5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e60:	4a33      	ldr	r2, [pc, #204]	; (8002f30 <TIM4_IRQHandler+0x120>)
 8002e62:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_BIT, step_outbits.y);
 8002e64:	793b      	ldrb	r3, [r7, #4]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <TIM4_IRQHandler+0x66>
 8002e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e74:	e001      	b.n	8002e7a <TIM4_IRQHandler+0x6a>
 8002e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e7a:	4a2d      	ldr	r2, [pc, #180]	; (8002f30 <TIM4_IRQHandler+0x120>)
 8002e7c:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_BIT, step_outbits.z);
 8002e7e:	793b      	ldrb	r3, [r7, #4]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <TIM4_IRQHandler+0x80>
 8002e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e8e:	e001      	b.n	8002e94 <TIM4_IRQHandler+0x84>
 8002e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e94:	4a26      	ldr	r2, [pc, #152]	; (8002f30 <TIM4_IRQHandler+0x120>)
 8002e96:	6193      	str	r3, [r2, #24]
}
 8002e98:	bf00      	nop
        stepperSetStepOutputs(next_step_outbits);   // begin step pulse
        PULSE_TIMER->EGR = TIM_EGR_UG;
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <TIM4_IRQHandler+0x10c>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	615a      	str	r2, [r3, #20]
        PULSE_TIMER->CR1 |= TIM_CR1_CEN;
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <TIM4_IRQHandler+0x10c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <TIM4_IRQHandler+0x10c>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6013      	str	r3, [r2, #0]
    } else
        stepperSetStepOutputs((axes_signals_t){0}); // end step pulse
}
 8002eac:	e030      	b.n	8002f10 <TIM4_IRQHandler+0x100>
        stepperSetStepOutputs((axes_signals_t){0}); // end step pulse
 8002eae:	2300      	movs	r3, #0
 8002eb0:	703b      	strb	r3, [r7, #0]
    step_outbits.mask ^= settings.steppers.step_invert.mask;
 8002eb2:	783a      	ldrb	r2, [r7, #0]
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <TIM4_IRQHandler+0x11c>)
 8002eb6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002eba:	4053      	eors	r3, r2
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	703b      	strb	r3, [r7, #0]
    DIGITAL_OUT(X_STEP_PORT, X_STEP_BIT, step_outbits.x);
 8002ec0:	783b      	ldrb	r3, [r7, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <TIM4_IRQHandler+0xc2>
 8002ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed0:	e001      	b.n	8002ed6 <TIM4_IRQHandler+0xc6>
 8002ed2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <TIM4_IRQHandler+0x120>)
 8002ed8:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Y_STEP_PORT, Y_STEP_BIT, step_outbits.y);
 8002eda:	783b      	ldrb	r3, [r7, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <TIM4_IRQHandler+0xdc>
 8002ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eea:	e001      	b.n	8002ef0 <TIM4_IRQHandler+0xe0>
 8002eec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <TIM4_IRQHandler+0x120>)
 8002ef2:	6193      	str	r3, [r2, #24]
    DIGITAL_OUT(Z_STEP_PORT, Z_STEP_BIT, step_outbits.z);
 8002ef4:	783b      	ldrb	r3, [r7, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <TIM4_IRQHandler+0xf6>
 8002f00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f04:	e001      	b.n	8002f0a <TIM4_IRQHandler+0xfa>
 8002f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <TIM4_IRQHandler+0x120>)
 8002f0c:	6193      	str	r3, [r2, #24]
}
 8002f0e:	bf00      	nop
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40000800 	.word	0x40000800
 8002f20:	2000064c 	.word	0x2000064c
 8002f24:	20000648 	.word	0x20000648
 8002f28:	20000660 	.word	0x20000660
 8002f2c:	20001cf0 	.word	0x20001cf0
 8002f30:	42021000 	.word	0x42021000

08002f34 <TIM3_IRQHandler>:
    return hal.driver_cap.software_debounce;
}

// Debounce timer interrupt handler
void DEBOUNCE_TIMER_IRQHandler (void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
    DEBOUNCE_TIMER->SR = ~TIM_SR_UIF; // clear UIF flag;
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <TIM3_IRQHandler+0x80>)
 8002f3c:	f06f 0201 	mvn.w	r2, #1
 8002f40:	611a      	str	r2, [r3, #16]

    if(debounce.limits) {
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <TIM3_IRQHandler+0x84>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <TIM3_IRQHandler+0x44>
        debounce.limits = Off;
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <TIM3_IRQHandler+0x84>)
 8002f52:	7813      	ldrb	r3, [r2, #0]
 8002f54:	f36f 0300 	bfc	r3, #0, #1
 8002f58:	7013      	strb	r3, [r2, #0]
        limit_signals_t state = limitsGetState();
 8002f5a:	f7fe f91f 	bl	800119c <limitsGetState>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	607b      	str	r3, [r7, #4]
        if(limit_signals_merge(state).value) //TODO: add check for limit switches having same state as when limit_isr were invoked?
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f008 fcd0 	bl	800b908 <limit_signals_merge>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <TIM3_IRQHandler+0x44>
            hal.limits.interrupt_callback(state);
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <TIM3_IRQHandler+0x88>)
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
    }

    if(debounce.door) {
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <TIM3_IRQHandler+0x84>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d012      	beq.n	8002fac <TIM3_IRQHandler+0x78>
        debounce.door = Off;
 8002f86:	4a0c      	ldr	r2, [pc, #48]	; (8002fb8 <TIM3_IRQHandler+0x84>)
 8002f88:	7813      	ldrb	r3, [r2, #0]
 8002f8a:	f36f 0341 	bfc	r3, #1, #1
 8002f8e:	7013      	strb	r3, [r2, #0]
        control_signals_t state = systemGetState();
 8002f90:	f7fe f95c 	bl	800124c <systemGetState>
 8002f94:	4603      	mov	r3, r0
 8002f96:	803b      	strh	r3, [r7, #0]
        if(state.safety_door_ajar)
 8002f98:	783b      	ldrb	r3, [r7, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <TIM3_IRQHandler+0x78>
            hal.control.interrupt_callback(state);
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <TIM3_IRQHandler+0x88>)
 8002fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa8:	8838      	ldrh	r0, [r7, #0]
 8002faa:	4798      	blx	r3
    }
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	20000664 	.word	0x20000664
 8002fbc:	200016a0 	.word	0x200016a0

08002fc0 <EXTI0_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|PROBE_IRQ_BIT|AUXINPUT_MASK) & (1<<0)

void EXTI0_IRQHandler(void)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(1<<0);
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <EXTI0_IRQHandler+0x50>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d105      	bne.n	8002fde <EXTI0_IRQHandler+0x1e>
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <EXTI0_IRQHandler+0x50>)
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <EXTI0_IRQHandler+0x22>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <EXTI0_IRQHandler+0x24>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]

    if(ifg) {
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00c      	beq.n	8003006 <EXTI0_IRQHandler+0x46>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 8002fec:	4a08      	ldr	r2, [pc, #32]	; (8003010 <EXTI0_IRQHandler+0x50>)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60d3      	str	r3, [r2, #12]
 8002ff2:	4a07      	ldr	r2, [pc, #28]	; (8003010 <EXTI0_IRQHandler+0x50>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6113      	str	r3, [r2, #16]
#if CONTROL_MASK & (1<<0)
  #if SAFETY_DOOR_BIT & (1<<0)
        if(!(debounce.door = debounce_start()))
  #endif
        hal.control.interrupt_callback(systemGetState());
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <EXTI0_IRQHandler+0x54>)
 8002ffa:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8002ffc:	f7fe f926 	bl	800124c <systemGetState>
 8003000:	4603      	mov	r3, r0
 8003002:	4618      	mov	r0, r3
 8003004:	47a0      	blx	r4
#elif QEI_SELECT_ENABLED && (QEI_SELECT_BIT & (1<<0))
        if(!(debounce.qei_select = debounce_start()))
            qei_select_handler();
#endif
    }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	bf00      	nop
 8003010:	46022000 	.word	0x46022000
 8003014:	200016a0 	.word	0x200016a0

08003018 <EXTI3_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|PROBE_IRQ_BIT|AUXINPUT_MASK) & (1<<3)

void EXTI3_IRQHandler(void)
{
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(1<<3);
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <EXTI3_IRQHandler+0x50>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <EXTI3_IRQHandler+0x1e>
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <EXTI3_IRQHandler+0x50>)
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <EXTI3_IRQHandler+0x22>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <EXTI3_IRQHandler+0x24>
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]

    if(ifg) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <EXTI3_IRQHandler+0x46>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <EXTI3_IRQHandler+0x50>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60d3      	str	r3, [r2, #12]
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <EXTI3_IRQHandler+0x50>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6113      	str	r3, [r2, #16]
#if CONTROL_MASK & (1<<3)
  #if SAFETY_DOOR_BIT & (1<<3)
        if(!(debounce.door = debounce_start()))
  #endif
        hal.control.interrupt_callback(systemGetState());
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <EXTI3_IRQHandler+0x54>)
 8003052:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8003054:	f7fe f8fa 	bl	800124c <systemGetState>
 8003058:	4603      	mov	r3, r0
 800305a:	4618      	mov	r0, r3
 800305c:	47a0      	blx	r4
#elif QEI_SELECT_ENABLED && (QEI_SELECT_BIT & (1<<3))
        if(!(debounce.qei_select = debounce_start()))
            qei_select_handler();
#endif
    }
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	bf00      	nop
 8003068:	46022000 	.word	0x46022000
 800306c:	200016a0 	.word	0x200016a0

08003070 <EXTI4_IRQHandler>:
#endif

#if (DRIVER_IRQMASK|PROBE_IRQ_BIT|AUXINPUT_MASK) & (1<<4)

void EXTI4_IRQHandler(void)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
    uint32_t ifg = __HAL_GPIO_EXTI_GET_IT(1<<4);
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <EXTI4_IRQHandler+0x50>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <EXTI4_IRQHandler+0x1e>
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <EXTI4_IRQHandler+0x50>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <EXTI4_IRQHandler+0x22>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <EXTI4_IRQHandler+0x24>
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]

    if(ifg) {
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <EXTI4_IRQHandler+0x46>
        __HAL_GPIO_EXTI_CLEAR_IT(ifg);
 800309c:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <EXTI4_IRQHandler+0x50>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	60d3      	str	r3, [r2, #12]
 80030a2:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <EXTI4_IRQHandler+0x50>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6113      	str	r3, [r2, #16]
#if CONTROL_MASK & (1<<4)
  #if SAFETY_DOOR_BIT & (1<<4)
        if(!(debounce.door = debounce_start()))
  #endif
        hal.control.interrupt_callback(systemGetState());
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <EXTI4_IRQHandler+0x54>)
 80030aa:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 80030ac:	f7fe f8ce 	bl	800124c <systemGetState>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4618      	mov	r0, r3
 80030b4:	47a0      	blx	r4
#elif QEI_SELECT_ENABLED && (QEI_SELECT_BIT & (1<<4))
        if(!(debounce.qei_select = debounce_start()))
            qei_select_handler();
#endif
    }
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	bf00      	nop
 80030c0:	46022000 	.word	0x46022000
 80030c4:	200016a0 	.word	0x200016a0

080030c8 <Driver_IncTick>:

#endif

// Interrupt handler for 1 ms interval timer
void Driver_IncTick (void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
        disk_timerproc();
        fatfs_ticks = 10;
    }
#endif

    if(delay.ms && !(--delay.ms)) {
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <Driver_IncTick+0x34>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <Driver_IncTick+0x2e>
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <Driver_IncTick+0x34>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	4a08      	ldr	r2, [pc, #32]	; (80030fc <Driver_IncTick+0x34>)
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <Driver_IncTick+0x2e>
        if(delay.callback) {
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <Driver_IncTick+0x34>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <Driver_IncTick+0x2e>
            delay.callback();
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <Driver_IncTick+0x34>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4798      	blx	r3
            delay.callback = NULL;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <Driver_IncTick+0x34>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
        }
    }
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200002f8 	.word	0x200002f8

08003100 <I2C1_EV_IRQHandler>:
    hal.periph_port.register_pin(&sda);
}

#if I2C_PORT == 1
void I2C1_EV_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&i2c_port);
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <I2C1_EV_IRQHandler+0x10>)
 8003106:	f01f fd0d 	bl	8022b24 <HAL_I2C_EV_IRQHandler>
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000308 	.word	0x20000308

08003114 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&i2c_port);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <I2C1_ER_IRQHandler+0x10>)
 800311a:	f01f fd1d 	bl	8022b58 <HAL_I2C_ER_IRQHandler>
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000308 	.word	0x20000308

08003128 <digital_out>:
    .Init.EOCSelection = ADC_EOC_SINGLE_CONV
};
#endif

static void digital_out (uint8_t port, bool on)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	460a      	mov	r2, r1
 8003132:	71fb      	strb	r3, [r7, #7]
 8003134:	4613      	mov	r3, r2
 8003136:	71bb      	strb	r3, [r7, #6]
    if(port < digital.out.n_ports) {
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <digital_out+0xa0>)
 800313a:	7b1b      	ldrb	r3, [r3, #12]
 800313c:	79fa      	ldrb	r2, [r7, #7]
 800313e:	429a      	cmp	r2, r3
 8003140:	d23c      	bcs.n	80031bc <digital_out+0x94>
        port = ioports_map(digital.out, port);
 8003142:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <digital_out+0xa0>)
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <digital_out+0x2e>
 800314a:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <digital_out+0xa0>)
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	e000      	b.n	8003158 <digital_out+0x30>
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	71fb      	strb	r3, [r7, #7]
        DIGITAL_OUT(aux_out[port].port, aux_out[port].bit, ((settings.ioport.invert_out.mask >> port) & 0x01) ? !on : on);
 800315a:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <digital_out+0xa4>)
 800315c:	f893 316a 	ldrb.w	r3, [r3, #362]	; 0x16a
 8003160:	461a      	mov	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	fa42 f303 	asr.w	r3, r2, r3
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <digital_out+0x52>
 8003170:	79bb      	ldrb	r3, [r7, #6]
 8003172:	f083 0301 	eor.w	r3, r3, #1
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e000      	b.n	800317c <digital_out+0x54>
 800317a:	79bb      	ldrb	r3, [r7, #6]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d009      	beq.n	8003194 <digital_out+0x6c>
 8003180:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <digital_out+0xa8>)
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	79fa      	ldrb	r2, [r7, #7]
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	e009      	b.n	80031a8 <digital_out+0x80>
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <digital_out+0xa8>)
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	79fa      	ldrb	r2, [r7, #7]
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	041a      	lsls	r2, r3, #16
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <digital_out+0xa8>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	79f9      	ldrb	r1, [r7, #7]
 80031ae:	460b      	mov	r3, r1
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	1a5b      	subs	r3, r3, r1
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4403      	add	r3, r0
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	619a      	str	r2, [r3, #24]
    }
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	200006a4 	.word	0x200006a4
 80031cc:	20001cf0 	.word	0x20001cf0
 80031d0:	200006c0 	.word	0x200006c0

080031d4 <wait_on_input>:

    return value;
}

static int32_t wait_on_input (io_port_type_t type, uint8_t port, wait_mode_t wait_mode, float timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	ed87 0a00 	vstr	s0, [r7]
 80031e0:	71fb      	strb	r3, [r7, #7]
 80031e2:	460b      	mov	r3, r1
 80031e4:	71bb      	strb	r3, [r7, #6]
 80031e6:	4613      	mov	r3, r2
 80031e8:	717b      	strb	r3, [r7, #5]
    int32_t value = -1;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24

    if(type == Port_Digital && port < digital.in.n_ports) {
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	f040 80f6 	bne.w	80033e4 <wait_on_input+0x210>
 80031f8:	4b7d      	ldr	r3, [pc, #500]	; (80033f0 <wait_on_input+0x21c>)
 80031fa:	791b      	ldrb	r3, [r3, #4]
 80031fc:	79ba      	ldrb	r2, [r7, #6]
 80031fe:	429a      	cmp	r2, r3
 8003200:	f080 80f0 	bcs.w	80033e4 <wait_on_input+0x210>
        port = ioports_map(digital.in, port);
 8003204:	4b7a      	ldr	r3, [pc, #488]	; (80033f0 <wait_on_input+0x21c>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <wait_on_input+0x44>
 800320c:	4b78      	ldr	r3, [pc, #480]	; (80033f0 <wait_on_input+0x21c>)
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	79bb      	ldrb	r3, [r7, #6]
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	e000      	b.n	800321a <wait_on_input+0x46>
 8003218:	79bb      	ldrb	r3, [r7, #6]
 800321a:	71bb      	strb	r3, [r7, #6]
        value = get_input(&aux_in[port], (settings.ioport.invert_in.mask >> port) & 0x01, wait_mode, timeout);
 800321c:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <wait_on_input+0x220>)
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	79ba      	ldrb	r2, [r7, #6]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	4a72      	ldr	r2, [pc, #456]	; (80033f8 <wait_on_input+0x224>)
 800322e:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8003232:	4611      	mov	r1, r2
 8003234:	79ba      	ldrb	r2, [r7, #6]
 8003236:	fa41 f202 	asr.w	r2, r1, r2
 800323a:	f002 0201 	and.w	r2, r2, #1
 800323e:	2a00      	cmp	r2, #0
 8003240:	bf14      	ite	ne
 8003242:	2201      	movne	r2, #1
 8003244:	2200      	moveq	r2, #0
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	4613      	mov	r3, r2
 800324c:	77fb      	strb	r3, [r7, #31]
 800324e:	797b      	ldrb	r3, [r7, #5]
 8003250:	77bb      	strb	r3, [r7, #30]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	61bb      	str	r3, [r7, #24]
    if(wait_mode == WaitMode_Immediate)
 8003256:	7fbb      	ldrb	r3, [r7, #30]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10e      	bne.n	800327a <wait_on_input+0xa6>
        return DIGITAL_IN(input->port, input->bit) ^ invert;
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	7ffb      	ldrb	r3, [r7, #31]
 8003276:	4053      	eors	r3, r2
 8003278:	e0b3      	b.n	80033e2 <wait_on_input+0x20e>
    int32_t value = -1;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	617b      	str	r3, [r7, #20]
    uint_fast16_t delay = (uint_fast16_t)ceilf((1000.0f / 50.0f) * timeout) + 1;
 8003280:	edd7 7a06 	vldr	s15, [r7, #24]
 8003284:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	f023 fe1e 	bl	8026ed0 <ceilf>
 8003294:	eef0 7a40 	vmov.f32	s15, s0
 8003298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800329c:	ee17 3a90 	vmov	r3, s15
 80032a0:	3301      	adds	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
    if(wait_mode == WaitMode_Rise || wait_mode == WaitMode_Fall) {
 80032a4:	7fbb      	ldrb	r3, [r7, #30]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d002      	beq.n	80032b0 <wait_on_input+0xdc>
 80032aa:	7fbb      	ldrb	r3, [r7, #30]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d155      	bne.n	800335c <wait_on_input+0x188>
        pin_irq_mode_t irq_mode = wait_mode == WaitMode_Rise ? IRQ_Mode_Rising : IRQ_Mode_Falling;
 80032b0:	7fbb      	ldrb	r3, [r7, #30]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <wait_on_input+0xe6>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <wait_on_input+0xe8>
 80032ba:	2302      	movs	r3, #2
 80032bc:	73fb      	strb	r3, [r7, #15]
        if(input->cap.irq_mode & irq_mode) {
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	8b1b      	ldrh	r3, [r3, #24]
 80032c2:	f3c3 1344 	ubfx	r3, r3, #5, #5
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8083 	beq.w	80033da <wait_on_input+0x206>
            event_bits &= ~input->bit;
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	43da      	mvns	r2, r3
 80032da:	4b48      	ldr	r3, [pc, #288]	; (80033fc <wait_on_input+0x228>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4013      	ands	r3, r2
 80032e0:	4a46      	ldr	r2, [pc, #280]	; (80033fc <wait_on_input+0x228>)
 80032e2:	6013      	str	r3, [r2, #0]
            gpio_irq_enable(input, irq_mode);
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	4619      	mov	r1, r3
 80032e8:	6a38      	ldr	r0, [r7, #32]
 80032ea:	f7fe fbc3 	bl	8001a74 <gpio_irq_enable>
                if(event_bits & input->bit) {
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	4b42      	ldr	r3, [pc, #264]	; (80033fc <wait_on_input+0x228>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00f      	beq.n	800331c <wait_on_input+0x148>
                    value = DIGITAL_IN(input->port, input->bit) ^ invert;
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	7ffb      	ldrb	r3, [r7, #31]
 8003316:	4053      	eors	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
                    break;
 800331a:	e018      	b.n	800334e <wait_on_input+0x17a>
                if(delay) {
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d014      	beq.n	800334c <wait_on_input+0x178>
                    protocol_execute_realtime();
 8003322:	f00f fa5f 	bl	80127e4 <protocol_execute_realtime>
                    hal.delay_ms(50, NULL);
 8003326:	4b36      	ldr	r3, [pc, #216]	; (8003400 <wait_on_input+0x22c>)
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	2100      	movs	r1, #0
 800332c:	2032      	movs	r0, #50	; 0x32
 800332e:	4798      	blx	r3
            } while(--delay && !sys.abort);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	3b01      	subs	r3, #1
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <wait_on_input+0x17a>
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <wait_on_input+0x230>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f083 0301 	eor.w	r3, r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1d1      	bne.n	80032ee <wait_on_input+0x11a>
 800334a:	e000      	b.n	800334e <wait_on_input+0x17a>
                    break;
 800334c:	bf00      	nop
            gpio_irq_enable(input, input->irq_mode);    // Restore pin interrupt status
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	7d9b      	ldrb	r3, [r3, #22]
 8003352:	4619      	mov	r1, r3
 8003354:	6a38      	ldr	r0, [r7, #32]
 8003356:	f7fe fb8d 	bl	8001a74 <gpio_irq_enable>
    if(wait_mode == WaitMode_Rise || wait_mode == WaitMode_Fall) {
 800335a:	e03e      	b.n	80033da <wait_on_input+0x206>
        bool wait_for = wait_mode != WaitMode_Low;
 800335c:	7fbb      	ldrb	r3, [r7, #30]
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	73bb      	strb	r3, [r7, #14]
            if((DIGITAL_IN(input->port, input->bit) ^ invert) == wait_for) {
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	7ffb      	ldrb	r3, [r7, #31]
 8003382:	405a      	eors	r2, r3
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	429a      	cmp	r2, r3
 8003388:	d10f      	bne.n	80033aa <wait_on_input+0x1d6>
                value = DIGITAL_IN(input->port, input->bit) ^ invert;
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
 80033a4:	4053      	eors	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
                break;
 80033a8:	e01a      	b.n	80033e0 <wait_on_input+0x20c>
            if(delay) {
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d016      	beq.n	80033de <wait_on_input+0x20a>
                protocol_execute_realtime();
 80033b0:	f00f fa18 	bl	80127e4 <protocol_execute_realtime>
                hal.delay_ms(50, NULL);
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <wait_on_input+0x22c>)
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	2100      	movs	r1, #0
 80033ba:	2032      	movs	r0, #50	; 0x32
 80033bc:	4798      	blx	r3
        } while(--delay && !sys.abort);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <wait_on_input+0x20c>
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <wait_on_input+0x230>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1c7      	bne.n	8003368 <wait_on_input+0x194>
 80033d8:	e002      	b.n	80033e0 <wait_on_input+0x20c>
    if(wait_mode == WaitMode_Rise || wait_mode == WaitMode_Fall) {
 80033da:	bf00      	nop
 80033dc:	e000      	b.n	80033e0 <wait_on_input+0x20c>
                break;
 80033de:	bf00      	nop
    return value;
 80033e0:	697b      	ldr	r3, [r7, #20]
        value = get_input(&aux_in[port], (settings.ioport.invert_in.mask >> port) & 0x01, wait_mode, timeout);
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_ADC_PollForConversion(&hadc1, 2);
        value = HAL_ADC_GetValue(&hadc1);
    }
#endif

    return value;
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3728      	adds	r7, #40	; 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200006a4 	.word	0x200006a4
 80033f4:	200006bc 	.word	0x200006bc
 80033f8:	20001cf0 	.word	0x20001cf0
 80033fc:	200006c8 	.word	0x200006c8
 8003400:	200016a0 	.word	0x200016a0
 8003404:	20001520 	.word	0x20001520

08003408 <register_interrupt_handler>:

    spin_lock = false;
}

static bool register_interrupt_handler (uint8_t port, pin_irq_mode_t irq_mode, ioport_interrupt_callback_ptr interrupt_callback)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	603a      	str	r2, [r7, #0]
 8003412:	71fb      	strb	r3, [r7, #7]
 8003414:	460b      	mov	r3, r1
 8003416:	71bb      	strb	r3, [r7, #6]
    bool ok;

    port = ioports_map(digital.in, port);
 8003418:	4b3c      	ldr	r3, [pc, #240]	; (800350c <register_interrupt_handler+0x104>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <register_interrupt_handler+0x24>
 8003420:	4b3a      	ldr	r3, [pc, #232]	; (800350c <register_interrupt_handler+0x104>)
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	4413      	add	r3, r2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	e000      	b.n	800342e <register_interrupt_handler+0x26>
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	71fb      	strb	r3, [r7, #7]

    if((ok = port < digital.in.n_ports && aux_in[port].cap.irq_mode != IRQ_Mode_None)) {
 8003430:	4b36      	ldr	r3, [pc, #216]	; (800350c <register_interrupt_handler+0x104>)
 8003432:	791b      	ldrb	r3, [r3, #4]
 8003434:	79fa      	ldrb	r2, [r7, #7]
 8003436:	429a      	cmp	r2, r3
 8003438:	d20f      	bcs.n	800345a <register_interrupt_handler+0x52>
 800343a:	4b35      	ldr	r3, [pc, #212]	; (8003510 <register_interrupt_handler+0x108>)
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	79fa      	ldrb	r2, [r7, #7]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	8b1b      	ldrh	r3, [r3, #24]
 800344c:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <register_interrupt_handler+0x52>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <register_interrupt_handler+0x54>
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d04a      	beq.n	8003502 <register_interrupt_handler+0xfa>

        input_signal_t *input = &aux_in[port];
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <register_interrupt_handler+0x108>)
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	79fa      	ldrb	r2, [r7, #7]
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	60bb      	str	r3, [r7, #8]

        if((ok = (irq_mode & input->cap.irq_mode) == irq_mode && interrupt_callback != NULL)) {
 800347e:	79bb      	ldrb	r3, [r7, #6]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	8b12      	ldrh	r2, [r2, #24]
 8003484:	f3c2 1244 	ubfx	r2, r2, #5, #5
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	401a      	ands	r2, r3
 800348c:	79bb      	ldrb	r3, [r7, #6]
 800348e:	429a      	cmp	r2, r3
 8003490:	d104      	bne.n	800349c <register_interrupt_handler+0x94>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <register_interrupt_handler+0x94>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <register_interrupt_handler+0x96>
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <register_interrupt_handler+0xbc>
            input->irq_mode = irq_mode;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	79ba      	ldrb	r2, [r7, #6]
 80034b2:	759a      	strb	r2, [r3, #22]
            input->interrupt_callback = interrupt_callback;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	61da      	str	r2, [r3, #28]
            gpio_irq_enable(input, irq_mode);
 80034ba:	79bb      	ldrb	r3, [r7, #6]
 80034bc:	4619      	mov	r1, r3
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	f7fe fad8 	bl	8001a74 <gpio_irq_enable>
        }

        if(irq_mode == IRQ_Mode_None || !ok) {
 80034c4:	79bb      	ldrb	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <register_interrupt_handler+0xce>
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	f083 0301 	eor.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d015      	beq.n	8003502 <register_interrupt_handler+0xfa>
            while(spin_lock);
 80034d6:	bf00      	nop
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <register_interrupt_handler+0x10c>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1fa      	bne.n	80034d8 <register_interrupt_handler+0xd0>
            // MOD EXTI->IMR &= ~input->bit;     // Disable pin interrupt
            EXTI->IMR1 &= ~input->bit;     // Disable pin interrupt
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <register_interrupt_handler+0x110>)
 80034e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	490a      	ldr	r1, [pc, #40]	; (8003518 <register_interrupt_handler+0x110>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
            input->irq_mode = IRQ_Mode_None;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2200      	movs	r2, #0
 80034fa:	759a      	strb	r2, [r3, #22]
            input->interrupt_callback = NULL;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	61da      	str	r2, [r3, #28]
        }
    }

    return ok;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	200006a4 	.word	0x200006a4
 8003510:	200006bc 	.word	0x200006bc
 8003514:	200006cc 	.word	0x200006cc
 8003518:	46022000 	.word	0x46022000

0800351c <get_pin_info>:

static xbar_t *get_pin_info (io_port_type_t type, io_port_direction_t dir, uint8_t port)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
 8003526:	460b      	mov	r3, r1
 8003528:	71bb      	strb	r3, [r7, #6]
 800352a:	4613      	mov	r3, r2
 800352c:	717b      	strb	r3, [r7, #5]
    static xbar_t pin;
    xbar_t *info = NULL;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]

    if(type == Port_Digital) {
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 8104 	bne.w	8003742 <get_pin_info+0x226>

        memset(&pin, 0, sizeof(xbar_t));
 800353a:	222c      	movs	r2, #44	; 0x2c
 800353c:	2100      	movs	r1, #0
 800353e:	4883      	ldr	r0, [pc, #524]	; (800374c <get_pin_info+0x230>)
 8003540:	f022 fc7d 	bl	8025e3e <memset>

        if(dir == Port_Input && port < digital.in.n_ports) {
 8003544:	79bb      	ldrb	r3, [r7, #6]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 808e 	bne.w	8003668 <get_pin_info+0x14c>
 800354c:	4b80      	ldr	r3, [pc, #512]	; (8003750 <get_pin_info+0x234>)
 800354e:	791b      	ldrb	r3, [r3, #4]
 8003550:	797a      	ldrb	r2, [r7, #5]
 8003552:	429a      	cmp	r2, r3
 8003554:	f080 8088 	bcs.w	8003668 <get_pin_info+0x14c>
            port = ioports_map(digital.in, port);
 8003558:	4b7d      	ldr	r3, [pc, #500]	; (8003750 <get_pin_info+0x234>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <get_pin_info+0x50>
 8003560:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <get_pin_info+0x234>)
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	797b      	ldrb	r3, [r7, #5]
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	e000      	b.n	800356e <get_pin_info+0x52>
 800356c:	797b      	ldrb	r3, [r7, #5]
 800356e:	717b      	strb	r3, [r7, #5]
            pin.mode.input = On;
 8003570:	4a76      	ldr	r2, [pc, #472]	; (800374c <get_pin_info+0x230>)
 8003572:	7e13      	ldrb	r3, [r2, #24]
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	7613      	strb	r3, [r2, #24]
            pin.mode.irq_mode = aux_in[port].irq_mode;
 800357a:	4b76      	ldr	r3, [pc, #472]	; (8003754 <get_pin_info+0x238>)
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	797a      	ldrb	r2, [r7, #5]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	7d9b      	ldrb	r3, [r3, #22]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	b2d9      	uxtb	r1, r3
 8003592:	4a6e      	ldr	r2, [pc, #440]	; (800374c <get_pin_info+0x230>)
 8003594:	8b13      	ldrh	r3, [r2, #24]
 8003596:	f361 1349 	bfi	r3, r1, #5, #5
 800359a:	8313      	strh	r3, [r2, #24]
            pin.mode.can_remap = !aux_in[port].cap.remapped;
 800359c:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <get_pin_info+0x238>)
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	797a      	ldrb	r2, [r7, #5]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	7e5b      	ldrb	r3, [r3, #25]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2d9      	uxtb	r1, r3
 80035be:	4a63      	ldr	r2, [pc, #396]	; (800374c <get_pin_info+0x230>)
 80035c0:	7e53      	ldrb	r3, [r2, #25]
 80035c2:	f361 13c7 	bfi	r3, r1, #7, #1
 80035c6:	7653      	strb	r3, [r2, #25]
            pin.cap = aux_in[port].cap;
 80035c8:	4b62      	ldr	r3, [pc, #392]	; (8003754 <get_pin_info+0x238>)
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	797a      	ldrb	r2, [r7, #5]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	4a5c      	ldr	r2, [pc, #368]	; (800374c <get_pin_info+0x230>)
 80035da:	8b1b      	ldrh	r3, [r3, #24]
 80035dc:	8353      	strh	r3, [r2, #26]
            pin.function = aux_in[port].id;
 80035de:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <get_pin_info+0x238>)
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	797a      	ldrb	r2, [r7, #5]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	781a      	ldrb	r2, [r3, #0]
 80035f0:	4b56      	ldr	r3, [pc, #344]	; (800374c <get_pin_info+0x230>)
 80035f2:	701a      	strb	r2, [r3, #0]
            pin.group = aux_in[port].group;
 80035f4:	4b57      	ldr	r3, [pc, #348]	; (8003754 <get_pin_info+0x238>)
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	797a      	ldrb	r2, [r7, #5]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	4a51      	ldr	r2, [pc, #324]	; (800374c <get_pin_info+0x230>)
 8003608:	6053      	str	r3, [r2, #4]
            pin.pin = aux_in[port].pin;
 800360a:	4b52      	ldr	r3, [pc, #328]	; (8003754 <get_pin_info+0x238>)
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	797a      	ldrb	r2, [r7, #5]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	7a1b      	ldrb	r3, [r3, #8]
 800361c:	461a      	mov	r2, r3
 800361e:	4b4b      	ldr	r3, [pc, #300]	; (800374c <get_pin_info+0x230>)
 8003620:	611a      	str	r2, [r3, #16]
            pin.bit = aux_in[port].bit;
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <get_pin_info+0x238>)
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	797a      	ldrb	r2, [r7, #5]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a45      	ldr	r2, [pc, #276]	; (800374c <get_pin_info+0x230>)
 8003636:	6153      	str	r3, [r2, #20]
            pin.port = (void *)aux_in[port].port;
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <get_pin_info+0x238>)
 800363a:	6819      	ldr	r1, [r3, #0]
 800363c:	797a      	ldrb	r2, [r7, #5]
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4a40      	ldr	r2, [pc, #256]	; (800374c <get_pin_info+0x230>)
 800364c:	6093      	str	r3, [r2, #8]
            pin.description = aux_in[port].description;
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <get_pin_info+0x238>)
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	797a      	ldrb	r2, [r7, #5]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a3a      	ldr	r2, [pc, #232]	; (800374c <get_pin_info+0x230>)
 8003662:	60d3      	str	r3, [r2, #12]
            info = &pin;
 8003664:	4b39      	ldr	r3, [pc, #228]	; (800374c <get_pin_info+0x230>)
 8003666:	60fb      	str	r3, [r7, #12]
        }

        if(dir == Port_Output && port < digital.out.n_ports) {
 8003668:	79bb      	ldrb	r3, [r7, #6]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d169      	bne.n	8003742 <get_pin_info+0x226>
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <get_pin_info+0x234>)
 8003670:	7b1b      	ldrb	r3, [r3, #12]
 8003672:	797a      	ldrb	r2, [r7, #5]
 8003674:	429a      	cmp	r2, r3
 8003676:	d264      	bcs.n	8003742 <get_pin_info+0x226>
            port = ioports_map(digital.out, port);
 8003678:	4b35      	ldr	r3, [pc, #212]	; (8003750 <get_pin_info+0x234>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <get_pin_info+0x170>
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <get_pin_info+0x234>)
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	797b      	ldrb	r3, [r7, #5]
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	e000      	b.n	800368e <get_pin_info+0x172>
 800368c:	797b      	ldrb	r3, [r7, #5]
 800368e:	717b      	strb	r3, [r7, #5]
            pin.mode = aux_out[port].mode;
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <get_pin_info+0x23c>)
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	797a      	ldrb	r2, [r7, #5]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	4a2a      	ldr	r2, [pc, #168]	; (800374c <get_pin_info+0x230>)
 80036a2:	8a9b      	ldrh	r3, [r3, #20]
 80036a4:	8313      	strh	r3, [r2, #24]
            pin.mode.output = On;
 80036a6:	4a29      	ldr	r2, [pc, #164]	; (800374c <get_pin_info+0x230>)
 80036a8:	7e13      	ldrb	r3, [r2, #24]
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	7613      	strb	r3, [r2, #24]
            pin.function = aux_out[port].id;
 80036b0:	4b29      	ldr	r3, [pc, #164]	; (8003758 <get_pin_info+0x23c>)
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	797a      	ldrb	r2, [r7, #5]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <get_pin_info+0x230>)
 80036c4:	701a      	strb	r2, [r3, #0]
            pin.group = aux_out[port].group;
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <get_pin_info+0x23c>)
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	797a      	ldrb	r2, [r7, #5]
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <get_pin_info+0x230>)
 80036da:	6053      	str	r3, [r2, #4]
            pin.pin = aux_out[port].pin;
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <get_pin_info+0x23c>)
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	797a      	ldrb	r2, [r7, #5]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	7a1b      	ldrb	r3, [r3, #8]
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <get_pin_info+0x230>)
 80036f2:	611a      	str	r2, [r3, #16]
            pin.bit = 1 << aux_out[port].pin;
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <get_pin_info+0x23c>)
 80036f6:	6819      	ldr	r1, [r3, #0]
 80036f8:	797a      	ldrb	r2, [r7, #5]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	7a1b      	ldrb	r3, [r3, #8]
 8003706:	461a      	mov	r2, r3
 8003708:	2301      	movs	r3, #1
 800370a:	4093      	lsls	r3, r2
 800370c:	461a      	mov	r2, r3
 800370e:	4b0f      	ldr	r3, [pc, #60]	; (800374c <get_pin_info+0x230>)
 8003710:	615a      	str	r2, [r3, #20]
            pin.port = (void *)aux_out[port].port;
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <get_pin_info+0x23c>)
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	797a      	ldrb	r2, [r7, #5]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a09      	ldr	r2, [pc, #36]	; (800374c <get_pin_info+0x230>)
 8003726:	6093      	str	r3, [r2, #8]
            pin.description = aux_out[port].description;
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <get_pin_info+0x23c>)
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	797a      	ldrb	r2, [r7, #5]
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	4a04      	ldr	r2, [pc, #16]	; (800374c <get_pin_info+0x230>)
 800373c:	60d3      	str	r3, [r2, #12]
            info = &pin;
 800373e:	4b03      	ldr	r3, [pc, #12]	; (800374c <get_pin_info+0x230>)
 8003740:	60fb      	str	r3, [r7, #12]
#if PLASMA_ENABLE
    else if(dir == Port_Input && port == 0)
        info = &analog_in;
#endif

    return info;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200006d0 	.word	0x200006d0
 8003750:	200006a4 	.word	0x200006a4
 8003754:	200006bc 	.word	0x200006bc
 8003758:	200006c0 	.word	0x200006c0

0800375c <set_pin_description>:

static void set_pin_description (io_port_type_t type, io_port_direction_t dir, uint8_t port, const char *s)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
 8003768:	460b      	mov	r3, r1
 800376a:	71bb      	strb	r3, [r7, #6]
 800376c:	4613      	mov	r3, r2
 800376e:	717b      	strb	r3, [r7, #5]
    if(type == Port_Digital) {
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d141      	bne.n	80037fa <set_pin_description+0x9e>
        if(dir == Port_Input && port < digital.in.n_ports)
 8003776:	79bb      	ldrb	r3, [r7, #6]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11d      	bne.n	80037b8 <set_pin_description+0x5c>
 800377c:	4b22      	ldr	r3, [pc, #136]	; (8003808 <set_pin_description+0xac>)
 800377e:	791b      	ldrb	r3, [r3, #4]
 8003780:	797a      	ldrb	r2, [r7, #5]
 8003782:	429a      	cmp	r2, r3
 8003784:	d218      	bcs.n	80037b8 <set_pin_description+0x5c>
            aux_in[ioports_map(digital.in, port)].description = s;
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <set_pin_description+0xb0>)
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	4b1f      	ldr	r3, [pc, #124]	; (8003808 <set_pin_description+0xac>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <set_pin_description+0x4c>
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <set_pin_description+0xac>)
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	797b      	ldrb	r3, [r7, #5]
 8003798:	4413      	add	r3, r2
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	e004      	b.n	80037b2 <set_pin_description+0x56>
 80037a8:	797a      	ldrb	r2, [r7, #5]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	621a      	str	r2, [r3, #32]
        if(dir == Port_Output && port < digital.out.n_ports)
 80037b8:	79bb      	ldrb	r3, [r7, #6]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d11d      	bne.n	80037fa <set_pin_description+0x9e>
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <set_pin_description+0xac>)
 80037c0:	7b1b      	ldrb	r3, [r3, #12]
 80037c2:	797a      	ldrb	r2, [r7, #5]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d218      	bcs.n	80037fa <set_pin_description+0x9e>
            aux_out[ioports_map(digital.out, port)].description = s;
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <set_pin_description+0xb4>)
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <set_pin_description+0xac>)
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <set_pin_description+0x8e>
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <set_pin_description+0xac>)
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	797b      	ldrb	r3, [r7, #5]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	e004      	b.n	80037f4 <set_pin_description+0x98>
 80037ea:	797a      	ldrb	r2, [r7, #5]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	619a      	str	r2, [r3, #24]
    else {
        if(dir == Port_Output && port < analog.out.n_ports)
            aux_out[ioports_map(analog.out, port)].description = s;
    }
#endif
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	200006a4 	.word	0x200006a4
 800380c:	200006bc 	.word	0x200006bc
 8003810:	200006c0 	.word	0x200006c0

08003814 <claim>:

static bool claim (io_port_type_t type, io_port_direction_t dir, uint8_t *port, const char *description)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60ba      	str	r2, [r7, #8]
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	4603      	mov	r3, r0
 8003820:	73fb      	strb	r3, [r7, #15]
 8003822:	460b      	mov	r3, r1
 8003824:	73bb      	strb	r3, [r7, #14]
    bool ok = false;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]

    if(type == Port_Digital) {
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2b01      	cmp	r3, #1
 800382e:	f040 8114 	bne.w	8003a5a <claim+0x246>

        if(dir == Port_Input) {
 8003832:	7bbb      	ldrb	r3, [r7, #14]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f040 8089 	bne.w	800394c <claim+0x138>

            if((ok = digital.in.map && *port < digital.in.n_ports && !aux_in[*port].cap.claimed)) {
 800383a:	4b8a      	ldr	r3, [pc, #552]	; (8003a64 <claim+0x250>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d017      	beq.n	8003872 <claim+0x5e>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	4b87      	ldr	r3, [pc, #540]	; (8003a64 <claim+0x250>)
 8003848:	791b      	ldrb	r3, [r3, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	d211      	bcs.n	8003872 <claim+0x5e>
 800384e:	4b86      	ldr	r3, [pc, #536]	; (8003a68 <claim+0x254>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	460b      	mov	r3, r1
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	440b      	add	r3, r1
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	7e5b      	ldrb	r3, [r3, #25]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <claim+0x5e>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <claim+0x60>
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80ea 	beq.w	8003a5a <claim+0x246>

                uint8_t i;

                hal.port.num_digital_in--;
 8003886:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <claim+0x258>)
 8003888:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800388c:	3b01      	subs	r3, #1
 800388e:	b2da      	uxtb	r2, r3
 8003890:	4b76      	ldr	r3, [pc, #472]	; (8003a6c <claim+0x258>)
 8003892:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	4619      	mov	r1, r3
 800389c:	4874      	ldr	r0, [pc, #464]	; (8003a70 <claim+0x25c>)
 800389e:	f007 ff63 	bl	800b768 <ioports_map_reverse>
 80038a2:	4603      	mov	r3, r0
 80038a4:	75bb      	strb	r3, [r7, #22]
 80038a6:	e022      	b.n	80038ee <claim+0xda>
                    digital.in.map[i] = digital.in.map[i + 1];
 80038a8:	4b6e      	ldr	r3, [pc, #440]	; (8003a64 <claim+0x250>)
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	7dbb      	ldrb	r3, [r7, #22]
 80038ae:	3301      	adds	r3, #1
 80038b0:	441a      	add	r2, r3
 80038b2:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <claim+0x250>)
 80038b4:	6899      	ldr	r1, [r3, #8]
 80038b6:	7dbb      	ldrb	r3, [r7, #22]
 80038b8:	440b      	add	r3, r1
 80038ba:	7812      	ldrb	r2, [r2, #0]
 80038bc:	701a      	strb	r2, [r3, #0]
                    aux_in[digital.in.map[i]].description = iports_get_pnum(digital, i);
 80038be:	4b69      	ldr	r3, [pc, #420]	; (8003a64 <claim+0x250>)
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	4b69      	ldr	r3, [pc, #420]	; (8003a68 <claim+0x254>)
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	4b67      	ldr	r3, [pc, #412]	; (8003a64 <claim+0x250>)
 80038c8:	6898      	ldr	r0, [r3, #8]
 80038ca:	7dbb      	ldrb	r3, [r7, #22]
 80038cc:	4403      	add	r3, r0
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4403      	add	r3, r0
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	18cc      	adds	r4, r1, r3
 80038dc:	7dbb      	ldrb	r3, [r7, #22]
 80038de:	4619      	mov	r1, r3
 80038e0:	4860      	ldr	r0, [pc, #384]	; (8003a64 <claim+0x250>)
 80038e2:	4790      	blx	r2
 80038e4:	4603      	mov	r3, r0
 80038e6:	6223      	str	r3, [r4, #32]
                for(i = ioports_map_reverse(&digital.in, *port); i < hal.port.num_digital_in ; i++) {
 80038e8:	7dbb      	ldrb	r3, [r7, #22]
 80038ea:	3301      	adds	r3, #1
 80038ec:	75bb      	strb	r3, [r7, #22]
 80038ee:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <claim+0x258>)
 80038f0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80038f4:	7dba      	ldrb	r2, [r7, #22]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d3d6      	bcc.n	80038a8 <claim+0x94>
                }

                aux_in[*port].cap.claimed = On;
 80038fa:	4b5b      	ldr	r3, [pc, #364]	; (8003a68 <claim+0x254>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	4619      	mov	r1, r3
 8003904:	460b      	mov	r3, r1
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	440b      	add	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	441a      	add	r2, r3
 800390e:	7e53      	ldrb	r3, [r2, #25]
 8003910:	f043 0320 	orr.w	r3, r3, #32
 8003914:	7653      	strb	r3, [r2, #25]
                aux_in[*port].description = description;
 8003916:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <claim+0x254>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	4619      	mov	r1, r3
 8003920:	460b      	mov	r3, r1
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	440b      	add	r3, r1
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]

                digital.in.map[hal.port.num_digital_in] = *port;
 800392e:	4b4d      	ldr	r3, [pc, #308]	; (8003a64 <claim+0x250>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4a4e      	ldr	r2, [pc, #312]	; (8003a6c <claim+0x258>)
 8003934:	f892 2114 	ldrb.w	r2, [r2, #276]	; 0x114
 8003938:	4413      	add	r3, r2
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	701a      	strb	r2, [r3, #0]
                *port = hal.port.num_digital_in;
 8003940:	4b4a      	ldr	r3, [pc, #296]	; (8003a6c <claim+0x258>)
 8003942:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e086      	b.n	8003a5a <claim+0x246>
            }

        } else if((ok = digital.out.map && *port < digital.out.n_ports && !aux_out[*port].mode.claimed)) {
 800394c:	4b45      	ldr	r3, [pc, #276]	; (8003a64 <claim+0x250>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d017      	beq.n	8003984 <claim+0x170>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <claim+0x250>)
 800395a:	7b1b      	ldrb	r3, [r3, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d211      	bcs.n	8003984 <claim+0x170>
 8003960:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <claim+0x260>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4619      	mov	r1, r3
 800396a:	460b      	mov	r3, r1
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	1a5b      	subs	r3, r3, r1
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	7d5b      	ldrb	r3, [r3, #21]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <claim+0x170>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <claim+0x172>
 8003984:	2300      	movs	r3, #0
 8003986:	75fb      	strb	r3, [r7, #23]
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	75fb      	strb	r3, [r7, #23]
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d061      	beq.n	8003a5a <claim+0x246>

            uint8_t i;

            hal.port.num_digital_out--;
 8003996:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <claim+0x258>)
 8003998:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800399c:	3b01      	subs	r3, #1
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <claim+0x258>)
 80039a2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	4832      	ldr	r0, [pc, #200]	; (8003a78 <claim+0x264>)
 80039ae:	f007 fedb 	bl	800b768 <ioports_map_reverse>
 80039b2:	4603      	mov	r3, r0
 80039b4:	757b      	strb	r3, [r7, #21]
 80039b6:	e022      	b.n	80039fe <claim+0x1ea>
                digital.out.map[i] = digital.out.map[i + 1];
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <claim+0x250>)
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	7d7b      	ldrb	r3, [r7, #21]
 80039be:	3301      	adds	r3, #1
 80039c0:	441a      	add	r2, r3
 80039c2:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <claim+0x250>)
 80039c4:	6919      	ldr	r1, [r3, #16]
 80039c6:	7d7b      	ldrb	r3, [r7, #21]
 80039c8:	440b      	add	r3, r1
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	701a      	strb	r2, [r3, #0]
                aux_out[digital.out.map[i]].description = iports_get_pnum(digital, i);
 80039ce:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <claim+0x250>)
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	4b28      	ldr	r3, [pc, #160]	; (8003a74 <claim+0x260>)
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <claim+0x250>)
 80039d8:	6918      	ldr	r0, [r3, #16]
 80039da:	7d7b      	ldrb	r3, [r7, #21]
 80039dc:	4403      	add	r3, r0
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	1a1b      	subs	r3, r3, r0
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	18cc      	adds	r4, r1, r3
 80039ec:	7d7b      	ldrb	r3, [r7, #21]
 80039ee:	4619      	mov	r1, r3
 80039f0:	481c      	ldr	r0, [pc, #112]	; (8003a64 <claim+0x250>)
 80039f2:	4790      	blx	r2
 80039f4:	4603      	mov	r3, r0
 80039f6:	61a3      	str	r3, [r4, #24]
            for(i = ioports_map_reverse(&digital.out, *port); i < hal.port.num_digital_out; i++) {
 80039f8:	7d7b      	ldrb	r3, [r7, #21]
 80039fa:	3301      	adds	r3, #1
 80039fc:	757b      	strb	r3, [r7, #21]
 80039fe:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <claim+0x258>)
 8003a00:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8003a04:	7d7a      	ldrb	r2, [r7, #21]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3d6      	bcc.n	80039b8 <claim+0x1a4>
            }

            aux_out[*port].mode.claimed = On;
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <claim+0x260>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	4619      	mov	r1, r3
 8003a14:	460b      	mov	r3, r1
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	1a5b      	subs	r3, r3, r1
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	7d53      	ldrb	r3, [r2, #21]
 8003a20:	f043 0320 	orr.w	r3, r3, #32
 8003a24:	7553      	strb	r3, [r2, #21]
            aux_out[*port].description = description;
 8003a26:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <claim+0x260>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	460b      	mov	r3, r1
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	1a5b      	subs	r3, r3, r1
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	619a      	str	r2, [r3, #24]

            digital.out.map[hal.port.num_digital_out] = *port;
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <claim+0x250>)
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <claim+0x258>)
 8003a44:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 8003a48:	4413      	add	r3, r2
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	701a      	strb	r2, [r3, #0]
            *port = hal.port.num_digital_out;
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <claim+0x258>)
 8003a52:	f893 2115 	ldrb.w	r2, [r3, #277]	; 0x115
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	701a      	strb	r2, [r3, #0]
        analog_in.mode.claimed = On;
        analog_in.description = description;
    }
#endif

    return ok;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd90      	pop	{r4, r7, pc}
 8003a64:	200006a4 	.word	0x200006a4
 8003a68:	200006bc 	.word	0x200006bc
 8003a6c:	200016a0 	.word	0x200016a0
 8003a70:	200006a8 	.word	0x200006a8
 8003a74:	200006c0 	.word	0x200006c0
 8003a78:	200006b0 	.word	0x200006b0

08003a7c <swap_pins>:

bool swap_pins (io_port_type_t type, io_port_direction_t dir, uint8_t port_a, uint8_t port_b)
{
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b095      	sub	sp, #84	; 0x54
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4604      	mov	r4, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	71fb      	strb	r3, [r7, #7]
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71bb      	strb	r3, [r7, #6]
 8003a92:	460b      	mov	r3, r1
 8003a94:	717b      	strb	r3, [r7, #5]
 8003a96:	4613      	mov	r3, r2
 8003a98:	713b      	strb	r3, [r7, #4]
    bool ok = port_a == port_b;
 8003a9a:	797a      	ldrb	r2, [r7, #5]
 8003a9c:	793b      	ldrb	r3, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if(!ok && type == Port_Digital) {
 8003aaa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003aae:	f083 0301 	eor.w	r3, r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80da 	beq.w	8003c6e <swap_pins+0x1f2>
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 80d6 	bne.w	8003c6e <swap_pins+0x1f2>

        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
                   aux_in[port_a].interrupt_callback == NULL &&
 8003ac2:	79bb      	ldrb	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d121      	bne.n	8003b0c <swap_pins+0x90>
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 8003ac8:	4b6c      	ldr	r3, [pc, #432]	; (8003c7c <swap_pins+0x200>)
 8003aca:	791b      	ldrb	r3, [r3, #4]
 8003acc:	797a      	ldrb	r2, [r7, #5]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d21c      	bcs.n	8003b0c <swap_pins+0x90>
 8003ad2:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <swap_pins+0x200>)
 8003ad4:	791b      	ldrb	r3, [r3, #4]
 8003ad6:	793a      	ldrb	r2, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d217      	bcs.n	8003b0c <swap_pins+0x90>
                   aux_in[port_a].interrupt_callback == NULL &&
 8003adc:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <swap_pins+0x204>)
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	797a      	ldrb	r2, [r7, #5]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	69db      	ldr	r3, [r3, #28]
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <swap_pins+0x90>
                    aux_in[port_b].interrupt_callback == NULL)) {
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <swap_pins+0x204>)
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	793a      	ldrb	r2, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	69db      	ldr	r3, [r3, #28]
                   aux_in[port_a].interrupt_callback == NULL &&
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <swap_pins+0x90>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <swap_pins+0x92>
 8003b0c:	2300      	movs	r3, #0
        if((ok = dir == Port_Input && port_a < digital.in.n_ports && port_b < digital.in.n_ports &&
 8003b0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003b12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003b1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d043      	beq.n	8003bae <swap_pins+0x132>

            input_signal_t tmp;

            memcpy(&tmp, &aux_in[port_a], sizeof(input_signal_t));
 8003b26:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <swap_pins+0x204>)
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	797a      	ldrb	r2, [r7, #5]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4419      	add	r1, r3
 8003b36:	f107 030c 	add.w	r3, r7, #12
 8003b3a:	2224      	movs	r2, #36	; 0x24
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f022 fadb 	bl	80260f8 <memcpy>
            memcpy(&aux_in[port_a], &aux_in[port_b], sizeof(input_signal_t));
 8003b42:	4b4f      	ldr	r3, [pc, #316]	; (8003c80 <swap_pins+0x204>)
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	797a      	ldrb	r2, [r7, #5]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	18c8      	adds	r0, r1, r3
 8003b52:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <swap_pins+0x204>)
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	793a      	ldrb	r2, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	2224      	movs	r2, #36	; 0x24
 8003b64:	4619      	mov	r1, r3
 8003b66:	f022 fac7 	bl	80260f8 <memcpy>
            aux_in[port_a].description = tmp.description;
 8003b6a:	4b45      	ldr	r3, [pc, #276]	; (8003c80 <swap_pins+0x204>)
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	797a      	ldrb	r2, [r7, #5]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b7c:	621a      	str	r2, [r3, #32]
            tmp.description = aux_in[port_b].description;
 8003b7e:	4b40      	ldr	r3, [pc, #256]	; (8003c80 <swap_pins+0x204>)
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	793a      	ldrb	r2, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
            memcpy(&aux_in[port_b], &tmp, sizeof(input_signal_t));
 8003b92:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <swap_pins+0x204>)
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	793a      	ldrb	r2, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f107 010c 	add.w	r1, r7, #12
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f022 faa5 	bl	80260f8 <memcpy>
        }

        if((ok = dir == Port_Output && port_a < digital.out.n_ports && port_b < digital.out.n_ports)) {
 8003bae:	79bb      	ldrb	r3, [r7, #6]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10b      	bne.n	8003bcc <swap_pins+0x150>
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <swap_pins+0x200>)
 8003bb6:	7b1b      	ldrb	r3, [r3, #12]
 8003bb8:	797a      	ldrb	r2, [r7, #5]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d206      	bcs.n	8003bcc <swap_pins+0x150>
 8003bbe:	4b2f      	ldr	r3, [pc, #188]	; (8003c7c <swap_pins+0x200>)
 8003bc0:	7b1b      	ldrb	r3, [r3, #12]
 8003bc2:	793a      	ldrb	r2, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d201      	bcs.n	8003bcc <swap_pins+0x150>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <swap_pins+0x152>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003bd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003bde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d043      	beq.n	8003c6e <swap_pins+0x1f2>

            output_signal_t tmp;

            memcpy(&tmp, &aux_out[port_a], sizeof(output_signal_t));
 8003be6:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <swap_pins+0x208>)
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	797a      	ldrb	r2, [r7, #5]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4419      	add	r1, r3
 8003bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bfa:	221c      	movs	r2, #28
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f022 fa7b 	bl	80260f8 <memcpy>
            memcpy(&aux_out[port_a], &aux_out[port_b], sizeof(output_signal_t));
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <swap_pins+0x208>)
 8003c04:	6819      	ldr	r1, [r3, #0]
 8003c06:	797a      	ldrb	r2, [r7, #5]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	18c8      	adds	r0, r1, r3
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <swap_pins+0x208>)
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	793a      	ldrb	r2, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	221c      	movs	r2, #28
 8003c24:	4619      	mov	r1, r3
 8003c26:	f022 fa67 	bl	80260f8 <memcpy>
            aux_out[port_a].description = tmp.description;
 8003c2a:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <swap_pins+0x208>)
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	797a      	ldrb	r2, [r7, #5]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3c:	619a      	str	r2, [r3, #24]
            tmp.description = aux_out[port_b].description;
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <swap_pins+0x208>)
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	793a      	ldrb	r2, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
            memcpy(&aux_out[port_b], &tmp, sizeof(output_signal_t));
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <swap_pins+0x208>)
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	793a      	ldrb	r2, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003c66:	221c      	movs	r2, #28
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f022 fa45 	bl	80260f8 <memcpy>
        }
    }

    return ok;
 8003c6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3754      	adds	r7, #84	; 0x54
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200006a4 	.word	0x200006a4
 8003c80:	200006bc 	.word	0x200006bc
 8003c84:	200006c0 	.word	0x200006c0

08003c88 <on_setting_changed>:
}

#endif

static void on_setting_changed (setting_id_t id)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	80fb      	strh	r3, [r7, #6]
    if(id == Settings_IoPort_InvertOut && invert_digital_out.mask != settings.ioport.invert_out.mask) {
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	f5b3 7fba 	cmp.w	r3, #372	; 0x174
 8003c98:	d159      	bne.n	8003d4e <on_setting_changed+0xc6>
 8003c9a:	4b30      	ldr	r3, [pc, #192]	; (8003d5c <on_setting_changed+0xd4>)
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <on_setting_changed+0xd8>)
 8003ca0:	f893 316a 	ldrb.w	r3, [r3, #362]	; 0x16a
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d052      	beq.n	8003d4e <on_setting_changed+0xc6>

        uint_fast8_t port = digital.out.n_ports;
 8003ca8:	4b2e      	ldr	r3, [pc, #184]	; (8003d64 <on_setting_changed+0xdc>)
 8003caa:	7b1b      	ldrb	r3, [r3, #12]
 8003cac:	60fb      	str	r3, [r7, #12]
        do {
            port--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
            if(((settings.ioport.invert_out.mask >> port) & 0x01) != ((invert_digital_out.mask >> port) & 0x01))
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <on_setting_changed+0xd8>)
 8003cb6:	f893 316a 	ldrb.w	r3, [r3, #362]	; 0x16a
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	411a      	asrs	r2, r3
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <on_setting_changed+0xd4>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	fa41 f303 	asr.w	r3, r1, r3
 8003ccc:	4053      	eors	r3, r2
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d033      	beq.n	8003d3e <on_setting_changed+0xb6>
                DIGITAL_OUT(aux_out[port].port, aux_out[port].bit, !DIGITAL_IN(aux_out[port].port, aux_out[port].bit));
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <on_setting_changed+0xe0>)
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <on_setting_changed+0xe0>)
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4403      	add	r3, r0
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <on_setting_changed+0x8e>
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <on_setting_changed+0xe0>)
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	e009      	b.n	8003d2a <on_setting_changed+0xa2>
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <on_setting_changed+0xe0>)
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	041a      	lsls	r2, r3, #16
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <on_setting_changed+0xe0>)
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	460b      	mov	r3, r1
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	1a5b      	subs	r3, r3, r1
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	619a      	str	r2, [r3, #24]
        } while(port);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1b4      	bne.n	8003cae <on_setting_changed+0x26>

        invert_digital_out = settings.ioport.invert_out;
 8003d44:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <on_setting_changed+0xd4>)
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <on_setting_changed+0xd8>)
 8003d48:	f893 316a 	ldrb.w	r3, [r3, #362]	; 0x16a
 8003d4c:	7013      	strb	r3, [r2, #0]
    }
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	200006c4 	.word	0x200006c4
 8003d60:	20001cf0 	.word	0x20001cf0
 8003d64:	200006a4 	.word	0x200006a4
 8003d68:	200006c0 	.word	0x200006c0

08003d6c <on_settings_loaded>:

static void on_settings_loaded (void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
//    aux_set_pullup();
    uint_fast8_t idx = digital.out.n_ports;
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <on_settings_loaded+0x88>)
 8003d74:	7b1b      	ldrb	r3, [r3, #12]
 8003d76:	607b      	str	r3, [r7, #4]

    invert_digital_out = settings.ioport.invert_out;
 8003d78:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <on_settings_loaded+0x8c>)
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <on_settings_loaded+0x90>)
 8003d7c:	f893 316a 	ldrb.w	r3, [r3, #362]	; 0x16a
 8003d80:	7013      	strb	r3, [r2, #0]

    if(digital.out.n_ports) do {
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <on_settings_loaded+0x88>)
 8003d84:	7b1b      	ldrb	r3, [r3, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d02e      	beq.n	8003de8 <on_settings_loaded+0x7c>
        idx--;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	607b      	str	r3, [r7, #4]
        DIGITAL_OUT(aux_out[idx].port, aux_out[idx].bit, (settings.ioport.invert_out.mask >> idx) & 0x01);
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <on_settings_loaded+0x90>)
 8003d92:	f893 316a 	ldrb.w	r3, [r3, #362]	; 0x16a
 8003d96:	461a      	mov	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	fa42 f303 	asr.w	r3, r2, r3
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <on_settings_loaded+0x4e>
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <on_settings_loaded+0x94>)
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	e009      	b.n	8003dce <on_settings_loaded+0x62>
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <on_settings_loaded+0x94>)
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	041a      	lsls	r2, r3, #16
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <on_settings_loaded+0x94>)
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	1a5b      	subs	r3, r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4403      	add	r3, r0
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	619a      	str	r2, [r3, #24]
    } while(idx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1d0      	bne.n	8003d8a <on_settings_loaded+0x1e>
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	200006a4 	.word	0x200006a4
 8003df8:	200006c4 	.word	0x200006c4
 8003dfc:	20001cf0 	.word	0x20001cf0
 8003e00:	200006c0 	.word	0x200006c0

08003e04 <ioports_init>:

void ioports_init (pin_group_pins_t *aux_inputs, pin_group_pins_t *aux_outputs)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
    aux_in = aux_inputs->pins.inputs;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <ioports_init+0x94>)
 8003e14:	6013      	str	r3, [r2, #0]
    aux_out = aux_outputs->pins.outputs;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4a20      	ldr	r2, [pc, #128]	; (8003e9c <ioports_init+0x98>)
 8003e1c:	6013      	str	r3, [r2, #0]

    hal.port.set_pin_description = set_pin_description;
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <ioports_init+0x9c>)
 8003e20:	4a20      	ldr	r2, [pc, #128]	; (8003ea4 <ioports_init+0xa0>)
 8003e22:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

    if(ioports_add(&digital, Port_Digital, aux_inputs->n_pins, aux_outputs->n_pins))  {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	481d      	ldr	r0, [pc, #116]	; (8003ea8 <ioports_init+0xa4>)
 8003e32:	f007 fae3 	bl	800b3fc <ioports_add>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d024      	beq.n	8003e86 <ioports_init+0x82>

        if(digital.in.n_ports) {
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <ioports_init+0xa4>)
 8003e3e:	791b      	ldrb	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <ioports_init+0x50>
            hal.port.wait_on_input = wait_on_input;
 8003e44:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <ioports_init+0x9c>)
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <ioports_init+0xa8>)
 8003e48:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            hal.port.register_interrupt_handler = register_interrupt_handler;
 8003e4c:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <ioports_init+0x9c>)
 8003e4e:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <ioports_init+0xac>)
 8003e50:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }

        if(digital.out.n_ports)
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <ioports_init+0xa4>)
 8003e56:	7b1b      	ldrb	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <ioports_init+0x60>
            hal.port.digital_out = digital_out;
 8003e5c:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <ioports_init+0x9c>)
 8003e5e:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <ioports_init+0xb0>)
 8003e60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

        hal.port.claim = claim;
 8003e64:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <ioports_init+0x9c>)
 8003e66:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <ioports_init+0xb4>)
 8003e68:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        hal.port.swap_pins = swap_pins;
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <ioports_init+0x9c>)
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <ioports_init+0xb8>)
 8003e70:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        hal.port.get_pin_info = get_pin_info;
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <ioports_init+0x9c>)
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <ioports_init+0xbc>)
 8003e78:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

        ioports_add_settings(on_settings_loaded, on_setting_changed);
 8003e7c:	4911      	ldr	r1, [pc, #68]	; (8003ec4 <ioports_init+0xc0>)
 8003e7e:	4812      	ldr	r0, [pc, #72]	; (8003ec8 <ioports_init+0xc4>)
 8003e80:	f007 fd24 	bl	800b8cc <ioports_add_settings>
        on_enumerate_pins = hal.enumerate_pins;
        hal.enumerate_pins = enumerate_pins;
    }

#endif // PLASMA_ENABLE
}
 8003e84:	e003      	b.n	8003e8e <ioports_init+0x8a>
        hal.port.set_pin_description = NULL;
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <ioports_init+0x9c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	200006bc 	.word	0x200006bc
 8003e9c:	200006c0 	.word	0x200006c0
 8003ea0:	200016a0 	.word	0x200016a0
 8003ea4:	0800375d 	.word	0x0800375d
 8003ea8:	200006a4 	.word	0x200006a4
 8003eac:	080031d5 	.word	0x080031d5
 8003eb0:	08003409 	.word	0x08003409
 8003eb4:	08003129 	.word	0x08003129
 8003eb8:	08003815 	.word	0x08003815
 8003ebc:	08003a7d 	.word	0x08003a7d
 8003ec0:	0800351d 	.word	0x0800351d
 8003ec4:	08003c89 	.word	0x08003c89
 8003ec8:	08003d6d 	.word	0x08003d6d

08003ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ed0:	f01e fa92 	bl	80223f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ed4:	f000 f80b 	bl	8003eee <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8003ed8:	f000 f865 	bl	8003fa6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003edc:	f000 f8b4 	bl	8004048 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8003ee0:	f000 f871 	bl	8003fc6 <MX_ICACHE_Init>
  MX_MEMORYMAP_Init();
 8003ee4:	f000 f8a9 	bl	800403a <MX_MEMORYMAP_Init>
  /* USER CODE BEGIN 2 */

  grbl_enter();
 8003ee8:	f006 ffea 	bl	800aec0 <grbl_enter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003eec:	e7fe      	b.n	8003eec <main+0x20>

08003eee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b09e      	sub	sp, #120	; 0x78
 8003ef2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ef4:	f107 0318 	add.w	r3, r7, #24
 8003ef8:	2260      	movs	r2, #96	; 0x60
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f021 ff9e 	bl	8025e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f02:	463b      	mov	r3, r7
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	611a      	str	r2, [r3, #16]
 8003f10:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003f12:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003f16:	f01f fc6d 	bl	80237f4 <HAL_PWREx_ControlVoltageScaling>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8003f20:	f000 f9a6 	bl	8004270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003f24:	2310      	movs	r3, #16
 8003f26:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f34:	2302      	movs	r3, #2
 8003f36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8003f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8003f42:	2303      	movs	r3, #3
 8003f44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003f46:	230a      	movs	r3, #10
 8003f48:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8003f56:	230c      	movs	r3, #12
 8003f58:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f5e:	f107 0318 	add.w	r3, r7, #24
 8003f62:	4618      	mov	r0, r3
 8003f64:	f01f fd42 	bl	80239ec <HAL_RCC_OscConfig>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003f6e:	f000 f97f 	bl	8004270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f72:	231f      	movs	r3, #31
 8003f74:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f76:	2303      	movs	r3, #3
 8003f78:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f8a:	463b      	mov	r3, r7
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f020 fc08 	bl	80247a4 <HAL_RCC_ClockConfig>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8003f9a:	f000 f969 	bl	8004270 <Error_Handler>
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	3778      	adds	r7, #120	; 0x78
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8003faa:	f01f fcff 	bl	80239ac <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003fae:	f01f fd0d 	bl	80239cc <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8003fb2:	2002      	movs	r0, #2
 8003fb4:	f01f fcaa 	bl	802390c <HAL_PWREx_ConfigSupply>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8003fbe:	f000 f957 	bl	8004270 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
 8003fd6:	60da      	str	r2, [r3, #12]
 8003fd8:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8003fda:	f01f fb89 	bl	80236f0 <HAL_ICACHE_Disable>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8003fe4:	f000 f944 	bl	8004270 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 8003fe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fec:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8003fee:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003ff2:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	4619      	mov	r1, r3
 8004004:	2000      	movs	r0, #0
 8004006:	f01f fba3 	bl	8023750 <HAL_ICACHE_EnableRemapRegion>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8004010:	f000 f92e 	bl	8004270 <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8004014:	2000      	movs	r0, #0
 8004016:	f01f fb3b 	bl	8023690 <HAL_ICACHE_ConfigAssociativityMode>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_ICACHE_Init+0x5e>
  {
    Error_Handler();
 8004020:	f000 f926 	bl	8004270 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8004024:	f01f fb54 	bl	80236d0 <HAL_ICACHE_Enable>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_ICACHE_Init+0x6c>
  {
    Error_Handler();
 800402e:	f000 f91f 	bl	8004270 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8004032:	bf00      	nop
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 800403a:	b480      	push	{r7}
 800403c:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404e:	f107 0314 	add.w	r3, r7, #20
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800405e:	4b75      	ldr	r3, [pc, #468]	; (8004234 <MX_GPIO_Init+0x1ec>)
 8004060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004064:	4a73      	ldr	r2, [pc, #460]	; (8004234 <MX_GPIO_Init+0x1ec>)
 8004066:	f043 0304 	orr.w	r3, r3, #4
 800406a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800406e:	4b71      	ldr	r3, [pc, #452]	; (8004234 <MX_GPIO_Init+0x1ec>)
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800407c:	4b6d      	ldr	r3, [pc, #436]	; (8004234 <MX_GPIO_Init+0x1ec>)
 800407e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004082:	4a6c      	ldr	r2, [pc, #432]	; (8004234 <MX_GPIO_Init+0x1ec>)
 8004084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004088:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800408c:	4b69      	ldr	r3, [pc, #420]	; (8004234 <MX_GPIO_Init+0x1ec>)
 800408e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800409a:	4b66      	ldr	r3, [pc, #408]	; (8004234 <MX_GPIO_Init+0x1ec>)
 800409c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a0:	4a64      	ldr	r2, [pc, #400]	; (8004234 <MX_GPIO_Init+0x1ec>)
 80040a2:	f043 0302 	orr.w	r3, r3, #2
 80040a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040aa:	4b62      	ldr	r3, [pc, #392]	; (8004234 <MX_GPIO_Init+0x1ec>)
 80040ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80040b8:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <MX_GPIO_Init+0x1ec>)
 80040ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040be:	4a5d      	ldr	r2, [pc, #372]	; (8004234 <MX_GPIO_Init+0x1ec>)
 80040c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040c8:	4b5a      	ldr	r3, [pc, #360]	; (8004234 <MX_GPIO_Init+0x1ec>)
 80040ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d6:	4b57      	ldr	r3, [pc, #348]	; (8004234 <MX_GPIO_Init+0x1ec>)
 80040d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040dc:	4a55      	ldr	r2, [pc, #340]	; (8004234 <MX_GPIO_Init+0x1ec>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040e6:	4b53      	ldr	r3, [pc, #332]	; (8004234 <MX_GPIO_Init+0x1ec>)
 80040e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80040f4:	2200      	movs	r2, #0
 80040f6:	2104      	movs	r1, #4
 80040f8:	484f      	ldr	r0, [pc, #316]	; (8004238 <MX_GPIO_Init+0x1f0>)
 80040fa:	f01e fcfb 	bl	8022af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80040fe:	2200      	movs	r2, #0
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	484e      	ldr	r0, [pc, #312]	; (800423c <MX_GPIO_Init+0x1f4>)
 8004104:	f01e fcf6 	bl	8022af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8004108:	2200      	movs	r2, #0
 800410a:	21a0      	movs	r1, #160	; 0xa0
 800410c:	484c      	ldr	r0, [pc, #304]	; (8004240 <MX_GPIO_Init+0x1f8>)
 800410e:	f01e fcf1 	bl	8022af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8004112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004118:	4b4a      	ldr	r3, [pc, #296]	; (8004244 <MX_GPIO_Init+0x1fc>)
 800411a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	4619      	mov	r1, r3
 8004126:	4845      	ldr	r0, [pc, #276]	; (800423c <MX_GPIO_Init+0x1f4>)
 8004128:	f01e fb0c 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800412c:	2304      	movs	r3, #4
 800412e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004130:	2303      	movs	r3, #3
 8004132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	4619      	mov	r1, r3
 800413e:	483f      	ldr	r0, [pc, #252]	; (800423c <MX_GPIO_Init+0x1f4>)
 8004140:	f01e fb00 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8004144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	4619      	mov	r1, r3
 8004158:	4839      	ldr	r0, [pc, #228]	; (8004240 <MX_GPIO_Init+0x1f8>)
 800415a:	f01e faf3 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800415e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004164:	2303      	movs	r3, #3
 8004166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	4619      	mov	r1, r3
 8004172:	4833      	ldr	r0, [pc, #204]	; (8004240 <MX_GPIO_Init+0x1f8>)
 8004174:	f01e fae6 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8004178:	2304      	movs	r3, #4
 800417a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800417c:	2301      	movs	r3, #1
 800417e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004184:	2300      	movs	r3, #0
 8004186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4619      	mov	r1, r3
 800418e:	482a      	ldr	r0, [pc, #168]	; (8004238 <MX_GPIO_Init+0x1f0>)
 8004190:	f01e fad8 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004198:	2301      	movs	r3, #1
 800419a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041a0:	2300      	movs	r3, #0
 80041a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	4619      	mov	r1, r3
 80041aa:	4824      	ldr	r0, [pc, #144]	; (800423c <MX_GPIO_Init+0x1f4>)
 80041ac:	f01e faca 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b6:	2302      	movs	r3, #2
 80041b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041c2:	2307      	movs	r3, #7
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	4619      	mov	r1, r3
 80041cc:	481e      	ldr	r0, [pc, #120]	; (8004248 <MX_GPIO_Init+0x200>)
 80041ce:	f01e fab9 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80041d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80041d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d8:	2302      	movs	r3, #2
 80041da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e0:	2300      	movs	r3, #0
 80041e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80041e4:	230a      	movs	r3, #10
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e8:	f107 0314 	add.w	r3, r7, #20
 80041ec:	4619      	mov	r1, r3
 80041ee:	4816      	ldr	r0, [pc, #88]	; (8004248 <MX_GPIO_Init+0x200>)
 80041f0:	f01e faa8 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80041f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041fa:	2303      	movs	r3, #3
 80041fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004202:	f107 0314 	add.w	r3, r7, #20
 8004206:	4619      	mov	r1, r3
 8004208:	480f      	ldr	r0, [pc, #60]	; (8004248 <MX_GPIO_Init+0x200>)
 800420a:	f01e fa9b 	bl	8022744 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 800420e:	23a0      	movs	r3, #160	; 0xa0
 8004210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421a:	2300      	movs	r3, #0
 800421c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	4619      	mov	r1, r3
 8004224:	4806      	ldr	r0, [pc, #24]	; (8004240 <MX_GPIO_Init+0x1f8>)
 8004226:	f01e fa8d 	bl	8022744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800422a:	bf00      	nop
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	46020c00 	.word	0x46020c00
 8004238:	42021800 	.word	0x42021800
 800423c:	42020800 	.word	0x42020800
 8004240:	42020400 	.word	0x42020400
 8004244:	10110000 	.word	0x10110000
 8004248:	42020000 	.word	0x42020000

0800424c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a04      	ldr	r2, [pc, #16]	; (800426c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800425e:	f01e f8f9 	bl	8022454 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40014800 	.word	0x40014800

08004270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004274:	b672      	cpsid	i
}
 8004276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004278:	e7fe      	b.n	8004278 <Error_Handler+0x8>
	...

0800427c <serialRegisterStreams>:
    }
#endif
};

void serialRegisterStreams (void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
        .pin = UART0_RX_PIN,
        .mode = { .mask = PINMODE_NONE },
        .description = "UART1"
    };

    hal.periph_port.register_pin(&rx0);
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <serialRegisterStreams+0x38>)
 8004282:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004286:	480c      	ldr	r0, [pc, #48]	; (80042b8 <serialRegisterStreams+0x3c>)
 8004288:	4798      	blx	r3
    hal.periph_port.register_pin(&tx0);
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <serialRegisterStreams+0x38>)
 800428c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004290:	480a      	ldr	r0, [pc, #40]	; (80042bc <serialRegisterStreams+0x40>)
 8004292:	4798      	blx	r3
        .pin = UART1_RX_PIN,
        .mode = { .mask = PINMODE_NONE },
        .description = "UART2"
    };

    hal.periph_port.register_pin(&rx1);
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <serialRegisterStreams+0x38>)
 8004296:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800429a:	4809      	ldr	r0, [pc, #36]	; (80042c0 <serialRegisterStreams+0x44>)
 800429c:	4798      	blx	r3
    hal.periph_port.register_pin(&tx1);
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <serialRegisterStreams+0x38>)
 80042a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80042a4:	4807      	ldr	r0, [pc, #28]	; (80042c4 <serialRegisterStreams+0x48>)
 80042a6:	4798      	blx	r3
    hal.periph_port.register_pin(&rx2);
    hal.periph_port.register_pin(&tx2);

#endif

    stream_register_streams(&streams);
 80042a8:	4807      	ldr	r0, [pc, #28]	; (80042c8 <serialRegisterStreams+0x4c>)
 80042aa:	f01b f91d 	bl	801f4e8 <stream_register_streams>
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200016a0 	.word	0x200016a0
 80042b8:	08032554 	.word	0x08032554
 80042bc:	0803256c 	.word	0x0803256c
 80042c0:	08032584 	.word	0x08032584
 80042c4:	0803259c 	.word	0x0803259c
 80042c8:	20000374 	.word	0x20000374

080042cc <serialClaimPort>:

#if SERIAL_PORT || SERIAL1_PORT || SERIAL2_PORT

static bool serialClaimPort (uint8_t instance)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
    bool ok = false;
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
    uint_fast8_t idx = sizeof(serial) / sizeof(io_stream_properties_t);
 80042da:	2302      	movs	r3, #2
 80042dc:	60bb      	str	r3, [r7, #8]

    do {
        if(serial[--idx].instance == instance) {
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	4a1d      	ldr	r2, [pc, #116]	; (800435c <serialClaimPort+0x90>)
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	79fa      	ldrb	r2, [r7, #7]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d127      	bne.n	8004344 <serialClaimPort+0x78>
            if((ok = serial[idx].flags.claimable && !serial[idx].flags.claimed))
 80042f4:	4a19      	ldr	r2, [pc, #100]	; (800435c <serialClaimPort+0x90>)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4413      	add	r3, r2
 80042fc:	789b      	ldrb	r3, [r3, #2]
 80042fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <serialClaimPort+0x54>
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <serialClaimPort+0x90>)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	789b      	ldrb	r3, [r3, #2]
 8004312:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <serialClaimPort+0x54>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <serialClaimPort+0x56>
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <serialClaimPort+0x80>
                serial[idx].flags.claimed = On;
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <serialClaimPort+0x90>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	789a      	ldrb	r2, [r3, #2]
 800433c:	f042 0204 	orr.w	r2, r2, #4
 8004340:	709a      	strb	r2, [r3, #2]
            break;
 8004342:	e003      	b.n	800434c <serialClaimPort+0x80>
        }

    } while(idx);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1c9      	bne.n	80042de <serialClaimPort+0x12>
 800434a:	e000      	b.n	800434e <serialClaimPort+0x82>
            break;
 800434c:	bf00      	nop

    return ok;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	20000364 	.word	0x20000364

08004360 <serialRxFree>:

//
// Returns number of free characters in serial input buffer
//
static uint16_t serialRxFree (void)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
    uint16_t tail = rxbuf.tail, head = rxbuf.head;
 8004366:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <serialRxFree+0x44>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	80fb      	strh	r3, [r7, #6]
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <serialRxFree+0x44>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	80bb      	strh	r3, [r7, #4]

    return (RX_BUFFER_SIZE - 1) - BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 8004372:	88ba      	ldrh	r2, [r7, #4]
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	429a      	cmp	r2, r3
 8004378:	d307      	bcc.n	800438a <serialRxFree+0x2a>
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	88bb      	ldrh	r3, [r7, #4]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	b29b      	uxth	r3, r3
 8004382:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004386:	b29b      	uxth	r3, r3
 8004388:	e005      	b.n	8004396 <serialRxFree+0x36>
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	88bb      	ldrh	r3, [r7, #4]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29b      	uxth	r3, r3
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	200006fc 	.word	0x200006fc

080043a8 <serialRxCount>:

//
// Returns number of characters in serial input buffer
//
static uint16_t serialRxCount (void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
    uint32_t tail = rxbuf.tail, head = rxbuf.head;
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <serialRxCount+0x48>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <serialRxCount+0x48>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	603b      	str	r3, [r7, #0]

    return BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d306      	bcc.n	80043d0 <serialRxCount+0x28>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	e008      	b.n	80043e2 <serialRxCount+0x3a>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043e0:	b29b      	uxth	r3, r3
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	200006fc 	.word	0x200006fc

080043f4 <serialRxFlush>:

//
// Flushes the serial input buffer
//
static void serialRxFlush (void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
    rxbuf.tail = rxbuf.head;
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <serialRxFlush+0x18>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a03      	ldr	r2, [pc, #12]	; (800440c <serialRxFlush+0x18>)
 80043fe:	6053      	str	r3, [r2, #4]
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200006fc 	.word	0x200006fc

08004410 <serialRxCancel>:

//
// Flushes and adds a CAN character to the serial input buffer
//
static void serialRxCancel (void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
    rxbuf.data[rxbuf.head] = ASCII_CAN;
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <serialRxCancel+0x30>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a09      	ldr	r2, [pc, #36]	; (8004440 <serialRxCancel+0x30>)
 800441a:	4413      	add	r3, r2
 800441c:	2218      	movs	r2, #24
 800441e:	72da      	strb	r2, [r3, #11]
    rxbuf.tail = rxbuf.head;
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <serialRxCancel+0x30>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a06      	ldr	r2, [pc, #24]	; (8004440 <serialRxCancel+0x30>)
 8004426:	6053      	str	r3, [r2, #4]
    rxbuf.head = BUFNEXT(rxbuf.head, rxbuf);
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <serialRxCancel+0x30>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004432:	4a03      	ldr	r2, [pc, #12]	; (8004440 <serialRxCancel+0x30>)
 8004434:	6013      	str	r3, [r2, #0]
}
 8004436:	bf00      	nop
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	200006fc 	.word	0x200006fc

08004444 <serialPutC>:

//
// Writes a character to the serial output stream
//
static bool serialPutC (const char c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	71fb      	strb	r3, [r7, #7]
    uint16_t next_head = BUFNEXT(txbuf.head, txbuf);    // Get pointer to next free slot in buffer
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <serialPutC+0x68>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	3301      	adds	r3, #1
 8004456:	b29b      	uxth	r3, r3
 8004458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445c:	81fb      	strh	r3, [r7, #14]

    while(txbuf.tail == next_head) {                    // While TX buffer full
 800445e:	e00b      	b.n	8004478 <serialPutC+0x34>
        if(!hal.stream_blocking_callback())             // check if blocking for space,
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <serialPutC+0x6c>)
 8004462:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004466:	4798      	blx	r3
 8004468:	4603      	mov	r3, r0
 800446a:	f083 0301 	eor.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <serialPutC+0x34>
            return false;                               // exit if not (leaves TX buffer in an inconsistent state)
 8004474:	2300      	movs	r3, #0
 8004476:	e014      	b.n	80044a2 <serialPutC+0x5e>
    while(txbuf.tail == next_head) {                    // While TX buffer full
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <serialPutC+0x68>)
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	89fb      	ldrh	r3, [r7, #14]
 800447e:	429a      	cmp	r2, r3
 8004480:	d0ee      	beq.n	8004460 <serialPutC+0x1c>
    }
    txbuf.data[txbuf.head] = c;                         // Add data to buffer,
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <serialPutC+0x68>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a09      	ldr	r2, [pc, #36]	; (80044ac <serialPutC+0x68>)
 8004488:	4413      	add	r3, r2
 800448a:	79fa      	ldrb	r2, [r7, #7]
 800448c:	721a      	strb	r2, [r3, #8]
    txbuf.head = next_head;                             // update head pointer and
 800448e:	89fb      	ldrh	r3, [r7, #14]
 8004490:	4a06      	ldr	r2, [pc, #24]	; (80044ac <serialPutC+0x68>)
 8004492:	6013      	str	r3, [r2, #0]
    UART0->CR1 |= USART_CR1_TXEIE;                      // enable TX interrupts
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <serialPutC+0x70>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a06      	ldr	r2, [pc, #24]	; (80044b4 <serialPutC+0x70>)
 800449a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449e:	6013      	str	r3, [r2, #0]

    return true;
 80044a0:	2301      	movs	r3, #1
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000b08 	.word	0x20000b08
 80044b0:	200016a0 	.word	0x200016a0
 80044b4:	40004800 	.word	0x40004800

080044b8 <serialWriteS>:

//
// Writes a null terminated string to the serial output stream, blocks if buffer full
//
static void serialWriteS (const char *s)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    char c, *ptr = (char *)s;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60fb      	str	r3, [r7, #12]

    while((c = *ptr++) != '\0')
 80044c4:	e003      	b.n	80044ce <serialWriteS+0x16>
        serialPutC(c);
 80044c6:	7afb      	ldrb	r3, [r7, #11]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ffbb 	bl	8004444 <serialPutC>
    while((c = *ptr++) != '\0')
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	60fa      	str	r2, [r7, #12]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	72fb      	strb	r3, [r7, #11]
 80044d8:	7afb      	ldrb	r3, [r7, #11]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f3      	bne.n	80044c6 <serialWriteS+0xe>
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <serialWrite>:

//
// Writes a number of characters from string to the serial output stream followed by EOL, blocks if buffer full
//
static void serialWrite (const char *s, uint16_t length)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
    char *ptr = (char *)s;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	60fb      	str	r3, [r7, #12]

    while(length--)
 80044f8:	e006      	b.n	8004508 <serialWrite+0x20>
        serialPutC(*ptr++);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	60fa      	str	r2, [r7, #12]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff9e 	bl	8004444 <serialPutC>
    while(length--)
 8004508:	887b      	ldrh	r3, [r7, #2]
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	807a      	strh	r2, [r7, #2]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f3      	bne.n	80044fa <serialWrite+0x12>
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <serialTxFlush>:

//
// Flushes the serial output buffer
//
static void serialTxFlush (void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
    UART0->CR1 &= ~USART_CR1_TXEIE;     // Disable TX interrupts
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <serialTxFlush+0x24>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a06      	ldr	r2, [pc, #24]	; (8004540 <serialTxFlush+0x24>)
 8004526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452a:	6013      	str	r3, [r2, #0]
    txbuf.tail = txbuf.head;
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <serialTxFlush+0x28>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <serialTxFlush+0x28>)
 8004532:	6053      	str	r3, [r2, #4]
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40004800 	.word	0x40004800
 8004544:	20000b08 	.word	0x20000b08

08004548 <serialTxCount>:

//
// Returns number of characters pending transmission
//
static uint16_t serialTxCount (void)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
    uint32_t tail = txbuf.tail, head = txbuf.head;
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <serialTxCount+0x60>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <serialTxCount+0x60>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	603b      	str	r3, [r7, #0]

    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART0->ISR & USART_ISR_TC ? 0 : 1);
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d306      	bcc.n	8004570 <serialTxCount+0x28>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	b29b      	uxth	r3, r3
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	b29b      	uxth	r3, r3
 800456e:	e008      	b.n	8004582 <serialTxCount+0x3a>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	b29b      	uxth	r3, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	b29b      	uxth	r3, r3
 800457c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004580:	b29b      	uxth	r3, r3
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <serialTxCount+0x64>)
 8004584:	69d2      	ldr	r2, [r2, #28]
 8004586:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800458a:	2a00      	cmp	r2, #0
 800458c:	bf0c      	ite	eq
 800458e:	2201      	moveq	r2, #1
 8004590:	2200      	movne	r2, #0
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	b292      	uxth	r2, r2
 8004596:	4413      	add	r3, r2
 8004598:	b29b      	uxth	r3, r3
}
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000b08 	.word	0x20000b08
 80045ac:	40004800 	.word	0x40004800

080045b0 <serialGetC>:

//
// serialGetC - returns -1 if no data available
//
static int16_t serialGetC (void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
    uint_fast16_t tail = rxbuf.tail;    // Get buffer pointer
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <serialGetC+0x44>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	607b      	str	r3, [r7, #4]

    if(tail == rxbuf.head)
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <serialGetC+0x44>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d102      	bne.n	80045cc <serialGetC+0x1c>
        return -1; // no data available
 80045c6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ca:	e00d      	b.n	80045e8 <serialGetC+0x38>

    char data = rxbuf.data[tail];       // Get next character
 80045cc:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <serialGetC+0x44>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	330b      	adds	r3, #11
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	70fb      	strb	r3, [r7, #3]
    rxbuf.tail = BUFNEXT(tail, rxbuf);  // and update pointer
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3301      	adds	r3, #1
 80045dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e0:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <serialGetC+0x44>)
 80045e2:	6053      	str	r3, [r2, #4]

    return (int16_t)data;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	b21b      	sxth	r3, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	200006fc 	.word	0x200006fc

080045f8 <serialSuspendInput>:

static bool serialSuspendInput (bool suspend)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
    return stream_rx_suspend(&rxbuf, suspend);
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	4619      	mov	r1, r3
 8004606:	4804      	ldr	r0, [pc, #16]	; (8004618 <serialSuspendInput+0x20>)
 8004608:	f01b f836 	bl	801f678 <stream_rx_suspend>
 800460c:	4603      	mov	r3, r0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	200006fc 	.word	0x200006fc

0800461c <serialSetBaudRate>:

static bool serialSetBaudRate (uint32_t baud_rate)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
    UART0->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 8004624:	4b17      	ldr	r3, [pc, #92]	; (8004684 <serialSetBaudRate+0x68>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a16      	ldr	r2, [pc, #88]	; (8004684 <serialSetBaudRate+0x68>)
 800462a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800462e:	6013      	str	r3, [r2, #0]
    UART0->CR1 = USART_CR1_RE|USART_CR1_TE;
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <serialSetBaudRate+0x68>)
 8004632:	220c      	movs	r2, #12
 8004634:	601a      	str	r2, [r3, #0]
    UART0->CR3 = USART_CR3_OVRDIS;
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <serialSetBaudRate+0x68>)
 8004638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800463c:	609a      	str	r2, [r3, #8]
    UART0->BRR = UART_DIV_SAMPLING16(UART0_CLK, baud_rate, 0); // MOD . 3rd Argument 0 added
 800463e:	f020 fbbf 	bl	8024dc0 <HAL_RCC_GetPCLK1Freq>
 8004642:	4603      	mov	r3, r0
 8004644:	4a10      	ldr	r2, [pc, #64]	; (8004688 <serialSetBaudRate+0x6c>)
 8004646:	8812      	ldrh	r2, [r2, #0]
 8004648:	fbb3 f2f2 	udiv	r2, r3, r2
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	441a      	add	r2, r3
 8004652:	490c      	ldr	r1, [pc, #48]	; (8004684 <serialSetBaudRate+0x68>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	fbb2 f3f3 	udiv	r3, r2, r3
 800465a:	60cb      	str	r3, [r1, #12]
    UART0->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <serialSetBaudRate+0x68>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <serialSetBaudRate+0x68>)
 8004662:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004666:	6013      	str	r3, [r2, #0]

    rxbuf.tail = rxbuf.head;
 8004668:	4b08      	ldr	r3, [pc, #32]	; (800468c <serialSetBaudRate+0x70>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <serialSetBaudRate+0x70>)
 800466e:	6053      	str	r3, [r2, #4]
    txbuf.tail = txbuf.head;
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <serialSetBaudRate+0x74>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a06      	ldr	r2, [pc, #24]	; (8004690 <serialSetBaudRate+0x74>)
 8004676:	6053      	str	r3, [r2, #4]

    return true;
 8004678:	2301      	movs	r3, #1
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40004800 	.word	0x40004800
 8004688:	08034b34 	.word	0x08034b34
 800468c:	200006fc 	.word	0x200006fc
 8004690:	20000b08 	.word	0x20000b08

08004694 <serialDisable>:

static bool serialDisable (bool disable)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
    if(disable)
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d006      	beq.n	80046b2 <serialDisable+0x1e>
        UART0->CR1 &= ~USART_CR1_RXNEIE;
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <serialDisable+0x38>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a08      	ldr	r2, [pc, #32]	; (80046cc <serialDisable+0x38>)
 80046aa:	f023 0320 	bic.w	r3, r3, #32
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e005      	b.n	80046be <serialDisable+0x2a>
    else
        UART0->CR1 |= USART_CR1_RXNEIE;
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <serialDisable+0x38>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a05      	ldr	r2, [pc, #20]	; (80046cc <serialDisable+0x38>)
 80046b8:	f043 0320 	orr.w	r3, r3, #32
 80046bc:	6013      	str	r3, [r2, #0]

    return true;
 80046be:	2301      	movs	r3, #1
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40004800 	.word	0x40004800

080046d0 <serialEnqueueRtCommand>:

static bool serialEnqueueRtCommand (char c)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	71fb      	strb	r3, [r7, #7]
    return enqueue_realtime_command(c);
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <serialEnqueueRtCommand+0x20>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	79fa      	ldrb	r2, [r7, #7]
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3
 80046e4:	4603      	mov	r3, r0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	2000035c 	.word	0x2000035c

080046f4 <serialSetRtHandler>:

static enqueue_realtime_command_ptr serialSetRtHandler (enqueue_realtime_command_ptr handler)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 80046fc:	4b07      	ldr	r3, [pc, #28]	; (800471c <serialSetRtHandler+0x28>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]

    if(handler)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <serialSetRtHandler+0x1a>
        enqueue_realtime_command = handler;
 8004708:	4a04      	ldr	r2, [pc, #16]	; (800471c <serialSetRtHandler+0x28>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]

    return prev;
 800470e:	68fb      	ldr	r3, [r7, #12]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	2000035c 	.word	0x2000035c

08004720 <serialInit>:

static const io_stream_t *serialInit (uint32_t baud_rate)
{
 8004720:	b5b0      	push	{r4, r5, r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
        .disable_rx = serialDisable,
        .set_baud_rate = serialSetBaudRate,
        .set_enqueue_rt_handler = serialSetRtHandler
    };

    if(!serialClaimPort(stream.instance))
 8004728:	4b1c      	ldr	r3, [pc, #112]	; (800479c <serialInit+0x7c>)
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fdcd 	bl	80042cc <serialClaimPort>
 8004732:	4603      	mov	r3, r0
 8004734:	f083 0301 	eor.w	r3, r3, #1
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <serialInit+0x22>
        return NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	e028      	b.n	8004794 <serialInit+0x74>

    UART0_CLK_En();
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <serialInit+0x80>)
 8004744:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <serialInit+0x80>)
 800474a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800474e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <serialInit+0x80>)
 8004754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitTypeDef GPIO_InitStructure = {
 8004760:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <serialInit+0x84>)
 8004762:	f107 040c 	add.w	r4, r7, #12
 8004766:	461d      	mov	r5, r3
 8004768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800476a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	6023      	str	r3, [r4, #0]
        .Pull      = GPIO_NOPULL,
        .Speed     = GPIO_SPEED_FREQ_VERY_HIGH,
        .Pin       = (1 << UART0_RX_PIN)|(1 << UART0_TX_PIN),
        .Alternate = UART0_AF
    };
    HAL_GPIO_Init(UART0_PORT, &GPIO_InitStructure);
 8004770:	f107 030c 	add.w	r3, r7, #12
 8004774:	4619      	mov	r1, r3
 8004776:	480c      	ldr	r0, [pc, #48]	; (80047a8 <serialInit+0x88>)
 8004778:	f01d ffe4 	bl	8022744 <HAL_GPIO_Init>

    serialSetBaudRate(baud_rate);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ff4d 	bl	800461c <serialSetBaudRate>

    HAL_NVIC_SetPriority(UART0_IRQ, 0, 0);
 8004782:	2200      	movs	r2, #0
 8004784:	2100      	movs	r1, #0
 8004786:	203f      	movs	r0, #63	; 0x3f
 8004788:	f01d ff60 	bl	802264c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART0_IRQ);
 800478c:	203f      	movs	r0, #63	; 0x3f
 800478e:	f01d ff77 	bl	8022680 <HAL_NVIC_EnableIRQ>

    return &stream;
 8004792:	4b02      	ldr	r3, [pc, #8]	; (800479c <serialInit+0x7c>)
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bdb0      	pop	{r4, r5, r7, pc}
 800479c:	080325b4 	.word	0x080325b4
 80047a0:	46020c00 	.word	0x46020c00
 80047a4:	08029078 	.word	0x08029078
 80047a8:	42020c00 	.word	0x42020c00

080047ac <USART3_IRQHandler>:

void UART0_IRQHandler (void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
    if(UART0->ISR & USART_ISR_RXNE) {
 80047b2:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <USART3_IRQHandler+0xc4>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d02a      	beq.n	8004814 <USART3_IRQHandler+0x68>
        uint32_t data = UART0->RDR;
 80047be:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <USART3_IRQHandler+0xc4>)
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	60fb      	str	r3, [r7, #12]
        if(!enqueue_realtime_command((char)data)) {             // Check and strip realtime commands...
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <USART3_IRQHandler+0xc8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	4610      	mov	r0, r2
 80047ce:	4798      	blx	r3
 80047d0:	4603      	mov	r3, r0
 80047d2:	f083 0301 	eor.w	r3, r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01b      	beq.n	8004814 <USART3_IRQHandler+0x68>
            uint16_t next_head = BUFNEXT(rxbuf.head, rxbuf);    // Get and increment buffer pointer
 80047dc:	4b26      	ldr	r3, [pc, #152]	; (8004878 <USART3_IRQHandler+0xcc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ea:	817b      	strh	r3, [r7, #10]
            if(next_head == rxbuf.tail)                         // If buffer full
 80047ec:	897a      	ldrh	r2, [r7, #10]
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <USART3_IRQHandler+0xcc>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d103      	bne.n	80047fe <USART3_IRQHandler+0x52>
                rxbuf.overflow = 1;                             // flag overflow
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <USART3_IRQHandler+0xcc>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	725a      	strb	r2, [r3, #9]
 80047fc:	e00a      	b.n	8004814 <USART3_IRQHandler+0x68>
            else {
                rxbuf.data[rxbuf.head] = (char)data;            // if not add data to buffer
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <USART3_IRQHandler+0xcc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	b2d1      	uxtb	r1, r2
 8004806:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <USART3_IRQHandler+0xcc>)
 8004808:	4413      	add	r3, r2
 800480a:	460a      	mov	r2, r1
 800480c:	72da      	strb	r2, [r3, #11]
                rxbuf.head = next_head;                         // and update pointer
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <USART3_IRQHandler+0xcc>)
 8004812:	6013      	str	r3, [r2, #0]
            }
        }
    }

    if((UART0->ISR & USART_ISR_TXE) && (UART0->CR1 & USART_CR1_TXEIE)) {
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <USART3_IRQHandler+0xc4>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481c:	2b00      	cmp	r3, #0
 800481e:	d022      	beq.n	8004866 <USART3_IRQHandler+0xba>
 8004820:	4b13      	ldr	r3, [pc, #76]	; (8004870 <USART3_IRQHandler+0xc4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01c      	beq.n	8004866 <USART3_IRQHandler+0xba>
        uint_fast16_t tail = txbuf.tail;            // Get buffer pointer
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <USART3_IRQHandler+0xd0>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	607b      	str	r3, [r7, #4]
        UART0->TDR = txbuf.data[tail];              // Send next character
 8004832:	4a12      	ldr	r2, [pc, #72]	; (800487c <USART3_IRQHandler+0xd0>)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	3308      	adds	r3, #8
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <USART3_IRQHandler+0xc4>)
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
        txbuf.tail = tail = BUFNEXT(tail, txbuf);   // and increment pointer
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3301      	adds	r3, #1
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	4a0c      	ldr	r2, [pc, #48]	; (800487c <USART3_IRQHandler+0xd0>)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6053      	str	r3, [r2, #4]
        if(tail == txbuf.head)                      // If buffer empty then
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <USART3_IRQHandler+0xd0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	429a      	cmp	r2, r3
 8004858:	d105      	bne.n	8004866 <USART3_IRQHandler+0xba>
            UART0->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <USART3_IRQHandler+0xc4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a04      	ldr	r2, [pc, #16]	; (8004870 <USART3_IRQHandler+0xc4>)
 8004860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004864:	6013      	str	r3, [r2, #0]
   }
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40004800 	.word	0x40004800
 8004874:	2000035c 	.word	0x2000035c
 8004878:	200006fc 	.word	0x200006fc
 800487c:	20000b08 	.word	0x20000b08

08004880 <serial1RxFree>:

//
// Returns number of free characters in serial input buffer
//
static uint16_t serial1RxFree (void)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
    uint32_t tail = rxbuf1.tail, head = rxbuf1.head;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <serial1RxFree+0x4c>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	607b      	str	r3, [r7, #4]
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <serial1RxFree+0x4c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	603b      	str	r3, [r7, #0]

    return (RX_BUFFER_SIZE - 1) - BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d309      	bcc.n	80048ae <serial1RxFree+0x2e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	b29a      	uxth	r2, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	e007      	b.n	80048be <serial1RxFree+0x3e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29b      	uxth	r3, r3
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000d10 	.word	0x20000d10

080048d0 <serial1RxCount>:

//
// Returns number of characters in serial input buffer
//
static uint16_t serial1RxCount (void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
    uint32_t tail = rxbuf1.tail, head = rxbuf1.head;
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <serial1RxCount+0x48>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <serial1RxCount+0x48>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	603b      	str	r3, [r7, #0]

    return BUFCOUNT(head, tail, RX_BUFFER_SIZE);
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d306      	bcc.n	80048f8 <serial1RxCount+0x28>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	e008      	b.n	800490a <serial1RxCount+0x3a>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	b29b      	uxth	r3, r3
 8004904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004908:	b29b      	uxth	r3, r3
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000d10 	.word	0x20000d10

0800491c <serial1RxFlush>:

//
// Flushes the serial input buffer
//
static void serial1RxFlush (void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
    rxbuf1.tail = rxbuf1.head;
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <serial1RxFlush+0x18>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a03      	ldr	r2, [pc, #12]	; (8004934 <serial1RxFlush+0x18>)
 8004926:	6053      	str	r3, [r2, #4]
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000d10 	.word	0x20000d10

08004938 <serial1RxCancel>:

//
// Flushes and adds a CAN character to the serial input buffer
//
static void serial1RxCancel (void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
    rxbuf1.data[rxbuf1.head] = ASCII_CAN;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <serial1RxCancel+0x30>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a09      	ldr	r2, [pc, #36]	; (8004968 <serial1RxCancel+0x30>)
 8004942:	4413      	add	r3, r2
 8004944:	2218      	movs	r2, #24
 8004946:	72da      	strb	r2, [r3, #11]
    rxbuf1.tail = rxbuf1.head;
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <serial1RxCancel+0x30>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a06      	ldr	r2, [pc, #24]	; (8004968 <serial1RxCancel+0x30>)
 800494e:	6053      	str	r3, [r2, #4]
    rxbuf1.head = BUFNEXT(rxbuf1.head, rxbuf1);
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <serial1RxCancel+0x30>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800495a:	4a03      	ldr	r2, [pc, #12]	; (8004968 <serial1RxCancel+0x30>)
 800495c:	6013      	str	r3, [r2, #0]
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000d10 	.word	0x20000d10

0800496c <serial1PutC>:

//
// Writes a character to the serial output stream
//
static bool serial1PutC (const char c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	71fb      	strb	r3, [r7, #7]
    uint32_t next_head = BUFNEXT(txbuf1.head, txbuf1);   // Set and update head pointer
 8004976:	4b19      	ldr	r3, [pc, #100]	; (80049dc <serial1PutC+0x70>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3301      	adds	r3, #1
 800497c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004980:	60fb      	str	r3, [r7, #12]

    while(txbuf1.tail == next_head) {           // While TX buffer full
 8004982:	e011      	b.n	80049a8 <serial1PutC+0x3c>
        if(!hal.stream_blocking_callback())     // check if blocking for space,
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <serial1PutC+0x74>)
 8004986:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800498a:	4798      	blx	r3
 800498c:	4603      	mov	r3, r0
 800498e:	f083 0301 	eor.w	r3, r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <serial1PutC+0x30>
            return false;                       // exit if not (leaves TX buffer in an inconsistent state)
 8004998:	2300      	movs	r3, #0
 800499a:	e01a      	b.n	80049d2 <serial1PutC+0x66>
        UART1->CR1 |= USART_CR1_TXEIE;          // Enable TX interrupts???
 800499c:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <serial1PutC+0x78>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <serial1PutC+0x78>)
 80049a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a6:	6013      	str	r3, [r2, #0]
    while(txbuf1.tail == next_head) {           // While TX buffer full
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <serial1PutC+0x70>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d0e8      	beq.n	8004984 <serial1PutC+0x18>
    }

    txbuf1.data[txbuf1.head] = c;               // Add data to buffer
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <serial1PutC+0x70>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <serial1PutC+0x70>)
 80049b8:	4413      	add	r3, r2
 80049ba:	79fa      	ldrb	r2, [r7, #7]
 80049bc:	721a      	strb	r2, [r3, #8]
    txbuf1.head = next_head;                    // and update head pointer
 80049be:	4a07      	ldr	r2, [pc, #28]	; (80049dc <serial1PutC+0x70>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6013      	str	r3, [r2, #0]

    UART1->CR1 |= USART_CR1_TXEIE;              // Enable TX interrupts
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <serial1PutC+0x78>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a06      	ldr	r2, [pc, #24]	; (80049e4 <serial1PutC+0x78>)
 80049ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ce:	6013      	str	r3, [r2, #0]

    return true;
 80049d0:	2301      	movs	r3, #1
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000111c 	.word	0x2000111c
 80049e0:	200016a0 	.word	0x200016a0
 80049e4:	40013800 	.word	0x40013800

080049e8 <serial1WriteS>:

//
// Writes a null terminated string to the serial output stream, blocks if buffer full
//
static void serial1WriteS (const char *s)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
    char c, *ptr = (char *)s;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

    while((c = *ptr++) != '\0')
 80049f4:	e003      	b.n	80049fe <serial1WriteS+0x16>
        serial1PutC(c);
 80049f6:	7afb      	ldrb	r3, [r7, #11]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ffb7 	bl	800496c <serial1PutC>
    while((c = *ptr++) != '\0')
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	60fa      	str	r2, [r7, #12]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	72fb      	strb	r3, [r7, #11]
 8004a08:	7afb      	ldrb	r3, [r7, #11]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f3      	bne.n	80049f6 <serial1WriteS+0xe>
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <serial1Write>:

// Writes a number of characters from a buffer to the serial output stream, blocks if buffer full
//
static void serial1Write (const char *s, uint16_t length)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
    char *ptr = (char *)s;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	60fb      	str	r3, [r7, #12]

    while(length--)
 8004a28:	e006      	b.n	8004a38 <serial1Write+0x20>
        serial1PutC(*ptr++);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	60fa      	str	r2, [r7, #12]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ff9a 	bl	800496c <serial1PutC>
    while(length--)
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	1e5a      	subs	r2, r3, #1
 8004a3c:	807a      	strh	r2, [r7, #2]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f3      	bne.n	8004a2a <serial1Write+0x12>
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <serial1TxFlush>:

//
// Flushes the serial output buffer
//
static void serial1TxFlush (void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
    UART1->CR1 &= ~USART_CR1_TXEIE;     // Disable TX interrupts
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <serial1TxFlush+0x24>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a06      	ldr	r2, [pc, #24]	; (8004a70 <serial1TxFlush+0x24>)
 8004a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5a:	6013      	str	r3, [r2, #0]
    txbuf1.tail = txbuf1.head;
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <serial1TxFlush+0x28>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a04      	ldr	r2, [pc, #16]	; (8004a74 <serial1TxFlush+0x28>)
 8004a62:	6053      	str	r3, [r2, #4]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40013800 	.word	0x40013800
 8004a74:	2000111c 	.word	0x2000111c

08004a78 <serial1TxCount>:

//
// Returns number of characters pending transmission
//
static uint16_t serial1TxCount (void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
    uint32_t tail = txbuf1.tail, head = txbuf1.head;
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <serial1TxCount+0x60>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <serial1TxCount+0x60>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	603b      	str	r3, [r7, #0]

    return BUFCOUNT(head, tail, TX_BUFFER_SIZE) + (UART1->ISR & USART_ISR_TC ? 0 : 1);
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d306      	bcc.n	8004aa0 <serial1TxCount+0x28>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	e008      	b.n	8004ab2 <serial1TxCount+0x3a>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <serial1TxCount+0x64>)
 8004ab4:	69d2      	ldr	r2, [r2, #28]
 8004ab6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004aba:	2a00      	cmp	r2, #0
 8004abc:	bf0c      	ite	eq
 8004abe:	2201      	moveq	r2, #1
 8004ac0:	2200      	movne	r2, #0
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b29b      	uxth	r3, r3
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	2000111c 	.word	0x2000111c
 8004adc:	40013800 	.word	0x40013800

08004ae0 <serial1GetC>:

//
// serialGetC - returns -1 if no data available
//
static int16_t serial1GetC (void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
    uint_fast16_t tail = rxbuf1.tail;       // Get buffer pointer
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <serial1GetC+0x44>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	607b      	str	r3, [r7, #4]

    if(tail == rxbuf1.head)
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <serial1GetC+0x44>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d102      	bne.n	8004afc <serial1GetC+0x1c>
        return -1; // no data available
 8004af6:	f04f 33ff 	mov.w	r3, #4294967295
 8004afa:	e00d      	b.n	8004b18 <serial1GetC+0x38>

    char data = rxbuf1.data[tail];          // Get next character
 8004afc:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <serial1GetC+0x44>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	330b      	adds	r3, #11
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	70fb      	strb	r3, [r7, #3]
    rxbuf1.tail = BUFNEXT(tail, rxbuf1);    // and update pointer
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <serial1GetC+0x44>)
 8004b12:	6053      	str	r3, [r2, #4]

    return (int16_t)data;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	b21b      	sxth	r3, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	20000d10 	.word	0x20000d10

08004b28 <serial1SuspendInput>:

static bool serial1SuspendInput (bool suspend)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
    return stream_rx_suspend(&rxbuf1, suspend);
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	4619      	mov	r1, r3
 8004b36:	4804      	ldr	r0, [pc, #16]	; (8004b48 <serial1SuspendInput+0x20>)
 8004b38:	f01a fd9e 	bl	801f678 <stream_rx_suspend>
 8004b3c:	4603      	mov	r3, r0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000d10 	.word	0x20000d10

08004b4c <serial1SetBaudRate>:

static bool serial1SetBaudRate (uint32_t baud_rate)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
    UART1->CR1 = USART_CR1_RE|USART_CR1_TE;
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <serial1SetBaudRate+0x5c>)
 8004b56:	220c      	movs	r2, #12
 8004b58:	601a      	str	r2, [r3, #0]
    UART1->CR3 = USART_CR3_OVRDIS;
 8004b5a:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <serial1SetBaudRate+0x5c>)
 8004b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b60:	609a      	str	r2, [r3, #8]
// MOD    UART1->BRR = UART_DIV_SAMPLING16(UART1_CLK, baud_rate);  LINE BELOW ADDED INSTEAD
    UART1->BRR = UART_DIV_SAMPLING16(UART1_CLK, baud_rate, 0);
 8004b62:	f020 f941 	bl	8024de8 <HAL_RCC_GetPCLK2Freq>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4a10      	ldr	r2, [pc, #64]	; (8004bac <serial1SetBaudRate+0x60>)
 8004b6a:	8812      	ldrh	r2, [r2, #0]
 8004b6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	441a      	add	r2, r3
 8004b76:	490c      	ldr	r1, [pc, #48]	; (8004ba8 <serial1SetBaudRate+0x5c>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	60cb      	str	r3, [r1, #12]

    UART1->CR1 |= (USART_CR1_UE|USART_CR1_RXNEIE);
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <serial1SetBaudRate+0x5c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <serial1SetBaudRate+0x5c>)
 8004b86:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004b8a:	6013      	str	r3, [r2, #0]

    rxbuf1.tail = rxbuf1.head;
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <serial1SetBaudRate+0x64>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a07      	ldr	r2, [pc, #28]	; (8004bb0 <serial1SetBaudRate+0x64>)
 8004b92:	6053      	str	r3, [r2, #4]
    txbuf1.tail = txbuf1.head;
 8004b94:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <serial1SetBaudRate+0x68>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <serial1SetBaudRate+0x68>)
 8004b9a:	6053      	str	r3, [r2, #4]

    return true;
 8004b9c:	2301      	movs	r3, #1
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40013800 	.word	0x40013800
 8004bac:	08034b34 	.word	0x08034b34
 8004bb0:	20000d10 	.word	0x20000d10
 8004bb4:	2000111c 	.word	0x2000111c

08004bb8 <serial1Disable>:

static bool serial1Disable (bool disable)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
    if(disable)
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <serial1Disable+0x1e>
        UART1->CR1 &= ~USART_CR1_RXNEIE;
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <serial1Disable+0x38>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <serial1Disable+0x38>)
 8004bce:	f023 0320 	bic.w	r3, r3, #32
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	e005      	b.n	8004be2 <serial1Disable+0x2a>
    else
        UART1->CR1 |= USART_CR1_RXNEIE;
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <serial1Disable+0x38>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a05      	ldr	r2, [pc, #20]	; (8004bf0 <serial1Disable+0x38>)
 8004bdc:	f043 0320 	orr.w	r3, r3, #32
 8004be0:	6013      	str	r3, [r2, #0]

    return true;
 8004be2:	2301      	movs	r3, #1
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40013800 	.word	0x40013800

08004bf4 <serial1EnqueueRtCommand>:

static bool serial1EnqueueRtCommand (char c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
    return enqueue_realtime_command1(c);
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <serial1EnqueueRtCommand+0x20>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	79fa      	ldrb	r2, [r7, #7]
 8004c04:	4610      	mov	r0, r2
 8004c06:	4798      	blx	r3
 8004c08:	4603      	mov	r3, r0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000360 	.word	0x20000360

08004c18 <serial1SetRtHandler>:

static enqueue_realtime_command_ptr serial1SetRtHandler (enqueue_realtime_command_ptr handler)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
    enqueue_realtime_command_ptr prev = enqueue_realtime_command1;
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <serial1SetRtHandler+0x28>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]

    if(handler)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <serial1SetRtHandler+0x1a>
        enqueue_realtime_command1 = handler;
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <serial1SetRtHandler+0x28>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6013      	str	r3, [r2, #0]

    return prev;
 8004c32:	68fb      	ldr	r3, [r7, #12]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	20000360 	.word	0x20000360

08004c44 <serial1Init>:

static const io_stream_t *serial1Init (uint32_t baud_rate)
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
        .disable_rx = serial1Disable,
        .set_baud_rate = serial1SetBaudRate,
        .set_enqueue_rt_handler = serial1SetRtHandler
    };

    if(!serialClaimPort(stream.instance))
 8004c4c:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <serial1Init+0x7c>)
 8004c4e:	785b      	ldrb	r3, [r3, #1]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fb3b 	bl	80042cc <serialClaimPort>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f083 0301 	eor.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <serial1Init+0x22>
        return NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e028      	b.n	8004cb8 <serial1Init+0x74>

    UART1_CLK_En();
 8004c66:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <serial1Init+0x80>)
 8004c68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c6c:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <serial1Init+0x80>)
 8004c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c72:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <serial1Init+0x80>)
 8004c78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitTypeDef GPIO_InitStructure = {
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <serial1Init+0x84>)
 8004c86:	f107 040c 	add.w	r4, r7, #12
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	6023      	str	r3, [r4, #0]
        .Pull      = GPIO_NOPULL,
        .Speed     = GPIO_SPEED_FREQ_VERY_HIGH,
        .Pin       = (1 << UART1_RX_PIN)|(1 << UART1_TX_PIN),
        .Alternate = UART1_AF
    };
    HAL_GPIO_Init(UART1_PORT, &GPIO_InitStructure);
 8004c94:	f107 030c 	add.w	r3, r7, #12
 8004c98:	4619      	mov	r1, r3
 8004c9a:	480c      	ldr	r0, [pc, #48]	; (8004ccc <serial1Init+0x88>)
 8004c9c:	f01d fd52 	bl	8022744 <HAL_GPIO_Init>

    serial1SetBaudRate(baud_rate);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff53 	bl	8004b4c <serial1SetBaudRate>

    HAL_NVIC_SetPriority(UART1_IRQ, 0, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2100      	movs	r1, #0
 8004caa:	203d      	movs	r0, #61	; 0x3d
 8004cac:	f01d fcce 	bl	802264c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART1_IRQ);
 8004cb0:	203d      	movs	r0, #61	; 0x3d
 8004cb2:	f01d fce5 	bl	8022680 <HAL_NVIC_EnableIRQ>

    return &stream;
 8004cb6:	4b02      	ldr	r3, [pc, #8]	; (8004cc0 <serial1Init+0x7c>)
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8004cc0:	08032600 	.word	0x08032600
 8004cc4:	46020c00 	.word	0x46020c00
 8004cc8:	0802908c 	.word	0x0802908c
 8004ccc:	42020000 	.word	0x42020000

08004cd0 <USART1_IRQHandler>:

void UART1_IRQHandler (void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
    if(UART1->ISR & USART_ISR_RXNE) {
 8004cd6:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <USART1_IRQHandler+0xc4>)
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d02a      	beq.n	8004d38 <USART1_IRQHandler+0x68>
        uint32_t data = UART1->RDR;
 8004ce2:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <USART1_IRQHandler+0xc4>)
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	60fb      	str	r3, [r7, #12]
        if(!enqueue_realtime_command1((char)data)) {            // Check and strip realtime commands...
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <USART1_IRQHandler+0xc8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4798      	blx	r3
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f083 0301 	eor.w	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01b      	beq.n	8004d38 <USART1_IRQHandler+0x68>
            uint16_t next_head = BUFNEXT(rxbuf1.head, rxbuf1);  // Get and increment buffer pointer
 8004d00:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <USART1_IRQHandler+0xcc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3301      	adds	r3, #1
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0e:	817b      	strh	r3, [r7, #10]
            if(next_head == rxbuf1.tail)                        // If buffer full
 8004d10:	897a      	ldrh	r2, [r7, #10]
 8004d12:	4b22      	ldr	r3, [pc, #136]	; (8004d9c <USART1_IRQHandler+0xcc>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d103      	bne.n	8004d22 <USART1_IRQHandler+0x52>
                rxbuf1.overflow = 1;                            // flag overflow
 8004d1a:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <USART1_IRQHandler+0xcc>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	725a      	strb	r2, [r3, #9]
 8004d20:	e00a      	b.n	8004d38 <USART1_IRQHandler+0x68>
            else {
                rxbuf1.data[rxbuf1.head] = (char)data;          // if not add data to buffer
 8004d22:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <USART1_IRQHandler+0xcc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	b2d1      	uxtb	r1, r2
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	; (8004d9c <USART1_IRQHandler+0xcc>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	460a      	mov	r2, r1
 8004d30:	72da      	strb	r2, [r3, #11]
                rxbuf1.head = next_head;                        // and update pointer
 8004d32:	897b      	ldrh	r3, [r7, #10]
 8004d34:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <USART1_IRQHandler+0xcc>)
 8004d36:	6013      	str	r3, [r2, #0]
            }
        }
    }

    if((UART1->ISR & USART_ISR_TXE) && (UART1->CR1 & USART_CR1_TXEIE)) {
 8004d38:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <USART1_IRQHandler+0xc4>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d022      	beq.n	8004d8a <USART1_IRQHandler+0xba>
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <USART1_IRQHandler+0xc4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01c      	beq.n	8004d8a <USART1_IRQHandler+0xba>
        uint_fast16_t tail = txbuf1.tail;           // Get buffer pointer
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <USART1_IRQHandler+0xd0>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	607b      	str	r3, [r7, #4]
        UART1->TDR = txbuf1.data[tail];             // Send next character
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <USART1_IRQHandler+0xd0>)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	781a      	ldrb	r2, [r3, #0]
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <USART1_IRQHandler+0xc4>)
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28
        txbuf1.tail = tail = BUFNEXT(tail, txbuf1); // and increment pointer
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3301      	adds	r3, #1
 8004d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <USART1_IRQHandler+0xd0>)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6053      	str	r3, [r2, #4]
        if(tail == txbuf1.head)                     // If buffer empty then
 8004d74:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <USART1_IRQHandler+0xd0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d105      	bne.n	8004d8a <USART1_IRQHandler+0xba>
            UART1->CR1 &= ~USART_CR1_TXEIE;         // disable UART TX interrupt
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <USART1_IRQHandler+0xc4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <USART1_IRQHandler+0xc4>)
 8004d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d88:	6013      	str	r3, [r2, #0]
   }
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40013800 	.word	0x40013800
 8004d98:	20000360 	.word	0x20000360
 8004d9c:	20000d10 	.word	0x20000d10
 8004da0:	2000111c 	.word	0x2000111c

08004da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <HAL_MspInit+0x34>)
 8004dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db0:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <HAL_MspInit+0x34>)
 8004db2:	f043 0304 	orr.w	r3, r3, #4
 8004db6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004dba:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <HAL_MspInit+0x34>)
 8004dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004dc8:	2004      	movs	r0, #4
 8004dca:	f01d fc34 	bl	8022636 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	46020c00 	.word	0x46020c00

08004ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08e      	sub	sp, #56	; 0x38
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8004dec:	4b2e      	ldr	r3, [pc, #184]	; (8004ea8 <HAL_InitTick+0xcc>)
 8004dee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004df2:	4a2d      	ldr	r2, [pc, #180]	; (8004ea8 <HAL_InitTick+0xcc>)
 8004df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <HAL_InitTick+0xcc>)
 8004dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e0a:	f107 0210 	add.w	r2, r7, #16
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f01f fffb 	bl	8024e10 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004e1a:	f01f ffe5 	bl	8024de8 <HAL_RCC_GetPCLK2Freq>
 8004e1e:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	4a22      	ldr	r2, [pc, #136]	; (8004eac <HAL_InitTick+0xd0>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	0c9b      	lsrs	r3, r3, #18
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_InitTick+0xd4>)
 8004e30:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <HAL_InitTick+0xd8>)
 8004e32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8004e34:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <HAL_InitTick+0xd4>)
 8004e36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e3a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004e3c:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <HAL_InitTick+0xd4>)
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8004e42:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <HAL_InitTick+0xd4>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e48:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_InitTick+0xd4>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8004e4e:	4818      	ldr	r0, [pc, #96]	; (8004eb0 <HAL_InitTick+0xd4>)
 8004e50:	f020 f89c 	bl	8024f8c <HAL_TIM_Base_Init>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8004e5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d118      	bne.n	8004e94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8004e62:	4813      	ldr	r0, [pc, #76]	; (8004eb0 <HAL_InitTick+0xd4>)
 8004e64:	f020 f8f4 	bl	8025050 <HAL_TIM_Base_Start_IT>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8004e6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10e      	bne.n	8004e94 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b0f      	cmp	r3, #15
 8004e7a:	d808      	bhi.n	8004e8e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	2047      	movs	r0, #71	; 0x47
 8004e82:	f01d fbe3 	bl	802264c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e86:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <HAL_InitTick+0xdc>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	e002      	b.n	8004e94 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004e94:	2047      	movs	r0, #71	; 0x47
 8004e96:	f01d fbf3 	bl	8022680 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8004e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3738      	adds	r7, #56	; 0x38
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	46020c00 	.word	0x46020c00
 8004eac:	431bde83 	.word	0x431bde83
 8004eb0:	20001324 	.word	0x20001324
 8004eb4:	40014800 	.word	0x40014800
 8004eb8:	20000564 	.word	0x20000564

08004ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ec0:	e7fe      	b.n	8004ec0 <NMI_Handler+0x4>

08004ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ec6:	e7fe      	b.n	8004ec6 <HardFault_Handler+0x4>

08004ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ecc:	e7fe      	b.n	8004ecc <MemManage_Handler+0x4>

08004ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ed2:	e7fe      	b.n	8004ed2 <BusFault_Handler+0x4>

08004ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ed8:	e7fe      	b.n	8004ed8 <UsageFault_Handler+0x4>

08004eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  cycle_count = DWT->CYCCNT;
 8004f08:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <SysTick_Handler+0x18>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <SysTick_Handler+0x1c>)
 8004f0e:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f10:	f01d faa0 	bl	8022454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Driver_IncTick();
 8004f14:	f7fe f8d8 	bl	80030c8 <Driver_IncTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	e0001000 	.word	0xe0001000
 8004f20:	20001370 	.word	0x20001370

08004f24 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004f28:	4802      	ldr	r0, [pc, #8]	; (8004f34 <TIM17_IRQHandler+0x10>)
 8004f2a:	f020 f931 	bl	8025190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20001324 	.word	0x20001324

08004f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return 1;
 8004f3c:	2301      	movs	r3, #1
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <_kill>:

int _kill(int pid, int sig)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f52:	f021 f89d 	bl	8026090 <__errno>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2216      	movs	r2, #22
 8004f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <_exit>:

void _exit (int status)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f70:	f04f 31ff 	mov.w	r1, #4294967295
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff ffe7 	bl	8004f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f7a:	e7fe      	b.n	8004f7a <_exit+0x12>

08004f7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e00a      	b.n	8004fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f8e:	f3af 8000 	nop.w
 8004f92:	4601      	mov	r1, r0
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	60ba      	str	r2, [r7, #8]
 8004f9a:	b2ca      	uxtb	r2, r1
 8004f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	dbf0      	blt.n	8004f8e <_read+0x12>
  }

  return len;
 8004fac:	687b      	ldr	r3, [r7, #4]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e009      	b.n	8004fdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	60ba      	str	r2, [r7, #8]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	dbf1      	blt.n	8004fc8 <_write+0x12>
  }
  return len;
 8004fe4:	687b      	ldr	r3, [r7, #4]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <_close>:

int _close(int file)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005016:	605a      	str	r2, [r3, #4]
  return 0;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <_isatty>:

int _isatty(int file)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800502e:	2301      	movs	r3, #1
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005060:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <_sbrk+0x5c>)
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <_sbrk+0x60>)
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800506c:	4b13      	ldr	r3, [pc, #76]	; (80050bc <_sbrk+0x64>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <_sbrk+0x64>)
 8005076:	4a12      	ldr	r2, [pc, #72]	; (80050c0 <_sbrk+0x68>)
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <_sbrk+0x64>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	429a      	cmp	r2, r3
 8005086:	d207      	bcs.n	8005098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005088:	f021 f802 	bl	8026090 <__errno>
 800508c:	4603      	mov	r3, r0
 800508e:	220c      	movs	r2, #12
 8005090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005092:	f04f 33ff 	mov.w	r3, #4294967295
 8005096:	e009      	b.n	80050ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005098:	4b08      	ldr	r3, [pc, #32]	; (80050bc <_sbrk+0x64>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <_sbrk+0x64>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	4a05      	ldr	r2, [pc, #20]	; (80050bc <_sbrk+0x64>)
 80050a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050aa:	68fb      	ldr	r3, [r7, #12]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200c0000 	.word	0x200c0000
 80050b8:	00000400 	.word	0x00000400
 80050bc:	20001374 	.word	0x20001374
 80050c0:	20002b60 	.word	0x20002b60

080050c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <SystemInit+0x68>)
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <SystemInit+0x68>)
 80050d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80050d8:	4b15      	ldr	r3, [pc, #84]	; (8005130 <SystemInit+0x6c>)
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80050de:	4b14      	ldr	r3, [pc, #80]	; (8005130 <SystemInit+0x6c>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80050e4:	4b12      	ldr	r3, [pc, #72]	; (8005130 <SystemInit+0x6c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80050ea:	4b11      	ldr	r3, [pc, #68]	; (8005130 <SystemInit+0x6c>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80050f0:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <SystemInit+0x6c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a0e      	ldr	r2, [pc, #56]	; (8005130 <SystemInit+0x6c>)
 80050f6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80050fa:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80050fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <SystemInit+0x6c>)
 8005102:	2200      	movs	r2, #0
 8005104:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <SystemInit+0x6c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a09      	ldr	r2, [pc, #36]	; (8005130 <SystemInit+0x6c>)
 800510c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005110:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8005112:	4b07      	ldr	r3, [pc, #28]	; (8005130 <SystemInit+0x6c>)
 8005114:	2200      	movs	r2, #0
 8005116:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <SystemInit+0x68>)
 800511a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800511e:	609a      	str	r2, [r3, #8]
  #endif
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000ed00 	.word	0xe000ed00
 8005130:	46020c00 	.word	0x46020c00

08005134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8005134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800516c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005138:	f7ff ffc4 	bl	80050c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800513c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800513e:	e003      	b.n	8005148 <LoopCopyDataInit>

08005140 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005142:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005144:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005146:	3104      	adds	r1, #4

08005148 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005148:	480a      	ldr	r0, [pc, #40]	; (8005174 <LoopForever+0xa>)
	ldr	r3, =_edata
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <LoopForever+0xe>)
	adds	r2, r0, r1
 800514c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800514e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005150:	d3f6      	bcc.n	8005140 <CopyDataInit>
	ldr	r2, =_sbss
 8005152:	4a0a      	ldr	r2, [pc, #40]	; (800517c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005154:	e002      	b.n	800515c <LoopFillZerobss>

08005156 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005156:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005158:	f842 3b04 	str.w	r3, [r2], #4

0800515c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <LoopForever+0x16>)
	cmp	r2, r3
 800515e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005160:	d3f9      	bcc.n	8005156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005162:	f020 ff9b 	bl	802609c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005166:	f7fe feb1 	bl	8003ecc <main>

0800516a <LoopForever>:

LoopForever:
    b LoopForever
 800516a:	e7fe      	b.n	800516a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800516c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8005170:	08035190 	.word	0x08035190
	ldr	r0, =_sdata
 8005174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005178:	200005c8 	.word	0x200005c8
	ldr	r2, =_sbss
 800517c:	200005c8 	.word	0x200005c8
	ldr	r3, = _ebss
 8005180:	20002b5c 	.word	0x20002b5c

08005184 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005184:	e7fe      	b.n	8005184 <ADC1_IRQHandler>
	...

08005188 <alarms_get_details>:
    alarms->next = details;
    alarms = details;
}

alarm_details_t *alarms_get_details (void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
    return &details;
 800518c:	4b02      	ldr	r3, [pc, #8]	; (8005198 <alarms_get_details+0x10>)
}
 800518e:	4618      	mov	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	20000384 	.word	0x20000384

0800519c <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant,
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state (coolant_state_t mode)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	7138      	strb	r0, [r7, #4]
    if (!ABORTED) { // Block during abort.
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <coolant_set_state+0x3c>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f083 0301 	eor.w	r3, r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <coolant_set_state+0x32>
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <coolant_set_state+0x3c>)
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	f083 0301 	eor.w	r3, r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d006      	beq.n	80051ce <coolant_set_state+0x32>
        hal.coolant.set_state(mode);
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <coolant_set_state+0x40>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c4:	7938      	ldrb	r0, [r7, #4]
 80051c6:	4798      	blx	r3
        system_add_rt_report(Report_Coolant); // Set to report change immediately
 80051c8:	2020      	movs	r0, #32
 80051ca:	f01c f9fd 	bl	80215c8 <system_add_rt_report>
    }
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20001520 	.word	0x20001520
 80051dc:	200016a0 	.word	0x200016a0

080051e0 <coolant_sync>:

// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails
// if an abort or check-mode is active.
bool coolant_sync (coolant_state_t mode)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	7138      	strb	r0, [r7, #4]
    bool ok = true;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
    if (state_get() != STATE_CHECK_MODE) {
 80051ec:	f017 fd98 	bl	801cd20 <state_get>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d009      	beq.n	800520a <coolant_sync+0x2a>
        if((ok = protocol_buffer_synchronize())) // Ensure coolant changes state when specified in program.
 80051f6:	f00d fac5 	bl	8012784 <protocol_buffer_synchronize>
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <coolant_sync+0x2a>
            coolant_set_state(mode);
 8005204:	7938      	ldrb	r0, [r7, #4]
 8005206:	f7ff ffc9 	bl	800519c <coolant_set_state>
    }

    return ok;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <xbar_fn_to_axismask>:
#include "hal.h"

static limit_signals_t home_source = {0};

axes_signals_t xbar_fn_to_axismask (pin_function_t fn)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
    axes_signals_t mask = {0};
 800521e:	2300      	movs	r3, #0
 8005220:	733b      	strb	r3, [r7, #12]

    switch(fn) {
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	2b17      	cmp	r3, #23
 8005226:	dc19      	bgt.n	800525c <xbar_fn_to_axismask+0x48>
 8005228:	2b14      	cmp	r3, #20
 800522a:	da12      	bge.n	8005252 <xbar_fn_to_axismask+0x3e>
 800522c:	2b0f      	cmp	r3, #15
 800522e:	dc02      	bgt.n	8005236 <xbar_fn_to_axismask+0x22>
 8005230:	2b0c      	cmp	r3, #12
 8005232:	da04      	bge.n	800523e <xbar_fn_to_axismask+0x2a>
            mask.v = On;
            break;
#endif

        default:
            break;
 8005234:	e012      	b.n	800525c <xbar_fn_to_axismask+0x48>
 8005236:	3b10      	subs	r3, #16
    switch(fn) {
 8005238:	2b03      	cmp	r3, #3
 800523a:	d80f      	bhi.n	800525c <xbar_fn_to_axismask+0x48>
 800523c:	e004      	b.n	8005248 <xbar_fn_to_axismask+0x34>
            mask.x = On;
 800523e:	7b3b      	ldrb	r3, [r7, #12]
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	733b      	strb	r3, [r7, #12]
            break;
 8005246:	e00a      	b.n	800525e <xbar_fn_to_axismask+0x4a>
            mask.y = On;
 8005248:	7b3b      	ldrb	r3, [r7, #12]
 800524a:	f043 0302 	orr.w	r3, r3, #2
 800524e:	733b      	strb	r3, [r7, #12]
            break;
 8005250:	e005      	b.n	800525e <xbar_fn_to_axismask+0x4a>
            mask.z = On;
 8005252:	7b3b      	ldrb	r3, [r7, #12]
 8005254:	f043 0304 	orr.w	r3, r3, #4
 8005258:	733b      	strb	r3, [r7, #12]
            break;
 800525a:	e000      	b.n	800525e <xbar_fn_to_axismask+0x4a>
            break;
 800525c:	bf00      	nop
    }

    return mask;
 800525e:	7b3b      	ldrb	r3, [r7, #12]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <xbar_set_homing_source>:

// Sets limit signals used by homing when home signals are not available.
// For internal use, called by settings.c when homing direction mask is changed.
void xbar_set_homing_source (void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
    if(hal.home_cap.a.mask == 0) {
 8005270:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <xbar_set_homing_source+0x78>)
 8005272:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d12f      	bne.n	80052da <xbar_set_homing_source+0x6e>
        home_source.max.mask = hal.limits_cap.max.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 800527a:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <xbar_set_homing_source+0x78>)
 800527c:	f893 21af 	ldrb.w	r2, [r3, #431]	; 0x1af
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <xbar_set_homing_source+0x7c>)
 8005282:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8005286:	43db      	mvns	r3, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	4013      	ands	r3, r2
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	b2da      	uxtb	r2, r3
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <xbar_set_homing_source+0x80>)
 8005296:	705a      	strb	r2, [r3, #1]
        home_source.min.mask = (~home_source.max.mask) & AXES_BITMASK;
 8005298:	4b14      	ldr	r3, [pc, #80]	; (80052ec <xbar_set_homing_source+0x80>)
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	43db      	mvns	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <xbar_set_homing_source+0x80>)
 80052a8:	701a      	strb	r2, [r3, #0]
        home_source.max2.mask = hal.limits_cap.max2.mask & ((~settings.homing.dir_mask.mask) & AXES_BITMASK);
 80052aa:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <xbar_set_homing_source+0x78>)
 80052ac:	f893 21b1 	ldrb.w	r2, [r3, #433]	; 0x1b1
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <xbar_set_homing_source+0x7c>)
 80052b2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80052b6:	43db      	mvns	r3, r3
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	4013      	ands	r3, r2
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <xbar_set_homing_source+0x80>)
 80052c6:	70da      	strb	r2, [r3, #3]
        home_source.min2.mask = (~home_source.max2.mask) & AXES_BITMASK;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <xbar_set_homing_source+0x80>)
 80052ca:	78db      	ldrb	r3, [r3, #3]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <xbar_set_homing_source+0x80>)
 80052d8:	709a      	strb	r2, [r3, #2]
    }
}
 80052da:	bf00      	nop
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	200016a0 	.word	0x200016a0
 80052e8:	20001cf0 	.word	0x20001cf0
 80052ec:	20001378 	.word	0x20001378

080052f0 <xbar_get_homing_source>:

// Returns limit signals used by homing when home signals are not available.
limit_signals_t xbar_get_homing_source (void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
    return home_source;
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <xbar_get_homing_source+0x34>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	2300      	movs	r3, #0
 80052fe:	793a      	ldrb	r2, [r7, #4]
 8005300:	f362 0307 	bfi	r3, r2, #0, #8
 8005304:	797a      	ldrb	r2, [r7, #5]
 8005306:	f362 230f 	bfi	r3, r2, #8, #8
 800530a:	79ba      	ldrb	r2, [r7, #6]
 800530c:	f362 4317 	bfi	r3, r2, #16, #8
 8005310:	79fa      	ldrb	r2, [r7, #7]
 8005312:	f362 631f 	bfi	r3, r2, #24, #8
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20001378 	.word	0x20001378

08005328 <xbar_get_homing_source_from_cycle>:

// Returns limit signals used by homing cycle when home signals are not available.
limit_signals_t xbar_get_homing_source_from_cycle (axes_signals_t homing_cycle)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	7138      	strb	r0, [r7, #4]
    limit_signals_t source = home_source;
 8005330:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <xbar_get_homing_source_from_cycle+0x80>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60bb      	str	r3, [r7, #8]

    if(hal.home_cap.a.mask == 0) {
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <xbar_get_homing_source_from_cycle+0x84>)
 8005338:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11d      	bne.n	800537c <xbar_get_homing_source_from_cycle+0x54>
        source.min.mask &= homing_cycle.mask;
 8005340:	7a3a      	ldrb	r2, [r7, #8]
 8005342:	793b      	ldrb	r3, [r7, #4]
 8005344:	4013      	ands	r3, r2
 8005346:	b2db      	uxtb	r3, r3
 8005348:	723b      	strb	r3, [r7, #8]
        source.min2.mask &= homing_cycle.mask;
 800534a:	7aba      	ldrb	r2, [r7, #10]
 800534c:	793b      	ldrb	r3, [r7, #4]
 800534e:	4013      	ands	r3, r2
 8005350:	b2db      	uxtb	r3, r3
 8005352:	72bb      	strb	r3, [r7, #10]
        source.min.mask |= source.min2.mask;
 8005354:	7a3a      	ldrb	r2, [r7, #8]
 8005356:	7abb      	ldrb	r3, [r7, #10]
 8005358:	4313      	orrs	r3, r2
 800535a:	b2db      	uxtb	r3, r3
 800535c:	723b      	strb	r3, [r7, #8]
        source.max.mask &= homing_cycle.mask;
 800535e:	7a7a      	ldrb	r2, [r7, #9]
 8005360:	793b      	ldrb	r3, [r7, #4]
 8005362:	4013      	ands	r3, r2
 8005364:	b2db      	uxtb	r3, r3
 8005366:	727b      	strb	r3, [r7, #9]
        source.max2.mask &= homing_cycle.mask;
 8005368:	7afa      	ldrb	r2, [r7, #11]
 800536a:	793b      	ldrb	r3, [r7, #4]
 800536c:	4013      	ands	r3, r2
 800536e:	b2db      	uxtb	r3, r3
 8005370:	72fb      	strb	r3, [r7, #11]
        source.max.mask |= source.max2.mask;
 8005372:	7a7a      	ldrb	r2, [r7, #9]
 8005374:	7afb      	ldrb	r3, [r7, #11]
 8005376:	4313      	orrs	r3, r2
 8005378:	b2db      	uxtb	r3, r3
 800537a:	727b      	strb	r3, [r7, #9]
    }

    return source;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	2300      	movs	r3, #0
 8005382:	7b3a      	ldrb	r2, [r7, #12]
 8005384:	f362 0307 	bfi	r3, r2, #0, #8
 8005388:	7b7a      	ldrb	r2, [r7, #13]
 800538a:	f362 230f 	bfi	r3, r2, #8, #8
 800538e:	7bba      	ldrb	r2, [r7, #14]
 8005390:	f362 4317 	bfi	r3, r2, #16, #8
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	f362 631f 	bfi	r3, r2, #24, #8
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20001378 	.word	0x20001378
 80053ac:	200016a0 	.word	0x200016a0

080053b0 <errors_get_details>:
    errors->next = details;
    errors = details;
}

error_details_t *errors_get_details (void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
    return &details;
 80053b4:	4b02      	ldr	r3, [pc, #8]	; (80053c0 <errors_get_details+0x10>)
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	20000390 	.word	0x20000390

080053c4 <hypot_f>:
#endif
};

// Simple hypotenuse computation function.
inline static float hypot_f (float x, float y)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80053ce:	edc7 0a00 	vstr	s1, [r7]
    return sqrtf(x * x + y * y);
 80053d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80053d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80053da:	edd7 7a00 	vldr	s15, [r7]
 80053de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80053e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ea:	f021 fc61 	bl	8026cb0 <sqrtf>
 80053ee:	eef0 7a40 	vmov.f32	s15, s0
}
 80053f2:	eeb0 0a67 	vmov.f32	s0, s15
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <motion_is_lasercut>:

inline static bool motion_is_lasercut (motion_mode_t motion)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	80fb      	strh	r3, [r7, #6]
    return motion == MotionMode_Linear || motion == MotionMode_CwArc || motion == MotionMode_CcwArc || motion == MotionMode_CubicSpline || motion == MotionMode_QuadraticSpline;
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d00b      	beq.n	8005424 <motion_is_lasercut+0x28>
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d008      	beq.n	8005424 <motion_is_lasercut+0x28>
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d005      	beq.n	8005424 <motion_is_lasercut+0x28>
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	2b05      	cmp	r3, #5
 800541c:	d002      	beq.n	8005424 <motion_is_lasercut+0x28>
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	2b33      	cmp	r3, #51	; 0x33
 8005422:	d101      	bne.n	8005428 <motion_is_lasercut+0x2c>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <motion_is_lasercut+0x2e>
 8005428:	2300      	movs	r3, #0
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	b2db      	uxtb	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <set_scaling>:
{
    return &gc_state;
}

static void set_scaling (float factor)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	ed87 0a01 	vstr	s0, [r7, #4]
    uint_fast8_t idx = N_AXIS;
 8005446:	2303      	movs	r3, #3
 8005448:	60fb      	str	r3, [r7, #12]
    axes_signals_t state = gc_get_g51_state();
 800544a:	f000 f841 	bl	80054d0 <gc_get_g51_state>
 800544e:	4603      	mov	r3, r0
 8005450:	723b      	strb	r3, [r7, #8]

    do {
        scale_factor.ijk[--idx] = factor;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b01      	subs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	4a16      	ldr	r2, [pc, #88]	; (80054b4 <set_scaling+0x78>)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3302      	adds	r3, #2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	3304      	adds	r3, #4
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
#ifdef MACH3_SCALING
        scale_factor.xyz[idx] = 0.0f;
 8005468:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <set_scaling+0x78>)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
#endif
    } while(idx);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1ea      	bne.n	8005452 <set_scaling+0x16>

    gc_state.modal.scaling_active = factor != 1.0f;
 800547c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005484:	eef4 7a47 	vcmp.f32	s15, s14
 8005488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548c:	bf14      	ite	ne
 800548e:	2301      	movne	r3, #1
 8005490:	2300      	moveq	r3, #0
 8005492:	b2da      	uxtb	r2, r3
 8005494:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <set_scaling+0x7c>)
 8005496:	779a      	strb	r2, [r3, #30]

    if(state.value != gc_get_g51_state().value)
 8005498:	7a3c      	ldrb	r4, [r7, #8]
 800549a:	f000 f819 	bl	80054d0 <gc_get_g51_state>
 800549e:	4603      	mov	r3, r0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	429c      	cmp	r4, r3
 80054a4:	d002      	beq.n	80054ac <set_scaling+0x70>
        system_add_rt_report(Report_Scaling);
 80054a6:	2002      	movs	r0, #2
 80054a8:	f01c f88e 	bl	80215c8 <system_add_rt_report>
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd90      	pop	{r4, r7, pc}
 80054b4:	2000039c 	.word	0x2000039c
 80054b8:	2000137c 	.word	0x2000137c

080054bc <gc_get_scaling>:

float *gc_get_scaling (void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
    return scale_factor.ijk;
 80054c0:	4b02      	ldr	r3, [pc, #8]	; (80054cc <gc_get_scaling+0x10>)
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	200003a8 	.word	0x200003a8

080054d0 <gc_get_g51_state>:

axes_signals_t gc_get_g51_state (void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
    uint_fast8_t idx = N_AXIS;
 80054d6:	2303      	movs	r3, #3
 80054d8:	607b      	str	r3, [r7, #4]
    axes_signals_t scaled = {0};
 80054da:	2300      	movs	r3, #0
 80054dc:	703b      	strb	r3, [r7, #0]

    do {
        scaled.value <<= 1;
 80054de:	783b      	ldrb	r3, [r7, #0]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	703b      	strb	r3, [r7, #0]
        if(scale_factor.ijk[--idx] != 1.0f)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	607b      	str	r3, [r7, #4]
 80054ec:	4a0e      	ldr	r2, [pc, #56]	; (8005528 <gc_get_g51_state+0x58>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3302      	adds	r3, #2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	3304      	adds	r3, #4
 80054f8:	edd3 7a00 	vldr	s15, [r3]
 80054fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005500:	eef4 7a47 	vcmp.f32	s15, s14
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	d004      	beq.n	8005514 <gc_get_g51_state+0x44>
            scaled.value |= 0x01;
 800550a:	783b      	ldrb	r3, [r7, #0]
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	703b      	strb	r3, [r7, #0]

    } while(idx);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e1      	bne.n	80054de <gc_get_g51_state+0xe>

    return scaled;
 800551a:	783b      	ldrb	r3, [r7, #0]
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	2000039c 	.word	0x2000039c

0800552c <gc_get_offset>:

float gc_get_offset (uint_fast8_t idx)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
    return gc_state.modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 8005534:	4a10      	ldr	r2, [pc, #64]	; (8005578 <gc_get_offset+0x4c>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3302      	adds	r3, #2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	ed93 7a00 	vldr	s14, [r3]
 8005542:	4a0d      	ldr	r2, [pc, #52]	; (8005578 <gc_get_offset+0x4c>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	331e      	adds	r3, #30
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	3304      	adds	r3, #4
 800554e:	edd3 7a00 	vldr	s15, [r3]
 8005552:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005556:	4a08      	ldr	r2, [pc, #32]	; (8005578 <gc_get_offset+0x4c>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3322      	adds	r3, #34	; 0x22
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	edd3 7a00 	vldr	s15, [r3]
 8005564:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005568:	eeb0 0a67 	vmov.f32	s0, s15
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	2000137c 	.word	0x2000137c

0800557c <gc_get_block_offset>:

inline static float gc_get_block_offset (parser_block_t *gc_block, uint_fast8_t idx)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
    return gc_block->modal.coord_system.xyz[idx] + gc_state.g92_coord_offset[idx] + gc_state.tool_length_offset[idx];
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	3304      	adds	r3, #4
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	ed93 7a00 	vldr	s14, [r3]
 8005594:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <gc_get_block_offset+0x4c>)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	331e      	adds	r3, #30
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	3304      	adds	r3, #4
 80055a0:	edd3 7a00 	vldr	s15, [r3]
 80055a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a8:	4a07      	ldr	r2, [pc, #28]	; (80055c8 <gc_get_block_offset+0x4c>)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	3322      	adds	r3, #34	; 0x22
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80055ba:	eeb0 0a67 	vmov.f32	s0, s15
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	2000137c 	.word	0x2000137c

080055cc <gc_set_tool_offset>:

void gc_set_tool_offset (tool_offset_mode_t mode, uint_fast8_t idx, int32_t offset)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	73fb      	strb	r3, [r7, #15]
    bool tlo_changed = false;
 80055da:	2300      	movs	r3, #0
 80055dc:	75fb      	strb	r3, [r7, #23]

    switch(mode) {
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <gc_set_tool_offset+0x1e>
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d030      	beq.n	800564a <gc_set_tool_offset+0x7e>
#endif
            }
            break;

        default:
            break;
 80055e8:	e06a      	b.n	80056c0 <gc_set_tool_offset+0xf4>
            idx = N_AXIS;
 80055ea:	2303      	movs	r3, #3
 80055ec:	60bb      	str	r3, [r7, #8]
                idx--;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	60bb      	str	r3, [r7, #8]
                tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	493a      	ldr	r1, [pc, #232]	; (80056e0 <gc_set_tool_offset+0x114>)
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	3222      	adds	r2, #34	; 0x22
 80055fc:	0092      	lsls	r2, r2, #2
 80055fe:	440a      	add	r2, r1
 8005600:	edd2 7a00 	vldr	s15, [r2]
 8005604:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560c:	bf14      	ite	ne
 800560e:	2201      	movne	r2, #1
 8005610:	2200      	moveq	r2, #0
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	4313      	orrs	r3, r2
 8005616:	2b00      	cmp	r3, #0
 8005618:	bf14      	ite	ne
 800561a:	2301      	movne	r3, #1
 800561c:	2300      	moveq	r3, #0
 800561e:	75fb      	strb	r3, [r7, #23]
                gc_state.tool_length_offset[idx] = 0.0f;
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <gc_set_tool_offset+0x114>)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3322      	adds	r3, #34	; 0x22
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
                gc_state.tool->offset[idx] = 0.0f;
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <gc_set_tool_offset+0x114>)
 8005632:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
            } while(idx);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1d2      	bne.n	80055ee <gc_set_tool_offset+0x22>
            break;
 8005648:	e03a      	b.n	80056c0 <gc_set_tool_offset+0xf4>
                float new_offset = offset / settings.axis[idx].steps_per_mm;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005654:	4923      	ldr	r1, [pc, #140]	; (80056e4 <gc_set_tool_offset+0x118>)
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	3330      	adds	r3, #48	; 0x30
 8005664:	ed93 7a00 	vldr	s14, [r3]
 8005668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566c:	edc7 7a04 	vstr	s15, [r7, #16]
                tlo_changed |= gc_state.tool_length_offset[idx] != new_offset;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	491b      	ldr	r1, [pc, #108]	; (80056e0 <gc_set_tool_offset+0x114>)
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	3222      	adds	r2, #34	; 0x22
 8005678:	0092      	lsls	r2, r2, #2
 800567a:	440a      	add	r2, r1
 800567c:	edd2 7a00 	vldr	s15, [r2]
 8005680:	ed97 7a04 	vldr	s14, [r7, #16]
 8005684:	eeb4 7a67 	vcmp.f32	s14, s15
 8005688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568c:	bf14      	ite	ne
 800568e:	2201      	movne	r2, #1
 8005690:	2200      	moveq	r2, #0
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	4313      	orrs	r3, r2
 8005696:	2b00      	cmp	r3, #0
 8005698:	bf14      	ite	ne
 800569a:	2301      	movne	r3, #1
 800569c:	2300      	moveq	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
                gc_state.tool_length_offset[idx] = new_offset;
 80056a0:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <gc_set_tool_offset+0x114>)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3322      	adds	r3, #34	; 0x22
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	601a      	str	r2, [r3, #0]
                gc_state.tool->offset[idx] = new_offset;
 80056ae:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <gc_set_tool_offset+0x114>)
 80056b0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	601a      	str	r2, [r3, #0]
            break;
 80056be:	bf00      	nop
    }

    gc_state.modal.tool_offset_mode = mode;
 80056c0:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <gc_set_tool_offset+0x114>)
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	71d3      	strb	r3, [r2, #7]

    if(tlo_changed) {
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <gc_set_tool_offset+0x10c>
        system_add_rt_report(Report_ToolOffset);
 80056cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80056d0:	f01b ff7a 	bl	80215c8 <system_add_rt_report>
        system_flag_wco_change();
 80056d4:	f01b fe72 	bl	80213bc <system_flag_wco_change>
    }
}
 80056d8:	bf00      	nop
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	2000137c 	.word	0x2000137c
 80056e4:	20001cf0 	.word	0x20001cf0

080056e8 <gc_get_plane_data>:

plane_t *gc_get_plane_data (plane_t *plane, plane_select_t select)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
    switch (select) {
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <gc_get_plane_data+0x18>
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d00a      	beq.n	8005714 <gc_get_plane_data+0x2c>
 80056fe:	e013      	b.n	8005728 <gc_get_plane_data+0x40>

        case PlaneSelect_XY:
            plane->axis_0 = X_AXIS;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
            plane->axis_1 = Y_AXIS;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	705a      	strb	r2, [r3, #1]
            plane->axis_linear = Z_AXIS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	709a      	strb	r2, [r3, #2]
            break;
 8005712:	e012      	b.n	800573a <gc_get_plane_data+0x52>

        case PlaneSelect_ZX:
            plane->axis_0 = Z_AXIS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	701a      	strb	r2, [r3, #0]
            plane->axis_1 = X_AXIS;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	705a      	strb	r2, [r3, #1]
            plane->axis_linear = Y_AXIS;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	709a      	strb	r2, [r3, #2]
            break;
 8005726:	e008      	b.n	800573a <gc_get_plane_data+0x52>

        default: // case PlaneSelect_YZ:
            plane->axis_0 = Y_AXIS;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
            plane->axis_1 = Z_AXIS;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	705a      	strb	r2, [r3, #1]
            plane->axis_linear = X_AXIS;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	709a      	strb	r2, [r3, #2]
    }

    return plane;
 800573a:	687b      	ldr	r3, [r7, #4]
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <gc_init>:

void gc_init (void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
  #else
    memset(&tool_table, 0, sizeof(tool_table));
    gc_state.tool = &tool_table;
  #endif
#else
    if(sys.cold_start) {
 800574e:	4b58      	ldr	r3, [pc, #352]	; (80058b0 <gc_init+0x168>)
 8005750:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <gc_init+0x2e>
        memset(&gc_state, 0, sizeof(parser_state_t));
 8005758:	2298      	movs	r2, #152	; 0x98
 800575a:	2100      	movs	r1, #0
 800575c:	4855      	ldr	r0, [pc, #340]	; (80058b4 <gc_init+0x16c>)
 800575e:	f020 fb6e 	bl	8025e3e <memset>
      #if N_TOOLS
        gc_state.tool = &tool_table[0];
      #else
        memset(&tool_table, 0, sizeof(tool_table));
 8005762:	2214      	movs	r2, #20
 8005764:	2100      	movs	r1, #0
 8005766:	4854      	ldr	r0, [pc, #336]	; (80058b8 <gc_init+0x170>)
 8005768:	f020 fb69 	bl	8025e3e <memset>
        gc_state.tool = &tool_table;
 800576c:	4b51      	ldr	r3, [pc, #324]	; (80058b4 <gc_init+0x16c>)
 800576e:	4a52      	ldr	r2, [pc, #328]	; (80058b8 <gc_init+0x170>)
 8005770:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005774:	e025      	b.n	80057c2 <gc_init+0x7a>
      #endif
    } else {
        memset(&gc_state, 0, offsetof(parser_state_t, g92_coord_offset));
 8005776:	227c      	movs	r2, #124	; 0x7c
 8005778:	2100      	movs	r1, #0
 800577a:	484e      	ldr	r0, [pc, #312]	; (80058b4 <gc_init+0x16c>)
 800577c:	f020 fb5f 	bl	8025e3e <memset>
        gc_state.tool_pending = gc_state.tool->tool_id;
 8005780:	4b4c      	ldr	r3, [pc, #304]	; (80058b4 <gc_init+0x16c>)
 8005782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	4a4a      	ldr	r2, [pc, #296]	; (80058b4 <gc_init+0x16c>)
 800578a:	6713      	str	r3, [r2, #112]	; 0x70
        if(hal.tool.select)
 800578c:	4b4b      	ldr	r3, [pc, #300]	; (80058bc <gc_init+0x174>)
 800578e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005792:	2b00      	cmp	r3, #0
 8005794:	d015      	beq.n	80057c2 <gc_init+0x7a>
            hal.tool.select(gc_state.tool, false);
 8005796:	4b49      	ldr	r3, [pc, #292]	; (80058bc <gc_init+0x174>)
 8005798:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800579c:	4a45      	ldr	r2, [pc, #276]	; (80058b4 <gc_init+0x16c>)
 800579e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80057a2:	2100      	movs	r1, #0
 80057a4:	4610      	mov	r0, r2
 80057a6:	4798      	blx	r3
        // TODO: restore offsets, tool offset mode?
    }
#endif

    // Clear any pending output commands
    while(output_commands) {
 80057a8:	e00b      	b.n	80057c2 <gc_init+0x7a>
        output_command_t *next = output_commands->next;
 80057aa:	4b45      	ldr	r3, [pc, #276]	; (80058c0 <gc_init+0x178>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	61fb      	str	r3, [r7, #28]
        free(output_commands);
 80057b2:	4b43      	ldr	r3, [pc, #268]	; (80058c0 <gc_init+0x178>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f01f ffe6 	bl	8025788 <free>
        output_commands = next;
 80057bc:	4a40      	ldr	r2, [pc, #256]	; (80058c0 <gc_init+0x178>)
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	6013      	str	r3, [r2, #0]
    while(output_commands) {
 80057c2:	4b3f      	ldr	r3, [pc, #252]	; (80058c0 <gc_init+0x178>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1ef      	bne.n	80057aa <gc_init+0x62>
    }

    // Load default override status
    gc_state.modal.override_ctrl = sys.override.control;
 80057ca:	4a3a      	ldr	r2, [pc, #232]	; (80058b4 <gc_init+0x16c>)
 80057cc:	4b38      	ldr	r3, [pc, #224]	; (80058b0 <gc_init+0x168>)
 80057ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80057d2:	7713      	strb	r3, [r2, #28]
    gc_state.spindle.hal = spindle_get(0);
 80057d4:	2000      	movs	r0, #0
 80057d6:	f016 fbff 	bl	801bfd8 <spindle_get>
 80057da:	4603      	mov	r3, r0
 80057dc:	4a35      	ldr	r2, [pc, #212]	; (80058b4 <gc_init+0x16c>)
 80057de:	6553      	str	r3, [r2, #84]	; 0x54

    set_scaling(1.0f);
 80057e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80057e4:	f7ff fe2a 	bl	800543c <set_scaling>

    // Load default G54 coordinate system.
    if (!settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz))
 80057e8:	4b32      	ldr	r3, [pc, #200]	; (80058b4 <gc_init+0x16c>)
 80057ea:	7d1b      	ldrb	r3, [r3, #20]
 80057ec:	4935      	ldr	r1, [pc, #212]	; (80058c4 <gc_init+0x17c>)
 80057ee:	4618      	mov	r0, r3
 80057f0:	f014 fd06 	bl	801a200 <settings_read_coord_data>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f083 0301 	eor.w	r3, r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <gc_init+0xc0>
        grbl.report.status_message(Status_SettingReadFail);
 8005800:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <gc_init+0x180>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2007      	movs	r0, #7
 8005806:	4798      	blx	r3

    if (sys.cold_start && !settings.flags.g92_is_volatile && !settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset))
 8005808:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <gc_init+0x168>)
 800580a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800580e:	2b00      	cmp	r3, #0
 8005810:	d015      	beq.n	800583e <gc_init+0xf6>
 8005812:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <gc_init+0x184>)
 8005814:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10d      	bne.n	800583e <gc_init+0xf6>
 8005822:	492b      	ldr	r1, [pc, #172]	; (80058d0 <gc_init+0x188>)
 8005824:	200b      	movs	r0, #11
 8005826:	f014 fceb 	bl	801a200 <settings_read_coord_data>
 800582a:	4603      	mov	r3, r0
 800582c:	f083 0301 	eor.w	r3, r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <gc_init+0xf6>
        grbl.report.status_message(Status_SettingReadFail);
 8005836:	4b24      	ldr	r3, [pc, #144]	; (80058c8 <gc_init+0x180>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2007      	movs	r0, #7
 800583c:	4798      	blx	r3

    if(grbl.on_wco_changed && (!sys.cold_start ||
 800583e:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <gc_init+0x180>)
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d028      	beq.n	8005898 <gc_init+0x150>
 8005846:	4b1a      	ldr	r3, [pc, #104]	; (80058b0 <gc_init+0x168>)
 8005848:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800584c:	f083 0301 	eor.w	r3, r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d11d      	bne.n	8005892 <gc_init+0x14a>
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 8005856:	f107 0310 	add.w	r3, r7, #16
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	605a      	str	r2, [r3, #4]
 8005860:	609a      	str	r2, [r3, #8]
 8005862:	f107 0310 	add.w	r3, r7, #16
 8005866:	220c      	movs	r2, #12
 8005868:	4619      	mov	r1, r3
 800586a:	4816      	ldr	r0, [pc, #88]	; (80058c4 <gc_init+0x17c>)
 800586c:	f020 fad7 	bl	8025e1e <memcmp>
 8005870:	4603      	mov	r3, r0
    if(grbl.on_wco_changed && (!sys.cold_start ||
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10d      	bne.n	8005892 <gc_init+0x14a>
                                 !is0_position_vector(gc_state.g92_coord_offset)))
 8005876:	1d3b      	adds	r3, r7, #4
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	605a      	str	r2, [r3, #4]
 800587e:	609a      	str	r2, [r3, #8]
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	220c      	movs	r2, #12
 8005884:	4619      	mov	r1, r3
 8005886:	4812      	ldr	r0, [pc, #72]	; (80058d0 <gc_init+0x188>)
 8005888:	f020 fac9 	bl	8025e1e <memcmp>
 800588c:	4603      	mov	r3, r0
                                !is0_position_vector(gc_state.modal.coord_system.xyz) ||
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <gc_init+0x150>
        grbl.on_wco_changed();
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <gc_init+0x180>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	4798      	blx	r3
#endif

//    if(settings.flags.lathe_mode)
//        gc_state.modal.plane_select = PlaneSelect_ZX;

    if(grbl.on_parser_init)
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <gc_init+0x180>)
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <gc_init+0x160>
        grbl.on_parser_init(&gc_state);
 80058a0:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <gc_init+0x180>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	4803      	ldr	r0, [pc, #12]	; (80058b4 <gc_init+0x16c>)
 80058a6:	4798      	blx	r3
}
 80058a8:	bf00      	nop
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20001520 	.word	0x20001520
 80058b4:	2000137c 	.word	0x2000137c
 80058b8:	20001414 	.word	0x20001414
 80058bc:	200016a0 	.word	0x200016a0
 80058c0:	20001458 	.word	0x20001458
 80058c4:	20001384 	.word	0x20001384
 80058c8:	200015b8 	.word	0x200015b8
 80058cc:	20001cf0 	.word	0x20001cf0
 80058d0:	200013f8 	.word	0x200013f8

080058d4 <gc_spindle_off>:

    return grbl.on_laser_ppi_enable && grbl.on_laser_ppi_enable(ppi, pulse_length);
}

void gc_spindle_off (void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
    gc_state.spindle.rpm = 0.0f;
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <gc_spindle_off+0x20>)
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	649a      	str	r2, [r3, #72]	; 0x48
    gc_state.modal.spindle.state.value = 0;
 80058e0:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <gc_spindle_off+0x20>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	769a      	strb	r2, [r3, #26]

    spindle_all_off();
 80058e6:	f016 fe7b 	bl	801c5e0 <spindle_all_off>
    system_add_rt_report(Report_Spindle);
 80058ea:	2010      	movs	r0, #16
 80058ec:	f01b fe6c 	bl	80215c8 <system_add_rt_report>
}
 80058f0:	bf00      	nop
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	2000137c 	.word	0x2000137c

080058f8 <gc_coolant_off>:

void gc_coolant_off (void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
    gc_state.modal.coolant.value = 0;
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <gc_coolant_off+0x20>)
 80058fe:	2200      	movs	r2, #0
 8005900:	765a      	strb	r2, [r3, #25]
    hal.coolant.set_state(gc_state.modal.coolant);
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <gc_coolant_off+0x24>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a04      	ldr	r2, [pc, #16]	; (8005918 <gc_coolant_off+0x20>)
 8005908:	7e50      	ldrb	r0, [r2, #25]
 800590a:	4798      	blx	r3
    system_add_rt_report(Report_Coolant);
 800590c:	2020      	movs	r0, #32
 800590e:	f01b fe5b 	bl	80215c8 <system_add_rt_report>
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	2000137c 	.word	0x2000137c
 800591c:	200016a0 	.word	0x200016a0

08005920 <gc_spindle_get>:

spindle_ptrs_t *gc_spindle_get (void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
    return gc_state.spindle.hal;
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <gc_spindle_get+0x14>)
 8005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005928:	4618      	mov	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000137c 	.word	0x2000137c

08005938 <tool_get_pending>:

static tool_data_t *tool_get_pending (tool_id_t tool_id)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
#if N_TOOLS
    return &tool_table[tool_id];
#else
    static tool_data_t tool_data = {0};

    memcpy(&tool_data, gc_state.tool, sizeof(tool_data_t));
 8005940:	4b07      	ldr	r3, [pc, #28]	; (8005960 <tool_get_pending+0x28>)
 8005942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005946:	2214      	movs	r2, #20
 8005948:	4619      	mov	r1, r3
 800594a:	4806      	ldr	r0, [pc, #24]	; (8005964 <tool_get_pending+0x2c>)
 800594c:	f020 fbd4 	bl	80260f8 <memcpy>
    tool_data.tool_id = tool_id;
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <tool_get_pending+0x2c>)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6113      	str	r3, [r2, #16]

    return &tool_data;
 8005956:	4b03      	ldr	r3, [pc, #12]	; (8005964 <tool_get_pending+0x2c>)
#endif
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	2000137c 	.word	0x2000137c
 8005964:	2000145c 	.word	0x2000145c

08005968 <tool_set>:

static inline void tool_set (tool_data_t *tool)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
#if N_TOOLS
    gc_state.tool = tool;
#else
    gc_state.tool->tool_id = tool->tool_id;
 8005970:	4b05      	ldr	r3, [pc, #20]	; (8005988 <tool_set+0x20>)
 8005972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6912      	ldr	r2, [r2, #16]
 800597a:	611a      	str	r2, [r3, #16]
#endif
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	2000137c 	.word	0x2000137c

0800598c <add_output_command>:

// Add output command to linked list
static bool add_output_command (output_command_t *command)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
    output_command_t *add_cmd;

    if((add_cmd = malloc(sizeof(output_command_t)))) {
 8005994:	200c      	movs	r0, #12
 8005996:	f01f feef 	bl	8025778 <malloc>
 800599a:	4603      	mov	r3, r0
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01a      	beq.n	80059da <add_output_command+0x4e>

        memcpy(add_cmd, command, sizeof(output_command_t));
 80059a4:	220c      	movs	r2, #12
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	68b8      	ldr	r0, [r7, #8]
 80059aa:	f020 fba5 	bl	80260f8 <memcpy>

        if(output_commands == NULL)
 80059ae:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <add_output_command+0x64>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <add_output_command+0x32>
            output_commands = add_cmd;
 80059b6:	4a0e      	ldr	r2, [pc, #56]	; (80059f0 <add_output_command+0x64>)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e00d      	b.n	80059da <add_output_command+0x4e>
        else {
            output_command_t *cmd = output_commands;
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <add_output_command+0x64>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
            while(cmd->next)
 80059c4:	e002      	b.n	80059cc <add_output_command+0x40>
                cmd = cmd->next;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	60fb      	str	r3, [r7, #12]
            while(cmd->next)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f8      	bne.n	80059c6 <add_output_command+0x3a>
            cmd->next = add_cmd;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	609a      	str	r2, [r3, #8]
        }
    }

    return add_cmd != NULL;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20001458 	.word	0x20001458

080059f4 <init_sync_motion>:

static status_code_t init_sync_motion (plan_line_data_t *pl_data, float pitch)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	ed2d 8b02 	vpush	{d8}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	ed87 0a00 	vstr	s0, [r7]
    pl_data->condition.inverse_time = Off;
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	7d13      	ldrb	r3, [r2, #20]
 8005a08:	f36f 1345 	bfc	r3, #5, #1
 8005a0c:	7513      	strb	r3, [r2, #20]
    pl_data->feed_rate = gc_state.distance_per_rev = pitch;
 8005a0e:	4a36      	ldr	r2, [pc, #216]	; (8005ae8 <init_sync_motion+0xf4>)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005a14:	4b34      	ldr	r3, [pc, #208]	; (8005ae8 <init_sync_motion+0xf4>)
 8005a16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	601a      	str	r2, [r3, #0]
    pl_data->spindle.css = NULL;                    // Switch off CSS.
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	60da      	str	r2, [r3, #12]
    pl_data->overrides = sys.override.control;      // Use current override flags and
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a31      	ldr	r2, [pc, #196]	; (8005aec <init_sync_motion+0xf8>)
 8005a26:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8005a2a:	761a      	strb	r2, [r3, #24]
    pl_data->overrides.sync = On;                   // set to sync overrides on execution of motion.
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	7e13      	ldrb	r3, [r2, #24]
 8005a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a34:	7613      	strb	r3, [r2, #24]

    // Disable feed rate and spindle overrides for the duration of the cycle.
    pl_data->overrides.spindle_rpm_disable = sys.override.control.spindle_rpm_disable = On;
 8005a36:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <init_sync_motion+0xf8>)
 8005a38:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8005a3c:	f043 0304 	orr.w	r3, r3, #4
 8005a40:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8005a44:	4b29      	ldr	r3, [pc, #164]	; (8005aec <init_sync_motion+0xf8>)
 8005a46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a4e:	b2d9      	uxtb	r1, r3
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	7e13      	ldrb	r3, [r2, #24]
 8005a54:	f361 0382 	bfi	r3, r1, #2, #1
 8005a58:	7613      	strb	r3, [r2, #24]
    pl_data->overrides.feed_rate_disable = sys.override.control.feed_rate_disable = On;
 8005a5a:	4a24      	ldr	r2, [pc, #144]	; (8005aec <init_sync_motion+0xf8>)
 8005a5c:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8005a68:	4b20      	ldr	r3, [pc, #128]	; (8005aec <init_sync_motion+0xf8>)
 8005a6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a72:	b2d9      	uxtb	r1, r3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	7e13      	ldrb	r3, [r2, #24]
 8005a78:	f361 0300 	bfi	r3, r1, #0, #1
 8005a7c:	7613      	strb	r3, [r2, #24]
    pl_data->spindle.hal->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2264      	movs	r2, #100	; 0x64
 8005a86:	60da      	str	r2, [r3, #12]
    // TODO: need for gc_state.distance_per_rev to be reset on modal change?
    float feed_rate = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	ed93 8a00 	vldr	s16, [r3]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	2001      	movs	r0, #1
 8005a96:	4798      	blx	r3
 8005a98:	4603      	mov	r3, r0
 8005a9a:	edd3 7a00 	vldr	s15, [r3]
 8005a9e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005aa2:	edc7 7a03 	vstr	s15, [r7, #12]

    if(feed_rate == 0.0f)
 8005aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab2:	d101      	bne.n	8005ab8 <init_sync_motion+0xc4>
        FAIL(Status_GcodeSpindleNotRunning); // [Spindle not running]
 8005ab4:	2329      	movs	r3, #41	; 0x29
 8005ab6:	e010      	b.n	8005ada <init_sync_motion+0xe6>

    if(feed_rate > settings.axis[Z_AXIS].max_rate * 0.9f)
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <init_sync_motion+0xfc>)
 8005aba:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8005abe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005af4 <init_sync_motion+0x100>
 8005ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ac6:	ed97 7a03 	vldr	s14, [r7, #12]
 8005aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	dd01      	ble.n	8005ad8 <init_sync_motion+0xe4>
        FAIL(Status_GcodeMaxFeedRateExceeded); // [Feed rate too high]
 8005ad4:	232b      	movs	r3, #43	; 0x2b
 8005ad6:	e000      	b.n	8005ada <init_sync_motion+0xe6>

    return Status_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	ecbd 8b02 	vpop	{d8}
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	2000137c 	.word	0x2000137c
 8005aec:	20001520 	.word	0x20001520
 8005af0:	20001cf0 	.word	0x20001cf0
 8005af4:	3f666666 	.word	0x3f666666

08005af8 <output_message>:

// Output and free previously allocated message
static void output_message (char *message)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
    if(grbl.on_gcode_message)
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <output_message+0x3c>)
 8005b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <output_message+0x1c>
        grbl.on_gcode_message(message);
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <output_message+0x3c>)
 8005b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3

    if(*message)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <output_message+0x2c>
        report_message(message, Message_Plain);
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f00e fa28 	bl	8013f74 <report_message>

    free(message);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f01f fe2f 	bl	8025788 <free>
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	200015b8 	.word	0x200015b8

08005b38 <gc_normalize_block>:
// else the block delete character. Remaining characters are converted to upper case.
// If the driver handles message comments then the first is extracted and returned in a dynamically
// allocated memory block, the caller must free this after the message has been processed.

char *gc_normalize_block (char *block, char **message)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
    char c, *s1, *s2, *comment = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]

    // Remove leading whitespace & control characters
    while(*block && *block <= ' ')
 8005b46:	e002      	b.n	8005b4e <gc_normalize_block+0x16>
        block++;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	607b      	str	r3, [r7, #4]
    while(*block && *block <= ' ')
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <gc_normalize_block+0x26>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d9f4      	bls.n	8005b48 <gc_normalize_block+0x10>

    if(*block == ';' || (*block == '/' && sys.flags.block_delete_enabled)) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b3b      	cmp	r3, #59	; 0x3b
 8005b64:	d00a      	beq.n	8005b7c <gc_normalize_block+0x44>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b2f      	cmp	r3, #47	; 0x2f
 8005b6c:	d10b      	bne.n	8005b86 <gc_normalize_block+0x4e>
 8005b6e:	4b67      	ldr	r3, [pc, #412]	; (8005d0c <gc_normalize_block+0x1d4>)
 8005b70:	7d9b      	ldrb	r3, [r3, #22]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <gc_normalize_block+0x4e>
        *block = '\0';
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
        return block;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	e0bd      	b.n	8005d02 <gc_normalize_block+0x1ca>
    }

    if(*block == '/')
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b2f      	cmp	r3, #47	; 0x2f
 8005b8c:	d102      	bne.n	8005b94 <gc_normalize_block+0x5c>
        block++;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3301      	adds	r3, #1
 8005b92:	607b      	str	r3, [r7, #4]

    s1 = s2 = block;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	61fb      	str	r3, [r7, #28]

    while((c = *s1) != '\0') {
 8005b9c:	e0a6      	b.n	8005cec <gc_normalize_block+0x1b4>

        if(c > ' ') switch(c) {
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	f240 808a 	bls.w	8005cba <gc_normalize_block+0x182>
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b3b      	cmp	r3, #59	; 0x3b
 8005baa:	d006      	beq.n	8005bba <gc_normalize_block+0x82>
 8005bac:	2b3b      	cmp	r3, #59	; 0x3b
 8005bae:	dc6d      	bgt.n	8005c8c <gc_normalize_block+0x154>
 8005bb0:	2b28      	cmp	r3, #40	; 0x28
 8005bb2:	d009      	beq.n	8005bc8 <gc_normalize_block+0x90>
 8005bb4:	2b29      	cmp	r3, #41	; 0x29
 8005bb6:	d00a      	beq.n	8005bce <gc_normalize_block+0x96>
 8005bb8:	e068      	b.n	8005c8c <gc_normalize_block+0x154>

            case ';':
                if(!comment) {
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d179      	bne.n	8005cb4 <gc_normalize_block+0x17c>
                    *s1 = '\0';
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
                    continue;
 8005bc6:	e091      	b.n	8005cec <gc_normalize_block+0x1b4>
                }
                break;

            case '(':
                // TODO: generate error if a left parenthesis is found inside a comment...
                comment = s1;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	617b      	str	r3, [r7, #20]
                break;
 8005bcc:	e075      	b.n	8005cba <gc_normalize_block+0x182>

            case ')':
                if(comment && !gc_state.skip_blocks) {
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d058      	beq.n	8005c86 <gc_normalize_block+0x14e>
 8005bd4:	4b4e      	ldr	r3, [pc, #312]	; (8005d10 <gc_normalize_block+0x1d8>)
 8005bd6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005bda:	f083 0301 	eor.w	r3, r3, #1
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d050      	beq.n	8005c86 <gc_normalize_block+0x14e>
                    *s1 = '\0';
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
                    if(!hal.driver_cap.no_gcode_message_handling) {
 8005bea:	4b4a      	ldr	r3, [pc, #296]	; (8005d14 <gc_normalize_block+0x1dc>)
 8005bec:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d133      	bne.n	8005c62 <gc_normalize_block+0x12a>

                        size_t len = s1 - comment - 4;
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	3b04      	subs	r3, #4
 8005c02:	613b      	str	r3, [r7, #16]

                        if(message && *message == NULL && !strncmp(comment, "(MSG,", 5) && (*message = malloc(len))) {
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02b      	beq.n	8005c62 <gc_normalize_block+0x12a>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d127      	bne.n	8005c62 <gc_normalize_block+0x12a>
 8005c12:	2205      	movs	r2, #5
 8005c14:	4940      	ldr	r1, [pc, #256]	; (8005d18 <gc_normalize_block+0x1e0>)
 8005c16:	6978      	ldr	r0, [r7, #20]
 8005c18:	f020 f935 	bl	8025e86 <strncmp>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d11f      	bne.n	8005c62 <gc_normalize_block+0x12a>
 8005c22:	6938      	ldr	r0, [r7, #16]
 8005c24:	f01f fda8 	bl	8025778 <malloc>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d014      	beq.n	8005c62 <gc_normalize_block+0x12a>
                            comment += 5;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	3305      	adds	r3, #5
 8005c3c:	617b      	str	r3, [r7, #20]
                            // Trim leading spaces
                            while(*comment == ' ') {
 8005c3e:	e005      	b.n	8005c4c <gc_normalize_block+0x114>
                                comment++;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3301      	adds	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
                                len--;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	613b      	str	r3, [r7, #16]
                            while(*comment == ' ') {
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d0f5      	beq.n	8005c40 <gc_normalize_block+0x108>
                            }
                            memcpy(*message, comment, len);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	6979      	ldr	r1, [r7, #20]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f020 fa4b 	bl	80260f8 <memcpy>
                            *comment = '\0'; // Do not generate grbl.on_gcode_comment event!
                        }
#endif // NGC_EXPRESSIONS_ENABLE
                    }

                    if(*comment && *message == NULL && grbl.on_gcode_comment)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <gc_normalize_block+0x14e>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <gc_normalize_block+0x14e>
 8005c72:	4b2a      	ldr	r3, [pc, #168]	; (8005d1c <gc_normalize_block+0x1e4>)
 8005c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <gc_normalize_block+0x14e>
                        grbl.on_gcode_comment(comment);
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <gc_normalize_block+0x1e4>)
 8005c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c82:	6978      	ldr	r0, [r7, #20]
 8005c84:	4798      	blx	r3
                }
                comment = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
                break;
 8005c8a:	e016      	b.n	8005cba <gc_normalize_block+0x182>

            default:
                if(comment == NULL)
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d112      	bne.n	8005cb8 <gc_normalize_block+0x180>
                    *s2++ = CAPS(c);
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b60      	cmp	r3, #96	; 0x60
 8005c96:	d907      	bls.n	8005ca8 <gc_normalize_block+0x170>
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b7a      	cmp	r3, #122	; 0x7a
 8005c9c:	d804      	bhi.n	8005ca8 <gc_normalize_block+0x170>
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	e000      	b.n	8005caa <gc_normalize_block+0x172>
 8005ca8:	7bfa      	ldrb	r2, [r7, #15]
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	1c59      	adds	r1, r3, #1
 8005cae:	61b9      	str	r1, [r7, #24]
 8005cb0:	701a      	strb	r2, [r3, #0]
                break;
 8005cb2:	e001      	b.n	8005cb8 <gc_normalize_block+0x180>
                break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <gc_normalize_block+0x182>
                break;
 8005cb8:	bf00      	nop

#if NGC_EXPRESSIONS_ENABLE
        if(comment && s1 - comment < (strncmp(comment, "(DEBU,", 5) ? 5 : 7))
            *s1 = CAPS(c);
#else
        if(comment && s1 - comment < 5)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d012      	beq.n	8005ce6 <gc_normalize_block+0x1ae>
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	dc0d      	bgt.n	8005ce6 <gc_normalize_block+0x1ae>
            *s1 = CAPS(c);
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b60      	cmp	r3, #96	; 0x60
 8005cce:	d907      	bls.n	8005ce0 <gc_normalize_block+0x1a8>
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b7a      	cmp	r3, #122	; 0x7a
 8005cd4:	d804      	bhi.n	8005ce0 <gc_normalize_block+0x1a8>
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e000      	b.n	8005ce2 <gc_normalize_block+0x1aa>
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	7013      	strb	r3, [r2, #0]
#endif
        s1++;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
    while((c = *s1) != '\0') {
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f47f af52 	bne.w	8005b9e <gc_normalize_block+0x66>
    }

    *s2 = '\0';
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]

    return block;
 8005d00:	687b      	ldr	r3, [r7, #4]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20001520 	.word	0x20001520
 8005d10:	2000137c 	.word	0x2000137c
 8005d14:	200016a0 	.word	0x200016a0
 8005d18:	0802a7d0 	.word	0x0802a7d0
 8005d1c:	200015b8 	.word	0x200015b8

08005d20 <gc_execute_block>:
// Parses and executes one block (line) of 0-terminated G-Code.
// In this function, all units and positions are converted and exported to internal functions
// in terms of (mm, mm/min) and absolute machine coordinates, respectively.

status_code_t gc_execute_block (char *block)
{
 8005d20:	b5b0      	push	{r4, r5, r7, lr}
 8005d22:	ed2d 8b02 	vpush	{d8}
 8005d26:	b0c0      	sub	sp, #256	; 0x100
 8005d28:	af04      	add	r7, sp, #16
 8005d2a:	6078      	str	r0, [r7, #4]
       { &gc_block.values.xyz[Z_AXIS], ValueType_Float }
    };

#endif

    char *message = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    block = gc_normalize_block(block, &message);
 8005d32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fefd 	bl	8005b38 <gc_normalize_block>
 8005d3e:	6078      	str	r0, [r7, #4]

    if(block[0] == '\0') {
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <gc_execute_block+0x40>
        if(message)
 8005d48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <gc_execute_block+0x3a>
            output_message(message);
 8005d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fecf 	bl	8005af8 <output_message>
        return Status_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f004 bfbc 	b.w	800acd8 <gc_execute_block+0x4fb8>
    // Old comment from protocol.c:
    // NOTE: This maybe installed to tell Grbl when a program is running vs manual input,
    // where, during a program, the system auto-cycle start will continue to execute
    // everything until the next '%' sign. This will help fix resuming issues with certain
    // functions that empty the planner buffer to execute its task on-time.
    if (block[0] == CMD_PROGRAM_DEMARCATION && block[1] == '\0') {
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b25      	cmp	r3, #37	; 0x25
 8005d66:	d121      	bne.n	8005dac <gc_execute_block+0x8c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11c      	bne.n	8005dac <gc_execute_block+0x8c>
        gc_state.file_run = !gc_state.file_run;
 8005d72:	4b99      	ldr	r3, [pc, #612]	; (8005fd8 <gc_execute_block+0x2b8>)
 8005d74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f083 0301 	eor.w	r3, r3, #1
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4b92      	ldr	r3, [pc, #584]	; (8005fd8 <gc_execute_block+0x2b8>)
 8005d90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        if(message)
 8005d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <gc_execute_block+0x86>
            output_message(message);
 8005d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fea9 	bl	8005af8 <output_message>
        return Status_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	f004 bf96 	b.w	800acd8 <gc_execute_block+0x4fb8>
     updates these modes and commands as the block line is parsed and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

    memset(&gc_block, 0, sizeof(gc_block));                           // Initialize the parser block struct.
 8005dac:	22ac      	movs	r2, #172	; 0xac
 8005dae:	2100      	movs	r1, #0
 8005db0:	488a      	ldr	r0, [pc, #552]	; (8005fdc <gc_execute_block+0x2bc>)
 8005db2:	f020 f844 	bl	8025e3e <memset>
    memcpy(&gc_block.modal, &gc_state.modal, sizeof(gc_state.modal)); // Copy current modes
 8005db6:	4b89      	ldr	r3, [pc, #548]	; (8005fdc <gc_execute_block+0x2bc>)
 8005db8:	4a87      	ldr	r2, [pc, #540]	; (8005fd8 <gc_execute_block+0x2b8>)
 8005dba:	f103 0408 	add.w	r4, r3, #8
 8005dbe:	4615      	mov	r5, r2
 8005dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005dcc:	e884 0003 	stmia.w	r4, {r0, r1}

    bool set_tool = false, spindle_programmed = false;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
    axis_command_t axis_command = AxisCommand_None;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    io_mcode_t port_command = (io_mcode_t)0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
    plane_t plane;

    // Initialize bitflag tracking variables for axis indices compatible operations.
    axes_signals_t axis_words = {0}; // XYZ tracking
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
    ijk_words_t ijk_words = {0}; // IJK tracking
 8005dee:	2300      	movs	r3, #0
 8005df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    // Initialize command and value words and parser flags variables.
    modal_groups_t command_words = {0};         // Bitfield for tracking G and M command words. Also used for modal group violations.
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    gc_parser_flags_t gc_parser_flags = {0};    // Parser flags for handling special cases.
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    static parameter_words_t user_words = {0};  // User M-code words "taken"

    // Determine if the line is a jogging motion or a normal g-code block.
    if (block[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b24      	cmp	r3, #36	; 0x24
 8005e06:	d113      	bne.n	8005e30 <gc_execute_block+0x110>
        // Set G1 and G94 enforced modes to ensure accurate error checks.
        gc_parser_flags.jog_motion = On;
 8005e08:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        gc_block.modal.motion = MotionMode_Linear;
 8005e14:	4b71      	ldr	r3, [pc, #452]	; (8005fdc <gc_execute_block+0x2bc>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	811a      	strh	r2, [r3, #8]
        gc_block.modal.feed_mode = FeedMode_UnitsPerMin;
 8005e1a:	4b70      	ldr	r3, [pc, #448]	; (8005fdc <gc_execute_block+0x2bc>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	729a      	strb	r2, [r3, #10]
        gc_block.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 8005e20:	4b6e      	ldr	r3, [pc, #440]	; (8005fdc <gc_execute_block+0x2bc>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gc_block.values.n = JOG_LINE_NUMBER; // Initialize default line number reported during jog.
 8005e28:	4b6c      	ldr	r3, [pc, #432]	; (8005fdc <gc_execute_block+0x2bc>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     STEP 2: Import all g-code words in the block. A g-code word is a letter followed by
     a number, which can either be a 'G'/'M' command or sets/assigns a command value. Also,
     perform initial error-checks for command word modal group violations, for any repeated
     words, and for negative values set for the value words F, N, P, T, and S. */

    uint_fast8_t char_counter = gc_parser_flags.jog_motion ? 3 /* Start parsing after `$J=` */ : 0;
 8005e30:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <gc_execute_block+0x122>
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e000      	b.n	8005e44 <gc_execute_block+0x124>
 8005e42:	2300      	movs	r3, #0
 8005e44:	67bb      	str	r3, [r7, #120]	; 0x78
    char letter;
    float value;
    uint32_t int_value = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    uint_fast16_t mantissa = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    bool is_user_mcode = false;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    word_bit_t word_bit = { .parameter = {0}, .modal_group = {0} }; // Bit-value for assigning tracking variables
 8005e58:	2300      	movs	r3, #0
 8005e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	673b      	str	r3, [r7, #112]	; 0x70

    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 8005e60:	f001 b844 	b.w	8006eec <gc_execute_block+0x11cc>
        if(!is_user_mcode && isnanf(value))
            FAIL(Status_BadNumberFormat);   // [Expected word value]

#else

        if((letter < 'A' && letter != '$') || letter > 'Z')
 8005e64:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d803      	bhi.n	8005e74 <gc_execute_block+0x154>
 8005e6c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005e70:	2b24      	cmp	r3, #36	; 0x24
 8005e72:	d103      	bne.n	8005e7c <gc_execute_block+0x15c>
 8005e74:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005e78:	2b5a      	cmp	r3, #90	; 0x5a
 8005e7a:	d902      	bls.n	8005e82 <gc_execute_block+0x162>
            FAIL(Status_ExpectedCommandLetter); // [Expected word letter]
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f004 bf2b 	b.w	800acd8 <gc_execute_block+0x4fb8>

        if (!read_float(block, &char_counter, &value)) {
 8005e82:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8005e86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f00a f8e7 	bl	8010060 <read_float>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f083 0301 	eor.w	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <gc_execute_block+0x192>
            if(is_user_mcode)                   // Valueless parameters allowed for user defined M-codes.
 8005e9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <gc_execute_block+0x18c>
                value = NAN;                    // Parameter validation deferred to implementation.
 8005ea6:	4b4e      	ldr	r3, [pc, #312]	; (8005fe0 <gc_execute_block+0x2c0>)
 8005ea8:	677b      	str	r3, [r7, #116]	; 0x74
 8005eaa:	e002      	b.n	8005eb2 <gc_execute_block+0x192>
            else
                FAIL(Status_BadNumberFormat);   // [Expected word value]
 8005eac:	2302      	movs	r3, #2
 8005eae:	f004 bf13 	b.w	800acd8 <gc_execute_block+0x4fb8>
        // accurate than the NIST gcode requirement of x10 when used for commands, but not quite
        // accurate enough for value words that require integers to within 0.0001. This should be
        // a good enough compromise and catch most all non-integer errors. To make it compliant,
        // we would simply need to change the mantissa to int16, but this add compiled flash space.
        // Maybe update this later.
        if(isnan(value))
 8005eb2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005eb6:	eef4 7a67 	vcmp.f32	s15, s15
 8005eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebe:	d703      	bvc.n	8005ec8 <gc_execute_block+0x1a8>
            mantissa = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ec6:	e027      	b.n	8005f18 <gc_execute_block+0x1f8>
        else {
            int_value = (uint32_t)truncf(value);
 8005ec8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed0:	f021 f807 	bl	8026ee2 <truncf>
 8005ed4:	eef0 7a40 	vmov.f32	s15, s0
 8005ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005edc:	ee17 3a90 	vmov	r3, s15
 8005ee0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            mantissa = (uint_fast16_t)roundf(100.0f * (value - int_value));
 8005ee4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005ee8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ef8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005fe4 <gc_execute_block+0x2c4>
 8005efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f00:	eeb0 0a67 	vmov.f32	s0, s15
 8005f04:	f020 ffea 	bl	8026edc <roundf>
 8005f08:	eef0 7a40 	vmov.f32	s15, s0
 8005f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f10:	ee17 3a90 	vmov	r3, s15
 8005f14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        }
        // NOTE: Rounding must be used to catch small floating point errors.

        // Check if the g-code word is supported or errors due to modal group violations or has
        // been repeated in the g-code block. If ok, update the command or record its value.
        switch(letter) {
 8005f18:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8005f1c:	2b47      	cmp	r3, #71	; 0x47
 8005f1e:	d004      	beq.n	8005f2a <gc_execute_block+0x20a>
 8005f20:	2b4d      	cmp	r3, #77	; 0x4d
 8005f22:	f000 8361 	beq.w	80065e8 <gc_execute_block+0x8c8>
 8005f26:	f000 bdef 	b.w	8006b08 <gc_execute_block+0xde8>
          /* 'G' and 'M' Command Words: Parse commands and check for modal group violations.
             NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */

            case 'G': // Determine 'G' command and its modal group

                is_user_mcode = false;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                word_bit.modal_group.mask = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	673b      	str	r3, [r7, #112]	; 0x70
 8005f34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f38:	2b63      	cmp	r3, #99	; 0x63
 8005f3a:	f200 8333 	bhi.w	80065a4 <gc_execute_block+0x884>
 8005f3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f42:	2b5a      	cmp	r3, #90	; 0x5a
 8005f44:	d205      	bcs.n	8005f52 <gc_execute_block+0x232>
 8005f46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f4a:	2b41      	cmp	r3, #65	; 0x41
 8005f4c:	f200 80da 	bhi.w	8006104 <gc_execute_block+0x3e4>
 8005f50:	e04c      	b.n	8005fec <gc_execute_block+0x2cc>
 8005f52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f56:	3b5a      	subs	r3, #90	; 0x5a
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	f200 8323 	bhi.w	80065a4 <gc_execute_block+0x884>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <gc_execute_block+0x244>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08006363 	.word	0x08006363
 8005f68:	08006363 	.word	0x08006363
 8005f6c:	08006149 	.word	0x08006149
 8005f70:	080063b5 	.word	0x080063b5
 8005f74:	080063b5 	.word	0x080063b5
 8005f78:	080063d3 	.word	0x080063d3
 8005f7c:	0800652d 	.word	0x0800652d
 8005f80:	0800652d 	.word	0x0800652d
 8005f84:	0800655f 	.word	0x0800655f
 8005f88:	0800655f 	.word	0x0800655f
 8005f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f90:	3b49      	subs	r3, #73	; 0x49
 8005f92:	2201      	movs	r2, #1
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <gc_execute_block+0x2c8>)
 8005f9a:	401a      	ands	r2, r3
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	bf14      	ite	ne
 8005fa0:	2201      	movne	r2, #1
 8005fa2:	2200      	moveq	r2, #0
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	f040 81a4 	bne.w	80062f4 <gc_execute_block+0x5d4>
 8005fac:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	bf14      	ite	ne
 8005fb4:	2201      	movne	r2, #1
 8005fb6:	2200      	moveq	r2, #0
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	f040 8174 	bne.w	80062a8 <gc_execute_block+0x588>
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bf14      	ite	ne
 8005fc8:	2301      	movne	r3, #1
 8005fca:	2300      	moveq	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 8118 	bne.w	8006204 <gc_execute_block+0x4e4>
 8005fd4:	e2e6      	b.n	80065a4 <gc_execute_block+0x884>
 8005fd6:	bf00      	nop
 8005fd8:	2000137c 	.word	0x2000137c
 8005fdc:	20001470 	.word	0x20001470
 8005fe0:	7fc00000 	.word	0x7fc00000
 8005fe4:	42c80000 	.word	0x42c80000
 8005fe8:	00013701 	.word	0x00013701
 8005fec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ff0:	2b41      	cmp	r3, #65	; 0x41
 8005ff2:	f200 82d7 	bhi.w	80065a4 <gc_execute_block+0x884>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <gc_execute_block+0x2dc>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006295 	.word	0x08006295
 8006000:	08006295 	.word	0x08006295
 8006004:	08006295 	.word	0x08006295
 8006008:	08006295 	.word	0x08006295
 800600c:	08006165 	.word	0x08006165
 8006010:	08006295 	.word	0x08006295
 8006014:	080065a5 	.word	0x080065a5
 8006018:	0800611b 	.word	0x0800611b
 800601c:	0800611b 	.word	0x0800611b
 8006020:	080065a5 	.word	0x080065a5
 8006024:	08006149 	.word	0x08006149
 8006028:	080065a5 	.word	0x080065a5
 800602c:	080065a5 	.word	0x080065a5
 8006030:	080065a5 	.word	0x080065a5
 8006034:	080065a5 	.word	0x080065a5
 8006038:	080065a5 	.word	0x080065a5
 800603c:	080065a5 	.word	0x080065a5
 8006040:	08006347 	.word	0x08006347
 8006044:	08006347 	.word	0x08006347
 8006048:	08006347 	.word	0x08006347
 800604c:	080063e7 	.word	0x080063e7
 8006050:	080063e7 	.word	0x080063e7
 8006054:	080065a5 	.word	0x080065a5
 8006058:	080065a5 	.word	0x080065a5
 800605c:	080065a5 	.word	0x080065a5
 8006060:	080065a5 	.word	0x080065a5
 8006064:	080065a5 	.word	0x080065a5
 8006068:	080065a5 	.word	0x080065a5
 800606c:	08006149 	.word	0x08006149
 8006070:	080065a5 	.word	0x080065a5
 8006074:	08006149 	.word	0x08006149
 8006078:	080065a5 	.word	0x080065a5
 800607c:	080065a5 	.word	0x080065a5
 8006080:	08006205 	.word	0x08006205
 8006084:	080065a5 	.word	0x080065a5
 8006088:	080065a5 	.word	0x080065a5
 800608c:	080065a5 	.word	0x080065a5
 8006090:	080065a5 	.word	0x080065a5
 8006094:	08006247 	.word	0x08006247
 8006098:	080065a5 	.word	0x080065a5
 800609c:	08006407 	.word	0x08006407
 80060a0:	080065a5 	.word	0x080065a5
 80060a4:	080065a5 	.word	0x080065a5
 80060a8:	08006429 	.word	0x08006429
 80060ac:	080065a5 	.word	0x080065a5
 80060b0:	080065a5 	.word	0x080065a5
 80060b4:	080065a5 	.word	0x080065a5
 80060b8:	080065a5 	.word	0x080065a5
 80060bc:	080065a5 	.word	0x080065a5
 80060c0:	08006429 	.word	0x08006429
 80060c4:	0800657d 	.word	0x0800657d
 80060c8:	0800657d 	.word	0x0800657d
 80060cc:	080065a5 	.word	0x080065a5
 80060d0:	08006165 	.word	0x08006165
 80060d4:	08006477 	.word	0x08006477
 80060d8:	08006477 	.word	0x08006477
 80060dc:	08006477 	.word	0x08006477
 80060e0:	08006477 	.word	0x08006477
 80060e4:	08006477 	.word	0x08006477
 80060e8:	08006477 	.word	0x08006477
 80060ec:	080065a5 	.word	0x080065a5
 80060f0:	080064e5 	.word	0x080064e5
 80060f4:	080065a5 	.word	0x080065a5
 80060f8:	080065a5 	.word	0x080065a5
 80060fc:	080065a5 	.word	0x080065a5
 8006100:	080064ff 	.word	0x080064ff
 8006104:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006108:	2b59      	cmp	r3, #89	; 0x59
 800610a:	f200 824b 	bhi.w	80065a4 <gc_execute_block+0x884>
 800610e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006112:	2b49      	cmp	r3, #73	; 0x49
 8006114:	f4bf af3a 	bcs.w	8005f8c <gc_execute_block+0x26c>
 8006118:	e244      	b.n	80065a4 <gc_execute_block+0x884>

                switch(int_value) {

                    case 7: case 8:
                        if(settings.mode == Mode_Lathe) {
 800611a:	4bbe      	ldr	r3, [pc, #760]	; (8006414 <gc_execute_block+0x6f4>)
 800611c:	7e1b      	ldrb	r3, [r3, #24]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d10f      	bne.n	8006142 <gc_execute_block+0x422>
                            word_bit.modal_group.G15 = On;
 8006122:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8006126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                            gc_block.modal.diameter_mode = int_value == 7; // TODO: find specs for implementation, only affects X calculation? reporting? current position?
 800612e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006132:	2b07      	cmp	r3, #7
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2da      	uxtb	r2, r3
 800613c:	4bb6      	ldr	r3, [pc, #728]	; (8006418 <gc_execute_block+0x6f8>)
 800613e:	735a      	strb	r2, [r3, #13]
                        } else
                            FAIL(Status_GcodeUnsupportedCommand); // [G7 & G8 not supported]
                        break;
 8006140:	e23a      	b.n	80065b8 <gc_execute_block+0x898>
                            FAIL(Status_GcodeUnsupportedCommand); // [G7 & G8 not supported]
 8006142:	2314      	movs	r3, #20
 8006144:	f004 bdc8 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    case 10: case 28: case 30: case 92:
                        // Check for G10/28/30/92 being called with G0/1/2/3/38 on same block.
                        // * G43.1 is also an axis command but is not explicitly defined this way.
                        if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <gc_execute_block+0x444>
                            if (axis_command)
 8006150:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <gc_execute_block+0x43e>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 8006158:	2318      	movs	r3, #24
 800615a:	f004 bdbd 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            axis_command = AxisCommand_NonModal;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
                        }
                        // No break. Continues to next line.

                    case 4: case 53:
                        word_bit.modal_group.G0 = On;
 8006164:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        gc_block.non_modal_command = (non_modal_t)int_value;
 8006170:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006174:	b2da      	uxtb	r2, r3
 8006176:	4ba8      	ldr	r3, [pc, #672]	; (8006418 <gc_execute_block+0x6f8>)
 8006178:	701a      	strb	r2, [r3, #0]
                        if ((int_value == 28) || (int_value == 30)) {
 800617a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800617e:	2b1c      	cmp	r3, #28
 8006180:	d003      	beq.n	800618a <gc_execute_block+0x46a>
 8006182:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006186:	2b1e      	cmp	r3, #30
 8006188:	d117      	bne.n	80061ba <gc_execute_block+0x49a>
                            if (!((mantissa == 0) || (mantissa == 10)))
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d006      	beq.n	80061a0 <gc_execute_block+0x480>
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006196:	2b0a      	cmp	r3, #10
 8006198:	d002      	beq.n	80061a0 <gc_execute_block+0x480>
                                FAIL(Status_GcodeUnsupportedCommand);
 800619a:	2314      	movs	r3, #20
 800619c:	f004 bd9c 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            gc_block.non_modal_command += mantissa;
 80061a0:	4b9d      	ldr	r3, [pc, #628]	; (8006418 <gc_execute_block+0x6f8>)
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	4413      	add	r3, r2
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	4b9a      	ldr	r3, [pc, #616]	; (8006418 <gc_execute_block+0x6f8>)
 80061b0:	701a      	strb	r2, [r3, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 80061b2:	2300      	movs	r3, #0
 80061b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                            if (!((mantissa == 0) || (mantissa == 10) || (mantissa == 20) || (mantissa == 30)))
                                FAIL(Status_GcodeUnsupportedCommand);
                            gc_block.non_modal_command += mantissa;
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
                        }
                        break;
 80061b8:	e1f7      	b.n	80065aa <gc_execute_block+0x88a>
                        } else if (int_value == 92) {
 80061ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061be:	2b5c      	cmp	r3, #92	; 0x5c
 80061c0:	f040 81f3 	bne.w	80065aa <gc_execute_block+0x88a>
                            if (!((mantissa == 0) || (mantissa == 10) || (mantissa == 20) || (mantissa == 30)))
 80061c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00e      	beq.n	80061ea <gc_execute_block+0x4ca>
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	2b0a      	cmp	r3, #10
 80061d2:	d00a      	beq.n	80061ea <gc_execute_block+0x4ca>
 80061d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d8:	2b14      	cmp	r3, #20
 80061da:	d006      	beq.n	80061ea <gc_execute_block+0x4ca>
 80061dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e0:	2b1e      	cmp	r3, #30
 80061e2:	d002      	beq.n	80061ea <gc_execute_block+0x4ca>
                                FAIL(Status_GcodeUnsupportedCommand);
 80061e4:	2314      	movs	r3, #20
 80061e6:	f004 bd77 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            gc_block.non_modal_command += mantissa;
 80061ea:	4b8b      	ldr	r3, [pc, #556]	; (8006418 <gc_execute_block+0x6f8>)
 80061ec:	781a      	ldrb	r2, [r3, #0]
 80061ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	4b87      	ldr	r3, [pc, #540]	; (8006418 <gc_execute_block+0x6f8>)
 80061fa:	701a      	strb	r2, [r3, #0]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 80061fc:	2300      	movs	r3, #0
 80061fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                        break;
 8006202:	e1d2      	b.n	80065aa <gc_execute_block+0x88a>

                    case 33: case 76:
                        if(mantissa != 0)
 8006204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <gc_execute_block+0x4f2>
                            FAIL(Status_GcodeUnsupportedCommand); // [G33.1 not yet supported]
 800620c:	2314      	movs	r3, #20
 800620e:	f004 bd63 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        if (axis_command)
 8006212:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <gc_execute_block+0x500>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 800621a:	2318      	movs	r3, #24
 800621c:	f004 bd5c 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        axis_command = AxisCommand_MotionMode;
 8006220:	2302      	movs	r3, #2
 8006222:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
                        word_bit.modal_group.G1 = On;
 8006226:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800622a:	f043 0302 	orr.w	r3, r3, #2
 800622e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        gc_block.modal.motion = (motion_mode_t)int_value;
 8006232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006236:	b29a      	uxth	r2, r3
 8006238:	4b77      	ldr	r3, [pc, #476]	; (8006418 <gc_execute_block+0x6f8>)
 800623a:	811a      	strh	r2, [r3, #8]
//                        if(mantissa == 10)
//                            gc_block.modal.motion = MotionMode_RigidTapping;
                        gc_block.modal.canned_cycle_active = false;
 800623c:	4b76      	ldr	r3, [pc, #472]	; (8006418 <gc_execute_block+0x6f8>)
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
                        break;
 8006244:	e1b8      	b.n	80065b8 <gc_execute_block+0x898>

                    case 38:
                        if(!(hal.probe.get_state && ((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))))
 8006246:	4b75      	ldr	r3, [pc, #468]	; (800641c <gc_execute_block+0x6fc>)
 8006248:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00f      	beq.n	8006270 <gc_execute_block+0x550>
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006254:	2b14      	cmp	r3, #20
 8006256:	d00e      	beq.n	8006276 <gc_execute_block+0x556>
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	2b1e      	cmp	r3, #30
 800625e:	d00a      	beq.n	8006276 <gc_execute_block+0x556>
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006264:	2b28      	cmp	r3, #40	; 0x28
 8006266:	d006      	beq.n	8006276 <gc_execute_block+0x556>
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	2b32      	cmp	r3, #50	; 0x32
 800626e:	d002      	beq.n	8006276 <gc_execute_block+0x556>
                            FAIL(Status_GcodeUnsupportedCommand); // [probing not supported by driver or unsupported G38.x command]
 8006270:	2314      	movs	r3, #20
 8006272:	f004 bd31 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        int_value += (mantissa / 10) + 100;
 8006276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627a:	4a69      	ldr	r2, [pc, #420]	; (8006420 <gc_execute_block+0x700>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	08da      	lsrs	r2, r3, #3
 8006282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006286:	4413      	add	r3, r2
 8006288:	3364      	adds	r3, #100	; 0x64
 800628a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800628e:	2300      	movs	r3, #0
 8006290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                        //  No break. Continues to next line.

                    case 0: case 1: case 2: case 3: case 5:
                        // Check for G0/1/2/3/38 being called with G10/28/30/92 on same block.
                        // * G43.1 is also an axis command but is not explicitly defined this way.
                        if (axis_command)
 8006294:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <gc_execute_block+0x582>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 800629c:	2318      	movs	r3, #24
 800629e:	f004 bd1b 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        axis_command = AxisCommand_MotionMode;
 80062a2:	2302      	movs	r3, #2
 80062a4:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
                        // No break. Continues to next line.

                    case 80:
                        word_bit.modal_group.G1 = On;
 80062a8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80062ac:	f043 0302 	orr.w	r3, r3, #2
 80062b0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        if(int_value == 5 && mantissa != 0) {
 80062b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062b8:	2b05      	cmp	r3, #5
 80062ba:	d111      	bne.n	80062e0 <gc_execute_block+0x5c0>
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00d      	beq.n	80062e0 <gc_execute_block+0x5c0>
                            if(mantissa == 10) {
 80062c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c8:	2b0a      	cmp	r3, #10
 80062ca:	d106      	bne.n	80062da <gc_execute_block+0x5ba>
                                gc_block.modal.motion = MotionMode_QuadraticSpline;
 80062cc:	4b52      	ldr	r3, [pc, #328]	; (8006418 <gc_execute_block+0x6f8>)
 80062ce:	2233      	movs	r2, #51	; 0x33
 80062d0:	811a      	strh	r2, [r3, #8]
                                mantissa = 0; // Set to zero to indicate valid non-integer G command.
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                            if(mantissa == 10) {
 80062d8:	e007      	b.n	80062ea <gc_execute_block+0x5ca>
                            } else
                                FAIL(Status_GcodeUnsupportedCommand);
 80062da:	2314      	movs	r3, #20
 80062dc:	f004 bcfc 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        } else
                            gc_block.modal.motion = (motion_mode_t)int_value;
 80062e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	4b4c      	ldr	r3, [pc, #304]	; (8006418 <gc_execute_block+0x6f8>)
 80062e8:	811a      	strh	r2, [r3, #8]
                        gc_block.modal.canned_cycle_active = false;
 80062ea:	4b4b      	ldr	r3, [pc, #300]	; (8006418 <gc_execute_block+0x6f8>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
                        break;
 80062f2:	e161      	b.n	80065b8 <gc_execute_block+0x898>

                    case 73: case 81: case 82: case 83: case 85: case 86: case 89:
                        if (axis_command)
 80062f4:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <gc_execute_block+0x5e2>
                            FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict]
 80062fc:	2318      	movs	r3, #24
 80062fe:	f004 bceb 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        axis_command = AxisCommand_MotionMode;
 8006302:	2302      	movs	r3, #2
 8006304:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
                        word_bit.modal_group.G1 = On;
 8006308:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800630c:	f043 0302 	orr.w	r3, r3, #2
 8006310:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        gc_block.modal.canned_cycle_active = true;
 8006314:	4b40      	ldr	r3, [pc, #256]	; (8006418 <gc_execute_block+0x6f8>)
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
                        gc_block.modal.motion = (motion_mode_t)int_value;
 800631c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006320:	b29a      	uxth	r2, r3
 8006322:	4b3d      	ldr	r3, [pc, #244]	; (8006418 <gc_execute_block+0x6f8>)
 8006324:	811a      	strh	r2, [r3, #8]
                        gc_parser_flags.canned_cycle_change = gc_block.modal.motion != gc_state.modal.motion;
 8006326:	4b3c      	ldr	r3, [pc, #240]	; (8006418 <gc_execute_block+0x6f8>)
 8006328:	891a      	ldrh	r2, [r3, #8]
 800632a:	4b3e      	ldr	r3, [pc, #248]	; (8006424 <gc_execute_block+0x704>)
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	bf14      	ite	ne
 8006332:	2301      	movne	r3, #1
 8006334:	2300      	moveq	r3, #0
 8006336:	b2da      	uxtb	r2, r3
 8006338:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800633c:	f362 0341 	bfi	r3, r2, #1, #1
 8006340:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                        break;
 8006344:	e138      	b.n	80065b8 <gc_execute_block+0x898>

                    case 17: case 18: case 19:
                        word_bit.modal_group.G2 = On;
 8006346:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800634a:	f043 0304 	orr.w	r3, r3, #4
 800634e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        gc_block.modal.plane_select = (plane_select_t)(int_value - 17);
 8006352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006356:	b2db      	uxtb	r3, r3
 8006358:	3b11      	subs	r3, #17
 800635a:	b2da      	uxtb	r2, r3
 800635c:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <gc_execute_block+0x6f8>)
 800635e:	739a      	strb	r2, [r3, #14]
                        break;
 8006360:	e12a      	b.n	80065b8 <gc_execute_block+0x898>

                    case 90: case 91:
                        if (mantissa == 0) {
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10f      	bne.n	800638a <gc_execute_block+0x66a>
                            word_bit.modal_group.G3 = On;
 800636a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800636e:	f043 0308 	orr.w	r3, r3, #8
 8006372:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                            gc_block.modal.distance_incremental = int_value == 91;
 8006376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800637a:	2b5b      	cmp	r3, #91	; 0x5b
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2da      	uxtb	r2, r3
 8006384:	4b24      	ldr	r3, [pc, #144]	; (8006418 <gc_execute_block+0x6f8>)
 8006386:	731a      	strb	r2, [r3, #12]
                            if ((mantissa != 10) || (int_value == 90))
                                FAIL(Status_GcodeUnsupportedCommand); // [G90.1 not supported]
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
                            // Otherwise, arc IJK incremental mode is default. G91.1 does nothing.
                        }
                        break;
 8006388:	e116      	b.n	80065b8 <gc_execute_block+0x898>
                            word_bit.modal_group.G4 = On;
 800638a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800638e:	f043 0310 	orr.w	r3, r3, #16
 8006392:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                            if ((mantissa != 10) || (int_value == 90))
 8006396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639a:	2b0a      	cmp	r3, #10
 800639c:	d103      	bne.n	80063a6 <gc_execute_block+0x686>
 800639e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063a2:	2b5a      	cmp	r3, #90	; 0x5a
 80063a4:	d102      	bne.n	80063ac <gc_execute_block+0x68c>
                                FAIL(Status_GcodeUnsupportedCommand); // [G90.1 not supported]
 80063a6:	2314      	movs	r3, #20
 80063a8:	f004 bc96 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                        break;
 80063b2:	e101      	b.n	80065b8 <gc_execute_block+0x898>

                    case 93: case 94:
                        word_bit.modal_group.G5 = On;
 80063b4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80063b8:	f043 0320 	orr.w	r3, r3, #32
 80063bc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        gc_block.modal.feed_mode = (feed_mode_t)(94 - int_value);
 80063c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	4b12      	ldr	r3, [pc, #72]	; (8006418 <gc_execute_block+0x6f8>)
 80063ce:	729a      	strb	r2, [r3, #10]
                        break;
 80063d0:	e0f2      	b.n	80065b8 <gc_execute_block+0x898>

                    case 95:
                        word_bit.modal_group.G5 = On;
 80063d2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80063d6:	f043 0320 	orr.w	r3, r3, #32
 80063da:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        gc_block.modal.feed_mode = FeedMode_UnitsPerRev;
 80063de:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <gc_execute_block+0x6f8>)
 80063e0:	2202      	movs	r2, #2
 80063e2:	729a      	strb	r2, [r3, #10]
                        break;
 80063e4:	e0e8      	b.n	80065b8 <gc_execute_block+0x898>

                    case 20: case 21:
                        word_bit.modal_group.G6 = On;
 80063e6:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80063ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ee:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        gc_block.modal.units_imperial = int_value == 20;
 80063f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063f6:	2b14      	cmp	r3, #20
 80063f8:	bf0c      	ite	eq
 80063fa:	2301      	moveq	r3, #1
 80063fc:	2300      	movne	r3, #0
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <gc_execute_block+0x6f8>)
 8006402:	72da      	strb	r2, [r3, #11]
                        break;
 8006404:	e0d8      	b.n	80065b8 <gc_execute_block+0x898>

                    case 40:
                        word_bit.modal_group.G7 = On;
 8006406:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800640a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        // NOTE: Not required since cutter radius compensation is always disabled. Only here
                        // to support G40 commands that often appear in g-code program headers to setup defaults.
                        // gc_block.modal.cutter_comp = CUTTER_COMP_DISABLE; // G40
                        break;
 8006412:	e0d1      	b.n	80065b8 <gc_execute_block+0x898>
 8006414:	20001cf0 	.word	0x20001cf0
 8006418:	20001470 	.word	0x20001470
 800641c:	200016a0 	.word	0x200016a0
 8006420:	cccccccd 	.word	0xcccccccd
 8006424:	2000137c 	.word	0x2000137c

                    case 43: case 49:
                        word_bit.modal_group.G8 = On;
 8006428:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                        // NOTE: The NIST g-code standard vaguely states that when a tool length offset is changed,
                        // there cannot be any axis motion or coordinate offsets updated. Meaning G43, G43.1, and G49
                        // all are explicit axis commands, regardless if they require axis words or not.
                        // NOTE: cannot find the NIST statement referenced above, changed to match LinuxCNC behaviour in build 20210513.
                        if (int_value == 49) // G49
 8006434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006438:	2b31      	cmp	r3, #49	; 0x31
 800643a:	d103      	bne.n	8006444 <gc_execute_block+0x724>
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Cancel;
 800643c:	4b7b      	ldr	r3, [pc, #492]	; (800662c <gc_execute_block+0x90c>)
 800643e:	2200      	movs	r2, #0
 8006440:	73da      	strb	r2, [r3, #15]
 8006442:	e014      	b.n	800646e <gc_execute_block+0x74e>
                        else if (mantissa == 0) // G43
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_Enable;
                        else if (mantissa == 20) // G43.2
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_ApplyAdditional;
#endif
                        else if (mantissa == 10) { // G43.1
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006448:	2b0a      	cmp	r3, #10
 800644a:	d10d      	bne.n	8006468 <gc_execute_block+0x748>
                            if (axis_command)
 800644c:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <gc_execute_block+0x73a>
                                FAIL(Status_GcodeAxisCommandConflict); // [Axis word/command conflict] }
 8006454:	2318      	movs	r3, #24
 8006456:	f004 bc3f 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            axis_command = AxisCommand_ToolLengthOffset;
 800645a:	2303      	movs	r3, #3
 800645c:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
                            gc_block.modal.tool_offset_mode = ToolLengthOffset_EnableDynamic;
 8006460:	4b72      	ldr	r3, [pc, #456]	; (800662c <gc_execute_block+0x90c>)
 8006462:	2202      	movs	r2, #2
 8006464:	73da      	strb	r2, [r3, #15]
 8006466:	e002      	b.n	800646e <gc_execute_block+0x74e>
                        } else
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported G43.x command]
 8006468:	2314      	movs	r3, #20
 800646a:	f004 bc35 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800646e:	2300      	movs	r3, #0
 8006470:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                        break;
 8006474:	e0a0      	b.n	80065b8 <gc_execute_block+0x898>

                    case 54: case 55: case 56: case 57: case 58: case 59:
                        word_bit.modal_group.G12 = On;
 8006476:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800647a:	f043 0308 	orr.w	r3, r3, #8
 800647e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                        gc_block.modal.coord_system.id = (coord_system_id_t)(int_value - 54); // Shift to array indexing.
 8006482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006486:	b2db      	uxtb	r3, r3
 8006488:	3b36      	subs	r3, #54	; 0x36
 800648a:	b2da      	uxtb	r2, r3
 800648c:	4b67      	ldr	r3, [pc, #412]	; (800662c <gc_execute_block+0x90c>)
 800648e:	771a      	strb	r2, [r3, #28]
                        if(int_value == 59 && mantissa > 0) {
 8006490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006494:	2b3b      	cmp	r3, #59	; 0x3b
 8006496:	f040 808a 	bne.w	80065ae <gc_execute_block+0x88e>
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8085 	beq.w	80065ae <gc_execute_block+0x88e>
                            if(N_WorkCoordinateSystems == 9 && (mantissa == 10 || mantissa == 20 || mantissa == 30)) {
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a8:	2b0a      	cmp	r3, #10
 80064aa:	d007      	beq.n	80064bc <gc_execute_block+0x79c>
 80064ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b0:	2b14      	cmp	r3, #20
 80064b2:	d003      	beq.n	80064bc <gc_execute_block+0x79c>
 80064b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b8:	2b1e      	cmp	r3, #30
 80064ba:	d110      	bne.n	80064de <gc_execute_block+0x7be>
                                gc_block.modal.coord_system.id += mantissa / 10;
 80064bc:	4b5b      	ldr	r3, [pc, #364]	; (800662c <gc_execute_block+0x90c>)
 80064be:	7f1a      	ldrb	r2, [r3, #28]
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c4:	495a      	ldr	r1, [pc, #360]	; (8006630 <gc_execute_block+0x910>)
 80064c6:	fba1 1303 	umull	r1, r3, r1, r3
 80064ca:	08db      	lsrs	r3, r3, #3
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	4413      	add	r3, r2
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	4b56      	ldr	r3, [pc, #344]	; (800662c <gc_execute_block+0x90c>)
 80064d4:	771a      	strb	r2, [r3, #28]
                                mantissa = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                            } else
                                FAIL(Status_GcodeUnsupportedCommand); // [Unsupported G59.x command]
                        }
                        break;
 80064dc:	e067      	b.n	80065ae <gc_execute_block+0x88e>
                                FAIL(Status_GcodeUnsupportedCommand); // [Unsupported G59.x command]
 80064de:	2314      	movs	r3, #20
 80064e0:	f004 bbfa 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    case 61:
                        word_bit.modal_group.G13 = On;
 80064e4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80064e8:	f043 0310 	orr.w	r3, r3, #16
 80064ec:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                        if (mantissa != 0) // [G61.1 not supported]
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d05c      	beq.n	80065b2 <gc_execute_block+0x892>
                            FAIL(Status_GcodeUnsupportedCommand);
 80064f8:	2314      	movs	r3, #20
 80064fa:	f004 bbed 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        gc_block.modal.control = ControlMode_PathBlending; // G64
                        break;
*/

                    case 65: // NOTE: Mach 3/4 GCode
                        word_bit.modal_group.G0 = On;
 80064fe:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        gc_block.non_modal_command = (non_modal_t)int_value;
 800650a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800650e:	b2da      	uxtb	r2, r3
 8006510:	4b46      	ldr	r3, [pc, #280]	; (800662c <gc_execute_block+0x90c>)
 8006512:	701a      	strb	r2, [r3, #0]
                        if(mantissa != 0 || grbl.on_macro_execute == NULL)
 8006514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <gc_execute_block+0x806>
 800651c:	4b45      	ldr	r3, [pc, #276]	; (8006634 <gc_execute_block+0x914>)
 800651e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d147      	bne.n	80065b6 <gc_execute_block+0x896>
                            FAIL(Status_GcodeUnsupportedCommand);
 8006526:	2314      	movs	r3, #20
 8006528:	f004 bbd6 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        break;

                    case 96: case 97:
                        if(settings.mode == Mode_Lathe) {
 800652c:	4b42      	ldr	r3, [pc, #264]	; (8006638 <gc_execute_block+0x918>)
 800652e:	7e1b      	ldrb	r3, [r3, #24]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d111      	bne.n	8006558 <gc_execute_block+0x838>
                            word_bit.modal_group.G14 = On;
 8006534:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8006538:	f043 0320 	orr.w	r3, r3, #32
 800653c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                            gc_block.modal.spindle.rpm_mode = (spindle_rpm_mode_t)((int_value - 96) ^ 1);
 8006540:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006544:	b2db      	uxtb	r3, r3
 8006546:	3b60      	subs	r3, #96	; 0x60
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f083 0301 	eor.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	4b36      	ldr	r3, [pc, #216]	; (800662c <gc_execute_block+0x90c>)
 8006552:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
                        } else
                            FAIL(Status_GcodeUnsupportedCommand);
                        break;
 8006556:	e02f      	b.n	80065b8 <gc_execute_block+0x898>
                            FAIL(Status_GcodeUnsupportedCommand);
 8006558:	2314      	movs	r3, #20
 800655a:	f004 bbbd 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    case 98: case 99:
                        word_bit.modal_group.G10 = On;
 800655e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8006562:	f043 0302 	orr.w	r3, r3, #2
 8006566:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                        gc_block.modal.retract_mode = (cc_retract_mode_t)(int_value - 98);
 800656a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800656e:	b2db      	uxtb	r3, r3
 8006570:	3b62      	subs	r3, #98	; 0x62
 8006572:	b2da      	uxtb	r2, r3
 8006574:	4b2d      	ldr	r3, [pc, #180]	; (800662c <gc_execute_block+0x90c>)
 8006576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                        break;
 800657a:	e01d      	b.n	80065b8 <gc_execute_block+0x898>

                    case 50: case 51:
                        axis_command = AxisCommand_Scaling;
 800657c:	2304      	movs	r3, #4
 800657e:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
                        word_bit.modal_group.G11 = On;
 8006582:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8006586:	f043 0304 	orr.w	r3, r3, #4
 800658a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                        gc_block.modal.scaling_active = int_value == 51;
 800658e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006592:	2b33      	cmp	r3, #51	; 0x33
 8006594:	bf0c      	ite	eq
 8006596:	2301      	moveq	r3, #1
 8006598:	2300      	movne	r3, #0
 800659a:	b2da      	uxtb	r2, r3
 800659c:	4b23      	ldr	r3, [pc, #140]	; (800662c <gc_execute_block+0x90c>)
 800659e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                        break;
 80065a2:	e009      	b.n	80065b8 <gc_execute_block+0x898>

                    default: FAIL(Status_GcodeUnsupportedCommand); // [Unsupported G command]
 80065a4:	2314      	movs	r3, #20
 80065a6:	f004 bb97 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        break;
 80065aa:	bf00      	nop
 80065ac:	e004      	b.n	80065b8 <gc_execute_block+0x898>
                        break;
 80065ae:	bf00      	nop
 80065b0:	e002      	b.n	80065b8 <gc_execute_block+0x898>
                        break;
 80065b2:	bf00      	nop
 80065b4:	e000      	b.n	80065b8 <gc_execute_block+0x898>
                        break;
 80065b6:	bf00      	nop
                } // end G-value switch

                if (mantissa > 0)
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <gc_execute_block+0x8a6>
                    FAIL(Status_GcodeCommandValueNotInteger); // [Unsupported or invalid Gxx.x command]
 80065c0:	2317      	movs	r3, #23
 80065c2:	f004 bb89 	b.w	800acd8 <gc_execute_block+0x4fb8>

                // Check for more than one command per modal group violations in the current block
                // NOTE: Variable 'word_bit' is always assigned, if the command is valid.
                if (command_words.mask & word_bit.modal_group.mask)
 80065c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <gc_execute_block+0x8b8>
                    FAIL(Status_GcodeModalGroupViolation);
 80065d2:	2315      	movs	r3, #21
 80065d4:	f004 bb80 	b.w	800acd8 <gc_execute_block+0x4fb8>

                command_words.mask |= word_bit.modal_group.mask;
 80065d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                break;
 80065e4:	f000 bc82 	b.w	8006eec <gc_execute_block+0x11cc>

            case 'M': // Determine 'M' command and its modal group

                if(gc_block.non_modal_command == NonModal_MacroCall) {
 80065e8:	4b10      	ldr	r3, [pc, #64]	; (800662c <gc_execute_block+0x90c>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b41      	cmp	r3, #65	; 0x41
 80065ee:	d116      	bne.n	800661e <gc_execute_block+0x8fe>

                    if(gc_block.words.m)
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <gc_execute_block+0x90c>)
 80065f2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <gc_execute_block+0x8e6>
                        FAIL(Status_GcodeWordRepeated); // [Word repeated]
 8006600:	2319      	movs	r3, #25
 8006602:	f004 bb69 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    gc_block.values.m = value;
 8006606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006608:	4a08      	ldr	r2, [pc, #32]	; (800662c <gc_execute_block+0x90c>)
 800660a:	64d3      	str	r3, [r2, #76]	; 0x4c
                    gc_block.words.m = On; // Flag to indicate parameter assigned.
 800660c:	4a07      	ldr	r2, [pc, #28]	; (800662c <gc_execute_block+0x90c>)
 800660e:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8006612:	f043 0320 	orr.w	r3, r3, #32
 8006616:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95

                    continue;
 800661a:	f000 bc67 	b.w	8006eec <gc_execute_block+0x11cc>
                }

                if(mantissa > 0)
 800661e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <gc_execute_block+0x91c>
                    FAIL(Status_GcodeCommandValueNotInteger); // [No Mxx.x commands]
 8006626:	2317      	movs	r3, #23
 8006628:	f004 bb56 	b.w	800acd8 <gc_execute_block+0x4fb8>
 800662c:	20001470 	.word	0x20001470
 8006630:	cccccccd 	.word	0xcccccccd
 8006634:	200015b8 	.word	0x200015b8
 8006638:	20001cf0 	.word	0x20001cf0

                is_user_mcode = false;
 800663c:	2300      	movs	r3, #0
 800663e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                word_bit.modal_group.mask = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	673b      	str	r3, [r7, #112]	; 0x70
 8006646:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800664a:	2b63      	cmp	r3, #99	; 0x63
 800664c:	f200 821a 	bhi.w	8006a84 <gc_execute_block+0xd64>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <gc_execute_block+0x938>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	080067e9 	.word	0x080067e9
 800665c:	080067e9 	.word	0x080067e9
 8006660:	080067e9 	.word	0x080067e9
 8006664:	08006871 	.word	0x08006871
 8006668:	08006871 	.word	0x08006871
 800666c:	08006871 	.word	0x08006871
 8006670:	080068c5 	.word	0x080068c5
 8006674:	080068f9 	.word	0x080068f9
 8006678:	080068f9 	.word	0x080068f9
 800667c:	080068f9 	.word	0x080068f9
 8006680:	08006a85 	.word	0x08006a85
 8006684:	08006a85 	.word	0x08006a85
 8006688:	08006a85 	.word	0x08006a85
 800668c:	08006a85 	.word	0x08006a85
 8006690:	08006a85 	.word	0x08006a85
 8006694:	08006a85 	.word	0x08006a85
 8006698:	08006a85 	.word	0x08006a85
 800669c:	08006a85 	.word	0x08006a85
 80066a0:	08006a85 	.word	0x08006a85
 80066a4:	08006a85 	.word	0x08006a85
 80066a8:	08006a85 	.word	0x08006a85
 80066ac:	08006a85 	.word	0x08006a85
 80066b0:	08006a85 	.word	0x08006a85
 80066b4:	08006a85 	.word	0x08006a85
 80066b8:	08006a85 	.word	0x08006a85
 80066bc:	08006a85 	.word	0x08006a85
 80066c0:	08006a85 	.word	0x08006a85
 80066c4:	08006a85 	.word	0x08006a85
 80066c8:	08006a85 	.word	0x08006a85
 80066cc:	08006a85 	.word	0x08006a85
 80066d0:	080067e9 	.word	0x080067e9
 80066d4:	08006a85 	.word	0x08006a85
 80066d8:	08006a85 	.word	0x08006a85
 80066dc:	08006a85 	.word	0x08006a85
 80066e0:	08006a85 	.word	0x08006a85
 80066e4:	08006a85 	.word	0x08006a85
 80066e8:	08006a85 	.word	0x08006a85
 80066ec:	08006a85 	.word	0x08006a85
 80066f0:	08006a85 	.word	0x08006a85
 80066f4:	08006a85 	.word	0x08006a85
 80066f8:	08006a85 	.word	0x08006a85
 80066fc:	08006a85 	.word	0x08006a85
 8006700:	08006a85 	.word	0x08006a85
 8006704:	08006a85 	.word	0x08006a85
 8006708:	08006a85 	.word	0x08006a85
 800670c:	08006a85 	.word	0x08006a85
 8006710:	08006a85 	.word	0x08006a85
 8006714:	08006a85 	.word	0x08006a85
 8006718:	0800699b 	.word	0x0800699b
 800671c:	0800699b 	.word	0x0800699b
 8006720:	0800699b 	.word	0x0800699b
 8006724:	0800699b 	.word	0x0800699b
 8006728:	08006a85 	.word	0x08006a85
 800672c:	0800699b 	.word	0x0800699b
 8006730:	08006a85 	.word	0x08006a85
 8006734:	08006a85 	.word	0x08006a85
 8006738:	08006985 	.word	0x08006985
 800673c:	08006a85 	.word	0x08006a85
 8006740:	08006a85 	.word	0x08006a85
 8006744:	08006a85 	.word	0x08006a85
 8006748:	080067e9 	.word	0x080067e9
 800674c:	080069b3 	.word	0x080069b3
 8006750:	080069c7 	.word	0x080069c7
 8006754:	080069c7 	.word	0x080069c7
 8006758:	080069c7 	.word	0x080069c7
 800675c:	080069c7 	.word	0x080069c7
 8006760:	080069f7 	.word	0x080069f7
 8006764:	08006a31 	.word	0x08006a31
 8006768:	08006a31 	.word	0x08006a31
 800676c:	08006a85 	.word	0x08006a85
 8006770:	08006a85 	.word	0x08006a85
 8006774:	08006a85 	.word	0x08006a85
 8006778:	08006a85 	.word	0x08006a85
 800677c:	08006a85 	.word	0x08006a85
 8006780:	08006a85 	.word	0x08006a85
 8006784:	08006a85 	.word	0x08006a85
 8006788:	08006a85 	.word	0x08006a85
 800678c:	08006a85 	.word	0x08006a85
 8006790:	08006a85 	.word	0x08006a85
 8006794:	08006a85 	.word	0x08006a85
 8006798:	08006a85 	.word	0x08006a85
 800679c:	08006a85 	.word	0x08006a85
 80067a0:	08006a85 	.word	0x08006a85
 80067a4:	08006a85 	.word	0x08006a85
 80067a8:	08006a85 	.word	0x08006a85
 80067ac:	08006a85 	.word	0x08006a85
 80067b0:	08006a85 	.word	0x08006a85
 80067b4:	08006a85 	.word	0x08006a85
 80067b8:	08006a85 	.word	0x08006a85
 80067bc:	08006a85 	.word	0x08006a85
 80067c0:	08006a85 	.word	0x08006a85
 80067c4:	08006a85 	.word	0x08006a85
 80067c8:	08006a85 	.word	0x08006a85
 80067cc:	08006a85 	.word	0x08006a85
 80067d0:	08006a85 	.word	0x08006a85
 80067d4:	08006a85 	.word	0x08006a85
 80067d8:	08006a85 	.word	0x08006a85
 80067dc:	08006a85 	.word	0x08006a85
 80067e0:	08006a85 	.word	0x08006a85
 80067e4:	08006a61 	.word	0x08006a61

                switch(int_value) {

                    case 0: case 1: case 2: case 30: case 60:
                        word_bit.modal_group.M4 = On;
 80067e8:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80067ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f0:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 80067f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <gc_execute_block+0xae6>
 80067fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006800:	2b01      	cmp	r3, #1
 8006802:	d005      	beq.n	8006810 <gc_execute_block+0xaf0>
 8006804:	e02b      	b.n	800685e <gc_execute_block+0xb3e>
                        switch(int_value) {

                            case 0: // M0 - program pause
                                gc_block.modal.program_flow = ProgramFlow_Paused;
 8006806:	4bbb      	ldr	r3, [pc, #748]	; (8006af4 <gc_execute_block+0xdd4>)
 8006808:	2203      	movs	r2, #3
 800680a:	f883 2020 	strb.w	r2, [r3, #32]
                                break;
 800680e:	e02e      	b.n	800686e <gc_execute_block+0xb4e>

                            case 1: // M1 - program pause
                                if(hal.signals_cap.stop_disable ? !hal.control.get_state().stop_disable : !sys.flags.optional_stop_disable)
 8006810:	4bb9      	ldr	r3, [pc, #740]	; (8006af8 <gc_execute_block+0xdd8>)
 8006812:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <gc_execute_block+0xb1c>
 8006820:	4bb5      	ldr	r3, [pc, #724]	; (8006af8 <gc_execute_block+0xdd8>)
 8006822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006824:	4798      	blx	r3
 8006826:	4603      	mov	r3, r0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	bf0c      	ite	eq
 8006834:	2301      	moveq	r3, #1
 8006836:	2300      	movne	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	e009      	b.n	8006850 <gc_execute_block+0xb30>
 800683c:	4baf      	ldr	r3, [pc, #700]	; (8006afc <gc_execute_block+0xddc>)
 800683e:	7d9b      	ldrb	r3, [r3, #22]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <gc_execute_block+0xb4c>
                                    gc_block.modal.program_flow = ProgramFlow_OptionalStop;
 8006854:	4ba7      	ldr	r3, [pc, #668]	; (8006af4 <gc_execute_block+0xdd4>)
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2020 	strb.w	r2, [r3, #32]
                                break;
 800685c:	e006      	b.n	800686c <gc_execute_block+0xb4c>

                            default: // M2, M30, M60 - program end and reset
                                gc_block.modal.program_flow = (program_flow_t)int_value;
 800685e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006862:	b2da      	uxtb	r2, r3
 8006864:	4ba3      	ldr	r3, [pc, #652]	; (8006af4 <gc_execute_block+0xdd4>)
 8006866:	f883 2020 	strb.w	r2, [r3, #32]
                        }
                        break;
 800686a:	e132      	b.n	8006ad2 <gc_execute_block+0xdb2>
                                break;
 800686c:	bf00      	nop
                        break;
 800686e:	e130      	b.n	8006ad2 <gc_execute_block+0xdb2>

                    case 3: case 4: case 5:
                        word_bit.modal_group.M7 = On;
 8006870:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006874:	f043 0302 	orr.w	r3, r3, #2
 8006878:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                        gc_block.modal.spindle.state.on = !(int_value == 5);
 800687c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006880:	2b05      	cmp	r3, #5
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2d9      	uxtb	r1, r3
 800688a:	4a9a      	ldr	r2, [pc, #616]	; (8006af4 <gc_execute_block+0xdd4>)
 800688c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8006890:	f361 0300 	bfi	r3, r1, #0, #1
 8006894:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
                        gc_block.modal.spindle.state.ccw = int_value == 4;
 8006898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800689c:	2b04      	cmp	r3, #4
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2d9      	uxtb	r1, r3
 80068a6:	4a93      	ldr	r2, [pc, #588]	; (8006af4 <gc_execute_block+0xdd4>)
 80068a8:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80068ac:	f361 0341 	bfi	r3, r1, #1, #1
 80068b0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
                        sys.override_delay.spindle = On;
 80068b4:	4a91      	ldr	r2, [pc, #580]	; (8006afc <gc_execute_block+0xddc>)
 80068b6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80068ba:	f043 0304 	orr.w	r3, r3, #4
 80068be:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                        break;
 80068c2:	e106      	b.n	8006ad2 <gc_execute_block+0xdb2>

                    case 6:
                        if(settings.tool_change.mode != ToolChange_Ignore) {
 80068c4:	4b8e      	ldr	r3, [pc, #568]	; (8006b00 <gc_execute_block+0xde0>)
 80068c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	f000 80fc 	beq.w	8006ac8 <gc_execute_block+0xda8>
                            if(hal.stream.suspend_read || hal.tool.change)
 80068d0:	4b89      	ldr	r3, [pc, #548]	; (8006af8 <gc_execute_block+0xdd8>)
 80068d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <gc_execute_block+0xbc4>
 80068da:	4b87      	ldr	r3, [pc, #540]	; (8006af8 <gc_execute_block+0xdd8>)
 80068dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <gc_execute_block+0xbd2>
                                word_bit.modal_group.M6 = On;
 80068e4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                            else
                                FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
                        }
                        break;
 80068f0:	e0ea      	b.n	8006ac8 <gc_execute_block+0xda8>
                                FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 80068f2:	2314      	movs	r3, #20
 80068f4:	f004 b9f0 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    case 7: case 8: case 9:
                        word_bit.modal_group.M8 = On;
 80068f8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80068fc:	f043 0304 	orr.w	r3, r3, #4
 8006900:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                        sys.override_delay.coolant = On;
 8006904:	4a7d      	ldr	r2, [pc, #500]	; (8006afc <gc_execute_block+0xddc>)
 8006906:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800690a:	f043 0302 	orr.w	r3, r3, #2
 800690e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                        gc_parser_flags.set_coolant = On;
 8006912:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8006916:	f043 0301 	orr.w	r3, r3, #1
 800691a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 800691e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006922:	2b09      	cmp	r3, #9
 8006924:	d028      	beq.n	8006978 <gc_execute_block+0xc58>
 8006926:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800692a:	2b09      	cmp	r3, #9
 800692c:	f200 80ce 	bhi.w	8006acc <gc_execute_block+0xdac>
 8006930:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006934:	2b07      	cmp	r3, #7
 8006936:	d004      	beq.n	8006942 <gc_execute_block+0xc22>
 8006938:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800693c:	2b08      	cmp	r3, #8
 800693e:	d013      	beq.n	8006968 <gc_execute_block+0xc48>

                            case 9:
                                gc_block.modal.coolant.value = 0;
                                break;
                        }
                        break;
 8006940:	e0c4      	b.n	8006acc <gc_execute_block+0xdac>
                                if(!hal.driver_cap.mist_control)
 8006942:	4b6d      	ldr	r3, [pc, #436]	; (8006af8 <gc_execute_block+0xdd8>)
 8006944:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <gc_execute_block+0xc38>
                                    FAIL(Status_GcodeUnsupportedCommand);
 8006952:	2314      	movs	r3, #20
 8006954:	f004 b9c0 	b.w	800acd8 <gc_execute_block+0x4fb8>
                                gc_block.modal.coolant.mist = On;
 8006958:	4a66      	ldr	r2, [pc, #408]	; (8006af4 <gc_execute_block+0xdd4>)
 800695a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800695e:	f043 0302 	orr.w	r3, r3, #2
 8006962:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
                                break;
 8006966:	e00c      	b.n	8006982 <gc_execute_block+0xc62>
                                gc_block.modal.coolant.flood = On;
 8006968:	4a62      	ldr	r2, [pc, #392]	; (8006af4 <gc_execute_block+0xdd4>)
 800696a:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
                                break;
 8006976:	e004      	b.n	8006982 <gc_execute_block+0xc62>
                                gc_block.modal.coolant.value = 0;
 8006978:	4b5e      	ldr	r3, [pc, #376]	; (8006af4 <gc_execute_block+0xdd4>)
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                                break;
 8006980:	bf00      	nop
                        break;
 8006982:	e0a3      	b.n	8006acc <gc_execute_block+0xdac>

                    case 56:
                        if(!settings.parking.flags.enable_override_control) // TODO: check if enabled?
 8006984:	4b5e      	ldr	r3, [pc, #376]	; (8006b00 <gc_execute_block+0xde0>)
 8006986:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <gc_execute_block+0xc7a>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8006994:	2314      	movs	r3, #20
 8006996:	f004 b99f 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        // no break;
                    case 48: case 49: case 50: case 51: case 53:
                        word_bit.modal_group.M9 = On;
 800699a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800699e:	f043 0308 	orr.w	r3, r3, #8
 80069a2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                        gc_block.override_command = (override_mode_t)int_value;
 80069a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	4b51      	ldr	r3, [pc, #324]	; (8006af4 <gc_execute_block+0xdd4>)
 80069ae:	705a      	strb	r2, [r3, #1]
                        break;
 80069b0:	e08f      	b.n	8006ad2 <gc_execute_block+0xdb2>

                    case 61:
                        set_tool = true;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
                        word_bit.modal_group.M6 = On; //??
 80069b8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                        break;
 80069c4:	e085      	b.n	8006ad2 <gc_execute_block+0xdb2>

                    case 62:
                    case 63:
                    case 64:
                    case 65:
                        if(hal.port.digital_out == NULL || hal.port.num_digital_out == 0)
 80069c6:	4b4c      	ldr	r3, [pc, #304]	; (8006af8 <gc_execute_block+0xdd8>)
 80069c8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <gc_execute_block+0xcba>
 80069d0:	4b49      	ldr	r3, [pc, #292]	; (8006af8 <gc_execute_block+0xdd8>)
 80069d2:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <gc_execute_block+0xcc0>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 80069da:	2314      	movs	r3, #20
 80069dc:	f004 b97c 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        word_bit.modal_group.M10 = On;
 80069e0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80069e4:	f043 0310 	orr.w	r3, r3, #16
 80069e8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                        port_command = (io_mcode_t)int_value;
 80069ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069f0:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
                        break;
 80069f4:	e06d      	b.n	8006ad2 <gc_execute_block+0xdb2>

                    case 66:
                        if(hal.port.wait_on_input == NULL || (hal.port.num_digital_in == 0 && hal.port.num_analog_in == 0))
 80069f6:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <gc_execute_block+0xdd8>)
 80069f8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <gc_execute_block+0xcf4>
 8006a00:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <gc_execute_block+0xdd8>)
 8006a02:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d107      	bne.n	8006a1a <gc_execute_block+0xcfa>
 8006a0a:	4b3b      	ldr	r3, [pc, #236]	; (8006af8 <gc_execute_block+0xdd8>)
 8006a0c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <gc_execute_block+0xcfa>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8006a14:	2314      	movs	r3, #20
 8006a16:	f004 b95f 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        word_bit.modal_group.M10 = On;
 8006a1a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006a1e:	f043 0310 	orr.w	r3, r3, #16
 8006a22:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                        port_command = (io_mcode_t)int_value;
 8006a26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a2a:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
                        break;
 8006a2e:	e050      	b.n	8006ad2 <gc_execute_block+0xdb2>

                    case 67:
                    case 68:
                        if(hal.port.analog_out == NULL || hal.port.num_analog_out == 0)
 8006a30:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <gc_execute_block+0xdd8>)
 8006a32:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d004      	beq.n	8006a44 <gc_execute_block+0xd24>
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	; (8006af8 <gc_execute_block+0xdd8>)
 8006a3c:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <gc_execute_block+0xd2a>
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8006a44:	2314      	movs	r3, #20
 8006a46:	f004 b947 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        word_bit.modal_group.M10 = On;
 8006a4a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006a4e:	f043 0310 	orr.w	r3, r3, #16
 8006a52:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                        port_command = (io_mcode_t)int_value;
 8006a56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a5a:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
                        break;
 8006a5e:	e038      	b.n	8006ad2 <gc_execute_block+0xdb2>
                        }
                        return Status_OK;
*/

                    case 99:
                        word_bit.modal_group.M4 = On;
 8006a60:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8006a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a68:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
                        gc_block.modal.program_flow = ProgramFlow_Return;
 8006a6c:	4b21      	ldr	r3, [pc, #132]	; (8006af4 <gc_execute_block+0xdd4>)
 8006a6e:	2263      	movs	r2, #99	; 0x63
 8006a70:	f883 2020 	strb.w	r2, [r3, #32]
                        if(grbl.on_macro_return == NULL)
 8006a74:	4b23      	ldr	r3, [pc, #140]	; (8006b04 <gc_execute_block+0xde4>)
 8006a76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d128      	bne.n	8006ad0 <gc_execute_block+0xdb0>
                            FAIL(Status_GcodeUnsupportedCommand);
 8006a7e:	2314      	movs	r3, #20
 8006a80:	f004 b92a 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        break;

                    default:
                        if(hal.user_mcode.check && (gc_block.user_mcode = hal.user_mcode.check((user_mcode_t)int_value))) {
 8006a84:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <gc_execute_block+0xdd8>)
 8006a86:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d019      	beq.n	8006ac2 <gc_execute_block+0xda2>
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <gc_execute_block+0xdd8>)
 8006a90:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006a94:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006a98:	b292      	uxth	r2, r2
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4798      	blx	r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <gc_execute_block+0xdd4>)
 8006aa4:	805a      	strh	r2, [r3, #2]
 8006aa6:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <gc_execute_block+0xdd4>)
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <gc_execute_block+0xda2>
                            is_user_mcode = true;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                            word_bit.modal_group.M10 = On;
 8006ab4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8006ab8:	f043 0310 	orr.w	r3, r3, #16
 8006abc:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8006ac0:	e007      	b.n	8006ad2 <gc_execute_block+0xdb2>
                        } else
                            FAIL(Status_GcodeUnsupportedCommand); // [Unsupported M command]
 8006ac2:	2314      	movs	r3, #20
 8006ac4:	f004 b908 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <gc_execute_block+0xdb2>
                        break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <gc_execute_block+0xdb2>
                        break;
 8006ad0:	bf00      	nop
                } // end M-value switch

                // Check for more than one command per modal group violations in the current block
                // NOTE: Variable 'word_bit' is always assigned, if the command is valid.
                if (command_words.mask & word_bit.modal_group.mask)
 8006ad2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad8:	4013      	ands	r3, r2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <gc_execute_block+0xdc4>
                    FAIL(Status_GcodeModalGroupViolation);
 8006ade:	2315      	movs	r3, #21
 8006ae0:	f004 b8fa 	b.w	800acd8 <gc_execute_block+0x4fb8>

                command_words.mask |= word_bit.modal_group.mask;
 8006ae4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                break;
 8006af0:	e1fc      	b.n	8006eec <gc_execute_block+0x11cc>
 8006af2:	bf00      	nop
 8006af4:	20001470 	.word	0x20001470
 8006af8:	200016a0 	.word	0x200016a0
 8006afc:	20001520 	.word	0x20001520
 8006b00:	20001cf0 	.word	0x20001cf0
 8006b04:	200015b8 	.word	0x200015b8

                /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
                legal g-code words and stores their value. Error-checking is performed later since some
                words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */

                word_bit.parameter.mask = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	66fb      	str	r3, [r7, #108]	; 0x6c

                switch(letter) {
 8006b0c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8006b10:	3b24      	subs	r3, #36	; 0x24
 8006b12:	2b36      	cmp	r3, #54	; 0x36
 8006b14:	f200 81c0 	bhi.w	8006e98 <gc_execute_block+0x1178>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <gc_execute_block+0xe00>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006e6d 	.word	0x08006e6d
 8006b24:	08006e99 	.word	0x08006e99
 8006b28:	08006e99 	.word	0x08006e99
 8006b2c:	08006e99 	.word	0x08006e99
 8006b30:	08006e99 	.word	0x08006e99
 8006b34:	08006e99 	.word	0x08006e99
 8006b38:	08006e99 	.word	0x08006e99
 8006b3c:	08006e99 	.word	0x08006e99
 8006b40:	08006e99 	.word	0x08006e99
 8006b44:	08006e99 	.word	0x08006e99
 8006b48:	08006e99 	.word	0x08006e99
 8006b4c:	08006e99 	.word	0x08006e99
 8006b50:	08006e99 	.word	0x08006e99
 8006b54:	08006e99 	.word	0x08006e99
 8006b58:	08006e99 	.word	0x08006e99
 8006b5c:	08006e99 	.word	0x08006e99
 8006b60:	08006e99 	.word	0x08006e99
 8006b64:	08006e99 	.word	0x08006e99
 8006b68:	08006e99 	.word	0x08006e99
 8006b6c:	08006e99 	.word	0x08006e99
 8006b70:	08006e99 	.word	0x08006e99
 8006b74:	08006e99 	.word	0x08006e99
 8006b78:	08006e99 	.word	0x08006e99
 8006b7c:	08006e99 	.word	0x08006e99
 8006b80:	08006e99 	.word	0x08006e99
 8006b84:	08006e99 	.word	0x08006e99
 8006b88:	08006e99 	.word	0x08006e99
 8006b8c:	08006e99 	.word	0x08006e99
 8006b90:	08006e99 	.word	0x08006e99
 8006b94:	08006e99 	.word	0x08006e99
 8006b98:	08006e99 	.word	0x08006e99
 8006b9c:	08006e99 	.word	0x08006e99
 8006ba0:	08006bfd 	.word	0x08006bfd
 8006ba4:	08006c11 	.word	0x08006c11
 8006ba8:	08006c25 	.word	0x08006c25
 8006bac:	08006e99 	.word	0x08006e99
 8006bb0:	08006c39 	.word	0x08006c39
 8006bb4:	08006c73 	.word	0x08006c73
 8006bb8:	08006c93 	.word	0x08006c93
 8006bbc:	08006cb3 	.word	0x08006cb3
 8006bc0:	08006cd3 	.word	0x08006cd3
 8006bc4:	08006e99 	.word	0x08006e99
 8006bc8:	08006d0d 	.word	0x08006d0d
 8006bcc:	08006d39 	.word	0x08006d39
 8006bd0:	08006d73 	.word	0x08006d73
 8006bd4:	08006d87 	.word	0x08006d87
 8006bd8:	08006d9b 	.word	0x08006d9b
 8006bdc:	08006daf 	.word	0x08006daf
 8006be0:	08006dc3 	.word	0x08006dc3
 8006be4:	08006e99 	.word	0x08006e99
 8006be8:	08006e99 	.word	0x08006e99
 8006bec:	08006e99 	.word	0x08006e99
 8006bf0:	08006e0d 	.word	0x08006e0d
 8006bf4:	08006e2d 	.word	0x08006e2d
 8006bf8:	08006e4d 	.word	0x08006e4d
                        gc_block.values.xyz[C_AXIS] = value;
                        break;
#endif

                    case 'D':
                        word_bit.parameter.d = On;
 8006bfc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c04:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                        gc_block.values.d = value;
 8006c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0a:	4ab2      	ldr	r2, [pc, #712]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006c0c:	6313      	str	r3, [r2, #48]	; 0x30
                        break;
 8006c0e:	e146      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'E':
                        word_bit.parameter.e = On;
 8006c10:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                        gc_block.values.e = value;
 8006c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c1e:	4aad      	ldr	r2, [pc, #692]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006c20:	6353      	str	r3, [r2, #52]	; 0x34
                        break;
 8006c22:	e13c      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'F':
                        word_bit.parameter.f = On;
 8006c24:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006c28:	f043 0302 	orr.w	r3, r3, #2
 8006c2c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                        gc_block.values.f = value;
 8006c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c32:	4aa8      	ldr	r2, [pc, #672]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006c34:	6393      	str	r3, [r2, #56]	; 0x38
                        break;
 8006c36:	e132      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'H':
                        if (mantissa > 0)
 8006c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <gc_execute_block+0xf26>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8006c40:	2317      	movs	r3, #23
 8006c42:	f004 b849 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        word_bit.parameter.h = On;
 8006c46:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006c4a:	f043 0308 	orr.w	r3, r3, #8
 8006c4e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                        gc_block.values.h = isnan(value) ? 0xFFFFFFFF : int_value;
 8006c52:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006c56:	eef4 7a67 	vcmp.f32	s15, s15
 8006c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5e:	d602      	bvs.n	8006c66 <gc_execute_block+0xf46>
 8006c60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c64:	e001      	b.n	8006c6a <gc_execute_block+0xf4a>
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	4a9a      	ldr	r2, [pc, #616]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                        break;
 8006c70:	e115      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'I':
                        ijk_words.i = On;
 8006c72:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        word_bit.parameter.i = On;
 8006c7e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006c82:	f043 0310 	orr.w	r3, r3, #16
 8006c86:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                        gc_block.values.ijk[I_VALUE] = value;
 8006c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c8c:	4a91      	ldr	r2, [pc, #580]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006c8e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        break;
 8006c90:	e105      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'J':
                        ijk_words.j = On;
 8006c92:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8006c96:	f043 0302 	orr.w	r3, r3, #2
 8006c9a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        word_bit.parameter.j = On;
 8006c9e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006ca2:	f043 0320 	orr.w	r3, r3, #32
 8006ca6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                        gc_block.values.ijk[J_VALUE] = value;
 8006caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cac:	4a89      	ldr	r2, [pc, #548]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006cae:	6413      	str	r3, [r2, #64]	; 0x40
                        break;
 8006cb0:	e0f5      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'K':
                        ijk_words.k = On;
 8006cb2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8006cb6:	f043 0304 	orr.w	r3, r3, #4
 8006cba:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                        word_bit.parameter.k = On;
 8006cbe:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                        gc_block.values.ijk[K_VALUE] = value;
 8006cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ccc:	4a81      	ldr	r2, [pc, #516]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006cce:	6453      	str	r3, [r2, #68]	; 0x44
                        break;
 8006cd0:	e0e5      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'L':
                        if (mantissa > 0)
 8006cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <gc_execute_block+0xfc0>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8006cda:	2317      	movs	r3, #23
 8006cdc:	f003 bffc 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        word_bit.parameter.l = On;
 8006ce0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006ce4:	f043 0310 	orr.w	r3, r3, #16
 8006ce8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                        gc_block.values.l = isnan(value) ? 0xFF : (uint8_t)int_value;
 8006cec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006cf0:	eef4 7a67 	vcmp.f32	s15, s15
 8006cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf8:	d603      	bvs.n	8006d02 <gc_execute_block+0xfe2>
 8006cfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	e000      	b.n	8006d04 <gc_execute_block+0xfe4>
 8006d02:	23ff      	movs	r3, #255	; 0xff
 8006d04:	4a73      	ldr	r2, [pc, #460]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006d06:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
                        break;
 8006d0a:	e0c8      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'N':
                        word_bit.parameter.n = On;
 8006d0c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d14:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                        gc_block.values.n = (int32_t)truncf(value);
 8006d18:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d20:	f020 f8df 	bl	8026ee2 <truncf>
 8006d24:	eef0 7a40 	vmov.f32	s15, s0
 8006d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d2c:	ee17 2a90 	vmov	r2, s15
 8006d30:	4b68      	ldr	r3, [pc, #416]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                        break;
 8006d36:	e0b2      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'O':
                        if (mantissa > 0)
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <gc_execute_block+0x1026>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8006d40:	2317      	movs	r3, #23
 8006d42:	f003 bfc9 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        word_bit.parameter.o = On;
 8006d46:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                        gc_block.values.o = isnan(value) ? 0xFFFFFFFF : int_value;
 8006d52:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006d56:	eef4 7a67 	vcmp.f32	s15, s15
 8006d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5e:	d602      	bvs.n	8006d66 <gc_execute_block+0x1046>
 8006d60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d64:	e001      	b.n	8006d6a <gc_execute_block+0x104a>
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	4a5a      	ldr	r2, [pc, #360]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006d6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                        break;
 8006d70:	e095      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'P': // NOTE: For certain commands, P value must be an integer, but none of these commands are supported.
                        word_bit.parameter.p = On;
 8006d72:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                        gc_block.values.p = value;
 8006d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d80:	4a54      	ldr	r2, [pc, #336]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006d82:	6513      	str	r3, [r2, #80]	; 0x50
                        break;
 8006d84:	e08b      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'Q': // may be used for user defined mcodes or G61,G76
                        word_bit.parameter.q = On;
 8006d86:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006d8a:	f043 0302 	orr.w	r3, r3, #2
 8006d8e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                        gc_block.values.q = value;
 8006d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d94:	4a4f      	ldr	r2, [pc, #316]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006d96:	6553      	str	r3, [r2, #84]	; 0x54
                        break;
 8006d98:	e081      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'R':
                        word_bit.parameter.r = On;
 8006d9a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006d9e:	f043 0304 	orr.w	r3, r3, #4
 8006da2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                        gc_block.values.r = value;
 8006da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da8:	4a4a      	ldr	r2, [pc, #296]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006daa:	6593      	str	r3, [r2, #88]	; 0x58
                        break;
 8006dac:	e077      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'S':
                        word_bit.parameter.s = On;
 8006dae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006db2:	f043 0308 	orr.w	r3, r3, #8
 8006db6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                        gc_block.values.s = value;
 8006dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dbc:	4a45      	ldr	r2, [pc, #276]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006dbe:	65d3      	str	r3, [r2, #92]	; 0x5c
                        break;
 8006dc0:	e06d      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'T':
                        if (mantissa > 0)
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <gc_execute_block+0x10b0>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8006dca:	2317      	movs	r3, #23
 8006dcc:	f003 bf84 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        if (int_value > MAX_TOOL_NUMBER)
 8006dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d102      	bne.n	8006de0 <gc_execute_block+0x10c0>
                            FAIL(Status_GcodeIllegalToolTableEntry);
 8006dda:	2326      	movs	r3, #38	; 0x26
 8006ddc:	f003 bf7c 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        word_bit.parameter.t = On;
 8006de0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006de4:	f043 0310 	orr.w	r3, r3, #16
 8006de8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                        gc_block.values.t = isnan(value) ? 0xFFFFFFFF : int_value;
 8006dec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006df0:	eef4 7a67 	vcmp.f32	s15, s15
 8006df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df8:	d602      	bvs.n	8006e00 <gc_execute_block+0x10e0>
 8006dfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dfe:	e001      	b.n	8006e04 <gc_execute_block+0x10e4>
 8006e00:	f04f 33ff 	mov.w	r3, #4294967295
 8006e04:	4a33      	ldr	r2, [pc, #204]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006e06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        break;
 8006e0a:	e048      	b.n	8006e9e <gc_execute_block+0x117e>
                      gc_block.values.xyz[V_AXIS] = value;
                      break;
#endif

                  case 'X':
                        axis_words.x = On;
 8006e0c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                        word_bit.parameter.x = On;
 8006e18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e1c:	f043 0301 	orr.w	r3, r3, #1
 8006e20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                        gc_block.values.xyz[X_AXIS] = value;
 8006e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e26:	4a2b      	ldr	r2, [pc, #172]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006e28:	6613      	str	r3, [r2, #96]	; 0x60
                        break;
 8006e2a:	e038      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'Y':
                        axis_words.y = On;
 8006e2c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006e30:	f043 0302 	orr.w	r3, r3, #2
 8006e34:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                        word_bit.parameter.y = On;
 8006e38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e3c:	f043 0302 	orr.w	r3, r3, #2
 8006e40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                        gc_block.values.xyz[Y_AXIS] = value;
 8006e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e46:	4a23      	ldr	r2, [pc, #140]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006e48:	6653      	str	r3, [r2, #100]	; 0x64
                        break;
 8006e4a:	e028      	b.n	8006e9e <gc_execute_block+0x117e>

                    case 'Z':
                        axis_words.z = On;
 8006e4c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006e50:	f043 0304 	orr.w	r3, r3, #4
 8006e54:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                        word_bit.parameter.z = On;
 8006e58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e5c:	f043 0304 	orr.w	r3, r3, #4
 8006e60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                        gc_block.values.xyz[Z_AXIS] = value;
 8006e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e66:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006e68:	6693      	str	r3, [r2, #104]	; 0x68
                        break;
 8006e6a:	e018      	b.n	8006e9e <gc_execute_block+0x117e>

                    case '$':
                        if(mantissa > 0)
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <gc_execute_block+0x115a>
                            FAIL(Status_GcodeCommandValueNotInteger);
 8006e74:	2317      	movs	r3, #23
 8006e76:	f003 bf2f 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        word_bit.parameter.$ = On;
 8006e7a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006e7e:	f043 0301 	orr.w	r3, r3, #1
 8006e82:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                        gc_block.values.$ = (int32_t)value;
 8006e86:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e8e:	ee17 2a90 	vmov	r2, s15
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006e94:	67da      	str	r2, [r3, #124]	; 0x7c
                        break;
 8006e96:	e002      	b.n	8006e9e <gc_execute_block+0x117e>

                    default: FAIL(Status_GcodeUnsupportedCommand);
 8006e98:	2314      	movs	r3, #20
 8006e9a:	f003 bf1d 	b.w	800acd8 <gc_execute_block+0x4fb8>

                } // end parameter letter switch

                // NOTE: Variable 'word_bit' is always assigned, if the non-command letter is valid.
                if (gc_block.words.mask & word_bit.parameter.mask)
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <gc_execute_block+0x11b4>)
 8006ea0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <gc_execute_block+0x1192>
                    FAIL(Status_GcodeWordRepeated); // [Word repeated]
 8006eac:	2319      	movs	r3, #25
 8006eae:	f003 bf13 	b.w	800acd8 <gc_execute_block+0x4fb8>

                // Check for invalid negative values for words F, H, N, P, T, and S.
                // NOTE: Negative value check is done here simply for code-efficiency.
                if ((word_bit.parameter.mask & positive_only_words.mask) && value < 0.0f)
 8006eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006eb4:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <gc_execute_block+0x11b8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00e      	beq.n	8006edc <gc_execute_block+0x11bc>
 8006ebe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eca:	d507      	bpl.n	8006edc <gc_execute_block+0x11bc>
                    FAIL(Status_NegativeValue); // [Word value cannot be negative]
 8006ecc:	2304      	movs	r3, #4
 8006ece:	f003 bf03 	b.w	800acd8 <gc_execute_block+0x4fb8>
 8006ed2:	bf00      	nop
 8006ed4:	20001470 	.word	0x20001470
 8006ed8:	08032914 	.word	0x08032914

                gc_block.words.mask |= word_bit.parameter.mask; // Flag to indicate parameter assigned.
 8006edc:	4ba0      	ldr	r3, [pc, #640]	; (8007160 <gc_execute_block+0x1440>)
 8006ede:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	4a9e      	ldr	r2, [pc, #632]	; (8007160 <gc_execute_block+0x1440>)
 8006ee8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    while ((letter = block[char_counter++]) != '\0') { // Loop until no more g-code words in block.
 8006eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	67ba      	str	r2, [r7, #120]	; 0x78
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 8006efc:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f47e afaf 	bne.w	8005e64 <gc_execute_block+0x144>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

    // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
    // command has been sent. If so, set axis command to current motion mode.
    if (axis_words.mask && !axis_command)
 8006f06:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d006      	beq.n	8006f1c <gc_execute_block+0x11fc>
 8006f0e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <gc_execute_block+0x11fc>
        axis_command = AxisCommand_MotionMode; // Assign implicit motion-mode
 8006f16:	2302      	movs	r3, #2
 8006f18:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

    if(gc_state.tool_change && axis_command == AxisCommand_MotionMode && !gc_parser_flags.jog_motion)
 8006f1c:	4b91      	ldr	r3, [pc, #580]	; (8007164 <gc_execute_block+0x1444>)
 8006f1e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00d      	beq.n	8006f42 <gc_execute_block+0x1222>
 8006f26:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d109      	bne.n	8006f42 <gc_execute_block+0x1222>
 8006f2e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <gc_execute_block+0x1222>
        FAIL(Status_GcodeToolChangePending); // [Motions (except jogging) not allowed when changing tool]
 8006f3c:	2328      	movs	r3, #40	; 0x28
 8006f3e:	f003 becb 	b.w	800acd8 <gc_execute_block+0x4fb8>

    // Check for valid line number N value.
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.words.n && gc_block.values.n > MAX_LINE_NUMBER)
 8006f42:	4b87      	ldr	r3, [pc, #540]	; (8007160 <gc_execute_block+0x1440>)
 8006f44:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <gc_execute_block+0x1244>
 8006f52:	4b83      	ldr	r3, [pc, #524]	; (8007160 <gc_execute_block+0x1440>)
 8006f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f58:	4a83      	ldr	r2, [pc, #524]	; (8007168 <gc_execute_block+0x1448>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	dd02      	ble.n	8006f64 <gc_execute_block+0x1244>
        FAIL(Status_GcodeInvalidLineNumber); // [Exceeds max line number]
 8006f5e:	231b      	movs	r3, #27
 8006f60:	f003 beba 	b.w	800acd8 <gc_execute_block+0x4fb8>
    // [1. Comments ]: MSG's may be supported by driver layer. Comment handling performed by protocol.

    // [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
    //   is not defined after switching between G93, G94 and G95.
    // NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
    if (gc_parser_flags.jog_motion) {
 8006f64:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d019      	beq.n	8006fa6 <gc_execute_block+0x1286>

        if(!gc_block.words.f)
 8006f72:	4b7b      	ldr	r3, [pc, #492]	; (8007160 <gc_execute_block+0x1440>)
 8006f74:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <gc_execute_block+0x1268>
            FAIL(Status_GcodeUndefinedFeedRate);
 8006f82:	2316      	movs	r3, #22
 8006f84:	f003 bea8 	b.w	800acd8 <gc_execute_block+0x4fb8>

        if (gc_block.modal.units_imperial)
 8006f88:	4b75      	ldr	r3, [pc, #468]	; (8007160 <gc_execute_block+0x1440>)
 8006f8a:	7adb      	ldrb	r3, [r3, #11]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d07c      	beq.n	800708a <gc_execute_block+0x136a>
            gc_block.values.f *= MM_PER_INCH;
 8006f90:	4b73      	ldr	r3, [pc, #460]	; (8007160 <gc_execute_block+0x1440>)
 8006f92:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006f96:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800716c <gc_execute_block+0x144c>
 8006f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f9e:	4b70      	ldr	r3, [pc, #448]	; (8007160 <gc_execute_block+0x1440>)
 8006fa0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8006fa4:	e071      	b.n	800708a <gc_execute_block+0x136a>

    } else if(gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 8006fa6:	4b6e      	ldr	r3, [pc, #440]	; (8007160 <gc_execute_block+0x1440>)
 8006fa8:	891b      	ldrh	r3, [r3, #8]
 8006faa:	2b21      	cmp	r3, #33	; 0x21
 8006fac:	d129      	bne.n	8007002 <gc_execute_block+0x12e2>

        if (!gc_block.words.k) {
 8006fae:	4b6c      	ldr	r3, [pc, #432]	; (8007160 <gc_execute_block+0x1440>)
 8006fb0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d104      	bne.n	8006fc8 <gc_execute_block+0x12a8>
            gc_block.values.k = gc_state.distance_per_rev;
 8006fbe:	4b69      	ldr	r3, [pc, #420]	; (8007164 <gc_execute_block+0x1444>)
 8006fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc2:	4a67      	ldr	r2, [pc, #412]	; (8007160 <gc_execute_block+0x1440>)
 8006fc4:	6493      	str	r3, [r2, #72]	; 0x48
 8006fc6:	e060      	b.n	800708a <gc_execute_block+0x136a>
        } else {
            gc_block.words.k = Off;
 8006fc8:	4a65      	ldr	r2, [pc, #404]	; (8007160 <gc_execute_block+0x1440>)
 8006fca:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 8006fce:	f36f 1386 	bfc	r3, #6, #1
 8006fd2:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            gc_block.values.k = gc_block.modal.units_imperial ? gc_block.values.ijk[K_VALUE] *= MM_PER_INCH : gc_block.values.ijk[K_VALUE];
 8006fd6:	4b62      	ldr	r3, [pc, #392]	; (8007160 <gc_execute_block+0x1440>)
 8006fd8:	7adb      	ldrb	r3, [r3, #11]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00c      	beq.n	8006ff8 <gc_execute_block+0x12d8>
 8006fde:	4b60      	ldr	r3, [pc, #384]	; (8007160 <gc_execute_block+0x1440>)
 8006fe0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006fe4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800716c <gc_execute_block+0x144c>
 8006fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fec:	4b5c      	ldr	r3, [pc, #368]	; (8007160 <gc_execute_block+0x1440>)
 8006fee:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8006ff2:	4b5b      	ldr	r3, [pc, #364]	; (8007160 <gc_execute_block+0x1440>)
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff6:	e001      	b.n	8006ffc <gc_execute_block+0x12dc>
 8006ff8:	4b59      	ldr	r3, [pc, #356]	; (8007160 <gc_execute_block+0x1440>)
 8006ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffc:	4a58      	ldr	r2, [pc, #352]	; (8007160 <gc_execute_block+0x1440>)
 8006ffe:	6493      	str	r3, [r2, #72]	; 0x48
 8007000:	e043      	b.n	800708a <gc_execute_block+0x136a>
        }

    } else if (gc_block.modal.feed_mode == FeedMode_InverseTime) { // = G93
 8007002:	4b57      	ldr	r3, [pc, #348]	; (8007160 <gc_execute_block+0x1440>)
 8007004:	7a9b      	ldrb	r3, [r3, #10]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d116      	bne.n	8007038 <gc_execute_block+0x1318>
        // NOTE: G38 can also operate in inverse time, but is undefined as an error. Missing F word check added here.
        if (axis_command == AxisCommand_MotionMode) {
 800700a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800700e:	2b02      	cmp	r3, #2
 8007010:	d13b      	bne.n	800708a <gc_execute_block+0x136a>
            if (!(gc_block.modal.motion == MotionMode_None || gc_block.modal.motion == MotionMode_Seek)) {
 8007012:	4b53      	ldr	r3, [pc, #332]	; (8007160 <gc_execute_block+0x1440>)
 8007014:	891b      	ldrh	r3, [r3, #8]
 8007016:	2b50      	cmp	r3, #80	; 0x50
 8007018:	d037      	beq.n	800708a <gc_execute_block+0x136a>
 800701a:	4b51      	ldr	r3, [pc, #324]	; (8007160 <gc_execute_block+0x1440>)
 800701c:	891b      	ldrh	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d033      	beq.n	800708a <gc_execute_block+0x136a>
                if (!gc_block.words.f)
 8007022:	4b4f      	ldr	r3, [pc, #316]	; (8007160 <gc_execute_block+0x1440>)
 8007024:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d12b      	bne.n	800708a <gc_execute_block+0x136a>
                    FAIL(Status_GcodeUndefinedFeedRate); // [F word missing]
 8007032:	2316      	movs	r3, #22
 8007034:	f003 be50 	b.w	800acd8 <gc_execute_block+0x4fb8>
        // NOTE: If in G93 mode or switched into it from G94, just keep F value as initialized zero or passed F word
        // value in the block. If no F word is passed with a motion command that requires a feed rate, this will error
        // out in the motion modes error-checking. However, if no F word is passed with NO motion command that requires
        // a feed rate, we simply move on and the state feed rate value gets updated to zero and remains undefined.

    } else if (gc_block.modal.feed_mode == FeedMode_UnitsPerMin || gc_block.modal.feed_mode == FeedMode_UnitsPerRev) {
 8007038:	4b49      	ldr	r3, [pc, #292]	; (8007160 <gc_execute_block+0x1440>)
 800703a:	7a9b      	ldrb	r3, [r3, #10]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <gc_execute_block+0x1328>
 8007040:	4b47      	ldr	r3, [pc, #284]	; (8007160 <gc_execute_block+0x1440>)
 8007042:	7a9b      	ldrb	r3, [r3, #10]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d120      	bne.n	800708a <gc_execute_block+0x136a>
          // if F word passed, ensure value is in mm/min or mm/rev depending on mode, otherwise push last state value.
        if (!gc_block.words.f) {
 8007048:	4b45      	ldr	r3, [pc, #276]	; (8007160 <gc_execute_block+0x1440>)
 800704a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <gc_execute_block+0x134e>
            if(gc_block.modal.feed_mode == gc_state.modal.feed_mode)
 8007058:	4b41      	ldr	r3, [pc, #260]	; (8007160 <gc_execute_block+0x1440>)
 800705a:	7a9a      	ldrb	r2, [r3, #10]
 800705c:	4b41      	ldr	r3, [pc, #260]	; (8007164 <gc_execute_block+0x1444>)
 800705e:	789b      	ldrb	r3, [r3, #2]
 8007060:	429a      	cmp	r2, r3
 8007062:	d112      	bne.n	800708a <gc_execute_block+0x136a>
                gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 8007064:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <gc_execute_block+0x1444>)
 8007066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007068:	4a3d      	ldr	r2, [pc, #244]	; (8007160 <gc_execute_block+0x1440>)
 800706a:	6393      	str	r3, [r2, #56]	; 0x38
 800706c:	e00d      	b.n	800708a <gc_execute_block+0x136a>
        } else if (gc_block.modal.units_imperial)
 800706e:	4b3c      	ldr	r3, [pc, #240]	; (8007160 <gc_execute_block+0x1440>)
 8007070:	7adb      	ldrb	r3, [r3, #11]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <gc_execute_block+0x136a>
            gc_block.values.f *= MM_PER_INCH;
 8007076:	4b3a      	ldr	r3, [pc, #232]	; (8007160 <gc_execute_block+0x1440>)
 8007078:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800707c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800716c <gc_execute_block+0x144c>
 8007080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007084:	4b36      	ldr	r3, [pc, #216]	; (8007160 <gc_execute_block+0x1440>)
 8007086:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    } // else, switching to G94 from G93, so don't push last state feed rate. Its undefined or the passed F word value.

    // bit_false(gc_block.words,bit(Word_F)); // NOTE: Single-meaning value word. Set at end of error-checking.

    // [4. Set spindle speed and address spindle ]: S or D is negative (done.)
    if(gc_block.words.$) {
 800708a:	4b35      	ldr	r3, [pc, #212]	; (8007160 <gc_execute_block+0x1440>)
 800708c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 8096 	beq.w	80071c8 <gc_execute_block+0x14a8>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800709c:	4b30      	ldr	r3, [pc, #192]	; (8007160 <gc_execute_block+0x1440>)
 800709e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	b2db      	uxtb	r3, r3
                                    (command_words.G0 && (gc_block.modal.motion == MotionMode_SpindleSynchronized ||
                                                           gc_block.modal.motion == MotionMode_RigidTapping ||
                                                            gc_block.modal.motion == MotionMode_Threading)) ||
                                      command_words.G14 ||
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d006      	beq.n	80070ba <gc_execute_block+0x139a>
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 80070ac:	4b30      	ldr	r3, [pc, #192]	; (8007170 <gc_execute_block+0x1450>)
 80070ae:	789b      	ldrb	r3, [r3, #2]
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d026      	beq.n	8007108 <gc_execute_block+0x13e8>
                                    (command_words.G0 && (gc_block.modal.motion == MotionMode_SpindleSynchronized ||
 80070ba:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	b2db      	uxtb	r3, r3
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00d      	beq.n	80070e4 <gc_execute_block+0x13c4>
                                    (command_words.G0 && (gc_block.modal.motion == MotionMode_SpindleSynchronized ||
 80070c8:	4b25      	ldr	r3, [pc, #148]	; (8007160 <gc_execute_block+0x1440>)
 80070ca:	891b      	ldrh	r3, [r3, #8]
 80070cc:	2b21      	cmp	r3, #33	; 0x21
 80070ce:	d01b      	beq.n	8007108 <gc_execute_block+0x13e8>
                                                           gc_block.modal.motion == MotionMode_RigidTapping ||
 80070d0:	4b23      	ldr	r3, [pc, #140]	; (8007160 <gc_execute_block+0x1440>)
 80070d2:	891b      	ldrh	r3, [r3, #8]
                                    (command_words.G0 && (gc_block.modal.motion == MotionMode_SpindleSynchronized ||
 80070d4:	f240 124b 	movw	r2, #331	; 0x14b
 80070d8:	4293      	cmp	r3, r2
 80070da:	d015      	beq.n	8007108 <gc_execute_block+0x13e8>
                                                            gc_block.modal.motion == MotionMode_Threading)) ||
 80070dc:	4b20      	ldr	r3, [pc, #128]	; (8007160 <gc_execute_block+0x1440>)
 80070de:	891b      	ldrh	r3, [r3, #8]
                                                           gc_block.modal.motion == MotionMode_RigidTapping ||
 80070e0:	2b4c      	cmp	r3, #76	; 0x4c
 80070e2:	d011      	beq.n	8007108 <gc_execute_block+0x13e8>
                                                            gc_block.modal.motion == MotionMode_Threading)) ||
 80070e4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <gc_execute_block+0x13e8>
                                       (command_words.M9 && gc_block.override_command == Override_SpindleSpeed);
 80070f2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	b2db      	uxtb	r3, r3
                                      command_words.G14 ||
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <gc_execute_block+0x13ec>
                                       (command_words.M9 && gc_block.override_command == Override_SpindleSpeed);
 8007100:	4b17      	ldr	r3, [pc, #92]	; (8007160 <gc_execute_block+0x1440>)
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b33      	cmp	r3, #51	; 0x33
 8007106:	d101      	bne.n	800710c <gc_execute_block+0x13ec>
                                      command_words.G14 ||
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <gc_execute_block+0x13ee>
 800710c:	2300      	movs	r3, #0
        bool single_spindle_only = (gc_block.words.s && !user_words.s) ||
 800710e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8007112:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
        if(command_words.M7 || single_spindle_only) {
 800711e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <gc_execute_block+0x1414>
 800712c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8007130:	2b00      	cmp	r3, #0
 8007132:	d053      	beq.n	80071dc <gc_execute_block+0x14bc>
            if(gc_block.values.$ < (single_spindle_only ? 0 : -1))
 8007134:	4b0a      	ldr	r3, [pc, #40]	; (8007160 <gc_execute_block+0x1440>)
 8007136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007138:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
 800713c:	2a00      	cmp	r2, #0
 800713e:	d001      	beq.n	8007144 <gc_execute_block+0x1424>
 8007140:	2200      	movs	r2, #0
 8007142:	e001      	b.n	8007148 <gc_execute_block+0x1428>
 8007144:	f04f 32ff 	mov.w	r2, #4294967295
 8007148:	429a      	cmp	r2, r3
 800714a:	dd13      	ble.n	8007174 <gc_execute_block+0x1454>
                FAIL(single_spindle_only ? Status_NegativeValue : Status_GcodeValueOutOfRange);
 800714c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <gc_execute_block+0x143a>
 8007154:	2304      	movs	r3, #4
 8007156:	f003 bdbf 	b.w	800acd8 <gc_execute_block+0x4fb8>
 800715a:	2327      	movs	r3, #39	; 0x27
 800715c:	f003 bdbc 	b.w	800acd8 <gc_execute_block+0x4fb8>
 8007160:	20001470 	.word	0x20001470
 8007164:	2000137c 	.word	0x2000137c
 8007168:	00989680 	.word	0x00989680
 800716c:	41cb3333 	.word	0x41cb3333
 8007170:	2000151c 	.word	0x2000151c
            if(!spindle_is_enabled(gc_block.values.$))
 8007174:	4b9e      	ldr	r3, [pc, #632]	; (80073f0 <gc_execute_block+0x16d0>)
 8007176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007178:	b25b      	sxtb	r3, r3
 800717a:	4618      	mov	r0, r3
 800717c:	f014 fefe 	bl	801bf7c <spindle_is_enabled>
 8007180:	4603      	mov	r3, r0
 8007182:	f083 0301 	eor.w	r3, r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <gc_execute_block+0x1472>
                FAIL(Status_GcodeValueOutOfRange);
 800718c:	2327      	movs	r3, #39	; 0x27
 800718e:	f003 bda3 	b.w	800acd8 <gc_execute_block+0x4fb8>
            if(gc_block.values.$ >= 0)
 8007192:	4b97      	ldr	r3, [pc, #604]	; (80073f0 <gc_execute_block+0x16d0>)
 8007194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007196:	2b00      	cmp	r3, #0
 8007198:	db0e      	blt.n	80071b8 <gc_execute_block+0x1498>
                gc_state.spindle.hal = gc_block.spindle = spindle_get(gc_block.values.$);
 800719a:	4b95      	ldr	r3, [pc, #596]	; (80073f0 <gc_execute_block+0x16d0>)
 800719c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800719e:	b25b      	sxtb	r3, r3
 80071a0:	4618      	mov	r0, r3
 80071a2:	f014 ff19 	bl	801bfd8 <spindle_get>
 80071a6:	4603      	mov	r3, r0
 80071a8:	4a91      	ldr	r2, [pc, #580]	; (80073f0 <gc_execute_block+0x16d0>)
 80071aa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80071ae:	4b90      	ldr	r3, [pc, #576]	; (80073f0 <gc_execute_block+0x16d0>)
 80071b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071b4:	4a8f      	ldr	r2, [pc, #572]	; (80073f4 <gc_execute_block+0x16d4>)
 80071b6:	6553      	str	r3, [r2, #84]	; 0x54
            gc_block.words.$ = Off;
 80071b8:	4a8d      	ldr	r2, [pc, #564]	; (80073f0 <gc_execute_block+0x16d0>)
 80071ba:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 80071be:	f36f 0300 	bfc	r3, #0, #1
 80071c2:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 80071c6:	e009      	b.n	80071dc <gc_execute_block+0x14bc>
        }
    } else if(gc_block.spindle == NULL)
 80071c8:	4b89      	ldr	r3, [pc, #548]	; (80073f0 <gc_execute_block+0x16d0>)
 80071ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d104      	bne.n	80071dc <gc_execute_block+0x14bc>
        gc_block.spindle = gc_state.spindle.hal;
 80071d2:	4b88      	ldr	r3, [pc, #544]	; (80073f4 <gc_execute_block+0x16d4>)
 80071d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d6:	4a86      	ldr	r2, [pc, #536]	; (80073f0 <gc_execute_block+0x16d0>)
 80071d8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    if(gc_block.modal.feed_mode == FeedMode_UnitsPerRev && !gc_state.spindle.hal->get_data)
 80071dc:	4b84      	ldr	r3, [pc, #528]	; (80073f0 <gc_execute_block+0x16d0>)
 80071de:	7a9b      	ldrb	r3, [r3, #10]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d107      	bne.n	80071f4 <gc_execute_block+0x14d4>
 80071e4:	4b83      	ldr	r3, [pc, #524]	; (80073f4 <gc_execute_block+0x16d4>)
 80071e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <gc_execute_block+0x14d4>
        FAIL(Status_GcodeUnsupportedCommand); // [G95 not supported]
 80071ee:	2314      	movs	r3, #20
 80071f0:	f003 bd72 	b.w	800acd8 <gc_execute_block+0x4fb8>

    if (command_words.G14) {
 80071f4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d060      	beq.n	80072c4 <gc_execute_block+0x15a4>
        if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 8007202:	4b7b      	ldr	r3, [pc, #492]	; (80073f0 <gc_execute_block+0x16d0>)
 8007204:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007208:	2b01      	cmp	r3, #1
 800720a:	d143      	bne.n	8007294 <gc_execute_block+0x1574>
            if(!gc_state.spindle.hal->cap.variable)
 800720c:	4b79      	ldr	r3, [pc, #484]	; (80073f4 <gc_execute_block+0x16d4>)
 800720e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007210:	7a5b      	ldrb	r3, [r3, #9]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <gc_execute_block+0x1502>
                FAIL(Status_GcodeUnsupportedCommand);
 800721c:	2314      	movs	r3, #20
 800721e:	f003 bd5b 	b.w	800acd8 <gc_execute_block+0x4fb8>
            if (!gc_block.words.s) // TODO: add check for S0?
 8007222:	4b73      	ldr	r3, [pc, #460]	; (80073f0 <gc_execute_block+0x16d0>)
 8007224:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <gc_execute_block+0x1518>
                FAIL(Status_GcodeValueWordMissing);
 8007232:	231c      	movs	r3, #28
 8007234:	f003 bd50 	b.w	800acd8 <gc_execute_block+0x4fb8>
    // see below!! gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
            if (gc_block.words.d) {
 8007238:	4b6d      	ldr	r3, [pc, #436]	; (80073f0 <gc_execute_block+0x16d0>)
 800723a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800723e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01d      	beq.n	8007284 <gc_execute_block+0x1564>
                gc_state.spindle.hal->param->css.max_rpm = min(gc_block.values.d, gc_state.spindle.hal->rpm_max);
 8007248:	4b69      	ldr	r3, [pc, #420]	; (80073f0 <gc_execute_block+0x16d0>)
 800724a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800724e:	4b69      	ldr	r3, [pc, #420]	; (80073f4 <gc_execute_block+0x16d4>)
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	edd3 7a05 	vldr	s15, [r3, #20]
 8007256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800725a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725e:	d502      	bpl.n	8007266 <gc_execute_block+0x1546>
 8007260:	4b63      	ldr	r3, [pc, #396]	; (80073f0 <gc_execute_block+0x16d0>)
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	e002      	b.n	800726c <gc_execute_block+0x154c>
 8007266:	4b63      	ldr	r3, [pc, #396]	; (80073f4 <gc_execute_block+0x16d4>)
 8007268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	4a61      	ldr	r2, [pc, #388]	; (80073f4 <gc_execute_block+0x16d4>)
 800726e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007270:	6852      	ldr	r2, [r2, #4]
 8007272:	61d3      	str	r3, [r2, #28]
                gc_block.words.d = Off;
 8007274:	4a5e      	ldr	r2, [pc, #376]	; (80073f0 <gc_execute_block+0x16d0>)
 8007276:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 800727a:	f36f 13c7 	bfc	r3, #7, #1
 800727e:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 8007282:	e01a      	b.n	80072ba <gc_execute_block+0x159a>
            } else
                gc_state.spindle.hal->param->css.max_rpm = gc_state.spindle.hal->rpm_max;
 8007284:	4b5b      	ldr	r3, [pc, #364]	; (80073f4 <gc_execute_block+0x16d4>)
 8007286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007288:	4b5a      	ldr	r3, [pc, #360]	; (80073f4 <gc_execute_block+0x16d4>)
 800728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	6952      	ldr	r2, [r2, #20]
 8007290:	61da      	str	r2, [r3, #28]
 8007292:	e012      	b.n	80072ba <gc_execute_block+0x159a>
        } else if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 8007294:	4b57      	ldr	r3, [pc, #348]	; (80073f4 <gc_execute_block+0x16d4>)
 8007296:	7edb      	ldrb	r3, [r3, #27]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d10e      	bne.n	80072ba <gc_execute_block+0x159a>
            if(gc_state.spindle.css) {
 800729c:	4b55      	ldr	r3, [pc, #340]	; (80073f4 <gc_execute_block+0x16d4>)
 800729e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d004      	beq.n	80072ae <gc_execute_block+0x158e>
                gc_state.spindle.css = NULL;
 80072a4:	4b53      	ldr	r3, [pc, #332]	; (80073f4 <gc_execute_block+0x16d4>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	651a      	str	r2, [r3, #80]	; 0x50
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 80072aa:	f00b fa6b 	bl	8012784 <protocol_buffer_synchronize>
            }
            gc_state.spindle.rpm = gc_state.spindle.hal->param->rpm; // Is it correct to restore latest spindle RPM here?
 80072ae:	4b51      	ldr	r3, [pc, #324]	; (80073f4 <gc_execute_block+0x16d4>)
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a4f      	ldr	r2, [pc, #316]	; (80073f4 <gc_execute_block+0x16d4>)
 80072b8:	6493      	str	r3, [r2, #72]	; 0x48
        }
        gc_state.modal.spindle.rpm_mode = gc_block.modal.spindle.rpm_mode;
 80072ba:	4b4d      	ldr	r3, [pc, #308]	; (80073f0 <gc_execute_block+0x16d0>)
 80072bc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80072c0:	4b4c      	ldr	r3, [pc, #304]	; (80073f4 <gc_execute_block+0x16d4>)
 80072c2:	76da      	strb	r2, [r3, #27]
    }

    spindle_programmed = gc_block.words.s && !user_words.s;
 80072c4:	4b4a      	ldr	r3, [pc, #296]	; (80073f0 <gc_execute_block+0x16d0>)
 80072c6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <gc_execute_block+0x15c6>
 80072d4:	4b48      	ldr	r3, [pc, #288]	; (80073f8 <gc_execute_block+0x16d8>)
 80072d6:	789b      	ldrb	r3, [r3, #2]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <gc_execute_block+0x15c6>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <gc_execute_block+0x15c8>
 80072e6:	2300      	movs	r3, #0
 80072e8:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 80072ec:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee

    if (!gc_block.words.s)
 80072f8:	4b3d      	ldr	r3, [pc, #244]	; (80073f0 <gc_execute_block+0x16d0>)
 80072fa:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10d      	bne.n	8007324 <gc_execute_block+0x1604>
        gc_block.values.s = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? gc_state.spindle.rpm : gc_state.spindle.hal->param->css.max_rpm;
 8007308:	4b3a      	ldr	r3, [pc, #232]	; (80073f4 <gc_execute_block+0x16d4>)
 800730a:	7edb      	ldrb	r3, [r3, #27]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d102      	bne.n	8007316 <gc_execute_block+0x15f6>
 8007310:	4b38      	ldr	r3, [pc, #224]	; (80073f4 <gc_execute_block+0x16d4>)
 8007312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007314:	e003      	b.n	800731e <gc_execute_block+0x15fe>
 8007316:	4b37      	ldr	r3, [pc, #220]	; (80073f4 <gc_execute_block+0x16d4>)
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	4a34      	ldr	r2, [pc, #208]	; (80073f0 <gc_execute_block+0x16d0>)
 8007320:	65d3      	str	r3, [r2, #92]	; 0x5c
 8007322:	e021      	b.n	8007368 <gc_execute_block+0x1648>
    else if(!user_words.s && gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 8007324:	4b34      	ldr	r3, [pc, #208]	; (80073f8 <gc_execute_block+0x16d8>)
 8007326:	789b      	ldrb	r3, [r3, #2]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d11a      	bne.n	8007368 <gc_execute_block+0x1648>
 8007332:	4b30      	ldr	r3, [pc, #192]	; (80073f4 <gc_execute_block+0x16d4>)
 8007334:	7edb      	ldrb	r3, [r3, #27]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d116      	bne.n	8007368 <gc_execute_block+0x1648>
        // Unsure what to do about S values when in SpindleSpeedMode_CSS - ignore? For now use it to (re)calculate surface speed.
        // Reinsert commented out code above if this is removed!!
        gc_block.values.s *= (gc_block.modal.units_imperial ? MM_PER_INCH * 12.0f : 1000.0f); // convert surface speed to mm/min
 800733a:	4b2d      	ldr	r3, [pc, #180]	; (80073f0 <gc_execute_block+0x16d0>)
 800733c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <gc_execute_block+0x16d0>)
 8007342:	7adb      	ldrb	r3, [r3, #11]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <gc_execute_block+0x162e>
 8007348:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80073fc <gc_execute_block+0x16dc>
 800734c:	e001      	b.n	8007352 <gc_execute_block+0x1632>
 800734e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007400 <gc_execute_block+0x16e0>
 8007352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007356:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <gc_execute_block+0x16d0>)
 8007358:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
        gc_state.spindle.hal->param->css.surface_speed = gc_block.values.s;
 800735c:	4b25      	ldr	r3, [pc, #148]	; (80073f4 <gc_execute_block+0x16d4>)
 800735e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <gc_execute_block+0x16d0>)
 8007364:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007366:	611a      	str	r2, [r3, #16]
    }

    // bit_false(gc_block.words,bit(Word_S)); // NOTE: Single-meaning value word. Set at end of error-checking.

    // [5. Select tool ]: If not supported then only tracks value. T is negative (done.) Not an integer (done).
    if(set_tool) { // M61
 8007368:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800736c:	2b00      	cmp	r3, #0
 800736e:	d049      	beq.n	8007404 <gc_execute_block+0x16e4>
        if(!gc_block.words.q)
 8007370:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <gc_execute_block+0x16d0>)
 8007372:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <gc_execute_block+0x1666>
            FAIL(Status_GcodeValueWordMissing);
 8007380:	231c      	movs	r3, #28
 8007382:	f003 bca9 	b.w	800acd8 <gc_execute_block+0x4fb8>
        if (floorf(gc_block.values.q) - gc_block.values.q != 0.0f)
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <gc_execute_block+0x16d0>)
 8007388:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800738c:	eeb0 0a67 	vmov.f32	s0, s15
 8007390:	f01f fda1 	bl	8026ed6 <floorf>
 8007394:	eeb0 7a40 	vmov.f32	s14, s0
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <gc_execute_block+0x16d0>)
 800739a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800739e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80073a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073aa:	d002      	beq.n	80073b2 <gc_execute_block+0x1692>
            FAIL(Status_GcodeCommandValueNotInteger);
 80073ac:	2317      	movs	r3, #23
 80073ae:	f003 bc93 	b.w	800acd8 <gc_execute_block+0x4fb8>
        if ((uint32_t)gc_block.values.q > MAX_TOOL_NUMBER)
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <gc_execute_block+0x16d0>)
 80073b4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80073b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073bc:	ee17 3a90 	vmov	r3, s15
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d102      	bne.n	80073cc <gc_execute_block+0x16ac>
            FAIL(Status_GcodeIllegalToolTableEntry);
 80073c6:	2326      	movs	r3, #38	; 0x26
 80073c8:	f003 bc86 	b.w	800acd8 <gc_execute_block+0x4fb8>

        gc_block.values.t = (uint32_t)gc_block.values.q;
 80073cc:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <gc_execute_block+0x16d0>)
 80073ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80073d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d6:	ee17 2a90 	vmov	r2, s15
 80073da:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <gc_execute_block+0x16d0>)
 80073dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        gc_block.words.q = Off;
 80073e0:	4a03      	ldr	r2, [pc, #12]	; (80073f0 <gc_execute_block+0x16d0>)
 80073e2:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 80073e6:	f36f 0341 	bfc	r3, #1, #1
 80073ea:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 80073ee:	e016      	b.n	800741e <gc_execute_block+0x16fe>
 80073f0:	20001470 	.word	0x20001470
 80073f4:	2000137c 	.word	0x2000137c
 80073f8:	2000151c 	.word	0x2000151c
 80073fc:	43986666 	.word	0x43986666
 8007400:	447a0000 	.word	0x447a0000
            }
            gc_state.g43_pending = 0;
  #endif
        }
#endif
    } else if (!gc_block.words.t)
 8007404:	4bb4      	ldr	r3, [pc, #720]	; (80076d8 <gc_execute_block+0x19b8>)
 8007406:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800740a:	f003 0310 	and.w	r3, r3, #16
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <gc_execute_block+0x16fe>
        gc_block.values.t = gc_state.tool_pending;
 8007414:	4bb1      	ldr	r3, [pc, #708]	; (80076dc <gc_execute_block+0x19bc>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007418:	4aaf      	ldr	r2, [pc, #700]	; (80076d8 <gc_execute_block+0x19b8>)
 800741a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    if(command_words.M10 && port_command) {
 800741e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007422:	f003 0310 	and.w	r3, r3, #16
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 818a 	beq.w	8007742 <gc_execute_block+0x1a22>
 800742e:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8185 	beq.w	8007742 <gc_execute_block+0x1a22>

        switch(port_command) {
 8007438:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800743c:	2b44      	cmp	r3, #68	; 0x44
 800743e:	f300 8180 	bgt.w	8007742 <gc_execute_block+0x1a22>
 8007442:	2b43      	cmp	r3, #67	; 0x43
 8007444:	f280 8124 	bge.w	8007690 <gc_execute_block+0x1970>
 8007448:	2b41      	cmp	r3, #65	; 0x41
 800744a:	dc02      	bgt.n	8007452 <gc_execute_block+0x1732>
 800744c:	2b3e      	cmp	r3, #62	; 0x3e
 800744e:	da03      	bge.n	8007458 <gc_execute_block+0x1738>
 8007450:	e177      	b.n	8007742 <gc_execute_block+0x1a22>
 8007452:	2b42      	cmp	r3, #66	; 0x42
 8007454:	d04c      	beq.n	80074f0 <gc_execute_block+0x17d0>
 8007456:	e174      	b.n	8007742 <gc_execute_block+0x1a22>

            case IoMCode_OutputOnSynced:
            case IoMCode_OutputOffSynced:
            case IoMCode_OutputOnImmediate:
            case IoMCode_OutputOffImmediate:
                if(!gc_block.words.p)
 8007458:	4b9f      	ldr	r3, [pc, #636]	; (80076d8 <gc_execute_block+0x19b8>)
 800745a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <gc_execute_block+0x174e>
                    FAIL(Status_GcodeValueWordMissing);
 8007468:	231c      	movs	r3, #28
 800746a:	f003 bc35 	b.w	800acd8 <gc_execute_block+0x4fb8>
                if(gc_block.values.p < 0.0f)
 800746e:	4b9a      	ldr	r3, [pc, #616]	; (80076d8 <gc_execute_block+0x19b8>)
 8007470:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747c:	d502      	bpl.n	8007484 <gc_execute_block+0x1764>
                    FAIL(Status_NegativeValue);
 800747e:	2304      	movs	r3, #4
 8007480:	f003 bc2a 	b.w	800acd8 <gc_execute_block+0x4fb8>
                if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_out)
 8007484:	4b94      	ldr	r3, [pc, #592]	; (80076d8 <gc_execute_block+0x19b8>)
 8007486:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800748a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748e:	ee17 3a90 	vmov	r3, s15
 8007492:	3301      	adds	r3, #1
 8007494:	4a92      	ldr	r2, [pc, #584]	; (80076e0 <gc_execute_block+0x19c0>)
 8007496:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800749a:	4293      	cmp	r3, r2
 800749c:	d902      	bls.n	80074a4 <gc_execute_block+0x1784>
                    FAIL(Status_GcodeValueOutOfRange);
 800749e:	2327      	movs	r3, #39	; 0x27
 80074a0:	f003 bc1a 	b.w	800acd8 <gc_execute_block+0x4fb8>
                gc_block.output_command.is_digital = true;
 80074a4:	4b8c      	ldr	r3, [pc, #560]	; (80076d8 <gc_execute_block+0x19b8>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                gc_block.output_command.port = (uint8_t)gc_block.values.p;
 80074ac:	4b8a      	ldr	r3, [pc, #552]	; (80076d8 <gc_execute_block+0x19b8>)
 80074ae:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80074b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b6:	edc7 7a00 	vstr	s15, [r7]
 80074ba:	783b      	ldrb	r3, [r7, #0]
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	4b86      	ldr	r3, [pc, #536]	; (80076d8 <gc_execute_block+0x19b8>)
 80074c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
                gc_block.output_command.value = port_command == 62 || port_command == 64 ? 1.0f : 0.0f;
 80074c4:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80074c8:	2b3e      	cmp	r3, #62	; 0x3e
 80074ca:	d003      	beq.n	80074d4 <gc_execute_block+0x17b4>
 80074cc:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d101      	bne.n	80074d8 <gc_execute_block+0x17b8>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e000      	b.n	80074da <gc_execute_block+0x17ba>
 80074d8:	2300      	movs	r3, #0
 80074da:	4a7f      	ldr	r2, [pc, #508]	; (80076d8 <gc_execute_block+0x19b8>)
 80074dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                gc_block.words.p = Off;
 80074e0:	4a7d      	ldr	r2, [pc, #500]	; (80076d8 <gc_execute_block+0x19b8>)
 80074e2:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 80074e6:	f36f 0300 	bfc	r3, #0, #1
 80074ea:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
                break;
 80074ee:	e128      	b.n	8007742 <gc_execute_block+0x1a22>

            case IoMCode_WaitOnInput:
                if(!(gc_block.words.l || gc_block.words.q))
 80074f0:	4b79      	ldr	r3, [pc, #484]	; (80076d8 <gc_execute_block+0x19b8>)
 80074f2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <gc_execute_block+0x17f6>
 8007500:	4b75      	ldr	r3, [pc, #468]	; (80076d8 <gc_execute_block+0x19b8>)
 8007502:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <gc_execute_block+0x17f6>
                    FAIL(Status_GcodeValueWordMissing);
 8007510:	231c      	movs	r3, #28
 8007512:	f003 bbe1 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.words.p && gc_block.words.e)
 8007516:	4b70      	ldr	r3, [pc, #448]	; (80076d8 <gc_execute_block+0x19b8>)
 8007518:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <gc_execute_block+0x181c>
 8007526:	4b6c      	ldr	r3, [pc, #432]	; (80076d8 <gc_execute_block+0x19b8>)
 8007528:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <gc_execute_block+0x181c>
                    FAIL(Status_ValueWordConflict);
 8007536:	2330      	movs	r3, #48	; 0x30
 8007538:	f003 bbce 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.values.l >= (uint8_t)WaitMode_Max)
 800753c:	4b66      	ldr	r3, [pc, #408]	; (80076d8 <gc_execute_block+0x19b8>)
 800753e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007542:	2b04      	cmp	r3, #4
 8007544:	d902      	bls.n	800754c <gc_execute_block+0x182c>
                    FAIL(Status_GcodeValueOutOfRange);
 8007546:	2327      	movs	r3, #39	; 0x27
 8007548:	f003 bbc6 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if((wait_mode_t)gc_block.values.l != WaitMode_Immediate && gc_block.values.q == 0.0f)
 800754c:	4b62      	ldr	r3, [pc, #392]	; (80076d8 <gc_execute_block+0x19b8>)
 800754e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <gc_execute_block+0x184c>
 8007556:	4b60      	ldr	r3, [pc, #384]	; (80076d8 <gc_execute_block+0x19b8>)
 8007558:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800755c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007564:	d102      	bne.n	800756c <gc_execute_block+0x184c>
                    FAIL(Status_GcodeValueOutOfRange);
 8007566:	2327      	movs	r3, #39	; 0x27
 8007568:	f003 bbb6 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.words.p) {
 800756c:	4b5a      	ldr	r3, [pc, #360]	; (80076d8 <gc_execute_block+0x19b8>)
 800756e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02a      	beq.n	80075d2 <gc_execute_block+0x18b2>
                    if(gc_block.values.p < 0.0f)
 800757c:	4b56      	ldr	r3, [pc, #344]	; (80076d8 <gc_execute_block+0x19b8>)
 800757e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	d502      	bpl.n	8007592 <gc_execute_block+0x1872>
                        FAIL(Status_NegativeValue);
 800758c:	2304      	movs	r3, #4
 800758e:	f003 bba3 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if((uint32_t)gc_block.values.p + 1 > hal.port.num_digital_in)
 8007592:	4b51      	ldr	r3, [pc, #324]	; (80076d8 <gc_execute_block+0x19b8>)
 8007594:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800759c:	ee17 3a90 	vmov	r3, s15
 80075a0:	3301      	adds	r3, #1
 80075a2:	4a4f      	ldr	r2, [pc, #316]	; (80076e0 <gc_execute_block+0x19c0>)
 80075a4:	f892 2114 	ldrb.w	r2, [r2, #276]	; 0x114
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d902      	bls.n	80075b2 <gc_execute_block+0x1892>
                        FAIL(Status_GcodeValueOutOfRange);
 80075ac:	2327      	movs	r3, #39	; 0x27
 80075ae:	f003 bb93 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    gc_block.output_command.is_digital = true;
 80075b2:	4b49      	ldr	r3, [pc, #292]	; (80076d8 <gc_execute_block+0x19b8>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                    gc_block.output_command.port = (uint8_t)gc_block.values.p;
 80075ba:	4b47      	ldr	r3, [pc, #284]	; (80076d8 <gc_execute_block+0x19b8>)
 80075bc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80075c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c4:	edc7 7a00 	vstr	s15, [r7]
 80075c8:	783b      	ldrb	r3, [r7, #0]
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	4b42      	ldr	r3, [pc, #264]	; (80076d8 <gc_execute_block+0x19b8>)
 80075ce:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
                }

                if(gc_block.words.e) {
 80075d2:	4b41      	ldr	r3, [pc, #260]	; (80076d8 <gc_execute_block+0x19b8>)
 80075d4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d027      	beq.n	8007632 <gc_execute_block+0x1912>
                    if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_in)
 80075e2:	4b3d      	ldr	r3, [pc, #244]	; (80076d8 <gc_execute_block+0x19b8>)
 80075e4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80075e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ec:	ee17 3a90 	vmov	r3, s15
 80075f0:	3301      	adds	r3, #1
 80075f2:	4a3b      	ldr	r2, [pc, #236]	; (80076e0 <gc_execute_block+0x19c0>)
 80075f4:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d902      	bls.n	8007602 <gc_execute_block+0x18e2>
                        FAIL(Status_GcodeValueOutOfRange);
 80075fc:	2327      	movs	r3, #39	; 0x27
 80075fe:	f003 bb6b 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if((wait_mode_t)gc_block.values.l != WaitMode_Immediate)
 8007602:	4b35      	ldr	r3, [pc, #212]	; (80076d8 <gc_execute_block+0x19b8>)
 8007604:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <gc_execute_block+0x18f2>
                        FAIL(Status_GcodeValueOutOfRange);
 800760c:	2327      	movs	r3, #39	; 0x27
 800760e:	f003 bb63 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    gc_block.output_command.is_digital = false;
 8007612:	4b31      	ldr	r3, [pc, #196]	; (80076d8 <gc_execute_block+0x19b8>)
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                    gc_block.output_command.port = (uint8_t)gc_block.values.e;
 800761a:	4b2f      	ldr	r3, [pc, #188]	; (80076d8 <gc_execute_block+0x19b8>)
 800761c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007624:	edc7 7a00 	vstr	s15, [r7]
 8007628:	783b      	ldrb	r3, [r7, #0]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	4b2a      	ldr	r3, [pc, #168]	; (80076d8 <gc_execute_block+0x19b8>)
 800762e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
                }

                gc_block.words.e = gc_block.words.l = gc_block.words.p = gc_block.words.q = Off;
 8007632:	4a29      	ldr	r2, [pc, #164]	; (80076d8 <gc_execute_block+0x19b8>)
 8007634:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8007638:	f36f 0341 	bfc	r3, #1, #1
 800763c:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <gc_execute_block+0x19b8>)
 8007642:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007646:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800764a:	b2d9      	uxtb	r1, r3
 800764c:	4a22      	ldr	r2, [pc, #136]	; (80076d8 <gc_execute_block+0x19b8>)
 800764e:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8007652:	f361 0300 	bfi	r3, r1, #0, #1
 8007656:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 800765a:	4b1f      	ldr	r3, [pc, #124]	; (80076d8 <gc_execute_block+0x19b8>)
 800765c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007660:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007664:	b2d9      	uxtb	r1, r3
 8007666:	4a1c      	ldr	r2, [pc, #112]	; (80076d8 <gc_execute_block+0x19b8>)
 8007668:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 800766c:	f361 1304 	bfi	r3, r1, #4, #1
 8007670:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
 8007674:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <gc_execute_block+0x19b8>)
 8007676:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800767a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800767e:	b2d9      	uxtb	r1, r3
 8007680:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <gc_execute_block+0x19b8>)
 8007682:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8007686:	f361 0300 	bfi	r3, r1, #0, #1
 800768a:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
                break;
 800768e:	e058      	b.n	8007742 <gc_execute_block+0x1a22>

            case IoMCode_AnalogOutSynced:
            case IoMCode_AnalogOutImmediate:
                if(!(gc_block.words.e || gc_block.words.q))
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <gc_execute_block+0x19b8>)
 8007692:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <gc_execute_block+0x1996>
 80076a0:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <gc_execute_block+0x19b8>)
 80076a2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <gc_execute_block+0x1996>
                    FAIL(Status_GcodeValueWordMissing);
 80076b0:	231c      	movs	r3, #28
 80076b2:	f003 bb11 	b.w	800acd8 <gc_execute_block+0x4fb8>
                if((uint32_t)gc_block.values.e + 1 > hal.port.num_analog_out)
 80076b6:	4b08      	ldr	r3, [pc, #32]	; (80076d8 <gc_execute_block+0x19b8>)
 80076b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80076bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c0:	ee17 3a90 	vmov	r3, s15
 80076c4:	3301      	adds	r3, #1
 80076c6:	4a06      	ldr	r2, [pc, #24]	; (80076e0 <gc_execute_block+0x19c0>)
 80076c8:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d909      	bls.n	80076e4 <gc_execute_block+0x19c4>
                    FAIL(Status_GcodeRPMOutOfRange);
 80076d0:	232c      	movs	r3, #44	; 0x2c
 80076d2:	f003 bb01 	b.w	800acd8 <gc_execute_block+0x4fb8>
 80076d6:	bf00      	nop
 80076d8:	20001470 	.word	0x20001470
 80076dc:	2000137c 	.word	0x2000137c
 80076e0:	200016a0 	.word	0x200016a0
                gc_block.output_command.is_digital = false;
 80076e4:	4bb2      	ldr	r3, [pc, #712]	; (80079b0 <gc_execute_block+0x1c90>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
                gc_block.output_command.port = (uint8_t)gc_block.values.e;
 80076ec:	4bb0      	ldr	r3, [pc, #704]	; (80079b0 <gc_execute_block+0x1c90>)
 80076ee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80076f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f6:	edc7 7a00 	vstr	s15, [r7]
 80076fa:	783b      	ldrb	r3, [r7, #0]
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	4bac      	ldr	r3, [pc, #688]	; (80079b0 <gc_execute_block+0x1c90>)
 8007700:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
                gc_block.output_command.value = gc_block.values.q;
 8007704:	4baa      	ldr	r3, [pc, #680]	; (80079b0 <gc_execute_block+0x1c90>)
 8007706:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800770a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800770e:	ee17 2a90 	vmov	r2, s15
 8007712:	4ba7      	ldr	r3, [pc, #668]	; (80079b0 <gc_execute_block+0x1c90>)
 8007714:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                gc_block.words.e = gc_block.words.q = Off;
 8007718:	4aa5      	ldr	r2, [pc, #660]	; (80079b0 <gc_execute_block+0x1c90>)
 800771a:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 800771e:	f36f 0341 	bfc	r3, #1, #1
 8007722:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8007726:	4ba2      	ldr	r3, [pc, #648]	; (80079b0 <gc_execute_block+0x1c90>)
 8007728:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800772c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007730:	b2d9      	uxtb	r1, r3
 8007732:	4a9f      	ldr	r2, [pc, #636]	; (80079b0 <gc_execute_block+0x1c90>)
 8007734:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8007738:	f361 0300 	bfi	r3, r1, #0, #1
 800773c:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            break;
 8007740:	bf00      	nop
    // bit_false(gc_block.words,bit(Word_T)); // NOTE: Single-meaning value word. Set at end of error-checking.

    // [6. Change tool ]: N/A

    // [7. Spindle control ]:
    if(command_words.M7 && gc_block.modal.spindle.state.ccw) {
 8007742:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d054      	beq.n	80077fa <gc_execute_block+0x1ada>
 8007750:	4b97      	ldr	r3, [pc, #604]	; (80079b0 <gc_execute_block+0x1c90>)
 8007752:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d04c      	beq.n	80077fa <gc_execute_block+0x1ada>
        // Check if spindle(s) support reversing direction
        if(gc_block.spindle == NULL) {
 8007760:	4b93      	ldr	r3, [pc, #588]	; (80079b0 <gc_execute_block+0x1c90>)
 8007762:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d132      	bne.n	80077d0 <gc_execute_block+0x1ab0>
            uint_fast8_t idx = N_SYS_SPINDLE;
 800776a:	2301      	movs	r3, #1
 800776c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            do {
                idx--;
 8007770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007774:	3b01      	subs	r3, #1
 8007776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                if(spindle_is_enabled(idx) && !(spindle_get(idx)->cap.direction || spindle_get(idx)->cap.laser))
 800777a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800777e:	b25b      	sxtb	r3, r3
 8007780:	4618      	mov	r0, r3
 8007782:	f014 fbfb 	bl	801bf7c <spindle_is_enabled>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01c      	beq.n	80077c6 <gc_execute_block+0x1aa6>
 800778c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007790:	b25b      	sxtb	r3, r3
 8007792:	4618      	mov	r0, r3
 8007794:	f014 fc20 	bl	801bfd8 <spindle_get>
 8007798:	4603      	mov	r3, r0
 800779a:	7a5b      	ldrb	r3, [r3, #9]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10f      	bne.n	80077c6 <gc_execute_block+0x1aa6>
 80077a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077aa:	b25b      	sxtb	r3, r3
 80077ac:	4618      	mov	r0, r3
 80077ae:	f014 fc13 	bl	801bfd8 <spindle_get>
 80077b2:	4603      	mov	r3, r0
 80077b4:	7a5b      	ldrb	r3, [r3, #9]
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <gc_execute_block+0x1aa6>
                    FAIL(Status_GcodeUnsupportedCommand);
 80077c0:	2314      	movs	r3, #20
 80077c2:	f003 ba89 	b.w	800acd8 <gc_execute_block+0x4fb8>
            } while(idx);
 80077c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1d0      	bne.n	8007770 <gc_execute_block+0x1a50>
 80077ce:	e014      	b.n	80077fa <gc_execute_block+0x1ada>
        } else if(!(gc_block.spindle->cap.direction || gc_block.spindle->cap.laser))
 80077d0:	4b77      	ldr	r3, [pc, #476]	; (80079b0 <gc_execute_block+0x1c90>)
 80077d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077d6:	7a5b      	ldrb	r3, [r3, #9]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10b      	bne.n	80077fa <gc_execute_block+0x1ada>
 80077e2:	4b73      	ldr	r3, [pc, #460]	; (80079b0 <gc_execute_block+0x1c90>)
 80077e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077e8:	7a5b      	ldrb	r3, [r3, #9]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <gc_execute_block+0x1ada>
            FAIL(Status_GcodeUnsupportedCommand);
 80077f4:	2314      	movs	r3, #20
 80077f6:	f003 ba6f 	b.w	800acd8 <gc_execute_block+0x4fb8>
    }

    // [8. Coolant control ]: N/A

    // [9. Override control ]:
    if (command_words.M9) {
 80077fa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80077fe:	f003 0308 	and.w	r3, r3, #8
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 80b0 	beq.w	800796a <gc_execute_block+0x1c4a>

        if(!gc_block.words.p)
 800780a:	4b69      	ldr	r3, [pc, #420]	; (80079b0 <gc_execute_block+0x1c90>)
 800780c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <gc_execute_block+0x1b04>
            gc_block.values.p = 1.0f;
 800781a:	4b65      	ldr	r3, [pc, #404]	; (80079b0 <gc_execute_block+0x1c90>)
 800781c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007820:	651a      	str	r2, [r3, #80]	; 0x50
 8007822:	e011      	b.n	8007848 <gc_execute_block+0x1b28>
        else {
            if(gc_block.values.p < 0.0f)
 8007824:	4b62      	ldr	r3, [pc, #392]	; (80079b0 <gc_execute_block+0x1c90>)
 8007826:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800782a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800782e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007832:	d502      	bpl.n	800783a <gc_execute_block+0x1b1a>
                FAIL(Status_NegativeValue);
 8007834:	2304      	movs	r3, #4
 8007836:	f003 ba4f 	b.w	800acd8 <gc_execute_block+0x4fb8>
            gc_block.words.p = Off;
 800783a:	4a5d      	ldr	r2, [pc, #372]	; (80079b0 <gc_execute_block+0x1c90>)
 800783c:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8007840:	f36f 0300 	bfc	r3, #0, #1
 8007844:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
        }
        switch(gc_block.override_command) {
 8007848:	4b59      	ldr	r3, [pc, #356]	; (80079b0 <gc_execute_block+0x1c90>)
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	3b30      	subs	r3, #48	; 0x30
 800784e:	2b08      	cmp	r3, #8
 8007850:	f200 8088 	bhi.w	8007964 <gc_execute_block+0x1c44>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <gc_execute_block+0x1b3c>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007881 	.word	0x08007881
 8007860:	0800789f 	.word	0x0800789f
 8007864:	080078bd 	.word	0x080078bd
 8007868:	080078e3 	.word	0x080078e3
 800786c:	08007965 	.word	0x08007965
 8007870:	08007909 	.word	0x08007909
 8007874:	08007965 	.word	0x08007965
 8007878:	08007965 	.word	0x08007965
 800787c:	0800792f 	.word	0x0800792f

            case Override_FeedSpeedEnable:
                gc_block.modal.override_ctrl.feed_rate_disable = Off;
 8007880:	4a4b      	ldr	r2, [pc, #300]	; (80079b0 <gc_execute_block+0x1c90>)
 8007882:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8007886:	f36f 0300 	bfc	r3, #0, #1
 800788a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = Off;
 800788e:	4a48      	ldr	r2, [pc, #288]	; (80079b0 <gc_execute_block+0x1c90>)
 8007890:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8007894:	f36f 0382 	bfc	r3, #2, #1
 8007898:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                break;
 800789c:	e065      	b.n	800796a <gc_execute_block+0x1c4a>

            case Override_FeedSpeedDisable:
                gc_block.modal.override_ctrl.feed_rate_disable = On;
 800789e:	4a44      	ldr	r2, [pc, #272]	; (80079b0 <gc_execute_block+0x1c90>)
 80078a0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                gc_block.modal.override_ctrl.spindle_rpm_disable = On;
 80078ac:	4a40      	ldr	r2, [pc, #256]	; (80079b0 <gc_execute_block+0x1c90>)
 80078ae:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80078b2:	f043 0304 	orr.w	r3, r3, #4
 80078b6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                break;
 80078ba:	e056      	b.n	800796a <gc_execute_block+0x1c4a>

            case Override_FeedRate:
                gc_block.modal.override_ctrl.feed_rate_disable = gc_block.values.p == 0.0f;
 80078bc:	4b3c      	ldr	r3, [pc, #240]	; (80079b0 <gc_execute_block+0x1c90>)
 80078be:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80078c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ca:	bf0c      	ite	eq
 80078cc:	2301      	moveq	r3, #1
 80078ce:	2300      	movne	r3, #0
 80078d0:	b2d9      	uxtb	r1, r3
 80078d2:	4a37      	ldr	r2, [pc, #220]	; (80079b0 <gc_execute_block+0x1c90>)
 80078d4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80078d8:	f361 0300 	bfi	r3, r1, #0, #1
 80078dc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                break;
 80078e0:	e043      	b.n	800796a <gc_execute_block+0x1c4a>

            case Override_SpindleSpeed:
                gc_block.modal.override_ctrl.spindle_rpm_disable = gc_block.values.p == 0.0f;
 80078e2:	4b33      	ldr	r3, [pc, #204]	; (80079b0 <gc_execute_block+0x1c90>)
 80078e4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80078e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80078ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f0:	bf0c      	ite	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	2300      	movne	r3, #0
 80078f6:	b2d9      	uxtb	r1, r3
 80078f8:	4a2d      	ldr	r2, [pc, #180]	; (80079b0 <gc_execute_block+0x1c90>)
 80078fa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80078fe:	f361 0382 	bfi	r3, r1, #2, #1
 8007902:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                break;
 8007906:	e030      	b.n	800796a <gc_execute_block+0x1c4a>

            case Override_FeedHold:
                gc_block.modal.override_ctrl.feed_hold_disable = gc_block.values.p == 0.0f;
 8007908:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <gc_execute_block+0x1c90>)
 800790a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800790e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2d9      	uxtb	r1, r3
 800791e:	4a24      	ldr	r2, [pc, #144]	; (80079b0 <gc_execute_block+0x1c90>)
 8007920:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8007924:	f361 0341 	bfi	r3, r1, #1, #1
 8007928:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                break;
 800792c:	e01d      	b.n	800796a <gc_execute_block+0x1c4a>

            case Override_Parking:
                if(settings.parking.flags.enable_override_control)
 800792e:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <gc_execute_block+0x1c94>)
 8007930:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d014      	beq.n	8007968 <gc_execute_block+0x1c48>
                    gc_block.modal.override_ctrl.parking_disable = gc_block.values.p == 0.0f;
 800793e:	4b1c      	ldr	r3, [pc, #112]	; (80079b0 <gc_execute_block+0x1c90>)
 8007940:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007944:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794c:	bf0c      	ite	eq
 800794e:	2301      	moveq	r3, #1
 8007950:	2300      	movne	r3, #0
 8007952:	b2d9      	uxtb	r1, r3
 8007954:	4a16      	ldr	r2, [pc, #88]	; (80079b0 <gc_execute_block+0x1c90>)
 8007956:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800795a:	f361 03c3 	bfi	r3, r1, #3, #1
 800795e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                break;
 8007962:	e001      	b.n	8007968 <gc_execute_block+0x1c48>

            default:
                break;
 8007964:	bf00      	nop
 8007966:	e000      	b.n	800796a <gc_execute_block+0x1c4a>
                break;
 8007968:	bf00      	nop
        }
    }

    // [9a. User defined M commands ]:
    if (command_words.M10 && gc_block.user_mcode) {
 800796a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d033      	beq.n	80079e0 <gc_execute_block+0x1cc0>
 8007978:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <gc_execute_block+0x1c90>)
 800797a:	885b      	ldrh	r3, [r3, #2]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d02f      	beq.n	80079e0 <gc_execute_block+0x1cc0>
        user_words.mask = gc_block.words.mask;
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <gc_execute_block+0x1c90>)
 8007982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007986:	4a0c      	ldr	r2, [pc, #48]	; (80079b8 <gc_execute_block+0x1c98>)
 8007988:	6013      	str	r3, [r2, #0]
        if((int_value = (uint_fast16_t)hal.user_mcode.validate(&gc_block, &gc_block.words)))
 800798a:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <gc_execute_block+0x1c9c>)
 800798c:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007990:	490b      	ldr	r1, [pc, #44]	; (80079c0 <gc_execute_block+0x1ca0>)
 8007992:	4807      	ldr	r0, [pc, #28]	; (80079b0 <gc_execute_block+0x1c90>)
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800799c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00f      	beq.n	80079c4 <gc_execute_block+0x1ca4>
            FAIL((status_code_t)int_value);
 80079a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 b995 	b.w	800acd8 <gc_execute_block+0x4fb8>
 80079ae:	bf00      	nop
 80079b0:	20001470 	.word	0x20001470
 80079b4:	20001cf0 	.word	0x20001cf0
 80079b8:	2000151c 	.word	0x2000151c
 80079bc:	200016a0 	.word	0x200016a0
 80079c0:	20001504 	.word	0x20001504
        user_words.mask ^= gc_block.words.mask; // Flag "taken" words for execution
 80079c4:	4bc0      	ldr	r3, [pc, #768]	; (8007cc8 <gc_execute_block+0x1fa8>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	4bc0      	ldr	r3, [pc, #768]	; (8007ccc <gc_execute_block+0x1fac>)
 80079ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079ce:	4053      	eors	r3, r2
 80079d0:	4abd      	ldr	r2, [pc, #756]	; (8007cc8 <gc_execute_block+0x1fa8>)
 80079d2:	6013      	str	r3, [r2, #0]
        axis_words.mask = ijk_words.mask = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079da:	2300      	movs	r3, #0
 80079dc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
    }

    // [10. Dwell ]: P value missing. NOTE: See below.
    if (gc_block.non_modal_command == NonModal_Dwell) {
 80079e0:	4bba      	ldr	r3, [pc, #744]	; (8007ccc <gc_execute_block+0x1fac>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d11c      	bne.n	8007a22 <gc_execute_block+0x1d02>
        if (!gc_block.words.p)
 80079e8:	4bb8      	ldr	r3, [pc, #736]	; (8007ccc <gc_execute_block+0x1fac>)
 80079ea:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d102      	bne.n	80079fe <gc_execute_block+0x1cde>
            FAIL(Status_GcodeValueWordMissing); // [P word missing]
 80079f8:	231c      	movs	r3, #28
 80079fa:	f003 b96d 	b.w	800acd8 <gc_execute_block+0x4fb8>
        if(gc_block.values.p < 0.0f)
 80079fe:	4bb3      	ldr	r3, [pc, #716]	; (8007ccc <gc_execute_block+0x1fac>)
 8007a00:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a0c:	d502      	bpl.n	8007a14 <gc_execute_block+0x1cf4>
            FAIL(Status_NegativeValue);
 8007a0e:	2304      	movs	r3, #4
 8007a10:	f003 b962 	b.w	800acd8 <gc_execute_block+0x4fb8>
        gc_block.words.p = Off;
 8007a14:	4aad      	ldr	r2, [pc, #692]	; (8007ccc <gc_execute_block+0x1fac>)
 8007a16:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8007a1a:	f36f 0300 	bfc	r3, #0, #1
 8007a1e:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
    }

    // [11. Set active plane ]: N/A
    gc_get_plane_data(&plane, gc_block.modal.plane_select);
 8007a22:	4baa      	ldr	r3, [pc, #680]	; (8007ccc <gc_execute_block+0x1fac>)
 8007a24:	7b9a      	ldrb	r2, [r3, #14]
 8007a26:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fd fe5b 	bl	80056e8 <gc_get_plane_data>

    // [12. Set length units ]: N/A
    // Pre-convert XYZ coordinate values to millimeters, if applicable.
    uint_fast8_t idx = N_AXIS;
 8007a32:	2303      	movs	r3, #3
 8007a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    if (gc_block.modal.units_imperial) do { // Axes indices are consistent, so loop may be used.
 8007a38:	4ba4      	ldr	r3, [pc, #656]	; (8007ccc <gc_execute_block+0x1fac>)
 8007a3a:	7adb      	ldrb	r3, [r3, #11]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d027      	beq.n	8007a90 <gc_execute_block+0x1d70>
        idx--;
 8007a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a44:	3b01      	subs	r3, #1
 8007a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
#if N_AXIS > 3
        if (bit_istrue(axis_words.mask, bit(idx)) && bit_isfalse(settings.steppers.is_rotational.mask, bit(idx)))
#else
        if (bit_istrue(axis_words.mask, bit(idx)))
 8007a4a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a54:	fa22 f303 	lsr.w	r3, r2, r3
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d013      	beq.n	8007a88 <gc_execute_block+0x1d68>
#endif
            gc_block.values.xyz[idx] *= MM_PER_INCH;
 8007a60:	4a9a      	ldr	r2, [pc, #616]	; (8007ccc <gc_execute_block+0x1fac>)
 8007a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a66:	3318      	adds	r3, #24
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	edd3 7a00 	vldr	s15, [r3]
 8007a70:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8007cd0 <gc_execute_block+0x1fb0>
 8007a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a78:	4a94      	ldr	r2, [pc, #592]	; (8007ccc <gc_execute_block+0x1fac>)
 8007a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a7e:	3318      	adds	r3, #24
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	edc3 7a00 	vstr	s15, [r3]
    } while(idx);
 8007a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1d7      	bne.n	8007a40 <gc_execute_block+0x1d20>

    if (command_words.G15 && gc_state.modal.diameter_mode != gc_block.modal.diameter_mode) {
 8007a90:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00c      	beq.n	8007ab8 <gc_execute_block+0x1d98>
 8007a9e:	4b8d      	ldr	r3, [pc, #564]	; (8007cd4 <gc_execute_block+0x1fb4>)
 8007aa0:	795a      	ldrb	r2, [r3, #5]
 8007aa2:	4b8a      	ldr	r3, [pc, #552]	; (8007ccc <gc_execute_block+0x1fac>)
 8007aa4:	7b5b      	ldrb	r3, [r3, #13]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d006      	beq.n	8007ab8 <gc_execute_block+0x1d98>
        gc_state.modal.diameter_mode = gc_block.modal.diameter_mode;
 8007aaa:	4b88      	ldr	r3, [pc, #544]	; (8007ccc <gc_execute_block+0x1fac>)
 8007aac:	7b5a      	ldrb	r2, [r3, #13]
 8007aae:	4b89      	ldr	r3, [pc, #548]	; (8007cd4 <gc_execute_block+0x1fb4>)
 8007ab0:	715a      	strb	r2, [r3, #5]
        system_add_rt_report(Report_LatheXMode);
 8007ab2:	2008      	movs	r0, #8
 8007ab4:	f019 fd88 	bl	80215c8 <system_add_rt_report>
    }

    if(gc_state.modal.diameter_mode && bit_istrue(axis_words.mask, bit(X_AXIS)))
 8007ab8:	4b86      	ldr	r3, [pc, #536]	; (8007cd4 <gc_execute_block+0x1fb4>)
 8007aba:	795b      	ldrb	r3, [r3, #5]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00f      	beq.n	8007ae0 <gc_execute_block+0x1dc0>
 8007ac0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d009      	beq.n	8007ae0 <gc_execute_block+0x1dc0>
        gc_block.values.xyz[X_AXIS] /= 2.0f;
 8007acc:	4b7f      	ldr	r3, [pc, #508]	; (8007ccc <gc_execute_block+0x1fac>)
 8007ace:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8007ad2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ada:	4b7c      	ldr	r3, [pc, #496]	; (8007ccc <gc_execute_block+0x1fac>)
 8007adc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

    // Scale axis words if commanded
    if(axis_command == AxisCommand_Scaling) {
 8007ae0:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	f040 80b7 	bne.w	8007c58 <gc_execute_block+0x1f38>

        if(gc_block.modal.scaling_active) {
 8007aea:	4b78      	ldr	r3, [pc, #480]	; (8007ccc <gc_execute_block+0x1fac>)
 8007aec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80ad 	beq.w	8007c50 <gc_execute_block+0x1f30>

            bool report_scaling = false;
 8007af6:	2300      	movs	r3, #0
 8007af8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

            // TODO: precheck for 0.0f and fail if found?

            gc_block.modal.scaling_active = false;
 8007afc:	4b73      	ldr	r3, [pc, #460]	; (8007ccc <gc_execute_block+0x1fac>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

#ifdef MACH3_SCALING
            // [G51 Errors]: No axis words. TODO: add support for P (scale all with same factor)?
            if (!axis_words.mask)
 8007b04:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <gc_execute_block+0x1df2>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8007b0c:	231a      	movs	r3, #26
 8007b0e:	f003 b8e3 	b.w	800acd8 <gc_execute_block+0x4fb8>

            idx = N_AXIS;
 8007b12:	2303      	movs	r3, #3
 8007b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            do {
                if(bit_istrue(axis_words.mask, bit(--idx))) {
 8007b18:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b22:	3b01      	subs	r3, #1
 8007b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d041      	beq.n	8007bbc <gc_execute_block+0x1e9c>
                    report_scaling |= scale_factor.ijk[idx] != gc_block.values.xyz[idx];
 8007b38:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007b3c:	4966      	ldr	r1, [pc, #408]	; (8007cd8 <gc_execute_block+0x1fb8>)
 8007b3e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007b42:	3202      	adds	r2, #2
 8007b44:	0092      	lsls	r2, r2, #2
 8007b46:	440a      	add	r2, r1
 8007b48:	3204      	adds	r2, #4
 8007b4a:	ed92 7a00 	vldr	s14, [r2]
 8007b4e:	495f      	ldr	r1, [pc, #380]	; (8007ccc <gc_execute_block+0x1fac>)
 8007b50:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007b54:	3218      	adds	r2, #24
 8007b56:	0092      	lsls	r2, r2, #2
 8007b58:	440a      	add	r2, r1
 8007b5a:	edd2 7a00 	vldr	s15, [r2]
 8007b5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8007b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b66:	bf14      	ite	ne
 8007b68:	2201      	movne	r2, #1
 8007b6a:	2200      	moveq	r2, #0
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bf14      	ite	ne
 8007b74:	2301      	movne	r3, #1
 8007b76:	2300      	moveq	r3, #0
 8007b78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
                    scale_factor.ijk[idx] = gc_block.values.xyz[idx];
 8007b7c:	4a53      	ldr	r2, [pc, #332]	; (8007ccc <gc_execute_block+0x1fac>)
 8007b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b82:	3318      	adds	r3, #24
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4953      	ldr	r1, [pc, #332]	; (8007cd8 <gc_execute_block+0x1fb8>)
 8007b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b90:	3302      	adds	r3, #2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	3304      	adds	r3, #4
 8007b98:	601a      	str	r2, [r3, #0]
                    bit_false(axis_words.mask, bit(idx));
 8007b9a:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	43db      	mvns	r3, r3
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	4013      	ands	r3, r2
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
                    system_add_rt_report(Report_Scaling);
 8007bb6:	2002      	movs	r0, #2
 8007bb8:	f019 fd06 	bl	80215c8 <system_add_rt_report>
                }
                gc_block.modal.scaling_active = gc_block.modal.scaling_active || (scale_factor.xyz[idx] != 1.0f);
 8007bbc:	4b43      	ldr	r3, [pc, #268]	; (8007ccc <gc_execute_block+0x1fac>)
 8007bbe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10d      	bne.n	8007be2 <gc_execute_block+0x1ec2>
 8007bc6:	4a44      	ldr	r2, [pc, #272]	; (8007cd8 <gc_execute_block+0x1fb8>)
 8007bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	edd3 7a00 	vldr	s15, [r3]
 8007bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd8:	eef4 7a47 	vcmp.f32	s15, s14
 8007bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be0:	d001      	beq.n	8007be6 <gc_execute_block+0x1ec6>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <gc_execute_block+0x1ec8>
 8007be6:	2300      	movs	r3, #0
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	4b37      	ldr	r3, [pc, #220]	; (8007ccc <gc_execute_block+0x1fac>)
 8007bf0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
            } while(idx);
 8007bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d18d      	bne.n	8007b18 <gc_execute_block+0x1df8>

            gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 8007bfc:	4b33      	ldr	r3, [pc, #204]	; (8007ccc <gc_execute_block+0x1fac>)
 8007bfe:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007c02:	4b36      	ldr	r3, [pc, #216]	; (8007cdc <gc_execute_block+0x1fbc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	43db      	mvns	r3, r3
 8007c08:	4013      	ands	r3, r2
 8007c0a:	4a30      	ldr	r2, [pc, #192]	; (8007ccc <gc_execute_block+0x1fac>)
 8007c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
            if(gc_block.words.p)
                gc_block.words.p = Off;
            else
                gc_block.words.i = gc_block.words.j = gc_block.words.k = Off;
#endif
            report_scaling |= gc_state.modal.scaling_active != gc_block.modal.scaling_active;
 8007c10:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007c14:	4a2f      	ldr	r2, [pc, #188]	; (8007cd4 <gc_execute_block+0x1fb4>)
 8007c16:	7f91      	ldrb	r1, [r2, #30]
 8007c18:	4a2c      	ldr	r2, [pc, #176]	; (8007ccc <gc_execute_block+0x1fac>)
 8007c1a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8007c1e:	4291      	cmp	r1, r2
 8007c20:	bf14      	ite	ne
 8007c22:	2201      	movne	r2, #1
 8007c24:	2200      	moveq	r2, #0
 8007c26:	b2d2      	uxtb	r2, r2
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            gc_state.modal.scaling_active = gc_block.modal.scaling_active;
 8007c36:	4b25      	ldr	r3, [pc, #148]	; (8007ccc <gc_execute_block+0x1fac>)
 8007c38:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8007c3c:	4b25      	ldr	r3, [pc, #148]	; (8007cd4 <gc_execute_block+0x1fb4>)
 8007c3e:	779a      	strb	r2, [r3, #30]

            if(report_scaling)
 8007c40:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <gc_execute_block+0x1f38>
                system_add_rt_report(Report_Scaling);
 8007c48:	2002      	movs	r0, #2
 8007c4a:	f019 fcbd 	bl	80215c8 <system_add_rt_report>
 8007c4e:	e003      	b.n	8007c58 <gc_execute_block+0x1f38>

        } else
            set_scaling(1.0f);
 8007c50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c54:	f7fd fbf2 	bl	800543c <set_scaling>
    }

    // Scale axis words if scaling active
    if(gc_state.modal.scaling_active) {
 8007c58:	4b1e      	ldr	r3, [pc, #120]	; (8007cd4 <gc_execute_block+0x1fb4>)
 8007c5a:	7f9b      	ldrb	r3, [r3, #30]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d070      	beq.n	8007d42 <gc_execute_block+0x2022>
        idx = N_AXIS;
 8007c60:	2303      	movs	r3, #3
 8007c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        do {
            if(bit_istrue(axis_words.mask, bit(--idx))) {
 8007c66:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c70:	3b01      	subs	r3, #1
 8007c72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d059      	beq.n	8007d3a <gc_execute_block+0x201a>
                if(gc_block.modal.distance_incremental)
 8007c86:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <gc_execute_block+0x1fac>)
 8007c88:	7b1b      	ldrb	r3, [r3, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d028      	beq.n	8007ce0 <gc_execute_block+0x1fc0>
                     gc_block.values.xyz[idx] *= scale_factor.ijk[idx];
 8007c8e:	4a0f      	ldr	r2, [pc, #60]	; (8007ccc <gc_execute_block+0x1fac>)
 8007c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c94:	3318      	adds	r3, #24
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	ed93 7a00 	vldr	s14, [r3]
 8007c9e:	4a0e      	ldr	r2, [pc, #56]	; (8007cd8 <gc_execute_block+0x1fb8>)
 8007ca0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	3304      	adds	r3, #4
 8007cac:	edd3 7a00 	vldr	s15, [r3]
 8007cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb4:	4a05      	ldr	r2, [pc, #20]	; (8007ccc <gc_execute_block+0x1fac>)
 8007cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cba:	3318      	adds	r3, #24
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	edc3 7a00 	vstr	s15, [r3]
 8007cc4:	e039      	b.n	8007d3a <gc_execute_block+0x201a>
 8007cc6:	bf00      	nop
 8007cc8:	2000151c 	.word	0x2000151c
 8007ccc:	20001470 	.word	0x20001470
 8007cd0:	41cb3333 	.word	0x41cb3333
 8007cd4:	2000137c 	.word	0x2000137c
 8007cd8:	2000039c 	.word	0x2000039c
 8007cdc:	08032918 	.word	0x08032918
                else
                     gc_block.values.xyz[idx] = (gc_block.values.xyz[idx] - scale_factor.xyz[idx]) * scale_factor.ijk[idx] + scale_factor.xyz[idx];
 8007ce0:	4abf      	ldr	r2, [pc, #764]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	ed93 7a00 	vldr	s14, [r3]
 8007cf0:	4abc      	ldr	r2, [pc, #752]	; (8007fe4 <gc_execute_block+0x22c4>)
 8007cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	edd3 7a00 	vldr	s15, [r3]
 8007cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d02:	4ab8      	ldr	r2, [pc, #736]	; (8007fe4 <gc_execute_block+0x22c4>)
 8007d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d08:	3302      	adds	r3, #2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	3304      	adds	r3, #4
 8007d10:	edd3 7a00 	vldr	s15, [r3]
 8007d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d18:	4ab2      	ldr	r2, [pc, #712]	; (8007fe4 <gc_execute_block+0x22c4>)
 8007d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	edd3 7a00 	vldr	s15, [r3]
 8007d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d2a:	4aad      	ldr	r2, [pc, #692]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d30:	3318      	adds	r3, #24
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	edc3 7a00 	vstr	s15, [r3]
            }
        } while(idx);
 8007d3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d191      	bne.n	8007c66 <gc_execute_block+0x1f46>
    //   only for the purpose to not error when G40 is sent with a g-code program header to setup the default modes.

    // [14. Tool length compensation ]: G43.1 and G49 are always supported, G43 and G43.2 if N_TOOLS defined.
    // [G43.1 Errors]: Motion command in same line.
    // [G43.2 Errors]: Tool number not in the tool table,
    if (command_words.G8) { // Indicates called in block.
 8007d42:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00d      	beq.n	8007d6c <gc_execute_block+0x204c>
            if (axis_words.mask ^ bit(TOOL_LENGTH_OFFSET_AXIS))
                FAIL(Status_GcodeG43DynamicAxisError);
        }
#endif

        switch(gc_block.modal.tool_offset_mode) {
 8007d50:	4ba3      	ldr	r3, [pc, #652]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007d52:	7bdb      	ldrb	r3, [r3, #15]
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d106      	bne.n	8007d66 <gc_execute_block+0x2046>

            case ToolLengthOffset_EnableDynamic:
                if (!axis_words.mask)
 8007d58:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <gc_execute_block+0x204a>
                    FAIL(Status_GcodeG43DynamicAxisError);
 8007d60:	2325      	movs	r3, #37	; 0x25
 8007d62:	f002 bfb9 	b.w	800acd8 <gc_execute_block+0x4fb8>
                } else
                    FAIL(Status_GcodeValueWordMissing);
                break;
#endif
            default:
                break;
 8007d66:	bf00      	nop
 8007d68:	e000      	b.n	8007d6c <gc_execute_block+0x204c>
                break;
 8007d6a:	bf00      	nop
    // TODO: A read of the coordinate data may require a buffer sync when the cycle
    // is active. The read pauses the processor temporarily and may cause a rare crash.
    // NOTE: If NVS buffering is active then non-volatile storage reads/writes are buffered and updates
    // delayed until no cycle is active.

    if (command_words.G12) { // Check if called in block
 8007d6c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d014      	beq.n	8007da4 <gc_execute_block+0x2084>
        if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id && !settings_read_coord_data(gc_block.modal.coord_system.id, &gc_block.modal.coord_system.xyz))
 8007d7a:	4b9b      	ldr	r3, [pc, #620]	; (8007fe8 <gc_execute_block+0x22c8>)
 8007d7c:	7d1a      	ldrb	r2, [r3, #20]
 8007d7e:	4b98      	ldr	r3, [pc, #608]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007d80:	7f1b      	ldrb	r3, [r3, #28]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d00e      	beq.n	8007da4 <gc_execute_block+0x2084>
 8007d86:	4b96      	ldr	r3, [pc, #600]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007d88:	7f1b      	ldrb	r3, [r3, #28]
 8007d8a:	4998      	ldr	r1, [pc, #608]	; (8007fec <gc_execute_block+0x22cc>)
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f012 fa37 	bl	801a200 <settings_read_coord_data>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f083 0301 	eor.w	r3, r3, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <gc_execute_block+0x2084>
            FAIL(Status_SettingReadFail);
 8007d9e:	2307      	movs	r3, #7
 8007da0:	f002 bf9a 	b.w	800acd8 <gc_execute_block+0x4fb8>
    // [19. Remaining non-modal actions ]: Check go to predefined position, set G10, or set axis offsets.
    // NOTE: We need to separate the non-modal commands that are axis word-using (G10/G28/G30/G92), as these
    // commands all treat axis words differently. G10 as absolute offsets or computes current position as
    // the axis value, G92 similarly to G10 L20, and G28/30 as an intermediate target position that observes
    // all the current coordinate system and G92 offsets.
    switch (gc_block.non_modal_command) {
 8007da4:	4b8e      	ldr	r3, [pc, #568]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b0a      	cmp	r3, #10
 8007daa:	d003      	beq.n	8007db4 <gc_execute_block+0x2094>
 8007dac:	2b5c      	cmp	r3, #92	; 0x5c
 8007dae:	f000 8123 	beq.w	8007ff8 <gc_execute_block+0x22d8>
 8007db2:	e17e      	b.n	80080b2 <gc_execute_block+0x2392>
            // [G10 Errors]: L missing and is not 2 or 20. P word missing. (Negative P value done.)
            // [G10 L2 Errors]: R word NOT SUPPORTED. P value not 0 to N_WorkCoordinateSystems (max 9). Axis words missing.
            // [G10 L20 Errors]: P must be 0 to N_WorkCoordinateSystems (max 9). Axis words missing.
            // [G10 L1, L10, L11 Errors]: P must be 0 to MAX_TOOL_NUMBER (max 9). Axis words or R word missing.

            if (!(axis_words.mask || (gc_block.values.l != 20 && gc_block.words.r)))
 8007db4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10f      	bne.n	8007ddc <gc_execute_block+0x20bc>
 8007dbc:	4b88      	ldr	r3, [pc, #544]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007dbe:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007dc2:	2b14      	cmp	r3, #20
 8007dc4:	d007      	beq.n	8007dd6 <gc_execute_block+0x20b6>
 8007dc6:	4b86      	ldr	r3, [pc, #536]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007dc8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <gc_execute_block+0x20bc>
                FAIL(Status_GcodeNoAxisWords); // [No axis words (or R word for tool offsets)]
 8007dd6:	231a      	movs	r3, #26
 8007dd8:	f002 bf7e 	b.w	800acd8 <gc_execute_block+0x4fb8>

            if (!(gc_block.words.p || gc_block.words.l))
 8007ddc:	4b80      	ldr	r3, [pc, #512]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007dde:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <gc_execute_block+0x20e2>
 8007dec:	4b7c      	ldr	r3, [pc, #496]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007dee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007df2:	f003 0310 	and.w	r3, r3, #16
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <gc_execute_block+0x20e2>
                FAIL(Status_GcodeValueWordMissing); // [P/L word missing]
 8007dfc:	231c      	movs	r3, #28
 8007dfe:	f002 bf6b 	b.w	800acd8 <gc_execute_block+0x4fb8>

            if(gc_block.values.p < 0.0f)
 8007e02:	4b77      	ldr	r3, [pc, #476]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007e04:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e10:	d502      	bpl.n	8007e18 <gc_execute_block+0x20f8>
                FAIL(Status_NegativeValue);
 8007e12:	2304      	movs	r3, #4
 8007e14:	f002 bf60 	b.w	800acd8 <gc_execute_block+0x4fb8>

            uint8_t p_value;

            p_value = (uint8_t)truncf(gc_block.values.p); // Convert p value to int.
 8007e18:	4b71      	ldr	r3, [pc, #452]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007e1a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e22:	f01f f85e 	bl	8026ee2 <truncf>
 8007e26:	eef0 7a40 	vmov.f32	s15, s0
 8007e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e2e:	edc7 7a00 	vstr	s15, [r7]
 8007e32:	783b      	ldrb	r3, [r7, #0]
 8007e34:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

            switch(gc_block.values.l) {
 8007e38:	4b69      	ldr	r3, [pc, #420]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007e3a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d002      	beq.n	8007e48 <gc_execute_block+0x2128>
 8007e42:	2b14      	cmp	r3, #20
 8007e44:	d00b      	beq.n	8007e5e <gc_execute_block+0x213e>
 8007e46:	e0b2      	b.n	8007fae <gc_execute_block+0x228e>

                case 2:
                    if (gc_block.words.r)
 8007e48:	4b65      	ldr	r3, [pc, #404]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007e4a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <gc_execute_block+0x213e>
                        FAIL(Status_GcodeUnsupportedCommand); // [G10 L2 R not supported]
 8007e58:	2314      	movs	r3, #20
 8007e5a:	f002 bf3d 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    // no break

                case 20:
                    if (p_value > N_WorkCoordinateSystems)
 8007e5e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d902      	bls.n	8007e6c <gc_execute_block+0x214c>
                        FAIL(Status_GcodeUnsupportedCoordSys); // [Greater than N sys]
 8007e66:	231d      	movs	r3, #29
 8007e68:	f002 bf36 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    // Determine coordinate system to change and try to load from non-volatile storage.
                    gc_block.values.coord_data.id = p_value == 0
                                                     ? gc_block.modal.coord_system.id       // Index P0 as the active coordinate system
                                                     : (coord_system_id_t)(p_value - 1);    // else adjust index to NVS coordinate data indexing.
 8007e6c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <gc_execute_block+0x215a>
 8007e74:	4b5a      	ldr	r3, [pc, #360]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007e76:	7f1b      	ldrb	r3, [r3, #28]
 8007e78:	e003      	b.n	8007e82 <gc_execute_block+0x2162>
 8007e7a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	b2db      	uxtb	r3, r3
                    gc_block.values.coord_data.id = p_value == 0
 8007e82:	4a57      	ldr	r2, [pc, #348]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007e84:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78

                    if (!settings_read_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz))
 8007e88:	4b55      	ldr	r3, [pc, #340]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007e8a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007e8e:	4958      	ldr	r1, [pc, #352]	; (8007ff0 <gc_execute_block+0x22d0>)
 8007e90:	4618      	mov	r0, r3
 8007e92:	f012 f9b5 	bl	801a200 <settings_read_coord_data>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f083 0301 	eor.w	r3, r3, #1
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <gc_execute_block+0x2188>
                        FAIL(Status_SettingReadFail); // [non-volatile storage read fail]
 8007ea2:	2307      	movs	r3, #7
 8007ea4:	f002 bf18 	b.w	800acd8 <gc_execute_block+0x4fb8>

#if COMPATIBILITY_LEVEL <= 1
                    if(settings.parking.flags.offset_lock && gc_block.values.coord_data.id >= CoordinateSystem_G59_1 && gc_block.values.coord_data.id <= CoordinateSystem_G59_3) {
 8007ea8:	4b52      	ldr	r3, [pc, #328]	; (8007ff4 <gc_execute_block+0x22d4>)
 8007eaa:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007eae:	f023 031f 	bic.w	r3, r3, #31
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01d      	beq.n	8007ef4 <gc_execute_block+0x21d4>
 8007eb8:	4b49      	ldr	r3, [pc, #292]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007eba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d918      	bls.n	8007ef4 <gc_execute_block+0x21d4>
 8007ec2:	4b47      	ldr	r3, [pc, #284]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007ec4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d813      	bhi.n	8007ef4 <gc_execute_block+0x21d4>
                        if(bit_istrue(settings.parking.flags.offset_lock, bit(gc_block.values.coord_data.id - CoordinateSystem_G59_1)))
 8007ecc:	4b49      	ldr	r3, [pc, #292]	; (8007ff4 <gc_execute_block+0x22d4>)
 8007ece:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8007ed2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4b41      	ldr	r3, [pc, #260]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007edc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8007ee0:	3b06      	subs	r3, #6
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <gc_execute_block+0x21d4>
                            FAIL(Status_GCodeCoordSystemLocked);
 8007eee:	2338      	movs	r3, #56	; 0x38
 8007ef0:	f002 bef2 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    }
#endif

                    // Pre-calculate the coordinate data changes.
                    idx = N_AXIS;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    do { // Axes indices are consistent, so loop may be used.
                        // Update axes defined only in block. Always in machine coordinates. Can change non-active system.
                        if (bit_istrue(axis_words.mask, bit(--idx))) {
 8007efa:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007efe:	461a      	mov	r2, r3
 8007f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f04:	3b01      	subs	r3, #1
 8007f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d044      	beq.n	8007fa4 <gc_execute_block+0x2284>
                            if (gc_block.values.l == 20)
 8007f1a:	4b31      	ldr	r3, [pc, #196]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007f1c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007f20:	2b14      	cmp	r3, #20
 8007f22:	d130      	bne.n	8007f86 <gc_execute_block+0x2266>
                                // L20: Update coordinate system axis at current position (with modifiers) with programmed value
                                // WPos = MPos - WCS - G92 - TLO  ->  WCS = MPos - G92 - TLO - WPos
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx] - gc_block.values.xyz[idx] - gc_state.g92_coord_offset[idx] - gc_state.tool_length_offset[idx];
 8007f24:	4a30      	ldr	r2, [pc, #192]	; (8007fe8 <gc_execute_block+0x22c8>)
 8007f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f2a:	3318      	adds	r3, #24
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	ed93 7a00 	vldr	s14, [r3]
 8007f34:	4a2a      	ldr	r2, [pc, #168]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f3a:	3318      	adds	r3, #24
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	edd3 7a00 	vldr	s15, [r3]
 8007f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f48:	4a27      	ldr	r2, [pc, #156]	; (8007fe8 <gc_execute_block+0x22c8>)
 8007f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f4e:	331e      	adds	r3, #30
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	3304      	adds	r3, #4
 8007f56:	edd3 7a00 	vldr	s15, [r3]
 8007f5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f5e:	4a22      	ldr	r2, [pc, #136]	; (8007fe8 <gc_execute_block+0x22c8>)
 8007f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f64:	3322      	adds	r3, #34	; 0x22
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	edd3 7a00 	vldr	s15, [r3]
 8007f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f72:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f78:	331a      	adds	r3, #26
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	3304      	adds	r3, #4
 8007f80:	edc3 7a00 	vstr	s15, [r3]
 8007f84:	e00e      	b.n	8007fa4 <gc_execute_block+0x2284>
                            else // L2: Update coordinate system axis to programmed value.
                                gc_block.values.coord_data.xyz[idx] = gc_block.values.xyz[idx];
 8007f86:	4a16      	ldr	r2, [pc, #88]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f8c:	3318      	adds	r3, #24
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4912      	ldr	r1, [pc, #72]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f9a:	331a      	adds	r3, #26
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	601a      	str	r2, [r3, #0]
                        } // else, keep current stored value.
                    } while(idx);
 8007fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1a6      	bne.n	8007efa <gc_execute_block+0x21da>
                    break;
 8007fac:	e002      	b.n	8007fb4 <gc_execute_block+0x2294>
                        settings_write_tool_data(&tool_table[p_value]);

                    break;
#endif
                default:
                    FAIL(Status_GcodeUnsupportedCommand); // [Unsupported L]
 8007fae:	2314      	movs	r3, #20
 8007fb0:	f002 be92 	b.w	800acd8 <gc_execute_block+0x4fb8>
            }
            gc_block.words.l = gc_block.words.p = Off;
 8007fb4:	4a0a      	ldr	r2, [pc, #40]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007fb6:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8007fba:	f36f 0300 	bfc	r3, #0, #1
 8007fbe:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8007fc2:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007fc4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8007fc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007fcc:	b2d9      	uxtb	r1, r3
 8007fce:	4a04      	ldr	r2, [pc, #16]	; (8007fe0 <gc_execute_block+0x22c0>)
 8007fd0:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8007fd4:	f361 1304 	bfi	r3, r1, #4, #1
 8007fd8:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            break;
 8007fdc:	e1a1      	b.n	8008322 <gc_execute_block+0x2602>
 8007fde:	bf00      	nop
 8007fe0:	20001470 	.word	0x20001470
 8007fe4:	2000039c 	.word	0x2000039c
 8007fe8:	2000137c 	.word	0x2000137c
 8007fec:	20001480 	.word	0x20001480
 8007ff0:	200014dc 	.word	0x200014dc
 8007ff4:	20001cf0 	.word	0x20001cf0

        case NonModal_SetCoordinateOffset:

            // [G92 Errors]: No axis words.
            if (!axis_words.mask)
 8007ff8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <gc_execute_block+0x22e6>
                FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8008000:	231a      	movs	r3, #26
 8008002:	f002 be69 	b.w	800acd8 <gc_execute_block+0x4fb8>

            // Update axes defined only in block. Offsets current system to defined value. Does not update when
            // active coordinate system is selected, but is still active unless G92.1 disables it.
            idx = N_AXIS;
 8008006:	2303      	movs	r3, #3
 8008008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            do { // Axes indices are consistent, so loop may be used.
                if (bit_istrue(axis_words.mask, bit(--idx))) {
 800800c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008010:	461a      	mov	r2, r3
 8008012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008016:	3b01      	subs	r3, #1
 8008018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800801c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008020:	fa22 f303 	lsr.w	r3, r2, r3
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d02e      	beq.n	800808a <gc_execute_block+0x236a>
            // WPos = MPos - WCS - G92 - TLO  ->  G92 = MPos - WCS - TLO - WPos
                    gc_block.values.xyz[idx] = gc_state.position[idx] - gc_block.modal.coord_system.xyz[idx] - gc_block.values.xyz[idx] - gc_state.tool_length_offset[idx];
 800802c:	4ac7      	ldr	r2, [pc, #796]	; (800834c <gc_execute_block+0x262c>)
 800802e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008032:	3318      	adds	r3, #24
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	ed93 7a00 	vldr	s14, [r3]
 800803c:	4ac4      	ldr	r2, [pc, #784]	; (8008350 <gc_execute_block+0x2630>)
 800803e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008042:	3304      	adds	r3, #4
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	edd3 7a00 	vldr	s15, [r3]
 800804c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008050:	4abf      	ldr	r2, [pc, #764]	; (8008350 <gc_execute_block+0x2630>)
 8008052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008056:	3318      	adds	r3, #24
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	edd3 7a00 	vldr	s15, [r3]
 8008060:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008064:	4ab9      	ldr	r2, [pc, #740]	; (800834c <gc_execute_block+0x262c>)
 8008066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800806a:	3322      	adds	r3, #34	; 0x22
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	edd3 7a00 	vldr	s15, [r3]
 8008074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008078:	4ab5      	ldr	r2, [pc, #724]	; (8008350 <gc_execute_block+0x2630>)
 800807a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800807e:	3318      	adds	r3, #24
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	edc3 7a00 	vstr	s15, [r3]
 8008088:	e00e      	b.n	80080a8 <gc_execute_block+0x2388>
                } else
                    gc_block.values.xyz[idx] = gc_state.g92_coord_offset[idx];
 800808a:	4ab0      	ldr	r2, [pc, #704]	; (800834c <gc_execute_block+0x262c>)
 800808c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008090:	331e      	adds	r3, #30
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	3304      	adds	r3, #4
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	49ad      	ldr	r1, [pc, #692]	; (8008350 <gc_execute_block+0x2630>)
 800809c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a0:	3318      	adds	r3, #24
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	440b      	add	r3, r1
 80080a6:	601a      	str	r2, [r3, #0]
            } while(idx);
 80080a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1ad      	bne.n	800800c <gc_execute_block+0x22ec>
            break;
 80080b0:	e137      	b.n	8008322 <gc_execute_block+0x2602>

            // At this point, the rest of the explicit axis commands treat the axis values as the traditional
            // target position with the coordinate system offsets, G92 offsets, absolute override, and distance
            // modes applied. This includes the motion mode commands. We can now pre-compute the target position.
            // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
            if (axis_words.mask && axis_command != AxisCommand_ToolLengthOffset) { // TLO block any axis command.
 80080b2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d065      	beq.n	8008186 <gc_execute_block+0x2466>
 80080ba:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d061      	beq.n	8008186 <gc_execute_block+0x2466>
                idx = N_AXIS;
 80080c2:	2303      	movs	r3, #3
 80080c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                do { // Axes indices are consistent, so loop may be used to save flash space.
                    if (bit_isfalse(axis_words.mask, bit(--idx)))
 80080c8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80080cc:	461a      	mov	r2, r3
 80080ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080d2:	3b01      	subs	r3, #1
 80080d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080dc:	fa22 f303 	lsr.w	r3, r2, r3
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10e      	bne.n	8008106 <gc_execute_block+0x23e6>
                        gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80080e8:	4a98      	ldr	r2, [pc, #608]	; (800834c <gc_execute_block+0x262c>)
 80080ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ee:	3318      	adds	r3, #24
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4996      	ldr	r1, [pc, #600]	; (8008350 <gc_execute_block+0x2630>)
 80080f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080fc:	3318      	adds	r3, #24
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	440b      	add	r3, r1
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e03b      	b.n	800817e <gc_execute_block+0x245e>
                    else if (gc_block.non_modal_command != NonModal_AbsoluteOverride) {
 8008106:	4b92      	ldr	r3, [pc, #584]	; (8008350 <gc_execute_block+0x2630>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b35      	cmp	r3, #53	; 0x35
 800810c:	d037      	beq.n	800817e <gc_execute_block+0x245e>
                        // Update specified value according to distance mode or ignore if absolute override is active.
                        // NOTE: G53 is never active with G28/30 since they are in the same modal group.
                        // Apply coordinate offsets based on distance mode.
                        if (gc_block.modal.distance_incremental)
 800810e:	4b90      	ldr	r3, [pc, #576]	; (8008350 <gc_execute_block+0x2630>)
 8008110:	7b1b      	ldrb	r3, [r3, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d01a      	beq.n	800814c <gc_execute_block+0x242c>
                            gc_block.values.xyz[idx] += gc_state.position[idx];
 8008116:	4a8e      	ldr	r2, [pc, #568]	; (8008350 <gc_execute_block+0x2630>)
 8008118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800811c:	3318      	adds	r3, #24
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	ed93 7a00 	vldr	s14, [r3]
 8008126:	4a89      	ldr	r2, [pc, #548]	; (800834c <gc_execute_block+0x262c>)
 8008128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800812c:	3318      	adds	r3, #24
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	edd3 7a00 	vldr	s15, [r3]
 8008136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800813a:	4a85      	ldr	r2, [pc, #532]	; (8008350 <gc_execute_block+0x2630>)
 800813c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008140:	3318      	adds	r3, #24
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	edc3 7a00 	vstr	s15, [r3]
 800814a:	e018      	b.n	800817e <gc_execute_block+0x245e>
                        else  // Absolute mode
                            gc_block.values.xyz[idx] += gc_get_block_offset(&gc_block, idx);
 800814c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008150:	487f      	ldr	r0, [pc, #508]	; (8008350 <gc_execute_block+0x2630>)
 8008152:	f7fd fa13 	bl	800557c <gc_get_block_offset>
 8008156:	eeb0 7a40 	vmov.f32	s14, s0
 800815a:	4a7d      	ldr	r2, [pc, #500]	; (8008350 <gc_execute_block+0x2630>)
 800815c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008160:	3318      	adds	r3, #24
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	edd3 7a00 	vldr	s15, [r3]
 800816a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800816e:	4a78      	ldr	r2, [pc, #480]	; (8008350 <gc_execute_block+0x2630>)
 8008170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008174:	3318      	adds	r3, #24
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	edc3 7a00 	vstr	s15, [r3]
                    }
                } while(idx);
 800817e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1a0      	bne.n	80080c8 <gc_execute_block+0x23a8>
            }

            // Check remaining non-modal commands for errors.
            switch (gc_block.non_modal_command) {
 8008186:	4b72      	ldr	r3, [pc, #456]	; (8008350 <gc_execute_block+0x2630>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b41      	cmp	r3, #65	; 0x41
 800818c:	dc56      	bgt.n	800823c <gc_execute_block+0x251c>
 800818e:	2b1c      	cmp	r3, #28
 8008190:	f2c0 80c4 	blt.w	800831c <gc_execute_block+0x25fc>
 8008194:	3b1c      	subs	r3, #28
 8008196:	2b25      	cmp	r3, #37	; 0x25
 8008198:	f200 80c0 	bhi.w	800831c <gc_execute_block+0x25fc>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <gc_execute_block+0x2484>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	08008241 	.word	0x08008241
 80081a8:	0800831d 	.word	0x0800831d
 80081ac:	08008241 	.word	0x08008241
 80081b0:	0800831d 	.word	0x0800831d
 80081b4:	0800831d 	.word	0x0800831d
 80081b8:	0800831d 	.word	0x0800831d
 80081bc:	0800831d 	.word	0x0800831d
 80081c0:	0800831d 	.word	0x0800831d
 80081c4:	0800831d 	.word	0x0800831d
 80081c8:	0800831d 	.word	0x0800831d
 80081cc:	0800831d 	.word	0x0800831d
 80081d0:	0800831d 	.word	0x0800831d
 80081d4:	0800831d 	.word	0x0800831d
 80081d8:	0800831d 	.word	0x0800831d
 80081dc:	0800831d 	.word	0x0800831d
 80081e0:	0800831d 	.word	0x0800831d
 80081e4:	0800831d 	.word	0x0800831d
 80081e8:	0800831d 	.word	0x0800831d
 80081ec:	0800831d 	.word	0x0800831d
 80081f0:	0800831d 	.word	0x0800831d
 80081f4:	0800831d 	.word	0x0800831d
 80081f8:	0800831d 	.word	0x0800831d
 80081fc:	0800831d 	.word	0x0800831d
 8008200:	0800831d 	.word	0x0800831d
 8008204:	0800831d 	.word	0x0800831d
 8008208:	080082c7 	.word	0x080082c7
 800820c:	0800831d 	.word	0x0800831d
 8008210:	0800831d 	.word	0x0800831d
 8008214:	0800831d 	.word	0x0800831d
 8008218:	0800831d 	.word	0x0800831d
 800821c:	0800831d 	.word	0x0800831d
 8008220:	0800831d 	.word	0x0800831d
 8008224:	0800831d 	.word	0x0800831d
 8008228:	0800831d 	.word	0x0800831d
 800822c:	0800831d 	.word	0x0800831d
 8008230:	0800831d 	.word	0x0800831d
 8008234:	0800831d 	.word	0x0800831d
 8008238:	080082dd 	.word	0x080082dd
 800823c:	2b66      	cmp	r3, #102	; 0x66
                    // NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
                    break;

                case NonModal_ResetCoordinateOffset:
                    // NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
                    break;
 800823e:	e070      	b.n	8008322 <gc_execute_block+0x2602>
                    if (!settings_read_coord_data(gc_block.non_modal_command == NonModal_GoHome_0 ? CoordinateSystem_G28 : CoordinateSystem_G30, &gc_block.values.coord_data.xyz))
 8008240:	4b43      	ldr	r3, [pc, #268]	; (8008350 <gc_execute_block+0x2630>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b1c      	cmp	r3, #28
 8008246:	d101      	bne.n	800824c <gc_execute_block+0x252c>
 8008248:	2309      	movs	r3, #9
 800824a:	e000      	b.n	800824e <gc_execute_block+0x252e>
 800824c:	230a      	movs	r3, #10
 800824e:	4941      	ldr	r1, [pc, #260]	; (8008354 <gc_execute_block+0x2634>)
 8008250:	4618      	mov	r0, r3
 8008252:	f011 ffd5 	bl	801a200 <settings_read_coord_data>
 8008256:	4603      	mov	r3, r0
 8008258:	f083 0301 	eor.w	r3, r3, #1
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <gc_execute_block+0x2548>
                        FAIL(Status_SettingReadFail);
 8008262:	2307      	movs	r3, #7
 8008264:	f002 bd38 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if (axis_words.mask) {
 8008268:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800826c:	2b00      	cmp	r3, #0
 800826e:	d026      	beq.n	80082be <gc_execute_block+0x259e>
                        idx = N_AXIS;
 8008270:	2303      	movs	r3, #3
 8008272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                            if (bit_isfalse(axis_words.mask, bit(--idx)))
 8008276:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800827a:	461a      	mov	r2, r3
 800827c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008280:	3b01      	subs	r3, #1
 8008282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800828a:	fa22 f303 	lsr.w	r3, r2, r3
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10e      	bne.n	80082b4 <gc_execute_block+0x2594>
                                gc_block.values.coord_data.xyz[idx] = gc_state.position[idx];
 8008296:	4a2d      	ldr	r2, [pc, #180]	; (800834c <gc_execute_block+0x262c>)
 8008298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800829c:	3318      	adds	r3, #24
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	492a      	ldr	r1, [pc, #168]	; (8008350 <gc_execute_block+0x2630>)
 80082a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082aa:	331a      	adds	r3, #26
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	440b      	add	r3, r1
 80082b0:	3304      	adds	r3, #4
 80082b2:	601a      	str	r2, [r3, #0]
                        } while(idx);
 80082b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1dc      	bne.n	8008276 <gc_execute_block+0x2556>
                    break;
 80082bc:	e031      	b.n	8008322 <gc_execute_block+0x2602>
                        axis_command = AxisCommand_None; // Set to none if no intermediate motion.
 80082be:	2300      	movs	r3, #0
 80082c0:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
                    break;
 80082c4:	e02d      	b.n	8008322 <gc_execute_block+0x2602>

                case NonModal_AbsoluteOverride:
                    // [G53 Errors]: G0 and G1 are not active. Cutter compensation is enabled.
                    // NOTE: All explicit axis word commands are in this modal group. So no implicit check necessary.
                    if (!(gc_block.modal.motion == MotionMode_Seek || gc_block.modal.motion == MotionMode_Linear))
 80082c6:	4b22      	ldr	r3, [pc, #136]	; (8008350 <gc_execute_block+0x2630>)
 80082c8:	891b      	ldrh	r3, [r3, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d028      	beq.n	8008320 <gc_execute_block+0x2600>
 80082ce:	4b20      	ldr	r3, [pc, #128]	; (8008350 <gc_execute_block+0x2630>)
 80082d0:	891b      	ldrh	r3, [r3, #8]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d024      	beq.n	8008320 <gc_execute_block+0x2600>
                        FAIL(Status_GcodeG53InvalidMotionMode); // [G53 G0/1 not active]
 80082d6:	231e      	movs	r3, #30
 80082d8:	f002 bcfe 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    break;

                case NonModal_MacroCall:
                    if(!gc_block.words.p)
 80082dc:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <gc_execute_block+0x2630>)
 80082de:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <gc_execute_block+0x25d2>
                        FAIL(Status_GcodeValueWordMissing); // [P word missing]
 80082ec:	231c      	movs	r3, #28
 80082ee:	f002 bcf3 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if(gc_block.values.p > 65535.0f)
 80082f2:	4b17      	ldr	r3, [pc, #92]	; (8008350 <gc_execute_block+0x2630>)
 80082f4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80082f8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008358 <gc_execute_block+0x2638>
 80082fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008304:	dd02      	ble.n	800830c <gc_execute_block+0x25ec>
                        FAIL(Status_GcodeValueOutOfRange); // [P word out of range]
 8008306:	2327      	movs	r3, #39	; 0x27
 8008308:	f002 bce6 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            idx++;
                            gc_block.words.value >>= 1;
                        }
                    }
#else
                    gc_block.words.p = Off;
 800830c:	4a10      	ldr	r2, [pc, #64]	; (8008350 <gc_execute_block+0x2630>)
 800830e:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8008312:	f36f 0300 	bfc	r3, #0, #1
 8008316:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
#endif
                    break;
 800831a:	e002      	b.n	8008322 <gc_execute_block+0x2602>
                default:
                    break;
 800831c:	bf00      	nop
 800831e:	e000      	b.n	8008322 <gc_execute_block+0x2602>
                    break;
 8008320:	bf00      	nop
            }
    } // end gc_block.non_modal_command

    // [20. Motion modes ]:
    if (gc_block.modal.motion == MotionMode_None) {
 8008322:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <gc_execute_block+0x2630>)
 8008324:	891b      	ldrh	r3, [r3, #8]
 8008326:	2b50      	cmp	r3, #80	; 0x50
 8008328:	d118      	bne.n	800835c <gc_execute_block+0x263c>

        // [G80 Errors]: Axis word are programmed while G80 is active.
        // NOTE: Even non-modal commands or TLO that use axis words will throw this strict error.
        if (axis_words.mask && axis_command != AxisCommand_NonModal) // [No axis words allowed]
 800832a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800832e:	2b00      	cmp	r3, #0
 8008330:	d006      	beq.n	8008340 <gc_execute_block+0x2620>
 8008332:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8008336:	2b01      	cmp	r3, #1
 8008338:	d002      	beq.n	8008340 <gc_execute_block+0x2620>
            FAIL(Status_GcodeAxisWordsExist);
 800833a:	231f      	movs	r3, #31
 800833c:	f002 bccc 	b.w	800acd8 <gc_execute_block+0x4fb8>

        gc_block.modal.retract_mode = CCRetractMode_Previous;
 8008340:	4b03      	ldr	r3, [pc, #12]	; (8008350 <gc_execute_block+0x2630>)
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8008348:	f001 b94f 	b.w	80095ea <gc_execute_block+0x38ca>
 800834c:	2000137c 	.word	0x2000137c
 8008350:	20001470 	.word	0x20001470
 8008354:	200014dc 	.word	0x200014dc
 8008358:	477fff00 	.word	0x477fff00

    // Check remaining motion modes, if axis word are implicit (exist and not used by G10/28/30/92), or
    // was explicitly commanded in the g-code block.
    } else if (axis_command == AxisCommand_MotionMode) {
 800835c:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8008360:	2b02      	cmp	r3, #2
 8008362:	f041 8142 	bne.w	80095ea <gc_execute_block+0x38ca>

        gc_parser_flags.motion_mode_changed = gc_block.modal.motion != gc_state.modal.motion;
 8008366:	4b9e      	ldr	r3, [pc, #632]	; (80085e0 <gc_execute_block+0x28c0>)
 8008368:	891a      	ldrh	r2, [r3, #8]
 800836a:	4b9e      	ldr	r3, [pc, #632]	; (80085e4 <gc_execute_block+0x28c4>)
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	bf14      	ite	ne
 8008372:	2301      	movne	r3, #1
 8008374:	2300      	moveq	r3, #0
 8008376:	b2da      	uxtb	r2, r3
 8008378:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800837c:	f362 0341 	bfi	r3, r2, #1, #1
 8008380:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

        if (gc_block.modal.motion == MotionMode_Seek) {
 8008384:	4b96      	ldr	r3, [pc, #600]	; (80085e0 <gc_execute_block+0x28c0>)
 8008386:	891b      	ldrh	r3, [r3, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <gc_execute_block+0x2680>
            // [G0 Errors]: Axis letter not configured or without real value (done.)
            // Axis words are optional. If missing, set axis command flag to ignore execution.
            if (!axis_words.mask)
 800838c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008390:	2b00      	cmp	r3, #0
 8008392:	f041 812a 	bne.w	80095ea <gc_execute_block+0x38ca>
                axis_command = AxisCommand_None;
 8008396:	2300      	movs	r3, #0
 8008398:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
 800839c:	f001 b925 	b.w	80095ea <gc_execute_block+0x38ca>

        // All remaining motion modes (all but G0 and G80), require a valid feed rate value. In units per mm mode,
        // the value must be positive. In inverse time mode, a positive value must be passed with each block.
        } else {

            if(!gc_block.modal.canned_cycle_active)
 80083a0:	4b8f      	ldr	r3, [pc, #572]	; (80085e0 <gc_execute_block+0x28c0>)
 80083a2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80083a6:	f083 0301 	eor.w	r3, r3, #1
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <gc_execute_block+0x2698>
                gc_block.modal.retract_mode = CCRetractMode_Previous;
 80083b0:	4b8b      	ldr	r3, [pc, #556]	; (80085e0 <gc_execute_block+0x28c0>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

            // Initial(?) check for spindle running for moves in G96 mode
            if(gc_block.modal.spindle.rpm_mode == SpindleSpeedMode_CSS && (!gc_block.modal.spindle.state.on || gc_block.values.s == 0.0f))
 80083b8:	4b89      	ldr	r3, [pc, #548]	; (80085e0 <gc_execute_block+0x28c0>)
 80083ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d112      	bne.n	80083e8 <gc_execute_block+0x26c8>
 80083c2:	4b87      	ldr	r3, [pc, #540]	; (80085e0 <gc_execute_block+0x28c0>)
 80083c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d007      	beq.n	80083e2 <gc_execute_block+0x26c2>
 80083d2:	4b83      	ldr	r3, [pc, #524]	; (80085e0 <gc_execute_block+0x28c0>)
 80083d4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80083d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80083dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e0:	d102      	bne.n	80083e8 <gc_execute_block+0x26c8>
                 FAIL(Status_GcodeSpindleNotRunning);
 80083e2:	2329      	movs	r3, #41	; 0x29
 80083e4:	f002 bc78 	b.w	800acd8 <gc_execute_block+0x4fb8>

            // Check if feed rate is defined for the motion modes that require it.
            if (gc_block.modal.motion == MotionMode_SpindleSynchronized) {
 80083e8:	4b7d      	ldr	r3, [pc, #500]	; (80085e0 <gc_execute_block+0x28c0>)
 80083ea:	891b      	ldrh	r3, [r3, #8]
 80083ec:	2b21      	cmp	r3, #33	; 0x21
 80083ee:	d119      	bne.n	8008424 <gc_execute_block+0x2704>

                if(!gc_state.spindle.hal->get_data)
 80083f0:	4b7c      	ldr	r3, [pc, #496]	; (80085e4 <gc_execute_block+0x28c4>)
 80083f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <gc_execute_block+0x26e0>
                    FAIL(Status_GcodeUnsupportedCommand); // [G33, G33.1]
 80083fa:	2314      	movs	r3, #20
 80083fc:	f002 bc6c 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.values.k == 0.0f)
 8008400:	4b77      	ldr	r3, [pc, #476]	; (80085e0 <gc_execute_block+0x28c0>)
 8008402:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008406:	eef5 7a40 	vcmp.f32	s15, #0.0
 800840a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840e:	d102      	bne.n	8008416 <gc_execute_block+0x26f6>
                    FAIL(Status_GcodeValueOutOfRange); // [No distance (pitch) given]
 8008410:	2327      	movs	r3, #39	; 0x27
 8008412:	f002 bc61 	b.w	800acd8 <gc_execute_block+0x4fb8>

                // Ensure spindle speed is at 100% - any override will be disabled on execute.
                gc_parser_flags.spindle_force_sync = On;
 8008416:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800841a:	f043 0320 	orr.w	r3, r3, #32
 800841e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8008422:	e27e      	b.n	8008922 <gc_execute_block+0x2c02>

            } else if (gc_block.modal.motion == MotionMode_Threading) {
 8008424:	4b6e      	ldr	r3, [pc, #440]	; (80085e0 <gc_execute_block+0x28c0>)
 8008426:	891b      	ldrh	r3, [r3, #8]
 8008428:	2b4c      	cmp	r3, #76	; 0x4c
 800842a:	f040 826f 	bne.w	800890c <gc_execute_block+0x2bec>

                // Fail if cutter radius comp is active

                if(!gc_state.spindle.hal->get_data)
 800842e:	4b6d      	ldr	r3, [pc, #436]	; (80085e4 <gc_execute_block+0x28c4>)
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <gc_execute_block+0x271e>
                    FAIL(Status_GcodeUnsupportedCommand); // [G76 not supported]
 8008438:	2314      	movs	r3, #20
 800843a:	f002 bc4d 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.modal.plane_select != PlaneSelect_ZX)
 800843e:	4b68      	ldr	r3, [pc, #416]	; (80085e0 <gc_execute_block+0x28c0>)
 8008440:	7b9b      	ldrb	r3, [r3, #14]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d002      	beq.n	800844c <gc_execute_block+0x272c>
                    FAIL(Status_GcodeIllegalPlane); // [Plane not ZX]
 8008446:	232a      	movs	r3, #42	; 0x2a
 8008448:	f002 bc46 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(axis_words.mask & ~(bit(X_AXIS)|bit(Z_AXIS)))
 800844c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008450:	f023 0305 	bic.w	r3, r3, #5
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <gc_execute_block+0x273e>
                    FAIL(Status_GcodeUnusedWords); // [Only X and Z axis words allowed]
 8008458:	2324      	movs	r3, #36	; 0x24
 800845a:	f002 bc3d 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.words.r && gc_block.values.r < 1.0f)
 800845e:	4b60      	ldr	r3, [pc, #384]	; (80085e0 <gc_execute_block+0x28c0>)
 8008460:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00c      	beq.n	8008488 <gc_execute_block+0x2768>
 800846e:	4b5c      	ldr	r3, [pc, #368]	; (80085e0 <gc_execute_block+0x28c0>)
 8008470:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800847c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008480:	d502      	bpl.n	8008488 <gc_execute_block+0x2768>
                    FAIL(Status_GcodeValueOutOfRange);
 8008482:	2327      	movs	r3, #39	; 0x27
 8008484:	f002 bc28 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(!axis_words.z || !(gc_block.words.i || gc_block.words.j || gc_block.words.k || gc_block.words.p))
 8008488:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01f      	beq.n	80084d6 <gc_execute_block+0x27b6>
 8008496:	4b52      	ldr	r3, [pc, #328]	; (80085e0 <gc_execute_block+0x28c0>)
 8008498:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d11a      	bne.n	80084dc <gc_execute_block+0x27bc>
 80084a6:	4b4e      	ldr	r3, [pc, #312]	; (80085e0 <gc_execute_block+0x28c0>)
 80084a8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80084ac:	f003 0320 	and.w	r3, r3, #32
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d112      	bne.n	80084dc <gc_execute_block+0x27bc>
 80084b6:	4b4a      	ldr	r3, [pc, #296]	; (80085e0 <gc_execute_block+0x28c0>)
 80084b8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <gc_execute_block+0x27bc>
 80084c6:	4b46      	ldr	r3, [pc, #280]	; (80085e0 <gc_execute_block+0x28c0>)
 80084c8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <gc_execute_block+0x27bc>
                    FAIL(Status_GcodeValueWordMissing);
 80084d6:	231c      	movs	r3, #28
 80084d8:	f002 bbfe 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.values.p < 0.0f || gc_block.values.ijk[J_VALUE] < 0.0f || gc_block.values.ijk[K_VALUE] < 0.0f)
 80084dc:	4b40      	ldr	r3, [pc, #256]	; (80085e0 <gc_execute_block+0x28c0>)
 80084de:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80084e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ea:	d40f      	bmi.n	800850c <gc_execute_block+0x27ec>
 80084ec:	4b3c      	ldr	r3, [pc, #240]	; (80085e0 <gc_execute_block+0x28c0>)
 80084ee:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80084f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fa:	d407      	bmi.n	800850c <gc_execute_block+0x27ec>
 80084fc:	4b38      	ldr	r3, [pc, #224]	; (80085e0 <gc_execute_block+0x28c0>)
 80084fe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850a:	d502      	bpl.n	8008512 <gc_execute_block+0x27f2>
                    FAIL(Status_NegativeValue);
 800850c:	2304      	movs	r3, #4
 800850e:	f002 bbe3 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.values.ijk[I_VALUE] == 0.0f ||
 8008512:	4b33      	ldr	r3, [pc, #204]	; (80085e0 <gc_execute_block+0x28c0>)
 8008514:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8008518:	eef5 7a40 	vcmp.f32	s15, #0.0
 800851c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008520:	d01f      	beq.n	8008562 <gc_execute_block+0x2842>
                    gc_block.values.ijk[J_VALUE] == 0.0f ||
 8008522:	4b2f      	ldr	r3, [pc, #188]	; (80085e0 <gc_execute_block+0x28c0>)
 8008524:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                if(gc_block.values.ijk[I_VALUE] == 0.0f ||
 8008528:	eef5 7a40 	vcmp.f32	s15, #0.0
 800852c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008530:	d017      	beq.n	8008562 <gc_execute_block+0x2842>
                     gc_block.values.ijk[K_VALUE] <= gc_block.values.ijk[J_VALUE] ||
 8008532:	4b2b      	ldr	r3, [pc, #172]	; (80085e0 <gc_execute_block+0x28c0>)
 8008534:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8008538:	4b29      	ldr	r3, [pc, #164]	; (80085e0 <gc_execute_block+0x28c0>)
 800853a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                    gc_block.values.ijk[J_VALUE] == 0.0f ||
 800853e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	d90c      	bls.n	8008562 <gc_execute_block+0x2842>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 8008548:	4b25      	ldr	r3, [pc, #148]	; (80085e0 <gc_execute_block+0x28c0>)
 800854a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	b2db      	uxtb	r3, r3
                     gc_block.values.ijk[K_VALUE] <= gc_block.values.ijk[J_VALUE] ||
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <gc_execute_block+0x2848>
                      (gc_block.words.l && (gc_taper_type)gc_block.values.l > Taper_Both))
 8008558:	4b21      	ldr	r3, [pc, #132]	; (80085e0 <gc_execute_block+0x28c0>)
 800855a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800855e:	2b03      	cmp	r3, #3
 8008560:	d902      	bls.n	8008568 <gc_execute_block+0x2848>
                    FAIL(Status_GcodeValueOutOfRange);
 8008562:	2327      	movs	r3, #39	; 0x27
 8008564:	f002 bbb8 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_state.spindle.rpm < gc_state.spindle.hal->rpm_min || gc_state.spindle.rpm > gc_state.spindle.hal->rpm_max)
 8008568:	4b1e      	ldr	r3, [pc, #120]	; (80085e4 <gc_execute_block+0x28c4>)
 800856a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800856e:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <gc_execute_block+0x28c4>)
 8008570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008572:	edd3 7a04 	vldr	s15, [r3, #16]
 8008576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800857a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857e:	d40b      	bmi.n	8008598 <gc_execute_block+0x2878>
 8008580:	4b18      	ldr	r3, [pc, #96]	; (80085e4 <gc_execute_block+0x28c4>)
 8008582:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8008586:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <gc_execute_block+0x28c4>)
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	edd3 7a05 	vldr	s15, [r3, #20]
 800858e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008596:	dd02      	ble.n	800859e <gc_execute_block+0x287e>
                    FAIL(Status_GcodeRPMOutOfRange);
 8008598:	232c      	movs	r3, #44	; 0x2c
 800859a:	f002 bb9d 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.modal.motion != gc_state.modal.motion) {
 800859e:	4b10      	ldr	r3, [pc, #64]	; (80085e0 <gc_execute_block+0x28c0>)
 80085a0:	891a      	ldrh	r2, [r3, #8]
 80085a2:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <gc_execute_block+0x28c4>)
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d008      	beq.n	80085bc <gc_execute_block+0x289c>
                    memset(&thread, 0, sizeof(gc_thread_data));
 80085aa:	2230      	movs	r2, #48	; 0x30
 80085ac:	2100      	movs	r1, #0
 80085ae:	480e      	ldr	r0, [pc, #56]	; (80085e8 <gc_execute_block+0x28c8>)
 80085b0:	f01d fc45 	bl	8025e3e <memset>
                    thread.depth_degression = 1.0f;
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <gc_execute_block+0x28c8>)
 80085b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80085ba:	615a      	str	r2, [r3, #20]
                }

                thread.pitch = gc_block.values.p;
 80085bc:	4b08      	ldr	r3, [pc, #32]	; (80085e0 <gc_execute_block+0x28c0>)
 80085be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c0:	4a09      	ldr	r2, [pc, #36]	; (80085e8 <gc_execute_block+0x28c8>)
 80085c2:	6013      	str	r3, [r2, #0]
                thread.z_final = gc_block.values.xyz[Z_AXIS];
 80085c4:	4b06      	ldr	r3, [pc, #24]	; (80085e0 <gc_execute_block+0x28c0>)
 80085c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c8:	4a07      	ldr	r2, [pc, #28]	; (80085e8 <gc_execute_block+0x28c8>)
 80085ca:	6053      	str	r3, [r2, #4]
                thread.cut_direction = gc_block.values.ijk[I_VALUE] < 0.0f ? -1.0f : 1.0f;
 80085cc:	4b04      	ldr	r3, [pc, #16]	; (80085e0 <gc_execute_block+0x28c0>)
 80085ce:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80085d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085da:	d509      	bpl.n	80085f0 <gc_execute_block+0x28d0>
 80085dc:	4b03      	ldr	r3, [pc, #12]	; (80085ec <gc_execute_block+0x28cc>)
 80085de:	e009      	b.n	80085f4 <gc_execute_block+0x28d4>
 80085e0:	20001470 	.word	0x20001470
 80085e4:	2000137c 	.word	0x2000137c
 80085e8:	20001428 	.word	0x20001428
 80085ec:	bf800000 	.word	0xbf800000
 80085f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80085f4:	4a7a      	ldr	r2, [pc, #488]	; (80087e0 <gc_execute_block+0x2ac0>)
 80085f6:	6253      	str	r3, [r2, #36]	; 0x24
                thread.peak = fabsf(gc_block.values.ijk[I_VALUE]);
 80085f8:	4b7a      	ldr	r3, [pc, #488]	; (80087e4 <gc_execute_block+0x2ac4>)
 80085fa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80085fe:	eef0 7ae7 	vabs.f32	s15, s15
 8008602:	4b77      	ldr	r3, [pc, #476]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008604:	edc3 7a02 	vstr	s15, [r3, #8]
                thread.initial_depth = gc_block.values.ijk[J_VALUE];
 8008608:	4b76      	ldr	r3, [pc, #472]	; (80087e4 <gc_execute_block+0x2ac4>)
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	4a74      	ldr	r2, [pc, #464]	; (80087e0 <gc_execute_block+0x2ac0>)
 800860e:	60d3      	str	r3, [r2, #12]
                thread.depth = gc_block.values.ijk[K_VALUE];
 8008610:	4b74      	ldr	r3, [pc, #464]	; (80087e4 <gc_execute_block+0x2ac4>)
 8008612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008614:	4a72      	ldr	r2, [pc, #456]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008616:	6113      	str	r3, [r2, #16]

                if(gc_block.modal.units_imperial) {
 8008618:	4b72      	ldr	r3, [pc, #456]	; (80087e4 <gc_execute_block+0x2ac4>)
 800861a:	7adb      	ldrb	r3, [r3, #11]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01d      	beq.n	800865c <gc_execute_block+0x293c>
                    thread.peak *= MM_PER_INCH;
 8008620:	4b6f      	ldr	r3, [pc, #444]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008622:	edd3 7a02 	vldr	s15, [r3, #8]
 8008626:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80087e8 <gc_execute_block+0x2ac8>
 800862a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800862e:	4b6c      	ldr	r3, [pc, #432]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008630:	edc3 7a02 	vstr	s15, [r3, #8]
                    thread.initial_depth *= MM_PER_INCH;
 8008634:	4b6a      	ldr	r3, [pc, #424]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008636:	edd3 7a03 	vldr	s15, [r3, #12]
 800863a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80087e8 <gc_execute_block+0x2ac8>
 800863e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008642:	4b67      	ldr	r3, [pc, #412]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008644:	edc3 7a03 	vstr	s15, [r3, #12]
                    thread.depth *= MM_PER_INCH;
 8008648:	4b65      	ldr	r3, [pc, #404]	; (80087e0 <gc_execute_block+0x2ac0>)
 800864a:	edd3 7a04 	vldr	s15, [r3, #16]
 800864e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80087e8 <gc_execute_block+0x2ac8>
 8008652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008656:	4b62      	ldr	r3, [pc, #392]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008658:	edc3 7a04 	vstr	s15, [r3, #16]
                }

                if(gc_block.modal.diameter_mode) {
 800865c:	4b61      	ldr	r3, [pc, #388]	; (80087e4 <gc_execute_block+0x2ac4>)
 800865e:	7b5b      	ldrb	r3, [r3, #13]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01d      	beq.n	80086a0 <gc_execute_block+0x2980>
                    thread.peak /= 2.0f;
 8008664:	4b5e      	ldr	r3, [pc, #376]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008666:	ed93 7a02 	vldr	s14, [r3, #8]
 800866a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800866e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008672:	4b5b      	ldr	r3, [pc, #364]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008674:	edc3 7a02 	vstr	s15, [r3, #8]
                    thread.initial_depth /= 2.0f;
 8008678:	4b59      	ldr	r3, [pc, #356]	; (80087e0 <gc_execute_block+0x2ac0>)
 800867a:	ed93 7a03 	vldr	s14, [r3, #12]
 800867e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008686:	4b56      	ldr	r3, [pc, #344]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008688:	edc3 7a03 	vstr	s15, [r3, #12]
                    thread.depth /= 2.0f;
 800868c:	4b54      	ldr	r3, [pc, #336]	; (80087e0 <gc_execute_block+0x2ac0>)
 800868e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008692:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800869a:	4b51      	ldr	r3, [pc, #324]	; (80087e0 <gc_execute_block+0x2ac0>)
 800869c:	edc3 7a04 	vstr	s15, [r3, #16]
                }

                //scaling?

                if(axis_words.x) {
 80086a0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d035      	beq.n	800871a <gc_execute_block+0x29fa>
                    thread.main_taper_height = gc_block.values.xyz[X_AXIS] - gc_get_block_offset(&gc_block, X_AXIS);
 80086ae:	4b4d      	ldr	r3, [pc, #308]	; (80087e4 <gc_execute_block+0x2ac4>)
 80086b0:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80086b4:	2100      	movs	r1, #0
 80086b6:	484b      	ldr	r0, [pc, #300]	; (80087e4 <gc_execute_block+0x2ac4>)
 80086b8:	f7fc ff60 	bl	800557c <gc_get_block_offset>
 80086bc:	eef0 7a40 	vmov.f32	s15, s0
 80086c0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80086c4:	4b46      	ldr	r3, [pc, #280]	; (80087e0 <gc_execute_block+0x2ac0>)
 80086c6:	edc3 7a06 	vstr	s15, [r3, #24]
                    gc_block.values.p = fabsf(thread.z_final - gc_state.position[Z_AXIS]);
 80086ca:	4b45      	ldr	r3, [pc, #276]	; (80087e0 <gc_execute_block+0x2ac0>)
 80086cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80086d0:	4b46      	ldr	r3, [pc, #280]	; (80087ec <gc_execute_block+0x2acc>)
 80086d2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80086d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086da:	eef0 7ae7 	vabs.f32	s15, s15
 80086de:	4b41      	ldr	r3, [pc, #260]	; (80087e4 <gc_execute_block+0x2ac4>)
 80086e0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
                    thread.pitch = thread.pitch * hypot_f(thread.main_taper_height, gc_block.values.p) / gc_block.values.p;
 80086e4:	4b3e      	ldr	r3, [pc, #248]	; (80087e0 <gc_execute_block+0x2ac0>)
 80086e6:	ed93 8a00 	vldr	s16, [r3]
 80086ea:	4b3d      	ldr	r3, [pc, #244]	; (80087e0 <gc_execute_block+0x2ac0>)
 80086ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80086f0:	4b3c      	ldr	r3, [pc, #240]	; (80087e4 <gc_execute_block+0x2ac4>)
 80086f2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80086f6:	eef0 0a47 	vmov.f32	s1, s14
 80086fa:	eeb0 0a67 	vmov.f32	s0, s15
 80086fe:	f7fc fe61 	bl	80053c4 <hypot_f>
 8008702:	eef0 7a40 	vmov.f32	s15, s0
 8008706:	ee68 6a27 	vmul.f32	s13, s16, s15
 800870a:	4b36      	ldr	r3, [pc, #216]	; (80087e4 <gc_execute_block+0x2ac4>)
 800870c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8008710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008714:	4b32      	ldr	r3, [pc, #200]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008716:	edc3 7a00 	vstr	s15, [r3]
                }

                if(gc_block.words.h)
 800871a:	4b32      	ldr	r3, [pc, #200]	; (80087e4 <gc_execute_block+0x2ac4>)
 800871c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d004      	beq.n	8008734 <gc_execute_block+0x2a14>
                    thread.spring_passes = (uint_fast16_t)gc_block.values.h;
 800872a:	4b2e      	ldr	r3, [pc, #184]	; (80087e4 <gc_execute_block+0x2ac4>)
 800872c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008730:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008732:	6293      	str	r3, [r2, #40]	; 0x28

                if(gc_block.words.l)
 8008734:	4b2b      	ldr	r3, [pc, #172]	; (80087e4 <gc_execute_block+0x2ac4>)
 8008736:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800873a:	f003 0310 	and.w	r3, r3, #16
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <gc_execute_block+0x2a30>
                    thread.end_taper_type = (gc_taper_type)gc_block.values.l;
 8008744:	4b27      	ldr	r3, [pc, #156]	; (80087e4 <gc_execute_block+0x2ac4>)
 8008746:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800874a:	4b25      	ldr	r3, [pc, #148]	; (80087e0 <gc_execute_block+0x2ac0>)
 800874c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                if(gc_block.words.e)
 8008750:	4b24      	ldr	r3, [pc, #144]	; (80087e4 <gc_execute_block+0x2ac4>)
 8008752:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <gc_execute_block+0x2a48>
                    thread.end_taper_length = gc_block.values.e;
 8008760:	4b20      	ldr	r3, [pc, #128]	; (80087e4 <gc_execute_block+0x2ac4>)
 8008762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008764:	4a1e      	ldr	r2, [pc, #120]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008766:	61d3      	str	r3, [r2, #28]

                if(thread.end_taper_length <= 0.0f || thread.end_taper_type == Taper_None) {
 8008768:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <gc_execute_block+0x2ac0>)
 800876a:	edd3 7a07 	vldr	s15, [r3, #28]
 800876e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008776:	d904      	bls.n	8008782 <gc_execute_block+0x2a62>
 8008778:	4b19      	ldr	r3, [pc, #100]	; (80087e0 <gc_execute_block+0x2ac0>)
 800877a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d107      	bne.n	8008792 <gc_execute_block+0x2a72>
                    thread.end_taper_length = 0.0f;
 8008782:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	61da      	str	r2, [r3, #28]
                    thread.end_taper_type = Taper_None;
 800878a:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <gc_execute_block+0x2ac0>)
 800878c:	2200      	movs	r2, #0
 800878e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    // TODO: fail?
                }

                if(thread.end_taper_type != Taper_None && thread.end_taper_length > abs(thread.z_final - gc_state.position[Z_AXIS]) / 2.0f)
 8008792:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <gc_execute_block+0x2ac0>)
 8008794:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d029      	beq.n	80087f0 <gc_execute_block+0x2ad0>
 800879c:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <gc_execute_block+0x2ac0>)
 800879e:	ed93 7a07 	vldr	s14, [r3, #28]
 80087a2:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <gc_execute_block+0x2ac0>)
 80087a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80087a8:	4b10      	ldr	r3, [pc, #64]	; (80087ec <gc_execute_block+0x2acc>)
 80087aa:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80087ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087b6:	ee17 3a90 	vmov	r3, s15
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bfb8      	it	lt
 80087be:	425b      	neglt	r3, r3
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80087c8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80087cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80087d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d8:	dd0a      	ble.n	80087f0 <gc_execute_block+0x2ad0>
                    FAIL(Status_GcodeValueOutOfRange);
 80087da:	2327      	movs	r3, #39	; 0x27
 80087dc:	f002 ba7c 	b.w	800acd8 <gc_execute_block+0x4fb8>
 80087e0:	20001428 	.word	0x20001428
 80087e4:	20001470 	.word	0x20001470
 80087e8:	41cb3333 	.word	0x41cb3333
 80087ec:	2000137c 	.word	0x2000137c

                if(gc_block.words.r)
 80087f0:	4bba      	ldr	r3, [pc, #744]	; (8008adc <gc_execute_block+0x2dbc>)
 80087f2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <gc_execute_block+0x2ae8>
                    thread.depth_degression = gc_block.values.r;
 8008800:	4bb6      	ldr	r3, [pc, #728]	; (8008adc <gc_execute_block+0x2dbc>)
 8008802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008804:	4ab6      	ldr	r2, [pc, #728]	; (8008ae0 <gc_execute_block+0x2dc0>)
 8008806:	6153      	str	r3, [r2, #20]

                if(gc_block.words.q)
 8008808:	4bb4      	ldr	r3, [pc, #720]	; (8008adc <gc_execute_block+0x2dbc>)
 800880a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <gc_execute_block+0x2b00>
                    thread.infeed_angle = gc_block.values.q;
 8008818:	4bb0      	ldr	r3, [pc, #704]	; (8008adc <gc_execute_block+0x2dbc>)
 800881a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881c:	4ab0      	ldr	r2, [pc, #704]	; (8008ae0 <gc_execute_block+0x2dc0>)
 800881e:	6213      	str	r3, [r2, #32]

                // Ensure spindle speed is at 100% - any override will be disabled on execute.
                gc_parser_flags.spindle_force_sync = On;
 8008820:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8008824:	f043 0320 	orr.w	r3, r3, #32
 8008828:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

                gc_block.words.e = gc_block.words.h = gc_block.words.i = gc_block.words.j = gc_block.words.k = gc_block.words.l = gc_block.words.p = gc_block.words.q = gc_block.words.r = Off;
 800882c:	4aab      	ldr	r2, [pc, #684]	; (8008adc <gc_execute_block+0x2dbc>)
 800882e:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8008832:	f36f 0382 	bfc	r3, #2, #1
 8008836:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 800883a:	4ba8      	ldr	r3, [pc, #672]	; (8008adc <gc_execute_block+0x2dbc>)
 800883c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008840:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008844:	b2d9      	uxtb	r1, r3
 8008846:	4aa5      	ldr	r2, [pc, #660]	; (8008adc <gc_execute_block+0x2dbc>)
 8008848:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 800884c:	f361 0341 	bfi	r3, r1, #1, #1
 8008850:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8008854:	4ba1      	ldr	r3, [pc, #644]	; (8008adc <gc_execute_block+0x2dbc>)
 8008856:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800885a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800885e:	b2d9      	uxtb	r1, r3
 8008860:	4a9e      	ldr	r2, [pc, #632]	; (8008adc <gc_execute_block+0x2dbc>)
 8008862:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8008866:	f361 0300 	bfi	r3, r1, #0, #1
 800886a:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 800886e:	4b9b      	ldr	r3, [pc, #620]	; (8008adc <gc_execute_block+0x2dbc>)
 8008870:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008874:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008878:	b2d9      	uxtb	r1, r3
 800887a:	4a98      	ldr	r2, [pc, #608]	; (8008adc <gc_execute_block+0x2dbc>)
 800887c:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8008880:	f361 1304 	bfi	r3, r1, #4, #1
 8008884:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
 8008888:	4b94      	ldr	r3, [pc, #592]	; (8008adc <gc_execute_block+0x2dbc>)
 800888a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800888e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008892:	b2d9      	uxtb	r1, r3
 8008894:	4a91      	ldr	r2, [pc, #580]	; (8008adc <gc_execute_block+0x2dbc>)
 8008896:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 800889a:	f361 1386 	bfi	r3, r1, #6, #1
 800889e:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 80088a2:	4b8e      	ldr	r3, [pc, #568]	; (8008adc <gc_execute_block+0x2dbc>)
 80088a4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80088a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80088ac:	b2d9      	uxtb	r1, r3
 80088ae:	4a8b      	ldr	r2, [pc, #556]	; (8008adc <gc_execute_block+0x2dbc>)
 80088b0:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 80088b4:	f361 1345 	bfi	r3, r1, #5, #1
 80088b8:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 80088bc:	4b87      	ldr	r3, [pc, #540]	; (8008adc <gc_execute_block+0x2dbc>)
 80088be:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80088c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80088c6:	b2d9      	uxtb	r1, r3
 80088c8:	4a84      	ldr	r2, [pc, #528]	; (8008adc <gc_execute_block+0x2dbc>)
 80088ca:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 80088ce:	f361 1304 	bfi	r3, r1, #4, #1
 80088d2:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 80088d6:	4b81      	ldr	r3, [pc, #516]	; (8008adc <gc_execute_block+0x2dbc>)
 80088d8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80088dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088e0:	b2d9      	uxtb	r1, r3
 80088e2:	4a7e      	ldr	r2, [pc, #504]	; (8008adc <gc_execute_block+0x2dbc>)
 80088e4:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 80088e8:	f361 03c3 	bfi	r3, r1, #3, #1
 80088ec:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
 80088f0:	4b7a      	ldr	r3, [pc, #488]	; (8008adc <gc_execute_block+0x2dbc>)
 80088f2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80088f6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088fa:	b2d9      	uxtb	r1, r3
 80088fc:	4a77      	ldr	r2, [pc, #476]	; (8008adc <gc_execute_block+0x2dbc>)
 80088fe:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8008902:	f361 0300 	bfi	r3, r1, #0, #1
 8008906:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
 800890a:	e00a      	b.n	8008922 <gc_execute_block+0x2c02>

            } else if (gc_block.values.f == 0.0f)
 800890c:	4b73      	ldr	r3, [pc, #460]	; (8008adc <gc_execute_block+0x2dbc>)
 800890e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8008912:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891a:	d102      	bne.n	8008922 <gc_execute_block+0x2c02>
                FAIL(Status_GcodeUndefinedFeedRate); // [Feed rate undefined]
 800891c:	2316      	movs	r3, #22
 800891e:	f002 b9db 	b.w	800acd8 <gc_execute_block+0x4fb8>

            if (gc_block.modal.canned_cycle_active) {
 8008922:	4b6e      	ldr	r3, [pc, #440]	; (8008adc <gc_execute_block+0x2dbc>)
 8008924:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 81ed 	beq.w	8008d08 <gc_execute_block+0x2fe8>

                if(gc_parser_flags.canned_cycle_change) {
 800892e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d046      	beq.n	80089ca <gc_execute_block+0x2caa>

                    if(gc_state.modal.feed_mode == FeedMode_InverseTime)
 800893c:	4b69      	ldr	r3, [pc, #420]	; (8008ae4 <gc_execute_block+0x2dc4>)
 800893e:	789b      	ldrb	r3, [r3, #2]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d102      	bne.n	800894a <gc_execute_block+0x2c2a>
                        FAIL(Status_InvalidStatement);
 8008944:	2303      	movs	r3, #3
 8008946:	f002 b9c7 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    if(!gc_block.words.r)
 800894a:	4b64      	ldr	r3, [pc, #400]	; (8008adc <gc_execute_block+0x2dbc>)
 800894c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <gc_execute_block+0x2c40>
                        FAIL(Status_GcodeValueWordMissing);
 800895a:	231c      	movs	r3, #28
 800895c:	f002 b9bc 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    if(!(axis_words.mask & bit(plane.axis_linear)))
 8008960:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008964:	461a      	mov	r2, r3
 8008966:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800896a:	fa22 f303 	lsr.w	r3, r2, r3
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d102      	bne.n	800897c <gc_execute_block+0x2c5c>
                        FAIL(Status_GcodeValueWordMissing);
 8008976:	231c      	movs	r3, #28
 8008978:	f002 b9ae 	b.w	800acd8 <gc_execute_block+0x4fb8>

                    gc_state.canned.dwell = 0.0f;
 800897c:	4b59      	ldr	r3, [pc, #356]	; (8008ae4 <gc_execute_block+0x2dc4>)
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	639a      	str	r2, [r3, #56]	; 0x38
                    gc_state.canned.xyz[plane.axis_0] = 0.0f;
 8008984:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8008988:	4a56      	ldr	r2, [pc, #344]	; (8008ae4 <gc_execute_block+0x2dc4>)
 800898a:	330a      	adds	r3, #10
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	f04f 0200 	mov.w	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
                    gc_state.canned.xyz[plane.axis_1] = 0.0f;
 8008996:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800899a:	4a52      	ldr	r2, [pc, #328]	; (8008ae4 <gc_execute_block+0x2dc4>)
 800899c:	330a      	adds	r3, #10
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]
                    gc_state.canned.rapid_retract = On;
 80089a8:	4b4e      	ldr	r3, [pc, #312]	; (8008ae4 <gc_execute_block+0x2dc4>)
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    gc_state.canned.spindle_off = Off;
 80089b0:	4b4c      	ldr	r3, [pc, #304]	; (8008ae4 <gc_execute_block+0x2dc4>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                    gc_state.canned.prev_position = gc_state.position[plane.axis_linear];
 80089b8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80089bc:	4a49      	ldr	r2, [pc, #292]	; (8008ae4 <gc_execute_block+0x2dc4>)
 80089be:	3318      	adds	r3, #24
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a47      	ldr	r2, [pc, #284]	; (8008ae4 <gc_execute_block+0x2dc4>)
 80089c8:	63d3      	str	r3, [r2, #60]	; 0x3c
                }

                if(!gc_block.words.l)
 80089ca:	4b44      	ldr	r3, [pc, #272]	; (8008adc <gc_execute_block+0x2dbc>)
 80089cc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <gc_execute_block+0x2cc4>
                    gc_block.values.l = 1;
 80089da:	4b40      	ldr	r3, [pc, #256]	; (8008adc <gc_execute_block+0x2dbc>)
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80089e2:	e007      	b.n	80089f4 <gc_execute_block+0x2cd4>
                else if(gc_block.values.l <= 0)
 80089e4:	4b3d      	ldr	r3, [pc, #244]	; (8008adc <gc_execute_block+0x2dbc>)
 80089e6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d102      	bne.n	80089f4 <gc_execute_block+0x2cd4>
                    FAIL(Status_NonPositiveValue); // [L <= 0]
 80089ee:	2313      	movs	r3, #19
 80089f0:	f002 b972 	b.w	800acd8 <gc_execute_block+0x4fb8>

                if(gc_block.words.r)
 80089f4:	4b39      	ldr	r3, [pc, #228]	; (8008adc <gc_execute_block+0x2dbc>)
 80089f6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d027      	beq.n	8008a54 <gc_execute_block+0x2d34>
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 8008a04:	4b35      	ldr	r3, [pc, #212]	; (8008adc <gc_execute_block+0x2dbc>)
 8008a06:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008a0a:	4b34      	ldr	r3, [pc, #208]	; (8008adc <gc_execute_block+0x2dbc>)
 8008a0c:	7adb      	ldrb	r3, [r3, #11]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <gc_execute_block+0x2cf8>
 8008a12:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8008ae8 <gc_execute_block+0x2dc8>
 8008a16:	e001      	b.n	8008a1c <gc_execute_block+0x2cfc>
 8008a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1c:	ee27 8a27 	vmul.f32	s16, s14, s15
                                                        (gc_block.modal.distance_incremental
 8008a20:	4b2e      	ldr	r3, [pc, #184]	; (8008adc <gc_execute_block+0x2dbc>)
 8008a22:	7b1b      	ldrb	r3, [r3, #12]
                                                          ? gc_state.position[plane.axis_linear]
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d008      	beq.n	8008a3a <gc_execute_block+0x2d1a>
                                                          ? gc_state.position[plane.axis_linear]
 8008a28:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
                                                          : gc_get_block_offset(&gc_block, plane.axis_linear));
 8008a2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ae4 <gc_execute_block+0x2dc4>)
 8008a2e:	3318      	adds	r3, #24
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	edd3 7a00 	vldr	s15, [r3]
 8008a38:	e007      	b.n	8008a4a <gc_execute_block+0x2d2a>
 8008a3a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4826      	ldr	r0, [pc, #152]	; (8008adc <gc_execute_block+0x2dbc>)
 8008a42:	f7fc fd9b 	bl	800557c <gc_get_block_offset>
 8008a46:	eef0 7a40 	vmov.f32	s15, s0
                    gc_state.canned.retract_position = gc_block.values.r * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f) +
 8008a4a:	ee77 7a88 	vadd.f32	s15, s15, s16
 8008a4e:	4b25      	ldr	r3, [pc, #148]	; (8008ae4 <gc_execute_block+0x2dc4>)
 8008a50:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

                idx = N_AXIS;
 8008a54:	2303      	movs	r3, #3
 8008a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                do {
                    if(bit_istrue(axis_words.mask, bit(--idx))) {
 8008a5a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a64:	3b01      	subs	r3, #1
 8008a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d05b      	beq.n	8008b32 <gc_execute_block+0x2e12>
                        gc_state.canned.xyz[idx] = gc_block.values.xyz[idx];
 8008a7a:	4a18      	ldr	r2, [pc, #96]	; (8008adc <gc_execute_block+0x2dbc>)
 8008a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a80:	3318      	adds	r3, #24
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4916      	ldr	r1, [pc, #88]	; (8008ae4 <gc_execute_block+0x2dc4>)
 8008a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a8e:	330a      	adds	r3, #10
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	601a      	str	r2, [r3, #0]
                        if(idx != plane.axis_linear)
 8008a96:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d023      	beq.n	8008aec <gc_execute_block+0x2dcc>
                            gc_state.canned.xyz[idx] -= gc_state.position[idx];
 8008aa4:	4a0f      	ldr	r2, [pc, #60]	; (8008ae4 <gc_execute_block+0x2dc4>)
 8008aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aaa:	330a      	adds	r3, #10
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	ed93 7a00 	vldr	s14, [r3]
 8008ab4:	4a0b      	ldr	r2, [pc, #44]	; (8008ae4 <gc_execute_block+0x2dc4>)
 8008ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aba:	3318      	adds	r3, #24
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	edd3 7a00 	vldr	s15, [r3]
 8008ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ac8:	4a06      	ldr	r2, [pc, #24]	; (8008ae4 <gc_execute_block+0x2dc4>)
 8008aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ace:	330a      	adds	r3, #10
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	edc3 7a00 	vstr	s15, [r3]
 8008ad8:	e02b      	b.n	8008b32 <gc_execute_block+0x2e12>
 8008ada:	bf00      	nop
 8008adc:	20001470 	.word	0x20001470
 8008ae0:	20001428 	.word	0x20001428
 8008ae4:	2000137c 	.word	0x2000137c
 8008ae8:	41cb3333 	.word	0x41cb3333
                        else if(gc_block.modal.distance_incremental)
 8008aec:	4bc2      	ldr	r3, [pc, #776]	; (8008df8 <gc_execute_block+0x30d8>)
 8008aee:	7b1b      	ldrb	r3, [r3, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01e      	beq.n	8008b32 <gc_execute_block+0x2e12>
                            gc_state.canned.xyz[idx] = gc_state.canned.retract_position + (gc_state.canned.xyz[idx] - gc_state.position[idx]);
 8008af4:	4bc1      	ldr	r3, [pc, #772]	; (8008dfc <gc_execute_block+0x30dc>)
 8008af6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008afa:	4ac0      	ldr	r2, [pc, #768]	; (8008dfc <gc_execute_block+0x30dc>)
 8008afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b00:	330a      	adds	r3, #10
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	edd3 6a00 	vldr	s13, [r3]
 8008b0a:	4abc      	ldr	r2, [pc, #752]	; (8008dfc <gc_execute_block+0x30dc>)
 8008b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b10:	3318      	adds	r3, #24
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	edd3 7a00 	vldr	s15, [r3]
 8008b1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b22:	4ab6      	ldr	r2, [pc, #728]	; (8008dfc <gc_execute_block+0x30dc>)
 8008b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b28:	330a      	adds	r3, #10
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	edc3 7a00 	vstr	s15, [r3]
                    }
                } while(idx);
 8008b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d18f      	bne.n	8008a5a <gc_execute_block+0x2d3a>

                if(gc_state.canned.retract_position < gc_state.canned.xyz[plane.axis_linear])
 8008b3a:	4bb0      	ldr	r3, [pc, #704]	; (8008dfc <gc_execute_block+0x30dc>)
 8008b3c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008b40:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8008b44:	4aad      	ldr	r2, [pc, #692]	; (8008dfc <gc_execute_block+0x30dc>)
 8008b46:	330a      	adds	r3, #10
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	edd3 7a00 	vldr	s15, [r3]
 8008b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b58:	d502      	bpl.n	8008b60 <gc_execute_block+0x2e40>
                    FAIL(Status_GcodeInvalidRetractPosition);
 8008b5a:	2336      	movs	r3, #54	; 0x36
 8008b5c:	f002 b8bc 	b.w	800acd8 <gc_execute_block+0x4fb8>

                gc_block.words.r = gc_block.words.l = Off; // Remove single-meaning value words.
 8008b60:	4aa5      	ldr	r2, [pc, #660]	; (8008df8 <gc_execute_block+0x30d8>)
 8008b62:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8008b66:	f36f 1304 	bfc	r3, #4, #1
 8008b6a:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
 8008b6e:	4ba2      	ldr	r3, [pc, #648]	; (8008df8 <gc_execute_block+0x30d8>)
 8008b70:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008b74:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008b78:	b2d9      	uxtb	r1, r3
 8008b7a:	4a9f      	ldr	r2, [pc, #636]	; (8008df8 <gc_execute_block+0x30d8>)
 8008b7c:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8008b80:	f361 0382 	bfi	r3, r1, #2, #1
 8008b84:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96

                switch (gc_block.modal.motion) {
 8008b88:	4b9b      	ldr	r3, [pc, #620]	; (8008df8 <gc_execute_block+0x30d8>)
 8008b8a:	891b      	ldrh	r3, [r3, #8]
 8008b8c:	3b49      	subs	r3, #73	; 0x49
 8008b8e:	2b10      	cmp	r3, #16
 8008b90:	f200 8522 	bhi.w	80095d8 <gc_execute_block+0x38b8>
 8008b94:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <gc_execute_block+0x2e7c>)
 8008b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008c91 	.word	0x08008c91
 8008ba0:	080095d9 	.word	0x080095d9
 8008ba4:	080095d9 	.word	0x080095d9
 8008ba8:	080095d9 	.word	0x080095d9
 8008bac:	080095d9 	.word	0x080095d9
 8008bb0:	080095d9 	.word	0x080095d9
 8008bb4:	080095d9 	.word	0x080095d9
 8008bb8:	080095d9 	.word	0x080095d9
 8008bbc:	08008c5b 	.word	0x08008c5b
 8008bc0:	08008c09 	.word	0x08008c09
 8008bc4:	08008c91 	.word	0x08008c91
 8008bc8:	080095d9 	.word	0x080095d9
 8008bcc:	08008c5b 	.word	0x08008c5b
 8008bd0:	08008be1 	.word	0x08008be1
 8008bd4:	080095d9 	.word	0x080095d9
 8008bd8:	080095d9 	.word	0x080095d9
 8008bdc:	08008be1 	.word	0x08008be1

                    case MotionMode_CannedCycle86:
                    case MotionMode_CannedCycle89:
                        gc_state.canned.spindle_off = gc_block.modal.motion == MotionMode_CannedCycle86;
 8008be0:	4b85      	ldr	r3, [pc, #532]	; (8008df8 <gc_execute_block+0x30d8>)
 8008be2:	891b      	ldrh	r3, [r3, #8]
 8008be4:	2b56      	cmp	r3, #86	; 0x56
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	4b83      	ldr	r3, [pc, #524]	; (8008dfc <gc_execute_block+0x30dc>)
 8008bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                        gc_state.canned.rapid_retract = gc_block.modal.motion == MotionMode_CannedCycle86;
 8008bf4:	4b80      	ldr	r3, [pc, #512]	; (8008df8 <gc_execute_block+0x30d8>)
 8008bf6:	891b      	ldrh	r3, [r3, #8]
 8008bf8:	2b56      	cmp	r3, #86	; 0x56
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2301      	moveq	r3, #1
 8008bfe:	2300      	movne	r3, #0
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4b7e      	ldr	r3, [pc, #504]	; (8008dfc <gc_execute_block+0x30dc>)
 8008c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                        // no break

                    case MotionMode_CannedCycle82:
                        if(gc_block.words.p) {
 8008c08:	4b7b      	ldr	r3, [pc, #492]	; (8008df8 <gc_execute_block+0x30d8>)
 8008c0a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d016      	beq.n	8008c46 <gc_execute_block+0x2f26>
                            if(gc_block.values.p < 0.0f)
 8008c18:	4b77      	ldr	r3, [pc, #476]	; (8008df8 <gc_execute_block+0x30d8>)
 8008c1a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c26:	d502      	bpl.n	8008c2e <gc_execute_block+0x2f0e>
                                FAIL(Status_NegativeValue);
 8008c28:	2304      	movs	r3, #4
 8008c2a:	f002 b855 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            gc_state.canned.dwell = gc_block.values.p;
 8008c2e:	4b72      	ldr	r3, [pc, #456]	; (8008df8 <gc_execute_block+0x30d8>)
 8008c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c32:	4a72      	ldr	r2, [pc, #456]	; (8008dfc <gc_execute_block+0x30dc>)
 8008c34:	6393      	str	r3, [r2, #56]	; 0x38
                            gc_block.words.p = Off; // Remove single-meaning value word.
 8008c36:	4a70      	ldr	r2, [pc, #448]	; (8008df8 <gc_execute_block+0x30d8>)
 8008c38:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8008c3c:	f36f 0300 	bfc	r3, #0, #1
 8008c40:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8008c44:	e009      	b.n	8008c5a <gc_execute_block+0x2f3a>
                        } else if(gc_parser_flags.canned_cycle_change)
 8008c46:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <gc_execute_block+0x2f3a>
                            FAIL(Status_GcodeValueWordMissing);
 8008c54:	231c      	movs	r3, #28
 8008c56:	f002 b83f 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        // no break

                    case MotionMode_CannedCycle85:
                    case MotionMode_CannedCycle81:
                        gc_state.canned.delta = - gc_state.canned.xyz[plane.axis_linear] + gc_state.canned.retract_position;
 8008c5a:	4b68      	ldr	r3, [pc, #416]	; (8008dfc <gc_execute_block+0x30dc>)
 8008c5c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008c60:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8008c64:	4a65      	ldr	r2, [pc, #404]	; (8008dfc <gc_execute_block+0x30dc>)
 8008c66:	330a      	adds	r3, #10
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	edd3 7a00 	vldr	s15, [r3]
 8008c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c74:	4b61      	ldr	r3, [pc, #388]	; (8008dfc <gc_execute_block+0x30dc>)
 8008c76:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
                        if(gc_block.modal.motion == MotionMode_CannedCycle85)
 8008c7a:	4b5f      	ldr	r3, [pc, #380]	; (8008df8 <gc_execute_block+0x30d8>)
 8008c7c:	891b      	ldrh	r3, [r3, #8]
 8008c7e:	2b55      	cmp	r3, #85	; 0x55
 8008c80:	f040 84ac 	bne.w	80095dc <gc_execute_block+0x38bc>
                            gc_state.canned.rapid_retract = Off;
 8008c84:	4b5d      	ldr	r3, [pc, #372]	; (8008dfc <gc_execute_block+0x30dc>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                        break;
 8008c8c:	f000 bca6 	b.w	80095dc <gc_execute_block+0x38bc>

                    case MotionMode_DrillChipBreak:
                    case MotionMode_CannedCycle83:
                        if(gc_block.words.q) {
 8008c90:	4b59      	ldr	r3, [pc, #356]	; (8008df8 <gc_execute_block+0x30d8>)
 8008c92:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d023      	beq.n	8008ce8 <gc_execute_block+0x2fc8>
                            if(gc_block.values.q <= 0.0f)
 8008ca0:	4b55      	ldr	r3, [pc, #340]	; (8008df8 <gc_execute_block+0x30d8>)
 8008ca2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008ca6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cae:	d802      	bhi.n	8008cb6 <gc_execute_block+0x2f96>
                                FAIL(Status_NegativeValue); // [Q <= 0]
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	f002 b811 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            gc_state.canned.delta = gc_block.values.q * (gc_block.modal.units_imperial ? MM_PER_INCH : 1.0f);
 8008cb6:	4b50      	ldr	r3, [pc, #320]	; (8008df8 <gc_execute_block+0x30d8>)
 8008cb8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008cbc:	4b4e      	ldr	r3, [pc, #312]	; (8008df8 <gc_execute_block+0x30d8>)
 8008cbe:	7adb      	ldrb	r3, [r3, #11]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <gc_execute_block+0x2faa>
 8008cc4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8008e00 <gc_execute_block+0x30e0>
 8008cc8:	e001      	b.n	8008cce <gc_execute_block+0x2fae>
 8008cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd2:	4b4a      	ldr	r3, [pc, #296]	; (8008dfc <gc_execute_block+0x30dc>)
 8008cd4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
                            gc_block.words.q = Off; // Remove single-meaning value word.
 8008cd8:	4a47      	ldr	r2, [pc, #284]	; (8008df8 <gc_execute_block+0x30d8>)
 8008cda:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8008cde:	f36f 0341 	bfc	r3, #1, #1
 8008ce2:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8008ce6:	e009      	b.n	8008cfc <gc_execute_block+0x2fdc>
                        } else if(gc_parser_flags.canned_cycle_change)
 8008ce8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <gc_execute_block+0x2fdc>
                            FAIL(Status_GcodeValueWordMissing);
 8008cf6:	231c      	movs	r3, #28
 8008cf8:	f001 bfee 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        gc_state.canned.dwell = 0.25f;
 8008cfc:	4b3f      	ldr	r3, [pc, #252]	; (8008dfc <gc_execute_block+0x30dc>)
 8008cfe:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38
                        break;
 8008d04:	f000 bc71 	b.w	80095ea <gc_execute_block+0x38ca>
                    default:
                        break;

                } // end switch gc_state.canned.motion

            } else switch (gc_block.modal.motion) {
 8008d08:	4b3b      	ldr	r3, [pc, #236]	; (8008df8 <gc_execute_block+0x30d8>)
 8008d0a:	891b      	ldrh	r3, [r3, #8]
 8008d0c:	2b8f      	cmp	r3, #143	; 0x8f
 8008d0e:	f300 8467 	bgt.w	80095e0 <gc_execute_block+0x38c0>
 8008d12:	2b8c      	cmp	r3, #140	; 0x8c
 8008d14:	da05      	bge.n	8008d22 <gc_execute_block+0x3002>
 8008d16:	2b05      	cmp	r3, #5
 8008d18:	dc24      	bgt.n	8008d64 <gc_execute_block+0x3044>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dc10      	bgt.n	8008d40 <gc_execute_block+0x3020>
                    if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
                        FAIL(Status_GcodeInvalidTarget); // [Invalid target]
                    break;

                default:
                    break;
 8008d1e:	f000 bc5f 	b.w	80095e0 <gc_execute_block+0x38c0>
            } else switch (gc_block.modal.motion) {
 8008d22:	3b8c      	subs	r3, #140	; 0x8c
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	f200 845b 	bhi.w	80095e0 <gc_execute_block+0x38c0>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <gc_execute_block+0x3010>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08009599 	.word	0x08009599
 8008d34:	0800958d 	.word	0x0800958d
 8008d38:	08009599 	.word	0x08009599
 8008d3c:	0800958d 	.word	0x0800958d
 8008d40:	3b01      	subs	r3, #1
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	f200 844c 	bhi.w	80095e0 <gc_execute_block+0x38c0>
 8008d48:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <gc_execute_block+0x3030>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008d6f 	.word	0x08008d6f
 8008d54:	08008d83 	.word	0x08008d83
 8008d58:	08008d8f 	.word	0x08008d8f
 8008d5c:	080095e1 	.word	0x080095e1
 8008d60:	080092a5 	.word	0x080092a5
 8008d64:	2b33      	cmp	r3, #51	; 0x33
 8008d66:	f000 839a 	beq.w	800949e <gc_execute_block+0x377e>
                    break;
 8008d6a:	f000 bc39 	b.w	80095e0 <gc_execute_block+0x38c0>
                    if (!axis_words.mask)
 8008d6e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 8436 	bne.w	80095e4 <gc_execute_block+0x38c4>
                        axis_command = AxisCommand_None;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
                    break;
 8008d7e:	f000 bc31 	b.w	80095e4 <gc_execute_block+0x38c4>
                    gc_parser_flags.arc_is_clockwise = On;
 8008d82:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8008d86:	f043 0304 	orr.w	r3, r3, #4
 8008d8a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                    if (!axis_words.mask)
 8008d8e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d102      	bne.n	8008d9c <gc_execute_block+0x307c>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 8008d96:	231a      	movs	r3, #26
 8008d98:	f001 bf9e 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if (!(axis_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 8008d9c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8008da0:	4619      	mov	r1, r3
 8008da2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8008da6:	461a      	mov	r2, r3
 8008da8:	2301      	movs	r3, #1
 8008daa:	fa03 f202 	lsl.w	r2, r3, r2
 8008dae:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8008db2:	4618      	mov	r0, r3
 8008db4:	2301      	movs	r3, #1
 8008db6:	4083      	lsls	r3, r0
 8008db8:	4313      	orrs	r3, r2
 8008dba:	400b      	ands	r3, r1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <gc_execute_block+0x30a6>
                        FAIL(Status_GcodeNoAxisWordsInPlane); // [No axis words in plane]
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	f001 bf89 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if (gc_block.words.p) { // Number of turns
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <gc_execute_block+0x30d8>)
 8008dc8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d036      	beq.n	8008e44 <gc_execute_block+0x3124>
                        if(!isintf(gc_block.values.p))
 8008dd6:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <gc_execute_block+0x30d8>)
 8008dd8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8008de0:	f007 fa0e 	bl	8010200 <isintf>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f083 0301 	eor.w	r3, r3, #1
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d009      	beq.n	8008e04 <gc_execute_block+0x30e4>
                            FAIL(Status_GcodeCommandValueNotInteger); // [P word is not an integer]
 8008df0:	2317      	movs	r3, #23
 8008df2:	f001 bf71 	b.w	800acd8 <gc_execute_block+0x4fb8>
 8008df6:	bf00      	nop
 8008df8:	20001470 	.word	0x20001470
 8008dfc:	2000137c 	.word	0x2000137c
 8008e00:	41cb3333 	.word	0x41cb3333
                        gc_block.arc_turns = (uint32_t)truncf(gc_block.values.p);
 8008e04:	4ba2      	ldr	r3, [pc, #648]	; (8009090 <gc_execute_block+0x3370>)
 8008e06:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8008e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e0e:	f01e f868 	bl	8026ee2 <truncf>
 8008e12:	eef0 7a40 	vmov.f32	s15, s0
 8008e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1a:	ee17 2a90 	vmov	r2, s15
 8008e1e:	4b9c      	ldr	r3, [pc, #624]	; (8009090 <gc_execute_block+0x3370>)
 8008e20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        if(gc_block.arc_turns == 0)
 8008e24:	4b9a      	ldr	r3, [pc, #616]	; (8009090 <gc_execute_block+0x3370>)
 8008e26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <gc_execute_block+0x3114>
                            FAIL(Status_GcodeValueOutOfRange); // [P word is 0]
 8008e2e:	2327      	movs	r3, #39	; 0x27
 8008e30:	f001 bf52 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        gc_block.words.p = Off;
 8008e34:	4a96      	ldr	r2, [pc, #600]	; (8009090 <gc_execute_block+0x3370>)
 8008e36:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8008e3a:	f36f 0300 	bfc	r3, #0, #1
 8008e3e:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8008e42:	e003      	b.n	8008e4c <gc_execute_block+0x312c>
                        gc_block.arc_turns = 1;
 8008e44:	4b92      	ldr	r3, [pc, #584]	; (8009090 <gc_execute_block+0x3370>)
 8008e46:	2201      	movs	r2, #1
 8008e48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                    x = gc_block.values.xyz[plane.axis_0] - gc_state.position[plane.axis_0]; // Delta x between current position and target
 8008e4c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8008e50:	4a8f      	ldr	r2, [pc, #572]	; (8009090 <gc_execute_block+0x3370>)
 8008e52:	3318      	adds	r3, #24
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	ed93 7a00 	vldr	s14, [r3]
 8008e5c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8008e60:	4a8c      	ldr	r2, [pc, #560]	; (8009094 <gc_execute_block+0x3374>)
 8008e62:	3318      	adds	r3, #24
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	edd3 7a00 	vldr	s15, [r3]
 8008e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e70:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
                    y = gc_block.values.xyz[plane.axis_1] - gc_state.position[plane.axis_1]; // Delta y between current position and target
 8008e74:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8008e78:	4a85      	ldr	r2, [pc, #532]	; (8009090 <gc_execute_block+0x3370>)
 8008e7a:	3318      	adds	r3, #24
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	ed93 7a00 	vldr	s14, [r3]
 8008e84:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8008e88:	4a82      	ldr	r2, [pc, #520]	; (8009094 <gc_execute_block+0x3374>)
 8008e8a:	3318      	adds	r3, #24
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	edd3 7a00 	vldr	s15, [r3]
 8008e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e98:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
                    if (gc_block.words.r) { // Arc Radius Mode
 8008e9c:	4b7c      	ldr	r3, [pc, #496]	; (8009090 <gc_execute_block+0x3370>)
 8008e9e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 80dd 	beq.w	8009068 <gc_execute_block+0x3348>
                        gc_block.words.r = Off;
 8008eae:	4a78      	ldr	r2, [pc, #480]	; (8009090 <gc_execute_block+0x3370>)
 8008eb0:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8008eb4:	f36f 0382 	bfc	r3, #2, #1
 8008eb8:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
                        if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 8008ebc:	220c      	movs	r2, #12
 8008ebe:	4976      	ldr	r1, [pc, #472]	; (8009098 <gc_execute_block+0x3378>)
 8008ec0:	4876      	ldr	r0, [pc, #472]	; (800909c <gc_execute_block+0x337c>)
 8008ec2:	f01c ffac 	bl	8025e1e <memcmp>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d102      	bne.n	8008ed2 <gc_execute_block+0x31b2>
                            FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 8008ecc:	2321      	movs	r3, #33	; 0x21
 8008ece:	f001 bf03 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        if (gc_block.modal.units_imperial)
 8008ed2:	4b6f      	ldr	r3, [pc, #444]	; (8009090 <gc_execute_block+0x3370>)
 8008ed4:	7adb      	ldrb	r3, [r3, #11]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <gc_execute_block+0x31ce>
                            gc_block.values.r *= MM_PER_INCH;
 8008eda:	4b6d      	ldr	r3, [pc, #436]	; (8009090 <gc_execute_block+0x3370>)
 8008edc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008ee0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80090a0 <gc_execute_block+0x3380>
 8008ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ee8:	4b69      	ldr	r3, [pc, #420]	; (8009090 <gc_execute_block+0x3370>)
 8008eea:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                        if(gc_state.modal.scaling_active)
 8008eee:	4b69      	ldr	r3, [pc, #420]	; (8009094 <gc_execute_block+0x3374>)
 8008ef0:	7f9b      	ldrb	r3, [r3, #30]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d031      	beq.n	8008f5a <gc_execute_block+0x323a>
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 8008ef6:	4b66      	ldr	r3, [pc, #408]	; (8009090 <gc_execute_block+0x3370>)
 8008ef8:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8008efc:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8008f00:	4a68      	ldr	r2, [pc, #416]	; (80090a4 <gc_execute_block+0x3384>)
 8008f02:	3302      	adds	r3, #2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	3304      	adds	r3, #4
 8008f0a:	edd3 6a00 	vldr	s13, [r3]
 8008f0e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8008f12:	4a64      	ldr	r2, [pc, #400]	; (80090a4 <gc_execute_block+0x3384>)
 8008f14:	3302      	adds	r3, #2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	edd3 7a00 	vldr	s15, [r3]
                                                   : scale_factor.ijk[plane.axis_1]);
 8008f20:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f28:	dd09      	ble.n	8008f3e <gc_execute_block+0x321e>
                                                   ? scale_factor.ijk[plane.axis_0]
 8008f2a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
                                                   : scale_factor.ijk[plane.axis_1]);
 8008f2e:	4a5d      	ldr	r2, [pc, #372]	; (80090a4 <gc_execute_block+0x3384>)
 8008f30:	3302      	adds	r3, #2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	3304      	adds	r3, #4
 8008f38:	edd3 7a00 	vldr	s15, [r3]
 8008f3c:	e008      	b.n	8008f50 <gc_execute_block+0x3230>
 8008f3e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8008f42:	4a58      	ldr	r2, [pc, #352]	; (80090a4 <gc_execute_block+0x3384>)
 8008f44:	3302      	adds	r3, #2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	edd3 7a00 	vldr	s15, [r3]
                            gc_block.values.r *= (scale_factor.ijk[plane.axis_0] > scale_factor.ijk[plane.axis_1]
 8008f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f54:	4b4e      	ldr	r3, [pc, #312]	; (8009090 <gc_execute_block+0x3370>)
 8008f56:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                        float h_x2_div_d = 4.0f * gc_block.values.r * gc_block.values.r - x * x - y * y;
 8008f5a:	4b4d      	ldr	r3, [pc, #308]	; (8009090 <gc_execute_block+0x3370>)
 8008f5c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008f60:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008f68:	4b49      	ldr	r3, [pc, #292]	; (8009090 <gc_execute_block+0x3370>)
 8008f6a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f72:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8008f76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f7e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008f82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f8a:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
                        if (h_x2_div_d < 0.0f)
 8008f8e:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8008f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9a:	d502      	bpl.n	8008fa2 <gc_execute_block+0x3282>
                            FAIL(Status_GcodeArcRadiusError); // [Arc radius error] TODO: this will fail due to limited float precision...
 8008f9c:	2322      	movs	r3, #34	; 0x22
 8008f9e:	f001 be9b 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        h_x2_div_d = -sqrtf(h_x2_div_d) / hypot_f(x, y); // == -(h * 2 / d)
 8008fa2:	ed97 0a34 	vldr	s0, [r7, #208]	; 0xd0
 8008fa6:	f01d fe83 	bl	8026cb0 <sqrtf>
 8008faa:	eef0 7a40 	vmov.f32	s15, s0
 8008fae:	eeb1 8a67 	vneg.f32	s16, s15
 8008fb2:	edd7 0a30 	vldr	s1, [r7, #192]	; 0xc0
 8008fb6:	ed97 0a31 	vldr	s0, [r7, #196]	; 0xc4
 8008fba:	f7fc fa03 	bl	80053c4 <hypot_f>
 8008fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8008fc2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008fc6:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
                        if (gc_block.modal.motion == MotionMode_CcwArc)
 8008fca:	4b31      	ldr	r3, [pc, #196]	; (8009090 <gc_execute_block+0x3370>)
 8008fcc:	891b      	ldrh	r3, [r3, #8]
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d105      	bne.n	8008fde <gc_execute_block+0x32be>
                            h_x2_div_d = -h_x2_div_d;
 8008fd2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8008fd6:	eef1 7a67 	vneg.f32	s15, s15
 8008fda:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
                        if (gc_block.values.r < 0.0f) {
 8008fde:	4b2c      	ldr	r3, [pc, #176]	; (8009090 <gc_execute_block+0x3370>)
 8008fe0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fec:	d50d      	bpl.n	800900a <gc_execute_block+0x32ea>
                            h_x2_div_d = -h_x2_div_d;
 8008fee:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8008ff2:	eef1 7a67 	vneg.f32	s15, s15
 8008ff6:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
                            gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8008ffa:	4b25      	ldr	r3, [pc, #148]	; (8009090 <gc_execute_block+0x3370>)
 8008ffc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009000:	eef1 7a67 	vneg.f32	s15, s15
 8009004:	4b22      	ldr	r3, [pc, #136]	; (8009090 <gc_execute_block+0x3370>)
 8009006:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                        gc_block.values.ijk[plane.axis_0] = 0.5f * (x - (y * h_x2_div_d));
 800900a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800900e:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8009012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009016:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800901a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800901e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8009022:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800902a:	4a19      	ldr	r2, [pc, #100]	; (8009090 <gc_execute_block+0x3370>)
 800902c:	330e      	adds	r3, #14
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	3304      	adds	r3, #4
 8009034:	edc3 7a00 	vstr	s15, [r3]
                        gc_block.values.ijk[plane.axis_1] = 0.5f * (y + (x * h_x2_div_d));
 8009038:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800903c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8009040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009044:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8009048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800904c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8009050:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009058:	4a0d      	ldr	r2, [pc, #52]	; (8009090 <gc_execute_block+0x3370>)
 800905a:	330e      	adds	r3, #14
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	3304      	adds	r3, #4
 8009062:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8009066:	e2c0      	b.n	80095ea <gc_execute_block+0x38ca>
                        if (!(ijk_words.mask & (bit(plane.axis_0)|bit(plane.axis_1))))
 8009068:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800906c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8009070:	4619      	mov	r1, r3
 8009072:	2301      	movs	r3, #1
 8009074:	fa03 f101 	lsl.w	r1, r3, r1
 8009078:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800907c:	4618      	mov	r0, r3
 800907e:	2301      	movs	r3, #1
 8009080:	4083      	lsls	r3, r0
 8009082:	430b      	orrs	r3, r1
 8009084:	4013      	ands	r3, r2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10e      	bne.n	80090a8 <gc_execute_block+0x3388>
                            FAIL(Status_GcodeNoOffsetsInPlane);// [No offsets in plane]
 800908a:	2323      	movs	r3, #35	; 0x23
 800908c:	f001 be24 	b.w	800acd8 <gc_execute_block+0x4fb8>
 8009090:	20001470 	.word	0x20001470
 8009094:	2000137c 	.word	0x2000137c
 8009098:	200014d0 	.word	0x200014d0
 800909c:	200013dc 	.word	0x200013dc
 80090a0:	41cb3333 	.word	0x41cb3333
 80090a4:	2000039c 	.word	0x2000039c
                        gc_block.words.i = gc_block.words.j = gc_block.words.k = Off;
 80090a8:	4aa7      	ldr	r2, [pc, #668]	; (8009348 <gc_execute_block+0x3628>)
 80090aa:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 80090ae:	f36f 1386 	bfc	r3, #6, #1
 80090b2:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 80090b6:	4ba4      	ldr	r3, [pc, #656]	; (8009348 <gc_execute_block+0x3628>)
 80090b8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80090bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80090c0:	b2d9      	uxtb	r1, r3
 80090c2:	4aa1      	ldr	r2, [pc, #644]	; (8009348 <gc_execute_block+0x3628>)
 80090c4:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 80090c8:	f361 1345 	bfi	r3, r1, #5, #1
 80090cc:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 80090d0:	4b9d      	ldr	r3, [pc, #628]	; (8009348 <gc_execute_block+0x3628>)
 80090d2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80090d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80090da:	b2d9      	uxtb	r1, r3
 80090dc:	4a9a      	ldr	r2, [pc, #616]	; (8009348 <gc_execute_block+0x3628>)
 80090de:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 80090e2:	f361 1304 	bfi	r3, r1, #4, #1
 80090e6:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
                        if (gc_block.modal.units_imperial) {
 80090ea:	4b97      	ldr	r3, [pc, #604]	; (8009348 <gc_execute_block+0x3628>)
 80090ec:	7adb      	ldrb	r3, [r3, #11]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d02b      	beq.n	800914a <gc_execute_block+0x342a>
                            idx = 3;
 80090f2:	2303      	movs	r3, #3
 80090f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                                idx--;
 80090f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090fc:	3b01      	subs	r3, #1
 80090fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                                if (ijk_words.mask & bit(idx))
 8009102:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800910a:	fa22 f303 	lsr.w	r3, r2, r3
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d015      	beq.n	8009142 <gc_execute_block+0x3422>
                                    gc_block.values.ijk[idx] *= MM_PER_INCH;
 8009116:	4a8c      	ldr	r2, [pc, #560]	; (8009348 <gc_execute_block+0x3628>)
 8009118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800911c:	330e      	adds	r3, #14
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	3304      	adds	r3, #4
 8009124:	edd3 7a00 	vldr	s15, [r3]
 8009128:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800934c <gc_execute_block+0x362c>
 800912c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009130:	4a85      	ldr	r2, [pc, #532]	; (8009348 <gc_execute_block+0x3628>)
 8009132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009136:	330e      	adds	r3, #14
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	3304      	adds	r3, #4
 800913e:	edc3 7a00 	vstr	s15, [r3]
                            } while(idx);
 8009142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1d6      	bne.n	80090f8 <gc_execute_block+0x33d8>
                        if(gc_state.modal.scaling_active) {
 800914a:	4b81      	ldr	r3, [pc, #516]	; (8009350 <gc_execute_block+0x3630>)
 800914c:	7f9b      	ldrb	r3, [r3, #30]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d032      	beq.n	80091b8 <gc_execute_block+0x3498>
                            idx = 3;
 8009152:	2303      	movs	r3, #3
 8009154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                                if (ijk_words.mask & bit(--idx))
 8009158:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800915c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009160:	3b01      	subs	r3, #1
 8009162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800916a:	fa22 f303 	lsr.w	r3, r2, r3
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d01c      	beq.n	80091b0 <gc_execute_block+0x3490>
                                    gc_block.values.ijk[idx] *= scale_factor.ijk[idx];
 8009176:	4a74      	ldr	r2, [pc, #464]	; (8009348 <gc_execute_block+0x3628>)
 8009178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800917c:	330e      	adds	r3, #14
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	3304      	adds	r3, #4
 8009184:	ed93 7a00 	vldr	s14, [r3]
 8009188:	4a72      	ldr	r2, [pc, #456]	; (8009354 <gc_execute_block+0x3634>)
 800918a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800918e:	3302      	adds	r3, #2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	3304      	adds	r3, #4
 8009196:	edd3 7a00 	vldr	s15, [r3]
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	4a6a      	ldr	r2, [pc, #424]	; (8009348 <gc_execute_block+0x3628>)
 80091a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091a4:	330e      	adds	r3, #14
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	3304      	adds	r3, #4
 80091ac:	edc3 7a00 	vstr	s15, [r3]
                            } while(idx);
 80091b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1cf      	bne.n	8009158 <gc_execute_block+0x3438>
                        x -= gc_block.values.ijk[plane.axis_0]; // Delta x between circle center and target
 80091b8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80091bc:	4a62      	ldr	r2, [pc, #392]	; (8009348 <gc_execute_block+0x3628>)
 80091be:	330e      	adds	r3, #14
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	3304      	adds	r3, #4
 80091c6:	edd3 7a00 	vldr	s15, [r3]
 80091ca:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80091ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091d2:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
                        y -= gc_block.values.ijk[plane.axis_1]; // Delta y between circle center and target
 80091d6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80091da:	4a5b      	ldr	r2, [pc, #364]	; (8009348 <gc_execute_block+0x3628>)
 80091dc:	330e      	adds	r3, #14
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	3304      	adds	r3, #4
 80091e4:	edd3 7a00 	vldr	s15, [r3]
 80091e8:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80091ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091f0:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
                        float target_r = hypot_f(x, y);
 80091f4:	edd7 0a30 	vldr	s1, [r7, #192]	; 0xc0
 80091f8:	ed97 0a31 	vldr	s0, [r7, #196]	; 0xc4
 80091fc:	f7fc f8e2 	bl	80053c4 <hypot_f>
 8009200:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
                        gc_block.values.r = hypot_f(gc_block.values.ijk[plane.axis_0], gc_block.values.ijk[plane.axis_1]);
 8009204:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8009208:	4a4f      	ldr	r2, [pc, #316]	; (8009348 <gc_execute_block+0x3628>)
 800920a:	330e      	adds	r3, #14
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	3304      	adds	r3, #4
 8009212:	edd3 7a00 	vldr	s15, [r3]
 8009216:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800921a:	4a4b      	ldr	r2, [pc, #300]	; (8009348 <gc_execute_block+0x3628>)
 800921c:	330e      	adds	r3, #14
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	3304      	adds	r3, #4
 8009224:	ed93 7a00 	vldr	s14, [r3]
 8009228:	eef0 0a47 	vmov.f32	s1, s14
 800922c:	eeb0 0a67 	vmov.f32	s0, s15
 8009230:	f7fc f8c8 	bl	80053c4 <hypot_f>
 8009234:	eef0 7a40 	vmov.f32	s15, s0
 8009238:	4b43      	ldr	r3, [pc, #268]	; (8009348 <gc_execute_block+0x3628>)
 800923a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
                        float delta_r = fabsf(target_r - gc_block.values.r);
 800923e:	4b42      	ldr	r3, [pc, #264]	; (8009348 <gc_execute_block+0x3628>)
 8009240:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009244:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8009248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800924c:	eef0 7ae7 	vabs.f32	s15, s15
 8009250:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
                        if (delta_r > 0.005f) {
 8009254:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009258:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8009358 <gc_execute_block+0x3638>
 800925c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009264:	dc00      	bgt.n	8009268 <gc_execute_block+0x3548>
                    break;
 8009266:	e1c0      	b.n	80095ea <gc_execute_block+0x38ca>
                            if (delta_r > 0.5f)
 8009268:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800926c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009278:	dd02      	ble.n	8009280 <gc_execute_block+0x3560>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.5mm
 800927a:	2321      	movs	r3, #33	; 0x21
 800927c:	f001 bd2c 	b.w	800acd8 <gc_execute_block+0x4fb8>
                            if (delta_r > (0.001f * gc_block.values.r))
 8009280:	4b31      	ldr	r3, [pc, #196]	; (8009348 <gc_execute_block+0x3628>)
 8009282:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009286:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800935c <gc_execute_block+0x363c>
 800928a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800928e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929a:	dc00      	bgt.n	800929e <gc_execute_block+0x357e>
                    break;
 800929c:	e1a5      	b.n	80095ea <gc_execute_block+0x38ca>
                                FAIL(Status_GcodeInvalidTarget); // [Arc definition error] > 0.005mm AND 0.1% radius
 800929e:	2321      	movs	r3, #33	; 0x21
 80092a0:	f001 bd1a 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 80092a4:	4b28      	ldr	r3, [pc, #160]	; (8009348 <gc_execute_block+0x3628>)
 80092a6:	7b9b      	ldrb	r3, [r3, #14]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <gc_execute_block+0x3592>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 80092ac:	232a      	movs	r3, #42	; 0x2a
 80092ae:	f001 bd13 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 80092b2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <gc_execute_block+0x35a4>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 80092be:	2318      	movs	r3, #24
 80092c0:	f001 bd0a 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if((gc_block.words.mask & pq_words.mask) != pq_words.mask)
 80092c4:	4b20      	ldr	r3, [pc, #128]	; (8009348 <gc_execute_block+0x3628>)
 80092c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80092ca:	4b25      	ldr	r3, [pc, #148]	; (8009360 <gc_execute_block+0x3640>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	401a      	ands	r2, r3
 80092d0:	4b23      	ldr	r3, [pc, #140]	; (8009360 <gc_execute_block+0x3640>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d002      	beq.n	80092de <gc_execute_block+0x35be>
                        FAIL(Status_GcodeValueWordMissing); // [P and Q are not both specified]
 80092d8:	231c      	movs	r3, #28
 80092da:	f001 bcfd 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if(gc_parser_flags.motion_mode_changed && (gc_block.words.mask & ij_words.mask) != ij_words.mask)
 80092de:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00c      	beq.n	8009306 <gc_execute_block+0x35e6>
 80092ec:	4b16      	ldr	r3, [pc, #88]	; (8009348 <gc_execute_block+0x3628>)
 80092ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80092f2:	4b1c      	ldr	r3, [pc, #112]	; (8009364 <gc_execute_block+0x3644>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	401a      	ands	r2, r3
 80092f8:	4b1a      	ldr	r3, [pc, #104]	; (8009364 <gc_execute_block+0x3644>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d002      	beq.n	8009306 <gc_execute_block+0x35e6>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified in the first of a series of G5 commands]
 8009300:	231c      	movs	r3, #28
 8009302:	f001 bce9 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if(!(gc_block.words.i || gc_block.words.j)) {
 8009306:	4b10      	ldr	r3, [pc, #64]	; (8009348 <gc_execute_block+0x3628>)
 8009308:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800930c:	f003 0310 	and.w	r3, r3, #16
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d128      	bne.n	8009368 <gc_execute_block+0x3648>
 8009316:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <gc_execute_block+0x3628>)
 8009318:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800931c:	f003 0320 	and.w	r3, r3, #32
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d120      	bne.n	8009368 <gc_execute_block+0x3648>
                        gc_block.values.ijk[I_VALUE] = - gc_block.values.p;
 8009326:	4b08      	ldr	r3, [pc, #32]	; (8009348 <gc_execute_block+0x3628>)
 8009328:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800932c:	eef1 7a67 	vneg.f32	s15, s15
 8009330:	4b05      	ldr	r3, [pc, #20]	; (8009348 <gc_execute_block+0x3628>)
 8009332:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
                        gc_block.values.ijk[J_VALUE] = - gc_block.values.q;
 8009336:	4b04      	ldr	r3, [pc, #16]	; (8009348 <gc_execute_block+0x3628>)
 8009338:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800933c:	eef1 7a67 	vneg.f32	s15, s15
 8009340:	4b01      	ldr	r3, [pc, #4]	; (8009348 <gc_execute_block+0x3628>)
 8009342:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8009346:	e041      	b.n	80093cc <gc_execute_block+0x36ac>
 8009348:	20001470 	.word	0x20001470
 800934c:	41cb3333 	.word	0x41cb3333
 8009350:	2000137c 	.word	0x2000137c
 8009354:	2000039c 	.word	0x2000039c
 8009358:	3ba3d70a 	.word	0x3ba3d70a
 800935c:	3a83126f 	.word	0x3a83126f
 8009360:	0803291c 	.word	0x0803291c
 8009364:	08032920 	.word	0x08032920
                        if (gc_block.modal.units_imperial) {
 8009368:	4bae      	ldr	r3, [pc, #696]	; (8009624 <gc_execute_block+0x3904>)
 800936a:	7adb      	ldrb	r3, [r3, #11]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d013      	beq.n	8009398 <gc_execute_block+0x3678>
                            gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 8009370:	4bac      	ldr	r3, [pc, #688]	; (8009624 <gc_execute_block+0x3904>)
 8009372:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8009376:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8009628 <gc_execute_block+0x3908>
 800937a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800937e:	4ba9      	ldr	r3, [pc, #676]	; (8009624 <gc_execute_block+0x3904>)
 8009380:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
                            gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 8009384:	4ba7      	ldr	r3, [pc, #668]	; (8009624 <gc_execute_block+0x3904>)
 8009386:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800938a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8009628 <gc_execute_block+0x3908>
 800938e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009392:	4ba4      	ldr	r3, [pc, #656]	; (8009624 <gc_execute_block+0x3904>)
 8009394:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
                        if(gc_state.modal.scaling_active) {
 8009398:	4ba4      	ldr	r3, [pc, #656]	; (800962c <gc_execute_block+0x390c>)
 800939a:	7f9b      	ldrb	r3, [r3, #30]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d015      	beq.n	80093cc <gc_execute_block+0x36ac>
                            gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 80093a0:	4ba0      	ldr	r3, [pc, #640]	; (8009624 <gc_execute_block+0x3904>)
 80093a2:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80093a6:	4ba2      	ldr	r3, [pc, #648]	; (8009630 <gc_execute_block+0x3910>)
 80093a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80093ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b0:	4b9c      	ldr	r3, [pc, #624]	; (8009624 <gc_execute_block+0x3904>)
 80093b2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
                            gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 80093b6:	4b9b      	ldr	r3, [pc, #620]	; (8009624 <gc_execute_block+0x3904>)
 80093b8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80093bc:	4b9c      	ldr	r3, [pc, #624]	; (8009630 <gc_execute_block+0x3910>)
 80093be:	edd3 7a04 	vldr	s15, [r3, #16]
 80093c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c6:	4b97      	ldr	r3, [pc, #604]	; (8009624 <gc_execute_block+0x3904>)
 80093c8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
                    if (gc_block.modal.units_imperial) {
 80093cc:	4b95      	ldr	r3, [pc, #596]	; (8009624 <gc_execute_block+0x3904>)
 80093ce:	7adb      	ldrb	r3, [r3, #11]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d013      	beq.n	80093fc <gc_execute_block+0x36dc>
                        gc_block.values.p *= MM_PER_INCH;
 80093d4:	4b93      	ldr	r3, [pc, #588]	; (8009624 <gc_execute_block+0x3904>)
 80093d6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80093da:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8009628 <gc_execute_block+0x3908>
 80093de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093e2:	4b90      	ldr	r3, [pc, #576]	; (8009624 <gc_execute_block+0x3904>)
 80093e4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
                        gc_block.values.q *= MM_PER_INCH;
 80093e8:	4b8e      	ldr	r3, [pc, #568]	; (8009624 <gc_execute_block+0x3904>)
 80093ea:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80093ee:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8009628 <gc_execute_block+0x3908>
 80093f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093f6:	4b8b      	ldr	r3, [pc, #556]	; (8009624 <gc_execute_block+0x3904>)
 80093f8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                    if(gc_state.modal.scaling_active) {
 80093fc:	4b8b      	ldr	r3, [pc, #556]	; (800962c <gc_execute_block+0x390c>)
 80093fe:	7f9b      	ldrb	r3, [r3, #30]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d015      	beq.n	8009430 <gc_execute_block+0x3710>
                        gc_block.values.p *= scale_factor.ijk[X_AXIS];
 8009404:	4b87      	ldr	r3, [pc, #540]	; (8009624 <gc_execute_block+0x3904>)
 8009406:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800940a:	4b89      	ldr	r3, [pc, #548]	; (8009630 <gc_execute_block+0x3910>)
 800940c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009414:	4b83      	ldr	r3, [pc, #524]	; (8009624 <gc_execute_block+0x3904>)
 8009416:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
                        gc_block.values.q *= scale_factor.ijk[Y_AXIS];
 800941a:	4b82      	ldr	r3, [pc, #520]	; (8009624 <gc_execute_block+0x3904>)
 800941c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8009420:	4b83      	ldr	r3, [pc, #524]	; (8009630 <gc_execute_block+0x3910>)
 8009422:	edd3 7a04 	vldr	s15, [r3, #16]
 8009426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800942a:	4b7e      	ldr	r3, [pc, #504]	; (8009624 <gc_execute_block+0x3904>)
 800942c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
                    gc_state.modal.spline_pq[X_AXIS] = gc_block.values.p;
 8009430:	4b7c      	ldr	r3, [pc, #496]	; (8009624 <gc_execute_block+0x3904>)
 8009432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009434:	4a7d      	ldr	r2, [pc, #500]	; (800962c <gc_execute_block+0x390c>)
 8009436:	6213      	str	r3, [r2, #32]
                    gc_state.modal.spline_pq[Y_AXIS] = gc_block.values.q;
 8009438:	4b7a      	ldr	r3, [pc, #488]	; (8009624 <gc_execute_block+0x3904>)
 800943a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943c:	4a7b      	ldr	r2, [pc, #492]	; (800962c <gc_execute_block+0x390c>)
 800943e:	6253      	str	r3, [r2, #36]	; 0x24
                    gc_block.words.p = gc_block.words.q = gc_block.words.i = gc_block.words.j = Off;
 8009440:	4a78      	ldr	r2, [pc, #480]	; (8009624 <gc_execute_block+0x3904>)
 8009442:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 8009446:	f36f 1345 	bfc	r3, #5, #1
 800944a:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 800944e:	4b75      	ldr	r3, [pc, #468]	; (8009624 <gc_execute_block+0x3904>)
 8009450:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009454:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009458:	b2d9      	uxtb	r1, r3
 800945a:	4a72      	ldr	r2, [pc, #456]	; (8009624 <gc_execute_block+0x3904>)
 800945c:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 8009460:	f361 1304 	bfi	r3, r1, #4, #1
 8009464:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 8009468:	4b6e      	ldr	r3, [pc, #440]	; (8009624 <gc_execute_block+0x3904>)
 800946a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800946e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009472:	b2d9      	uxtb	r1, r3
 8009474:	4a6b      	ldr	r2, [pc, #428]	; (8009624 <gc_execute_block+0x3904>)
 8009476:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 800947a:	f361 0341 	bfi	r3, r1, #1, #1
 800947e:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8009482:	4b68      	ldr	r3, [pc, #416]	; (8009624 <gc_execute_block+0x3904>)
 8009484:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009488:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800948c:	b2d9      	uxtb	r1, r3
 800948e:	4a65      	ldr	r2, [pc, #404]	; (8009624 <gc_execute_block+0x3904>)
 8009490:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8009494:	f361 0300 	bfi	r3, r1, #0, #1
 8009498:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
                    break;
 800949c:	e0a5      	b.n	80095ea <gc_execute_block+0x38ca>
                    if(gc_block.modal.plane_select != PlaneSelect_XY)
 800949e:	4b61      	ldr	r3, [pc, #388]	; (8009624 <gc_execute_block+0x3904>)
 80094a0:	7b9b      	ldrb	r3, [r3, #14]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <gc_execute_block+0x378c>
                        FAIL(Status_GcodeIllegalPlane); // [The active plane is not G17]
 80094a6:	232a      	movs	r3, #42	; 0x2a
 80094a8:	f001 bc16 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if (axis_words.mask & ~(bit(X_AXIS)|bit(Y_AXIS)))
 80094ac:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80094b0:	f023 0303 	bic.w	r3, r3, #3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <gc_execute_block+0x379e>
                        FAIL(Status_GcodeAxisCommandConflict); // [An axis other than X or Y is specified]
 80094b8:	2318      	movs	r3, #24
 80094ba:	f001 bc0d 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if((gc_block.words.mask & ij_words.mask) != ij_words.mask)
 80094be:	4b59      	ldr	r3, [pc, #356]	; (8009624 <gc_execute_block+0x3904>)
 80094c0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80094c4:	4b5b      	ldr	r3, [pc, #364]	; (8009634 <gc_execute_block+0x3914>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	401a      	ands	r2, r3
 80094ca:	4b5a      	ldr	r3, [pc, #360]	; (8009634 <gc_execute_block+0x3914>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d002      	beq.n	80094d8 <gc_execute_block+0x37b8>
                        FAIL(Status_GcodeValueWordMissing); // [I or J are unspecified]
 80094d2:	231c      	movs	r3, #28
 80094d4:	f001 bc00 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if(gc_block.values.ijk[I_VALUE] == 0.0f && gc_block.values.ijk[I_VALUE] == 0.0f)
 80094d8:	4b52      	ldr	r3, [pc, #328]	; (8009624 <gc_execute_block+0x3904>)
 80094da:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80094de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80094e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e6:	d10a      	bne.n	80094fe <gc_execute_block+0x37de>
 80094e8:	4b4e      	ldr	r3, [pc, #312]	; (8009624 <gc_execute_block+0x3904>)
 80094ea:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80094ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80094f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f6:	d102      	bne.n	80094fe <gc_execute_block+0x37de>
                        FAIL(Status_GcodeValueOutOfRange); // [I or J are zero]
 80094f8:	2327      	movs	r3, #39	; 0x27
 80094fa:	f001 bbed 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if (gc_block.modal.units_imperial) {
 80094fe:	4b49      	ldr	r3, [pc, #292]	; (8009624 <gc_execute_block+0x3904>)
 8009500:	7adb      	ldrb	r3, [r3, #11]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d013      	beq.n	800952e <gc_execute_block+0x380e>
                        gc_block.values.ijk[I_VALUE] *= MM_PER_INCH;
 8009506:	4b47      	ldr	r3, [pc, #284]	; (8009624 <gc_execute_block+0x3904>)
 8009508:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800950c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009628 <gc_execute_block+0x3908>
 8009510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009514:	4b43      	ldr	r3, [pc, #268]	; (8009624 <gc_execute_block+0x3904>)
 8009516:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
                        gc_block.values.ijk[J_VALUE] *= MM_PER_INCH;
 800951a:	4b42      	ldr	r3, [pc, #264]	; (8009624 <gc_execute_block+0x3904>)
 800951c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009520:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8009628 <gc_execute_block+0x3908>
 8009524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009528:	4b3e      	ldr	r3, [pc, #248]	; (8009624 <gc_execute_block+0x3904>)
 800952a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
                    if(gc_state.modal.scaling_active) {
 800952e:	4b3f      	ldr	r3, [pc, #252]	; (800962c <gc_execute_block+0x390c>)
 8009530:	7f9b      	ldrb	r3, [r3, #30]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d015      	beq.n	8009562 <gc_execute_block+0x3842>
                        gc_block.values.ijk[I_VALUE] *= scale_factor.ijk[X_AXIS];
 8009536:	4b3b      	ldr	r3, [pc, #236]	; (8009624 <gc_execute_block+0x3904>)
 8009538:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800953c:	4b3c      	ldr	r3, [pc, #240]	; (8009630 <gc_execute_block+0x3910>)
 800953e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009546:	4b37      	ldr	r3, [pc, #220]	; (8009624 <gc_execute_block+0x3904>)
 8009548:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
                        gc_block.values.ijk[J_VALUE] *= scale_factor.ijk[Y_AXIS];
 800954c:	4b35      	ldr	r3, [pc, #212]	; (8009624 <gc_execute_block+0x3904>)
 800954e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8009552:	4b37      	ldr	r3, [pc, #220]	; (8009630 <gc_execute_block+0x3910>)
 8009554:	edd3 7a04 	vldr	s15, [r3, #16]
 8009558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955c:	4b31      	ldr	r3, [pc, #196]	; (8009624 <gc_execute_block+0x3904>)
 800955e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
                    gc_block.words.i = gc_block.words.j = Off;
 8009562:	4a30      	ldr	r2, [pc, #192]	; (8009624 <gc_execute_block+0x3904>)
 8009564:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 8009568:	f36f 1345 	bfc	r3, #5, #1
 800956c:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
 8009570:	4b2c      	ldr	r3, [pc, #176]	; (8009624 <gc_execute_block+0x3904>)
 8009572:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009576:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800957a:	b2d9      	uxtb	r1, r3
 800957c:	4a29      	ldr	r2, [pc, #164]	; (8009624 <gc_execute_block+0x3904>)
 800957e:	f892 3094 	ldrb.w	r3, [r2, #148]	; 0x94
 8009582:	f361 1304 	bfi	r3, r1, #4, #1
 8009586:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
                    break;
 800958a:	e02e      	b.n	80095ea <gc_execute_block+0x38ca>
                    gc_parser_flags.probe_is_no_error = On;
 800958c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009590:	f043 0310 	orr.w	r3, r3, #16
 8009594:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                    if(gc_block.modal.motion == MotionMode_ProbeAway || gc_block.modal.motion == MotionMode_ProbeAwayNoError)
 8009598:	4b22      	ldr	r3, [pc, #136]	; (8009624 <gc_execute_block+0x3904>)
 800959a:	891b      	ldrh	r3, [r3, #8]
 800959c:	2b8e      	cmp	r3, #142	; 0x8e
 800959e:	d003      	beq.n	80095a8 <gc_execute_block+0x3888>
 80095a0:	4b20      	ldr	r3, [pc, #128]	; (8009624 <gc_execute_block+0x3904>)
 80095a2:	891b      	ldrh	r3, [r3, #8]
 80095a4:	2b8f      	cmp	r3, #143	; 0x8f
 80095a6:	d105      	bne.n	80095b4 <gc_execute_block+0x3894>
                        gc_parser_flags.probe_is_away = On;
 80095a8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80095ac:	f043 0308 	orr.w	r3, r3, #8
 80095b0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                    if (!axis_words.mask)
 80095b4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <gc_execute_block+0x38a2>
                        FAIL(Status_GcodeNoAxisWords); // [No axis words]
 80095bc:	231a      	movs	r3, #26
 80095be:	f001 bb8b 	b.w	800acd8 <gc_execute_block+0x4fb8>
                    if (isequal_position_vector(gc_state.position, gc_block.values.xyz))
 80095c2:	220c      	movs	r2, #12
 80095c4:	491c      	ldr	r1, [pc, #112]	; (8009638 <gc_execute_block+0x3918>)
 80095c6:	481d      	ldr	r0, [pc, #116]	; (800963c <gc_execute_block+0x391c>)
 80095c8:	f01c fc29 	bl	8025e1e <memcmp>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <gc_execute_block+0x38c8>
                        FAIL(Status_GcodeInvalidTarget); // [Invalid target]
 80095d2:	2321      	movs	r3, #33	; 0x21
 80095d4:	f001 bb80 	b.w	800acd8 <gc_execute_block+0x4fb8>
                        break;
 80095d8:	bf00      	nop
 80095da:	e006      	b.n	80095ea <gc_execute_block+0x38ca>
                        break;
 80095dc:	bf00      	nop
 80095de:	e004      	b.n	80095ea <gc_execute_block+0x38ca>
                    break;
 80095e0:	bf00      	nop
 80095e2:	e002      	b.n	80095ea <gc_execute_block+0x38ca>
                    break;
 80095e4:	bf00      	nop
 80095e6:	e000      	b.n	80095ea <gc_execute_block+0x38ca>
                    break;
 80095e8:	bf00      	nop

    // [21. Program flow ]: No error checks required.

    // [0. Non-specific error-checks]: Complete unused value words check, i.e. IJK used when in arc
    // radius mode, or axis words that aren't used in the block.
    if (gc_parser_flags.jog_motion) // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
 80095ea:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d023      	beq.n	8009640 <gc_execute_block+0x3920>
        gc_block.words.n = gc_block.words.f = Off;
 80095f8:	4a0a      	ldr	r2, [pc, #40]	; (8009624 <gc_execute_block+0x3904>)
 80095fa:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 80095fe:	f36f 0341 	bfc	r3, #1, #1
 8009602:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <gc_execute_block+0x3904>)
 8009608:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800960c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009610:	b2d9      	uxtb	r1, r3
 8009612:	4a04      	ldr	r2, [pc, #16]	; (8009624 <gc_execute_block+0x3904>)
 8009614:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8009618:	f361 1386 	bfi	r3, r1, #6, #1
 800961c:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
 8009620:	e03c      	b.n	800969c <gc_execute_block+0x397c>
 8009622:	bf00      	nop
 8009624:	20001470 	.word	0x20001470
 8009628:	41cb3333 	.word	0x41cb3333
 800962c:	2000137c 	.word	0x2000137c
 8009630:	2000039c 	.word	0x2000039c
 8009634:	08032920 	.word	0x08032920
 8009638:	200014d0 	.word	0x200014d0
 800963c:	200013dc 	.word	0x200013dc
    else
        gc_block.words.n = gc_block.words.f = gc_block.words.s = gc_block.words.t = Off;
 8009640:	4a99      	ldr	r2, [pc, #612]	; (80098a8 <gc_execute_block+0x3b88>)
 8009642:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8009646:	f36f 1304 	bfc	r3, #4, #1
 800964a:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 800964e:	4b96      	ldr	r3, [pc, #600]	; (80098a8 <gc_execute_block+0x3b88>)
 8009650:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009654:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009658:	b2d9      	uxtb	r1, r3
 800965a:	4a93      	ldr	r2, [pc, #588]	; (80098a8 <gc_execute_block+0x3b88>)
 800965c:	f892 3096 	ldrb.w	r3, [r2, #150]	; 0x96
 8009660:	f361 03c3 	bfi	r3, r1, #3, #1
 8009664:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
 8009668:	4b8f      	ldr	r3, [pc, #572]	; (80098a8 <gc_execute_block+0x3b88>)
 800966a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800966e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009672:	b2d9      	uxtb	r1, r3
 8009674:	4a8c      	ldr	r2, [pc, #560]	; (80098a8 <gc_execute_block+0x3b88>)
 8009676:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 800967a:	f361 0341 	bfi	r3, r1, #1, #1
 800967e:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
 8009682:	4b89      	ldr	r3, [pc, #548]	; (80098a8 <gc_execute_block+0x3b88>)
 8009684:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009688:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800968c:	b2d9      	uxtb	r1, r3
 800968e:	4a86      	ldr	r2, [pc, #536]	; (80098a8 <gc_execute_block+0x3b88>)
 8009690:	f892 3095 	ldrb.w	r3, [r2, #149]	; 0x95
 8009694:	f361 1386 	bfi	r3, r1, #6, #1
 8009698:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95

    if (axis_command)
 800969c:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d009      	beq.n	80096b8 <gc_execute_block+0x3998>
        gc_block.words.mask &= ~axis_words_mask.mask; // Remove axis words.
 80096a4:	4b80      	ldr	r3, [pc, #512]	; (80098a8 <gc_execute_block+0x3b88>)
 80096a6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80096aa:	4b80      	ldr	r3, [pc, #512]	; (80098ac <gc_execute_block+0x3b8c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	43db      	mvns	r3, r3
 80096b0:	4013      	ands	r3, r2
 80096b2:	4a7d      	ldr	r2, [pc, #500]	; (80098a8 <gc_execute_block+0x3b88>)
 80096b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    if (gc_block.words.mask)
 80096b8:	4b7b      	ldr	r3, [pc, #492]	; (80098a8 <gc_execute_block+0x3b88>)
 80096ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d002      	beq.n	80096c8 <gc_execute_block+0x39a8>
        FAIL(Status_GcodeUnusedWords); // [Unused words]
 80096c2:	2324      	movs	r3, #36	; 0x24
 80096c4:	f001 bb08 	b.w	800acd8 <gc_execute_block+0x4fb8>
     need to update the state and execute the block according to the order-of-execution.
    */

    // Initialize planner data struct for motion blocks.
    plan_line_data_t plan_data;
    memset(&plan_data, 0, sizeof(plan_line_data_t)); // Zero plan_data struct
 80096c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096cc:	2228      	movs	r2, #40	; 0x28
 80096ce:	2100      	movs	r1, #0
 80096d0:	4618      	mov	r0, r3
 80096d2:	f01c fbb4 	bl	8025e3e <memset>
    plan_data.condition.target_validated = plan_data.condition.target_valid = sys.soft_limits.mask == 0;
 80096d6:	4b76      	ldr	r3, [pc, #472]	; (80098b0 <gc_execute_block+0x3b90>)
 80096d8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80096dc:	2b00      	cmp	r3, #0
 80096de:	bf0c      	ite	eq
 80096e0:	2301      	moveq	r3, #1
 80096e2:	2300      	movne	r3, #0
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80096ea:	f362 0300 	bfi	r3, r2, #0, #1
 80096ee:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80096f2:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80096f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009700:	f362 0341 	bfi	r3, r2, #1, #1
 8009704:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

    // Intercept jog commands and complete error checking for valid jog commands and execute.
    // NOTE: G-code parser state is not updated, except the position to ensure sequential jog
    // targets are computed correctly. The final parser position after a jog is updated in
    // protocol_execute_realtime() when jogging completes or is canceled.
    if (gc_parser_flags.jog_motion) {
 8009708:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d05f      	beq.n	80097d6 <gc_execute_block+0x3ab6>

        // Only distance and unit modal commands and G53 absolute override command are allowed.
        // NOTE: Feed rate word and axis word checks have already been performed in STEP 3.
        if (command_words.mask & ~jog_groups.mask)
 8009716:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800971a:	4b66      	ldr	r3, [pc, #408]	; (80098b4 <gc_execute_block+0x3b94>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	43db      	mvns	r3, r3
 8009720:	4013      	ands	r3, r2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <gc_execute_block+0x3a0c>
            FAIL(Status_InvalidJogCommand);
 8009726:	2310      	movs	r3, #16
 8009728:	f001 bad6 	b.w	800acd8 <gc_execute_block+0x4fb8>

        if (!(gc_block.non_modal_command == NonModal_AbsoluteOverride || gc_block.non_modal_command == NonModal_NoAction))
 800972c:	4b5e      	ldr	r3, [pc, #376]	; (80098a8 <gc_execute_block+0x3b88>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b35      	cmp	r3, #53	; 0x35
 8009732:	d006      	beq.n	8009742 <gc_execute_block+0x3a22>
 8009734:	4b5c      	ldr	r3, [pc, #368]	; (80098a8 <gc_execute_block+0x3b88>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <gc_execute_block+0x3a22>
            FAIL(Status_InvalidJogCommand);
 800973c:	2310      	movs	r3, #16
 800973e:	f001 bacb 	b.w	800acd8 <gc_execute_block+0x4fb8>

        // Initialize planner data to current spindle and coolant modal state.
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 8009742:	4b5d      	ldr	r3, [pc, #372]	; (80098b8 <gc_execute_block+0x3b98>)
 8009744:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8009748:	3348      	adds	r3, #72	; 0x48
 800974a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800974c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        plan_data.spindle.state = gc_state.modal.spindle.state;
 8009750:	4b59      	ldr	r3, [pc, #356]	; (80098b8 <gc_execute_block+0x3b98>)
 8009752:	7e9b      	ldrb	r3, [r3, #26]
 8009754:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        plan_data.condition.coolant = gc_state.modal.coolant;
 8009758:	4b57      	ldr	r3, [pc, #348]	; (80098b8 <gc_execute_block+0x3b98>)
 800975a:	7e5b      	ldrb	r3, [r3, #25]
 800975c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
        plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted || (gc_state.modal.spindle.state.ccw && gc_state.spindle.hal->cap.laser);
 8009760:	4b55      	ldr	r3, [pc, #340]	; (80098b8 <gc_execute_block+0x3b98>)
 8009762:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10e      	bne.n	8009788 <gc_execute_block+0x3a68>
 800976a:	4b53      	ldr	r3, [pc, #332]	; (80098b8 <gc_execute_block+0x3b98>)
 800976c:	7e9b      	ldrb	r3, [r3, #26]
 800976e:	f003 0302 	and.w	r3, r3, #2
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d009      	beq.n	800978c <gc_execute_block+0x3a6c>
 8009778:	4b4f      	ldr	r3, [pc, #316]	; (80098b8 <gc_execute_block+0x3b98>)
 800977a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977c:	7a5b      	ldrb	r3, [r3, #9]
 800977e:	f003 0308 	and.w	r3, r3, #8
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <gc_execute_block+0x3a6c>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <gc_execute_block+0x3a6e>
 800978c:	2300      	movs	r3, #0
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	b2da      	uxtb	r2, r3
 8009794:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009798:	f362 1386 	bfi	r3, r2, #6, #1
 800979c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

        if ((status_code_t)(int_value = (uint_fast16_t)mc_jog_execute(&plan_data, &gc_block, gc_state.position)) == Status_OK)
 80097a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80097a4:	4a45      	ldr	r2, [pc, #276]	; (80098bc <gc_execute_block+0x3b9c>)
 80097a6:	4940      	ldr	r1, [pc, #256]	; (80098a8 <gc_execute_block+0x3b88>)
 80097a8:	4618      	mov	r0, r3
 80097aa:	f005 f8c9 	bl	800e940 <mc_jog_execute>
 80097ae:	4603      	mov	r3, r0
 80097b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <gc_execute_block+0x3aac>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position));
 80097be:	4b3e      	ldr	r3, [pc, #248]	; (80098b8 <gc_execute_block+0x3b98>)
 80097c0:	4a39      	ldr	r2, [pc, #228]	; (80098a8 <gc_execute_block+0x3b88>)
 80097c2:	3360      	adds	r3, #96	; 0x60
 80097c4:	3260      	adds	r2, #96	; 0x60
 80097c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80097c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        return (status_code_t)int_value;
 80097cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	f001 ba81 	b.w	800acd8 <gc_execute_block+0x4fb8>
    }

    // If in laser mode, setup laser power based on current and past parser conditions.
    if(gc_state.spindle.hal->cap.laser) {
 80097d6:	4b38      	ldr	r3, [pc, #224]	; (80098b8 <gc_execute_block+0x3b98>)
 80097d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097da:	7a5b      	ldrb	r3, [r3, #9]
 80097dc:	f003 0308 	and.w	r3, r3, #8
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d073      	beq.n	80098ce <gc_execute_block+0x3bae>

        if(!motion_is_lasercut(gc_block.modal.motion))
 80097e6:	4b30      	ldr	r3, [pc, #192]	; (80098a8 <gc_execute_block+0x3b88>)
 80097e8:	891b      	ldrh	r3, [r3, #8]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fb fe06 	bl	80053fc <motion_is_lasercut>
 80097f0:	4603      	mov	r3, r0
 80097f2:	f083 0301 	eor.w	r3, r3, #1
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <gc_execute_block+0x3ae8>
            gc_parser_flags.laser_disable = On;
 80097fc:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009804:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

        // Any motion mode with axis words is allowed to be passed from a spindle speed update.
        // NOTE: G1 and G0 without axis words sets axis_command to none. G28/30 are intentionally omitted.
        // TODO: Check sync conditions for M3 enabled motions that don't enter the planner. (zero length).
        if(axis_words.mask && (axis_command == AxisCommand_MotionMode))
 8009808:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <gc_execute_block+0x3b06>
 8009810:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 8009814:	2b02      	cmp	r3, #2
 8009816:	d106      	bne.n	8009826 <gc_execute_block+0x3b06>
            gc_parser_flags.laser_is_motion = On;
 8009818:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800981c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009820:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8009824:	e030      	b.n	8009888 <gc_execute_block+0x3b68>
        else if(gc_state.modal.spindle.state.on && !gc_state.modal.spindle.state.ccw) {
 8009826:	4b24      	ldr	r3, [pc, #144]	; (80098b8 <gc_execute_block+0x3b98>)
 8009828:	7e9b      	ldrb	r3, [r3, #26]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d029      	beq.n	8009888 <gc_execute_block+0x3b68>
 8009834:	4b20      	ldr	r3, [pc, #128]	; (80098b8 <gc_execute_block+0x3b98>)
 8009836:	7e9b      	ldrb	r3, [r3, #26]
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d122      	bne.n	8009888 <gc_execute_block+0x3b68>
            // M3 constant power laser requires planner syncs to update the laser when changing between
            // a G1/2/3 motion mode state and vice versa when there is no motion in the line.
            if(motion_is_lasercut(gc_state.modal.motion)) {
 8009842:	4b1d      	ldr	r3, [pc, #116]	; (80098b8 <gc_execute_block+0x3b98>)
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f7fb fdd8 	bl	80053fc <motion_is_lasercut>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00d      	beq.n	800986e <gc_execute_block+0x3b4e>
                if(gc_parser_flags.laser_disable)
 8009852:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d013      	beq.n	8009888 <gc_execute_block+0x3b68>
                    gc_parser_flags.spindle_force_sync = On; // Change from G1/2/3 motion mode.
 8009860:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009864:	f043 0320 	orr.w	r3, r3, #32
 8009868:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 800986c:	e00c      	b.n	8009888 <gc_execute_block+0x3b68>
            } else if(!gc_parser_flags.laser_disable) // When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
 800986e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d105      	bne.n	8009888 <gc_execute_block+0x3b68>
                gc_parser_flags.spindle_force_sync = On;
 800987c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009880:	f043 0320 	orr.w	r3, r3, #32
 8009884:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        }

        gc_state.is_rpm_rate_adjusted = gc_state.modal.spindle.state.ccw && !gc_parser_flags.laser_disable;
 8009888:	4b0b      	ldr	r3, [pc, #44]	; (80098b8 <gc_execute_block+0x3b98>)
 800988a:	7e9b      	ldrb	r3, [r3, #26]
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d014      	beq.n	80098c0 <gc_execute_block+0x3ba0>
 8009896:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800989a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10d      	bne.n	80098c0 <gc_execute_block+0x3ba0>
 80098a4:	2301      	movs	r3, #1
 80098a6:	e00c      	b.n	80098c2 <gc_execute_block+0x3ba2>
 80098a8:	20001470 	.word	0x20001470
 80098ac:	08032918 	.word	0x08032918
 80098b0:	20001520 	.word	0x20001520
 80098b4:	08032924 	.word	0x08032924
 80098b8:	2000137c 	.word	0x2000137c
 80098bc:	200013dc 	.word	0x200013dc
 80098c0:	2300      	movs	r3, #0
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	4b91      	ldr	r3, [pc, #580]	; (8009b10 <gc_execute_block+0x3df0>)
 80098ca:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    }

    // [0. Non-specific/common error-checks and miscellaneous setup]:
    // NOTE: If no line number is present, the value is zero.
    gc_state.line_number = gc_block.values.n;
 80098ce:	4b91      	ldr	r3, [pc, #580]	; (8009b14 <gc_execute_block+0x3df4>)
 80098d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098d4:	4a8e      	ldr	r2, [pc, #568]	; (8009b10 <gc_execute_block+0x3df0>)
 80098d6:	66d3      	str	r3, [r2, #108]	; 0x6c
    plan_data.line_number = gc_state.line_number; // Record data for planner use.
 80098d8:	4b8d      	ldr	r3, [pc, #564]	; (8009b10 <gc_execute_block+0x3df0>)
 80098da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098dc:	663b      	str	r3, [r7, #96]	; 0x60

    bool check_mode = state_get() == STATE_CHECK_MODE;
 80098de:	f013 fa1f 	bl	801cd20 <state_get>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	bf0c      	ite	eq
 80098e8:	2301      	moveq	r3, #1
 80098ea:	2300      	movne	r3, #0
 80098ec:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

    // [1. Comments feedback ]: Extracted in protocol.c if HAL entry point provided
    if(message && !check_mode && (plan_data.message = malloc(strlen(message) + 1)))
 80098f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01c      	beq.n	8009932 <gc_execute_block+0x3c12>
 80098f8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80098fc:	f083 0301 	eor.w	r3, r3, #1
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d015      	beq.n	8009932 <gc_execute_block+0x3c12>
 8009906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800990a:	4618      	mov	r0, r3
 800990c:	f7f6 fcbe 	bl	800028c <strlen>
 8009910:	4603      	mov	r3, r0
 8009912:	3301      	adds	r3, #1
 8009914:	4618      	mov	r0, r3
 8009916:	f01b ff2f 	bl	8025778 <malloc>
 800991a:	4603      	mov	r3, r0
 800991c:	667b      	str	r3, [r7, #100]	; 0x64
 800991e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009920:	2b00      	cmp	r3, #0
 8009922:	d006      	beq.n	8009932 <gc_execute_block+0x3c12>
        strcpy(plan_data.message, message);
 8009924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009926:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800992a:	4611      	mov	r1, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f01c fbdb 	bl	80260e8 <strcpy>

    // [2. Set feed rate mode ]:
    gc_state.modal.feed_mode = gc_block.modal.feed_mode;
 8009932:	4b78      	ldr	r3, [pc, #480]	; (8009b14 <gc_execute_block+0x3df4>)
 8009934:	7a9a      	ldrb	r2, [r3, #10]
 8009936:	4b76      	ldr	r3, [pc, #472]	; (8009b10 <gc_execute_block+0x3df0>)
 8009938:	709a      	strb	r2, [r3, #2]
    if (gc_state.modal.feed_mode == FeedMode_InverseTime)
 800993a:	4b75      	ldr	r3, [pc, #468]	; (8009b10 <gc_execute_block+0x3df0>)
 800993c:	789b      	ldrb	r3, [r3, #2]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d105      	bne.n	800994e <gc_execute_block+0x3c2e>
        plan_data.condition.inverse_time = On; // Set condition flag for planner use.
 8009942:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009946:	f043 0320 	orr.w	r3, r3, #32
 800994a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

    // [3. Set feed rate ]:
    gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800994e:	4b71      	ldr	r3, [pc, #452]	; (8009b14 <gc_execute_block+0x3df4>)
 8009950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009952:	4a6f      	ldr	r2, [pc, #444]	; (8009b10 <gc_execute_block+0x3df0>)
 8009954:	6593      	str	r3, [r2, #88]	; 0x58
    plan_data.feed_rate = gc_state.feed_rate; // Record data for planner use.
 8009956:	4b6e      	ldr	r3, [pc, #440]	; (8009b10 <gc_execute_block+0x3df0>)
 8009958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995a:	647b      	str	r3, [r7, #68]	; 0x44

    // [4. Set spindle speed ]:
    if(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS) {
 800995c:	4b6c      	ldr	r3, [pc, #432]	; (8009b10 <gc_execute_block+0x3df0>)
 800995e:	7edb      	ldrb	r3, [r3, #27]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d178      	bne.n	8009a56 <gc_execute_block+0x3d36>
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 8009964:	4b6b      	ldr	r3, [pc, #428]	; (8009b14 <gc_execute_block+0x3df4>)
 8009966:	891b      	ldrh	r3, [r3, #8]
 8009968:	2b50      	cmp	r3, #80	; 0x50
 800996a:	d067      	beq.n	8009a3c <gc_execute_block+0x3d1c>
 800996c:	4b69      	ldr	r3, [pc, #420]	; (8009b14 <gc_execute_block+0x3df4>)
 800996e:	891b      	ldrh	r3, [r3, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d063      	beq.n	8009a3c <gc_execute_block+0x3d1c>
            gc_state.spindle.css = &gc_state.spindle.hal->param->css;
 8009974:	4b66      	ldr	r3, [pc, #408]	; (8009b10 <gc_execute_block+0x3df0>)
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	3310      	adds	r3, #16
 800997c:	4a64      	ldr	r2, [pc, #400]	; (8009b10 <gc_execute_block+0x3df0>)
 800997e:	6513      	str	r3, [r2, #80]	; 0x50
            gc_state.spindle.css->axis = plane.axis_1;
 8009980:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8009984:	4b62      	ldr	r3, [pc, #392]	; (8009b10 <gc_execute_block+0x3df0>)
 8009986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009988:	615a      	str	r2, [r3, #20]
            gc_state.spindle.css->tool_offset = gc_get_offset(gc_state.spindle.css->axis);
 800998a:	4b61      	ldr	r3, [pc, #388]	; (8009b10 <gc_execute_block+0x3df0>)
 800998c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998e:	695b      	ldr	r3, [r3, #20]
 8009990:	4a5f      	ldr	r2, [pc, #380]	; (8009b10 <gc_execute_block+0x3df0>)
 8009992:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8009994:	4618      	mov	r0, r3
 8009996:	f7fb fdc9 	bl	800552c <gc_get_offset>
 800999a:	eef0 7a40 	vmov.f32	s15, s0
 800999e:	edc4 7a04 	vstr	s15, [r4, #16]
            float pos = gc_state.position[gc_state.spindle.css->axis] - gc_state.spindle.css->tool_offset;
 80099a2:	4b5b      	ldr	r3, [pc, #364]	; (8009b10 <gc_execute_block+0x3df0>)
 80099a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	4a59      	ldr	r2, [pc, #356]	; (8009b10 <gc_execute_block+0x3df0>)
 80099aa:	3318      	adds	r3, #24
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	ed93 7a00 	vldr	s14, [r3]
 80099b4:	4b56      	ldr	r3, [pc, #344]	; (8009b10 <gc_execute_block+0x3df0>)
 80099b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80099bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099c0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            gc_block.values.s = pos <= 0.0f ? gc_state.spindle.css->max_rpm : min(gc_state.spindle.css->max_rpm, gc_state.spindle.css->surface_speed / (pos * (float)(2.0f * M_PI)));
 80099c4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80099c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80099cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d0:	d804      	bhi.n	80099dc <gc_execute_block+0x3cbc>
 80099d2:	4b4f      	ldr	r3, [pc, #316]	; (8009b10 <gc_execute_block+0x3df0>)
 80099d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80099da:	e025      	b.n	8009a28 <gc_execute_block+0x3d08>
 80099dc:	4b4c      	ldr	r3, [pc, #304]	; (8009b10 <gc_execute_block+0x3df0>)
 80099de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80099e4:	4b4a      	ldr	r3, [pc, #296]	; (8009b10 <gc_execute_block+0x3df0>)
 80099e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e8:	ed93 6a00 	vldr	s12, [r3]
 80099ec:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80099f0:	eddf 6a49 	vldr	s13, [pc, #292]	; 8009b18 <gc_execute_block+0x3df8>
 80099f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80099f8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80099fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a04:	d504      	bpl.n	8009a10 <gc_execute_block+0x3cf0>
 8009a06:	4b42      	ldr	r3, [pc, #264]	; (8009b10 <gc_execute_block+0x3df0>)
 8009a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8009a0e:	e00b      	b.n	8009a28 <gc_execute_block+0x3d08>
 8009a10:	4b3f      	ldr	r3, [pc, #252]	; (8009b10 <gc_execute_block+0x3df0>)
 8009a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a14:	edd3 6a00 	vldr	s13, [r3]
 8009a18:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009a1c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8009b18 <gc_execute_block+0x3df8>
 8009a20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a28:	4b3a      	ldr	r3, [pc, #232]	; (8009b14 <gc_execute_block+0x3df4>)
 8009a2a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            gc_parser_flags.spindle_force_sync = On;
 8009a2e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009a32:	f043 0320 	orr.w	r3, r3, #32
 8009a36:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
        if(gc_block.modal.motion != MotionMode_None && gc_block.modal.motion != MotionMode_Seek) {
 8009a3a:	e00c      	b.n	8009a56 <gc_execute_block+0x3d36>
        } else {
            if(gc_state.spindle.css) {
 8009a3c:	4b34      	ldr	r3, [pc, #208]	; (8009b10 <gc_execute_block+0x3df0>)
 8009a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d004      	beq.n	8009a4e <gc_execute_block+0x3d2e>
                gc_state.spindle.css = NULL;
 8009a44:	4b32      	ldr	r3, [pc, #200]	; (8009b10 <gc_execute_block+0x3df0>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	651a      	str	r2, [r3, #80]	; 0x50
                protocol_buffer_synchronize(); // Empty planner buffer to ensure we get RPM at end of last CSS motion
 8009a4a:	f008 fe9b 	bl	8012784 <protocol_buffer_synchronize>
            }
            gc_block.values.s = gc_state.spindle.rpm; //gc_state.spindle.hal->param->rpm; // Keep current RPM
 8009a4e:	4b30      	ldr	r3, [pc, #192]	; (8009b10 <gc_execute_block+0x3df0>)
 8009a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a52:	4a30      	ldr	r2, [pc, #192]	; (8009b14 <gc_execute_block+0x3df4>)
 8009a54:	65d3      	str	r3, [r2, #92]	; 0x5c
        }
    }

    if(!user_words.s && ((gc_state.spindle.rpm != gc_block.values.s) || gc_parser_flags.spindle_force_sync)) {
 8009a56:	4b31      	ldr	r3, [pc, #196]	; (8009b1c <gc_execute_block+0x3dfc>)
 8009a58:	789b      	ldrb	r3, [r3, #2]
 8009a5a:	f003 0308 	and.w	r3, r3, #8
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d146      	bne.n	8009af2 <gc_execute_block+0x3dd2>
 8009a64:	4b2a      	ldr	r3, [pc, #168]	; (8009b10 <gc_execute_block+0x3df0>)
 8009a66:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8009a6a:	4b2a      	ldr	r3, [pc, #168]	; (8009b14 <gc_execute_block+0x3df4>)
 8009a6c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8009a70:	eeb4 7a67 	vcmp.f32	s14, s15
 8009a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a78:	d106      	bne.n	8009a88 <gc_execute_block+0x3d68>
 8009a7a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d034      	beq.n	8009af2 <gc_execute_block+0x3dd2>
        if(gc_state.modal.spindle.state.on && !gc_parser_flags.laser_is_motion) {
 8009a88:	4b21      	ldr	r3, [pc, #132]	; (8009b10 <gc_execute_block+0x3df0>)
 8009a8a:	7e9b      	ldrb	r3, [r3, #26]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d029      	beq.n	8009aea <gc_execute_block+0x3dca>
 8009a96:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009a9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d122      	bne.n	8009aea <gc_execute_block+0x3dca>
            if(gc_block.spindle) {
 8009aa4:	4b1b      	ldr	r3, [pc, #108]	; (8009b14 <gc_execute_block+0x3df4>)
 8009aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01d      	beq.n	8009aea <gc_execute_block+0x3dca>
                gc_block.spindle->param->rpm = gc_block.values.s;
 8009aae:	4b19      	ldr	r3, [pc, #100]	; (8009b14 <gc_execute_block+0x3df4>)
 8009ab0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4a17      	ldr	r2, [pc, #92]	; (8009b14 <gc_execute_block+0x3df4>)
 8009ab8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009aba:	601a      	str	r2, [r3, #0]
                spindle_sync(gc_block.spindle, gc_state.modal.spindle.state, gc_parser_flags.laser_disable ? 0.0f : gc_block.values.s);
 8009abc:	4b15      	ldr	r3, [pc, #84]	; (8009b14 <gc_execute_block+0x3df4>)
 8009abe:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8009ac2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d103      	bne.n	8009ad8 <gc_execute_block+0x3db8>
 8009ad0:	4b10      	ldr	r3, [pc, #64]	; (8009b14 <gc_execute_block+0x3df4>)
 8009ad2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8009ad6:	e001      	b.n	8009adc <gc_execute_block+0x3dbc>
 8009ad8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8009b20 <gc_execute_block+0x3e00>
 8009adc:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <gc_execute_block+0x3df0>)
 8009ade:	eeb0 0a67 	vmov.f32	s0, s15
 8009ae2:	7e99      	ldrb	r1, [r3, #26]
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	f012 fc03 	bl	801c2f0 <spindle_sync>
            }
            // else... - setting the same rpm for multiple spindles at once is not allowed!
        }
        gc_state.spindle.rpm = gc_block.values.s; // Update spindle speed state.
 8009aea:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <gc_execute_block+0x3df4>)
 8009aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aee:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <gc_execute_block+0x3df0>)
 8009af0:	6493      	str	r3, [r2, #72]	; 0x48
    }

    // NOTE: Pass zero spindle speed for all restricted laser motions.
    if (!gc_parser_flags.laser_disable)
 8009af2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d111      	bne.n	8009b24 <gc_execute_block+0x3e04>
        memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t)); // Record data for planner use.
 8009b00:	4b03      	ldr	r3, [pc, #12]	; (8009b10 <gc_execute_block+0x3df0>)
 8009b02:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8009b06:	3348      	adds	r3, #72	; 0x48
 8009b08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009b0e:	e00c      	b.n	8009b2a <gc_execute_block+0x3e0a>
 8009b10:	2000137c 	.word	0x2000137c
 8009b14:	20001470 	.word	0x20001470
 8009b18:	40c90fdb 	.word	0x40c90fdb
 8009b1c:	2000151c 	.word	0x2000151c
 8009b20:	00000000 	.word	0x00000000
    else {
        plan_data.spindle.hal = gc_state.spindle.hal;
 8009b24:	4ba6      	ldr	r3, [pc, #664]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b28:	657b      	str	r3, [r7, #84]	; 0x54
    //  plan_data.spindle.speed = 0.0f; // Initialized as zero already.
    }

    // [5. Select tool ]: Only tracks tool value if ATC or manual tool change is not possible.
    if(gc_state.tool_pending != gc_block.values.t && !check_mode) {
 8009b2a:	4ba5      	ldr	r3, [pc, #660]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009b2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b2e:	4ba5      	ldr	r3, [pc, #660]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d072      	beq.n	8009c1e <gc_execute_block+0x3efe>
 8009b38:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8009b3c:	f083 0301 	eor.w	r3, r3, #1
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d06b      	beq.n	8009c1e <gc_execute_block+0x3efe>

        tool_data_t *pending_tool = tool_get_pending((gc_state.tool_pending = gc_block.values.t));
 8009b46:	4b9f      	ldr	r3, [pc, #636]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b4c:	4a9c      	ldr	r2, [pc, #624]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b50:	4b9b      	ldr	r3, [pc, #620]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fb feef 	bl	8005938 <tool_get_pending>
 8009b5a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

        // If M6 not available or M61 commanded set new tool immediately
        if(set_tool || settings.tool_change.mode == ToolChange_Ignore || !(hal.stream.suspend_read || hal.tool.change)) {
 8009b5e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10e      	bne.n	8009b84 <gc_execute_block+0x3e64>
 8009b66:	4b98      	ldr	r3, [pc, #608]	; (8009dc8 <gc_execute_block+0x40a8>)
 8009b68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d009      	beq.n	8009b84 <gc_execute_block+0x3e64>
 8009b70:	4b96      	ldr	r3, [pc, #600]	; (8009dcc <gc_execute_block+0x40ac>)
 8009b72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d134      	bne.n	8009be4 <gc_execute_block+0x3ec4>
 8009b7a:	4b94      	ldr	r3, [pc, #592]	; (8009dcc <gc_execute_block+0x40ac>)
 8009b7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d12f      	bne.n	8009be4 <gc_execute_block+0x3ec4>

            tool_set(pending_tool);
 8009b84:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009b88:	f7fb feee 	bl	8005968 <tool_set>

            if(grbl.on_tool_selected) {
 8009b8c:	4b90      	ldr	r3, [pc, #576]	; (8009dd0 <gc_execute_block+0x40b0>)
 8009b8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d016      	beq.n	8009bc4 <gc_execute_block+0x3ea4>

                spindle_state_t state = gc_state.modal.spindle.state;
 8009b96:	4b8a      	ldr	r3, [pc, #552]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009b98:	7e9b      	ldrb	r3, [r3, #26]
 8009b9a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                grbl.on_tool_selected(gc_state.tool);
 8009b9e:	4b8c      	ldr	r3, [pc, #560]	; (8009dd0 <gc_execute_block+0x40b0>)
 8009ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ba4:	4a86      	ldr	r2, [pc, #536]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009ba6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8009baa:	4610      	mov	r0, r2
 8009bac:	4798      	blx	r3

                if(state.value != gc_state.modal.spindle.state.value)
 8009bae:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8009bb2:	4b83      	ldr	r3, [pc, #524]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009bb4:	7e9b      	ldrb	r3, [r3, #26]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d004      	beq.n	8009bc4 <gc_execute_block+0x3ea4>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 8009bba:	4a82      	ldr	r2, [pc, #520]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009bbc:	4b80      	ldr	r3, [pc, #512]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009bbe:	7e9b      	ldrb	r3, [r3, #26]
 8009bc0:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            }

            if(grbl.on_tool_changed)
 8009bc4:	4b82      	ldr	r3, [pc, #520]	; (8009dd0 <gc_execute_block+0x40b0>)
 8009bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <gc_execute_block+0x3ebe>
                grbl.on_tool_changed(gc_state.tool);
 8009bce:	4b80      	ldr	r3, [pc, #512]	; (8009dd0 <gc_execute_block+0x40b0>)
 8009bd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009bd4:	4a7a      	ldr	r2, [pc, #488]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009bd6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8009bda:	4610      	mov	r0, r2
 8009bdc:	4798      	blx	r3

            system_add_rt_report(Report_Tool);
 8009bde:	2080      	movs	r0, #128	; 0x80
 8009be0:	f017 fcf2 	bl	80215c8 <system_add_rt_report>
        }

        // Prepare tool carousel when available
        if(hal.tool.select)
 8009be4:	4b79      	ldr	r3, [pc, #484]	; (8009dcc <gc_execute_block+0x40ac>)
 8009be6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d014      	beq.n	8009c18 <gc_execute_block+0x3ef8>
            hal.tool.select(pending_tool, !set_tool);
 8009bee:	4b77      	ldr	r3, [pc, #476]	; (8009dcc <gc_execute_block+0x40ac>)
 8009bf0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009bf4:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	bf14      	ite	ne
 8009bfc:	2201      	movne	r2, #1
 8009bfe:	2200      	moveq	r2, #0
 8009c00:	b2d2      	uxtb	r2, r2
 8009c02:	f082 0201 	eor.w	r2, r2, #1
 8009c06:	b2d2      	uxtb	r2, r2
 8009c08:	f002 0201 	and.w	r2, r2, #1
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	4611      	mov	r1, r2
 8009c10:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009c14:	4798      	blx	r3
 8009c16:	e002      	b.n	8009c1e <gc_execute_block+0x3efe>
        else
            system_add_rt_report(Report_Tool);
 8009c18:	2080      	movs	r0, #128	; 0x80
 8009c1a:	f017 fcd5 	bl	80215c8 <system_add_rt_report>
    }

    // [5a. HAL pin I/O ]: M62 - M68. (Modal group M10)

    if(port_command) {
 8009c1e:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d064      	beq.n	8009cf0 <gc_execute_block+0x3fd0>

        switch(port_command) {
 8009c26:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8009c2a:	3b3e      	subs	r3, #62	; 0x3e
 8009c2c:	2b06      	cmp	r3, #6
 8009c2e:	d85f      	bhi.n	8009cf0 <gc_execute_block+0x3fd0>
 8009c30:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <gc_execute_block+0x3f18>)
 8009c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c36:	bf00      	nop
 8009c38:	08009c55 	.word	0x08009c55
 8009c3c:	08009c55 	.word	0x08009c55
 8009c40:	08009c5d 	.word	0x08009c5d
 8009c44:	08009c5d 	.word	0x08009c5d
 8009c48:	08009c8d 	.word	0x08009c8d
 8009c4c:	08009cc5 	.word	0x08009cc5
 8009c50:	08009ccd 	.word	0x08009ccd

            case IoMCode_OutputOnSynced:
            case IoMCode_OutputOffSynced:
                add_output_command(&gc_block.output_command);
 8009c54:	485f      	ldr	r0, [pc, #380]	; (8009dd4 <gc_execute_block+0x40b4>)
 8009c56:	f7fb fe99 	bl	800598c <add_output_command>
                break;
 8009c5a:	e049      	b.n	8009cf0 <gc_execute_block+0x3fd0>

            case IoMCode_OutputOnImmediate:
            case IoMCode_OutputOffImmediate:
                hal.port.digital_out(gc_block.output_command.port, gc_block.output_command.value != 0.0f);
 8009c5c:	4b5b      	ldr	r3, [pc, #364]	; (8009dcc <gc_execute_block+0x40ac>)
 8009c5e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009c62:	4a58      	ldr	r2, [pc, #352]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009c64:	f892 209a 	ldrb.w	r2, [r2, #154]	; 0x9a
 8009c68:	4956      	ldr	r1, [pc, #344]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009c6a:	f8d1 109c 	ldr.w	r1, [r1, #156]	; 0x9c
 8009c6e:	ee07 1a90 	vmov	s15, r1
 8009c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7e:	bf14      	ite	ne
 8009c80:	2101      	movne	r1, #1
 8009c82:	2100      	moveq	r1, #0
 8009c84:	b2c9      	uxtb	r1, r1
 8009c86:	4610      	mov	r0, r2
 8009c88:	4798      	blx	r3
                break;
 8009c8a:	e031      	b.n	8009cf0 <gc_execute_block+0x3fd0>

            case IoMCode_WaitOnInput:
                sys.var5399 = hal.port.wait_on_input((io_port_type_t)gc_block.output_command.is_digital, gc_block.output_command.port, (wait_mode_t)gc_block.values.l, gc_block.values.q);
 8009c8c:	4b4f      	ldr	r3, [pc, #316]	; (8009dcc <gc_execute_block+0x40ac>)
 8009c8e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8009c92:	4a4c      	ldr	r2, [pc, #304]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009c94:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 8009c98:	4614      	mov	r4, r2
 8009c9a:	4a4a      	ldr	r2, [pc, #296]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009c9c:	f892 109a 	ldrb.w	r1, [r2, #154]	; 0x9a
 8009ca0:	4a48      	ldr	r2, [pc, #288]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009ca2:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 8009ca6:	4847      	ldr	r0, [pc, #284]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009ca8:	edd0 7a15 	vldr	s15, [r0, #84]	; 0x54
 8009cac:	eeb0 0a67 	vmov.f32	s0, s15
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4798      	blx	r3
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	4a48      	ldr	r2, [pc, #288]	; (8009dd8 <gc_execute_block+0x40b8>)
 8009cb8:	6513      	str	r3, [r2, #80]	; 0x50
                system_add_rt_report(Report_M66Result);
 8009cba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009cbe:	f017 fc83 	bl	80215c8 <system_add_rt_report>
                break;
 8009cc2:	e015      	b.n	8009cf0 <gc_execute_block+0x3fd0>

            case IoMCode_AnalogOutSynced:
                add_output_command(&gc_block.output_command);
 8009cc4:	4843      	ldr	r0, [pc, #268]	; (8009dd4 <gc_execute_block+0x40b4>)
 8009cc6:	f7fb fe61 	bl	800598c <add_output_command>
                break;
 8009cca:	e011      	b.n	8009cf0 <gc_execute_block+0x3fd0>

            case IoMCode_AnalogOutImmediate:
                hal.port.analog_out(gc_block.output_command.port, gc_block.output_command.value);
 8009ccc:	4b3f      	ldr	r3, [pc, #252]	; (8009dcc <gc_execute_block+0x40ac>)
 8009cce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8009cd2:	4a3c      	ldr	r2, [pc, #240]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009cd4:	f892 209a 	ldrb.w	r2, [r2, #154]	; 0x9a
 8009cd8:	493a      	ldr	r1, [pc, #232]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009cda:	f8d1 109c 	ldr.w	r1, [r1, #156]	; 0x9c
 8009cde:	ee07 1a90 	vmov	s15, r1
 8009ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8009cea:	4610      	mov	r0, r2
 8009cec:	4798      	blx	r3
                break;
 8009cee:	bf00      	nop
        }
    }

    // [6. Change tool ]: Delegated to (possible) driver implementation
    if (command_words.M6 && !set_tool && !check_mode) {
 8009cf0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8094 	beq.w	8009e28 <gc_execute_block+0x4108>
 8009d00:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8009d04:	f083 0301 	eor.w	r3, r3, #1
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 808c 	beq.w	8009e28 <gc_execute_block+0x4108>
 8009d10:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8009d14:	f083 0301 	eor.w	r3, r3, #1
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 8084 	beq.w	8009e28 <gc_execute_block+0x4108>

        tool_data_t *pending_tool = tool_get_pending(gc_state.tool_pending);
 8009d20:	4b27      	ldr	r3, [pc, #156]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fb fe07 	bl	8005938 <tool_get_pending>
 8009d2a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

        protocol_buffer_synchronize();
 8009d2e:	f008 fd29 	bl	8012784 <protocol_buffer_synchronize>

        if(plan_data.message) {
 8009d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d005      	beq.n	8009d44 <gc_execute_block+0x4024>
            output_message(plan_data.message);
 8009d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fb fedc 	bl	8005af8 <output_message>
            plan_data.message = NULL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	667b      	str	r3, [r7, #100]	; 0x64
        }

        if(pending_tool->tool_id != gc_state.tool->tool_id) {
 8009d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d48:	691a      	ldr	r2, [r3, #16]
 8009d4a:	4b1d      	ldr	r3, [pc, #116]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d068      	beq.n	8009e28 <gc_execute_block+0x4108>

            if(grbl.on_tool_selected) {
 8009d56:	4b1e      	ldr	r3, [pc, #120]	; (8009dd0 <gc_execute_block+0x40b0>)
 8009d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d014      	beq.n	8009d8a <gc_execute_block+0x406a>

                spindle_state_t state = gc_state.modal.spindle.state;
 8009d60:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009d62:	7e9b      	ldrb	r3, [r3, #26]
 8009d64:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

                grbl.on_tool_selected(pending_tool);
 8009d68:	4b19      	ldr	r3, [pc, #100]	; (8009dd0 <gc_execute_block+0x40b0>)
 8009d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d6e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009d72:	4798      	blx	r3

                if(state.value != gc_state.modal.spindle.state.value)
 8009d74:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8009d78:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009d7a:	7e9b      	ldrb	r3, [r3, #26]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d004      	beq.n	8009d8a <gc_execute_block+0x406a>
                    gc_block.modal.spindle.state = gc_state.modal.spindle.state;
 8009d80:	4a10      	ldr	r2, [pc, #64]	; (8009dc4 <gc_execute_block+0x40a4>)
 8009d82:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009d84:	7e9b      	ldrb	r3, [r3, #26]
 8009d86:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            }

            if(hal.tool.change) { // ATC
 8009d8a:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <gc_execute_block+0x40ac>)
 8009d8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d023      	beq.n	8009ddc <gc_execute_block+0x40bc>
                if((int_value = (uint_fast16_t)hal.tool.change(&gc_state)) != Status_OK) {
 8009d94:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <gc_execute_block+0x40ac>)
 8009d96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009d9a:	4809      	ldr	r0, [pc, #36]	; (8009dc0 <gc_execute_block+0x40a0>)
 8009d9c:	4798      	blx	r3
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009da4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <gc_execute_block+0x4096>
#if NGC_EXPRESSIONS_ENABLE
                    if(int_value != Status_Unhandled)
#endif
                        FAIL((status_code_t)int_value);
 8009dac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	f000 bf91 	b.w	800acd8 <gc_execute_block+0x4fb8>
                }
                system_add_rt_report(Report_Tool);
 8009db6:	2080      	movs	r0, #128	; 0x80
 8009db8:	f017 fc06 	bl	80215c8 <system_add_rt_report>
 8009dbc:	e01d      	b.n	8009dfa <gc_execute_block+0x40da>
 8009dbe:	bf00      	nop
 8009dc0:	2000137c 	.word	0x2000137c
 8009dc4:	20001470 	.word	0x20001470
 8009dc8:	20001cf0 	.word	0x20001cf0
 8009dcc:	200016a0 	.word	0x200016a0
 8009dd0:	200015b8 	.word	0x200015b8
 8009dd4:	20001508 	.word	0x20001508
 8009dd8:	20001520 	.word	0x20001520
            } else { // Manual
                int_value = (uint_fast16_t)Status_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                gc_state.tool_change = true;
 8009de2:	4b5c      	ldr	r3, [pc, #368]	; (8009f54 <gc_execute_block+0x4234>)
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
                system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 8009dea:	4b5b      	ldr	r3, [pc, #364]	; (8009f58 <gc_execute_block+0x4238>)
 8009dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009df2:	485a      	ldr	r0, [pc, #360]	; (8009f5c <gc_execute_block+0x423c>)
 8009df4:	4798      	blx	r3
                protocol_execute_realtime();                    // Execute...
 8009df6:	f008 fcf5 	bl	80127e4 <protocol_execute_realtime>
                gc_state.g43_pending = gc_block.values.h;
                command_words.G8 = Off;
            }
  #endif
#else
            tool_set(pending_tool);
 8009dfa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8009dfe:	f7fb fdb3 	bl	8005968 <tool_set>
#endif
            if(grbl.on_tool_changed && state_get() != STATE_TOOL_CHANGE)
 8009e02:	4b57      	ldr	r3, [pc, #348]	; (8009f60 <gc_execute_block+0x4240>)
 8009e04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00d      	beq.n	8009e28 <gc_execute_block+0x4108>
 8009e0c:	f012 ff88 	bl	801cd20 <state_get>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e16:	d007      	beq.n	8009e28 <gc_execute_block+0x4108>
                grbl.on_tool_changed(gc_state.tool);
 8009e18:	4b51      	ldr	r3, [pc, #324]	; (8009f60 <gc_execute_block+0x4240>)
 8009e1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e1e:	4a4d      	ldr	r2, [pc, #308]	; (8009f54 <gc_execute_block+0x4234>)
 8009e20:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
        }
    }

    // [7. Spindle control ]:
    if (gc_state.modal.spindle.state.value != gc_block.modal.spindle.state.value) {
 8009e28:	4b4a      	ldr	r3, [pc, #296]	; (8009f54 <gc_execute_block+0x4234>)
 8009e2a:	7e9a      	ldrb	r2, [r3, #26]
 8009e2c:	4b4d      	ldr	r3, [pc, #308]	; (8009f64 <gc_execute_block+0x4244>)
 8009e2e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d05f      	beq.n	8009ef6 <gc_execute_block+0x41d6>
        // Update spindle control and apply spindle speed when enabling it in this block.
        // NOTE: All spindle state changes are synced, even in laser mode. Also, plan_data,
        // rather than gc_state, is used to manage laser state for non-laser motions.
        if(gc_block.spindle) {
 8009e36:	4b4b      	ldr	r3, [pc, #300]	; (8009f64 <gc_execute_block+0x4244>)
 8009e38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01c      	beq.n	8009e7a <gc_execute_block+0x415a>
            if((spindle_programmed = spindle_sync(gc_block.spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm)))
 8009e40:	4b48      	ldr	r3, [pc, #288]	; (8009f64 <gc_execute_block+0x4244>)
 8009e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e46:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009e4a:	4a46      	ldr	r2, [pc, #280]	; (8009f64 <gc_execute_block+0x4244>)
 8009e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8009e50:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 8009e54:	4618      	mov	r0, r3
 8009e56:	f012 fa4b 	bl	801c2f0 <spindle_sync>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 8009e60:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d03d      	beq.n	8009ee4 <gc_execute_block+0x41c4>
                gc_block.spindle->param->state = gc_block.modal.spindle.state;
 8009e68:	4b3e      	ldr	r3, [pc, #248]	; (8009f64 <gc_execute_block+0x4244>)
 8009e6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	4a3c      	ldr	r2, [pc, #240]	; (8009f64 <gc_execute_block+0x4244>)
 8009e72:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8009e76:	721a      	strb	r2, [r3, #8]
 8009e78:	e034      	b.n	8009ee4 <gc_execute_block+0x41c4>
        } else {
            idx = N_SYS_SPINDLE;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            do {
                if(spindle_is_enabled(--idx)) {
 8009e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e84:	3b01      	subs	r3, #1
 8009e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e8e:	b25b      	sxtb	r3, r3
 8009e90:	4618      	mov	r0, r3
 8009e92:	f012 f873 	bl	801bf7c <spindle_is_enabled>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01f      	beq.n	8009edc <gc_execute_block+0x41bc>
                    spindle_ptrs_t *spindle = spindle_get(idx);
 8009e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ea0:	b25b      	sxtb	r3, r3
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f012 f898 	bl	801bfd8 <spindle_get>
 8009ea8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                    if(spindle_sync(spindle, gc_block.modal.spindle.state, plan_data.spindle.rpm)) {
 8009eac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009eb0:	4b2c      	ldr	r3, [pc, #176]	; (8009f64 <gc_execute_block+0x4244>)
 8009eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8009eb6:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8009eba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009ebe:	f012 fa17 	bl	801c2f0 <spindle_sync>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d009      	beq.n	8009edc <gc_execute_block+0x41bc>
                        spindle_programmed = true;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
                        spindle->param->state = gc_block.modal.spindle.state;
 8009ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	4a23      	ldr	r2, [pc, #140]	; (8009f64 <gc_execute_block+0x4244>)
 8009ed6:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8009eda:	721a      	strb	r2, [r3, #8]
                    }
                }
            } while(idx);
 8009edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1cd      	bne.n	8009e80 <gc_execute_block+0x4160>
        }
        if(spindle_programmed)
 8009ee4:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <gc_execute_block+0x41d6>
            gc_state.modal.spindle.state = gc_block.modal.spindle.state;
 8009eec:	4a19      	ldr	r2, [pc, #100]	; (8009f54 <gc_execute_block+0x4234>)
 8009eee:	4b1d      	ldr	r3, [pc, #116]	; (8009f64 <gc_execute_block+0x4244>)
 8009ef0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009ef4:	7693      	strb	r3, [r2, #26]
    }

    // TODO: add spindle argument and move into loop above?
    if(spindle_programmed && grbl.on_spindle_programmed)
 8009ef6:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d011      	beq.n	8009f22 <gc_execute_block+0x4202>
 8009efe:	4b18      	ldr	r3, [pc, #96]	; (8009f60 <gc_execute_block+0x4240>)
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00d      	beq.n	8009f22 <gc_execute_block+0x4202>
        grbl.on_spindle_programmed(gc_state.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm, gc_state.modal.spindle.rpm_mode);
 8009f06:	4b16      	ldr	r3, [pc, #88]	; (8009f60 <gc_execute_block+0x4240>)
 8009f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0a:	4a12      	ldr	r2, [pc, #72]	; (8009f54 <gc_execute_block+0x4234>)
 8009f0c:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8009f0e:	4a11      	ldr	r2, [pc, #68]	; (8009f54 <gc_execute_block+0x4234>)
 8009f10:	edd2 7a12 	vldr	s15, [r2, #72]	; 0x48
 8009f14:	4a0f      	ldr	r2, [pc, #60]	; (8009f54 <gc_execute_block+0x4234>)
 8009f16:	7ed2      	ldrb	r2, [r2, #27]
 8009f18:	490e      	ldr	r1, [pc, #56]	; (8009f54 <gc_execute_block+0x4234>)
 8009f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f1e:	7e89      	ldrb	r1, [r1, #26]
 8009f20:	4798      	blx	r3

// TODO: Recheck spindle running in CCS mode (is_rpm_pos_adjusted == On)?

    plan_data.spindle.state = gc_state.modal.spindle.state; // Set condition flag for planner use.
 8009f22:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <gc_execute_block+0x4234>)
 8009f24:	7e9b      	ldrb	r3, [r3, #26]
 8009f26:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    plan_data.condition.is_rpm_rate_adjusted = gc_state.is_rpm_rate_adjusted;
 8009f2a:	4b0a      	ldr	r3, [pc, #40]	; (8009f54 <gc_execute_block+0x4234>)
 8009f2c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8009f30:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009f34:	f362 1386 	bfi	r3, r2, #6, #1
 8009f38:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
    plan_data.condition.is_laser_ppi_mode = gc_state.is_rpm_rate_adjusted && gc_state.is_laser_ppi_mode;
 8009f3c:	4b05      	ldr	r3, [pc, #20]	; (8009f54 <gc_execute_block+0x4234>)
 8009f3e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d010      	beq.n	8009f68 <gc_execute_block+0x4248>
 8009f46:	4b03      	ldr	r3, [pc, #12]	; (8009f54 <gc_execute_block+0x4234>)
 8009f48:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00b      	beq.n	8009f68 <gc_execute_block+0x4248>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e00a      	b.n	8009f6a <gc_execute_block+0x424a>
 8009f54:	2000137c 	.word	0x2000137c
 8009f58:	200016a0 	.word	0x200016a0
 8009f5c:	20001568 	.word	0x20001568
 8009f60:	200015b8 	.word	0x200015b8
 8009f64:	20001470 	.word	0x20001470
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009f74:	f362 13c7 	bfi	r3, r2, #7, #1
 8009f78:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

    // [8. Coolant control ]:
    if (gc_parser_flags.set_coolant && gc_state.modal.coolant.value != gc_block.modal.coolant.value) {
 8009f7c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d013      	beq.n	8009fb2 <gc_execute_block+0x4292>
 8009f8a:	4b9f      	ldr	r3, [pc, #636]	; (800a208 <gc_execute_block+0x44e8>)
 8009f8c:	7e5a      	ldrb	r2, [r3, #25]
 8009f8e:	4b9f      	ldr	r3, [pc, #636]	; (800a20c <gc_execute_block+0x44ec>)
 8009f90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d00c      	beq.n	8009fb2 <gc_execute_block+0x4292>
    // NOTE: Coolant M-codes are modal. Only one command per line is allowed. But, multiple states
    // can exist at the same time, while coolant disable clears all states.
        if(coolant_sync(gc_block.modal.coolant))
 8009f98:	4b9c      	ldr	r3, [pc, #624]	; (800a20c <gc_execute_block+0x44ec>)
 8009f9a:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8009f9e:	f7fb f91f 	bl	80051e0 <coolant_sync>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d004      	beq.n	8009fb2 <gc_execute_block+0x4292>
            gc_state.modal.coolant = gc_block.modal.coolant;
 8009fa8:	4a97      	ldr	r2, [pc, #604]	; (800a208 <gc_execute_block+0x44e8>)
 8009faa:	4b98      	ldr	r3, [pc, #608]	; (800a20c <gc_execute_block+0x44ec>)
 8009fac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009fb0:	7653      	strb	r3, [r2, #25]
    }

    plan_data.condition.coolant = gc_state.modal.coolant; // Set condition flag for planner use.
 8009fb2:	4b95      	ldr	r3, [pc, #596]	; (800a208 <gc_execute_block+0x44e8>)
 8009fb4:	7e5b      	ldrb	r3, [r3, #25]
 8009fb6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

    sys.override_delay.flags = 0;
 8009fba:	4b95      	ldr	r3, [pc, #596]	; (800a210 <gc_execute_block+0x44f0>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    // [9. Override control ]:
    if (gc_state.modal.override_ctrl.value != gc_block.modal.override_ctrl.value) {
 8009fc2:	4b91      	ldr	r3, [pc, #580]	; (800a208 <gc_execute_block+0x44e8>)
 8009fc4:	7f1a      	ldrb	r2, [r3, #28]
 8009fc6:	4b91      	ldr	r3, [pc, #580]	; (800a20c <gc_execute_block+0x44ec>)
 8009fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d035      	beq.n	800a03c <gc_execute_block+0x431c>

        gc_state.modal.override_ctrl = gc_block.modal.override_ctrl;
 8009fd0:	4a8d      	ldr	r2, [pc, #564]	; (800a208 <gc_execute_block+0x44e8>)
 8009fd2:	4b8e      	ldr	r3, [pc, #568]	; (800a20c <gc_execute_block+0x44ec>)
 8009fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fd8:	7713      	strb	r3, [r2, #28]
        gc_state.modal.spindle.state.override_disable = gc_state.spindle.hal->param->state.override_disable = gc_state.modal.override_ctrl.spindle_rpm_disable;
 8009fda:	4b8b      	ldr	r3, [pc, #556]	; (800a208 <gc_execute_block+0x44e8>)
 8009fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	4a89      	ldr	r2, [pc, #548]	; (800a208 <gc_execute_block+0x44e8>)
 8009fe2:	7f12      	ldrb	r2, [r2, #28]
 8009fe4:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8009fe8:	b2d1      	uxtb	r1, r2
 8009fea:	7a1a      	ldrb	r2, [r3, #8]
 8009fec:	f361 1204 	bfi	r2, r1, #4, #1
 8009ff0:	721a      	strb	r2, [r3, #8]
 8009ff2:	7a1b      	ldrb	r3, [r3, #8]
 8009ff4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009ff8:	b2d9      	uxtb	r1, r3
 8009ffa:	4a83      	ldr	r2, [pc, #524]	; (800a208 <gc_execute_block+0x44e8>)
 8009ffc:	7e93      	ldrb	r3, [r2, #26]
 8009ffe:	f361 1304 	bfi	r3, r1, #4, #1
 800a002:	7693      	strb	r3, [r2, #26]

        if(gc_state.modal.override_ctrl.feed_rate_disable)
 800a004:	4b80      	ldr	r3, [pc, #512]	; (800a208 <gc_execute_block+0x44e8>)
 800a006:	7f1b      	ldrb	r3, [r3, #28]
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <gc_execute_block+0x42fa>
            plan_feed_override(0, 0);
 800a012:	2100      	movs	r1, #0
 800a014:	2000      	movs	r0, #0
 800a016:	f007 feb5 	bl	8011d84 <plan_feed_override>

        if(gc_state.modal.override_ctrl.spindle_rpm_disable)
 800a01a:	4b7b      	ldr	r3, [pc, #492]	; (800a208 <gc_execute_block+0x44e8>)
 800a01c:	7f1b      	ldrb	r3, [r3, #28]
 800a01e:	f003 0304 	and.w	r3, r3, #4
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	d005      	beq.n	800a034 <gc_execute_block+0x4314>
            spindle_set_override(gc_state.spindle.hal, DEFAULT_SPINDLE_RPM_OVERRIDE);
 800a028:	4b77      	ldr	r3, [pc, #476]	; (800a208 <gc_execute_block+0x44e8>)
 800a02a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a02c:	2164      	movs	r1, #100	; 0x64
 800a02e:	4618      	mov	r0, r3
 800a030:	f012 f872 	bl	801c118 <spindle_set_override>

        mc_override_ctrl_update(gc_state.modal.override_ctrl); // NOTE: must be called last!
 800a034:	4b74      	ldr	r3, [pc, #464]	; (800a208 <gc_execute_block+0x44e8>)
 800a036:	7f18      	ldrb	r0, [r3, #28]
 800a038:	f005 f842 	bl	800f0c0 <mc_override_ctrl_update>
    }

    // [9a. User defined M commands ]:
    if(gc_block.user_mcode && !check_mode) {
 800a03c:	4b73      	ldr	r3, [pc, #460]	; (800a20c <gc_execute_block+0x44ec>)
 800a03e:	885b      	ldrh	r3, [r3, #2]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d01e      	beq.n	800a082 <gc_execute_block+0x4362>
 800a044:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800a048:	f083 0301 	eor.w	r3, r3, #1
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d017      	beq.n	800a082 <gc_execute_block+0x4362>

        if(gc_block.user_mcode_sync)
 800a052:	4b6e      	ldr	r3, [pc, #440]	; (800a20c <gc_execute_block+0x44ec>)
 800a054:	791b      	ldrb	r3, [r3, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <gc_execute_block+0x433e>
            protocol_buffer_synchronize(); // Ensure user defined mcode is executed when specified in program.
 800a05a:	f008 fb93 	bl	8012784 <protocol_buffer_synchronize>
        gc_block.words.mask = user_words.mask;
 800a05e:	4b6d      	ldr	r3, [pc, #436]	; (800a214 <gc_execute_block+0x44f4>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a6a      	ldr	r2, [pc, #424]	; (800a20c <gc_execute_block+0x44ec>)
 800a064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        hal.user_mcode.execute(state_get(), &gc_block);
 800a068:	4b6b      	ldr	r3, [pc, #428]	; (800a218 <gc_execute_block+0x44f8>)
 800a06a:	f8d3 4190 	ldr.w	r4, [r3, #400]	; 0x190
 800a06e:	f012 fe57 	bl	801cd20 <state_get>
 800a072:	4603      	mov	r3, r0
 800a074:	4965      	ldr	r1, [pc, #404]	; (800a20c <gc_execute_block+0x44ec>)
 800a076:	4618      	mov	r0, r3
 800a078:	47a0      	blx	r4
        gc_block.words.mask = 0;
 800a07a:	4b64      	ldr	r3, [pc, #400]	; (800a20c <gc_execute_block+0x44ec>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    // [10. Dwell ]:
    if (gc_block.non_modal_command == NonModal_Dwell)
 800a082:	4b62      	ldr	r3, [pc, #392]	; (800a20c <gc_execute_block+0x44ec>)
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b04      	cmp	r3, #4
 800a088:	d106      	bne.n	800a098 <gc_execute_block+0x4378>
        mc_dwell(gc_block.values.p);
 800a08a:	4b60      	ldr	r3, [pc, #384]	; (800a20c <gc_execute_block+0x44ec>)
 800a08c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a090:	eeb0 0a67 	vmov.f32	s0, s15
 800a094:	f004 fcd6 	bl	800ea44 <mc_dwell>

    // [11. Set active plane ]:
    gc_state.modal.plane_select = gc_block.modal.plane_select;
 800a098:	4b5c      	ldr	r3, [pc, #368]	; (800a20c <gc_execute_block+0x44ec>)
 800a09a:	7b9a      	ldrb	r2, [r3, #14]
 800a09c:	4b5a      	ldr	r3, [pc, #360]	; (800a208 <gc_execute_block+0x44e8>)
 800a09e:	719a      	strb	r2, [r3, #6]

    // [12. Set length units ]:
    gc_state.modal.units_imperial = gc_block.modal.units_imperial;
 800a0a0:	4b5a      	ldr	r3, [pc, #360]	; (800a20c <gc_execute_block+0x44ec>)
 800a0a2:	7ada      	ldrb	r2, [r3, #11]
 800a0a4:	4b58      	ldr	r3, [pc, #352]	; (800a208 <gc_execute_block+0x44e8>)
 800a0a6:	70da      	strb	r2, [r3, #3]

    // [14. Tool length compensation ]: G43, G43.1 and G49 supported. G43 supported when N_TOOLS defined.
    // NOTE: If G43 were supported, its operation wouldn't be any different from G43.1 in terms
    // of execution. The error-checking step would simply load the offset value into the correct
    // axis of the block XYZ value array.
    if (command_words.G8) { // Indicates a change.
 800a0a8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d078      	beq.n	800a1a8 <gc_execute_block+0x4488>

        bool tlo_changed = false;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

        idx = N_AXIS;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        gc_state.modal.tool_offset_mode = gc_block.modal.tool_offset_mode;
 800a0c2:	4b52      	ldr	r3, [pc, #328]	; (800a20c <gc_execute_block+0x44ec>)
 800a0c4:	7bda      	ldrb	r2, [r3, #15]
 800a0c6:	4b50      	ldr	r3, [pc, #320]	; (800a208 <gc_execute_block+0x44e8>)
 800a0c8:	71da      	strb	r2, [r3, #7]

        do {

            idx--;
 800a0ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            switch(gc_state.modal.tool_offset_mode) {
 800a0d4:	4b4c      	ldr	r3, [pc, #304]	; (800a208 <gc_execute_block+0x44e8>)
 800a0d6:	79db      	ldrb	r3, [r3, #7]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <gc_execute_block+0x43c2>
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d023      	beq.n	800a128 <gc_execute_block+0x4408>
                        gc_state.tool_length_offset[idx] = gc_block.values.xyz[idx];
                    }
                    break;

                default:
                    break;
 800a0e0:	e054      	b.n	800a18c <gc_execute_block+0x446c>
                    tlo_changed |= gc_state.tool_length_offset[idx] != 0.0f;
 800a0e2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800a0e6:	4948      	ldr	r1, [pc, #288]	; (800a208 <gc_execute_block+0x44e8>)
 800a0e8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a0ec:	3222      	adds	r2, #34	; 0x22
 800a0ee:	0092      	lsls	r2, r2, #2
 800a0f0:	440a      	add	r2, r1
 800a0f2:	edd2 7a00 	vldr	s15, [r2]
 800a0f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fe:	bf14      	ite	ne
 800a100:	2201      	movne	r2, #1
 800a102:	2200      	moveq	r2, #0
 800a104:	b2d2      	uxtb	r2, r2
 800a106:	4313      	orrs	r3, r2
 800a108:	2b00      	cmp	r3, #0
 800a10a:	bf14      	ite	ne
 800a10c:	2301      	movne	r3, #1
 800a10e:	2300      	moveq	r3, #0
 800a110:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
                    gc_state.tool_length_offset[idx] = 0.0f;
 800a114:	4a3c      	ldr	r2, [pc, #240]	; (800a208 <gc_execute_block+0x44e8>)
 800a116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a11a:	3322      	adds	r3, #34	; 0x22
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	f04f 0200 	mov.w	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
                    break;
 800a126:	e031      	b.n	800a18c <gc_execute_block+0x446c>
                    if (bit_istrue(axis_words.mask, bit(idx)) && gc_state.tool_length_offset[idx] != gc_block.values.xyz[idx]) {
 800a128:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800a12c:	461a      	mov	r2, r3
 800a12e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a132:	fa22 f303 	lsr.w	r3, r2, r3
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d025      	beq.n	800a18a <gc_execute_block+0x446a>
 800a13e:	4a32      	ldr	r2, [pc, #200]	; (800a208 <gc_execute_block+0x44e8>)
 800a140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a144:	3322      	adds	r3, #34	; 0x22
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	ed93 7a00 	vldr	s14, [r3]
 800a14e:	4a2f      	ldr	r2, [pc, #188]	; (800a20c <gc_execute_block+0x44ec>)
 800a150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a154:	3318      	adds	r3, #24
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	edd3 7a00 	vldr	s15, [r3]
 800a15e:	eeb4 7a67 	vcmp.f32	s14, s15
 800a162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a166:	d010      	beq.n	800a18a <gc_execute_block+0x446a>
                        tlo_changed = true;
 800a168:	2301      	movs	r3, #1
 800a16a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
                        gc_state.tool_length_offset[idx] = gc_block.values.xyz[idx];
 800a16e:	4a27      	ldr	r2, [pc, #156]	; (800a20c <gc_execute_block+0x44ec>)
 800a170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a174:	3318      	adds	r3, #24
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	4922      	ldr	r1, [pc, #136]	; (800a208 <gc_execute_block+0x44e8>)
 800a17e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a182:	3322      	adds	r3, #34	; 0x22
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	440b      	add	r3, r1
 800a188:	601a      	str	r2, [r3, #0]
                    break;
 800a18a:	bf00      	nop
            }
        } while(idx);
 800a18c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a190:	2b00      	cmp	r3, #0
 800a192:	d19a      	bne.n	800a0ca <gc_execute_block+0x43aa>

        if(tlo_changed) {
 800a194:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <gc_execute_block+0x4488>
            system_add_rt_report(Report_ToolOffset);
 800a19c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a1a0:	f017 fa12 	bl	80215c8 <system_add_rt_report>
            system_flag_wco_change();
 800a1a4:	f017 f90a 	bl	80213bc <system_flag_wco_change>
        }
    }

    // [15. Coordinate system selection ]:
    if (gc_state.modal.coord_system.id != gc_block.modal.coord_system.id) {
 800a1a8:	4b17      	ldr	r3, [pc, #92]	; (800a208 <gc_execute_block+0x44e8>)
 800a1aa:	7d1a      	ldrb	r2, [r3, #20]
 800a1ac:	4b17      	ldr	r3, [pc, #92]	; (800a20c <gc_execute_block+0x44ec>)
 800a1ae:	7f1b      	ldrb	r3, [r3, #28]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d00d      	beq.n	800a1d0 <gc_execute_block+0x44b0>
        memcpy(&gc_state.modal.coord_system, &gc_block.modal.coord_system, sizeof(gc_state.modal.coord_system));
 800a1b4:	4a14      	ldr	r2, [pc, #80]	; (800a208 <gc_execute_block+0x44e8>)
 800a1b6:	4b15      	ldr	r3, [pc, #84]	; (800a20c <gc_execute_block+0x44ec>)
 800a1b8:	f102 0408 	add.w	r4, r2, #8
 800a1bc:	3310      	adds	r3, #16
 800a1be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a1c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        system_add_rt_report(Report_GWCO);
 800a1c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a1c8:	f017 f9fe 	bl	80215c8 <system_add_rt_report>
        system_flag_wco_change();
 800a1cc:	f017 f8f6 	bl	80213bc <system_flag_wco_change>

    // [16. Set path control mode ]: G61.1/G64 NOT SUPPORTED
    // gc_state.modal.control = gc_block.modal.control; // NOTE: Always default.

    // [17. Set distance mode ]:
    gc_state.modal.distance_incremental = gc_block.modal.distance_incremental;
 800a1d0:	4b0e      	ldr	r3, [pc, #56]	; (800a20c <gc_execute_block+0x44ec>)
 800a1d2:	7b1a      	ldrb	r2, [r3, #12]
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <gc_execute_block+0x44e8>)
 800a1d6:	711a      	strb	r2, [r3, #4]

    // [18. Set retract mode ]:
    gc_state.modal.retract_mode = gc_block.modal.retract_mode;
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <gc_execute_block+0x44ec>)
 800a1da:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800a1de:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <gc_execute_block+0x44e8>)
 800a1e0:	775a      	strb	r2, [r3, #29]

    // [19. Go to predefined position, Set G10, or Set axis offsets ]:
    switch(gc_block.non_modal_command) {
 800a1e2:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <gc_execute_block+0x44ec>)
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	2b7a      	cmp	r3, #122	; 0x7a
 800a1e8:	f300 815b 	bgt.w	800a4a2 <gc_execute_block+0x4782>
 800a1ec:	2b5c      	cmp	r3, #92	; 0x5c
 800a1ee:	da15      	bge.n	800a21c <gc_execute_block+0x44fc>
 800a1f0:	2b0a      	cmp	r3, #10
 800a1f2:	f000 80ad 	beq.w	800a350 <gc_execute_block+0x4630>
 800a1f6:	2b0a      	cmp	r3, #10
 800a1f8:	f2c0 8153 	blt.w	800a4a2 <gc_execute_block+0x4782>
 800a1fc:	2b41      	cmp	r3, #65	; 0x41
 800a1fe:	f300 8150 	bgt.w	800a4a2 <gc_execute_block+0x4782>
 800a202:	2b1c      	cmp	r3, #28
 800a204:	da50      	bge.n	800a2a8 <gc_execute_block+0x4588>
            settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Restore G92 offsets from non-volatile storage
            system_flag_wco_change();
            break;

        default:
            break;
 800a206:	e14c      	b.n	800a4a2 <gc_execute_block+0x4782>
 800a208:	2000137c 	.word	0x2000137c
 800a20c:	20001470 	.word	0x20001470
 800a210:	20001520 	.word	0x20001520
 800a214:	2000151c 	.word	0x2000151c
 800a218:	200016a0 	.word	0x200016a0
    switch(gc_block.non_modal_command) {
 800a21c:	3b5c      	subs	r3, #92	; 0x5c
 800a21e:	2b1e      	cmp	r3, #30
 800a220:	f200 813f 	bhi.w	800a4a2 <gc_execute_block+0x4782>
 800a224:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <gc_execute_block+0x450c>)
 800a226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22a:	bf00      	nop
 800a22c:	0800a411 	.word	0x0800a411
 800a230:	0800a4a3 	.word	0x0800a4a3
 800a234:	0800a4a3 	.word	0x0800a4a3
 800a238:	0800a4a3 	.word	0x0800a4a3
 800a23c:	0800a4a3 	.word	0x0800a4a3
 800a240:	0800a4a3 	.word	0x0800a4a3
 800a244:	0800a4a3 	.word	0x0800a4a3
 800a248:	0800a4a3 	.word	0x0800a4a3
 800a24c:	0800a4a3 	.word	0x0800a4a3
 800a250:	0800a4a3 	.word	0x0800a4a3
 800a254:	0800a445 	.word	0x0800a445
 800a258:	0800a4a3 	.word	0x0800a4a3
 800a25c:	0800a4a3 	.word	0x0800a4a3
 800a260:	0800a4a3 	.word	0x0800a4a3
 800a264:	0800a4a3 	.word	0x0800a4a3
 800a268:	0800a4a3 	.word	0x0800a4a3
 800a26c:	0800a4a3 	.word	0x0800a4a3
 800a270:	0800a4a3 	.word	0x0800a4a3
 800a274:	0800a4a3 	.word	0x0800a4a3
 800a278:	0800a4a3 	.word	0x0800a4a3
 800a27c:	0800a475 	.word	0x0800a475
 800a280:	0800a4a3 	.word	0x0800a4a3
 800a284:	0800a4a3 	.word	0x0800a4a3
 800a288:	0800a4a3 	.word	0x0800a4a3
 800a28c:	0800a4a3 	.word	0x0800a4a3
 800a290:	0800a4a3 	.word	0x0800a4a3
 800a294:	0800a4a3 	.word	0x0800a4a3
 800a298:	0800a4a3 	.word	0x0800a4a3
 800a29c:	0800a4a3 	.word	0x0800a4a3
 800a2a0:	0800a4a3 	.word	0x0800a4a3
 800a2a4:	0800a48d 	.word	0x0800a48d
 800a2a8:	3b1c      	subs	r3, #28
 800a2aa:	2b25      	cmp	r3, #37	; 0x25
 800a2ac:	f200 80f9 	bhi.w	800a4a2 <gc_execute_block+0x4782>
 800a2b0:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <gc_execute_block+0x4598>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a383 	.word	0x0800a383
 800a2bc:	0800a4a3 	.word	0x0800a4a3
 800a2c0:	0800a383 	.word	0x0800a383
 800a2c4:	0800a4a3 	.word	0x0800a4a3
 800a2c8:	0800a4a3 	.word	0x0800a4a3
 800a2cc:	0800a4a3 	.word	0x0800a4a3
 800a2d0:	0800a4a3 	.word	0x0800a4a3
 800a2d4:	0800a4a3 	.word	0x0800a4a3
 800a2d8:	0800a4a3 	.word	0x0800a4a3
 800a2dc:	0800a4a3 	.word	0x0800a4a3
 800a2e0:	0800a3c7 	.word	0x0800a3c7
 800a2e4:	0800a4a3 	.word	0x0800a4a3
 800a2e8:	0800a3d1 	.word	0x0800a3d1
 800a2ec:	0800a4a3 	.word	0x0800a4a3
 800a2f0:	0800a4a3 	.word	0x0800a4a3
 800a2f4:	0800a4a3 	.word	0x0800a4a3
 800a2f8:	0800a4a3 	.word	0x0800a4a3
 800a2fc:	0800a4a3 	.word	0x0800a4a3
 800a300:	0800a4a3 	.word	0x0800a4a3
 800a304:	0800a4a3 	.word	0x0800a4a3
 800a308:	0800a4a3 	.word	0x0800a4a3
 800a30c:	0800a4a3 	.word	0x0800a4a3
 800a310:	0800a4a3 	.word	0x0800a4a3
 800a314:	0800a4a3 	.word	0x0800a4a3
 800a318:	0800a4a3 	.word	0x0800a4a3
 800a31c:	0800a4a3 	.word	0x0800a4a3
 800a320:	0800a4a3 	.word	0x0800a4a3
 800a324:	0800a4a3 	.word	0x0800a4a3
 800a328:	0800a4a3 	.word	0x0800a4a3
 800a32c:	0800a4a3 	.word	0x0800a4a3
 800a330:	0800a4a3 	.word	0x0800a4a3
 800a334:	0800a4a3 	.word	0x0800a4a3
 800a338:	0800a4a3 	.word	0x0800a4a3
 800a33c:	0800a4a3 	.word	0x0800a4a3
 800a340:	0800a4a3 	.word	0x0800a4a3
 800a344:	0800a4a3 	.word	0x0800a4a3
 800a348:	0800a4a3 	.word	0x0800a4a3
 800a34c:	0800a3db 	.word	0x0800a3db
                settings_write_coord_data(gc_block.values.coord_data.id, &gc_block.values.coord_data.xyz);
 800a350:	4bd0      	ldr	r3, [pc, #832]	; (800a694 <gc_execute_block+0x4974>)
 800a352:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a356:	49d0      	ldr	r1, [pc, #832]	; (800a698 <gc_execute_block+0x4978>)
 800a358:	4618      	mov	r0, r3
 800a35a:	f00f ff21 	bl	801a1a0 <settings_write_coord_data>
                if (gc_state.modal.coord_system.id == gc_block.values.coord_data.id) {
 800a35e:	4bcf      	ldr	r3, [pc, #828]	; (800a69c <gc_execute_block+0x497c>)
 800a360:	7d1a      	ldrb	r2, [r3, #20]
 800a362:	4bcc      	ldr	r3, [pc, #816]	; (800a694 <gc_execute_block+0x4974>)
 800a364:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800a368:	429a      	cmp	r2, r3
 800a36a:	f040 809c 	bne.w	800a4a6 <gc_execute_block+0x4786>
                    memcpy(gc_state.modal.coord_system.xyz, gc_block.values.coord_data.xyz, sizeof(gc_state.modal.coord_system.xyz));
 800a36e:	4bcb      	ldr	r3, [pc, #812]	; (800a69c <gc_execute_block+0x497c>)
 800a370:	4ac8      	ldr	r2, [pc, #800]	; (800a694 <gc_execute_block+0x4974>)
 800a372:	3308      	adds	r3, #8
 800a374:	326c      	adds	r2, #108	; 0x6c
 800a376:	ca07      	ldmia	r2, {r0, r1, r2}
 800a378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    system_flag_wco_change();
 800a37c:	f017 f81e 	bl	80213bc <system_flag_wco_change>
            break;
 800a380:	e091      	b.n	800a4a6 <gc_execute_block+0x4786>
            plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 800a382:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800a386:	f043 0301 	orr.w	r3, r3, #1
 800a38a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            if (axis_command)
 800a38e:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <gc_execute_block+0x4682>
                mc_line(gc_block.values.xyz, &plan_data);
 800a396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a39a:	4619      	mov	r1, r3
 800a39c:	48c0      	ldr	r0, [pc, #768]	; (800a6a0 <gc_execute_block+0x4980>)
 800a39e:	f003 f80d 	bl	800d3bc <mc_line>
            mc_line(gc_block.values.coord_data.xyz, &plan_data);
 800a3a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	48bb      	ldr	r0, [pc, #748]	; (800a698 <gc_execute_block+0x4978>)
 800a3aa:	f003 f807 	bl	800d3bc <mc_line>
            memcpy(gc_state.position, gc_block.values.coord_data.xyz, sizeof(gc_state.position));
 800a3ae:	4bbb      	ldr	r3, [pc, #748]	; (800a69c <gc_execute_block+0x497c>)
 800a3b0:	4ab8      	ldr	r2, [pc, #736]	; (800a694 <gc_execute_block+0x4974>)
 800a3b2:	3360      	adds	r3, #96	; 0x60
 800a3b4:	326c      	adds	r2, #108	; 0x6c
 800a3b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a3b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            set_scaling(1.0f);
 800a3bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a3c0:	f7fb f83c 	bl	800543c <set_scaling>
            break;
 800a3c4:	e070      	b.n	800a4a8 <gc_execute_block+0x4788>
            settings_write_coord_data(CoordinateSystem_G28, &gc_state.position);
 800a3c6:	49b7      	ldr	r1, [pc, #732]	; (800a6a4 <gc_execute_block+0x4984>)
 800a3c8:	2009      	movs	r0, #9
 800a3ca:	f00f fee9 	bl	801a1a0 <settings_write_coord_data>
            break;
 800a3ce:	e06b      	b.n	800a4a8 <gc_execute_block+0x4788>
            settings_write_coord_data(CoordinateSystem_G30, &gc_state.position);
 800a3d0:	49b4      	ldr	r1, [pc, #720]	; (800a6a4 <gc_execute_block+0x4984>)
 800a3d2:	200a      	movs	r0, #10
 800a3d4:	f00f fee4 	bl	801a1a0 <settings_write_coord_data>
            break;
 800a3d8:	e066      	b.n	800a4a8 <gc_execute_block+0x4788>
                status_code_t status = grbl.on_macro_execute((macro_id_t)gc_block.values.p);
 800a3da:	4bb3      	ldr	r3, [pc, #716]	; (800a6a8 <gc_execute_block+0x4988>)
 800a3dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3e0:	4aac      	ldr	r2, [pc, #688]	; (800a694 <gc_execute_block+0x4974>)
 800a3e2:	edd2 7a14 	vldr	s15, [r2, #80]	; 0x50
 800a3e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ea:	ee17 2a90 	vmov	r2, s15
 800a3ee:	b292      	uxth	r2, r2
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	4798      	blx	r3
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                return status == Status_Unhandled ? Status_GcodeValueOutOfRange : status;
 800a3fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a3fe:	2b54      	cmp	r3, #84	; 0x54
 800a400:	d003      	beq.n	800a40a <gc_execute_block+0x46ea>
 800a402:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a406:	f000 bc67 	b.w	800acd8 <gc_execute_block+0x4fb8>
 800a40a:	2327      	movs	r3, #39	; 0x27
 800a40c:	f000 bc64 	b.w	800acd8 <gc_execute_block+0x4fb8>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 800a410:	4ba2      	ldr	r3, [pc, #648]	; (800a69c <gc_execute_block+0x497c>)
 800a412:	2201      	movs	r2, #1
 800a414:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            memcpy(gc_state.g92_coord_offset, gc_block.values.xyz, sizeof(gc_state.g92_coord_offset));
 800a418:	4ba0      	ldr	r3, [pc, #640]	; (800a69c <gc_execute_block+0x497c>)
 800a41a:	4a9e      	ldr	r2, [pc, #632]	; (800a694 <gc_execute_block+0x4974>)
 800a41c:	337c      	adds	r3, #124	; 0x7c
 800a41e:	3260      	adds	r2, #96	; 0x60
 800a420:	ca07      	ldmia	r2, {r0, r1, r2}
 800a422:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            if(!settings.flags.g92_is_volatile)
 800a426:	4ba1      	ldr	r3, [pc, #644]	; (800a6ac <gc_execute_block+0x498c>)
 800a428:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b00      	cmp	r3, #0
 800a434:	d103      	bne.n	800a43e <gc_execute_block+0x471e>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 800a436:	499e      	ldr	r1, [pc, #632]	; (800a6b0 <gc_execute_block+0x4990>)
 800a438:	200b      	movs	r0, #11
 800a43a:	f00f feb1 	bl	801a1a0 <settings_write_coord_data>
            system_flag_wco_change();
 800a43e:	f016 ffbd 	bl	80213bc <system_flag_wco_change>
            break;
 800a442:	e031      	b.n	800a4a8 <gc_execute_block+0x4788>
            gc_state.g92_coord_offset_applied = false;
 800a444:	4b95      	ldr	r3, [pc, #596]	; (800a69c <gc_execute_block+0x497c>)
 800a446:	2200      	movs	r2, #0
 800a448:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 800a44c:	220c      	movs	r2, #12
 800a44e:	2100      	movs	r1, #0
 800a450:	4897      	ldr	r0, [pc, #604]	; (800a6b0 <gc_execute_block+0x4990>)
 800a452:	f01b fcf4 	bl	8025e3e <memset>
            if(!settings.flags.g92_is_volatile)
 800a456:	4b95      	ldr	r3, [pc, #596]	; (800a6ac <gc_execute_block+0x498c>)
 800a458:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d103      	bne.n	800a46e <gc_execute_block+0x474e>
                settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 800a466:	4992      	ldr	r1, [pc, #584]	; (800a6b0 <gc_execute_block+0x4990>)
 800a468:	200b      	movs	r0, #11
 800a46a:	f00f fe99 	bl	801a1a0 <settings_write_coord_data>
            system_flag_wco_change();
 800a46e:	f016 ffa5 	bl	80213bc <system_flag_wco_change>
            break;
 800a472:	e019      	b.n	800a4a8 <gc_execute_block+0x4788>
            gc_state.g92_coord_offset_applied = false;
 800a474:	4b89      	ldr	r3, [pc, #548]	; (800a69c <gc_execute_block+0x497c>)
 800a476:	2200      	movs	r2, #0
 800a478:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            clear_vector(gc_state.g92_coord_offset); // Disable G92 offsets by zeroing offset vector.
 800a47c:	220c      	movs	r2, #12
 800a47e:	2100      	movs	r1, #0
 800a480:	488b      	ldr	r0, [pc, #556]	; (800a6b0 <gc_execute_block+0x4990>)
 800a482:	f01b fcdc 	bl	8025e3e <memset>
            system_flag_wco_change();
 800a486:	f016 ff99 	bl	80213bc <system_flag_wco_change>
            break;
 800a48a:	e00d      	b.n	800a4a8 <gc_execute_block+0x4788>
            gc_state.g92_coord_offset_applied = true; // TODO: check for all zero?
 800a48c:	4b83      	ldr	r3, [pc, #524]	; (800a69c <gc_execute_block+0x497c>)
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
            settings_read_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Restore G92 offsets from non-volatile storage
 800a494:	4986      	ldr	r1, [pc, #536]	; (800a6b0 <gc_execute_block+0x4990>)
 800a496:	200b      	movs	r0, #11
 800a498:	f00f feb2 	bl	801a200 <settings_read_coord_data>
            system_flag_wco_change();
 800a49c:	f016 ff8e 	bl	80213bc <system_flag_wco_change>
            break;
 800a4a0:	e002      	b.n	800a4a8 <gc_execute_block+0x4788>
            break;
 800a4a2:	bf00      	nop
 800a4a4:	e000      	b.n	800a4a8 <gc_execute_block+0x4788>
            break;
 800a4a6:	bf00      	nop
    }

    // [20. Motion modes ]:
    // NOTE: Commands G10,G28,G30,G92 lock out and prevent axis words from use in motion modes.
    // Enter motion modes only if there are axis words or a motion mode command word in the block.
    gc_state.modal.motion = gc_block.modal.motion;
 800a4a8:	4b7a      	ldr	r3, [pc, #488]	; (800a694 <gc_execute_block+0x4974>)
 800a4aa:	891a      	ldrh	r2, [r3, #8]
 800a4ac:	4b7b      	ldr	r3, [pc, #492]	; (800a69c <gc_execute_block+0x497c>)
 800a4ae:	801a      	strh	r2, [r3, #0]
    gc_state.modal.canned_cycle_active = gc_block.modal.canned_cycle_active;
 800a4b0:	4b78      	ldr	r3, [pc, #480]	; (800a694 <gc_execute_block+0x4974>)
 800a4b2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800a4b6:	4b79      	ldr	r3, [pc, #484]	; (800a69c <gc_execute_block+0x497c>)
 800a4b8:	77da      	strb	r2, [r3, #31]

    if (gc_state.modal.motion != MotionMode_None && axis_command == AxisCommand_MotionMode) {
 800a4ba:	4b78      	ldr	r3, [pc, #480]	; (800a69c <gc_execute_block+0x497c>)
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	2b50      	cmp	r3, #80	; 0x50
 800a4c0:	f000 828c 	beq.w	800a9dc <gc_execute_block+0x4cbc>
 800a4c4:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	f040 8287 	bne.w	800a9dc <gc_execute_block+0x4cbc>

        plan_data.output_commands = output_commands;
 800a4ce:	4b79      	ldr	r3, [pc, #484]	; (800a6b4 <gc_execute_block+0x4994>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	66bb      	str	r3, [r7, #104]	; 0x68
        output_commands = NULL;
 800a4d4:	4b77      	ldr	r3, [pc, #476]	; (800a6b4 <gc_execute_block+0x4994>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]

        pos_update_t gc_update_pos = GCUpdatePos_Target;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce

        switch(gc_state.modal.motion) {
 800a4e0:	4b6e      	ldr	r3, [pc, #440]	; (800a69c <gc_execute_block+0x497c>)
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	2b53      	cmp	r3, #83	; 0x53
 800a4e6:	f300 80b1 	bgt.w	800a64c <gc_execute_block+0x492c>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f2c0 823a 	blt.w	800a964 <gc_execute_block+0x4c44>
 800a4f0:	2b53      	cmp	r3, #83	; 0x53
 800a4f2:	f200 8237 	bhi.w	800a964 <gc_execute_block+0x4c44>
 800a4f6:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <gc_execute_block+0x47dc>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a679 	.word	0x0800a679
 800a500:	0800a657 	.word	0x0800a657
 800a504:	0800a6b9 	.word	0x0800a6b9
 800a508:	0800a6b9 	.word	0x0800a6b9
 800a50c:	0800a965 	.word	0x0800a965
 800a510:	0800a705 	.word	0x0800a705
 800a514:	0800a965 	.word	0x0800a965
 800a518:	0800a965 	.word	0x0800a965
 800a51c:	0800a965 	.word	0x0800a965
 800a520:	0800a965 	.word	0x0800a965
 800a524:	0800a965 	.word	0x0800a965
 800a528:	0800a965 	.word	0x0800a965
 800a52c:	0800a965 	.word	0x0800a965
 800a530:	0800a965 	.word	0x0800a965
 800a534:	0800a965 	.word	0x0800a965
 800a538:	0800a965 	.word	0x0800a965
 800a53c:	0800a965 	.word	0x0800a965
 800a540:	0800a965 	.word	0x0800a965
 800a544:	0800a965 	.word	0x0800a965
 800a548:	0800a965 	.word	0x0800a965
 800a54c:	0800a965 	.word	0x0800a965
 800a550:	0800a965 	.word	0x0800a965
 800a554:	0800a965 	.word	0x0800a965
 800a558:	0800a965 	.word	0x0800a965
 800a55c:	0800a965 	.word	0x0800a965
 800a560:	0800a965 	.word	0x0800a965
 800a564:	0800a965 	.word	0x0800a965
 800a568:	0800a965 	.word	0x0800a965
 800a56c:	0800a965 	.word	0x0800a965
 800a570:	0800a965 	.word	0x0800a965
 800a574:	0800a965 	.word	0x0800a965
 800a578:	0800a965 	.word	0x0800a965
 800a57c:	0800a965 	.word	0x0800a965
 800a580:	0800a831 	.word	0x0800a831
 800a584:	0800a965 	.word	0x0800a965
 800a588:	0800a965 	.word	0x0800a965
 800a58c:	0800a965 	.word	0x0800a965
 800a590:	0800a965 	.word	0x0800a965
 800a594:	0800a965 	.word	0x0800a965
 800a598:	0800a965 	.word	0x0800a965
 800a59c:	0800a965 	.word	0x0800a965
 800a5a0:	0800a965 	.word	0x0800a965
 800a5a4:	0800a965 	.word	0x0800a965
 800a5a8:	0800a965 	.word	0x0800a965
 800a5ac:	0800a965 	.word	0x0800a965
 800a5b0:	0800a965 	.word	0x0800a965
 800a5b4:	0800a965 	.word	0x0800a965
 800a5b8:	0800a965 	.word	0x0800a965
 800a5bc:	0800a965 	.word	0x0800a965
 800a5c0:	0800a965 	.word	0x0800a965
 800a5c4:	0800a965 	.word	0x0800a965
 800a5c8:	0800a76f 	.word	0x0800a76f
 800a5cc:	0800a965 	.word	0x0800a965
 800a5d0:	0800a965 	.word	0x0800a965
 800a5d4:	0800a965 	.word	0x0800a965
 800a5d8:	0800a965 	.word	0x0800a965
 800a5dc:	0800a965 	.word	0x0800a965
 800a5e0:	0800a965 	.word	0x0800a965
 800a5e4:	0800a965 	.word	0x0800a965
 800a5e8:	0800a965 	.word	0x0800a965
 800a5ec:	0800a965 	.word	0x0800a965
 800a5f0:	0800a965 	.word	0x0800a965
 800a5f4:	0800a965 	.word	0x0800a965
 800a5f8:	0800a965 	.word	0x0800a965
 800a5fc:	0800a965 	.word	0x0800a965
 800a600:	0800a965 	.word	0x0800a965
 800a604:	0800a965 	.word	0x0800a965
 800a608:	0800a965 	.word	0x0800a965
 800a60c:	0800a965 	.word	0x0800a965
 800a610:	0800a965 	.word	0x0800a965
 800a614:	0800a965 	.word	0x0800a965
 800a618:	0800a965 	.word	0x0800a965
 800a61c:	0800a965 	.word	0x0800a965
 800a620:	0800a8e7 	.word	0x0800a8e7
 800a624:	0800a965 	.word	0x0800a965
 800a628:	0800a965 	.word	0x0800a965
 800a62c:	0800a88b 	.word	0x0800a88b
 800a630:	0800a965 	.word	0x0800a965
 800a634:	0800a965 	.word	0x0800a965
 800a638:	0800a965 	.word	0x0800a965
 800a63c:	0800a965 	.word	0x0800a965
 800a640:	0800a8e7 	.word	0x0800a8e7
 800a644:	0800a8e7 	.word	0x0800a8e7
 800a648:	0800a8e7 	.word	0x0800a8e7
 800a64c:	3b8c      	subs	r3, #140	; 0x8c
 800a64e:	2b03      	cmp	r3, #3
 800a650:	f200 8188 	bhi.w	800a964 <gc_execute_block+0x4c44>
 800a654:	e169      	b.n	800a92a <gc_execute_block+0x4c0a>

            case MotionMode_Linear:
                if(gc_state.modal.feed_mode == FeedMode_UnitsPerRev) {
 800a656:	4b11      	ldr	r3, [pc, #68]	; (800a69c <gc_execute_block+0x497c>)
 800a658:	789b      	ldrb	r3, [r3, #2]
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d105      	bne.n	800a66a <gc_execute_block+0x494a>
                    plan_data.spindle.state.synchronized = On;
 800a65e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a666:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                //??    gc_state.distance_per_rev = plan_data.feed_rate;
                    // check initial feed rate - fail if zero?
                }
                mc_line(gc_block.values.xyz, &plan_data);
 800a66a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a66e:	4619      	mov	r1, r3
 800a670:	480b      	ldr	r0, [pc, #44]	; (800a6a0 <gc_execute_block+0x4980>)
 800a672:	f002 fea3 	bl	800d3bc <mc_line>
                break;
 800a676:	e176      	b.n	800a966 <gc_execute_block+0x4c46>

            case MotionMode_Seek:
                plan_data.condition.rapid_motion = On; // Set rapid motion condition flag.
 800a678:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800a67c:	f043 0301 	orr.w	r3, r3, #1
 800a680:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
                mc_line(gc_block.values.xyz, &plan_data);
 800a684:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a688:	4619      	mov	r1, r3
 800a68a:	4805      	ldr	r0, [pc, #20]	; (800a6a0 <gc_execute_block+0x4980>)
 800a68c:	f002 fe96 	bl	800d3bc <mc_line>
                break;
 800a690:	e169      	b.n	800a966 <gc_execute_block+0x4c46>
 800a692:	bf00      	nop
 800a694:	20001470 	.word	0x20001470
 800a698:	200014dc 	.word	0x200014dc
 800a69c:	2000137c 	.word	0x2000137c
 800a6a0:	200014d0 	.word	0x200014d0
 800a6a4:	200013dc 	.word	0x200013dc
 800a6a8:	200015b8 	.word	0x200015b8
 800a6ac:	20001cf0 	.word	0x20001cf0
 800a6b0:	200013f8 	.word	0x200013f8
 800a6b4:	20001458 	.word	0x20001458

            case MotionMode_CwArc:
            case MotionMode_CcwArc:
                // fail if spindle synchronized motion?
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 800a6b8:	4bbb      	ldr	r3, [pc, #748]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a6ba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 800a6be:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800a6c2:	f003 0304 	and.w	r3, r3, #4
 800a6c6:	b2db      	uxtb	r3, r3
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <gc_execute_block+0x49b6>
                        plane, gc_parser_flags.arc_is_clockwise ? -gc_block.arc_turns : gc_block.arc_turns);
 800a6cc:	4bb6      	ldr	r3, [pc, #728]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a6ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6d2:	425b      	negs	r3, r3
 800a6d4:	e002      	b.n	800a6dc <gc_execute_block+0x49bc>
 800a6d6:	4bb4      	ldr	r3, [pc, #720]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a6d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
                mc_arc(gc_block.values.xyz, &plan_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 800a6dc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	466b      	mov	r3, sp
 800a6e4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800a6e8:	6812      	ldr	r2, [r2, #0]
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	8018      	strh	r0, [r3, #0]
 800a6ee:	3302      	adds	r3, #2
 800a6f0:	0c12      	lsrs	r2, r2, #16
 800a6f2:	701a      	strb	r2, [r3, #0]
 800a6f4:	eeb0 0a67 	vmov.f32	s0, s15
 800a6f8:	4bac      	ldr	r3, [pc, #688]	; (800a9ac <gc_execute_block+0x4c8c>)
 800a6fa:	4aad      	ldr	r2, [pc, #692]	; (800a9b0 <gc_execute_block+0x4c90>)
 800a6fc:	48ad      	ldr	r0, [pc, #692]	; (800a9b4 <gc_execute_block+0x4c94>)
 800a6fe:	f002 fedb 	bl	800d4b8 <mc_arc>
                break;
 800a702:	e130      	b.n	800a966 <gc_execute_block+0x4c46>

            case MotionMode_CubicSpline:
                {
                    point_2d_t cp1 = {
                        .x = gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS],
 800a704:	4bac      	ldr	r3, [pc, #688]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a706:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800a70a:	4ba7      	ldr	r3, [pc, #668]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a70c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800a710:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp1 = {
 800a714:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                        .y = gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS]
 800a718:	4ba7      	ldr	r3, [pc, #668]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a71a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800a71e:	4ba2      	ldr	r3, [pc, #648]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a720:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a724:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp1 = {
 800a728:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    };
                    point_2d_t cp2 = {
                        .x = gc_block.values.xyz[X_AXIS] + gc_state.modal.spline_pq[X_AXIS],
 800a72c:	4b9e      	ldr	r3, [pc, #632]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a72e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800a732:	4ba1      	ldr	r3, [pc, #644]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a734:	edd3 7a08 	vldr	s15, [r3, #32]
 800a738:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp2 = {
 800a73c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                        .y = gc_block.values.xyz[Y_AXIS] + gc_state.modal.spline_pq[Y_AXIS]
 800a740:	4b99      	ldr	r3, [pc, #612]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a742:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800a746:	4b9c      	ldr	r3, [pc, #624]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a748:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a74c:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp2 = {
 800a750:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                    };
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 800a754:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a758:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800a75c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	4613      	mov	r3, r2
 800a764:	4a92      	ldr	r2, [pc, #584]	; (800a9b0 <gc_execute_block+0x4c90>)
 800a766:	4893      	ldr	r0, [pc, #588]	; (800a9b4 <gc_execute_block+0x4c94>)
 800a768:	f003 faf8 	bl	800dd5c <mc_cubic_b_spline>
                }
                break;
 800a76c:	e0fb      	b.n	800a966 <gc_execute_block+0x4c46>

            case MotionMode_QuadraticSpline:
                {
                    point_2d_t cp1 = {
                        .x = gc_state.position[X_AXIS] + (gc_block.values.ijk[X_AXIS] * 2.0f) / 3.0f,
 800a76e:	4b92      	ldr	r3, [pc, #584]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a770:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800a774:	4b8c      	ldr	r3, [pc, #560]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a776:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800a77a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a77e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800a782:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a786:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp1 = {
 800a78a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                        .y = gc_state.position[Y_AXIS] + (gc_block.values.ijk[Y_AXIS] * 2.0f) / 3.0f
 800a78e:	4b8a      	ldr	r3, [pc, #552]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a790:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800a794:	4b84      	ldr	r3, [pc, #528]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a796:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a79a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a79e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800a7a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a7a6:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp1 = {
 800a7aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    };
                    point_2d_t cp2 = {
                        .x = gc_block.values.xyz[X_AXIS] + ((gc_state.position[X_AXIS] + gc_block.values.ijk[X_AXIS] - gc_block.values.xyz[X_AXIS]) * 2.0f) / 3.0f,
 800a7ae:	4b7e      	ldr	r3, [pc, #504]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a7b0:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800a7b4:	4b80      	ldr	r3, [pc, #512]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a7b6:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800a7ba:	4b7b      	ldr	r3, [pc, #492]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a7bc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800a7c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a7c4:	4b78      	ldr	r3, [pc, #480]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a7c6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800a7ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a7ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a7d2:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800a7d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a7da:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp2 = {
 800a7de:	edc7 7a07 	vstr	s15, [r7, #28]
                        .y = gc_block.values.xyz[Y_AXIS] + ((gc_state.position[Y_AXIS] + gc_block.values.ijk[Y_AXIS] - gc_block.values.xyz[Y_AXIS]) * 2.0f) / 3.0f
 800a7e2:	4b71      	ldr	r3, [pc, #452]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a7e4:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800a7e8:	4b73      	ldr	r3, [pc, #460]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a7ea:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800a7ee:	4b6e      	ldr	r3, [pc, #440]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a7f0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a7f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a7f8:	4b6b      	ldr	r3, [pc, #428]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a7fa:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800a7fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a802:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a806:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800a80a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a80e:	ee77 7a27 	vadd.f32	s15, s14, s15
                    point_2d_t cp2 = {
 800a812:	edc7 7a08 	vstr	s15, [r7, #32]
                    };
                    mc_cubic_b_spline(gc_block.values.xyz, &plan_data, gc_state.position, cp1.values, cp2.values);
 800a816:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a81a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800a81e:	f107 031c 	add.w	r3, r7, #28
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	4613      	mov	r3, r2
 800a826:	4a62      	ldr	r2, [pc, #392]	; (800a9b0 <gc_execute_block+0x4c90>)
 800a828:	4862      	ldr	r0, [pc, #392]	; (800a9b4 <gc_execute_block+0x4c94>)
 800a82a:	f003 fa97 	bl	800dd5c <mc_cubic_b_spline>
                }
                break;
 800a82e:	e09a      	b.n	800a966 <gc_execute_block+0x4c46>

            case MotionMode_SpindleSynchronized:
                {
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 800a830:	f007 ffa8 	bl	8012784 <protocol_buffer_synchronize>

                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 800a834:	4b61      	ldr	r3, [pc, #388]	; (800a9bc <gc_execute_block+0x4c9c>)
 800a836:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a83a:	763b      	strb	r3, [r7, #24]

                    status_code_t status = init_sync_motion(&plan_data, gc_block.values.k);
 800a83c:	4b5a      	ldr	r3, [pc, #360]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a83e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800a842:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a846:	eeb0 0a67 	vmov.f32	s0, s15
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fb f8d2 	bl	80059f4 <init_sync_motion>
 800a850:	4603      	mov	r3, r0
 800a852:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
                    if(status != Status_OK)
 800a856:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <gc_execute_block+0x4b44>
                        FAIL(status);
 800a85e:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800a862:	e239      	b.n	800acd8 <gc_execute_block+0x4fb8>

                    plan_data.spindle.state.synchronized = On;
 800a864:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a86c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

                    mc_line(gc_block.values.xyz, &plan_data);
 800a870:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a874:	4619      	mov	r1, r3
 800a876:	484f      	ldr	r0, [pc, #316]	; (800a9b4 <gc_execute_block+0x4c94>)
 800a878:	f002 fda0 	bl	800d3bc <mc_line>

                    protocol_buffer_synchronize();    // Wait until synchronized move is finished,
 800a87c:	f007 ff82 	bl	8012784 <protocol_buffer_synchronize>
                    sys.override.control = overrides; // then restore previous override disable status.
 800a880:	4a4e      	ldr	r2, [pc, #312]	; (800a9bc <gc_execute_block+0x4c9c>)
 800a882:	7e3b      	ldrb	r3, [r7, #24]
 800a884:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
                }
                break;
 800a888:	e06d      	b.n	800a966 <gc_execute_block+0x4c46>

            case MotionMode_Threading:
                {
                    protocol_buffer_synchronize(); // Wait until any previous moves are finished.
 800a88a:	f007 ff7b 	bl	8012784 <protocol_buffer_synchronize>

                    gc_override_flags_t overrides = sys.override.control; // Save current override disable status.
 800a88e:	4b4b      	ldr	r3, [pc, #300]	; (800a9bc <gc_execute_block+0x4c9c>)
 800a890:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a894:	753b      	strb	r3, [r7, #20]

                    status_code_t status = init_sync_motion(&plan_data, thread.pitch);
 800a896:	4b4a      	ldr	r3, [pc, #296]	; (800a9c0 <gc_execute_block+0x4ca0>)
 800a898:	edd3 7a00 	vldr	s15, [r3]
 800a89c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a8a0:	eeb0 0a67 	vmov.f32	s0, s15
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fb f8a5 	bl	80059f4 <init_sync_motion>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
                    if(status != Status_OK)
 800a8b0:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <gc_execute_block+0x4b9e>
                        FAIL(status);
 800a8b8:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 800a8bc:	e20c      	b.n	800acd8 <gc_execute_block+0x4fb8>

                    mc_thread(&plan_data, gc_state.position, &thread, overrides.feed_hold_disable);
 800a8be:	7d3b      	ldrb	r3, [r7, #20]
 800a8c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	bf14      	ite	ne
 800a8ca:	2301      	movne	r3, #1
 800a8cc:	2300      	moveq	r3, #0
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800a8d4:	4a3a      	ldr	r2, [pc, #232]	; (800a9c0 <gc_execute_block+0x4ca0>)
 800a8d6:	4936      	ldr	r1, [pc, #216]	; (800a9b0 <gc_execute_block+0x4c90>)
 800a8d8:	f003 fddc 	bl	800e494 <mc_thread>

                    sys.override.control = overrides; // then restore previous override disable status.
 800a8dc:	4a37      	ldr	r2, [pc, #220]	; (800a9bc <gc_execute_block+0x4c9c>)
 800a8de:	7d3b      	ldrb	r3, [r7, #20]
 800a8e0:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
                }
                break;
 800a8e4:	e03f      	b.n	800a966 <gc_execute_block+0x4c46>

            case MotionMode_DrillChipBreak:
            case MotionMode_CannedCycle81:
            case MotionMode_CannedCycle82:
            case MotionMode_CannedCycle83:;
                plan_data.spindle.rpm = gc_block.values.s;
 800a8e6:	4b30      	ldr	r3, [pc, #192]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a8e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ea:	64bb      	str	r3, [r7, #72]	; 0x48
                gc_state.canned.retract_mode = gc_state.modal.retract_mode;
 800a8ec:	4b32      	ldr	r3, [pc, #200]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a8ee:	7f5a      	ldrb	r2, [r3, #29]
 800a8f0:	4b31      	ldr	r3, [pc, #196]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a8f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                mc_canned_drill(gc_state.modal.motion, gc_block.values.xyz, &plan_data, gc_state.position, plane, gc_block.values.l, &gc_state.canned);
 800a8f6:	4b30      	ldr	r3, [pc, #192]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a8f8:	8818      	ldrh	r0, [r3, #0]
 800a8fa:	4b2b      	ldr	r3, [pc, #172]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a8fc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a900:	461a      	mov	r2, r3
 800a902:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800a906:	4b2f      	ldr	r3, [pc, #188]	; (800a9c4 <gc_execute_block+0x4ca4>)
 800a908:	9302      	str	r3, [sp, #8]
 800a90a:	9201      	str	r2, [sp, #4]
 800a90c:	466b      	mov	r3, sp
 800a90e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800a912:	6812      	ldr	r2, [r2, #0]
 800a914:	4614      	mov	r4, r2
 800a916:	801c      	strh	r4, [r3, #0]
 800a918:	3302      	adds	r3, #2
 800a91a:	0c12      	lsrs	r2, r2, #16
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	4b24      	ldr	r3, [pc, #144]	; (800a9b0 <gc_execute_block+0x4c90>)
 800a920:	460a      	mov	r2, r1
 800a922:	4924      	ldr	r1, [pc, #144]	; (800a9b4 <gc_execute_block+0x4c94>)
 800a924:	f003 fbd0 	bl	800e0c8 <mc_canned_drill>
                break;
 800a928:	e01d      	b.n	800a966 <gc_execute_block+0x4c46>
            case MotionMode_ProbeTowardNoError:
            case MotionMode_ProbeAway:
            case MotionMode_ProbeAwayNoError:
                // NOTE: gc_block.values.xyz is returned from mc_probe_cycle with the updated position value. So
                // upon a successful probing cycle, the machine position and the returned value should be the same.
                plan_data.condition.no_feed_override = !settings.probe.allow_feed_override;
 800a92a:	4b27      	ldr	r3, [pc, #156]	; (800a9c8 <gc_execute_block+0x4ca8>)
 800a92c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800a930:	f003 0310 	and.w	r3, r3, #16
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	bf0c      	ite	eq
 800a93a:	2301      	moveq	r3, #1
 800a93c:	2300      	movne	r3, #0
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800a944:	f362 1304 	bfi	r3, r2, #4, #1
 800a948:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
                gc_update_pos = (pos_update_t)mc_probe_cycle(gc_block.values.xyz, &plan_data, gc_parser_flags);
 800a94c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a950:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800a954:	4619      	mov	r1, r3
 800a956:	4817      	ldr	r0, [pc, #92]	; (800a9b4 <gc_execute_block+0x4c94>)
 800a958:	f004 fa04 	bl	800ed64 <mc_probe_cycle>
 800a95c:	4603      	mov	r3, r0
 800a95e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
                break;
 800a962:	e000      	b.n	800a966 <gc_execute_block+0x4c46>

            default:
                break;
 800a964:	bf00      	nop
        }

        // Do not update position on cancel (already done in protocol_exec_rt_system)
        if(sys.cancel)
 800a966:	4b15      	ldr	r3, [pc, #84]	; (800a9bc <gc_execute_block+0x4c9c>)
 800a968:	785b      	ldrb	r3, [r3, #1]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00d      	beq.n	800a98a <gc_execute_block+0x4c6a>
            gc_update_pos = GCUpdatePos_None;
 800a96e:	2302      	movs	r3, #2
 800a970:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce

        //  Clean out any remaining output commands (may linger on error)
        while(plan_data.output_commands) {
 800a974:	e009      	b.n	800a98a <gc_execute_block+0x4c6a>
            output_command_t *next = plan_data.output_commands;
 800a976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            free(plan_data.output_commands);
 800a97c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a97e:	4618      	mov	r0, r3
 800a980:	f01a ff02 	bl	8025788 <free>
            plan_data.output_commands = next;
 800a984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a988:	66bb      	str	r3, [r7, #104]	; 0x68
        while(plan_data.output_commands) {
 800a98a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1f2      	bne.n	800a976 <gc_execute_block+0x4c56>
        }

        // As far as the parser is concerned, the position is now == target. In reality the
        // motion control system might still be processing the action and the real tool position
        // in any intermediate location.
        if (gc_update_pos == GCUpdatePos_Target)
 800a990:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800a994:	2b00      	cmp	r3, #0
 800a996:	d119      	bne.n	800a9cc <gc_execute_block+0x4cac>
            memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_state.position)); // gc_state.position[] = gc_block.values.xyz[]
 800a998:	4b07      	ldr	r3, [pc, #28]	; (800a9b8 <gc_execute_block+0x4c98>)
 800a99a:	4a03      	ldr	r2, [pc, #12]	; (800a9a8 <gc_execute_block+0x4c88>)
 800a99c:	3360      	adds	r3, #96	; 0x60
 800a99e:	3260      	adds	r2, #96	; 0x60
 800a9a0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a9a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9a6:	e019      	b.n	800a9dc <gc_execute_block+0x4cbc>
 800a9a8:	20001470 	.word	0x20001470
 800a9ac:	200014ac 	.word	0x200014ac
 800a9b0:	200013dc 	.word	0x200013dc
 800a9b4:	200014d0 	.word	0x200014d0
 800a9b8:	2000137c 	.word	0x2000137c
 800a9bc:	20001520 	.word	0x20001520
 800a9c0:	20001428 	.word	0x20001428
 800a9c4:	200013a4 	.word	0x200013a4
 800a9c8:	20001cf0 	.word	0x20001cf0
        else if (gc_update_pos == GCUpdatePos_System)
 800a9cc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d103      	bne.n	800a9dc <gc_execute_block+0x4cbc>
            gc_sync_position(); // gc_state.position[] = sys.position
 800a9d4:	49a8      	ldr	r1, [pc, #672]	; (800ac78 <gc_execute_block+0x4f58>)
 800a9d6:	48a9      	ldr	r0, [pc, #676]	; (800ac7c <gc_execute_block+0x4f5c>)
 800a9d8:	f016 fd0e 	bl	80213f8 <system_convert_array_steps_to_mpos>
        // == GCUpdatePos_None
    }

    if(plan_data.message)
 800a9dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <gc_execute_block+0x4cca>
        output_message(plan_data.message);
 800a9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fb f887 	bl	8005af8 <output_message>

    // [21. Program flow ]:
    // M0,M1,M2,M30,M60: Perform non-running program flow actions. During a program pause, the buffer may
    // refill and can only be resumed by the cycle start run-time command.
    gc_state.modal.program_flow = gc_block.modal.program_flow;
 800a9ea:	4ba5      	ldr	r3, [pc, #660]	; (800ac80 <gc_execute_block+0x4f60>)
 800a9ec:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a9f0:	4ba4      	ldr	r3, [pc, #656]	; (800ac84 <gc_execute_block+0x4f64>)
 800a9f2:	761a      	strb	r2, [r3, #24]

    if(gc_state.modal.program_flow || sys.flags.single_block) {
 800a9f4:	4ba3      	ldr	r3, [pc, #652]	; (800ac84 <gc_execute_block+0x4f64>)
 800a9f6:	7e1b      	ldrb	r3, [r3, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d107      	bne.n	800aa0c <gc_execute_block+0x4cec>
 800a9fc:	4ba2      	ldr	r3, [pc, #648]	; (800ac88 <gc_execute_block+0x4f68>)
 800a9fe:	7d9b      	ldrb	r3, [r3, #22]
 800aa00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 8165 	beq.w	800acd6 <gc_execute_block+0x4fb6>

        protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 800aa0c:	f007 feba 	bl	8012784 <protocol_buffer_synchronize>

        if(gc_state.modal.program_flow == ProgramFlow_Return) {
 800aa10:	4b9c      	ldr	r3, [pc, #624]	; (800ac84 <gc_execute_block+0x4f64>)
 800aa12:	7e1b      	ldrb	r3, [r3, #24]
 800aa14:	2b63      	cmp	r3, #99	; 0x63
 800aa16:	d10a      	bne.n	800aa2e <gc_execute_block+0x4d0e>
            if(grbl.on_macro_return)
 800aa18:	4b9c      	ldr	r3, [pc, #624]	; (800ac8c <gc_execute_block+0x4f6c>)
 800aa1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 8156 	beq.w	800acd0 <gc_execute_block+0x4fb0>
                grbl.on_macro_return();
 800aa24:	4b99      	ldr	r3, [pc, #612]	; (800ac8c <gc_execute_block+0x4f6c>)
 800aa26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aa2a:	4798      	blx	r3
 800aa2c:	e150      	b.n	800acd0 <gc_execute_block+0x4fb0>
        } else if(gc_state.modal.program_flow == ProgramFlow_Paused || gc_block.modal.program_flow == ProgramFlow_OptionalStop || gc_block.modal.program_flow == ProgramFlow_CompletedM60 || sys.flags.single_block) {
 800aa2e:	4b95      	ldr	r3, [pc, #596]	; (800ac84 <gc_execute_block+0x4f64>)
 800aa30:	7e1b      	ldrb	r3, [r3, #24]
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d010      	beq.n	800aa58 <gc_execute_block+0x4d38>
 800aa36:	4b92      	ldr	r3, [pc, #584]	; (800ac80 <gc_execute_block+0x4f60>)
 800aa38:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d00b      	beq.n	800aa58 <gc_execute_block+0x4d38>
 800aa40:	4b8f      	ldr	r3, [pc, #572]	; (800ac80 <gc_execute_block+0x4f60>)
 800aa42:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa46:	2b3c      	cmp	r3, #60	; 0x3c
 800aa48:	d006      	beq.n	800aa58 <gc_execute_block+0x4d38>
 800aa4a:	4b8f      	ldr	r3, [pc, #572]	; (800ac88 <gc_execute_block+0x4f68>)
 800aa4c:	7d9b      	ldrb	r3, [r3, #22]
 800aa4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d01d      	beq.n	800aa94 <gc_execute_block+0x4d74>
            if(!check_mode) {
 800aa58:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800aa5c:	f083 0301 	eor.w	r3, r3, #1
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 8134 	beq.w	800acd0 <gc_execute_block+0x4fb0>
                if(gc_block.modal.program_flow == ProgramFlow_CompletedM60 && hal.pallet_shuttle)
 800aa68:	4b85      	ldr	r3, [pc, #532]	; (800ac80 <gc_execute_block+0x4f60>)
 800aa6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa6e:	2b3c      	cmp	r3, #60	; 0x3c
 800aa70:	d108      	bne.n	800aa84 <gc_execute_block+0x4d64>
 800aa72:	4b87      	ldr	r3, [pc, #540]	; (800ac90 <gc_execute_block+0x4f70>)
 800aa74:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <gc_execute_block+0x4d64>
                    hal.pallet_shuttle();
 800aa7c:	4b84      	ldr	r3, [pc, #528]	; (800ac90 <gc_execute_block+0x4f70>)
 800aa7e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800aa82:	4798      	blx	r3
                system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 800aa84:	4b82      	ldr	r3, [pc, #520]	; (800ac90 <gc_execute_block+0x4f70>)
 800aa86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa88:	2108      	movs	r1, #8
 800aa8a:	4882      	ldr	r0, [pc, #520]	; (800ac94 <gc_execute_block+0x4f74>)
 800aa8c:	4798      	blx	r3
                protocol_execute_realtime(); // Execute suspend.
 800aa8e:	f007 fea9 	bl	80127e4 <protocol_execute_realtime>
            if(!check_mode) {
 800aa92:	e11d      	b.n	800acd0 <gc_execute_block+0x4fb0>
            // Upon program complete, only a subset of g-codes reset to certain defaults, according to
            // LinuxCNC's program end descriptions and testing. Only modal groups [G-code 1,2,3,5,7,12]
            // and [M-code 7,8,9] reset to [G1,G17,G90,G94,G40,G54,M5,M9,M48]. The remaining modal groups
            // [G-code 4,6,8,10,13,14,15] and [M-code 4,5,6] and the modal words [F,S,T,H] do not reset.

            if(!check_mode && gc_block.modal.program_flow == ProgramFlow_CompletedM30 && hal.pallet_shuttle)
 800aa94:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800aa98:	f083 0301 	eor.w	r3, r3, #1
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00d      	beq.n	800aabe <gc_execute_block+0x4d9e>
 800aaa2:	4b77      	ldr	r3, [pc, #476]	; (800ac80 <gc_execute_block+0x4f60>)
 800aaa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aaa8:	2b1e      	cmp	r3, #30
 800aaaa:	d108      	bne.n	800aabe <gc_execute_block+0x4d9e>
 800aaac:	4b78      	ldr	r3, [pc, #480]	; (800ac90 <gc_execute_block+0x4f70>)
 800aaae:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d003      	beq.n	800aabe <gc_execute_block+0x4d9e>
                hal.pallet_shuttle();
 800aab6:	4b76      	ldr	r3, [pc, #472]	; (800ac90 <gc_execute_block+0x4f70>)
 800aab8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800aabc:	4798      	blx	r3

            gc_state.file_run = false;
 800aabe:	4b71      	ldr	r3, [pc, #452]	; (800ac84 <gc_execute_block+0x4f64>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
            gc_state.modal.motion = MotionMode_Linear;
 800aac6:	4b6f      	ldr	r3, [pc, #444]	; (800ac84 <gc_execute_block+0x4f64>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	801a      	strh	r2, [r3, #0]
            gc_block.modal.canned_cycle_active = false;
 800aacc:	4b6c      	ldr	r3, [pc, #432]	; (800ac80 <gc_execute_block+0x4f60>)
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            gc_state.modal.plane_select = PlaneSelect_XY;
 800aad4:	4b6b      	ldr	r3, [pc, #428]	; (800ac84 <gc_execute_block+0x4f64>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	719a      	strb	r2, [r3, #6]
//            gc_state.modal.plane_select = settings.flags.lathe_mode ? PlaneSelect_ZX : PlaneSelect_XY;
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM; // NOTE: not compliant with linuxcnc (?)
 800aada:	4b6a      	ldr	r3, [pc, #424]	; (800ac84 <gc_execute_block+0x4f64>)
 800aadc:	2200      	movs	r2, #0
 800aade:	76da      	strb	r2, [r3, #27]
            gc_state.modal.distance_incremental = false;
 800aae0:	4b68      	ldr	r3, [pc, #416]	; (800ac84 <gc_execute_block+0x4f64>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	711a      	strb	r2, [r3, #4]
            gc_state.modal.feed_mode = FeedMode_UnitsPerMin;
 800aae6:	4b67      	ldr	r3, [pc, #412]	; (800ac84 <gc_execute_block+0x4f64>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	709a      	strb	r2, [r3, #2]
// TODO: check           gc_state.distance_per_rev = 0.0f;
            // gc_state.modal.cutter_comp = CUTTER_COMP_DISABLE; // Not supported.
            if(gc_state.modal.coord_system.id != CoordinateSystem_G54) {
 800aaec:	4b65      	ldr	r3, [pc, #404]	; (800ac84 <gc_execute_block+0x4f64>)
 800aaee:	7d1b      	ldrb	r3, [r3, #20]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d006      	beq.n	800ab02 <gc_execute_block+0x4de2>
                gc_state.modal.coord_system.id = CoordinateSystem_G54;
 800aaf4:	4b63      	ldr	r3, [pc, #396]	; (800ac84 <gc_execute_block+0x4f64>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	751a      	strb	r2, [r3, #20]
                system_add_rt_report(Report_GWCO);
 800aafa:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aafe:	f016 fd63 	bl	80215c8 <system_add_rt_report>
            }
            gc_state.modal.spindle.state = (spindle_state_t){0};
 800ab02:	4b60      	ldr	r3, [pc, #384]	; (800ac84 <gc_execute_block+0x4f64>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	769a      	strb	r2, [r3, #26]
            gc_state.modal.coolant = (coolant_state_t){0};
 800ab08:	4b5e      	ldr	r3, [pc, #376]	; (800ac84 <gc_execute_block+0x4f64>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	765a      	strb	r2, [r3, #25]
            gc_state.modal.override_ctrl.feed_rate_disable = Off;
 800ab0e:	4a5d      	ldr	r2, [pc, #372]	; (800ac84 <gc_execute_block+0x4f64>)
 800ab10:	7f13      	ldrb	r3, [r2, #28]
 800ab12:	f36f 0300 	bfc	r3, #0, #1
 800ab16:	7713      	strb	r3, [r2, #28]
            gc_state.modal.override_ctrl.spindle_rpm_disable = Off;
 800ab18:	4a5a      	ldr	r2, [pc, #360]	; (800ac84 <gc_execute_block+0x4f64>)
 800ab1a:	7f13      	ldrb	r3, [r2, #28]
 800ab1c:	f36f 0382 	bfc	r3, #2, #1
 800ab20:	7713      	strb	r3, [r2, #28]

            idx = N_SYS_SPINDLE;
 800ab22:	2301      	movs	r3, #1
 800ab24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            spindle_ptrs_t *spindle;
            do {
                if((spindle = spindle_get(--idx))) {
 800ab28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ab32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab36:	b25b      	sxtb	r3, r3
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f011 fa4d 	bl	801bfd8 <spindle_get>
 800ab3e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 800ab42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d013      	beq.n	800ab72 <gc_execute_block+0x4e52>
                    spindle->param->state.override_disable = Off;
 800ab4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	7a13      	ldrb	r3, [r2, #8]
 800ab52:	f36f 1304 	bfc	r3, #4, #1
 800ab56:	7213      	strb	r3, [r2, #8]
                    if(settings.flags.restore_overrides)
 800ab58:	4b4f      	ldr	r3, [pc, #316]	; (800ac98 <gc_execute_block+0x4f78>)
 800ab5a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ab5e:	f003 0302 	and.w	r3, r3, #2
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <gc_execute_block+0x4e52>
                        spindle->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 800ab68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	2264      	movs	r2, #100	; 0x64
 800ab70:	60da      	str	r2, [r3, #12]
                }
            } while(idx);
 800ab72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1d6      	bne.n	800ab28 <gc_execute_block+0x4e08>

            if(settings.parking.flags.enabled)
 800ab7a:	4b47      	ldr	r3, [pc, #284]	; (800ac98 <gc_execute_block+0x4f78>)
 800ab7c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d01a      	beq.n	800abc0 <gc_execute_block+0x4ea0>
                gc_state.modal.override_ctrl.parking_disable = settings.parking.flags.enable_override_control &&
 800ab8a:	4b43      	ldr	r3, [pc, #268]	; (800ac98 <gc_execute_block+0x4f78>)
 800ab8c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800ab90:	f003 0304 	and.w	r3, r3, #4
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <gc_execute_block+0x4e8e>
 800ab9a:	4b3f      	ldr	r3, [pc, #252]	; (800ac98 <gc_execute_block+0x4f78>)
 800ab9c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800aba0:	f003 0302 	and.w	r3, r3, #2
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <gc_execute_block+0x4e8e>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <gc_execute_block+0x4e90>
 800abae:	2300      	movs	r3, #0
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	b2d9      	uxtb	r1, r3
 800abb6:	4a33      	ldr	r2, [pc, #204]	; (800ac84 <gc_execute_block+0x4f64>)
 800abb8:	7f13      	ldrb	r3, [r2, #28]
 800abba:	f361 03c3 	bfi	r3, r1, #3, #1
 800abbe:	7713      	strb	r3, [r2, #28]
                                                                settings.parking.flags.deactivate_upon_init;
            sys.override.control = gc_state.modal.override_ctrl;
 800abc0:	4a31      	ldr	r2, [pc, #196]	; (800ac88 <gc_execute_block+0x4f68>)
 800abc2:	4b30      	ldr	r3, [pc, #192]	; (800ac84 <gc_execute_block+0x4f64>)
 800abc4:	7f1b      	ldrb	r3, [r3, #28]
 800abc6:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29

            if(settings.flags.restore_overrides) {
 800abca:	4b33      	ldr	r3, [pc, #204]	; (800ac98 <gc_execute_block+0x4f78>)
 800abcc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800abd0:	f003 0302 	and.w	r3, r3, #2
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d005      	beq.n	800abe6 <gc_execute_block+0x4ec6>
                sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;
 800abda:	4b2b      	ldr	r3, [pc, #172]	; (800ac88 <gc_execute_block+0x4f68>)
 800abdc:	2264      	movs	r2, #100	; 0x64
 800abde:	61da      	str	r2, [r3, #28]
                sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;
 800abe0:	4b29      	ldr	r3, [pc, #164]	; (800ac88 <gc_execute_block+0x4f68>)
 800abe2:	2264      	movs	r2, #100	; 0x64
 800abe4:	621a      	str	r2, [r3, #32]
            }

            // Execute coordinate change and spindle/coolant stop.
            if (!check_mode) {
 800abe6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800abea:	f083 0301 	eor.w	r3, r3, #1
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d033      	beq.n	800ac5c <gc_execute_block+0x4f3c>

                if (!(settings_read_coord_data(gc_state.modal.coord_system.id, &gc_state.modal.coord_system.xyz)))
 800abf4:	4b23      	ldr	r3, [pc, #140]	; (800ac84 <gc_execute_block+0x4f64>)
 800abf6:	7d1b      	ldrb	r3, [r3, #20]
 800abf8:	4928      	ldr	r1, [pc, #160]	; (800ac9c <gc_execute_block+0x4f7c>)
 800abfa:	4618      	mov	r0, r3
 800abfc:	f00f fb00 	bl	801a200 <settings_read_coord_data>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f083 0301 	eor.w	r3, r3, #1
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <gc_execute_block+0x4ef0>
                    FAIL(Status_SettingReadFail);
 800ac0c:	2307      	movs	r3, #7
 800ac0e:	e063      	b.n	800acd8 <gc_execute_block+0x4fb8>

#if COMPATIBILITY_LEVEL <= 1
                float g92_offset_stored[N_AXIS];
                if(settings_read_coord_data(CoordinateSystem_G92, &g92_offset_stored) && !isequal_position_vector(g92_offset_stored, gc_state.g92_coord_offset))
 800ac10:	f107 0308 	add.w	r3, r7, #8
 800ac14:	4619      	mov	r1, r3
 800ac16:	200b      	movs	r0, #11
 800ac18:	f00f faf2 	bl	801a200 <settings_read_coord_data>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00d      	beq.n	800ac3e <gc_execute_block+0x4f1e>
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	220c      	movs	r2, #12
 800ac28:	491d      	ldr	r1, [pc, #116]	; (800aca0 <gc_execute_block+0x4f80>)
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f01b f8f7 	bl	8025e1e <memcmp>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <gc_execute_block+0x4f1e>
                    settings_write_coord_data(CoordinateSystem_G92, &gc_state.g92_coord_offset); // Save G92 offsets to non-volatile storage
 800ac36:	491a      	ldr	r1, [pc, #104]	; (800aca0 <gc_execute_block+0x4f80>)
 800ac38:	200b      	movs	r0, #11
 800ac3a:	f00f fab1 	bl	801a1a0 <settings_write_coord_data>
#endif

                system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 800ac3e:	f016 fbbd 	bl	80213bc <system_flag_wco_change>

                spindle_all_off();
 800ac42:	f011 fccd 	bl	801c5e0 <spindle_all_off>
                hal.coolant.set_state(gc_state.modal.coolant);
 800ac46:	4b12      	ldr	r3, [pc, #72]	; (800ac90 <gc_execute_block+0x4f70>)
 800ac48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4a:	4a0e      	ldr	r2, [pc, #56]	; (800ac84 <gc_execute_block+0x4f64>)
 800ac4c:	7e50      	ldrb	r0, [r2, #25]
 800ac4e:	4798      	blx	r3
                system_add_rt_report(Report_Spindle); // Set to report change
 800ac50:	2010      	movs	r0, #16
 800ac52:	f016 fcb9 	bl	80215c8 <system_add_rt_report>
                system_add_rt_report(Report_Coolant); // immediately.
 800ac56:	2020      	movs	r0, #32
 800ac58:	f016 fcb6 	bl	80215c8 <system_add_rt_report>
            }

            if(grbl.on_program_completed)
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <gc_execute_block+0x4f6c>)
 800ac5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d02d      	beq.n	800acc0 <gc_execute_block+0x4fa0>
                grbl.on_program_completed(gc_state.modal.program_flow, check_mode);
 800ac64:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <gc_execute_block+0x4f6c>)
 800ac66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac68:	4a06      	ldr	r2, [pc, #24]	; (800ac84 <gc_execute_block+0x4f64>)
 800ac6a:	7e12      	ldrb	r2, [r2, #24]
 800ac6c:	f897 10b7 	ldrb.w	r1, [r7, #183]	; 0xb7
 800ac70:	4610      	mov	r0, r2
 800ac72:	4798      	blx	r3

            // Clear any pending output commands
            while(output_commands) {
 800ac74:	e024      	b.n	800acc0 <gc_execute_block+0x4fa0>
 800ac76:	bf00      	nop
 800ac78:	200015a8 	.word	0x200015a8
 800ac7c:	200013dc 	.word	0x200013dc
 800ac80:	20001470 	.word	0x20001470
 800ac84:	2000137c 	.word	0x2000137c
 800ac88:	20001520 	.word	0x20001520
 800ac8c:	200015b8 	.word	0x200015b8
 800ac90:	200016a0 	.word	0x200016a0
 800ac94:	20001568 	.word	0x20001568
 800ac98:	20001cf0 	.word	0x20001cf0
 800ac9c:	20001384 	.word	0x20001384
 800aca0:	200013f8 	.word	0x200013f8
                output_command_t *next = output_commands->next;
 800aca4:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <gc_execute_block+0x4fc4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                free(output_commands);
 800acae:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <gc_execute_block+0x4fc4>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f01a fd68 	bl	8025788 <free>
                output_commands = next;
 800acb8:	4a0a      	ldr	r2, [pc, #40]	; (800ace4 <gc_execute_block+0x4fc4>)
 800acba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800acbe:	6013      	str	r3, [r2, #0]
            while(output_commands) {
 800acc0:	4b08      	ldr	r3, [pc, #32]	; (800ace4 <gc_execute_block+0x4fc4>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1ed      	bne.n	800aca4 <gc_execute_block+0x4f84>
            }

            grbl.report.feedback_message(Message_ProgramEnd);
 800acc8:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <gc_execute_block+0x4fc8>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	2008      	movs	r0, #8
 800acce:	4798      	blx	r3
        }
        gc_state.modal.program_flow = ProgramFlow_Running; // Reset program flow.
 800acd0:	4b06      	ldr	r3, [pc, #24]	; (800acec <gc_execute_block+0x4fcc>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	761a      	strb	r2, [r3, #24]
    } while(ngc_param_count);
#endif

    // TODO: % to denote start of program.

    return Status_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	37f0      	adds	r7, #240	; 0xf0
 800acdc:	46bd      	mov	sp, r7
 800acde:	ecbd 8b02 	vpop	{d8}
 800ace2:	bdb0      	pop	{r4, r5, r7, pc}
 800ace4:	20001458 	.word	0x20001458
 800ace8:	200015b8 	.word	0x200015b8
 800acec:	2000137c 	.word	0x2000137c

0800acf0 <dummy_bool_handler>:
#ifdef KINEMATICS_API
kinematics_t kinematics;
#endif

void dummy_bool_handler (bool arg)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	71fb      	strb	r3, [r7, #7]
    // NOOP
}
 800acfa:	bf00      	nop
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <reset_handler>:

void reset_handler (void)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	af00      	add	r7, sp, #0
    report_init_fns();
 800ad0c:	f00d fb12 	bl	8018334 <report_init_fns>

    grbl.on_macro_return = NULL;
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <reset_handler+0x14>)
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
 800ad18:	bf00      	nop
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	200015b8 	.word	0x200015b8

0800ad20 <dummy_irq_claim>:

static bool dummy_irq_claim (irq_type_t irq, uint_fast8_t id, irq_callback_ptr callback)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	73fb      	strb	r3, [r7, #15]
    return false;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <report_driver_error>:

static void report_driver_error (sys_state_t state)
{
 800ad3c:	b5b0      	push	{r4, r5, r7, lr}
 800ad3e:	b08c      	sub	sp, #48	; 0x30
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
    char msg[40];

    driver.ok = ~driver.ok;
 800ad44:	4b1a      	ldr	r3, [pc, #104]	; (800adb0 <report_driver_error+0x74>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	43db      	mvns	r3, r3
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	4b18      	ldr	r3, [pc, #96]	; (800adb0 <report_driver_error+0x74>)
 800ad4e:	701a      	strb	r2, [r3, #0]
    strcpy(msg, "Fatal: Incompatible driver (");
 800ad50:	f107 0308 	add.w	r3, r7, #8
 800ad54:	4a17      	ldr	r2, [pc, #92]	; (800adb4 <report_driver_error+0x78>)
 800ad56:	461c      	mov	r4, r3
 800ad58:	4615      	mov	r5, r2
 800ad5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ad62:	c407      	stmia	r4!, {r0, r1, r2}
 800ad64:	7023      	strb	r3, [r4, #0]
    strcat(msg, uitoa(driver.ok));
 800ad66:	4b12      	ldr	r3, [pc, #72]	; (800adb0 <report_driver_error+0x74>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f004 ffd6 	bl	800fd1c <uitoa>
 800ad70:	4602      	mov	r2, r0
 800ad72:	f107 0308 	add.w	r3, r7, #8
 800ad76:	4611      	mov	r1, r2
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f01b f868 	bl	8025e4e <strcat>
    strcat(msg, ")");
 800ad7e:	f107 0308 	add.w	r3, r7, #8
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7f5 fa82 	bl	800028c <strlen>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f107 0308 	add.w	r3, r7, #8
 800ad90:	4413      	add	r3, r2
 800ad92:	4909      	ldr	r1, [pc, #36]	; (800adb8 <report_driver_error+0x7c>)
 800ad94:	461a      	mov	r2, r3
 800ad96:	460b      	mov	r3, r1
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	8013      	strh	r3, [r2, #0]

    report_message(msg, Message_Plain);
 800ad9c:	f107 0308 	add.w	r3, r7, #8
 800ada0:	2100      	movs	r1, #0
 800ada2:	4618      	mov	r0, r3
 800ada4:	f009 f8e6 	bl	8013f74 <report_message>
}
 800ada8:	bf00      	nop
 800adaa:	3730      	adds	r7, #48	; 0x30
 800adac:	46bd      	mov	sp, r7
 800adae:	bdb0      	pop	{r4, r5, r7, pc}
 800adb0:	200003b4 	.word	0x200003b4
 800adb4:	0802ad74 	.word	0x0802ad74
 800adb8:	0802ad94 	.word	0x0802ad94

0800adbc <auto_realtime_report>:

static void auto_realtime_report (sys_state_t state)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
    static uint32_t ms = 0;

    if(sys.flags.auto_reporting) {
 800adc4:	4b11      	ldr	r3, [pc, #68]	; (800ae0c <auto_realtime_report+0x50>)
 800adc6:	7ddb      	ldrb	r3, [r3, #23]
 800adc8:	f003 0302 	and.w	r3, r3, #2
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b00      	cmp	r3, #0
 800add0:	d014      	beq.n	800adfc <auto_realtime_report+0x40>

        uint32_t t = hal.get_elapsed_ticks();
 800add2:	4b0f      	ldr	r3, [pc, #60]	; (800ae10 <auto_realtime_report+0x54>)
 800add4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800add8:	4798      	blx	r3
 800adda:	60f8      	str	r0, [r7, #12]

        if(t - ms >= settings.report_interval) {
 800addc:	4b0d      	ldr	r3, [pc, #52]	; (800ae14 <auto_realtime_report+0x58>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	4a0c      	ldr	r2, [pc, #48]	; (800ae18 <auto_realtime_report+0x5c>)
 800ade6:	8a92      	ldrh	r2, [r2, #20]
 800ade8:	4293      	cmp	r3, r2
 800adea:	d307      	bcc.n	800adfc <auto_realtime_report+0x40>
            ms = t;
 800adec:	4a09      	ldr	r2, [pc, #36]	; (800ae14 <auto_realtime_report+0x58>)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6013      	str	r3, [r2, #0]
            system_set_exec_state_flag(EXEC_STATUS_REPORT);
 800adf2:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <auto_realtime_report+0x54>)
 800adf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf6:	2101      	movs	r1, #1
 800adf8:	4808      	ldr	r0, [pc, #32]	; (800ae1c <auto_realtime_report+0x60>)
 800adfa:	4798      	blx	r3
        }
    }

    on_execute_realtime(state);
 800adfc:	4b08      	ldr	r3, [pc, #32]	; (800ae20 <auto_realtime_report+0x64>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	4798      	blx	r3
}
 800ae04:	bf00      	nop
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	20001520 	.word	0x20001520
 800ae10:	200016a0 	.word	0x200016a0
 800ae14:	20001858 	.word	0x20001858
 800ae18:	20001cf0 	.word	0x20001cf0
 800ae1c:	20001568 	.word	0x20001568
 800ae20:	20001854 	.word	0x20001854

0800ae24 <get_homing_status>:

// "Wire" homing signals to limit signals, used when max limit inputs not available.
ISR_CODE static home_signals_t ISR_FUNC(get_homing_status)(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
    home_signals_t home;
    limit_signals_t limits = hal.limits.get_state();
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <get_homing_status+0x34>)
 800ae2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2e:	4798      	blx	r3
 800ae30:	4603      	mov	r3, r0
 800ae32:	607b      	str	r3, [r7, #4]

    home.a.value = limits.min.value;
 800ae34:	793b      	ldrb	r3, [r7, #4]
 800ae36:	723b      	strb	r3, [r7, #8]
    home.b.value = limits.min2.value;
 800ae38:	79bb      	ldrb	r3, [r7, #6]
 800ae3a:	727b      	strb	r3, [r7, #9]

    return home;
 800ae3c:	893b      	ldrh	r3, [r7, #8]
 800ae3e:	81bb      	strh	r3, [r7, #12]
 800ae40:	2300      	movs	r3, #0
 800ae42:	7b3a      	ldrb	r2, [r7, #12]
 800ae44:	f362 0307 	bfi	r3, r2, #0, #8
 800ae48:	7b7a      	ldrb	r2, [r7, #13]
 800ae4a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	200016a0 	.word	0x200016a0

0800ae5c <get_homing_status2>:

// "Wire" homing signals to limit signals, used when max limit inputs available.
ISR_CODE static home_signals_t ISR_FUNC(get_homing_status2)(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
    home_signals_t home;
    limit_signals_t source = xbar_get_homing_source(), limits = hal.limits.get_state();
 800ae62:	f7fa fa45 	bl	80052f0 <xbar_get_homing_source>
 800ae66:	4603      	mov	r3, r0
 800ae68:	607b      	str	r3, [r7, #4]
 800ae6a:	4b14      	ldr	r3, [pc, #80]	; (800aebc <get_homing_status2+0x60>)
 800ae6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae6e:	4798      	blx	r3
 800ae70:	4603      	mov	r3, r0
 800ae72:	603b      	str	r3, [r7, #0]

    home.a.value = (limits.min.value & source.min.mask) | (limits.max.value & source.max.mask);
 800ae74:	783a      	ldrb	r2, [r7, #0]
 800ae76:	793b      	ldrb	r3, [r7, #4]
 800ae78:	4013      	ands	r3, r2
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	7879      	ldrb	r1, [r7, #1]
 800ae7e:	797b      	ldrb	r3, [r7, #5]
 800ae80:	400b      	ands	r3, r1
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	4313      	orrs	r3, r2
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	723b      	strb	r3, [r7, #8]
    home.b.value = (limits.min2.value & source.min2.mask) | (limits.max2.value & source.max2.mask);
 800ae8a:	78ba      	ldrb	r2, [r7, #2]
 800ae8c:	79bb      	ldrb	r3, [r7, #6]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	78f9      	ldrb	r1, [r7, #3]
 800ae94:	79fb      	ldrb	r3, [r7, #7]
 800ae96:	400b      	ands	r3, r1
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	727b      	strb	r3, [r7, #9]

    return home;
 800aea0:	893b      	ldrh	r3, [r7, #8]
 800aea2:	81bb      	strh	r3, [r7, #12]
 800aea4:	2300      	movs	r3, #0
 800aea6:	7b3a      	ldrb	r2, [r7, #12]
 800aea8:	f362 0307 	bfi	r3, r2, #0, #8
 800aeac:	7b7a      	ldrb	r2, [r7, #13]
 800aeae:	f362 230f 	bfi	r3, r2, #8, #8
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	200016a0 	.word	0x200016a0

0800aec0 <grbl_enter>:

// main entry point

int grbl_enter (void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
    assert(NVS_ADDR_PARAMETERS + N_CoordinateSystems * (sizeof(coord_data_t) + NVS_CRC_BYTES) < NVS_ADDR_STARTUP_BLOCK);
    assert(NVS_ADDR_STARTUP_BLOCK + N_STARTUP_LINE * (sizeof(stored_line_t) + NVS_CRC_BYTES) < NVS_ADDR_BUILD_INFO);

    bool looping = true;
 800aec6:	2301      	movs	r3, #1
 800aec8:	71fb      	strb	r3, [r7, #7]

    // Clear all and set some core function pointers
    memset(&grbl, 0, sizeof(grbl_t));
 800aeca:	22e8      	movs	r2, #232	; 0xe8
 800aecc:	2100      	movs	r1, #0
 800aece:	48a2      	ldr	r0, [pc, #648]	; (800b158 <grbl_enter+0x298>)
 800aed0:	f01a ffb5 	bl	8025e3e <memset>
    grbl.on_execute_realtime = grbl.on_execute_delay = protocol_execute_noop;
 800aed4:	4ba0      	ldr	r3, [pc, #640]	; (800b158 <grbl_enter+0x298>)
 800aed6:	4aa1      	ldr	r2, [pc, #644]	; (800b15c <grbl_enter+0x29c>)
 800aed8:	639a      	str	r2, [r3, #56]	; 0x38
 800aeda:	4b9f      	ldr	r3, [pc, #636]	; (800b158 <grbl_enter+0x298>)
 800aedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aede:	4a9e      	ldr	r2, [pc, #632]	; (800b158 <grbl_enter+0x298>)
 800aee0:	6353      	str	r3, [r2, #52]	; 0x34
    grbl.enqueue_gcode = protocol_enqueue_gcode;
 800aee2:	4b9d      	ldr	r3, [pc, #628]	; (800b158 <grbl_enter+0x298>)
 800aee4:	4a9e      	ldr	r2, [pc, #632]	; (800b160 <grbl_enter+0x2a0>)
 800aee6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    grbl.enqueue_realtime_command = stream_enqueue_realtime_command;
 800aeea:	4b9b      	ldr	r3, [pc, #620]	; (800b158 <grbl_enter+0x298>)
 800aeec:	4a9d      	ldr	r2, [pc, #628]	; (800b164 <grbl_enter+0x2a4>)
 800aeee:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    grbl.on_report_options = dummy_bool_handler;
 800aef2:	4b99      	ldr	r3, [pc, #612]	; (800b158 <grbl_enter+0x298>)
 800aef4:	4a9c      	ldr	r2, [pc, #624]	; (800b168 <grbl_enter+0x2a8>)
 800aef6:	641a      	str	r2, [r3, #64]	; 0x40
    grbl.on_report_command_help = system_command_help;
 800aef8:	4b97      	ldr	r3, [pc, #604]	; (800b158 <grbl_enter+0x298>)
 800aefa:	4a9c      	ldr	r2, [pc, #624]	; (800b16c <grbl_enter+0x2ac>)
 800aefc:	645a      	str	r2, [r3, #68]	; 0x44
    grbl.on_get_alarms = alarms_get_details;
 800aefe:	4b96      	ldr	r3, [pc, #600]	; (800b158 <grbl_enter+0x298>)
 800af00:	4a9b      	ldr	r2, [pc, #620]	; (800b170 <grbl_enter+0x2b0>)
 800af02:	655a      	str	r2, [r3, #84]	; 0x54
    grbl.on_get_errors = errors_get_details;
 800af04:	4b94      	ldr	r3, [pc, #592]	; (800b158 <grbl_enter+0x298>)
 800af06:	4a9b      	ldr	r2, [pc, #620]	; (800b174 <grbl_enter+0x2b4>)
 800af08:	659a      	str	r2, [r3, #88]	; 0x58
    grbl.on_get_settings = settings_get_details;
 800af0a:	4b93      	ldr	r3, [pc, #588]	; (800b158 <grbl_enter+0x298>)
 800af0c:	4a9a      	ldr	r2, [pc, #616]	; (800b178 <grbl_enter+0x2b8>)
 800af0e:	65da      	str	r2, [r3, #92]	; 0x5c

    // Clear all and set some HAL function pointers
    memset(&hal, 0, sizeof(grbl_hal_t));
 800af10:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800af14:	2100      	movs	r1, #0
 800af16:	4899      	ldr	r0, [pc, #612]	; (800b17c <grbl_enter+0x2bc>)
 800af18:	f01a ff91 	bl	8025e3e <memset>
    hal.version = HAL_VERSION; // Update when signatures and/or contract is changed - driver_init() should fail
 800af1c:	4b97      	ldr	r3, [pc, #604]	; (800b17c <grbl_enter+0x2bc>)
 800af1e:	220a      	movs	r2, #10
 800af20:	601a      	str	r2, [r3, #0]
    hal.driver_reset = reset_handler;
 800af22:	4b96      	ldr	r3, [pc, #600]	; (800b17c <grbl_enter+0x2bc>)
 800af24:	4a96      	ldr	r2, [pc, #600]	; (800b180 <grbl_enter+0x2c0>)
 800af26:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    hal.irq_enable = dummy_handler;
 800af2a:	4b94      	ldr	r3, [pc, #592]	; (800b17c <grbl_enter+0x2bc>)
 800af2c:	4a95      	ldr	r2, [pc, #596]	; (800b184 <grbl_enter+0x2c4>)
 800af2e:	649a      	str	r2, [r3, #72]	; 0x48
    hal.irq_disable = dummy_handler;
 800af30:	4b92      	ldr	r3, [pc, #584]	; (800b17c <grbl_enter+0x2bc>)
 800af32:	4a94      	ldr	r2, [pc, #592]	; (800b184 <grbl_enter+0x2c4>)
 800af34:	64da      	str	r2, [r3, #76]	; 0x4c
    hal.irq_claim = dummy_irq_claim;
 800af36:	4b91      	ldr	r3, [pc, #580]	; (800b17c <grbl_enter+0x2bc>)
 800af38:	4a93      	ldr	r2, [pc, #588]	; (800b188 <grbl_enter+0x2c8>)
 800af3a:	651a      	str	r2, [r3, #80]	; 0x50
    hal.nvs.size = GRBL_NVS_SIZE;
 800af3c:	4b8f      	ldr	r3, [pc, #572]	; (800b17c <grbl_enter+0x2bc>)
 800af3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af42:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    hal.limits.interrupt_callback = limit_interrupt_handler;
 800af46:	4b8d      	ldr	r3, [pc, #564]	; (800b17c <grbl_enter+0x2bc>)
 800af48:	4a90      	ldr	r2, [pc, #576]	; (800b18c <grbl_enter+0x2cc>)
 800af4a:	65da      	str	r2, [r3, #92]	; 0x5c
    hal.control.interrupt_callback = control_interrupt_handler;
 800af4c:	4b8b      	ldr	r3, [pc, #556]	; (800b17c <grbl_enter+0x2bc>)
 800af4e:	4a90      	ldr	r2, [pc, #576]	; (800b190 <grbl_enter+0x2d0>)
 800af50:	66da      	str	r2, [r3, #108]	; 0x6c
    hal.stepper.interrupt_callback = stepper_driver_interrupt_handler;
 800af52:	4b8a      	ldr	r3, [pc, #552]	; (800b17c <grbl_enter+0x2bc>)
 800af54:	4a8f      	ldr	r2, [pc, #572]	; (800b194 <grbl_enter+0x2d4>)
 800af56:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hal.stream_blocking_callback = stream_tx_blocking;
 800af5a:	4b88      	ldr	r3, [pc, #544]	; (800b17c <grbl_enter+0x2bc>)
 800af5c:	4a8e      	ldr	r2, [pc, #568]	; (800b198 <grbl_enter+0x2d8>)
 800af5e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hal.signals_cap.reset = hal.signals_cap.feed_hold = hal.signals_cap.cycle_start = On;
 800af62:	4a86      	ldr	r2, [pc, #536]	; (800b17c <grbl_enter+0x2bc>)
 800af64:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 800af68:	f043 0304 	orr.w	r3, r3, #4
 800af6c:	f882 31ac 	strb.w	r3, [r2, #428]	; 0x1ac
 800af70:	4b82      	ldr	r3, [pc, #520]	; (800b17c <grbl_enter+0x2bc>)
 800af72:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 800af76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800af7a:	b2d9      	uxtb	r1, r3
 800af7c:	4a7f      	ldr	r2, [pc, #508]	; (800b17c <grbl_enter+0x2bc>)
 800af7e:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 800af82:	f361 0341 	bfi	r3, r1, #1, #1
 800af86:	f882 31ac 	strb.w	r3, [r2, #428]	; 0x1ac
 800af8a:	4b7c      	ldr	r3, [pc, #496]	; (800b17c <grbl_enter+0x2bc>)
 800af8c:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 800af90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800af94:	b2d9      	uxtb	r1, r3
 800af96:	4a79      	ldr	r2, [pc, #484]	; (800b17c <grbl_enter+0x2bc>)
 800af98:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 800af9c:	f361 0300 	bfi	r3, r1, #0, #1
 800afa0:	f882 31ac 	strb.w	r3, [r2, #428]	; 0x1ac

    sys.cold_start = true;
 800afa4:	4b7d      	ldr	r3, [pc, #500]	; (800b19c <grbl_enter+0x2dc>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    limits_init();
 800afac:	f002 f9b6 	bl	800d31c <limits_init>

#if NVSDATA_BUFFER_ENABLE
    nvs_buffer_alloc(); // Allocate memory block for NVS buffer
 800afb0:	f005 fca6 	bl	8010900 <nvs_buffer_alloc>
#endif

    settings_clear();
 800afb4:	f010 fa0e 	bl	801b3d4 <settings_clear>
    report_init_fns();
 800afb8:	f00d f9bc 	bl	8018334 <report_init_fns>

#ifdef KINEMATICS_API
    memset(&kinematics, 0, sizeof(kinematics_t));
#endif

    driver.init = driver_init();
 800afbc:	f7f7 fcb8 	bl	8002930 <driver_init>
 800afc0:	4603      	mov	r3, r0
 800afc2:	4619      	mov	r1, r3
 800afc4:	4a76      	ldr	r2, [pc, #472]	; (800b1a0 <grbl_enter+0x2e0>)
 800afc6:	7813      	ldrb	r3, [r2, #0]
 800afc8:	f361 0300 	bfi	r3, r1, #0, #1
 800afcc:	7013      	strb	r3, [r2, #0]
#if POLAR_ROBOT
    polar_init();
#endif

  #if NVSDATA_BUFFER_ENABLE
    nvs_buffer_init();
 800afce:	f005 fccb 	bl	8010968 <nvs_buffer_init>
  #endif
    settings_init(); // Load settings from non-volatile storage
 800afd2:	f010 fa11 	bl	801b3f8 <settings_init>

    memset(sys.position, 0, sizeof(sys.position)); // Clear machine position.
 800afd6:	220c      	movs	r2, #12
 800afd8:	2100      	movs	r1, #0
 800afda:	4872      	ldr	r0, [pc, #456]	; (800b1a4 <grbl_enter+0x2e4>)
 800afdc:	f01a ff2f 	bl	8025e3e <memset>

// check and configure driver

#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    driver.amass = hal.driver_cap.amass_level >= MAX_AMASS_LEVEL;
 800afe0:	4b66      	ldr	r3, [pc, #408]	; (800b17c <grbl_enter+0x2bc>)
 800afe2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800afe6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2bc0      	cmp	r3, #192	; 0xc0
 800afee:	bf0c      	ite	eq
 800aff0:	2301      	moveq	r3, #1
 800aff2:	2300      	movne	r3, #0
 800aff4:	b2d9      	uxtb	r1, r3
 800aff6:	4a6a      	ldr	r2, [pc, #424]	; (800b1a0 <grbl_enter+0x2e0>)
 800aff8:	7813      	ldrb	r3, [r2, #0]
 800affa:	f361 03c3 	bfi	r3, r1, #3, #1
 800affe:	7013      	strb	r3, [r2, #0]
    hal.driver_cap.amass_level = MAX_AMASS_LEVEL;
 800b000:	4a5e      	ldr	r2, [pc, #376]	; (800b17c <grbl_enter+0x2bc>)
 800b002:	f892 31a8 	ldrb.w	r3, [r2, #424]	; 0x1a8
 800b006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b00a:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8
#else
    hal.driver_cap.amass_level = 0;
#endif

#ifdef DEFAULT_STEP_PULSE_DELAY
    driver.pulse_delay = hal.driver_cap.step_pulse_delay;
 800b00e:	4b5b      	ldr	r3, [pc, #364]	; (800b17c <grbl_enter+0x2bc>)
 800b010:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800b014:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b018:	b2d9      	uxtb	r1, r3
 800b01a:	4a61      	ldr	r2, [pc, #388]	; (800b1a0 <grbl_enter+0x2e0>)
 800b01c:	7813      	ldrb	r3, [r2, #0]
 800b01e:	f361 1304 	bfi	r3, r1, #4, #1
 800b022:	7013      	strb	r3, [r2, #0]
/*
#if AXIS_N_SETTINGS > 4
    driver_ok = driver_ok & hal.driver_cap.axes >= AXIS_N_SETTINGS;
#endif
*/
    sys.mpg_mode = false;
 800b024:	4b5d      	ldr	r3, [pc, #372]	; (800b19c <grbl_enter+0x2dc>)
 800b026:	2200      	movs	r2, #0
 800b028:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

    if(driver.ok == 0xFF)
 800b02c:	4b5c      	ldr	r3, [pc, #368]	; (800b1a0 <grbl_enter+0x2e0>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2bff      	cmp	r3, #255	; 0xff
 800b032:	d10a      	bne.n	800b04a <grbl_enter+0x18a>
        driver.setup = hal.driver_setup(&settings);
 800b034:	4b51      	ldr	r3, [pc, #324]	; (800b17c <grbl_enter+0x2bc>)
 800b036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b038:	485b      	ldr	r0, [pc, #364]	; (800b1a8 <grbl_enter+0x2e8>)
 800b03a:	4798      	blx	r3
 800b03c:	4603      	mov	r3, r0
 800b03e:	4619      	mov	r1, r3
 800b040:	4a57      	ldr	r2, [pc, #348]	; (800b1a0 <grbl_enter+0x2e0>)
 800b042:	7813      	ldrb	r3, [r2, #0]
 800b044:	f361 0341 	bfi	r3, r1, #1, #1
 800b048:	7013      	strb	r3, [r2, #0]

    if((driver.spindle = spindle_select(settings.spindle.flags.type))) {
 800b04a:	4b57      	ldr	r3, [pc, #348]	; (800b1a8 <grbl_enter+0x2e8>)
 800b04c:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 800b050:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800b054:	b2db      	uxtb	r3, r3
 800b056:	b25b      	sxtb	r3, r3
 800b058:	4618      	mov	r0, r3
 800b05a:	f010 fd71 	bl	801bb40 <spindle_select>
 800b05e:	4603      	mov	r3, r0
 800b060:	4619      	mov	r1, r3
 800b062:	4a4f      	ldr	r2, [pc, #316]	; (800b1a0 <grbl_enter+0x2e0>)
 800b064:	7813      	ldrb	r3, [r2, #0]
 800b066:	f361 0382 	bfi	r3, r1, #2, #1
 800b06a:	7013      	strb	r3, [r2, #0]
 800b06c:	4b4c      	ldr	r3, [pc, #304]	; (800b1a0 <grbl_enter+0x2e0>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b00      	cmp	r3, #0
 800b078:	d017      	beq.n	800b0aa <grbl_enter+0x1ea>
        spindle_ptrs_t *spindle = spindle_get(0);
 800b07a:	2000      	movs	r0, #0
 800b07c:	f010 ffac 	bl	801bfd8 <spindle_get>
 800b080:	6038      	str	r0, [r7, #0]
        driver.spindle = spindle->get_pwm == NULL || spindle->update_pwm != NULL;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b086:	2b00      	cmp	r3, #0
 800b088:	d003      	beq.n	800b092 <grbl_enter+0x1d2>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <grbl_enter+0x1d6>
 800b092:	2301      	movs	r3, #1
 800b094:	e000      	b.n	800b098 <grbl_enter+0x1d8>
 800b096:	2300      	movs	r3, #0
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	b2d9      	uxtb	r1, r3
 800b09e:	4a40      	ldr	r2, [pc, #256]	; (800b1a0 <grbl_enter+0x2e0>)
 800b0a0:	7813      	ldrb	r3, [r2, #0]
 800b0a2:	f361 0382 	bfi	r3, r1, #2, #1
 800b0a6:	7013      	strb	r3, [r2, #0]
 800b0a8:	e00c      	b.n	800b0c4 <grbl_enter+0x204>
    } else
        driver.spindle = spindle_select(spindle_add_null());
 800b0aa:	f010 fff7 	bl	801c09c <spindle_add_null>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f010 fd45 	bl	801bb40 <spindle_select>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4a39      	ldr	r2, [pc, #228]	; (800b1a0 <grbl_enter+0x2e0>)
 800b0bc:	7813      	ldrb	r3, [r2, #0]
 800b0be:	f361 0382 	bfi	r3, r1, #2, #1
 800b0c2:	7013      	strb	r3, [r2, #0]

    if(driver.ok != 0xFF) {
 800b0c4:	4b36      	ldr	r3, [pc, #216]	; (800b1a0 <grbl_enter+0x2e0>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2bff      	cmp	r3, #255	; 0xff
 800b0ca:	d006      	beq.n	800b0da <grbl_enter+0x21a>
        sys.alarm = Alarm_SelftestFailed;
 800b0cc:	4b33      	ldr	r3, [pc, #204]	; (800b19c <grbl_enter+0x2dc>)
 800b0ce:	2210      	movs	r2, #16
 800b0d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        protocol_enqueue_rt_command(report_driver_error);
 800b0d4:	4835      	ldr	r0, [pc, #212]	; (800b1ac <grbl_enter+0x2ec>)
 800b0d6:	f008 fbbf 	bl	8013858 <protocol_enqueue_rt_command>
    }

    hal.stepper.enable(settings.steppers.deenergize);
 800b0da:	4b28      	ldr	r3, [pc, #160]	; (800b17c <grbl_enter+0x2bc>)
 800b0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e0:	4a31      	ldr	r2, [pc, #196]	; (800b1a8 <grbl_enter+0x2e8>)
 800b0e2:	f892 00ec 	ldrb.w	r0, [r2, #236]	; 0xec
 800b0e6:	4798      	blx	r3

    spindle_all_off();
 800b0e8:	f011 fa7a 	bl	801c5e0 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 800b0ec:	4b23      	ldr	r3, [pc, #140]	; (800b17c <grbl_enter+0x2bc>)
 800b0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	4798      	blx	r3

    if(hal.get_position)
 800b0f6:	4b21      	ldr	r3, [pc, #132]	; (800b17c <grbl_enter+0x2bc>)
 800b0f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d004      	beq.n	800b10a <grbl_enter+0x24a>
        hal.get_position(&sys.position); // TODO: restore on abort when returns true?
 800b100:	4b1e      	ldr	r3, [pc, #120]	; (800b17c <grbl_enter+0x2bc>)
 800b102:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800b106:	4827      	ldr	r0, [pc, #156]	; (800b1a4 <grbl_enter+0x2e4>)
 800b108:	4798      	blx	r3

#if ENABLE_BACKLASH_COMPENSATION
    mc_backlash_init((axes_signals_t){AXES_BITMASK});
#endif

    sys.driver_started = sys.alarm != Alarm_SelftestFailed;
 800b10a:	4b24      	ldr	r3, [pc, #144]	; (800b19c <grbl_enter+0x2dc>)
 800b10c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b110:	2b10      	cmp	r3, #16
 800b112:	bf14      	ite	ne
 800b114:	2301      	movne	r3, #1
 800b116:	2300      	moveq	r3, #0
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	4b20      	ldr	r3, [pc, #128]	; (800b19c <grbl_enter+0x2dc>)
 800b11c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

    // "Wire" homing switches to limit switches if not provided by the driver.
    if(hal.homing.get_state == NULL)
 800b120:	4b16      	ldr	r3, [pc, #88]	; (800b17c <grbl_enter+0x2bc>)
 800b122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b124:	2b00      	cmp	r3, #0
 800b126:	d109      	bne.n	800b13c <grbl_enter+0x27c>
        hal.homing.get_state = hal.limits_cap.max.mask ? get_homing_status2 : get_homing_status;
 800b128:	4b14      	ldr	r3, [pc, #80]	; (800b17c <grbl_enter+0x2bc>)
 800b12a:	f893 31af 	ldrb.w	r3, [r3, #431]	; 0x1af
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <grbl_enter+0x276>
 800b132:	4b1f      	ldr	r3, [pc, #124]	; (800b1b0 <grbl_enter+0x2f0>)
 800b134:	e000      	b.n	800b138 <grbl_enter+0x278>
 800b136:	4b1f      	ldr	r3, [pc, #124]	; (800b1b4 <grbl_enter+0x2f4>)
 800b138:	4a10      	ldr	r2, [pc, #64]	; (800b17c <grbl_enter+0x2bc>)
 800b13a:	6613      	str	r3, [r2, #96]	; 0x60

    if(settings.report_interval) {
 800b13c:	4b1a      	ldr	r3, [pc, #104]	; (800b1a8 <grbl_enter+0x2e8>)
 800b13e:	8a9b      	ldrh	r3, [r3, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 8122 	beq.w	800b38a <grbl_enter+0x4ca>
        on_execute_realtime = grbl.on_execute_realtime;
 800b146:	4b04      	ldr	r3, [pc, #16]	; (800b158 <grbl_enter+0x298>)
 800b148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14a:	4a1b      	ldr	r2, [pc, #108]	; (800b1b8 <grbl_enter+0x2f8>)
 800b14c:	6013      	str	r3, [r2, #0]
        grbl.on_execute_realtime = auto_realtime_report;
 800b14e:	4b02      	ldr	r3, [pc, #8]	; (800b158 <grbl_enter+0x298>)
 800b150:	4a1a      	ldr	r2, [pc, #104]	; (800b1bc <grbl_enter+0x2fc>)
 800b152:	635a      	str	r2, [r3, #52]	; 0x34
    }

    // Grbl initialization loop upon power-up or a system abort. For the latter, all processes
    // will return to this loop to be cleanly re-initialized.
    while(looping) {
 800b154:	e119      	b.n	800b38a <grbl_enter+0x4ca>
 800b156:	bf00      	nop
 800b158:	200015b8 	.word	0x200015b8
 800b15c:	0801392d 	.word	0x0801392d
 800b160:	08011ea9 	.word	0x08011ea9
 800b164:	0801f735 	.word	0x0801f735
 800b168:	0800acf1 	.word	0x0800acf1
 800b16c:	08020311 	.word	0x08020311
 800b170:	08005189 	.word	0x08005189
 800b174:	080053b1 	.word	0x080053b1
 800b178:	080183f9 	.word	0x080183f9
 800b17c:	200016a0 	.word	0x200016a0
 800b180:	0800ad09 	.word	0x0800ad09
 800b184:	080105d3 	.word	0x080105d3
 800b188:	0800ad21 	.word	0x0800ad21
 800b18c:	0800b995 	.word	0x0800b995
 800b190:	08020039 	.word	0x08020039
 800b194:	0801df85 	.word	0x0801df85
 800b198:	0801f595 	.word	0x0801f595
 800b19c:	20001520 	.word	0x20001520
 800b1a0:	200003b4 	.word	0x200003b4
 800b1a4:	200015a8 	.word	0x200015a8
 800b1a8:	20001cf0 	.word	0x20001cf0
 800b1ac:	0800ad3d 	.word	0x0800ad3d
 800b1b0:	0800ae5d 	.word	0x0800ae5d
 800b1b4:	0800ae25 	.word	0x0800ae25
 800b1b8:	20001854 	.word	0x20001854
 800b1bc:	0800adbd 	.word	0x0800adbd

        spindle_num_t spindle_num = N_SYS_SPINDLE;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	71bb      	strb	r3, [r7, #6]

        // Reset report entry points
        report_init_fns();
 800b1c4:	f00d f8b6 	bl	8018334 <report_init_fns>

        if(!sys.position_lost || settings.homing.flags.keep_on_reset)
 800b1c8:	4b75      	ldr	r3, [pc, #468]	; (800b3a0 <grbl_enter+0x4e0>)
 800b1ca:	78db      	ldrb	r3, [r3, #3]
 800b1cc:	f083 0301 	eor.w	r3, r3, #1
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d107      	bne.n	800b1e6 <grbl_enter+0x326>
 800b1d6:	4b73      	ldr	r3, [pc, #460]	; (800b3a4 <grbl_enter+0x4e4>)
 800b1d8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d005      	beq.n	800b1f2 <grbl_enter+0x332>
            memset(&sys, 0, offsetof(system_t, homed)); // Clear system variables except alarm & homed status.
 800b1e6:	2254      	movs	r2, #84	; 0x54
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	486d      	ldr	r0, [pc, #436]	; (800b3a0 <grbl_enter+0x4e0>)
 800b1ec:	f01a fe27 	bl	8025e3e <memset>
 800b1f0:	e004      	b.n	800b1fc <grbl_enter+0x33c>
        else
            memset(&sys, 0, offsetof(system_t, alarm)); // Clear system variables except state & alarm.
 800b1f2:	227c      	movs	r2, #124	; 0x7c
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	486a      	ldr	r0, [pc, #424]	; (800b3a0 <grbl_enter+0x4e0>)
 800b1f8:	f01a fe21 	bl	8025e3e <memset>

        sys.var5399 = -2;                                        // Clear last M66 result
 800b1fc:	4b68      	ldr	r3, [pc, #416]	; (800b3a0 <grbl_enter+0x4e0>)
 800b1fe:	f06f 0201 	mvn.w	r2, #1
 800b202:	651a      	str	r2, [r3, #80]	; 0x50
        sys.override.feed_rate = DEFAULT_FEED_OVERRIDE;          // Set to 100%
 800b204:	4b66      	ldr	r3, [pc, #408]	; (800b3a0 <grbl_enter+0x4e0>)
 800b206:	2264      	movs	r2, #100	; 0x64
 800b208:	61da      	str	r2, [r3, #28]
        sys.override.rapid_rate = DEFAULT_RAPID_OVERRIDE;        // Set to 100%
 800b20a:	4b65      	ldr	r3, [pc, #404]	; (800b3a0 <grbl_enter+0x4e0>)
 800b20c:	2264      	movs	r2, #100	; 0x64
 800b20e:	621a      	str	r2, [r3, #32]
        do {
            if(spindle_is_enabled(--spindle_num))
 800b210:	79bb      	ldrb	r3, [r7, #6]
 800b212:	3b01      	subs	r3, #1
 800b214:	b2db      	uxtb	r3, r3
 800b216:	71bb      	strb	r3, [r7, #6]
 800b218:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f010 fead 	bl	801bf7c <spindle_is_enabled>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d008      	beq.n	800b23a <grbl_enter+0x37a>
                spindle_get(spindle_num)->param->override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE; // Set to 100%
 800b228:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f010 fed3 	bl	801bfd8 <spindle_get>
 800b232:	4603      	mov	r3, r0
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	2264      	movs	r2, #100	; 0x64
 800b238:	60da      	str	r2, [r3, #12]
        } while(spindle_num);
 800b23a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e6      	bne.n	800b210 <grbl_enter+0x350>
        sys.flags.auto_reporting = settings.report_interval != 0;
 800b242:	4b58      	ldr	r3, [pc, #352]	; (800b3a4 <grbl_enter+0x4e4>)
 800b244:	8a9b      	ldrh	r3, [r3, #20]
 800b246:	2b00      	cmp	r3, #0
 800b248:	bf14      	ite	ne
 800b24a:	2301      	movne	r3, #1
 800b24c:	2300      	moveq	r3, #0
 800b24e:	b2d9      	uxtb	r1, r3
 800b250:	4a53      	ldr	r2, [pc, #332]	; (800b3a0 <grbl_enter+0x4e0>)
 800b252:	7dd3      	ldrb	r3, [r2, #23]
 800b254:	f361 0341 	bfi	r3, r1, #1, #1
 800b258:	75d3      	strb	r3, [r2, #23]

        if(settings.parking.flags.enabled)
 800b25a:	4b52      	ldr	r3, [pc, #328]	; (800b3a4 <grbl_enter+0x4e4>)
 800b25c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00c      	beq.n	800b284 <grbl_enter+0x3c4>
            sys.override.control.parking_disable = settings.parking.flags.deactivate_upon_init;
 800b26a:	4b4e      	ldr	r3, [pc, #312]	; (800b3a4 <grbl_enter+0x4e4>)
 800b26c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800b270:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b274:	b2d9      	uxtb	r1, r3
 800b276:	4a4a      	ldr	r2, [pc, #296]	; (800b3a0 <grbl_enter+0x4e0>)
 800b278:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 800b27c:	f361 03c3 	bfi	r3, r1, #3, #1
 800b280:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29

        flush_override_buffers();
 800b284:	f005 fe3e 	bl	8010f04 <flush_override_buffers>

        // Reset Grbl primary systems.
        hal.stream.reset_read_buffer(); // Clear input stream buffer
 800b288:	4b47      	ldr	r3, [pc, #284]	; (800b3a8 <grbl_enter+0x4e8>)
 800b28a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800b28e:	4798      	blx	r3
        gc_init();                      // Set g-code parser to default state
 800b290:	f7fa fa5a 	bl	8005748 <gc_init>
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 800b294:	4b44      	ldr	r3, [pc, #272]	; (800b3a8 <grbl_enter+0x4e8>)
 800b296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b298:	4a42      	ldr	r2, [pc, #264]	; (800b3a4 <grbl_enter+0x4e4>)
 800b29a:	f892 2124 	ldrb.w	r2, [r2, #292]	; 0x124
 800b29e:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	2a00      	cmp	r2, #0
 800b2a6:	bf14      	ite	ne
 800b2a8:	2201      	movne	r2, #1
 800b2aa:	2200      	moveq	r2, #0
 800b2ac:	b2d2      	uxtb	r2, r2
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4798      	blx	r3
        plan_reset();                   // Clear block buffer and planner variables
 800b2b4:	f005 ff8e 	bl	80111d4 <plan_reset>
        st_reset();                     // Clear stepper subsystem variables.
 800b2b8:	f013 f882 	bl	801e3c0 <st_reset>
        limits_set_homing_axes();       // Set axes to be homed from settings.
 800b2bc:	f001 fa52 	bl	800c764 <limits_set_homing_axes>

        // Sync cleared gcode and planner positions to current system position.
        sync_position();
 800b2c0:	f006 fcd4 	bl	8011c6c <plan_sync_position>
 800b2c4:	4939      	ldr	r1, [pc, #228]	; (800b3ac <grbl_enter+0x4ec>)
 800b2c6:	483a      	ldr	r0, [pc, #232]	; (800b3b0 <grbl_enter+0x4f0>)
 800b2c8:	f016 f896 	bl	80213f8 <system_convert_array_steps_to_mpos>

        if(hal.stepper.disable_motors)
 800b2cc:	4b36      	ldr	r3, [pc, #216]	; (800b3a8 <grbl_enter+0x4e8>)
 800b2ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d006      	beq.n	800b2e4 <grbl_enter+0x424>
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 800b2d6:	4b34      	ldr	r3, [pc, #208]	; (800b3a8 <grbl_enter+0x4e8>)
 800b2d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	4798      	blx	r3

        if(!hal.driver_cap.atc)
 800b2e4:	4b30      	ldr	r3, [pc, #192]	; (800b3a8 <grbl_enter+0x4e8>)
 800b2e6:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <grbl_enter+0x438>
            tc_init();
 800b2f4:	f016 fec0 	bl	8022078 <tc_init>

        // Print welcome message. Indicates an initialization has occurred at power-up or with a reset.
        grbl.report.init_message();
 800b2f8:	4b2e      	ldr	r3, [pc, #184]	; (800b3b4 <grbl_enter+0x4f4>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4798      	blx	r3

        if(!settings.flags.no_unlock_after_estop && state_get() == STATE_ESTOP)
 800b2fe:	4b29      	ldr	r3, [pc, #164]	; (800b3a4 <grbl_enter+0x4e4>)
 800b300:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800b304:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d108      	bne.n	800b320 <grbl_enter+0x460>
 800b30e:	f011 fd07 	bl	801cd20 <state_get>
 800b312:	4603      	mov	r3, r0
 800b314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b318:	d102      	bne.n	800b320 <grbl_enter+0x460>
            state_set(STATE_ALARM);
 800b31a:	2001      	movs	r0, #1
 800b31c:	f011 fd0c 	bl	801cd38 <state_set>

        if(hal.driver_cap.mpg_mode)
 800b320:	4b21      	ldr	r3, [pc, #132]	; (800b3a8 <grbl_enter+0x4e8>)
 800b322:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 800b326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00a      	beq.n	800b346 <grbl_enter+0x486>
            protocol_enqueue_realtime_command(sys.mpg_mode ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 800b330:	4b1b      	ldr	r3, [pc, #108]	; (800b3a0 <grbl_enter+0x4e0>)
 800b332:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <grbl_enter+0x47e>
 800b33a:	2387      	movs	r3, #135	; 0x87
 800b33c:	e000      	b.n	800b340 <grbl_enter+0x480>
 800b33e:	2380      	movs	r3, #128	; 0x80
 800b340:	4618      	mov	r0, r3
 800b342:	f007 ff2b 	bl	801319c <protocol_enqueue_realtime_command>

        // Start Grbl main loop. Processes program inputs and executes them.
        if(!(looping = protocol_main_loop()))
 800b346:	f006 feb9 	bl	80120bc <protocol_main_loop>
 800b34a:	4603      	mov	r3, r0
 800b34c:	71fb      	strb	r3, [r7, #7]
 800b34e:	79fb      	ldrb	r3, [r7, #7]
 800b350:	f083 0301 	eor.w	r3, r3, #1
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d013      	beq.n	800b382 <grbl_enter+0x4c2>
            looping = hal.driver_release == NULL || hal.driver_release();
 800b35a:	4b13      	ldr	r3, [pc, #76]	; (800b3a8 <grbl_enter+0x4e8>)
 800b35c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b360:	2b00      	cmp	r3, #0
 800b362:	d006      	beq.n	800b372 <grbl_enter+0x4b2>
 800b364:	4b10      	ldr	r3, [pc, #64]	; (800b3a8 <grbl_enter+0x4e8>)
 800b366:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b36a:	4798      	blx	r3
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d001      	beq.n	800b376 <grbl_enter+0x4b6>
 800b372:	2301      	movs	r3, #1
 800b374:	e000      	b.n	800b378 <grbl_enter+0x4b8>
 800b376:	2300      	movs	r3, #0
 800b378:	71fb      	strb	r3, [r7, #7]
 800b37a:	79fb      	ldrb	r3, [r7, #7]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	71fb      	strb	r3, [r7, #7]

        sys.cold_start = false;
 800b382:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <grbl_enter+0x4e0>)
 800b384:	2200      	movs	r2, #0
 800b386:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    while(looping) {
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f47f af17 	bne.w	800b1c0 <grbl_enter+0x300>
    }

    nvs_buffer_free();
 800b392:	f005 fad7 	bl	8010944 <nvs_buffer_free>

    return 0;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	20001520 	.word	0x20001520
 800b3a4:	20001cf0 	.word	0x20001cf0
 800b3a8:	200016a0 	.word	0x200016a0
 800b3ac:	200015a8 	.word	0x200015a8
 800b3b0:	200013dc 	.word	0x200013dc
 800b3b4:	200015b8 	.word	0x200015b8

0800b3b8 <get_pnum>:
}

/* experimental code follows */

static char *get_pnum (io_ports_data_t *ports, uint8_t port)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
    return ports->pnum ? (ports->pnum + (port * 3) + (port > 9 ? port - 10 : 0)) : NULL;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d010      	beq.n	800b3ee <get_pnum+0x36>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	78fa      	ldrb	r2, [r7, #3]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	005b      	lsls	r3, r3, #1
 800b3d6:	4413      	add	r3, r2
 800b3d8:	461a      	mov	r2, r3
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	2b09      	cmp	r3, #9
 800b3de:	d902      	bls.n	800b3e6 <get_pnum+0x2e>
 800b3e0:	78fb      	ldrb	r3, [r7, #3]
 800b3e2:	3b0a      	subs	r3, #10
 800b3e4:	e000      	b.n	800b3e8 <get_pnum+0x30>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4413      	add	r3, r2
 800b3ea:	440b      	add	r3, r1
 800b3ec:	e000      	b.n	800b3f0 <get_pnum+0x38>
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <ioports_add>:

bool ioports_add (io_ports_data_t *ports, io_port_type_t type, uint8_t n_in, uint8_t n_out)
{
 800b3fc:	b5b0      	push	{r4, r5, r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	4608      	mov	r0, r1
 800b406:	4611      	mov	r1, r2
 800b408:	461a      	mov	r2, r3
 800b40a:	4603      	mov	r3, r0
 800b40c:	70fb      	strb	r3, [r7, #3]
 800b40e:	460b      	mov	r3, r1
 800b410:	70bb      	strb	r3, [r7, #2]
 800b412:	4613      	mov	r3, r2
 800b414:	707b      	strb	r3, [r7, #1]
    uint_fast8_t n_ports;
    io_ports_cfg_t *cfg;

    ports->get_pnum = get_pnum;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a89      	ldr	r2, [pc, #548]	; (800b640 <ioports_add+0x244>)
 800b41a:	615a      	str	r2, [r3, #20]

    if(type == Port_Digital) {
 800b41c:	78fb      	ldrb	r3, [r7, #3]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d14f      	bne.n	800b4c2 <ioports_add+0xc6>

        cfg = &digital;
 800b422:	4b88      	ldr	r3, [pc, #544]	; (800b644 <ioports_add+0x248>)
 800b424:	617b      	str	r3, [r7, #20]
        digital_in = digital_out = -1;
 800b426:	4b88      	ldr	r3, [pc, #544]	; (800b648 <ioports_add+0x24c>)
 800b428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b42c:	801a      	strh	r2, [r3, #0]
 800b42e:	4b86      	ldr	r3, [pc, #536]	; (800b648 <ioports_add+0x24c>)
 800b430:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b434:	4b85      	ldr	r3, [pc, #532]	; (800b64c <ioports_add+0x250>)
 800b436:	801a      	strh	r2, [r3, #0]

        if(n_in) {
 800b438:	78bb      	ldrb	r3, [r7, #2]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d01e      	beq.n	800b47c <ioports_add+0x80>
            ports->in.n_start = hal.port.num_digital_in;
 800b43e:	4b84      	ldr	r3, [pc, #528]	; (800b650 <ioports_add+0x254>)
 800b440:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	715a      	strb	r2, [r3, #5]
            hal.port.num_digital_in += (ports->in.n_ports = n_in);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	78ba      	ldrb	r2, [r7, #2]
 800b44c:	711a      	strb	r2, [r3, #4]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	791a      	ldrb	r2, [r3, #4]
 800b452:	4b7f      	ldr	r3, [pc, #508]	; (800b650 <ioports_add+0x254>)
 800b454:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b458:	4413      	add	r3, r2
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	4b7c      	ldr	r3, [pc, #496]	; (800b650 <ioports_add+0x254>)
 800b45e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	791b      	ldrb	r3, [r3, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	f01a f986 	bl	8025778 <malloc>
 800b46c:	4603      	mov	r3, r0
 800b46e:	461a      	mov	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	609a      	str	r2, [r3, #8]
            digital.in.ports = &ports->in;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3304      	adds	r3, #4
 800b478:	4a72      	ldr	r2, [pc, #456]	; (800b644 <ioports_add+0x248>)
 800b47a:	6013      	str	r3, [r2, #0]
        }

        if(n_out) {
 800b47c:	787b      	ldrb	r3, [r7, #1]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d06e      	beq.n	800b560 <ioports_add+0x164>
            ports->out.n_start = hal.port.num_digital_out;
 800b482:	4b73      	ldr	r3, [pc, #460]	; (800b650 <ioports_add+0x254>)
 800b484:	f893 2115 	ldrb.w	r2, [r3, #277]	; 0x115
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	735a      	strb	r2, [r3, #13]
            hal.port.num_digital_out += (ports->out.n_ports = n_out);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	787a      	ldrb	r2, [r7, #1]
 800b490:	731a      	strb	r2, [r3, #12]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	7b1a      	ldrb	r2, [r3, #12]
 800b496:	4b6e      	ldr	r3, [pc, #440]	; (800b650 <ioports_add+0x254>)
 800b498:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800b49c:	4413      	add	r3, r2
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	4b6b      	ldr	r3, [pc, #428]	; (800b650 <ioports_add+0x254>)
 800b4a2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	7b1b      	ldrb	r3, [r3, #12]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f01a f964 	bl	8025778 <malloc>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	611a      	str	r2, [r3, #16]
            digital.out.ports = &ports->out;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	330c      	adds	r3, #12
 800b4bc:	4a61      	ldr	r2, [pc, #388]	; (800b644 <ioports_add+0x248>)
 800b4be:	6393      	str	r3, [r2, #56]	; 0x38
 800b4c0:	e04e      	b.n	800b560 <ioports_add+0x164>
        }

    } else {

        cfg = &analog;
 800b4c2:	4b64      	ldr	r3, [pc, #400]	; (800b654 <ioports_add+0x258>)
 800b4c4:	617b      	str	r3, [r7, #20]
        analog_in = analog_out = -1;
 800b4c6:	4b64      	ldr	r3, [pc, #400]	; (800b658 <ioports_add+0x25c>)
 800b4c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4cc:	801a      	strh	r2, [r3, #0]
 800b4ce:	4b62      	ldr	r3, [pc, #392]	; (800b658 <ioports_add+0x25c>)
 800b4d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b4d4:	4b61      	ldr	r3, [pc, #388]	; (800b65c <ioports_add+0x260>)
 800b4d6:	801a      	strh	r2, [r3, #0]

        if(n_in) {
 800b4d8:	78bb      	ldrb	r3, [r7, #2]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d01e      	beq.n	800b51c <ioports_add+0x120>
            ports->in.n_start = hal.port.num_analog_in;
 800b4de:	4b5c      	ldr	r3, [pc, #368]	; (800b650 <ioports_add+0x254>)
 800b4e0:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	715a      	strb	r2, [r3, #5]
            hal.port.num_analog_in += (ports->in.n_ports = n_in);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	78ba      	ldrb	r2, [r7, #2]
 800b4ec:	711a      	strb	r2, [r3, #4]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	791a      	ldrb	r2, [r3, #4]
 800b4f2:	4b57      	ldr	r3, [pc, #348]	; (800b650 <ioports_add+0x254>)
 800b4f4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	4b54      	ldr	r3, [pc, #336]	; (800b650 <ioports_add+0x254>)
 800b4fe:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
            ports->in.map = malloc(ports->in.n_ports * sizeof(ports->in.n_ports));
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	791b      	ldrb	r3, [r3, #4]
 800b506:	4618      	mov	r0, r3
 800b508:	f01a f936 	bl	8025778 <malloc>
 800b50c:	4603      	mov	r3, r0
 800b50e:	461a      	mov	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	609a      	str	r2, [r3, #8]
            analog.in.ports = &ports->in;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3304      	adds	r3, #4
 800b518:	4a4e      	ldr	r2, [pc, #312]	; (800b654 <ioports_add+0x258>)
 800b51a:	6013      	str	r3, [r2, #0]
        }

        if(n_out) {
 800b51c:	787b      	ldrb	r3, [r7, #1]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d01e      	beq.n	800b560 <ioports_add+0x164>
            ports->out.n_start = hal.port.num_analog_out;
 800b522:	4b4b      	ldr	r3, [pc, #300]	; (800b650 <ioports_add+0x254>)
 800b524:	f893 2117 	ldrb.w	r2, [r3, #279]	; 0x117
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	735a      	strb	r2, [r3, #13]
            hal.port.num_analog_out += (ports->out.n_ports = n_out);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	787a      	ldrb	r2, [r7, #1]
 800b530:	731a      	strb	r2, [r3, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7b1a      	ldrb	r2, [r3, #12]
 800b536:	4b46      	ldr	r3, [pc, #280]	; (800b650 <ioports_add+0x254>)
 800b538:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800b53c:	4413      	add	r3, r2
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	4b43      	ldr	r3, [pc, #268]	; (800b650 <ioports_add+0x254>)
 800b542:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
            ports->out.map = malloc(ports->out.n_ports * sizeof(ports->out.n_ports));
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	7b1b      	ldrb	r3, [r3, #12]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f01a f914 	bl	8025778 <malloc>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	611a      	str	r2, [r3, #16]
            analog.out.ports = &ports->out;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	330c      	adds	r3, #12
 800b55c:	4a3d      	ldr	r2, [pc, #244]	; (800b654 <ioports_add+0x258>)
 800b55e:	6393      	str	r3, [r2, #56]	; 0x38
        }
    }

    if((n_ports = max(ports->in.n_ports, ports->out.n_ports)) > 0)  {
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	7b1a      	ldrb	r2, [r3, #12]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	791b      	ldrb	r3, [r3, #4]
 800b568:	4293      	cmp	r3, r2
 800b56a:	bf38      	it	cc
 800b56c:	4613      	movcc	r3, r2
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	60bb      	str	r3, [r7, #8]
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80e7 	beq.w	800b748 <ioports_add+0x34c>

        char *pn;
        uint_fast8_t i;

        if((ports->pnum = pn = malloc((3 * n_ports + (n_ports > 9 ? n_ports - 10 : 0)) + 1)))
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	4613      	mov	r3, r2
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	441a      	add	r2, r3
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b0a      	cmp	r3, #10
 800b586:	bf38      	it	cc
 800b588:	230a      	movcc	r3, #10
 800b58a:	4413      	add	r3, r2
 800b58c:	3b09      	subs	r3, #9
 800b58e:	4618      	mov	r0, r3
 800b590:	f01a f8f2 	bl	8025778 <malloc>
 800b594:	4603      	mov	r3, r0
 800b596:	613b      	str	r3, [r7, #16]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 80d0 	beq.w	800b748 <ioports_add+0x34c>
          for(i = 0; i < n_ports; i++) {
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	e0c7      	b.n	800b73e <ioports_add+0x342>

            if(pn) {
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d011      	beq.n	800b5d8 <ioports_add+0x1dc>
                *pn = type == Port_Digital ? 'P' : 'E';
 800b5b4:	78fb      	ldrb	r3, [r7, #3]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d101      	bne.n	800b5be <ioports_add+0x1c2>
 800b5ba:	2250      	movs	r2, #80	; 0x50
 800b5bc:	e000      	b.n	800b5c0 <ioports_add+0x1c4>
 800b5be:	2245      	movs	r2, #69	; 0x45
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	701a      	strb	r2, [r3, #0]
                strcpy(pn + 1, uitoa(i));
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	1c5c      	adds	r4, r3, #1
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f004 fba7 	bl	800fd1c <uitoa>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f01a fd88 	bl	80260e8 <strcpy>
            }

            if(ports->in.n_ports && i < ports->in.n_ports) {
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	791b      	ldrb	r3, [r3, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d050      	beq.n	800b682 <ioports_add+0x286>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	791b      	ldrb	r3, [r3, #4]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d24a      	bcs.n	800b682 <ioports_add+0x286>
                if(ports->in.map)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <ioports_add+0x206>
                    ports->in.map[i] = i;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	689a      	ldr	r2, [r3, #8]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
                if(hal.port.set_pin_description)
 800b602:	4b13      	ldr	r3, [pc, #76]	; (800b650 <ioports_add+0x254>)
 800b604:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00f      	beq.n	800b62c <ioports_add+0x230>
                    hal.port.set_pin_description(type, Port_Input, i, get_pnum(ports, i));
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <ioports_add+0x254>)
 800b60e:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	b2dd      	uxtb	r5, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff fecb 	bl	800b3b8 <get_pnum>
 800b622:	4603      	mov	r3, r0
 800b624:	78f8      	ldrb	r0, [r7, #3]
 800b626:	462a      	mov	r2, r5
 800b628:	2100      	movs	r1, #0
 800b62a:	47a0      	blx	r4
                if(i < 8) {
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2b07      	cmp	r3, #7
 800b630:	d827      	bhi.n	800b682 <ioports_add+0x286>
                    strcat(cfg->in.port_names, i == 0 ? "Aux " : ",Aux ");
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	1d1a      	adds	r2, r3, #4
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d113      	bne.n	800b664 <ioports_add+0x268>
 800b63c:	4b08      	ldr	r3, [pc, #32]	; (800b660 <ioports_add+0x264>)
 800b63e:	e012      	b.n	800b666 <ioports_add+0x26a>
 800b640:	0800b3b9 	.word	0x0800b3b9
 800b644:	200018d8 	.word	0x200018d8
 800b648:	200003b8 	.word	0x200003b8
 800b64c:	200003b6 	.word	0x200003b6
 800b650:	200016a0 	.word	0x200016a0
 800b654:	20001864 	.word	0x20001864
 800b658:	200003bc 	.word	0x200003bc
 800b65c:	200003ba 	.word	0x200003ba
 800b660:	0802b334 	.word	0x0802b334
 800b664:	4b3d      	ldr	r3, [pc, #244]	; (800b75c <ioports_add+0x360>)
 800b666:	4619      	mov	r1, r3
 800b668:	4610      	mov	r0, r2
 800b66a:	f01a fbf0 	bl	8025e4e <strcat>
                    strcat(cfg->in.port_names, uitoa(i));
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	1d1c      	adds	r4, r3, #4
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f004 fb52 	bl	800fd1c <uitoa>
 800b678:	4603      	mov	r3, r0
 800b67a:	4619      	mov	r1, r3
 800b67c:	4620      	mov	r0, r4
 800b67e:	f01a fbe6 	bl	8025e4e <strcat>
                }
            }

            if(ports->out.n_ports && i < ports->out.n_ports) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	7b1b      	ldrb	r3, [r3, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d04a      	beq.n	800b720 <ioports_add+0x324>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7b1b      	ldrb	r3, [r3, #12]
 800b68e:	461a      	mov	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4293      	cmp	r3, r2
 800b694:	d244      	bcs.n	800b720 <ioports_add+0x324>
                if(ports->out.map)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d006      	beq.n	800b6ac <ioports_add+0x2b0>
                    ports->out.map[i] = i;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	691a      	ldr	r2, [r3, #16]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	701a      	strb	r2, [r3, #0]
                if(hal.port.set_pin_description)
 800b6ac:	4b2c      	ldr	r3, [pc, #176]	; (800b760 <ioports_add+0x364>)
 800b6ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00f      	beq.n	800b6d6 <ioports_add+0x2da>
                    hal.port.set_pin_description(type, Port_Output, i, get_pnum(ports, i));
 800b6b6:	4b2a      	ldr	r3, [pc, #168]	; (800b760 <ioports_add+0x364>)
 800b6b8:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	b2dd      	uxtb	r5, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff fe76 	bl	800b3b8 <get_pnum>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	78f8      	ldrb	r0, [r7, #3]
 800b6d0:	462a      	mov	r2, r5
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	47a0      	blx	r4
                if(i < 8) {
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b07      	cmp	r3, #7
 800b6da:	d821      	bhi.n	800b720 <ioports_add+0x324>
                    cfg->outx.mask = (cfg->outx.mask << 1) + 1;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    strcat(cfg->out.port_names, i == 0 ? "Aux " : ",Aux ");
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <ioports_add+0x304>
 800b6fc:	4b19      	ldr	r3, [pc, #100]	; (800b764 <ioports_add+0x368>)
 800b6fe:	e000      	b.n	800b702 <ioports_add+0x306>
 800b700:	4b16      	ldr	r3, [pc, #88]	; (800b75c <ioports_add+0x360>)
 800b702:	4619      	mov	r1, r3
 800b704:	4610      	mov	r0, r2
 800b706:	f01a fba2 	bl	8025e4e <strcat>
                    strcat(cfg->out.port_names, uitoa(i));
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f004 fb03 	bl	800fd1c <uitoa>
 800b716:	4603      	mov	r3, r0
 800b718:	4619      	mov	r1, r3
 800b71a:	4620      	mov	r0, r4
 800b71c:	f01a fb97 	bl	8025e4e <strcat>
                }
            }

            if(pn)
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d008      	beq.n	800b738 <ioports_add+0x33c>
                pn += i > 9 ? 4 : 3;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b09      	cmp	r3, #9
 800b72a:	d901      	bls.n	800b730 <ioports_add+0x334>
 800b72c:	2304      	movs	r3, #4
 800b72e:	e000      	b.n	800b732 <ioports_add+0x336>
 800b730:	2303      	movs	r3, #3
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	4413      	add	r3, r2
 800b736:	613b      	str	r3, [r7, #16]
          for(i = 0; i < n_ports; i++) {
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	3301      	adds	r3, #1
 800b73c:	60fb      	str	r3, [r7, #12]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	429a      	cmp	r2, r3
 800b744:	f4ff af33 	bcc.w	800b5ae <ioports_add+0x1b2>
        }
    }

    return n_ports > 0;
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bf14      	ite	ne
 800b74e:	2301      	movne	r3, #1
 800b750:	2300      	moveq	r3, #0
 800b752:	b2db      	uxtb	r3, r3
}
 800b754:	4618      	mov	r0, r3
 800b756:	3718      	adds	r7, #24
 800b758:	46bd      	mov	sp, r7
 800b75a:	bdb0      	pop	{r4, r5, r7, pc}
 800b75c:	0802b33c 	.word	0x0802b33c
 800b760:	200016a0 	.word	0x200016a0
 800b764:	0802b334 	.word	0x0802b334

0800b768 <ioports_map_reverse>:

uint8_t ioports_map_reverse (io_ports_detail_t *type, uint8_t port)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	460b      	mov	r3, r1
 800b772:	70fb      	strb	r3, [r7, #3]
    if(type->map) {
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d013      	beq.n	800b7a4 <ioports_map_reverse+0x3c>
        uint_fast8_t idx = type->n_ports;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	60fb      	str	r3, [r7, #12]
        do {
            if(type->map[--idx] == port) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3b01      	subs	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	78fa      	ldrb	r2, [r7, #3]
 800b794:	429a      	cmp	r2, r3
 800b796:	d102      	bne.n	800b79e <ioports_map_reverse+0x36>
                port = idx;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	70fb      	strb	r3, [r7, #3]
                break;
 800b79c:	e002      	b.n	800b7a4 <ioports_map_reverse+0x3c>
            }
        } while(idx);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1ee      	bne.n	800b782 <ioports_map_reverse+0x1a>
    }

    return port;
 800b7a4:	78fb      	ldrb	r3, [r7, #3]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3714      	adds	r7, #20
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
	...

0800b7b4 <is_setting_available>:
    return pwm_value;
}


static bool is_setting_available (const setting_detail_t *setting)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
    bool available = false;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]

    switch(setting->id) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	f5b3 7fba 	cmp.w	r3, #372	; 0x174
 800b7c8:	da03      	bge.n	800b7d2 <is_setting_available+0x1e>
 800b7ca:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 800b7ce:	da05      	bge.n	800b7dc <is_setting_available+0x28>
        case Settings_IoPort_OD_Enable:
            available = digital.out.ports && digital.out.ports->n_ports > 0;
            break;

        default:
            break;
 800b7d0:	e028      	b.n	800b824 <is_setting_available+0x70>
 800b7d2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
    switch(setting->id) {
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d824      	bhi.n	800b824 <is_setting_available+0x70>
 800b7da:	e011      	b.n	800b800 <is_setting_available+0x4c>
            available = digital.in.ports && digital.in.ports->n_ports > 0;
 800b7dc:	4b15      	ldr	r3, [pc, #84]	; (800b834 <is_setting_available+0x80>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d006      	beq.n	800b7f2 <is_setting_available+0x3e>
 800b7e4:	4b13      	ldr	r3, [pc, #76]	; (800b834 <is_setting_available+0x80>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <is_setting_available+0x3e>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <is_setting_available+0x40>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	73fb      	strb	r3, [r7, #15]
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
 800b7f8:	f003 0301 	and.w	r3, r3, #1
 800b7fc:	73fb      	strb	r3, [r7, #15]
            break;
 800b7fe:	e012      	b.n	800b826 <is_setting_available+0x72>
            available = digital.out.ports && digital.out.ports->n_ports > 0;
 800b800:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <is_setting_available+0x80>)
 800b802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b804:	2b00      	cmp	r3, #0
 800b806:	d006      	beq.n	800b816 <is_setting_available+0x62>
 800b808:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <is_setting_available+0x80>)
 800b80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <is_setting_available+0x62>
 800b812:	2301      	movs	r3, #1
 800b814:	e000      	b.n	800b818 <is_setting_available+0x64>
 800b816:	2300      	movs	r3, #0
 800b818:	73fb      	strb	r3, [r7, #15]
 800b81a:	7bfb      	ldrb	r3, [r7, #15]
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	73fb      	strb	r3, [r7, #15]
            break;
 800b822:	e000      	b.n	800b826 <is_setting_available+0x72>
            break;
 800b824:	bf00      	nop
    }

    return available;
 800b826:	7bfb      	ldrb	r3, [r7, #15]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	200018d8 	.word	0x200018d8

0800b838 <aux_set_invert_out>:

static status_code_t aux_set_invert_out (setting_id_t id, uint_fast16_t value)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	6039      	str	r1, [r7, #0]
 800b842:	80fb      	strh	r3, [r7, #6]
    ioport_bus_t invert;
    invert.mask = (uint8_t)value & digital.outx.mask;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	b2da      	uxtb	r2, r3
 800b848:	4b0e      	ldr	r3, [pc, #56]	; (800b884 <aux_set_invert_out+0x4c>)
 800b84a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b84e:	4013      	ands	r3, r2
 800b850:	b2db      	uxtb	r3, r3
 800b852:	733b      	strb	r3, [r7, #12]

    if(settings.ioport.invert_out.mask != invert.mask) {
 800b854:	4b0c      	ldr	r3, [pc, #48]	; (800b888 <aux_set_invert_out+0x50>)
 800b856:	f893 216a 	ldrb.w	r2, [r3, #362]	; 0x16a
 800b85a:	7b3b      	ldrb	r3, [r7, #12]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d00c      	beq.n	800b87a <aux_set_invert_out+0x42>

        settings.ioport.invert_out.mask = invert.mask;
 800b860:	7b3a      	ldrb	r2, [r7, #12]
 800b862:	4b09      	ldr	r3, [pc, #36]	; (800b888 <aux_set_invert_out+0x50>)
 800b864:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a

        if(on_setting_changed)
 800b868:	4b08      	ldr	r3, [pc, #32]	; (800b88c <aux_set_invert_out+0x54>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d004      	beq.n	800b87a <aux_set_invert_out+0x42>
            on_setting_changed(id);
 800b870:	4b06      	ldr	r3, [pc, #24]	; (800b88c <aux_set_invert_out+0x54>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	88fa      	ldrh	r2, [r7, #6]
 800b876:	4610      	mov	r0, r2
 800b878:	4798      	blx	r3
    }

    return Status_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	200018d8 	.word	0x200018d8
 800b888:	20001cf0 	.word	0x20001cf0
 800b88c:	20001860 	.word	0x20001860

0800b890 <aux_get_invert_out>:

static uint32_t aux_get_invert_out (setting_id_t setting)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	80fb      	strh	r3, [r7, #6]
    return settings.ioport.invert_out.mask;
 800b89a:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <aux_get_invert_out+0x1c>)
 800b89c:	f893 316a 	ldrb.w	r3, [r3, #362]	; 0x16a
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	20001cf0 	.word	0x20001cf0

0800b8b0 <ioport_settings_load>:
};

#endif

static void ioport_settings_load (void)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
    if(on_settings_loaded)
 800b8b4:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <ioport_settings_load+0x18>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <ioport_settings_load+0x12>
        on_settings_loaded();
 800b8bc:	4b02      	ldr	r3, [pc, #8]	; (800b8c8 <ioport_settings_load+0x18>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4798      	blx	r3
}
 800b8c2:	bf00      	nop
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	2000185c 	.word	0x2000185c

0800b8cc <ioports_add_settings>:
    .load = ioport_settings_load,
    .save = settings_write_global
};

void ioports_add_settings (driver_settings_load_ptr settings_loaded, setting_changed_ptr setting_changed)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
    if(settings_loaded)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <ioports_add_settings+0x16>
        on_settings_loaded = settings_loaded;
 800b8dc:	4a07      	ldr	r2, [pc, #28]	; (800b8fc <ioports_add_settings+0x30>)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6013      	str	r3, [r2, #0]

    if(setting_changed)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d005      	beq.n	800b8f4 <ioports_add_settings+0x28>
        on_setting_changed = setting_changed,
 800b8e8:	4a05      	ldr	r2, [pc, #20]	; (800b900 <ioports_add_settings+0x34>)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	6013      	str	r3, [r2, #0]

    settings_register(&setting_details);
 800b8ee:	4805      	ldr	r0, [pc, #20]	; (800b904 <ioports_add_settings+0x38>)
 800b8f0:	f00c fd6e 	bl	80183d0 <settings_register>
}
 800b8f4:	bf00      	nop
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	2000185c 	.word	0x2000185c
 800b900:	20001860 	.word	0x20001860
 800b904:	200003c0 	.word	0x200003c0

0800b908 <limit_signals_merge>:

#include "config.h"

// Merge (bitwise or) all limit switch inputs.
ISR_CODE axes_signals_t ISR_FUNC(limit_signals_merge)(limit_signals_t signals)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
    axes_signals_t state;

    state.mask = signals.min.mask | signals.min2.mask | signals.max.mask | signals.max2.mask;
 800b910:	793a      	ldrb	r2, [r7, #4]
 800b912:	79bb      	ldrb	r3, [r7, #6]
 800b914:	4313      	orrs	r3, r2
 800b916:	b2da      	uxtb	r2, r3
 800b918:	797b      	ldrb	r3, [r7, #5]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	b2da      	uxtb	r2, r3
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	4313      	orrs	r3, r2
 800b922:	b2db      	uxtb	r3, r3
 800b924:	733b      	strb	r3, [r7, #12]

    return state;
 800b926:	7b3b      	ldrb	r3, [r7, #12]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <homing_signals_select>:

// Merge (bitwise or) home switch inputs (typically acquired from limits.min and limits.min2).
ISR_CODE static axes_signals_t ISR_FUNC(homing_signals_select)(home_signals_t signals, axes_signals_t auto_square, squaring_mode_t mode)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	80b8      	strh	r0, [r7, #4]
 800b93c:	7039      	strb	r1, [r7, #0]
 800b93e:	4613      	mov	r3, r2
 800b940:	70fb      	strb	r3, [r7, #3]
    axes_signals_t state;

    switch(mode) {
 800b942:	78fb      	ldrb	r3, [r7, #3]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d002      	beq.n	800b94e <homing_signals_select+0x1a>
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d00b      	beq.n	800b964 <homing_signals_select+0x30>
        case SquaringMode_B:
            signals.b.mask &= ~auto_square.mask;
            break;

        default:
            break;
 800b94c:	e015      	b.n	800b97a <homing_signals_select+0x46>
            signals.a.mask &= ~auto_square.mask;
 800b94e:	793b      	ldrb	r3, [r7, #4]
 800b950:	b25a      	sxtb	r2, r3
 800b952:	783b      	ldrb	r3, [r7, #0]
 800b954:	b25b      	sxtb	r3, r3
 800b956:	43db      	mvns	r3, r3
 800b958:	b25b      	sxtb	r3, r3
 800b95a:	4013      	ands	r3, r2
 800b95c:	b25b      	sxtb	r3, r3
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	713b      	strb	r3, [r7, #4]
            break;
 800b962:	e00a      	b.n	800b97a <homing_signals_select+0x46>
            signals.b.mask &= ~auto_square.mask;
 800b964:	797b      	ldrb	r3, [r7, #5]
 800b966:	b25a      	sxtb	r2, r3
 800b968:	783b      	ldrb	r3, [r7, #0]
 800b96a:	b25b      	sxtb	r3, r3
 800b96c:	43db      	mvns	r3, r3
 800b96e:	b25b      	sxtb	r3, r3
 800b970:	4013      	ands	r3, r2
 800b972:	b25b      	sxtb	r3, r3
 800b974:	b2db      	uxtb	r3, r3
 800b976:	717b      	strb	r3, [r7, #5]
            break;
 800b978:	bf00      	nop
    }

    state.mask = signals.a.mask | signals.b.mask;
 800b97a:	793a      	ldrb	r2, [r7, #4]
 800b97c:	797b      	ldrb	r3, [r7, #5]
 800b97e:	4313      	orrs	r3, r2
 800b980:	b2db      	uxtb	r3, r3
 800b982:	733b      	strb	r3, [r7, #12]

    return state;
 800b984:	7b3b      	ldrb	r3, [r7, #12]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
	...

0800b994 <limit_interrupt_handler>:
// if a limit switch is being disengaged. It's impossible to reliably tell the state of a
// bouncing pin because the microcontroller does not retain any state information when
// detecting a pin change. If we poll the pins in the ISR, you can miss the correct reading if the
// switch is bouncing.
ISR_CODE void ISR_FUNC(limit_interrupt_handler)(limit_signals_t state) // DEFAULT: Limit pin change interrupt process.
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	687b      	ldr	r3, [r7, #4]
#if N_AXIS > 3
    if((limit_signals_merge(state).value & sys.hard_limits.mask) == 0)
        return;
#endif

    memcpy(&sys.last_event.limits, &state, sizeof(limit_signals_t));
 800b99e:	4a0d      	ldr	r2, [pc, #52]	; (800b9d4 <limit_interrupt_handler+0x40>)
 800b9a0:	f8c2 3082 	str.w	r3, [r2, #130]	; 0x82

    if (!(state_get() & (STATE_ALARM|STATE_ESTOP)) && !sys.rt_exec_alarm) {
 800b9a4:	f011 f9bc 	bl	801cd20 <state_get>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	f240 1301 	movw	r3, #257	; 0x101
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10a      	bne.n	800b9ca <limit_interrupt_handler+0x36>
 800b9b4:	4b07      	ldr	r3, [pc, #28]	; (800b9d4 <limit_interrupt_handler+0x40>)
 800b9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d106      	bne.n	800b9ca <limit_interrupt_handler+0x36>
        if (limit_signals_merge(state).value) {
            mc_reset(); // Initiate system kill.
            system_set_exec_alarm(Alarm_HardLimit); // Indicate hard limit critical event
        }
      #else
        mc_reset(); // Initiate system kill.
 800b9bc:	f003 fb98 	bl	800f0f0 <mc_reset>
        system_set_exec_alarm(Alarm_HardLimit); // Indicate hard limit critical event
 800b9c0:	4b05      	ldr	r3, [pc, #20]	; (800b9d8 <limit_interrupt_handler+0x44>)
 800b9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	4805      	ldr	r0, [pc, #20]	; (800b9dc <limit_interrupt_handler+0x48>)
 800b9c8:	4798      	blx	r3
      #endif
    }
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20001520 	.word	0x20001520
 800b9d8:	200016a0 	.word	0x200016a0
 800b9dc:	2000156c 	.word	0x2000156c

0800b9e0 <limits_set_work_envelope>:

// Establish work envelope for homed axes, used by soft limits and jog limits handling.
// When hard limits are enabled pulloff distance is subtracted to avoid triggering limit switches.
void limits_set_work_envelope (void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
    uint_fast8_t idx = N_AXIS;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	607b      	str	r3, [r7, #4]

    do {
        if(sys.homed.mask & bit(--idx)) {
 800b9ea:	4b61      	ldr	r3, [pc, #388]	; (800bb70 <limits_set_work_envelope+0x190>)
 800b9ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	607b      	str	r3, [r7, #4]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f000 8091 	beq.w	800bb2a <limits_set_work_envelope+0x14a>

            float pulloff = settings.limits.flags.hard_enabled && bit_istrue(sys.homing.mask, bit(idx)) ? settings.homing.pulloff : 0.0f;
 800ba08:	4b5a      	ldr	r3, [pc, #360]	; (800bb74 <limits_set_work_envelope+0x194>)
 800ba0a:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00d      	beq.n	800ba34 <limits_set_work_envelope+0x54>
 800ba18:	4b55      	ldr	r3, [pc, #340]	; (800bb70 <limits_set_work_envelope+0x190>)
 800ba1a:	7e9b      	ldrb	r3, [r3, #26]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	fa22 f303 	lsr.w	r3, r2, r3
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <limits_set_work_envelope+0x54>
 800ba2c:	4b51      	ldr	r3, [pc, #324]	; (800bb74 <limits_set_work_envelope+0x194>)
 800ba2e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ba32:	e001      	b.n	800ba38 <limits_set_work_envelope+0x58>
 800ba34:	f04f 0300 	mov.w	r3, #0
 800ba38:	603b      	str	r3, [r7, #0]

            if(settings.homing.flags.force_set_origin) {
 800ba3a:	4b4e      	ldr	r3, [pc, #312]	; (800bb74 <limits_set_work_envelope+0x194>)
 800ba3c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800ba40:	f003 0308 	and.w	r3, r3, #8
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d04c      	beq.n	800bae4 <limits_set_work_envelope+0x104>
                if(bit_isfalse(settings.homing.dir_mask.value, bit(idx))) {
 800ba4a:	4b4a      	ldr	r3, [pc, #296]	; (800bb74 <limits_set_work_envelope+0x194>)
 800ba4c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ba50:	461a      	mov	r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	fa22 f303 	lsr.w	r3, r2, r3
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d11f      	bne.n	800baa0 <limits_set_work_envelope+0xc0>
                    sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 800ba60:	4944      	ldr	r1, [pc, #272]	; (800bb74 <limits_set_work_envelope+0x194>)
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	440b      	add	r3, r1
 800ba6e:	333c      	adds	r3, #60	; 0x3c
 800ba70:	ed93 7a00 	vldr	s14, [r3]
 800ba74:	edd7 7a00 	vldr	s15, [r7]
 800ba78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba7c:	4a3c      	ldr	r2, [pc, #240]	; (800bb70 <limits_set_work_envelope+0x190>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	3318      	adds	r3, #24
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	4413      	add	r3, r2
 800ba86:	3304      	adds	r3, #4
 800ba88:	edc3 7a00 	vstr	s15, [r3]
                    sys.work_envelope.max.values[idx] = 0.0f;
 800ba8c:	4a38      	ldr	r2, [pc, #224]	; (800bb70 <limits_set_work_envelope+0x190>)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	331a      	adds	r3, #26
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	3308      	adds	r3, #8
 800ba98:	f04f 0200 	mov.w	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e05b      	b.n	800bb58 <limits_set_work_envelope+0x178>
                } else {
                    sys.work_envelope.min.values[idx] = 0.0f;
 800baa0:	4a33      	ldr	r2, [pc, #204]	; (800bb70 <limits_set_work_envelope+0x190>)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3318      	adds	r3, #24
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	3304      	adds	r3, #4
 800baac:	f04f 0200 	mov.w	r2, #0
 800bab0:	601a      	str	r2, [r3, #0]
                    sys.work_envelope.max.values[idx] = - (settings.axis[idx].max_travel + pulloff);
 800bab2:	4930      	ldr	r1, [pc, #192]	; (800bb74 <limits_set_work_envelope+0x194>)
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	4613      	mov	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	440b      	add	r3, r1
 800bac0:	333c      	adds	r3, #60	; 0x3c
 800bac2:	ed93 7a00 	vldr	s14, [r3]
 800bac6:	edd7 7a00 	vldr	s15, [r7]
 800baca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bace:	eef1 7a67 	vneg.f32	s15, s15
 800bad2:	4a27      	ldr	r2, [pc, #156]	; (800bb70 <limits_set_work_envelope+0x190>)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	331a      	adds	r3, #26
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	3308      	adds	r3, #8
 800bade:	edc3 7a00 	vstr	s15, [r3]
 800bae2:	e039      	b.n	800bb58 <limits_set_work_envelope+0x178>
                }
            } else {
                sys.work_envelope.min.values[idx] = settings.axis[idx].max_travel + pulloff;
 800bae4:	4923      	ldr	r1, [pc, #140]	; (800bb74 <limits_set_work_envelope+0x194>)
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4613      	mov	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	440b      	add	r3, r1
 800baf2:	333c      	adds	r3, #60	; 0x3c
 800baf4:	ed93 7a00 	vldr	s14, [r3]
 800baf8:	edd7 7a00 	vldr	s15, [r7]
 800bafc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb00:	4a1b      	ldr	r2, [pc, #108]	; (800bb70 <limits_set_work_envelope+0x190>)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	3318      	adds	r3, #24
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	edc3 7a00 	vstr	s15, [r3]
                sys.work_envelope.max.values[idx] = - pulloff;
 800bb10:	edd7 7a00 	vldr	s15, [r7]
 800bb14:	eef1 7a67 	vneg.f32	s15, s15
 800bb18:	4a15      	ldr	r2, [pc, #84]	; (800bb70 <limits_set_work_envelope+0x190>)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	331a      	adds	r3, #26
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4413      	add	r3, r2
 800bb22:	3308      	adds	r3, #8
 800bb24:	edc3 7a00 	vstr	s15, [r3]
 800bb28:	e016      	b.n	800bb58 <limits_set_work_envelope+0x178>
            }
        } else
            sys.work_envelope.min.values[idx] = sys.work_envelope.max.values[idx] = 0.0f;
 800bb2a:	4a11      	ldr	r2, [pc, #68]	; (800bb70 <limits_set_work_envelope+0x190>)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	331a      	adds	r3, #26
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4413      	add	r3, r2
 800bb34:	3308      	adds	r3, #8
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	4a0c      	ldr	r2, [pc, #48]	; (800bb70 <limits_set_work_envelope+0x190>)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	331a      	adds	r3, #26
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	3308      	adds	r3, #8
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	4909      	ldr	r1, [pc, #36]	; (800bb70 <limits_set_work_envelope+0x190>)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	3318      	adds	r3, #24
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	440b      	add	r3, r1
 800bb54:	3304      	adds	r3, #4
 800bb56:	601a      	str	r2, [r3, #0]
    } while(idx);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f47f af45 	bne.w	800b9ea <limits_set_work_envelope+0xa>
}
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
 800bb64:	370c      	adds	r7, #12
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	20001520 	.word	0x20001520
 800bb74:	20001cf0 	.word	0x20001cf0

0800bb78 <limits_set_machine_positions>:
#ifndef KINEMATICS_API

// Set machine positions for homed limit switches. Don't update non-homed axes.
// NOTE: settings.max_travel[] is stored as a negative value.
void limits_set_machine_positions (axes_signals_t cycle, bool add_pulloff)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	7138      	strb	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t idx = N_AXIS;
 800bb84:	2303      	movs	r3, #3
 800bb86:	60fb      	str	r3, [r7, #12]
    float pulloff = add_pulloff ? settings.homing.pulloff : 0.0f;
 800bb88:	79fb      	ldrb	r3, [r7, #7]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <limits_set_machine_positions+0x1e>
 800bb8e:	4b41      	ldr	r3, [pc, #260]	; (800bc94 <limits_set_machine_positions+0x11c>)
 800bb90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bb94:	e001      	b.n	800bb9a <limits_set_machine_positions+0x22>
 800bb96:	f04f 0300 	mov.w	r3, #0
 800bb9a:	60bb      	str	r3, [r7, #8]

    if(settings.homing.flags.force_set_origin) {
 800bb9c:	4b3d      	ldr	r3, [pc, #244]	; (800bc94 <limits_set_machine_positions+0x11c>)
 800bb9e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d01d      	beq.n	800bbe8 <limits_set_machine_positions+0x70>
        do {
            if (cycle.mask & bit(--idx)) {
 800bbac:	793b      	ldrb	r3, [r7, #4]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00d      	beq.n	800bbe0 <limits_set_machine_positions+0x68>
                sys.position[idx] = 0;
 800bbc4:	4a34      	ldr	r2, [pc, #208]	; (800bc98 <limits_set_machine_positions+0x120>)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3322      	adds	r3, #34	; 0x22
 800bbca:	2100      	movs	r1, #0
 800bbcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                sys.home_position[idx] = 0.0f;
 800bbd0:	4a31      	ldr	r2, [pc, #196]	; (800bc98 <limits_set_machine_positions+0x120>)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3316      	adds	r3, #22
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	f04f 0200 	mov.w	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]
            }
        } while(idx);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1e2      	bne.n	800bbac <limits_set_machine_positions+0x34>
                                      ? settings.axis[idx].max_travel + pulloff
                                      : - pulloff;
            sys.position[idx] = lroundf(sys.home_position[idx] * settings.axis[idx].steps_per_mm);
        }
    } while(idx);
}
 800bbe6:	e050      	b.n	800bc8a <limits_set_machine_positions+0x112>
        if (cycle.mask & bit(--idx)) {
 800bbe8:	793b      	ldrb	r3, [r7, #4]
 800bbea:	461a      	mov	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d041      	beq.n	800bc84 <limits_set_machine_positions+0x10c>
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 800bc00:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <limits_set_machine_positions+0x11c>)
 800bc02:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bc06:	461a      	mov	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc0e:	f003 0301 	and.w	r3, r3, #1
                                      : - pulloff;
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00e      	beq.n	800bc34 <limits_set_machine_positions+0xbc>
                                      ? settings.axis[idx].max_travel + pulloff
 800bc16:	491f      	ldr	r1, [pc, #124]	; (800bc94 <limits_set_machine_positions+0x11c>)
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	440b      	add	r3, r1
 800bc24:	333c      	adds	r3, #60	; 0x3c
 800bc26:	ed93 7a00 	vldr	s14, [r3]
                                      : - pulloff;
 800bc2a:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc32:	e003      	b.n	800bc3c <limits_set_machine_positions+0xc4>
 800bc34:	edd7 7a02 	vldr	s15, [r7, #8]
 800bc38:	eef1 7a67 	vneg.f32	s15, s15
            sys.home_position[idx] = bit_istrue(settings.homing.dir_mask.value, bit(idx))
 800bc3c:	4a16      	ldr	r2, [pc, #88]	; (800bc98 <limits_set_machine_positions+0x120>)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	3316      	adds	r3, #22
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	edc3 7a00 	vstr	s15, [r3]
            sys.position[idx] = lroundf(sys.home_position[idx] * settings.axis[idx].steps_per_mm);
 800bc4a:	4a13      	ldr	r2, [pc, #76]	; (800bc98 <limits_set_machine_positions+0x120>)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3316      	adds	r3, #22
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	ed93 7a00 	vldr	s14, [r3]
 800bc58:	490e      	ldr	r1, [pc, #56]	; (800bc94 <limits_set_machine_positions+0x11c>)
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	4413      	add	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	440b      	add	r3, r1
 800bc66:	3330      	adds	r3, #48	; 0x30
 800bc68:	edd3 7a00 	vldr	s15, [r3]
 800bc6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc70:	eeb0 0a67 	vmov.f32	s0, s15
 800bc74:	f01b f8fd 	bl	8026e72 <lroundf>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	4907      	ldr	r1, [pc, #28]	; (800bc98 <limits_set_machine_positions+0x120>)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	3322      	adds	r3, #34	; 0x22
 800bc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } while(idx);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1ae      	bne.n	800bbe8 <limits_set_machine_positions+0x70>
}
 800bc8a:	bf00      	nop
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20001cf0 	.word	0x20001cf0
 800bc98:	20001520 	.word	0x20001520

0800bc9c <limits_pull_off>:
#endif

// Pulls off axes from asserted homing switches before homing starts.
// For now only for auto squared axes.
static bool limits_pull_off (axes_signals_t axis, float distance)
{
 800bc9c:	b590      	push	{r4, r7, lr}
 800bc9e:	ed2d 8b02 	vpush	{d8}
 800bca2:	b095      	sub	sp, #84	; 0x54
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	7138      	strb	r0, [r7, #4]
 800bca8:	ed87 0a00 	vstr	s0, [r7]
    uint_fast8_t n_axis = 0, idx = N_AXIS;
 800bcac:	2300      	movs	r3, #0
 800bcae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	64bb      	str	r3, [r7, #72]	; 0x48
    coord_data_t target = {0};
 800bcb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bcb8:	2200      	movs	r2, #0
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	605a      	str	r2, [r3, #4]
 800bcbe:	609a      	str	r2, [r3, #8]
    plan_line_data_t plan_data;

    plan_data_init(&plan_data);
 800bcc0:	f107 030c 	add.w	r3, r7, #12
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f006 f8b9 	bl	8011e3c <plan_data_init>
    plan_data.condition.system_motion = On;
 800bcca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcce:	f043 0302 	orr.w	r3, r3, #2
 800bcd2:	f887 3020 	strb.w	r3, [r7, #32]
    plan_data.condition.no_feed_override = On;
 800bcd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcda:	f043 0310 	orr.w	r3, r3, #16
 800bcde:	f887 3020 	strb.w	r3, [r7, #32]
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 800bce2:	2300      	movs	r3, #0
 800bce4:	62bb      	str	r3, [r7, #40]	; 0x28

    system_convert_array_steps_to_mpos(target.values, sys.position);
 800bce6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bcea:	4969      	ldr	r1, [pc, #420]	; (800be90 <limits_pull_off+0x1f4>)
 800bcec:	4618      	mov	r0, r3
 800bcee:	f015 fb83 	bl	80213f8 <system_convert_array_steps_to_mpos>

    do {
        idx--;
 800bcf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	64bb      	str	r3, [r7, #72]	; 0x48
        if(bit_istrue(axis.mask, bit(idx))) {
 800bcf8:	793b      	ldrb	r3, [r7, #4]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcfe:	fa22 f303 	lsr.w	r3, r2, r3
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d032      	beq.n	800bd70 <limits_pull_off+0xd4>
            n_axis++;
 800bd0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 800bd10:	4b60      	ldr	r3, [pc, #384]	; (800be94 <limits_pull_off+0x1f8>)
 800bd12:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bd16:	461a      	mov	r2, r3
 800bd18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d012      	beq.n	800bd4c <limits_pull_off+0xb0>
                target.values[idx] += distance;
 800bd26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	3350      	adds	r3, #80	; 0x50
 800bd2c:	443b      	add	r3, r7
 800bd2e:	3b1c      	subs	r3, #28
 800bd30:	ed93 7a00 	vldr	s14, [r3]
 800bd34:	edd7 7a00 	vldr	s15, [r7]
 800bd38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	3350      	adds	r3, #80	; 0x50
 800bd42:	443b      	add	r3, r7
 800bd44:	3b1c      	subs	r3, #28
 800bd46:	edc3 7a00 	vstr	s15, [r3]
 800bd4a:	e011      	b.n	800bd70 <limits_pull_off+0xd4>
            else
                target.values[idx] -= distance;
 800bd4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	3350      	adds	r3, #80	; 0x50
 800bd52:	443b      	add	r3, r7
 800bd54:	3b1c      	subs	r3, #28
 800bd56:	ed93 7a00 	vldr	s14, [r3]
 800bd5a:	edd7 7a00 	vldr	s15, [r7]
 800bd5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	3350      	adds	r3, #80	; 0x50
 800bd68:	443b      	add	r3, r7
 800bd6a:	3b1c      	subs	r3, #28
 800bd6c:	edc3 7a00 	vstr	s15, [r3]
        }
    } while(idx);
 800bd70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1bd      	bne.n	800bcf2 <limits_pull_off+0x56>

    plan_data.feed_rate = settings.homing.seek_rate * sqrtf(n_axis); // Adjust so individual axes all move at pull-off rate.
 800bd76:	4b47      	ldr	r3, [pc, #284]	; (800be94 <limits_pull_off+0x1f8>)
 800bd78:	ed93 8a42 	vldr	s16, [r3, #264]	; 0x108
 800bd7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7e:	ee07 3a90 	vmov	s15, r3
 800bd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd86:	eeb0 0a67 	vmov.f32	s0, s15
 800bd8a:	f01a ff91 	bl	8026cb0 <sqrtf>
 800bd8e:	eef0 7a40 	vmov.f32	s15, s0
 800bd92:	ee68 7a27 	vmul.f32	s15, s16, s15
 800bd96:	edc7 7a03 	vstr	s15, [r7, #12]
    plan_data.condition.coolant = gc_state.modal.coolant;
 800bd9a:	4b3f      	ldr	r3, [pc, #252]	; (800be98 <limits_pull_off+0x1fc>)
 800bd9c:	7e5b      	ldrb	r3, [r3, #25]
 800bd9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 800bda2:	4b3d      	ldr	r3, [pc, #244]	; (800be98 <limits_pull_off+0x1fc>)
 800bda4:	f107 0410 	add.w	r4, r7, #16
 800bda8:	3348      	adds	r3, #72	; 0x48
 800bdaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

#ifdef KINEMATICS_API
    coord_data_t k_target;
    plan_buffer_line(kinematics.transform_from_cartesian(k_target.values, target.values), &plan_data);    // Bypass mc_line(). Directly plan homing motion.;
#else
    plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 800bdb0:	f107 020c 	add.w	r2, r7, #12
 800bdb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bdb8:	4611      	mov	r1, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f005 fc98 	bl	80116f0 <plan_buffer_line>
#endif

    sys.step_control.flags = 0;                 // Clear existing flags and
 800bdc0:	4b36      	ldr	r3, [pc, #216]	; (800be9c <limits_pull_off+0x200>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	761a      	strb	r2, [r3, #24]
    sys.step_control.execute_sys_motion = On;   // set to execute homing motion.
 800bdc6:	4a35      	ldr	r2, [pc, #212]	; (800be9c <limits_pull_off+0x200>)
 800bdc8:	7e13      	ldrb	r3, [r2, #24]
 800bdca:	f043 0304 	orr.w	r3, r3, #4
 800bdce:	7613      	strb	r3, [r2, #24]
    sys.homing_axis_lock.mask = axis.mask;
 800bdd0:	793a      	ldrb	r2, [r7, #4]
 800bdd2:	4b32      	ldr	r3, [pc, #200]	; (800be9c <limits_pull_off+0x200>)
 800bdd4:	765a      	strb	r2, [r3, #25]

    st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 800bdd6:	f012 fc91 	bl	801e6fc <st_prep_buffer>
    st_wake_up();       // Initiate motion.
 800bdda:	f012 f873 	bl	801dec4 <st_wake_up>

    while(true) {

        st_prep_buffer(); // Check and prep segment buffer.
 800bdde:	f012 fc8d 	bl	801e6fc <st_prep_buffer>

        // Exit routines: No time to run protocol_execute_realtime() in this loop.
        if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 800bde2:	4b2e      	ldr	r3, [pc, #184]	; (800be9c <limits_pull_off+0x200>)
 800bde4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bde6:	f003 0364 	and.w	r3, r3, #100	; 0x64
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d045      	beq.n	800be7a <limits_pull_off+0x1de>

            uint_fast16_t rt_exec = sys.rt_exec_state;
 800bdee:	4b2b      	ldr	r3, [pc, #172]	; (800be9c <limits_pull_off+0x200>)
 800bdf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdf2:	647b      	str	r3, [r7, #68]	; 0x44

            // Homing failure condition: Reset issued during cycle.
            if (rt_exec & EXEC_RESET)
 800bdf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdf6:	f003 0320 	and.w	r3, r3, #32
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d004      	beq.n	800be08 <limits_pull_off+0x16c>
                system_set_exec_alarm(Alarm_HomingFailReset);
 800bdfe:	4b28      	ldr	r3, [pc, #160]	; (800bea0 <limits_pull_off+0x204>)
 800be00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be02:	2106      	movs	r1, #6
 800be04:	4827      	ldr	r0, [pc, #156]	; (800bea4 <limits_pull_off+0x208>)
 800be06:	4798      	blx	r3

            // Homing failure condition: Safety door was opened.
            if (rt_exec & EXEC_SAFETY_DOOR)
 800be08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d004      	beq.n	800be1c <limits_pull_off+0x180>
                system_set_exec_alarm(Alarm_HomingFailDoor);
 800be12:	4b23      	ldr	r3, [pc, #140]	; (800bea0 <limits_pull_off+0x204>)
 800be14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be16:	2107      	movs	r1, #7
 800be18:	4822      	ldr	r0, [pc, #136]	; (800bea4 <limits_pull_off+0x208>)
 800be1a:	4798      	blx	r3

            // Homing failure condition: Homing switch(es) still engaged after pull-off motion
            if (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & axis.mask)
 800be1c:	4b20      	ldr	r3, [pc, #128]	; (800bea0 <limits_pull_off+0x204>)
 800be1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be20:	4798      	blx	r3
 800be22:	4603      	mov	r3, r0
 800be24:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800be28:	2300      	movs	r3, #0
 800be2a:	2200      	movs	r2, #0
 800be2c:	4619      	mov	r1, r3
 800be2e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800be30:	f7ff fd80 	bl	800b934 <homing_signals_select>
 800be34:	4603      	mov	r3, r0
 800be36:	b2da      	uxtb	r2, r3
 800be38:	793b      	ldrb	r3, [r7, #4]
 800be3a:	4013      	ands	r3, r2
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d004      	beq.n	800be4c <limits_pull_off+0x1b0>
                system_set_exec_alarm(Alarm_FailPulloff);
 800be42:	4b17      	ldr	r3, [pc, #92]	; (800bea0 <limits_pull_off+0x204>)
 800be44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be46:	2108      	movs	r1, #8
 800be48:	4816      	ldr	r0, [pc, #88]	; (800bea4 <limits_pull_off+0x208>)
 800be4a:	4798      	blx	r3

            if (sys.rt_exec_alarm) {
 800be4c:	4b13      	ldr	r3, [pc, #76]	; (800be9c <limits_pull_off+0x200>)
 800be4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d005      	beq.n	800be60 <limits_pull_off+0x1c4>
                mc_reset(); // Stop motors, if they are running.
 800be54:	f003 f94c 	bl	800f0f0 <mc_reset>
                protocol_execute_realtime();
 800be58:	f006 fcc4 	bl	80127e4 <protocol_execute_realtime>
                return false;
 800be5c:	2300      	movs	r3, #0
 800be5e:	e011      	b.n	800be84 <limits_pull_off+0x1e8>
            } else {
                // Pull-off motion complete. Disable CYCLE_STOP from executing.
                system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 800be60:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <limits_pull_off+0x204>)
 800be62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be64:	2104      	movs	r1, #4
 800be66:	4810      	ldr	r0, [pc, #64]	; (800bea8 <limits_pull_off+0x20c>)
 800be68:	4798      	blx	r3
                break;
 800be6a:	bf00      	nop
        }

        grbl.on_execute_realtime(STATE_HOMING);
    }

    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 800be6c:	f012 faa8 	bl	801e3c0 <st_reset>

    sys.step_control.flags = 0; // Return step control to normal operation.
 800be70:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <limits_pull_off+0x200>)
 800be72:	2200      	movs	r2, #0
 800be74:	761a      	strb	r2, [r3, #24]

    return true; // Note: failure is returned above if move fails.
 800be76:	2301      	movs	r3, #1
 800be78:	e004      	b.n	800be84 <limits_pull_off+0x1e8>
        grbl.on_execute_realtime(STATE_HOMING);
 800be7a:	4b0c      	ldr	r3, [pc, #48]	; (800beac <limits_pull_off+0x210>)
 800be7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7e:	2004      	movs	r0, #4
 800be80:	4798      	blx	r3
        st_prep_buffer(); // Check and prep segment buffer.
 800be82:	e7ac      	b.n	800bdde <limits_pull_off+0x142>
}
 800be84:	4618      	mov	r0, r3
 800be86:	3754      	adds	r7, #84	; 0x54
 800be88:	46bd      	mov	sp, r7
 800be8a:	ecbd 8b02 	vpop	{d8}
 800be8e:	bd90      	pop	{r4, r7, pc}
 800be90:	200015a8 	.word	0x200015a8
 800be94:	20001cf0 	.word	0x20001cf0
 800be98:	2000137c 	.word	0x2000137c
 800be9c:	20001520 	.word	0x20001520
 800bea0:	200016a0 	.word	0x200016a0
 800bea4:	2000156c 	.word	0x2000156c
 800bea8:	20001568 	.word	0x20001568
 800beac:	200015b8 	.word	0x200015b8

0800beb0 <homing_cycle>:
// the trigger point of the limit switches. The rapid stops are handled by a system level axis lock
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
static bool homing_cycle (axes_signals_t cycle, axes_signals_t auto_square)
{
 800beb0:	b590      	push	{r4, r7, lr}
 800beb2:	b0a3      	sub	sp, #140	; 0x8c
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	7138      	strb	r0, [r7, #4]
 800beb8:	7039      	strb	r1, [r7, #0]
    if (ABORTED) // Block if system reset has been issued.
 800beba:	4ba0      	ldr	r3, [pc, #640]	; (800c13c <homing_cycle+0x28c>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d103      	bne.n	800beca <homing_cycle+0x1a>
 800bec2:	4b9e      	ldr	r3, [pc, #632]	; (800c13c <homing_cycle+0x28c>)
 800bec4:	785b      	ldrb	r3, [r3, #1]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <homing_cycle+0x1e>
        return false;
 800beca:	2300      	movs	r3, #0
 800becc:	e35f      	b.n	800c58e <homing_cycle+0x6de>

    int32_t initial_trigger_position = 0, autosquare_fail_distance = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bed4:	2300      	movs	r3, #0
 800bed6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    uint_fast8_t n_cycle = (2 * settings.homing.locate_cycles + 1);
 800beda:	4b99      	ldr	r3, [pc, #612]	; (800c140 <homing_cycle+0x290>)
 800bedc:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	3301      	adds	r3, #1
 800bee4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint_fast8_t step_pin[N_AXIS], n_active_axis, dual_motor_axis = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	677b      	str	r3, [r7, #116]	; 0x74
    bool autosquare_check = false;
 800beea:	2300      	movs	r3, #0
 800beec:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    float max_travel = 0.0f, homing_rate;
 800bef0:	f04f 0300 	mov.w	r3, #0
 800bef4:	66fb      	str	r3, [r7, #108]	; 0x6c
    homing_mode_t mode = HomingMode_Seek;
 800bef6:	2300      	movs	r3, #0
 800bef8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    axes_signals_t axislock, homing_state;
    home_signals_t signals_state;
    squaring_mode_t squaring_mode = SquaringMode_Both;
 800befc:	2300      	movs	r3, #0
 800befe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    coord_data_t target;
    plan_line_data_t plan_data;

    plan_data_init(&plan_data);
 800bf02:	f107 0308 	add.w	r3, r7, #8
 800bf06:	4618      	mov	r0, r3
 800bf08:	f005 ff98 	bl	8011e3c <plan_data_init>
    plan_data.condition.system_motion = On;
 800bf0c:	7f3b      	ldrb	r3, [r7, #28]
 800bf0e:	f043 0302 	orr.w	r3, r3, #2
 800bf12:	773b      	strb	r3, [r7, #28]
    plan_data.condition.no_feed_override = On;
 800bf14:	7f3b      	ldrb	r3, [r7, #28]
 800bf16:	f043 0310 	orr.w	r3, r3, #16
 800bf1a:	773b      	strb	r3, [r7, #28]
    plan_data.line_number = DEFAULT_HOMING_CYCLE_LINE_NUMBER;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	627b      	str	r3, [r7, #36]	; 0x24

    // Initialize plan data struct for homing motion.
    memcpy(&plan_data.spindle, &gc_state.spindle, sizeof(spindle_t));
 800bf20:	4b88      	ldr	r3, [pc, #544]	; (800c144 <homing_cycle+0x294>)
 800bf22:	f107 040c 	add.w	r4, r7, #12
 800bf26:	3348      	adds	r3, #72	; 0x48
 800bf28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    plan_data.condition.coolant = gc_state.modal.coolant;
 800bf2e:	4b85      	ldr	r3, [pc, #532]	; (800c144 <homing_cycle+0x294>)
 800bf30:	7e5b      	ldrb	r3, [r3, #25]
 800bf32:	77bb      	strb	r3, [r7, #30]

    uint_fast8_t idx = N_AXIS;
 800bf34:	2303      	movs	r3, #3
 800bf36:	663b      	str	r3, [r7, #96]	; 0x60
    do {
        idx--;
 800bf38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	663b      	str	r3, [r7, #96]	; 0x60
        // Initialize step pin masks
#ifdef KINEMATICS_API
        step_pin[idx] = kinematics.limits_get_axis_mask(idx);
#else
        step_pin[idx] = bit(idx);
 800bf3e:	2201      	movs	r2, #1
 800bf40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf42:	409a      	lsls	r2, r3
 800bf44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	3388      	adds	r3, #136	; 0x88
 800bf4a:	443b      	add	r3, r7
 800bf4c:	f843 2c40 	str.w	r2, [r3, #-64]
#endif
        // Set target based on max_travel setting. Ensure homing switches engaged with search scalar.
        // NOTE: settings.axis[].max_travel is stored as a negative value.
        if(bit_istrue(cycle.mask, bit(idx))) {
 800bf50:	793b      	ldrb	r3, [r7, #4]
 800bf52:	461a      	mov	r2, r3
 800bf54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf56:	fa22 f303 	lsr.w	r3, r2, r3
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d032      	beq.n	800bfc8 <homing_cycle+0x118>
#if N_AXIS > 3
            if(bit_istrue(settings.steppers.is_rotational.mask, bit(idx)))
                max_travel = max(max_travel, (-HOMING_AXIS_SEARCH_SCALAR) * (settings.axis[idx].max_travel < -0.0f ? settings.axis[idx].max_travel : -360.0f));
            else
#endif
            max_travel = max(max_travel, (-HOMING_AXIS_SEARCH_SCALAR) * settings.axis[idx].max_travel);
 800bf62:	4977      	ldr	r1, [pc, #476]	; (800c140 <homing_cycle+0x290>)
 800bf64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	333c      	adds	r3, #60	; 0x3c
 800bf72:	edd3 7a00 	vldr	s15, [r3]
 800bf76:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 800bf7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf7e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800bf82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf8a:	dd02      	ble.n	800bf92 <homing_cycle+0xe2>
 800bf8c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bf90:	e00d      	b.n	800bfae <homing_cycle+0xfe>
 800bf92:	496b      	ldr	r1, [pc, #428]	; (800c140 <homing_cycle+0x290>)
 800bf94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bf96:	4613      	mov	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	333c      	adds	r3, #60	; 0x3c
 800bfa2:	edd3 7a00 	vldr	s15, [r3]
 800bfa6:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 800bfaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfae:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

            if(bit_istrue(auto_square.mask, bit(idx)))
 800bfb2:	783b      	ldrb	r3, [r7, #0]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <homing_cycle+0x118>
                dual_motor_axis = idx;
 800bfc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfc6:	677b      	str	r3, [r7, #116]	; 0x74
        }
    } while(idx);
 800bfc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1b4      	bne.n	800bf38 <homing_cycle+0x88>

    if(max_travel == 0.0f)
 800bfce:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800bfd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfda:	d101      	bne.n	800bfe0 <homing_cycle+0x130>
        return true;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e2d6      	b.n	800c58e <homing_cycle+0x6de>

    if((homing_rate = hal.homing.get_feedrate(cycle, HomingMode_Seek)) == 0.0f)
 800bfe0:	4b59      	ldr	r3, [pc, #356]	; (800c148 <homing_cycle+0x298>)
 800bfe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	7938      	ldrb	r0, [r7, #4]
 800bfe8:	4798      	blx	r3
 800bfea:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
 800bfee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800bff2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bffa:	d101      	bne.n	800c000 <homing_cycle+0x150>
        return false;
 800bffc:	2300      	movs	r3, #0
 800bffe:	e2c6      	b.n	800c58e <homing_cycle+0x6de>

    if(auto_square.mask) {
 800c000:	783b      	ldrb	r3, [r7, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d050      	beq.n	800c0a8 <homing_cycle+0x1f8>
        float fail_distance = (-settings.homing.dual_axis.fail_length_percent / 100.0f) * settings.axis[dual_motor_axis].max_travel;
 800c006:	4b4e      	ldr	r3, [pc, #312]	; (800c140 <homing_cycle+0x290>)
 800c008:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 800c00c:	eef1 7a67 	vneg.f32	s15, s15
 800c010:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c14c <homing_cycle+0x29c>
 800c014:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c018:	4949      	ldr	r1, [pc, #292]	; (800c140 <homing_cycle+0x290>)
 800c01a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c01c:	4613      	mov	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	440b      	add	r3, r1
 800c026:	333c      	adds	r3, #60	; 0x3c
 800c028:	edd3 7a00 	vldr	s15, [r3]
 800c02c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c030:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        fail_distance = min(fail_distance, settings.homing.dual_axis.fail_distance_max);
 800c034:	4b42      	ldr	r3, [pc, #264]	; (800c140 <homing_cycle+0x290>)
 800c036:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 800c03a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c03e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c046:	d501      	bpl.n	800c04c <homing_cycle+0x19c>
 800c048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c04a:	e002      	b.n	800c052 <homing_cycle+0x1a2>
 800c04c:	4b3c      	ldr	r3, [pc, #240]	; (800c140 <homing_cycle+0x290>)
 800c04e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800c052:	65fb      	str	r3, [r7, #92]	; 0x5c
        fail_distance = max(fail_distance, settings.homing.dual_axis.fail_distance_min);
 800c054:	4b3a      	ldr	r3, [pc, #232]	; (800c140 <homing_cycle+0x290>)
 800c056:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 800c05a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c05e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c066:	dd01      	ble.n	800c06c <homing_cycle+0x1bc>
 800c068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c06a:	e002      	b.n	800c072 <homing_cycle+0x1c2>
 800c06c:	4b34      	ldr	r3, [pc, #208]	; (800c140 <homing_cycle+0x290>)
 800c06e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800c072:	65fb      	str	r3, [r7, #92]	; 0x5c
        autosquare_fail_distance = truncf(fail_distance * settings.axis[dual_motor_axis].steps_per_mm);
 800c074:	4932      	ldr	r1, [pc, #200]	; (800c140 <homing_cycle+0x290>)
 800c076:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c078:	4613      	mov	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	440b      	add	r3, r1
 800c082:	3330      	adds	r3, #48	; 0x30
 800c084:	ed93 7a00 	vldr	s14, [r3]
 800c088:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800c08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c090:	eeb0 0a67 	vmov.f32	s0, s15
 800c094:	f01a ff25 	bl	8026ee2 <truncf>
 800c098:	eef0 7a40 	vmov.f32	s15, s0
 800c09c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0a0:	ee17 3a90 	vmov	r3, s15
 800c0a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // Set search mode with approach at seek rate to quickly engage the specified cycle.mask limit switches.
    do {

        // Initialize and declare variables needed for homing routine.
        system_convert_array_steps_to_mpos(target.values, sys.position);
 800c0a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c0ac:	4928      	ldr	r1, [pc, #160]	; (800c150 <homing_cycle+0x2a0>)
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f015 f9a2 	bl	80213f8 <system_convert_array_steps_to_mpos>
        axislock = (axes_signals_t){0};
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        n_active_axis = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	67bb      	str	r3, [r7, #120]	; 0x78

        idx = N_AXIS;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	663b      	str	r3, [r7, #96]	; 0x60
        do {
            // Set target location for active axes and setup computation for homing rate.
            if (bit_istrue(cycle.mask, bit(--idx))) {
 800c0c2:	793b      	ldrb	r3, [r7, #4]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	663b      	str	r3, [r7, #96]	; 0x60
 800c0cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d052      	beq.n	800c180 <homing_cycle+0x2d0>
                n_active_axis++;
 800c0da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0dc:	3301      	adds	r3, #1
 800c0de:	67bb      	str	r3, [r7, #120]	; 0x78

#ifdef KINEMATICS_API
                kinematics.limits_set_target_pos(idx);
#else
                sys.position[idx] = 0;
 800c0e0:	4a16      	ldr	r2, [pc, #88]	; (800c13c <homing_cycle+0x28c>)
 800c0e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0e4:	3322      	adds	r3, #34	; 0x22
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#endif
                // Set target direction based on cycle mask and homing cycle approach state.
                if (bit_istrue(settings.homing.dir_mask.value, bit(idx)))
 800c0ec:	4b14      	ldr	r3, [pc, #80]	; (800c140 <homing_cycle+0x290>)
 800c0ee:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d012      	beq.n	800c128 <homing_cycle+0x278>
                    target.values[idx] = mode == HomingMode_Pulloff ? max_travel : - max_travel;
 800c102:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c106:	2b02      	cmp	r3, #2
 800c108:	d004      	beq.n	800c114 <homing_cycle+0x264>
 800c10a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c10e:	eef1 7a67 	vneg.f32	s15, s15
 800c112:	e001      	b.n	800c118 <homing_cycle+0x268>
 800c114:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	3388      	adds	r3, #136	; 0x88
 800c11e:	443b      	add	r3, r7
 800c120:	3b58      	subs	r3, #88	; 0x58
 800c122:	edc3 7a00 	vstr	s15, [r3]
 800c126:	e01e      	b.n	800c166 <homing_cycle+0x2b6>
                else
                    target.values[idx] = mode == HomingMode_Pulloff ? - max_travel : max_travel;
 800c128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d111      	bne.n	800c154 <homing_cycle+0x2a4>
 800c130:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c134:	eef1 7a67 	vneg.f32	s15, s15
 800c138:	e00e      	b.n	800c158 <homing_cycle+0x2a8>
 800c13a:	bf00      	nop
 800c13c:	20001520 	.word	0x20001520
 800c140:	20001cf0 	.word	0x20001cf0
 800c144:	2000137c 	.word	0x2000137c
 800c148:	200016a0 	.word	0x200016a0
 800c14c:	42c80000 	.word	0x42c80000
 800c150:	200015a8 	.word	0x200015a8
 800c154:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800c158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	3388      	adds	r3, #136	; 0x88
 800c15e:	443b      	add	r3, r7
 800c160:	3b58      	subs	r3, #88	; 0x58
 800c162:	edc3 7a00 	vstr	s15, [r3]

                // Apply axislock to the step port pins active in this cycle.
                axislock.mask |= step_pin[idx];
 800c166:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800c16a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	3388      	adds	r3, #136	; 0x88
 800c170:	443b      	add	r3, r7
 800c172:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	4313      	orrs	r3, r2
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            }
        } while(idx);
 800c180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c182:	2b00      	cmp	r3, #0
 800c184:	d19d      	bne.n	800c0c2 <homing_cycle+0x212>
#ifdef KINEMATICS_API
        if(kinematics.homing_cycle_get_feedrate)
            homing_rate = kinematics.homing_cycle_get_feedrate(cycle, homing_rate, mode);
#endif

        if(grbl.on_homing_rate_set)
 800c186:	4baf      	ldr	r3, [pc, #700]	; (800c444 <homing_cycle+0x594>)
 800c188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d008      	beq.n	800c1a0 <homing_cycle+0x2f0>
            grbl.on_homing_rate_set(cycle, homing_rate, mode);
 800c18e:	4bad      	ldr	r3, [pc, #692]	; (800c444 <homing_cycle+0x594>)
 800c190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c192:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c196:	4611      	mov	r1, r2
 800c198:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 800c19c:	7938      	ldrb	r0, [r7, #4]
 800c19e:	4798      	blx	r3

        homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 800c1a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1a2:	ee07 3a90 	vmov	s15, r3
 800c1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1aa:	eeb0 0a67 	vmov.f32	s0, s15
 800c1ae:	f01a fd7f 	bl	8026cb0 <sqrtf>
 800c1b2:	eeb0 7a40 	vmov.f32	s14, s0
 800c1b6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800c1ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1be:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

        // Perform homing cycle. Planner buffer should be empty, as required to initiate the homing cycle.
        plan_data.feed_rate = homing_rate;      // Set current homing rate.
 800c1c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1c4:	60bb      	str	r3, [r7, #8]
        sys.homing_axis_lock.mask = axislock.mask;
 800c1c6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800c1ca:	4b9f      	ldr	r3, [pc, #636]	; (800c448 <homing_cycle+0x598>)
 800c1cc:	765a      	strb	r2, [r3, #25]

#ifdef KINEMATICS_API
        coord_data_t k_target;
        plan_buffer_line(kinematics.transform_from_cartesian(k_target.values, target.values), &plan_data);    // Bypass mc_line(). Directly plan homing motion.;
#else
        plan_buffer_line(target.values, &plan_data);    // Bypass mc_line(). Directly plan homing motion.
 800c1ce:	f107 0208 	add.w	r2, r7, #8
 800c1d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f005 fa89 	bl	80116f0 <plan_buffer_line>
#endif

        sys.step_control.flags = 0;
 800c1de:	4b9a      	ldr	r3, [pc, #616]	; (800c448 <homing_cycle+0x598>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	761a      	strb	r2, [r3, #24]
        sys.step_control.execute_sys_motion = On; // Set to execute homing motion and clear existing flags.
 800c1e4:	4a98      	ldr	r2, [pc, #608]	; (800c448 <homing_cycle+0x598>)
 800c1e6:	7e13      	ldrb	r3, [r2, #24]
 800c1e8:	f043 0304 	orr.w	r3, r3, #4
 800c1ec:	7613      	strb	r3, [r2, #24]
        st_prep_buffer();   // Prep and fill segment buffer from newly planned block.
 800c1ee:	f012 fa85 	bl	801e6fc <st_prep_buffer>
        st_wake_up();       // Initiate motion
 800c1f2:	f011 fe67 	bl	801dec4 <st_wake_up>

        do {

            if (mode != HomingMode_Pulloff) {
 800c1f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	f000 80a8 	beq.w	800c350 <homing_cycle+0x4a0>

                // Check homing switches state. Lock out cycle axes when they change.
                homing_state = homing_signals_select(signals_state = hal.homing.get_state(), auto_square, squaring_mode);
 800c200:	4b92      	ldr	r3, [pc, #584]	; (800c44c <homing_cycle+0x59c>)
 800c202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c204:	4798      	blx	r3
 800c206:	4603      	mov	r3, r0
 800c208:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c20a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c20e:	461a      	mov	r2, r3
 800c210:	7839      	ldrb	r1, [r7, #0]
 800c212:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c214:	f7ff fb8e 	bl	800b934 <homing_signals_select>
 800c218:	4603      	mov	r3, r0
 800c21a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                // Auto squaring check
                if((homing_state.mask & auto_square.mask) && squaring_mode == SquaringMode_Both) {
 800c21e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800c222:	783b      	ldrb	r3, [r7, #0]
 800c224:	4013      	ands	r3, r2
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d03d      	beq.n	800c2a8 <homing_cycle+0x3f8>
 800c22c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800c230:	2b00      	cmp	r3, #0
 800c232:	d139      	bne.n	800c2a8 <homing_cycle+0x3f8>
                    if((autosquare_check = (signals_state.a.mask & auto_square.mask) != (signals_state.b.mask & auto_square.mask))) {
 800c234:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800c238:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c23c:	4053      	eors	r3, r2
 800c23e:	b2da      	uxtb	r2, r3
 800c240:	783b      	ldrb	r3, [r7, #0]
 800c242:	4013      	ands	r3, r2
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	bf14      	ite	ne
 800c24a:	2301      	movne	r3, #1
 800c24c:	2300      	moveq	r3, #0
 800c24e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800c252:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800c256:	2b00      	cmp	r3, #0
 800c258:	d026      	beq.n	800c2a8 <homing_cycle+0x3f8>
                        initial_trigger_position = sys.position[dual_motor_axis];
 800c25a:	4a7b      	ldr	r2, [pc, #492]	; (800c448 <homing_cycle+0x598>)
 800c25c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c25e:	3322      	adds	r3, #34	; 0x22
 800c260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        homing_state.mask &= ~auto_square.mask;
 800c268:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c26c:	b25a      	sxtb	r2, r3
 800c26e:	783b      	ldrb	r3, [r7, #0]
 800c270:	b25b      	sxtb	r3, r3
 800c272:	43db      	mvns	r3, r3
 800c274:	b25b      	sxtb	r3, r3
 800c276:	4013      	ands	r3, r2
 800c278:	b25b      	sxtb	r3, r3
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                        squaring_mode = (signals_state.a.mask & auto_square.mask) ? SquaringMode_A : SquaringMode_B;
 800c280:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800c284:	783b      	ldrb	r3, [r7, #0]
 800c286:	4013      	ands	r3, r2
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d001      	beq.n	800c292 <homing_cycle+0x3e2>
 800c28e:	2301      	movs	r3, #1
 800c290:	e000      	b.n	800c294 <homing_cycle+0x3e4>
 800c292:	2302      	movs	r3, #2
 800c294:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
                        hal.stepper.disable_motors(auto_square, squaring_mode);
 800c298:	4b6c      	ldr	r3, [pc, #432]	; (800c44c <homing_cycle+0x59c>)
 800c29a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c29e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	7838      	ldrb	r0, [r7, #0]
 800c2a6:	4798      	blx	r3
                    }
                }

                idx = N_AXIS;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	663b      	str	r3, [r7, #96]	; 0x60
                do {
                    idx--;
 800c2ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	663b      	str	r3, [r7, #96]	; 0x60
                    if ((axislock.mask & step_pin[idx]) && (homing_state.mask & bit(idx))) {
 800c2b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	3388      	adds	r3, #136	; 0x88
 800c2be:	443b      	add	r3, r7
 800c2c0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d01d      	beq.n	800c306 <homing_cycle+0x456>
 800c2ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d6:	f003 0301 	and.w	r3, r3, #1
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d013      	beq.n	800c306 <homing_cycle+0x456>
#ifdef KINEMATICS_API
                        axislock.mask &= ~kinematics.limits_get_axis_mask(idx);
#else
                        axislock.mask &= ~bit(idx);
 800c2de:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800c2e2:	2101      	movs	r1, #1
 800c2e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	43db      	mvns	r3, r3
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
#endif
                        if(idx == dual_motor_axis)
 800c2f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d102      	bne.n	800c306 <homing_cycle+0x456>
                            autosquare_check = false;
 800c300:	2300      	movs	r3, #0
 800c302:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                    }
                } while(idx);
 800c306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1cf      	bne.n	800c2ac <homing_cycle+0x3fc>

                sys.homing_axis_lock.mask = axislock.mask;
 800c30c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800c310:	4b4d      	ldr	r3, [pc, #308]	; (800c448 <homing_cycle+0x598>)
 800c312:	765a      	strb	r2, [r3, #25]

                if (autosquare_check && abs(initial_trigger_position - sys.position[dual_motor_axis]) > autosquare_fail_distance) {
 800c314:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d019      	beq.n	800c350 <homing_cycle+0x4a0>
 800c31c:	4a4a      	ldr	r2, [pc, #296]	; (800c448 <homing_cycle+0x598>)
 800c31e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c320:	3322      	adds	r3, #34	; 0x22
 800c322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c326:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bfb8      	it	lt
 800c330:	425b      	neglt	r3, r3
 800c332:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c336:	429a      	cmp	r2, r3
 800c338:	da0a      	bge.n	800c350 <homing_cycle+0x4a0>
                    system_set_exec_alarm(Alarm_HomingFailAutoSquaringApproach);
 800c33a:	4b44      	ldr	r3, [pc, #272]	; (800c44c <homing_cycle+0x59c>)
 800c33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c33e:	210f      	movs	r1, #15
 800c340:	4843      	ldr	r0, [pc, #268]	; (800c450 <homing_cycle+0x5a0>)
 800c342:	4798      	blx	r3
                    mc_reset();
 800c344:	f002 fed4 	bl	800f0f0 <mc_reset>
                    protocol_execute_realtime();
 800c348:	f006 fa4c 	bl	80127e4 <protocol_execute_realtime>
                    return false;
 800c34c:	2300      	movs	r3, #0
 800c34e:	e11e      	b.n	800c58e <homing_cycle+0x6de>
                }
            }

            st_prep_buffer(); // Check and prep segment buffer.
 800c350:	f012 f9d4 	bl	801e6fc <st_prep_buffer>

            // Exit routines: No time to run protocol_execute_realtime() in this loop.
            if (sys.rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_COMPLETE)) {
 800c354:	4b3c      	ldr	r3, [pc, #240]	; (800c448 <homing_cycle+0x598>)
 800c356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c358:	f003 0364 	and.w	r3, r3, #100	; 0x64
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d055      	beq.n	800c40c <homing_cycle+0x55c>

                uint_fast16_t rt_exec = sys.rt_exec_state;
 800c360:	4b39      	ldr	r3, [pc, #228]	; (800c448 <homing_cycle+0x598>)
 800c362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c364:	65bb      	str	r3, [r7, #88]	; 0x58

                // Homing failure condition: Reset issued during cycle.
                if (rt_exec & EXEC_RESET)
 800c366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c368:	f003 0320 	and.w	r3, r3, #32
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d004      	beq.n	800c37a <homing_cycle+0x4ca>
                    system_set_exec_alarm(Alarm_HomingFailReset);
 800c370:	4b36      	ldr	r3, [pc, #216]	; (800c44c <homing_cycle+0x59c>)
 800c372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c374:	2106      	movs	r1, #6
 800c376:	4836      	ldr	r0, [pc, #216]	; (800c450 <homing_cycle+0x5a0>)
 800c378:	4798      	blx	r3

                // Homing failure condition: Safety door was opened.
                if (rt_exec & EXEC_SAFETY_DOOR)
 800c37a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c380:	2b00      	cmp	r3, #0
 800c382:	d004      	beq.n	800c38e <homing_cycle+0x4de>
                    system_set_exec_alarm(Alarm_HomingFailDoor);
 800c384:	4b31      	ldr	r3, [pc, #196]	; (800c44c <homing_cycle+0x59c>)
 800c386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c388:	2107      	movs	r1, #7
 800c38a:	4831      	ldr	r0, [pc, #196]	; (800c450 <homing_cycle+0x5a0>)
 800c38c:	4798      	blx	r3

                hal.delay_ms(2, NULL);
 800c38e:	4b2f      	ldr	r3, [pc, #188]	; (800c44c <homing_cycle+0x59c>)
 800c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c392:	2100      	movs	r1, #0
 800c394:	2002      	movs	r0, #2
 800c396:	4798      	blx	r3

                // Homing failure condition: Homing switch(es) still engaged after pull-off motion
                if (mode == HomingMode_Pulloff && (homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask & cycle.mask))
 800c398:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d117      	bne.n	800c3d0 <homing_cycle+0x520>
 800c3a0:	4b2a      	ldr	r3, [pc, #168]	; (800c44c <homing_cycle+0x59c>)
 800c3a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3a4:	4798      	blx	r3
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c3b4:	f7ff fabe 	bl	800b934 <homing_signals_select>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	793b      	ldrb	r3, [r7, #4]
 800c3be:	4013      	ands	r3, r2
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d004      	beq.n	800c3d0 <homing_cycle+0x520>
                    system_set_exec_alarm(Alarm_FailPulloff);
 800c3c6:	4b21      	ldr	r3, [pc, #132]	; (800c44c <homing_cycle+0x59c>)
 800c3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ca:	2108      	movs	r1, #8
 800c3cc:	4820      	ldr	r0, [pc, #128]	; (800c450 <homing_cycle+0x5a0>)
 800c3ce:	4798      	blx	r3

                // Homing failure condition: Limit switch not found during approach.
                if (mode != HomingMode_Pulloff && (rt_exec & EXEC_CYCLE_COMPLETE))
 800c3d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d009      	beq.n	800c3ec <homing_cycle+0x53c>
 800c3d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3da:	f003 0304 	and.w	r3, r3, #4
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d004      	beq.n	800c3ec <homing_cycle+0x53c>
                    system_set_exec_alarm(Alarm_HomingFailApproach);
 800c3e2:	4b1a      	ldr	r3, [pc, #104]	; (800c44c <homing_cycle+0x59c>)
 800c3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e6:	2109      	movs	r1, #9
 800c3e8:	4819      	ldr	r0, [pc, #100]	; (800c450 <homing_cycle+0x5a0>)
 800c3ea:	4798      	blx	r3

                if (sys.rt_exec_alarm) {
 800c3ec:	4b16      	ldr	r3, [pc, #88]	; (800c448 <homing_cycle+0x598>)
 800c3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d005      	beq.n	800c400 <homing_cycle+0x550>
                    mc_reset(); // Stop motors, if they are running.
 800c3f4:	f002 fe7c 	bl	800f0f0 <mc_reset>
                    protocol_execute_realtime();
 800c3f8:	f006 f9f4 	bl	80127e4 <protocol_execute_realtime>
                    return false;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	e0c6      	b.n	800c58e <homing_cycle+0x6de>
                } else {
                    // Pull-off motion complete. Disable CYCLE_STOP from executing.
                    system_clear_exec_state_flag(EXEC_CYCLE_COMPLETE);
 800c400:	4b12      	ldr	r3, [pc, #72]	; (800c44c <homing_cycle+0x59c>)
 800c402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c404:	2104      	movs	r1, #4
 800c406:	4813      	ldr	r0, [pc, #76]	; (800c454 <homing_cycle+0x5a4>)
 800c408:	4798      	blx	r3
                    break;
 800c40a:	e00a      	b.n	800c422 <homing_cycle+0x572>
                }
            }

            grbl.on_execute_realtime(STATE_HOMING);
 800c40c:	4b0d      	ldr	r3, [pc, #52]	; (800c444 <homing_cycle+0x594>)
 800c40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c410:	2004      	movs	r0, #4
 800c412:	4798      	blx	r3

        } while (axislock.mask & AXES_BITMASK);
 800c414:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c418:	f003 0307 	and.w	r3, r3, #7
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f47f aeea 	bne.w	800c1f6 <homing_cycle+0x346>

        st_reset(); // Immediately force kill steppers and reset step segment buffer.
 800c422:	f011 ffcd 	bl	801e3c0 <st_reset>
        hal.delay_ms(settings.homing.debounce_delay, NULL); // Delay to allow transient dynamics to dissipate.
 800c426:	4b09      	ldr	r3, [pc, #36]	; (800c44c <homing_cycle+0x59c>)
 800c428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42a:	4a0b      	ldr	r2, [pc, #44]	; (800c458 <homing_cycle+0x5a8>)
 800c42c:	f8b2 2112 	ldrh.w	r2, [r2, #274]	; 0x112
 800c430:	2100      	movs	r1, #0
 800c432:	4610      	mov	r0, r2
 800c434:	4798      	blx	r3

        // Reverse direction and reset homing rate for cycle(s).
        mode = mode == HomingMode_Pulloff ? HomingMode_Locate : HomingMode_Pulloff;
 800c436:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d10e      	bne.n	800c45c <homing_cycle+0x5ac>
 800c43e:	2301      	movs	r3, #1
 800c440:	e00d      	b.n	800c45e <homing_cycle+0x5ae>
 800c442:	bf00      	nop
 800c444:	200015b8 	.word	0x200015b8
 800c448:	20001520 	.word	0x20001520
 800c44c:	200016a0 	.word	0x200016a0
 800c450:	2000156c 	.word	0x2000156c
 800c454:	20001568 	.word	0x20001568
 800c458:	20001cf0 	.word	0x20001cf0
 800c45c:	2302      	movs	r3, #2
 800c45e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        homing_rate = hal.homing.get_feedrate(cycle, mode);
 800c462:	4b4d      	ldr	r3, [pc, #308]	; (800c598 <homing_cycle+0x6e8>)
 800c464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c466:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c46a:	4611      	mov	r1, r2
 800c46c:	7938      	ldrb	r0, [r7, #4]
 800c46e:	4798      	blx	r3
 800c470:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

        // After first cycle, homing enters locating phase. Shorten search to pull-off distance.
        if (mode == HomingMode_Locate) {
 800c474:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d109      	bne.n	800c490 <homing_cycle+0x5e0>
            // Only one initial pass for auto squared axis when both motors are active
            //if(mode == SquaringMode_Both && auto_square.mask)
            //    cycle.mask &= ~auto_square.mask;
            max_travel = settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR;
 800c47c:	4b47      	ldr	r3, [pc, #284]	; (800c59c <homing_cycle+0x6ec>)
 800c47e:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 800c482:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c48a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 800c48e:	e003      	b.n	800c498 <homing_cycle+0x5e8>
        } else
            max_travel = settings.homing.pulloff;
 800c490:	4b42      	ldr	r3, [pc, #264]	; (800c59c <homing_cycle+0x6ec>)
 800c492:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c496:	66fb      	str	r3, [r7, #108]	; 0x6c

        if(auto_square.mask) {
 800c498:	783b      	ldrb	r3, [r7, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00c      	beq.n	800c4b8 <homing_cycle+0x608>
            autosquare_check = false;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            squaring_mode = SquaringMode_Both;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 800c4aa:	4b3b      	ldr	r3, [pc, #236]	; (800c598 <homing_cycle+0x6e8>)
 800c4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	4798      	blx	r3
        }

    } while (homing_rate > 0.0f && cycle.mask && n_cycle-- > 0);
 800c4b8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800c4bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c4:	dd08      	ble.n	800c4d8 <homing_cycle+0x628>
 800c4c6:	793b      	ldrb	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d005      	beq.n	800c4d8 <homing_cycle+0x628>
 800c4cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c4ce:	1e5a      	subs	r2, r3, #1
 800c4d0:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f47f ade8 	bne.w	800c0a8 <homing_cycle+0x1f8>

    // Pull off B motor to compensate for switch inaccuracy when configured.
    if(auto_square.mask && settings.axis[dual_motor_axis].dual_axis_offset != 0.0f) {
 800c4d8:	783b      	ldrb	r3, [r7, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d046      	beq.n	800c56c <homing_cycle+0x6bc>
 800c4de:	492f      	ldr	r1, [pc, #188]	; (800c59c <homing_cycle+0x6ec>)
 800c4e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	440b      	add	r3, r1
 800c4ec:	3340      	adds	r3, #64	; 0x40
 800c4ee:	edd3 7a00 	vldr	s15, [r3]
 800c4f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fa:	d037      	beq.n	800c56c <homing_cycle+0x6bc>
        hal.stepper.disable_motors(auto_square, settings.axis[dual_motor_axis].dual_axis_offset < 0.0f ? SquaringMode_B : SquaringMode_A);
 800c4fc:	4b26      	ldr	r3, [pc, #152]	; (800c598 <homing_cycle+0x6e8>)
 800c4fe:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800c502:	4926      	ldr	r1, [pc, #152]	; (800c59c <homing_cycle+0x6ec>)
 800c504:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c506:	4613      	mov	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	440b      	add	r3, r1
 800c510:	3340      	adds	r3, #64	; 0x40
 800c512:	edd3 7a00 	vldr	s15, [r3]
 800c516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51e:	d501      	bpl.n	800c524 <homing_cycle+0x674>
 800c520:	2302      	movs	r3, #2
 800c522:	e000      	b.n	800c526 <homing_cycle+0x676>
 800c524:	2301      	movs	r3, #1
 800c526:	4619      	mov	r1, r3
 800c528:	7838      	ldrb	r0, [r7, #0]
 800c52a:	47a0      	blx	r4
        if(!limits_pull_off(auto_square, fabs(settings.axis[dual_motor_axis].dual_axis_offset)))
 800c52c:	491b      	ldr	r1, [pc, #108]	; (800c59c <homing_cycle+0x6ec>)
 800c52e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c530:	4613      	mov	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	440b      	add	r3, r1
 800c53a:	3340      	adds	r3, #64	; 0x40
 800c53c:	edd3 7a00 	vldr	s15, [r3]
 800c540:	eef0 7ae7 	vabs.f32	s15, s15
 800c544:	eeb0 0a67 	vmov.f32	s0, s15
 800c548:	7838      	ldrb	r0, [r7, #0]
 800c54a:	f7ff fba7 	bl	800bc9c <limits_pull_off>
 800c54e:	4603      	mov	r3, r0
 800c550:	f083 0301 	eor.w	r3, r3, #1
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b00      	cmp	r3, #0
 800c558:	d001      	beq.n	800c55e <homing_cycle+0x6ae>
            return false;
 800c55a:	2300      	movs	r3, #0
 800c55c:	e017      	b.n	800c58e <homing_cycle+0x6de>
        hal.stepper.disable_motors((axes_signals_t){0}, SquaringMode_Both);
 800c55e:	4b0e      	ldr	r3, [pc, #56]	; (800c598 <homing_cycle+0x6e8>)
 800c560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c564:	2200      	movs	r2, #0
 800c566:	2100      	movs	r1, #0
 800c568:	4610      	mov	r0, r2
 800c56a:	4798      	blx	r3
    // some initial clearance off the switches and should also help prevent them from falsely
    // triggering when hard limits are enabled or when more than one axes shares a limit pin.
#ifdef KINEMATICS_API
    kinematics.limits_set_machine_positions(cycle);
#else
    limits_set_machine_positions(cycle, true);
 800c56c:	2101      	movs	r1, #1
 800c56e:	7938      	ldrb	r0, [r7, #4]
 800c570:	f7ff fb02 	bl	800bb78 <limits_set_machine_positions>
#endif

#if ENABLE_BACKLASH_COMPENSATION
    mc_backlash_init(cycle);
#endif
    sys.step_control.flags = 0; // Return step control to normal operation.
 800c574:	4b0a      	ldr	r3, [pc, #40]	; (800c5a0 <homing_cycle+0x6f0>)
 800c576:	2200      	movs	r2, #0
 800c578:	761a      	strb	r2, [r3, #24]
    sys.homed.mask |= cycle.mask;
 800c57a:	4b09      	ldr	r3, [pc, #36]	; (800c5a0 <homing_cycle+0x6f0>)
 800c57c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800c580:	793b      	ldrb	r3, [r7, #4]
 800c582:	4313      	orrs	r3, r2
 800c584:	b2da      	uxtb	r2, r3
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <homing_cycle+0x6f0>)
 800c588:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return true;
 800c58c:	2301      	movs	r3, #1
}
 800c58e:	4618      	mov	r0, r3
 800c590:	378c      	adds	r7, #140	; 0x8c
 800c592:	46bd      	mov	sp, r7
 800c594:	bd90      	pop	{r4, r7, pc}
 800c596:	bf00      	nop
 800c598:	200016a0 	.word	0x200016a0
 800c59c:	20001cf0 	.word	0x20001cf0
 800c5a0:	20001520 	.word	0x20001520

0800c5a4 <limits_go_home>:

// Perform homing cycle(s) according to configuration.
// NOTE: only one auto squared axis can be homed at a time.
status_code_t limits_go_home (axes_signals_t cycle)
{
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	7138      	strb	r0, [r7, #4]
    axes_signals_t auto_square = {0}, auto_squared = {0};
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	743b      	strb	r3, [r7, #16]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	733b      	strb	r3, [r7, #12]

    hal.limits.enable(settings.limits.flags.hard_enabled, cycle); // Disable hard limits pin change register for cycle duration
 800c5b4:	4b3c      	ldr	r3, [pc, #240]	; (800c6a8 <limits_go_home+0x104>)
 800c5b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b8:	4a3c      	ldr	r2, [pc, #240]	; (800c6ac <limits_go_home+0x108>)
 800c5ba:	f892 2124 	ldrb.w	r2, [r2, #292]	; 0x124
 800c5be:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	2a00      	cmp	r2, #0
 800c5c6:	bf14      	ite	ne
 800c5c8:	2201      	movne	r2, #1
 800c5ca:	2200      	moveq	r2, #0
 800c5cc:	b2d2      	uxtb	r2, r2
 800c5ce:	7939      	ldrb	r1, [r7, #4]
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	4798      	blx	r3

    if(hal.stepper.get_ganged)
 800c5d4:	4b34      	ldr	r3, [pc, #208]	; (800c6a8 <limits_go_home+0x104>)
 800c5d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d006      	beq.n	800c5ec <limits_go_home+0x48>
        auto_squared = hal.stepper.get_ganged(true);
 800c5de:	4b32      	ldr	r3, [pc, #200]	; (800c6a8 <limits_go_home+0x104>)
 800c5e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c5e4:	2001      	movs	r0, #1
 800c5e6:	4798      	blx	r3
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	733b      	strb	r3, [r7, #12]

    auto_squared.mask &= cycle.mask;
 800c5ec:	7b3a      	ldrb	r2, [r7, #12]
 800c5ee:	793b      	ldrb	r3, [r7, #4]
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	733b      	strb	r3, [r7, #12]

    if(auto_squared.mask) {
 800c5f6:	7b3b      	ldrb	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d041      	beq.n	800c680 <limits_go_home+0xdc>

        if(!hal.stepper.disable_motors)
 800c5fc:	4b2a      	ldr	r3, [pc, #168]	; (800c6a8 <limits_go_home+0x104>)
 800c5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c602:	2b00      	cmp	r3, #0
 800c604:	d101      	bne.n	800c60a <limits_go_home+0x66>
            return Status_IllegalHomingConfiguration; // Bad driver! - should not happen.
 800c606:	2337      	movs	r3, #55	; 0x37
 800c608:	e049      	b.n	800c69e <limits_go_home+0xfa>

        auto_square.x = On;
 800c60a:	7c3b      	ldrb	r3, [r7, #16]
 800c60c:	f043 0301 	orr.w	r3, r3, #1
 800c610:	743b      	strb	r3, [r7, #16]
        while(!(auto_squared.mask & auto_square.mask))
 800c612:	e003      	b.n	800c61c <limits_go_home+0x78>
            auto_square.mask <<= 1;
 800c614:	7c3b      	ldrb	r3, [r7, #16]
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	743b      	strb	r3, [r7, #16]
        while(!(auto_squared.mask & auto_square.mask))
 800c61c:	7b3a      	ldrb	r2, [r7, #12]
 800c61e:	7c3b      	ldrb	r3, [r7, #16]
 800c620:	4013      	ands	r3, r2
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0f5      	beq.n	800c614 <limits_go_home+0x70>

        if(auto_squared.mask != auto_square.mask)
 800c628:	7b3a      	ldrb	r2, [r7, #12]
 800c62a:	7c3b      	ldrb	r3, [r7, #16]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d001      	beq.n	800c634 <limits_go_home+0x90>
            return Status_IllegalHomingConfiguration; // Attempt at squaring more than one auto squared axis at the same time.
 800c630:	2337      	movs	r3, #55	; 0x37
 800c632:	e034      	b.n	800c69e <limits_go_home+0xfa>

        if((auto_squared.mask & homing_signals_select(hal.homing.get_state(), (axes_signals_t){0}, SquaringMode_Both).mask) && !limits_pull_off(auto_square, settings.homing.pulloff * HOMING_AXIS_LOCATE_SCALAR))
 800c634:	7b3c      	ldrb	r4, [r7, #12]
 800c636:	4b1c      	ldr	r3, [pc, #112]	; (800c6a8 <limits_go_home+0x104>)
 800c638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c63a:	4798      	blx	r3
 800c63c:	4603      	mov	r3, r0
 800c63e:	82bb      	strh	r3, [r7, #20]
 800c640:	2300      	movs	r3, #0
 800c642:	2200      	movs	r2, #0
 800c644:	4619      	mov	r1, r3
 800c646:	6978      	ldr	r0, [r7, #20]
 800c648:	f7ff f974 	bl	800b934 <homing_signals_select>
 800c64c:	4603      	mov	r3, r0
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	4023      	ands	r3, r4
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d013      	beq.n	800c680 <limits_go_home+0xdc>
 800c658:	4b14      	ldr	r3, [pc, #80]	; (800c6ac <limits_go_home+0x108>)
 800c65a:	edd3 7a43 	vldr	s15, [r3, #268]	; 0x10c
 800c65e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c662:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c666:	eeb0 0a67 	vmov.f32	s0, s15
 800c66a:	7c38      	ldrb	r0, [r7, #16]
 800c66c:	f7ff fb16 	bl	800bc9c <limits_pull_off>
 800c670:	4603      	mov	r3, r0
 800c672:	f083 0301 	eor.w	r3, r3, #1
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <limits_go_home+0xdc>
            return Status_LimitsEngaged; // Auto squaring with limit switch asserted is not allowed.
 800c67c:	232d      	movs	r3, #45	; 0x2d
 800c67e:	e00e      	b.n	800c69e <limits_go_home+0xfa>
    }

    tc_clear_tlo_reference(cycle);
 800c680:	7938      	ldrb	r0, [r7, #4]
 800c682:	f015 fd5f 	bl	8022144 <tc_clear_tlo_reference>

    return grbl.home_machine(cycle, auto_square) ? Status_OK : Status_Unhandled;
 800c686:	4b0a      	ldr	r3, [pc, #40]	; (800c6b0 <limits_go_home+0x10c>)
 800c688:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c68c:	7c39      	ldrb	r1, [r7, #16]
 800c68e:	7938      	ldrb	r0, [r7, #4]
 800c690:	4798      	blx	r3
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d001      	beq.n	800c69c <limits_go_home+0xf8>
 800c698:	2300      	movs	r3, #0
 800c69a:	e000      	b.n	800c69e <limits_go_home+0xfa>
 800c69c:	2354      	movs	r3, #84	; 0x54
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	371c      	adds	r7, #28
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd90      	pop	{r4, r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	200016a0 	.word	0x200016a0
 800c6ac:	20001cf0 	.word	0x20001cf0
 800c6b0:	200015b8 	.word	0x200015b8

0800c6b4 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Also used by jogging to block travel outside soft-limit volume.
void limits_soft_check (float *target, planner_cond_t condition)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
#ifdef KINEMATICS_API
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, false)) {
#else
    if(condition.target_validated ? !condition.target_valid : !grbl.check_travel_limits(target, sys.soft_limits, true)) {
 800c6be:	787b      	ldrb	r3, [r7, #1]
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d009      	beq.n	800c6de <limits_soft_check+0x2a>
 800c6ca:	787b      	ldrb	r3, [r7, #1]
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	bf0c      	ite	eq
 800c6d6:	2301      	moveq	r3, #1
 800c6d8:	2300      	movne	r3, #0
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	e00c      	b.n	800c6f8 <limits_soft_check+0x44>
 800c6de:	4b1c      	ldr	r3, [pc, #112]	; (800c750 <limits_soft_check+0x9c>)
 800c6e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c6e4:	491b      	ldr	r1, [pc, #108]	; (800c754 <limits_soft_check+0xa0>)
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	4798      	blx	r3
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	f083 0301 	eor.w	r3, r3, #1
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d026      	beq.n	800c74a <limits_soft_check+0x96>
#endif

        sys.flags.soft_limit = On;
 800c6fc:	4a15      	ldr	r2, [pc, #84]	; (800c754 <limits_soft_check+0xa0>)
 800c6fe:	7d93      	ldrb	r3, [r2, #22]
 800c700:	f043 0304 	orr.w	r3, r3, #4
 800c704:	7593      	strb	r3, [r2, #22]
        // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
        // workspace volume so just come to a controlled stop so position is not lost. When complete
        // enter alarm mode.
        if(state_get() == STATE_CYCLE) {
 800c706:	f010 fb0b 	bl	801cd20 <state_get>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b08      	cmp	r3, #8
 800c70e:	d111      	bne.n	800c734 <limits_soft_check+0x80>
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 800c710:	4b11      	ldr	r3, [pc, #68]	; (800c758 <limits_soft_check+0xa4>)
 800c712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c714:	2108      	movs	r1, #8
 800c716:	4811      	ldr	r0, [pc, #68]	; (800c75c <limits_soft_check+0xa8>)
 800c718:	4798      	blx	r3
            do {
                if(!protocol_execute_realtime())
 800c71a:	f006 f863 	bl	80127e4 <protocol_execute_realtime>
 800c71e:	4603      	mov	r3, r0
 800c720:	f083 0301 	eor.w	r3, r3, #1
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10e      	bne.n	800c748 <limits_soft_check+0x94>
                    return; // aborted!
            } while(state_get() != STATE_IDLE);
 800c72a:	f010 faf9 	bl	801cd20 <state_get>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1f2      	bne.n	800c71a <limits_soft_check+0x66>
        }
        mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 800c734:	f002 fcdc 	bl	800f0f0 <mc_reset>
        system_set_exec_alarm(Alarm_SoftLimit); // Indicate soft limit critical event
 800c738:	4b07      	ldr	r3, [pc, #28]	; (800c758 <limits_soft_check+0xa4>)
 800c73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c73c:	2102      	movs	r1, #2
 800c73e:	4808      	ldr	r0, [pc, #32]	; (800c760 <limits_soft_check+0xac>)
 800c740:	4798      	blx	r3
        protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 800c742:	f006 f84f 	bl	80127e4 <protocol_execute_realtime>
 800c746:	e000      	b.n	800c74a <limits_soft_check+0x96>
                    return; // aborted!
 800c748:	bf00      	nop
    }
}
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	200015b8 	.word	0x200015b8
 800c754:	20001520 	.word	0x20001520
 800c758:	200016a0 	.word	0x200016a0
 800c75c:	20001568 	.word	0x20001568
 800c760:	2000156c 	.word	0x2000156c

0800c764 <limits_set_homing_axes>:

// Set axes to be homed from settings.
void limits_set_homing_axes (void)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
    uint_fast8_t idx = N_AXIS;
 800c76a:	2303      	movs	r3, #3
 800c76c:	607b      	str	r3, [r7, #4]

    sys.homing.mask = 0;
 800c76e:	4b12      	ldr	r3, [pc, #72]	; (800c7b8 <limits_set_homing_axes+0x54>)
 800c770:	2200      	movs	r2, #0
 800c772:	769a      	strb	r2, [r3, #26]

    do {
        sys.homing.mask |= settings.homing.cycle[--idx].mask;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	3b01      	subs	r3, #1
 800c778:	607b      	str	r3, [r7, #4]
 800c77a:	4a10      	ldr	r2, [pc, #64]	; (800c7bc <limits_set_homing_axes+0x58>)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4413      	add	r3, r2
 800c780:	f203 1315 	addw	r3, r3, #277	; 0x115
 800c784:	781a      	ldrb	r2, [r3, #0]
 800c786:	4b0c      	ldr	r3, [pc, #48]	; (800c7b8 <limits_set_homing_axes+0x54>)
 800c788:	7e9b      	ldrb	r3, [r3, #26]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	4b0a      	ldr	r3, [pc, #40]	; (800c7b8 <limits_set_homing_axes+0x54>)
 800c790:	769a      	strb	r2, [r3, #26]
    } while(idx);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1ed      	bne.n	800c774 <limits_set_homing_axes+0x10>

    sys.homed.mask &= sys.homing.mask;
 800c798:	4b07      	ldr	r3, [pc, #28]	; (800c7b8 <limits_set_homing_axes+0x54>)
 800c79a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800c79e:	4b06      	ldr	r3, [pc, #24]	; (800c7b8 <limits_set_homing_axes+0x54>)
 800c7a0:	7e9b      	ldrb	r3, [r3, #26]
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	4b04      	ldr	r3, [pc, #16]	; (800c7b8 <limits_set_homing_axes+0x54>)
 800c7a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr
 800c7b8:	20001520 	.word	0x20001520
 800c7bc:	20001cf0 	.word	0x20001cf0

0800c7c0 <limits_homing_required>:

// Check if homing is required.
bool limits_homing_required (void)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	af00      	add	r7, sp, #0
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 800c7c4:	4b1b      	ldr	r3, [pc, #108]	; (800c834 <limits_homing_required+0x74>)
 800c7c6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800c7ca:	f003 0301 	and.w	r3, r3, #1
 800c7ce:	b2db      	uxtb	r3, r3
            (sys.cold_start || !settings.homing.flags.override_locks) &&
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d025      	beq.n	800c820 <limits_homing_required+0x60>
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 800c7d4:	4b17      	ldr	r3, [pc, #92]	; (800c834 <limits_homing_required+0x74>)
 800c7d6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800c7da:	f003 0304 	and.w	r3, r3, #4
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d01d      	beq.n	800c820 <limits_homing_required+0x60>
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 800c7e4:	4b14      	ldr	r3, [pc, #80]	; (800c838 <limits_homing_required+0x78>)
 800c7e6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
    return settings.homing.flags.enabled && settings.homing.flags.init_lock &&
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d107      	bne.n	800c7fe <limits_homing_required+0x3e>
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 800c7ee:	4b11      	ldr	r3, [pc, #68]	; (800c834 <limits_homing_required+0x74>)
 800c7f0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800c7f4:	f003 0320 	and.w	r3, r3, #32
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d110      	bne.n	800c820 <limits_homing_required+0x60>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 800c7fe:	4b0e      	ldr	r3, [pc, #56]	; (800c838 <limits_homing_required+0x78>)
 800c800:	7e9b      	ldrb	r3, [r3, #26]
            (sys.cold_start || !settings.homing.flags.override_locks) &&
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00c      	beq.n	800c820 <limits_homing_required+0x60>
              sys.homing.mask && (sys.homing.mask & sys.homed.mask) != sys.homing.mask;
 800c806:	4b0c      	ldr	r3, [pc, #48]	; (800c838 <limits_homing_required+0x78>)
 800c808:	7e9a      	ldrb	r2, [r3, #26]
 800c80a:	4b0b      	ldr	r3, [pc, #44]	; (800c838 <limits_homing_required+0x78>)
 800c80c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c810:	4013      	ands	r3, r2
 800c812:	b2da      	uxtb	r2, r3
 800c814:	4b08      	ldr	r3, [pc, #32]	; (800c838 <limits_homing_required+0x78>)
 800c816:	7e9b      	ldrb	r3, [r3, #26]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d001      	beq.n	800c820 <limits_homing_required+0x60>
 800c81c:	2301      	movs	r3, #1
 800c81e:	e000      	b.n	800c822 <limits_homing_required+0x62>
 800c820:	2300      	movs	r3, #0
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	b2db      	uxtb	r3, r3
}
 800c828:	4618      	mov	r0, r3
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	20001cf0 	.word	0x20001cf0
 800c838:	20001520 	.word	0x20001520

0800c83c <get_homing_rate>:

static float get_homing_rate (axes_signals_t cycle, homing_mode_t mode)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	7138      	strb	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	71fb      	strb	r3, [r7, #7]
    return mode == HomingMode_Locate ? settings.homing.feed_rate : settings.homing.seek_rate;
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d103      	bne.n	800c856 <get_homing_rate+0x1a>
 800c84e:	4b08      	ldr	r3, [pc, #32]	; (800c870 <get_homing_rate+0x34>)
 800c850:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c854:	e002      	b.n	800c85c <get_homing_rate+0x20>
 800c856:	4b06      	ldr	r3, [pc, #24]	; (800c870 <get_homing_rate+0x34>)
 800c858:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c85c:	ee07 3a90 	vmov	s15, r3
}
 800c860:	eeb0 0a67 	vmov.f32	s0, s15
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	20001cf0 	.word	0x20001cf0

0800c874 <check_travel_limits>:

// Checks and reports if target array exceeds machine travel limits. Returns false if check failed.
static bool check_travel_limits (float *target, axes_signals_t axes, bool is_cartesian)
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	7039      	strb	r1, [r7, #0]
 800c87e:	4613      	mov	r3, r2
 800c880:	70fb      	strb	r3, [r7, #3]
    bool failed = false;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]
    uint_fast8_t idx = N_AXIS;
 800c886:	2303      	movs	r3, #3
 800c888:	60bb      	str	r3, [r7, #8]

    if(is_cartesian && (sys.homed.mask & axes.mask)) do {
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d055      	beq.n	800c93c <check_travel_limits+0xc8>
 800c890:	4b35      	ldr	r3, [pc, #212]	; (800c968 <check_travel_limits+0xf4>)
 800c892:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800c896:	783b      	ldrb	r3, [r7, #0]
 800c898:	4013      	ands	r3, r2
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d04d      	beq.n	800c93c <check_travel_limits+0xc8>
        idx--;
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	60bb      	str	r3, [r7, #8]
        if(bit_istrue(sys.homed.mask, bit(idx)) && bit_istrue(axes.mask, bit(idx)))
 800c8a6:	4b30      	ldr	r3, [pc, #192]	; (800c968 <check_travel_limits+0xf4>)
 800c8a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d036      	beq.n	800c92a <check_travel_limits+0xb6>
 800c8bc:	783b      	ldrb	r3, [r7, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d02d      	beq.n	800c92a <check_travel_limits+0xb6>
            failed = target[idx] < sys.work_envelope.min.values[idx] || target[idx] > sys.work_envelope.max.values[idx];
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	ed93 7a00 	vldr	s14, [r3]
 800c8da:	4a23      	ldr	r2, [pc, #140]	; (800c968 <check_travel_limits+0xf4>)
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	3318      	adds	r3, #24
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4413      	add	r3, r2
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	edd3 7a00 	vldr	s15, [r3]
 800c8ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f2:	d412      	bmi.n	800c91a <check_travel_limits+0xa6>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	ed93 7a00 	vldr	s14, [r3]
 800c900:	4a19      	ldr	r2, [pc, #100]	; (800c968 <check_travel_limits+0xf4>)
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	331a      	adds	r3, #26
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	4413      	add	r3, r2
 800c90a:	3308      	adds	r3, #8
 800c90c:	edd3 7a00 	vldr	s15, [r3]
 800c910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c918:	dd01      	ble.n	800c91e <check_travel_limits+0xaa>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <check_travel_limits+0xac>
 800c91e:	2300      	movs	r3, #0
 800c920:	73fb      	strb	r3, [r7, #15]
 800c922:	7bfb      	ldrb	r3, [r7, #15]
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	73fb      	strb	r3, [r7, #15]
    } while(!failed && idx);
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
 800c92c:	f083 0301 	eor.w	r3, r3, #1
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <check_travel_limits+0xc8>
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1b1      	bne.n	800c8a0 <check_travel_limits+0x2c>

    return is_cartesian && !failed;
 800c93c:	78fb      	ldrb	r3, [r7, #3]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d007      	beq.n	800c952 <check_travel_limits+0xde>
 800c942:	7bfb      	ldrb	r3, [r7, #15]
 800c944:	f083 0301 	eor.w	r3, r3, #1
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <check_travel_limits+0xde>
 800c94e:	2301      	movs	r3, #1
 800c950:	e000      	b.n	800c954 <check_travel_limits+0xe0>
 800c952:	2300      	movs	r3, #0
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	b2db      	uxtb	r3, r3
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	20001520 	.word	0x20001520

0800c96c <check_arc_travel_limits>:

// Checks and reports if the arc exceeds machine travel limits. Returns false if check failed.
// NOTE: needs the work envelope to be a cuboid!
static bool check_arc_travel_limits (coord_data_t *target, coord_data_t *position, point_2d_t center, float radius, plane_t plane, int32_t turns)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b094      	sub	sp, #80	; 0x50
 800c970:	af00      	add	r7, sp, #0
 800c972:	61f8      	str	r0, [r7, #28]
 800c974:	61b9      	str	r1, [r7, #24]
 800c976:	eeb0 7a40 	vmov.f32	s14, s0
 800c97a:	eef0 7a60 	vmov.f32	s15, s1
 800c97e:	ed87 1a03 	vstr	s2, [r7, #12]
 800c982:	60ba      	str	r2, [r7, #8]
 800c984:	607b      	str	r3, [r7, #4]
 800c986:	ed87 7a04 	vstr	s14, [r7, #16]
 800c98a:	edc7 7a05 	vstr	s15, [r7, #20]
        };
    } arc_x_t;

    static const axes_signals_t xyz = { .x = On, .y = On, .z = On };

    if((sys.soft_limits.mask & xyz.mask) == 0)
 800c98e:	4bba      	ldr	r3, [pc, #744]	; (800cc78 <check_arc_travel_limits+0x30c>)
 800c990:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
 800c994:	4bb9      	ldr	r3, [pc, #740]	; (800cc7c <check_arc_travel_limits+0x310>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	4013      	ands	r3, r2
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10a      	bne.n	800c9b6 <check_arc_travel_limits+0x4a>
        return grbl.check_travel_limits(target->values, sys.soft_limits, true);
 800c9a0:	4bb7      	ldr	r3, [pc, #732]	; (800cc80 <check_arc_travel_limits+0x314>)
 800c9a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c9a6:	69f8      	ldr	r0, [r7, #28]
 800c9a8:	49b3      	ldr	r1, [pc, #716]	; (800cc78 <check_arc_travel_limits+0x30c>)
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
 800c9b0:	4798      	blx	r3
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	e235      	b.n	800ce22 <check_arc_travel_limits+0x4b6>

    arc_x_t x = {0};
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    point_2d_t start, end;

    // Set arc start and end points centered at 0,0 and convert CW arcs to CCW.
    if(turns > 0) { // CCW
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	dd30      	ble.n	800ca22 <check_arc_travel_limits+0xb6>
        start.x = position->values[plane.axis_0] - center.x;
 800c9c0:	7a3b      	ldrb	r3, [r7, #8]
 800c9c2:	69ba      	ldr	r2, [r7, #24]
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4413      	add	r3, r2
 800c9c8:	ed93 7a00 	vldr	s14, [r3]
 800c9cc:	edd7 7a04 	vldr	s15, [r7, #16]
 800c9d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9d4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        start.y = position->values[plane.axis_1] - center.y;
 800c9d8:	7a7b      	ldrb	r3, [r7, #9]
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	ed93 7a00 	vldr	s14, [r3]
 800c9e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800c9e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        end.x = target->values[plane.axis_0] - center.x;
 800c9f0:	7a3b      	ldrb	r3, [r7, #8]
 800c9f2:	69fa      	ldr	r2, [r7, #28]
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	ed93 7a00 	vldr	s14, [r3]
 800c9fc:	edd7 7a04 	vldr	s15, [r7, #16]
 800ca00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca04:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        end.y = target->values[plane.axis_1] - center.y;
 800ca08:	7a7b      	ldrb	r3, [r7, #9]
 800ca0a:	69fa      	ldr	r2, [r7, #28]
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	ed93 7a00 	vldr	s14, [r3]
 800ca14:	edd7 7a05 	vldr	s15, [r7, #20]
 800ca18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca1c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800ca20:	e02f      	b.n	800ca82 <check_arc_travel_limits+0x116>
    } else { // CW
        start.x = target->values[plane.axis_0] - center.x;
 800ca22:	7a3b      	ldrb	r3, [r7, #8]
 800ca24:	69fa      	ldr	r2, [r7, #28]
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	ed93 7a00 	vldr	s14, [r3]
 800ca2e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ca32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca36:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        start.y = target->values[plane.axis_1] - center.y;
 800ca3a:	7a7b      	ldrb	r3, [r7, #9]
 800ca3c:	69fa      	ldr	r2, [r7, #28]
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	ed93 7a00 	vldr	s14, [r3]
 800ca46:	edd7 7a05 	vldr	s15, [r7, #20]
 800ca4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca4e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        end.x = position->values[plane.axis_0] - center.x;
 800ca52:	7a3b      	ldrb	r3, [r7, #8]
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	ed93 7a00 	vldr	s14, [r3]
 800ca5e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ca62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca66:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        end.y = position->values[plane.axis_1] - center.y;
 800ca6a:	7a7b      	ldrb	r3, [r7, #9]
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	ed93 7a00 	vldr	s14, [r3]
 800ca76:	edd7 7a05 	vldr	s15, [r7, #20]
 800ca7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca7e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    }

    if(labs(turns > 1))
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	dd01      	ble.n	800ca8c <check_arc_travel_limits+0x120>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e000      	b.n	800ca8e <check_arc_travel_limits+0x122>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d002      	beq.n	800ca98 <check_arc_travel_limits+0x12c>
        x.value = 0b1111;                   // Crosses all
 800ca92:	230f      	movs	r3, #15
 800ca94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca96:	e0bc      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
    else if(start.y >= 0.0f) {
 800ca98:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ca9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800caa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa4:	db5b      	blt.n	800cb5e <check_arc_travel_limits+0x1f2>
        if(start.x > 0.0f) {                // Starts in Q1
 800caa6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800caaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800caae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab2:	dd2a      	ble.n	800cb0a <check_arc_travel_limits+0x19e>
            if(end.y >= 0.0f) {
 800cab4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac0:	db16      	blt.n	800caf0 <check_arc_travel_limits+0x184>
                if(end.x <= 0.0f)
 800cac2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800caca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cace:	d802      	bhi.n	800cad6 <check_arc_travel_limits+0x16a>
                    x.value = 0b0001;       // Ends in Q2
 800cad0:	2301      	movs	r3, #1
 800cad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cad4:	e09d      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
                else if(end.x >= start.x)
 800cad6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800cada:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae6:	f2c0 8094 	blt.w	800cc12 <check_arc_travel_limits+0x2a6>
                    x.value = 0b1111;       // Ends in Q1, crosses all
 800caea:	230f      	movs	r3, #15
 800caec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caee:	e090      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
            } else if(end.x <= 0.0f)
 800caf0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800caf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800caf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafc:	d802      	bhi.n	800cb04 <check_arc_travel_limits+0x198>
                x.value = 0b0011;           // Ends in Q3
 800cafe:	2303      	movs	r3, #3
 800cb00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb02:	e086      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
            else
                x.value = 0b0111;           // Ends in Q4
 800cb04:	2307      	movs	r3, #7
 800cb06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb08:	e083      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
        } else {                            // Starts in Q2
            if(end.y >= 0.0f) {
 800cb0a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cb0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb16:	db15      	blt.n	800cb44 <check_arc_travel_limits+0x1d8>
                if(end.x > 0.0f)
 800cb18:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cb1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb24:	dd02      	ble.n	800cb2c <check_arc_travel_limits+0x1c0>
                    x.value = 0b1110;       // Ends in Q1
 800cb26:	230e      	movs	r3, #14
 800cb28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb2a:	e072      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
                else if(end.x >= start.x)
 800cb2c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800cb30:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cb34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3c:	db69      	blt.n	800cc12 <check_arc_travel_limits+0x2a6>
                    x.value = 0b1111;       // Ends in Q2, crosses all
 800cb3e:	230f      	movs	r3, #15
 800cb40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb42:	e066      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
            } else if(end.x <= 0.0f)
 800cb44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cb48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb50:	d802      	bhi.n	800cb58 <check_arc_travel_limits+0x1ec>
                x.value = 0b0010;           // Ends in Q3
 800cb52:	2302      	movs	r3, #2
 800cb54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb56:	e05c      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
            else
                x.value = 0b0110;           // Ends in Q4
 800cb58:	2306      	movs	r3, #6
 800cb5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb5c:	e059      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
        }
    } else if(start.x < 0.0f) {             // Starts in Q3
 800cb5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cb62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6a:	d529      	bpl.n	800cbc0 <check_arc_travel_limits+0x254>
        if(end.y < 0.0f) {
 800cb6c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cb70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb78:	d515      	bpl.n	800cba6 <check_arc_travel_limits+0x23a>
            if(end.x > 0.0f)
 800cb7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cb7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb86:	dd02      	ble.n	800cb8e <check_arc_travel_limits+0x222>
                x.value = 0b0100;           // Ends in Q4
 800cb88:	2304      	movs	r3, #4
 800cb8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb8c:	e041      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
            else if(end.x <= start.x)
 800cb8e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800cb92:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cb96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb9e:	d838      	bhi.n	800cc12 <check_arc_travel_limits+0x2a6>
                x.value = 0b1111;           // Ends in Q3, crosses all
 800cba0:	230f      	movs	r3, #15
 800cba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cba4:	e035      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
        } else if(end.x > 0.0f)
 800cba6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cbaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb2:	dd02      	ble.n	800cbba <check_arc_travel_limits+0x24e>
            x.value = 0b1100;               // Ends in Q1
 800cbb4:	230c      	movs	r3, #12
 800cbb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbb8:	e02b      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
        else
            x.value = 0b1101;               // Ends in Q2
 800cbba:	230d      	movs	r3, #13
 800cbbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbbe:	e028      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
    } else {                                // Starts in Q4
        if(end.y < 0.0f) {
 800cbc0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800cbc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	d515      	bpl.n	800cbfa <check_arc_travel_limits+0x28e>
            if(end.x < 0.0f)
 800cbce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cbd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbda:	d502      	bpl.n	800cbe2 <check_arc_travel_limits+0x276>
                x.value = 0b1011;           // Ends in Q3
 800cbdc:	230b      	movs	r3, #11
 800cbde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbe0:	e017      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
            else if(end.x <= start.x)
 800cbe2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800cbe6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800cbea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf2:	d80e      	bhi.n	800cc12 <check_arc_travel_limits+0x2a6>
                x.value = 0b1111;           // Ends in Q4, crosses all
 800cbf4:	230f      	movs	r3, #15
 800cbf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbf8:	e00b      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
        } else if(end.x > 0.0f)
 800cbfa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cbfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc06:	dd02      	ble.n	800cc0e <check_arc_travel_limits+0x2a2>
            x.value = 0b1000;               // Ends in Q1
 800cc08:	2308      	movs	r3, #8
 800cc0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc0c:	e001      	b.n	800cc12 <check_arc_travel_limits+0x2a6>
        else
            x.value = 0b1001;               // Ends in Q2
 800cc0e:	2309      	movs	r3, #9
 800cc10:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    coord_data_t corner1, corner2;

    memcpy(&corner1, turns > 0 ? position : target, sizeof(coord_data_t));
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dd01      	ble.n	800cc1c <check_arc_travel_limits+0x2b0>
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	e000      	b.n	800cc1e <check_arc_travel_limits+0x2b2>
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cc22:	220c      	movs	r2, #12
 800cc24:	4619      	mov	r1, r3
 800cc26:	f019 fa67 	bl	80260f8 <memcpy>
    corner1.values[plane.axis_0] = x.neg_x ? center.x - radius : min(position->values[plane.axis_0], target->values[plane.axis_0]);
 800cc2a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800cc2e:	f003 0302 	and.w	r3, r3, #2
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d006      	beq.n	800cc46 <check_arc_travel_limits+0x2da>
 800cc38:	ed97 7a04 	vldr	s14, [r7, #16]
 800cc3c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc44:	e024      	b.n	800cc90 <check_arc_travel_limits+0x324>
 800cc46:	7a3b      	ldrb	r3, [r7, #8]
 800cc48:	69ba      	ldr	r2, [r7, #24]
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	4413      	add	r3, r2
 800cc4e:	ed93 7a00 	vldr	s14, [r3]
 800cc52:	7a3b      	ldrb	r3, [r7, #8]
 800cc54:	69fa      	ldr	r2, [r7, #28]
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4413      	add	r3, r2
 800cc5a:	edd3 7a00 	vldr	s15, [r3]
 800cc5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc66:	d50d      	bpl.n	800cc84 <check_arc_travel_limits+0x318>
 800cc68:	7a3b      	ldrb	r3, [r7, #8]
 800cc6a:	69ba      	ldr	r2, [r7, #24]
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	edd3 7a00 	vldr	s15, [r3]
 800cc74:	e00c      	b.n	800cc90 <check_arc_travel_limits+0x324>
 800cc76:	bf00      	nop
 800cc78:	20001520 	.word	0x20001520
 800cc7c:	080329a4 	.word	0x080329a4
 800cc80:	200015b8 	.word	0x200015b8
 800cc84:	7a3b      	ldrb	r3, [r7, #8]
 800cc86:	69fa      	ldr	r2, [r7, #28]
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	edd3 7a00 	vldr	s15, [r3]
 800cc90:	7a3b      	ldrb	r3, [r7, #8]
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	3350      	adds	r3, #80	; 0x50
 800cc96:	443b      	add	r3, r7
 800cc98:	3b20      	subs	r3, #32
 800cc9a:	edc3 7a00 	vstr	s15, [r3]
    corner1.values[plane.axis_1] = x.neg_y ? center.y - radius : max(position->values[plane.axis_1], target->values[plane.axis_1]);
 800cc9e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800cca2:	f003 0304 	and.w	r3, r3, #4
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d006      	beq.n	800ccba <check_arc_travel_limits+0x34e>
 800ccac:	ed97 7a05 	vldr	s14, [r7, #20]
 800ccb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccb8:	e01d      	b.n	800ccf6 <check_arc_travel_limits+0x38a>
 800ccba:	7a7b      	ldrb	r3, [r7, #9]
 800ccbc:	69ba      	ldr	r2, [r7, #24]
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	ed93 7a00 	vldr	s14, [r3]
 800ccc6:	7a7b      	ldrb	r3, [r7, #9]
 800ccc8:	69fa      	ldr	r2, [r7, #28]
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	4413      	add	r3, r2
 800ccce:	edd3 7a00 	vldr	s15, [r3]
 800ccd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccda:	dd06      	ble.n	800ccea <check_arc_travel_limits+0x37e>
 800ccdc:	7a7b      	ldrb	r3, [r7, #9]
 800ccde:	69ba      	ldr	r2, [r7, #24]
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	edd3 7a00 	vldr	s15, [r3]
 800cce8:	e005      	b.n	800ccf6 <check_arc_travel_limits+0x38a>
 800ccea:	7a7b      	ldrb	r3, [r7, #9]
 800ccec:	69fa      	ldr	r2, [r7, #28]
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4413      	add	r3, r2
 800ccf2:	edd3 7a00 	vldr	s15, [r3]
 800ccf6:	7a7b      	ldrb	r3, [r7, #9]
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	3350      	adds	r3, #80	; 0x50
 800ccfc:	443b      	add	r3, r7
 800ccfe:	3b20      	subs	r3, #32
 800cd00:	edc3 7a00 	vstr	s15, [r3]

    if(!grbl.check_travel_limits(corner1.values, sys.soft_limits, true))
 800cd04:	4b49      	ldr	r3, [pc, #292]	; (800ce2c <check_arc_travel_limits+0x4c0>)
 800cd06:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cd0a:	4949      	ldr	r1, [pc, #292]	; (800ce30 <check_arc_travel_limits+0x4c4>)
 800cd0c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cd10:	2201      	movs	r2, #1
 800cd12:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
 800cd16:	4798      	blx	r3
 800cd18:	4603      	mov	r3, r0
 800cd1a:	f083 0301 	eor.w	r3, r3, #1
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <check_arc_travel_limits+0x3bc>
        return false;
 800cd24:	2300      	movs	r3, #0
 800cd26:	e07c      	b.n	800ce22 <check_arc_travel_limits+0x4b6>

    memcpy(&corner2, turns > 0 ? target : position, sizeof(coord_data_t));
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	dd01      	ble.n	800cd32 <check_arc_travel_limits+0x3c6>
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	e000      	b.n	800cd34 <check_arc_travel_limits+0x3c8>
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cd38:	220c      	movs	r2, #12
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	f019 f9dc 	bl	80260f8 <memcpy>
    corner2.values[plane.axis_0] = x.pos_x ? center.x + radius : max(position->values[plane.axis_0], target->values[plane.axis_0]);
 800cd40:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800cd44:	f003 0308 	and.w	r3, r3, #8
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d006      	beq.n	800cd5c <check_arc_travel_limits+0x3f0>
 800cd4e:	ed97 7a04 	vldr	s14, [r7, #16]
 800cd52:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd5a:	e01d      	b.n	800cd98 <check_arc_travel_limits+0x42c>
 800cd5c:	7a3b      	ldrb	r3, [r7, #8]
 800cd5e:	69ba      	ldr	r2, [r7, #24]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4413      	add	r3, r2
 800cd64:	ed93 7a00 	vldr	s14, [r3]
 800cd68:	7a3b      	ldrb	r3, [r7, #8]
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	edd3 7a00 	vldr	s15, [r3]
 800cd74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7c:	dd06      	ble.n	800cd8c <check_arc_travel_limits+0x420>
 800cd7e:	7a3b      	ldrb	r3, [r7, #8]
 800cd80:	69ba      	ldr	r2, [r7, #24]
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	edd3 7a00 	vldr	s15, [r3]
 800cd8a:	e005      	b.n	800cd98 <check_arc_travel_limits+0x42c>
 800cd8c:	7a3b      	ldrb	r3, [r7, #8]
 800cd8e:	69fa      	ldr	r2, [r7, #28]
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	edd3 7a00 	vldr	s15, [r3]
 800cd98:	7a3b      	ldrb	r3, [r7, #8]
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	3350      	adds	r3, #80	; 0x50
 800cd9e:	443b      	add	r3, r7
 800cda0:	3b2c      	subs	r3, #44	; 0x2c
 800cda2:	edc3 7a00 	vstr	s15, [r3]
    corner2.values[plane.axis_1] = x.pos_y ? center.y + radius : min(position->values[plane.axis_1], target->values[plane.axis_1]);
 800cda6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800cdaa:	f003 0301 	and.w	r3, r3, #1
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d006      	beq.n	800cdc2 <check_arc_travel_limits+0x456>
 800cdb4:	ed97 7a05 	vldr	s14, [r7, #20]
 800cdb8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdc0:	e01d      	b.n	800cdfe <check_arc_travel_limits+0x492>
 800cdc2:	7a7b      	ldrb	r3, [r7, #9]
 800cdc4:	69ba      	ldr	r2, [r7, #24]
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	ed93 7a00 	vldr	s14, [r3]
 800cdce:	7a7b      	ldrb	r3, [r7, #9]
 800cdd0:	69fa      	ldr	r2, [r7, #28]
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	edd3 7a00 	vldr	s15, [r3]
 800cdda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde2:	d506      	bpl.n	800cdf2 <check_arc_travel_limits+0x486>
 800cde4:	7a7b      	ldrb	r3, [r7, #9]
 800cde6:	69ba      	ldr	r2, [r7, #24]
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4413      	add	r3, r2
 800cdec:	edd3 7a00 	vldr	s15, [r3]
 800cdf0:	e005      	b.n	800cdfe <check_arc_travel_limits+0x492>
 800cdf2:	7a7b      	ldrb	r3, [r7, #9]
 800cdf4:	69fa      	ldr	r2, [r7, #28]
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	edd3 7a00 	vldr	s15, [r3]
 800cdfe:	7a7b      	ldrb	r3, [r7, #9]
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	3350      	adds	r3, #80	; 0x50
 800ce04:	443b      	add	r3, r7
 800ce06:	3b2c      	subs	r3, #44	; 0x2c
 800ce08:	edc3 7a00 	vstr	s15, [r3]

   return grbl.check_travel_limits(corner2.values, sys.soft_limits, true);
 800ce0c:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <check_arc_travel_limits+0x4c0>)
 800ce0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ce12:	4907      	ldr	r1, [pc, #28]	; (800ce30 <check_arc_travel_limits+0x4c4>)
 800ce14:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
 800ce1e:	4798      	blx	r3
 800ce20:	4603      	mov	r3, r0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3750      	adds	r7, #80	; 0x50
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	200015b8 	.word	0x200015b8
 800ce30:	20001520 	.word	0x20001520

0800ce34 <clip_3d_target>:

// Derived from code by Dimitrios Matthes & Vasileios Drakopoulos
// https://www.mdpi.com/1999-4893/16/4/201
static void clip_3d_target (coord_data_t *position, coord_data_t *target, work_envelope_t *envelope)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b089      	sub	sp, #36	; 0x24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
    float a = target->x - position->x;
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	ed93 7a00 	vldr	s14, [r3]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	edd3 7a00 	vldr	s15, [r3]
 800ce4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce50:	edc7 7a07 	vstr	s15, [r7, #28]
    float b = target->y - position->y;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	ed93 7a01 	vldr	s14, [r3, #4]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	edd3 7a01 	vldr	s15, [r3, #4]
 800ce60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce64:	edc7 7a06 	vstr	s15, [r7, #24]
    float c = target->z - position->z;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce78:	edc7 7a05 	vstr	s15, [r7, #20]

    if(target->x < envelope->min.x) {
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	ed93 7a00 	vldr	s14, [r3]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	edd3 7a00 	vldr	s15, [r3]
 800ce88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce90:	d534      	bpl.n	800cefc <clip_3d_target+0xc8>
        target->y = b / a * (envelope->min.x - position->x) + position->y;
 800ce92:	edd7 6a06 	vldr	s13, [r7, #24]
 800ce96:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	edd3 6a00 	vldr	s13, [r3]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	edd3 7a00 	vldr	s15, [r3]
 800ceaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ceae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	edd3 7a01 	vldr	s15, [r3, #4]
 800ceb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	edc3 7a01 	vstr	s15, [r3, #4]
        target->z = c / a * (envelope->min.x - position->x) + position->z;
 800cec2:	edd7 6a05 	vldr	s13, [r7, #20]
 800cec6:	edd7 7a07 	vldr	s15, [r7, #28]
 800ceca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	edd3 6a00 	vldr	s13, [r3]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	edd3 7a00 	vldr	s15, [r3]
 800ceda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cede:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	edd3 7a02 	vldr	s15, [r3, #8]
 800cee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	edc3 7a02 	vstr	s15, [r3, #8]
        target->x = envelope->min.x;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	e03e      	b.n	800cf7a <clip_3d_target+0x146>
    } else if(target->x > envelope->max.x) {
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	ed93 7a00 	vldr	s14, [r3]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	edd3 7a03 	vldr	s15, [r3, #12]
 800cf08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf10:	dd33      	ble.n	800cf7a <clip_3d_target+0x146>
        target->y = b / a * (envelope->max.x - position->x) + position->y;
 800cf12:	edd7 6a06 	vldr	s13, [r7, #24]
 800cf16:	edd7 7a07 	vldr	s15, [r7, #28]
 800cf1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	edd3 6a03 	vldr	s13, [r3, #12]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	edd3 7a00 	vldr	s15, [r3]
 800cf2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cf2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	edc3 7a01 	vstr	s15, [r3, #4]
        target->z = c / a * (envelope->max.x - position->x) + position->z;
 800cf42:	edd7 6a05 	vldr	s13, [r7, #20]
 800cf46:	edd7 7a07 	vldr	s15, [r7, #28]
 800cf4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	edd3 6a03 	vldr	s13, [r3, #12]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	edd3 7a00 	vldr	s15, [r3]
 800cf5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cf5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	edd3 7a02 	vldr	s15, [r3, #8]
 800cf68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	edc3 7a02 	vstr	s15, [r3, #8]
        target->x = envelope->max.x;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	68da      	ldr	r2, [r3, #12]
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	601a      	str	r2, [r3, #0]
    }

    if(target->y < envelope->min.y) {
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	ed93 7a01 	vldr	s14, [r3, #4]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8e:	d534      	bpl.n	800cffa <clip_3d_target+0x1c6>
        target->x = a / b * (envelope->min.y - position->y) + position->x;
 800cf90:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf94:	edd7 7a06 	vldr	s15, [r7, #24]
 800cf98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	edd3 6a01 	vldr	s13, [r3, #4]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	edd3 7a01 	vldr	s15, [r3, #4]
 800cfa8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cfac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	edd3 7a00 	vldr	s15, [r3]
 800cfb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	edc3 7a00 	vstr	s15, [r3]
        target->z = c / b * (envelope->min.y - position->y) + position->z;
 800cfc0:	edd7 6a05 	vldr	s13, [r7, #20]
 800cfc4:	edd7 7a06 	vldr	s15, [r7, #24]
 800cfc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	edd3 6a01 	vldr	s13, [r3, #4]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	edd3 7a01 	vldr	s15, [r3, #4]
 800cfd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cfdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	edd3 7a02 	vldr	s15, [r3, #8]
 800cfe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	edc3 7a02 	vstr	s15, [r3, #8]
        target->y = envelope->min.y;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	605a      	str	r2, [r3, #4]
 800cff8:	e03e      	b.n	800d078 <clip_3d_target+0x244>
    } else if(target->y > envelope->max.y) {
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	ed93 7a01 	vldr	s14, [r3, #4]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	edd3 7a04 	vldr	s15, [r3, #16]
 800d006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00e:	dd33      	ble.n	800d078 <clip_3d_target+0x244>
        target->x = a / b * (envelope->max.y - position->y) + position->x;
 800d010:	edd7 6a07 	vldr	s13, [r7, #28]
 800d014:	edd7 7a06 	vldr	s15, [r7, #24]
 800d018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	edd3 6a04 	vldr	s13, [r3, #16]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	edd3 7a01 	vldr	s15, [r3, #4]
 800d028:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d02c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	edd3 7a00 	vldr	s15, [r3]
 800d036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	edc3 7a00 	vstr	s15, [r3]
        target->z = c / b * (envelope->max.y - position->y) + position->z;
 800d040:	edd7 6a05 	vldr	s13, [r7, #20]
 800d044:	edd7 7a06 	vldr	s15, [r7, #24]
 800d048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	edd3 6a04 	vldr	s13, [r3, #16]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	edd3 7a01 	vldr	s15, [r3, #4]
 800d058:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d05c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	edd3 7a02 	vldr	s15, [r3, #8]
 800d066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	edc3 7a02 	vstr	s15, [r3, #8]
        target->y = envelope->max.y;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	691a      	ldr	r2, [r3, #16]
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	605a      	str	r2, [r3, #4]
    }

    if(target->z < envelope->min.z) {
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	ed93 7a02 	vldr	s14, [r3, #8]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	edd3 7a02 	vldr	s15, [r3, #8]
 800d084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08c:	d534      	bpl.n	800d0f8 <clip_3d_target+0x2c4>
        target->x = a / c * (envelope->min.z - position->z) + position->x;
 800d08e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d092:	edd7 7a05 	vldr	s15, [r7, #20]
 800d096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	edd3 6a02 	vldr	s13, [r3, #8]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	edd3 7a02 	vldr	s15, [r3, #8]
 800d0a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d0aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	edd3 7a00 	vldr	s15, [r3]
 800d0b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	edc3 7a00 	vstr	s15, [r3]
        target->y = b / c * (envelope->min.z - position->z) + position->y;
 800d0be:	edd7 6a06 	vldr	s13, [r7, #24]
 800d0c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800d0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	edd3 6a02 	vldr	s13, [r3, #8]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	edd3 7a02 	vldr	s15, [r3, #8]
 800d0d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d0da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	edd3 7a01 	vldr	s15, [r3, #4]
 800d0e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	edc3 7a01 	vstr	s15, [r3, #4]
        target->z = envelope->min.z;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	689a      	ldr	r2, [r3, #8]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	609a      	str	r2, [r3, #8]
    } else if(target->z > envelope->max.z) {
        target->x = a / c * (envelope->max.z - position->z) + position->x;
        target->y = b / c * (envelope->max.z - position->z) + position->y;
        target->z = envelope->max.z;
    }
}
 800d0f6:	e03f      	b.n	800d178 <clip_3d_target+0x344>
    } else if(target->z > envelope->max.z) {
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	ed93 7a02 	vldr	s14, [r3, #8]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	edd3 7a05 	vldr	s15, [r3, #20]
 800d104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10c:	dc00      	bgt.n	800d110 <clip_3d_target+0x2dc>
}
 800d10e:	e033      	b.n	800d178 <clip_3d_target+0x344>
        target->x = a / c * (envelope->max.z - position->z) + position->x;
 800d110:	edd7 6a07 	vldr	s13, [r7, #28]
 800d114:	edd7 7a05 	vldr	s15, [r7, #20]
 800d118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	edd3 6a05 	vldr	s13, [r3, #20]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	edd3 7a02 	vldr	s15, [r3, #8]
 800d128:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d12c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	edd3 7a00 	vldr	s15, [r3]
 800d136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	edc3 7a00 	vstr	s15, [r3]
        target->y = b / c * (envelope->max.z - position->z) + position->y;
 800d140:	edd7 6a06 	vldr	s13, [r7, #24]
 800d144:	edd7 7a05 	vldr	s15, [r7, #20]
 800d148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	edd3 6a05 	vldr	s13, [r3, #20]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	edd3 7a02 	vldr	s15, [r3, #8]
 800d158:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d15c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	edd3 7a01 	vldr	s15, [r3, #4]
 800d166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	edc3 7a01 	vstr	s15, [r3, #4]
        target->z = envelope->max.z;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	695a      	ldr	r2, [r3, #20]
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	609a      	str	r2, [r3, #8]
}
 800d178:	bf00      	nop
 800d17a:	3724      	adds	r7, #36	; 0x24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <apply_jog_limits>:

// Limits jog commands to be within machine limits, homed axes only.
static void apply_jog_limits (float *target, float *position)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
    if(sys.homed.mask == 0)
 800d18e:	4b5f      	ldr	r3, [pc, #380]	; (800d30c <apply_jog_limits+0x188>)
 800d190:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 80b5 	beq.w	800d304 <apply_jog_limits+0x180>
        return;

    uint_fast8_t idx;

    if((sys.homed.mask & 0b111) == 0b111) {
 800d19a:	4b5c      	ldr	r3, [pc, #368]	; (800d30c <apply_jog_limits+0x188>)
 800d19c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d1a0:	f003 0307 	and.w	r3, r3, #7
 800d1a4:	2b07      	cmp	r3, #7
 800d1a6:	d12e      	bne.n	800d206 <apply_jog_limits+0x82>

        uint_fast8_t n_axes = 0;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	60bb      	str	r3, [r7, #8]

        idx = Z_AXIS + 1;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	60fb      	str	r3, [r7, #12]
        do {
            idx--;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	60fb      	str	r3, [r7, #12]
            if(fabs(target[idx] - position[idx]) > 0.001f)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	4413      	add	r3, r2
 800d1be:	ed93 7a00 	vldr	s14, [r3]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	683a      	ldr	r2, [r7, #0]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	edd3 7a00 	vldr	s15, [r3]
 800d1ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1d2:	eef0 7ae7 	vabs.f32	s15, s15
 800d1d6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800d310 <apply_jog_limits+0x18c>
 800d1da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e2:	dd02      	ble.n	800d1ea <apply_jog_limits+0x66>
                n_axes++;
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	60bb      	str	r3, [r7, #8]
        } while(idx && n_axes < 2);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d002      	beq.n	800d1f6 <apply_jog_limits+0x72>
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d9dc      	bls.n	800d1b0 <apply_jog_limits+0x2c>

        if(n_axes > 1)
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d904      	bls.n	800d206 <apply_jog_limits+0x82>
            clip_3d_target((coord_data_t *)position, (coord_data_t *)target, &sys.work_envelope);
 800d1fc:	4a45      	ldr	r2, [pc, #276]	; (800d314 <apply_jog_limits+0x190>)
 800d1fe:	6879      	ldr	r1, [r7, #4]
 800d200:	6838      	ldr	r0, [r7, #0]
 800d202:	f7ff fe17 	bl	800ce34 <clip_3d_target>
    }

    idx = N_AXIS;
 800d206:	2303      	movs	r3, #3
 800d208:	60fb      	str	r3, [r7, #12]
    do {
        idx--;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	60fb      	str	r3, [r7, #12]
        if(bit_istrue(sys.homed.mask, bit(idx)) && settings.axis[idx].max_travel < -0.0f)
 800d210:	4b3e      	ldr	r3, [pc, #248]	; (800d30c <apply_jog_limits+0x188>)
 800d212:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d216:	461a      	mov	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	fa22 f303 	lsr.w	r3, r2, r3
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d06a      	beq.n	800d2fc <apply_jog_limits+0x178>
 800d226:	493c      	ldr	r1, [pc, #240]	; (800d318 <apply_jog_limits+0x194>)
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	4613      	mov	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	440b      	add	r3, r1
 800d234:	333c      	adds	r3, #60	; 0x3c
 800d236:	edd3 7a00 	vldr	s15, [r3]
 800d23a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d242:	d55b      	bpl.n	800d2fc <apply_jog_limits+0x178>
            target[idx] = max(min(target[idx], sys.work_envelope.max.values[idx]), sys.work_envelope.min.values[idx]);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	4413      	add	r3, r2
 800d24c:	ed93 7a00 	vldr	s14, [r3]
 800d250:	4a2e      	ldr	r2, [pc, #184]	; (800d30c <apply_jog_limits+0x188>)
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	331a      	adds	r3, #26
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	3308      	adds	r3, #8
 800d25c:	edd3 7a00 	vldr	s15, [r3]
 800d260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d268:	d506      	bpl.n	800d278 <apply_jog_limits+0xf4>
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	4413      	add	r3, r2
 800d272:	edd3 7a00 	vldr	s15, [r3]
 800d276:	e007      	b.n	800d288 <apply_jog_limits+0x104>
 800d278:	4a24      	ldr	r2, [pc, #144]	; (800d30c <apply_jog_limits+0x188>)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	331a      	adds	r3, #26
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	4413      	add	r3, r2
 800d282:	3308      	adds	r3, #8
 800d284:	edd3 7a00 	vldr	s15, [r3]
 800d288:	4a20      	ldr	r2, [pc, #128]	; (800d30c <apply_jog_limits+0x188>)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	3318      	adds	r3, #24
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4413      	add	r3, r2
 800d292:	3304      	adds	r3, #4
 800d294:	ed93 7a00 	vldr	s14, [r3]
 800d298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a0:	dd20      	ble.n	800d2e4 <apply_jog_limits+0x160>
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	ed93 7a00 	vldr	s14, [r3]
 800d2ae:	4a17      	ldr	r2, [pc, #92]	; (800d30c <apply_jog_limits+0x188>)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	331a      	adds	r3, #26
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	3308      	adds	r3, #8
 800d2ba:	edd3 7a00 	vldr	s15, [r3]
 800d2be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c6:	d505      	bpl.n	800d2d4 <apply_jog_limits+0x150>
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	e00e      	b.n	800d2f2 <apply_jog_limits+0x16e>
 800d2d4:	4a0d      	ldr	r2, [pc, #52]	; (800d30c <apply_jog_limits+0x188>)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	331a      	adds	r3, #26
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4413      	add	r3, r2
 800d2de:	3308      	adds	r3, #8
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	e006      	b.n	800d2f2 <apply_jog_limits+0x16e>
 800d2e4:	4a09      	ldr	r2, [pc, #36]	; (800d30c <apply_jog_limits+0x188>)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	3318      	adds	r3, #24
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	4413      	add	r3, r2
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	0092      	lsls	r2, r2, #2
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	440a      	add	r2, r1
 800d2fa:	6013      	str	r3, [r2, #0]
    } while(idx);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d183      	bne.n	800d20a <apply_jog_limits+0x86>
 800d302:	e000      	b.n	800d306 <apply_jog_limits+0x182>
        return;
 800d304:	bf00      	nop
}
 800d306:	3710      	adds	r7, #16
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	20001520 	.word	0x20001520
 800d310:	3a83126f 	.word	0x3a83126f
 800d314:	20001584 	.word	0x20001584
 800d318:	20001cf0 	.word	0x20001cf0

0800d31c <limits_init>:

void limits_init (void)
{
 800d31c:	b480      	push	{r7}
 800d31e:	af00      	add	r7, sp, #0
    hal.homing.get_feedrate = get_homing_rate;
 800d320:	4b0b      	ldr	r3, [pc, #44]	; (800d350 <limits_init+0x34>)
 800d322:	4a0c      	ldr	r2, [pc, #48]	; (800d354 <limits_init+0x38>)
 800d324:	665a      	str	r2, [r3, #100]	; 0x64
    grbl.check_travel_limits = check_travel_limits;
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <limits_init+0x3c>)
 800d328:	4a0c      	ldr	r2, [pc, #48]	; (800d35c <limits_init+0x40>)
 800d32a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    grbl.check_arc_travel_limits = check_arc_travel_limits;
 800d32e:	4b0a      	ldr	r3, [pc, #40]	; (800d358 <limits_init+0x3c>)
 800d330:	4a0b      	ldr	r2, [pc, #44]	; (800d360 <limits_init+0x44>)
 800d332:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    grbl.apply_jog_limits = apply_jog_limits;
 800d336:	4b08      	ldr	r3, [pc, #32]	; (800d358 <limits_init+0x3c>)
 800d338:	4a0a      	ldr	r2, [pc, #40]	; (800d364 <limits_init+0x48>)
 800d33a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    grbl.home_machine = homing_cycle;
 800d33e:	4b06      	ldr	r3, [pc, #24]	; (800d358 <limits_init+0x3c>)
 800d340:	4a09      	ldr	r2, [pc, #36]	; (800d368 <limits_init+0x4c>)
 800d342:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800d346:	bf00      	nop
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	200016a0 	.word	0x200016a0
 800d354:	0800c83d 	.word	0x0800c83d
 800d358:	200015b8 	.word	0x200015b8
 800d35c:	0800c875 	.word	0x0800c875
 800d360:	0800c96d 	.word	0x0800c96d
 800d364:	0800d185 	.word	0x0800d185
 800d368:	0800beb1 	.word	0x0800beb1

0800d36c <message_get>:
    { .id = Message_ExecuteTPW, .text = "Perform a probe with $TPW first!", .type = Message_Warning},
    { .id = Message_ProbeProtected, .text = "Probe protection activated."}
};

const message_t *message_get (message_code_t id)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	4603      	mov	r3, r0
 800d374:	71fb      	strb	r3, [r7, #7]
    uint_fast16_t idx = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	60fb      	str	r3, [r7, #12]
    const message_t *msg = NULL;
 800d37a:	2300      	movs	r3, #0
 800d37c:	60bb      	str	r3, [r7, #8]

    do {
        if(messages[idx].id == id)
 800d37e:	4a0e      	ldr	r2, [pc, #56]	; (800d3b8 <message_get+0x4c>)
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800d386:	79fa      	ldrb	r2, [r7, #7]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d104      	bne.n	800d396 <message_get+0x2a>
            msg = &messages[idx];
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	00db      	lsls	r3, r3, #3
 800d390:	4a09      	ldr	r2, [pc, #36]	; (800d3b8 <message_get+0x4c>)
 800d392:	4413      	add	r3, r2
 800d394:	60bb      	str	r3, [r7, #8]
    } while(msg == NULL && ++idx < Message_NextMessage);
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d105      	bne.n	800d3a8 <message_get+0x3c>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	60fb      	str	r3, [r7, #12]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b15      	cmp	r3, #21
 800d3a6:	d9ea      	bls.n	800d37e <message_get+0x12>

    return msg;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	080329a8 	.word	0x080329a8

0800d3bc <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The separation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
bool mc_line (float *target, plan_line_data_t *pl_data)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
    target = kinematics.segment_line(target, plan_get_position(), pl_data, true);
#endif

    // If enabled, check for soft limit violations. Placed here all line motions are picked up
    // from everywhere in Grbl.
    if(!(pl_data->condition.target_validated && pl_data->condition.target_valid))
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	7d5b      	ldrb	r3, [r3, #21]
 800d3ca:	f003 0302 	and.w	r3, r3, #2
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d006      	beq.n	800d3e2 <mc_line+0x26>
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	7d5b      	ldrb	r3, [r3, #21]
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d104      	bne.n	800d3ec <mc_line+0x30>
        limits_soft_check(target, pl_data->condition);
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	6959      	ldr	r1, [r3, #20]
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff f964 	bl	800c6b4 <limits_soft_check>

    // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
    if(state_get() != STATE_CHECK_MODE && protocol_execute_realtime()) {
 800d3ec:	f00f fc98 	bl	801cd20 <state_get>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d044      	beq.n	800d480 <mc_line+0xc4>
 800d3f6:	f005 f9f5 	bl	80127e4 <protocol_execute_realtime>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d03f      	beq.n	800d480 <mc_line+0xc4>
#endif // Backlash comp

        // If the buffer is full: good! That means we are well ahead of the robot.
        // Remain in this loop until there is room in the buffer.
         do {
            if(!protocol_execute_realtime())    // Check for any run-time commands
 800d400:	f005 f9f0 	bl	80127e4 <protocol_execute_realtime>
 800d404:	4603      	mov	r3, r0
 800d406:	f083 0301 	eor.w	r3, r3, #1
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <mc_line+0x58>
                return false;                   // Bail, if system abort.
 800d410:	2300      	movs	r3, #0
 800d412:	e049      	b.n	800d4a8 <mc_line+0xec>
            if(plan_check_full_buffer())
 800d414:	f003 fff2 	bl	80113fc <plan_check_full_buffer>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <mc_line+0x68>
                protocol_auto_cycle_start();    // Auto-cycle start when buffer is full.
 800d41e:	f005 f9cf 	bl	80127c0 <protocol_auto_cycle_start>
            if(!protocol_execute_realtime())    // Check for any run-time commands
 800d422:	e7ed      	b.n	800d400 <mc_line+0x44>
            else
                break;
 800d424:	bf00      	nop
        } while(true);

        // Plan and queue motion into planner buffer.
        // While in M3 laser mode also set spindle state and force a buffer sync
        // if there is a coincident position passed.
        if(!plan_buffer_line(target, pl_data) && pl_data->spindle.hal->cap.laser && pl_data->spindle.state.on && !pl_data->spindle.state.ccw) {
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f004 f961 	bl	80116f0 <plan_buffer_line>
 800d42e:	4603      	mov	r3, r0
 800d430:	f083 0301 	eor.w	r3, r3, #1
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d022      	beq.n	800d480 <mc_line+0xc4>
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	7a5b      	ldrb	r3, [r3, #9]
 800d440:	f003 0308 	and.w	r3, r3, #8
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d01a      	beq.n	800d480 <mc_line+0xc4>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	7a1b      	ldrb	r3, [r3, #8]
 800d44e:	f003 0301 	and.w	r3, r3, #1
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b00      	cmp	r3, #0
 800d456:	d013      	beq.n	800d480 <mc_line+0xc4>
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	7a1b      	ldrb	r3, [r3, #8]
 800d45c:	f003 0302 	and.w	r3, r3, #2
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10c      	bne.n	800d480 <mc_line+0xc4>
            protocol_buffer_synchronize();
 800d466:	f005 f98d 	bl	8012784 <protocol_buffer_synchronize>
            pl_data->spindle.hal->set_state(pl_data->spindle.state, pl_data->spindle.rpm);
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	691b      	ldr	r3, [r3, #16]
 800d46e:	69db      	ldr	r3, [r3, #28]
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	edd2 7a01 	vldr	s15, [r2, #4]
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	eeb0 0a67 	vmov.f32	s0, s15
 800d47c:	7a10      	ldrb	r0, [r2, #8]
 800d47e:	4798      	blx	r3

      pl_data->feed_rate = feed_rate;
#endif
    }

    return !ABORTED;
 800d480:	4b0b      	ldr	r3, [pc, #44]	; (800d4b0 <mc_line+0xf4>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	f083 0301 	eor.w	r3, r3, #1
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d008      	beq.n	800d4a0 <mc_line+0xe4>
 800d48e:	4b08      	ldr	r3, [pc, #32]	; (800d4b0 <mc_line+0xf4>)
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	f083 0301 	eor.w	r3, r3, #1
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <mc_line+0xe4>
 800d49c:	2301      	movs	r3, #1
 800d49e:	e000      	b.n	800d4a2 <mc_line+0xe6>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	b2db      	uxtb	r3, r3
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20001520 	.word	0x20001520
 800d4b4:	00000000 	.word	0x00000000

0800d4b8 <mc_arc>:
// for vector transformation direction and number of full turns to add (abs(turns) - 1).
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc (float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius, plane_t plane, int32_t turns)
{
 800d4b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d4bc:	ed2d 8b02 	vpush	{d8}
 800d4c0:	b0a8      	sub	sp, #160	; 0xa0
 800d4c2:	af02      	add	r7, sp, #8
 800d4c4:	6178      	str	r0, [r7, #20]
 800d4c6:	6139      	str	r1, [r7, #16]
 800d4c8:	60fa      	str	r2, [r7, #12]
 800d4ca:	60bb      	str	r3, [r7, #8]
 800d4cc:	ed87 0a01 	vstr	s0, [r7, #4]
            double y;
        };
    } point_2dd_t;

    point_2dd_t rv = {  // Radius vector from center to current location
        .x = -(double)offset[plane.axis_0],
 800d4d0:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	4413      	add	r3, r2
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7f3 f841 	bl	8000564 <__aeabi_f2d>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4690      	mov	r8, r2
 800d4e8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
    point_2dd_t rv = {  // Radius vector from center to current location
 800d4ec:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50
        .y = -(double)offset[plane.axis_1]
 800d4f0:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7f3 f831 	bl	8000564 <__aeabi_f2d>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4614      	mov	r4, r2
 800d508:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    point_2dd_t rv = {  // Radius vector from center to current location
 800d50c:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
    };
    point_2dd_t center = {
        .x = (double)position[plane.axis_0] - rv.x,
 800d510:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7f3 f821 	bl	8000564 <__aeabi_f2d>
 800d522:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d526:	f7f2 febd 	bl	80002a4 <__aeabi_dsub>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
    point_2dd_t center = {
 800d52e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        .y = (double)position[plane.axis_1] - rv.y
 800d532:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4413      	add	r3, r2
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7f3 f810 	bl	8000564 <__aeabi_f2d>
 800d544:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d548:	f7f2 feac 	bl	80002a4 <__aeabi_dsub>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
    point_2dd_t center = {
 800d550:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    };
    point_2dd_t rt = {
        .x = (double)target[plane.axis_0] - center.x,
 800d554:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	4413      	add	r3, r2
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4618      	mov	r0, r3
 800d562:	f7f2 ffff 	bl	8000564 <__aeabi_f2d>
 800d566:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d56a:	f7f2 fe9b 	bl	80002a4 <__aeabi_dsub>
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
    point_2dd_t rt = {
 800d572:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        .y = (double)target[plane.axis_1] - center.y
 800d576:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	4413      	add	r3, r2
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4618      	mov	r0, r3
 800d584:	f7f2 ffee 	bl	8000564 <__aeabi_f2d>
 800d588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d58c:	f7f2 fe8a 	bl	80002a4 <__aeabi_dsub>
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
    point_2dd_t rt = {
 800d594:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    };
    // CCW angle between position and target from circle center. Only one atan2() trig computation required.
    float angular_travel = (float)atan2(rv.x * rt.y - rv.y * rt.x, rv.x * rt.x + rv.y * rt.y);
 800d598:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d59c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d5a0:	f7f3 f838 	bl	8000614 <__aeabi_dmul>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	461d      	mov	r5, r3
 800d5ac:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d5b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d5b4:	f7f3 f82e 	bl	8000614 <__aeabi_dmul>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7f2 fe70 	bl	80002a4 <__aeabi_dsub>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	ec43 2b18 	vmov	d8, r2, r3
 800d5cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d5d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d5d4:	f7f3 f81e 	bl	8000614 <__aeabi_dmul>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	4614      	mov	r4, r2
 800d5de:	461d      	mov	r5, r3
 800d5e0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d5e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d5e8:	f7f3 f814 	bl	8000614 <__aeabi_dmul>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	f7f2 fe58 	bl	80002a8 <__adddf3>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	ec43 2b17 	vmov	d7, r2, r3
 800d600:	eeb0 1a47 	vmov.f32	s2, s14
 800d604:	eef0 1a67 	vmov.f32	s3, s15
 800d608:	eeb0 0a48 	vmov.f32	s0, s16
 800d60c:	eef0 0a68 	vmov.f32	s1, s17
 800d610:	f019 faf4 	bl	8026bfc <atan2>
 800d614:	ec53 2b10 	vmov	r2, r3, d0
 800d618:	4610      	mov	r0, r2
 800d61a:	4619      	mov	r1, r3
 800d61c:	f7f3 fa94 	bl	8000b48 <__aeabi_d2f>
 800d620:	4603      	mov	r3, r0
 800d622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    if (turns > 0) { // Correct atan2 output per direction
 800d626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dd1b      	ble.n	800d666 <mc_arc+0x1ae>
        if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON)
 800d62e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800d632:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800d870 <mc_arc+0x3b8>
 800d636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d63e:	d82d      	bhi.n	800d69c <mc_arc+0x1e4>
            angular_travel += 2.0f * M_PI;
 800d640:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d644:	f7f2 ff8e 	bl	8000564 <__aeabi_f2d>
 800d648:	a385      	add	r3, pc, #532	; (adr r3, 800d860 <mc_arc+0x3a8>)
 800d64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64e:	f7f2 fe2b 	bl	80002a8 <__adddf3>
 800d652:	4602      	mov	r2, r0
 800d654:	460b      	mov	r3, r1
 800d656:	4610      	mov	r0, r2
 800d658:	4619      	mov	r1, r3
 800d65a:	f7f3 fa75 	bl	8000b48 <__aeabi_d2f>
 800d65e:	4603      	mov	r3, r0
 800d660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d664:	e01a      	b.n	800d69c <mc_arc+0x1e4>
    } else if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON)
 800d666:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800d66a:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800d874 <mc_arc+0x3bc>
 800d66e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d676:	db11      	blt.n	800d69c <mc_arc+0x1e4>
        angular_travel -= 2.0f * M_PI;
 800d678:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d67c:	f7f2 ff72 	bl	8000564 <__aeabi_f2d>
 800d680:	a377      	add	r3, pc, #476	; (adr r3, 800d860 <mc_arc+0x3a8>)
 800d682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d686:	f7f2 fe0d 	bl	80002a4 <__aeabi_dsub>
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	4610      	mov	r0, r2
 800d690:	4619      	mov	r1, r3
 800d692:	f7f3 fa59 	bl	8000b48 <__aeabi_d2f>
 800d696:	4603      	mov	r3, r0
 800d698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    if(!pl_data->condition.target_validated && grbl.check_arc_travel_limits) {
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	7d5b      	ldrb	r3, [r3, #21]
 800d6a0:	f003 0302 	and.w	r3, r3, #2
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d134      	bne.n	800d714 <mc_arc+0x25c>
 800d6aa:	4b73      	ldr	r3, [pc, #460]	; (800d878 <mc_arc+0x3c0>)
 800d6ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d02f      	beq.n	800d714 <mc_arc+0x25c>
        pl_data->condition.target_validated = On;
 800d6b4:	693a      	ldr	r2, [r7, #16]
 800d6b6:	7d53      	ldrb	r3, [r2, #21]
 800d6b8:	f043 0302 	orr.w	r3, r3, #2
 800d6bc:	7553      	strb	r3, [r2, #21]
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 800d6be:	4b6e      	ldr	r3, [pc, #440]	; (800d878 <mc_arc+0x3c0>)
 800d6c0:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
                                                                        (point_2d_t){ .x = (float)center.x, .y = (float)center.y },
 800d6c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	f7f3 fa3c 	bl	8000b48 <__aeabi_d2f>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d6d8:	4610      	mov	r0, r2
 800d6da:	4619      	mov	r1, r3
 800d6dc:	f7f3 fa34 	bl	8000b48 <__aeabi_d2f>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        pl_data->condition.target_valid = grbl.check_arc_travel_limits((coord_data_t *)target, (coord_data_t *)position,
 800d6e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d6ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d6f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d6f4:	ed97 1a01 	vldr	s2, [r7, #4]
 800d6f8:	eeb0 0a47 	vmov.f32	s0, s14
 800d6fc:	eef0 0a67 	vmov.f32	s1, s15
 800d700:	68f9      	ldr	r1, [r7, #12]
 800d702:	6978      	ldr	r0, [r7, #20]
 800d704:	47a0      	blx	r4
 800d706:	4603      	mov	r3, r0
 800d708:	4619      	mov	r1, r3
 800d70a:	693a      	ldr	r2, [r7, #16]
 800d70c:	7d53      	ldrb	r3, [r2, #21]
 800d70e:	f361 0300 	bfi	r3, r1, #0, #1
 800d712:	7553      	strb	r3, [r2, #21]
                                                                         radius, plane, turns);
    }

    if(labs(turns) > 1) {
 800d714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d718:	2b00      	cmp	r3, #0
 800d71a:	bfb8      	it	lt
 800d71c:	425b      	neglt	r3, r3
 800d71e:	2b01      	cmp	r3, #1
 800d720:	f340 80cf 	ble.w	800d8c2 <mc_arc+0x40a>

        uint32_t n_turns = labs(turns) - 1;
 800d724:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d728:	2b00      	cmp	r3, #0
 800d72a:	bfb8      	it	lt
 800d72c:	425b      	neglt	r3, r3
 800d72e:	3b01      	subs	r3, #1
 800d730:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        float arc_travel = 2.0f * M_PI * n_turns + angular_travel;
 800d734:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d738:	f7f2 fef2 	bl	8000520 <__aeabi_ui2d>
 800d73c:	a348      	add	r3, pc, #288	; (adr r3, 800d860 <mc_arc+0x3a8>)
 800d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d742:	f7f2 ff67 	bl	8000614 <__aeabi_dmul>
 800d746:	4602      	mov	r2, r0
 800d748:	460b      	mov	r3, r1
 800d74a:	4614      	mov	r4, r2
 800d74c:	461d      	mov	r5, r3
 800d74e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800d752:	f7f2 ff07 	bl	8000564 <__aeabi_f2d>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4620      	mov	r0, r4
 800d75c:	4629      	mov	r1, r5
 800d75e:	f7f2 fda3 	bl	80002a8 <__adddf3>
 800d762:	4602      	mov	r2, r0
 800d764:	460b      	mov	r3, r1
 800d766:	4610      	mov	r0, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	f7f3 f9ed 	bl	8000b48 <__aeabi_d2f>
 800d76e:	4603      	mov	r3, r0
 800d770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            idx--;
            if(!(idx == plane.axis_0 || idx == plane.axis_1))
                linear_per_turn[idx] = (target[idx] - position[idx]) / arc_travel * 2.0f * M_PI;
        } while(idx);
#else
        float linear_per_turn = (target[plane.axis_linear] - position[plane.axis_linear]) / arc_travel * 2.0f * M_PI;
 800d774:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	697a      	ldr	r2, [r7, #20]
 800d77c:	4413      	add	r3, r2
 800d77e:	ed93 7a00 	vldr	s14, [r3]
 800d782:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	4413      	add	r3, r2
 800d78c:	edd3 7a00 	vldr	s15, [r3]
 800d790:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d794:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800d798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d79c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d7a0:	ee17 0a90 	vmov	r0, s15
 800d7a4:	f7f2 fede 	bl	8000564 <__aeabi_f2d>
 800d7a8:	a32f      	add	r3, pc, #188	; (adr r3, 800d868 <mc_arc+0x3b0>)
 800d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ae:	f7f2 ff31 	bl	8000614 <__aeabi_dmul>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	f7f3 f9c5 	bl	8000b48 <__aeabi_d2f>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif

        memcpy(&arc_target, target, sizeof(coord_data_t));
 800d7c4:	f107 031c 	add.w	r3, r7, #28
 800d7c8:	220c      	movs	r2, #12
 800d7ca:	6979      	ldr	r1, [r7, #20]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f018 fc93 	bl	80260f8 <memcpy>

        arc_target.values[plane.axis_0] = position[plane.axis_0];
 800d7d2:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4413      	add	r3, r2
 800d7dc:	f897 20b8 	ldrb.w	r2, [r7, #184]	; 0xb8
 800d7e0:	4611      	mov	r1, r2
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	008b      	lsls	r3, r1, #2
 800d7e6:	3398      	adds	r3, #152	; 0x98
 800d7e8:	443b      	add	r3, r7
 800d7ea:	3b7c      	subs	r3, #124	; 0x7c
 800d7ec:	601a      	str	r2, [r3, #0]
        arc_target.values[plane.axis_1] = position[plane.axis_1];
 800d7ee:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f897 20b9 	ldrb.w	r2, [r7, #185]	; 0xb9
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	008b      	lsls	r3, r1, #2
 800d802:	3398      	adds	r3, #152	; 0x98
 800d804:	443b      	add	r3, r7
 800d806:	3b7c      	subs	r3, #124	; 0x7c
 800d808:	601a      	str	r2, [r3, #0]
        arc_target.values[plane.axis_linear] = position[plane.axis_linear];
 800d80a:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	4413      	add	r3, r2
 800d814:	f897 20ba 	ldrb.w	r2, [r7, #186]	; 0xba
 800d818:	4611      	mov	r1, r2
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	008b      	lsls	r3, r1, #2
 800d81e:	3398      	adds	r3, #152	; 0x98
 800d820:	443b      	add	r3, r7
 800d822:	3b7c      	subs	r3, #124	; 0x7c
 800d824:	601a      	str	r2, [r3, #0]

        while(n_turns--) {
 800d826:	e045      	b.n	800d8b4 <mc_arc+0x3fc>
                idx--;
                if(!(idx == plane.axis_0 || idx == plane.axis_1))
                    arc_target.values[idx] += linear_per_turn[idx];
            } while(idx);
#else
            arc_target.values[plane.axis_linear] += linear_per_turn;
 800d828:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	3398      	adds	r3, #152	; 0x98
 800d830:	443b      	add	r3, r7
 800d832:	3b7c      	subs	r3, #124	; 0x7c
 800d834:	ed93 7a00 	vldr	s14, [r3]
 800d838:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800d83c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d840:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	3398      	adds	r3, #152	; 0x98
 800d848:	443b      	add	r3, r7
 800d84a:	3b7c      	subs	r3, #124	; 0x7c
 800d84c:	edc3 7a00 	vstr	s15, [r3]
#endif
            mc_arc(arc_target.values, pl_data, position, offset, radius, plane, turns > 0 ? 1 : -1);
 800d850:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d854:	2b00      	cmp	r3, #0
 800d856:	dd11      	ble.n	800d87c <mc_arc+0x3c4>
 800d858:	2301      	movs	r3, #1
 800d85a:	e011      	b.n	800d880 <mc_arc+0x3c8>
 800d85c:	f3af 8000 	nop.w
 800d860:	54442d18 	.word	0x54442d18
 800d864:	401921fb 	.word	0x401921fb
 800d868:	54442d18 	.word	0x54442d18
 800d86c:	400921fb 	.word	0x400921fb
 800d870:	350637bd 	.word	0x350637bd
 800d874:	b50637bd 	.word	0xb50637bd
 800d878:	200015b8 	.word	0x200015b8
 800d87c:	f04f 33ff 	mov.w	r3, #4294967295
 800d880:	f107 001c 	add.w	r0, r7, #28
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	466b      	mov	r3, sp
 800d888:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800d88c:	6812      	ldr	r2, [r2, #0]
 800d88e:	4611      	mov	r1, r2
 800d890:	8019      	strh	r1, [r3, #0]
 800d892:	3302      	adds	r3, #2
 800d894:	0c12      	lsrs	r2, r2, #16
 800d896:	701a      	strb	r2, [r3, #0]
 800d898:	ed97 0a01 	vldr	s0, [r7, #4]
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	6939      	ldr	r1, [r7, #16]
 800d8a2:	f7ff fe09 	bl	800d4b8 <mc_arc>
            memcpy(position, arc_target.values, sizeof(coord_data_t));
 800d8a6:	f107 031c 	add.w	r3, r7, #28
 800d8aa:	220c      	movs	r2, #12
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f018 fc22 	bl	80260f8 <memcpy>
        while(n_turns--) {
 800d8b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8b8:	1e5a      	subs	r2, r3, #1
 800d8ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d1b2      	bne.n	800d828 <mc_arc+0x370>

    // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
    // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
    // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
    // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
    uint_fast16_t segments = (uint_fast16_t)floorf(fabsf(0.5f * angular_travel * radius) / sqrtf(settings.arc_tolerance * (2.0f * radius - settings.arc_tolerance)));
 800d8c2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800d8c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d8ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d8ce:	edd7 7a01 	vldr	s15, [r7, #4]
 800d8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8d6:	eeb0 8ae7 	vabs.f32	s16, s15
 800d8da:	4bd4      	ldr	r3, [pc, #848]	; (800dc2c <mc_arc+0x774>)
 800d8dc:	ed93 7a02 	vldr	s14, [r3, #8]
 800d8e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800d8e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d8e8:	4bd0      	ldr	r3, [pc, #832]	; (800dc2c <mc_arc+0x774>)
 800d8ea:	edd3 7a02 	vldr	s15, [r3, #8]
 800d8ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8f6:	eeb0 0a67 	vmov.f32	s0, s15
 800d8fa:	f019 f9d9 	bl	8026cb0 <sqrtf>
 800d8fe:	eeb0 7a40 	vmov.f32	s14, s0
 800d902:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800d906:	eeb0 0a67 	vmov.f32	s0, s15
 800d90a:	f019 fae4 	bl	8026ed6 <floorf>
 800d90e:	eef0 7a40 	vmov.f32	s15, s0
 800d912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d916:	ee17 3a90 	vmov	r3, s15
 800d91a:	67fb      	str	r3, [r7, #124]	; 0x7c

    if (segments) {
 800d91c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 8177 	beq.w	800dc12 <mc_arc+0x75a>

        // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
        // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
        // all segments.
        if (pl_data->condition.inverse_time) {
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	7d1b      	ldrb	r3, [r3, #20]
 800d928:	f003 0320 	and.w	r3, r3, #32
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d011      	beq.n	800d956 <mc_arc+0x49e>
            pl_data->feed_rate *= segments;
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	ed93 7a00 	vldr	s14, [r3]
 800d938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d93a:	ee07 3a90 	vmov	s15, r3
 800d93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	edc3 7a00 	vstr	s15, [r3]
            pl_data->condition.inverse_time = Off; // Force as feed absolute mode over arc segments.
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	7d13      	ldrb	r3, [r2, #20]
 800d950:	f36f 1345 	bfc	r3, #5, #1
 800d954:	7513      	strb	r3, [r2, #20]
        }

        float theta_per_segment = angular_travel / segments;
 800d956:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d958:	ee07 3a90 	vmov	s15, r3
 800d95c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d960:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800d964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d968:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            idx--;
            if(!(idx == plane.axis_0 || idx == plane.axis_1))
                linear_per_segment[idx] = (target[idx] - position[idx]) / segments;
        } while(idx);
#else
        float linear_per_segment = (target[plane.axis_linear] - position[plane.axis_linear]) / segments;
 800d96c:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	4413      	add	r3, r2
 800d976:	ed93 7a00 	vldr	s14, [r3]
 800d97a:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	4413      	add	r3, r2
 800d984:	edd3 7a00 	vldr	s15, [r3]
 800d988:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d98c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d98e:	ee07 3a90 	vmov	s15, r3
 800d992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d99a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */

        // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
        float cos_T = 2.0f - theta_per_segment * theta_per_segment;
 800d99e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800d9a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d9a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d9aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9ae:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        float sin_T = theta_per_segment * 0.16666667f * (cos_T + 4.0f);
 800d9b2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800d9b6:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800dc30 <mc_arc+0x778>
 800d9ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d9be:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d9c2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ce:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
        cos_T *= 0.5f;
 800d9d2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800d9d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d9da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9de:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

        float sin_Ti;
        float cos_Ti;
        float r_axisi;
        uint_fast16_t i, count = 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        for (i = 1; i < segments; i++) { // Increment (segments-1).
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d9ee:	e10a      	b.n	800dc06 <mc_arc+0x74e>

            if (count < N_ARC_CORRECTION) {
 800d9f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d9f4:	2b0b      	cmp	r3, #11
 800d9f6:	d858      	bhi.n	800daaa <mc_arc+0x5f2>
                // Apply vector rotation matrix.
                r_axisi = rv.x * sin_T + rv.y * cos_T;
 800d9f8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d9fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d9fe:	f7f2 fdb1 	bl	8000564 <__aeabi_f2d>
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	4620      	mov	r0, r4
 800da08:	4629      	mov	r1, r5
 800da0a:	f7f2 fe03 	bl	8000614 <__aeabi_dmul>
 800da0e:	4602      	mov	r2, r0
 800da10:	460b      	mov	r3, r1
 800da12:	4690      	mov	r8, r2
 800da14:	4699      	mov	r9, r3
 800da16:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800da1a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800da1c:	f7f2 fda2 	bl	8000564 <__aeabi_f2d>
 800da20:	4602      	mov	r2, r0
 800da22:	460b      	mov	r3, r1
 800da24:	4620      	mov	r0, r4
 800da26:	4629      	mov	r1, r5
 800da28:	f7f2 fdf4 	bl	8000614 <__aeabi_dmul>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	4640      	mov	r0, r8
 800da32:	4649      	mov	r1, r9
 800da34:	f7f2 fc38 	bl	80002a8 <__adddf3>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4610      	mov	r0, r2
 800da3e:	4619      	mov	r1, r3
 800da40:	f7f3 f882 	bl	8000b48 <__aeabi_d2f>
 800da44:	4603      	mov	r3, r0
 800da46:	663b      	str	r3, [r7, #96]	; 0x60
                rv.x = rv.x * cos_T - rv.y * sin_T;
 800da48:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800da4c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800da4e:	f7f2 fd89 	bl	8000564 <__aeabi_f2d>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4620      	mov	r0, r4
 800da58:	4629      	mov	r1, r5
 800da5a:	f7f2 fddb 	bl	8000614 <__aeabi_dmul>
 800da5e:	4602      	mov	r2, r0
 800da60:	460b      	mov	r3, r1
 800da62:	4690      	mov	r8, r2
 800da64:	4699      	mov	r9, r3
 800da66:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800da6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da6c:	f7f2 fd7a 	bl	8000564 <__aeabi_f2d>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	4620      	mov	r0, r4
 800da76:	4629      	mov	r1, r5
 800da78:	f7f2 fdcc 	bl	8000614 <__aeabi_dmul>
 800da7c:	4602      	mov	r2, r0
 800da7e:	460b      	mov	r3, r1
 800da80:	4640      	mov	r0, r8
 800da82:	4649      	mov	r1, r9
 800da84:	f7f2 fc0e 	bl	80002a4 <__aeabi_dsub>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
                rv.y = r_axisi;
 800da90:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800da92:	f7f2 fd67 	bl	8000564 <__aeabi_f2d>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
                count++;
 800da9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800daa2:	3301      	adds	r3, #1
 800daa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800daa8:	e066      	b.n	800db78 <mc_arc+0x6c0>
            } else {
                // Arc correction to radius vector. Computed only every N_ARC_CORRECTION increments.
                // Compute exact location by applying transformation matrix from initial radius vector(=-offset).
                cos_Ti = cosf(i * theta_per_segment);
 800daaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800daae:	ee07 3a90 	vmov	s15, r3
 800dab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dab6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800daba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dabe:	eeb0 0a67 	vmov.f32	s0, s15
 800dac2:	f019 f913 	bl	8026cec <cosf>
 800dac6:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
                sin_Ti = sinf(i * theta_per_segment);
 800daca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dace:	ee07 3a90 	vmov	s15, r3
 800dad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dad6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800dada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dade:	eeb0 0a67 	vmov.f32	s0, s15
 800dae2:	f019 f947 	bl	8026d74 <sinf>
 800dae6:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
                rv.x = -offset[plane.axis_0] * cos_Ti + offset[plane.axis_1] * sin_Ti;
 800daea:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	68ba      	ldr	r2, [r7, #8]
 800daf2:	4413      	add	r3, r2
 800daf4:	edd3 7a00 	vldr	s15, [r3]
 800daf8:	eeb1 7a67 	vneg.f32	s14, s15
 800dafc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800db00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db04:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	4413      	add	r3, r2
 800db0e:	edd3 6a00 	vldr	s13, [r3]
 800db12:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800db16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db1e:	ee17 0a90 	vmov	r0, s15
 800db22:	f7f2 fd1f 	bl	8000564 <__aeabi_f2d>
 800db26:	4602      	mov	r2, r0
 800db28:	460b      	mov	r3, r1
 800db2a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
                rv.y = -offset[plane.axis_0] * sin_Ti - offset[plane.axis_1] * cos_Ti;
 800db2e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	4413      	add	r3, r2
 800db38:	edd3 7a00 	vldr	s15, [r3]
 800db3c:	eeb1 7a67 	vneg.f32	s14, s15
 800db40:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800db44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db48:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	4413      	add	r3, r2
 800db52:	edd3 6a00 	vldr	s13, [r3]
 800db56:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800db5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db62:	ee17 0a90 	vmov	r0, s15
 800db66:	f7f2 fcfd 	bl	8000564 <__aeabi_f2d>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
                count = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }

            // Update arc_target location
            position[plane.axis_0] = center.x + rv.x;
 800db78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800db7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800db80:	f7f2 fb92 	bl	80002a8 <__adddf3>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	4610      	mov	r0, r2
 800db8a:	4619      	mov	r1, r3
 800db8c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	18d4      	adds	r4, r2, r3
 800db96:	f7f2 ffd7 	bl	8000b48 <__aeabi_d2f>
 800db9a:	4603      	mov	r3, r0
 800db9c:	6023      	str	r3, [r4, #0]
            position[plane.axis_1] = center.y + rv.y;
 800db9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800dba2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dba6:	f7f2 fb7f 	bl	80002a8 <__adddf3>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4610      	mov	r0, r2
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	18d4      	adds	r4, r2, r3
 800dbbc:	f7f2 ffc4 	bl	8000b48 <__aeabi_d2f>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	6023      	str	r3, [r4, #0]
                idx--;
                if(!(idx == plane.axis_0 || idx == plane.axis_1))
                    position[idx] += linear_per_segment[idx];
            } while(idx);
#else
            position[plane.axis_linear] += linear_per_segment;
 800dbc4:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4413      	add	r3, r2
 800dbce:	ed93 7a00 	vldr	s14, [r3]
 800dbd2:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	4413      	add	r3, r2
 800dbdc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800dbe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbe4:	edc3 7a00 	vstr	s15, [r3]
#endif

            // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
            if(!mc_line(position, pl_data))
 800dbe8:	6939      	ldr	r1, [r7, #16]
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f7ff fbe6 	bl	800d3bc <mc_line>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f083 0301 	eor.w	r3, r3, #1
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10f      	bne.n	800dc1c <mc_arc+0x764>
        for (i = 1; i < segments; i++) { // Increment (segments-1).
 800dbfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc00:	3301      	adds	r3, #1
 800dc02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dc06:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dc0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	f4ff aeef 	bcc.w	800d9f0 <mc_arc+0x538>
                return;
        }
    }

    // Ensure last segment arrives at target location.
    mc_line(target, pl_data);
 800dc12:	6939      	ldr	r1, [r7, #16]
 800dc14:	6978      	ldr	r0, [r7, #20]
 800dc16:	f7ff fbd1 	bl	800d3bc <mc_line>
 800dc1a:	e000      	b.n	800dc1e <mc_arc+0x766>
                return;
 800dc1c:	bf00      	nop
}
 800dc1e:	3798      	adds	r7, #152	; 0x98
 800dc20:	46bd      	mov	sp, r7
 800dc22:	ecbd 8b02 	vpop	{d8}
 800dc26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dc2a:	bf00      	nop
 800dc2c:	20001cf0 	.word	0x20001cf0
 800dc30:	3e2aaaab 	.word	0x3e2aaaab

0800dc34 <interp>:
// Bezier splines, from a pull request for Marlin
// By Giovanni Mascellani - https://github.com/giomasce/Marlin

// Compute the linear interpolation between two real numbers.
static inline float interp (const float a, const float b, const float t)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	ed87 0a03 	vstr	s0, [r7, #12]
 800dc3e:	edc7 0a02 	vstr	s1, [r7, #8]
 800dc42:	ed87 1a01 	vstr	s2, [r7, #4]
    return (1.0f - t) * a + t * b;
 800dc46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dc4a:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dc52:	edd7 7a03 	vldr	s15, [r7, #12]
 800dc56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc5a:	edd7 6a01 	vldr	s13, [r7, #4]
 800dc5e:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc66:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800dc6a:	eeb0 0a67 	vmov.f32	s0, s15
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <eval_bezier>:
 * https://en.wikipedia.org/wiki/De_Casteljau's_algorithm), which is
 * easy to code and has good numerical stability (very important,
 * since Arudino works with limited precision real numbers).
 */
static inline float eval_bezier (const float a, const float b, const float c, const float d, const float t)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b08c      	sub	sp, #48	; 0x30
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	ed87 0a05 	vstr	s0, [r7, #20]
 800dc82:	edc7 0a04 	vstr	s1, [r7, #16]
 800dc86:	ed87 1a03 	vstr	s2, [r7, #12]
 800dc8a:	edc7 1a02 	vstr	s3, [r7, #8]
 800dc8e:	ed87 2a01 	vstr	s4, [r7, #4]
    const float iab = interp(a, b, t),
 800dc92:	ed97 1a01 	vldr	s2, [r7, #4]
 800dc96:	edd7 0a04 	vldr	s1, [r7, #16]
 800dc9a:	ed97 0a05 	vldr	s0, [r7, #20]
 800dc9e:	f7ff ffc9 	bl	800dc34 <interp>
 800dca2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
                ibc = interp(b, c, t),
 800dca6:	ed97 1a01 	vldr	s2, [r7, #4]
 800dcaa:	edd7 0a03 	vldr	s1, [r7, #12]
 800dcae:	ed97 0a04 	vldr	s0, [r7, #16]
 800dcb2:	f7ff ffbf 	bl	800dc34 <interp>
 800dcb6:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
                icd = interp(c, d, t),
 800dcba:	ed97 1a01 	vldr	s2, [r7, #4]
 800dcbe:	edd7 0a02 	vldr	s1, [r7, #8]
 800dcc2:	ed97 0a03 	vldr	s0, [r7, #12]
 800dcc6:	f7ff ffb5 	bl	800dc34 <interp>
 800dcca:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
                iabc = interp(iab, ibc, t),
 800dcce:	ed97 1a01 	vldr	s2, [r7, #4]
 800dcd2:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800dcd6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800dcda:	f7ff ffab 	bl	800dc34 <interp>
 800dcde:	ed87 0a08 	vstr	s0, [r7, #32]
                ibcd = interp(ibc, icd, t);
 800dce2:	ed97 1a01 	vldr	s2, [r7, #4]
 800dce6:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 800dcea:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800dcee:	f7ff ffa1 	bl	800dc34 <interp>
 800dcf2:	ed87 0a07 	vstr	s0, [r7, #28]

    return interp(iabc, ibcd, t);
 800dcf6:	ed97 1a01 	vldr	s2, [r7, #4]
 800dcfa:	edd7 0a07 	vldr	s1, [r7, #28]
 800dcfe:	ed97 0a08 	vldr	s0, [r7, #32]
 800dd02:	f7ff ff97 	bl	800dc34 <interp>
 800dd06:	eef0 7a40 	vmov.f32	s15, s0
}
 800dd0a:	eeb0 0a67 	vmov.f32	s0, s15
 800dd0e:	3730      	adds	r7, #48	; 0x30
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <dist1>:
/**
 * We approximate Euclidean distance with the sum of the coordinates
 * offset (so-called "norm 1"), which is quicker to compute.
 */
static inline float dist1 (const float x1, const float y1, const float x2, const float y2)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	ed87 0a03 	vstr	s0, [r7, #12]
 800dd1e:	edc7 0a02 	vstr	s1, [r7, #8]
 800dd22:	ed87 1a01 	vstr	s2, [r7, #4]
 800dd26:	edc7 1a00 	vstr	s3, [r7]
    return fabsf(x1 - x2) + fabsf(y1 - y2);
 800dd2a:	ed97 7a03 	vldr	s14, [r7, #12]
 800dd2e:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd36:	eeb0 7ae7 	vabs.f32	s14, s15
 800dd3a:	edd7 6a02 	vldr	s13, [r7, #8]
 800dd3e:	edd7 7a00 	vldr	s15, [r7]
 800dd42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800dd46:	eef0 7ae7 	vabs.f32	s15, s15
 800dd4a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800dd4e:	eeb0 0a67 	vmov.f32	s0, s15
 800dd52:	3714      	adds	r7, #20
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <mc_cubic_b_spline>:
 * the mitigation offered by MIN_STEP and the small computational
 * power available on Arduino, I think it is not wise to implement it.
 */

void mc_cubic_b_spline (float *target, plan_line_data_t *pl_data, float *position, float *first, float *second)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b098      	sub	sp, #96	; 0x60
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	603b      	str	r3, [r7, #0]
    float bez_target[N_AXIS];

    memcpy(bez_target, position, sizeof(float) * N_AXIS);
 800dd6a:	f107 0314 	add.w	r3, r7, #20
 800dd6e:	220c      	movs	r2, #12
 800dd70:	6879      	ldr	r1, [r7, #4]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f018 f9c0 	bl	80260f8 <memcpy>

    float t = 0.0f, step = BEZIER_MAX_STEP;
 800dd78:	f04f 0300 	mov.w	r3, #0
 800dd7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd7e:	4bcf      	ldr	r3, [pc, #828]	; (800e0bc <mc_cubic_b_spline+0x360>)
 800dd80:	65bb      	str	r3, [r7, #88]	; 0x58

    while (t < 1.0f) {
 800dd82:	e18c      	b.n	800e09e <mc_cubic_b_spline+0x342>

        // First try to reduce the step in order to make it sufficiently
        // close to a linear interpolation.
        bool did_reduce = false;
 800dd84:	2300      	movs	r3, #0
 800dd86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        float new_t = t + step;
 800dd8a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800dd8e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800dd92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd96:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

        if(new_t > 1.0f)
 800dd9a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800dd9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dda2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddaa:	dd02      	ble.n	800ddb2 <mc_cubic_b_spline+0x56>
            new_t = 1.0f;
 800ddac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ddb0:	653b      	str	r3, [r7, #80]	; 0x50

        float new_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], new_t),
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	edd3 7a00 	vldr	s15, [r3]
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	ed93 7a00 	vldr	s14, [r3]
 800ddbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddc0:	edd3 6a00 	vldr	s13, [r3]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	ed93 6a00 	vldr	s12, [r3]
 800ddca:	ed97 2a14 	vldr	s4, [r7, #80]	; 0x50
 800ddce:	eef0 1a46 	vmov.f32	s3, s12
 800ddd2:	eeb0 1a66 	vmov.f32	s2, s13
 800ddd6:	eef0 0a47 	vmov.f32	s1, s14
 800ddda:	eeb0 0a67 	vmov.f32	s0, s15
 800ddde:	f7ff ff4b 	bl	800dc78 <eval_bezier>
 800dde2:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
              new_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], new_t);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	3304      	adds	r3, #4
 800ddea:	edd3 7a00 	vldr	s15, [r3]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	ed93 7a00 	vldr	s14, [r3]
 800ddf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddf8:	3304      	adds	r3, #4
 800ddfa:	edd3 6a00 	vldr	s13, [r3]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3304      	adds	r3, #4
 800de02:	ed93 6a00 	vldr	s12, [r3]
 800de06:	ed97 2a14 	vldr	s4, [r7, #80]	; 0x50
 800de0a:	eef0 1a46 	vmov.f32	s3, s12
 800de0e:	eeb0 1a66 	vmov.f32	s2, s13
 800de12:	eef0 0a47 	vmov.f32	s1, s14
 800de16:	eeb0 0a67 	vmov.f32	s0, s15
 800de1a:	f7ff ff2d 	bl	800dc78 <eval_bezier>
 800de1e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

        while(new_t - t >= (BEZIER_MIN_STEP)) {
 800de22:	e077      	b.n	800df14 <mc_cubic_b_spline+0x1b8>

//            if (new_t - t < (BEZIER_MIN_STEP))
//                break;

            const float candidate_t = 0.5f * (t + new_t),
 800de24:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800de28:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800de2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800de34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de38:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
                      candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	edd3 7a00 	vldr	s15, [r3]
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	ed93 7a00 	vldr	s14, [r3]
 800de48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de4a:	edd3 6a00 	vldr	s13, [r3]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	ed93 6a00 	vldr	s12, [r3]
 800de54:	ed97 2a11 	vldr	s4, [r7, #68]	; 0x44
 800de58:	eef0 1a46 	vmov.f32	s3, s12
 800de5c:	eeb0 1a66 	vmov.f32	s2, s13
 800de60:	eef0 0a47 	vmov.f32	s1, s14
 800de64:	eeb0 0a67 	vmov.f32	s0, s15
 800de68:	f7ff ff06 	bl	800dc78 <eval_bezier>
 800de6c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	3304      	adds	r3, #4
 800de74:	edd3 7a00 	vldr	s15, [r3]
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	3304      	adds	r3, #4
 800de7c:	ed93 7a00 	vldr	s14, [r3]
 800de80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de82:	3304      	adds	r3, #4
 800de84:	edd3 6a00 	vldr	s13, [r3]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	3304      	adds	r3, #4
 800de8c:	ed93 6a00 	vldr	s12, [r3]
 800de90:	ed97 2a11 	vldr	s4, [r7, #68]	; 0x44
 800de94:	eef0 1a46 	vmov.f32	s3, s12
 800de98:	eeb0 1a66 	vmov.f32	s2, s13
 800de9c:	eef0 0a47 	vmov.f32	s1, s14
 800dea0:	eeb0 0a67 	vmov.f32	s0, s15
 800dea4:	f7ff fee8 	bl	800dc78 <eval_bezier>
 800dea8:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + new_pos0),
 800deac:	ed97 7a05 	vldr	s14, [r7, #20]
 800deb0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800deb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800deb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800debc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dec0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + new_pos1);
 800dec4:	ed97 7a06 	vldr	s14, [r7, #24]
 800dec8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800decc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ded0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ded4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ded8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

            if (dist1(candidate_pos0, candidate_pos1, interp_pos0, interp_pos1) <= (BEZIER_SIGMA))
 800dedc:	edd7 1a0d 	vldr	s3, [r7, #52]	; 0x34
 800dee0:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 800dee4:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 800dee8:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800deec:	f7ff ff12 	bl	800dd14 <dist1>
 800def0:	eef0 7a40 	vmov.f32	s15, s0
 800def4:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800e0c0 <mc_cubic_b_spline+0x364>
 800def8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800defc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df00:	d917      	bls.n	800df32 <mc_cubic_b_spline+0x1d6>
                break;

            new_t = candidate_t;
 800df02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df04:	653b      	str	r3, [r7, #80]	; 0x50
            new_pos0 = candidate_pos0;
 800df06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df08:	64fb      	str	r3, [r7, #76]	; 0x4c
            new_pos1 = candidate_pos1;
 800df0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0c:	64bb      	str	r3, [r7, #72]	; 0x48
            did_reduce = true;
 800df0e:	2301      	movs	r3, #1
 800df10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        while(new_t - t >= (BEZIER_MIN_STEP)) {
 800df14:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800df18:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800df1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df20:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800e0c4 <mc_cubic_b_spline+0x368>
 800df24:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2c:	f6bf af7a 	bge.w	800de24 <mc_cubic_b_spline+0xc8>
 800df30:	e000      	b.n	800df34 <mc_cubic_b_spline+0x1d8>
                break;
 800df32:	bf00      	nop
        }

        // If we did not reduce the step, maybe we should enlarge it.
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 800df34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df38:	f083 0301 	eor.w	r3, r3, #1
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 8093 	beq.w	800e06a <mc_cubic_b_spline+0x30e>
 800df44:	e07f      	b.n	800e046 <mc_cubic_b_spline+0x2ea>

//            if (new_t - t > BEZIER_MAX_STEP)
//                break;

            const float candidate_t = t + 2.0f * (new_t - t);
 800df46:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800df4a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800df4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800df56:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800df5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df5e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

            if (candidate_t >= 1.0f)
 800df62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800df66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df72:	da77      	bge.n	800e064 <mc_cubic_b_spline+0x308>
                break;

            const float candidate_pos0 = eval_bezier(position[X_AXIS], first[X_AXIS], second[X_AXIS], target[X_AXIS], candidate_t),
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	edd3 7a00 	vldr	s15, [r3]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	ed93 7a00 	vldr	s14, [r3]
 800df80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df82:	edd3 6a00 	vldr	s13, [r3]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	ed93 6a00 	vldr	s12, [r3]
 800df8c:	ed97 2a0c 	vldr	s4, [r7, #48]	; 0x30
 800df90:	eef0 1a46 	vmov.f32	s3, s12
 800df94:	eeb0 1a66 	vmov.f32	s2, s13
 800df98:	eef0 0a47 	vmov.f32	s1, s14
 800df9c:	eeb0 0a67 	vmov.f32	s0, s15
 800dfa0:	f7ff fe6a 	bl	800dc78 <eval_bezier>
 800dfa4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
                      candidate_pos1 = eval_bezier(position[Y_AXIS], first[Y_AXIS], second[Y_AXIS], target[Y_AXIS], candidate_t),
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	edd3 7a00 	vldr	s15, [r3]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	ed93 7a00 	vldr	s14, [r3]
 800dfb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dfba:	3304      	adds	r3, #4
 800dfbc:	edd3 6a00 	vldr	s13, [r3]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3304      	adds	r3, #4
 800dfc4:	ed93 6a00 	vldr	s12, [r3]
 800dfc8:	ed97 2a0c 	vldr	s4, [r7, #48]	; 0x30
 800dfcc:	eef0 1a46 	vmov.f32	s3, s12
 800dfd0:	eeb0 1a66 	vmov.f32	s2, s13
 800dfd4:	eef0 0a47 	vmov.f32	s1, s14
 800dfd8:	eeb0 0a67 	vmov.f32	s0, s15
 800dfdc:	f7ff fe4c 	bl	800dc78 <eval_bezier>
 800dfe0:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
                      interp_pos0 = 0.5f * (bez_target[X_AXIS] + candidate_pos0),
 800dfe4:	ed97 7a05 	vldr	s14, [r7, #20]
 800dfe8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800dfec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dff0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dff8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                      interp_pos1 = 0.5f * (bez_target[Y_AXIS] + candidate_pos1);
 800dffc:	ed97 7a06 	vldr	s14, [r7, #24]
 800e000:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e004:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e008:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e00c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e010:	edc7 7a08 	vstr	s15, [r7, #32]

            if (dist1(new_pos0, new_pos1, interp_pos0, interp_pos1) > (BEZIER_SIGMA))
 800e014:	edd7 1a08 	vldr	s3, [r7, #32]
 800e018:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800e01c:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800e020:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800e024:	f7ff fe76 	bl	800dd14 <dist1>
 800e028:	eef0 7a40 	vmov.f32	s15, s0
 800e02c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e0c0 <mc_cubic_b_spline+0x364>
 800e030:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e038:	dc16      	bgt.n	800e068 <mc_cubic_b_spline+0x30c>
                break;

            new_t = candidate_t;
 800e03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03c:	653b      	str	r3, [r7, #80]	; 0x50
            new_pos0 = candidate_pos0;
 800e03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e040:	64fb      	str	r3, [r7, #76]	; 0x4c
            new_pos1 = candidate_pos1;
 800e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e044:	64bb      	str	r3, [r7, #72]	; 0x48
        if (!did_reduce) while (new_t - t <= BEZIER_MAX_STEP) {
 800e046:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800e04a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e04e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e052:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800e0c0 <mc_cubic_b_spline+0x364>
 800e056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e05e:	f67f af72 	bls.w	800df46 <mc_cubic_b_spline+0x1ea>
 800e062:	e002      	b.n	800e06a <mc_cubic_b_spline+0x30e>
                break;
 800e064:	bf00      	nop
 800e066:	e000      	b.n	800e06a <mc_cubic_b_spline+0x30e>
                break;
 800e068:	bf00      	nop
            assert(new_t - t >= (MIN_STEP) / 2.0);
            assert(new_t - t <= (MAX_STEP) * 2.0);
          }
        */

        step = new_t - t;
 800e06a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800e06e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e072:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e076:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        t = new_t;
 800e07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e07c:	65fb      	str	r3, [r7, #92]	; 0x5c

        bez_target[X_AXIS] = new_pos0;
 800e07e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e080:	617b      	str	r3, [r7, #20]
        bez_target[Y_AXIS] = new_pos1;
 800e082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e084:	61bb      	str	r3, [r7, #24]

        // Bail mid-spline on system abort. Runtime command check already performed by mc_line.
        if(!mc_line(bez_target, pl_data))
 800e086:	f107 0314 	add.w	r3, r7, #20
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7ff f995 	bl	800d3bc <mc_line>
 800e092:	4603      	mov	r3, r0
 800e094:	f083 0301 	eor.w	r3, r3, #1
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d10a      	bne.n	800e0b4 <mc_cubic_b_spline+0x358>
    while (t < 1.0f) {
 800e09e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800e0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ae:	f53f ae69 	bmi.w	800dd84 <mc_cubic_b_spline+0x28>
 800e0b2:	e000      	b.n	800e0b6 <mc_cubic_b_spline+0x35a>
            return;
 800e0b4:	bf00      	nop
    }
}
 800e0b6:	3760      	adds	r7, #96	; 0x60
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	3dcccccd 	.word	0x3dcccccd
 800e0c0:	3dcccccd 	.word	0x3dcccccd
 800e0c4:	3b03126f 	.word	0x3b03126f

0800e0c8 <mc_canned_drill>:

// end Bezier splines

void mc_canned_drill (motion_mode_t motion, float *target, plan_line_data_t *pl_data, float *position, plane_t plane, uint32_t repeats, gc_canned_t *canned)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60b9      	str	r1, [r7, #8]
 800e0d0:	607a      	str	r2, [r7, #4]
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	81fb      	strh	r3, [r7, #14]
    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	7d13      	ldrb	r3, [r2, #20]
 800e0dc:	f043 0301 	orr.w	r3, r3, #1
 800e0e0:	7513      	strb	r3, [r2, #20]

    // if current Z < R, rapid move to R
    if(position[plane.axis_linear] < canned->retract_position) {
 800e0e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	683a      	ldr	r2, [r7, #0]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	ed93 7a00 	vldr	s14, [r3]
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	edd3 7a06 	vldr	s15, [r3, #24]
 800e0f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0fe:	d512      	bpl.n	800e126 <mc_canned_drill+0x5e>
        position[plane.axis_linear] = canned->retract_position;
 800e100:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	4413      	add	r3, r2
 800e10a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e10c:	6992      	ldr	r2, [r2, #24]
 800e10e:	601a      	str	r2, [r3, #0]
        if(!mc_line(position, pl_data))
 800e110:	6879      	ldr	r1, [r7, #4]
 800e112:	6838      	ldr	r0, [r7, #0]
 800e114:	f7ff f952 	bl	800d3bc <mc_line>
 800e118:	4603      	mov	r3, r0
 800e11a:	f083 0301 	eor.w	r3, r3, #1
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	2b00      	cmp	r3, #0
 800e122:	f040 8185 	bne.w	800e430 <mc_canned_drill+0x368>
            return;
    }

    // rapid move to X, Y
    memcpy(position, target, sizeof(float) * N_AXIS);
 800e126:	220c      	movs	r2, #12
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	6838      	ldr	r0, [r7, #0]
 800e12c:	f017 ffe4 	bl	80260f8 <memcpy>
    position[plane.axis_linear] = canned->prev_position > canned->retract_position ? canned->prev_position : canned->retract_position;
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	ed93 7a05 	vldr	s14, [r3, #20]
 800e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e138:	edd3 7a06 	vldr	s15, [r3, #24]
 800e13c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e144:	dd02      	ble.n	800e14c <mc_canned_drill+0x84>
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	e001      	b.n	800e150 <mc_canned_drill+0x88>
 800e14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e154:	0092      	lsls	r2, r2, #2
 800e156:	6839      	ldr	r1, [r7, #0]
 800e158:	440a      	add	r2, r1
 800e15a:	6013      	str	r3, [r2, #0]
    if(!mc_line(position, pl_data))
 800e15c:	6879      	ldr	r1, [r7, #4]
 800e15e:	6838      	ldr	r0, [r7, #0]
 800e160:	f7ff f92c 	bl	800d3bc <mc_line>
 800e164:	4603      	mov	r3, r0
 800e166:	f083 0301 	eor.w	r3, r3, #1
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f040 8161 	bne.w	800e434 <mc_canned_drill+0x36c>
        return;

    // if current Z > R, rapid move to R
    if(position[plane.axis_linear] > canned->retract_position) {
 800e172:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	683a      	ldr	r2, [r7, #0]
 800e17a:	4413      	add	r3, r2
 800e17c:	ed93 7a00 	vldr	s14, [r3]
 800e180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e182:	edd3 7a06 	vldr	s15, [r3, #24]
 800e186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18e:	dd12      	ble.n	800e1b6 <mc_canned_drill+0xee>
        position[plane.axis_linear] = canned->retract_position;
 800e190:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	683a      	ldr	r2, [r7, #0]
 800e198:	4413      	add	r3, r2
 800e19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e19c:	6992      	ldr	r2, [r2, #24]
 800e19e:	601a      	str	r2, [r3, #0]
        if(!mc_line(position, pl_data))
 800e1a0:	6879      	ldr	r1, [r7, #4]
 800e1a2:	6838      	ldr	r0, [r7, #0]
 800e1a4:	f7ff f90a 	bl	800d3bc <mc_line>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	f083 0301 	eor.w	r3, r3, #1
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f040 8141 	bne.w	800e438 <mc_canned_drill+0x370>
            return;
    }

    if(canned->retract_mode == CCRetractMode_RPos)
 800e1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b8:	7f9b      	ldrb	r3, [r3, #30]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	f040 8100 	bne.w	800e3c0 <mc_canned_drill+0x2f8>
        canned->prev_position = canned->retract_position;
 800e1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c2:	699a      	ldr	r2, [r3, #24]
 800e1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c6:	615a      	str	r2, [r3, #20]

    while(repeats--) {
 800e1c8:	e0fa      	b.n	800e3c0 <mc_canned_drill+0x2f8>

        float current_z = canned->retract_position;
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	617b      	str	r3, [r7, #20]

        while(current_z > canned->xyz[plane.axis_linear]) {
 800e1d0:	e0a8      	b.n	800e324 <mc_canned_drill+0x25c>

            current_z -= canned->delta;
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	edd3 7a03 	vldr	s15, [r3, #12]
 800e1d8:	ed97 7a05 	vldr	s14, [r7, #20]
 800e1dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1e0:	edc7 7a05 	vstr	s15, [r7, #20]
            if(current_z < canned->xyz[plane.axis_linear])
 800e1e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	4413      	add	r3, r2
 800e1ee:	edd3 7a00 	vldr	s15, [r3]
 800e1f2:	ed97 7a05 	vldr	s14, [r7, #20]
 800e1f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fe:	d506      	bpl.n	800e20e <mc_canned_drill+0x146>
                current_z = canned->xyz[plane.axis_linear];
 800e200:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	4413      	add	r3, r2
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	617b      	str	r3, [r7, #20]

            pl_data->condition.rapid_motion = Off;
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	7d13      	ldrb	r3, [r2, #20]
 800e212:	f36f 0300 	bfc	r3, #0, #1
 800e216:	7513      	strb	r3, [r2, #20]

            position[plane.axis_linear] = current_z;
 800e218:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e21c:	009b      	lsls	r3, r3, #2
 800e21e:	683a      	ldr	r2, [r7, #0]
 800e220:	4413      	add	r3, r2
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	601a      	str	r2, [r3, #0]
            if(!mc_line(position, pl_data)) // drill
 800e226:	6879      	ldr	r1, [r7, #4]
 800e228:	6838      	ldr	r0, [r7, #0]
 800e22a:	f7ff f8c7 	bl	800d3bc <mc_line>
 800e22e:	4603      	mov	r3, r0
 800e230:	f083 0301 	eor.w	r3, r3, #1
 800e234:	b2db      	uxtb	r3, r3
 800e236:	2b00      	cmp	r3, #0
 800e238:	f040 8100 	bne.w	800e43c <mc_canned_drill+0x374>
                return;

            if(canned->dwell > 0.0f)
 800e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23e:	edd3 7a04 	vldr	s15, [r3, #16]
 800e242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24a:	dd06      	ble.n	800e25a <mc_canned_drill+0x192>
                mc_dwell(canned->dwell);
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	edd3 7a04 	vldr	s15, [r3, #16]
 800e252:	eeb0 0a67 	vmov.f32	s0, s15
 800e256:	f000 fbf5 	bl	800ea44 <mc_dwell>

            if(canned->spindle_off)
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	7f5b      	ldrb	r3, [r3, #29]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d007      	beq.n	800e272 <mc_canned_drill+0x1aa>
                pl_data->spindle.hal->set_state((spindle_state_t){0}, 0.0f);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	69db      	ldr	r3, [r3, #28]
 800e268:	2200      	movs	r2, #0
 800e26a:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800e44c <mc_canned_drill+0x384>
 800e26e:	4610      	mov	r0, r2
 800e270:	4798      	blx	r3

            // rapid retract
            switch(motion) {
 800e272:	89fb      	ldrh	r3, [r7, #14]
 800e274:	2b49      	cmp	r3, #73	; 0x49
 800e276:	d12a      	bne.n	800e2ce <mc_canned_drill+0x206>

                case MotionMode_DrillChipBreak:
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 800e278:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	4413      	add	r3, r2
 800e282:	ed93 7a00 	vldr	s14, [r3]
 800e286:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4413      	add	r3, r2
 800e290:	edd3 7a00 	vldr	s15, [r3]
                                                   ? canned->retract_position
                                                   : position[plane.axis_linear] + settings.g73_retract;
 800e294:	eeb4 7a67 	vcmp.f32	s14, s15
 800e298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29c:	d103      	bne.n	800e2a6 <mc_canned_drill+0x1de>
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	edd3 7a06 	vldr	s15, [r3, #24]
 800e2a4:	e00b      	b.n	800e2be <mc_canned_drill+0x1f6>
 800e2a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	ed93 7a00 	vldr	s14, [r3]
 800e2b4:	4b66      	ldr	r3, [pc, #408]	; (800e450 <mc_canned_drill+0x388>)
 800e2b6:	edd3 7a03 	vldr	s15, [r3, #12]
 800e2ba:	ee77 7a27 	vadd.f32	s15, s14, s15
                    position[plane.axis_linear] = position[plane.axis_linear] == canned->xyz[plane.axis_linear]
 800e2be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	683a      	ldr	r2, [r7, #0]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	edc3 7a00 	vstr	s15, [r3]
                    break;
 800e2cc:	e008      	b.n	800e2e0 <mc_canned_drill+0x218>

                default:
                    position[plane.axis_linear] = canned->retract_position;
 800e2ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2da:	6992      	ldr	r2, [r2, #24]
 800e2dc:	601a      	str	r2, [r3, #0]
                    break;
 800e2de:	bf00      	nop
            }

            pl_data->condition.rapid_motion = canned->rapid_retract;
 800e2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e2:	7f19      	ldrb	r1, [r3, #28]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	7d13      	ldrb	r3, [r2, #20]
 800e2e8:	f361 0300 	bfi	r3, r1, #0, #1
 800e2ec:	7513      	strb	r3, [r2, #20]
            if(!mc_line(position, pl_data))
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	6838      	ldr	r0, [r7, #0]
 800e2f2:	f7ff f863 	bl	800d3bc <mc_line>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	f083 0301 	eor.w	r3, r3, #1
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f040 809e 	bne.w	800e440 <mc_canned_drill+0x378>
                return;

            if(canned->spindle_off)
 800e304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e306:	7f5b      	ldrb	r3, [r3, #29]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00b      	beq.n	800e324 <mc_canned_drill+0x25c>
                spindle_sync(pl_data->spindle.hal, gc_state.modal.spindle.state, pl_data->spindle.rpm);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	691a      	ldr	r2, [r3, #16]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	edd3 7a01 	vldr	s15, [r3, #4]
 800e316:	4b4f      	ldr	r3, [pc, #316]	; (800e454 <mc_canned_drill+0x38c>)
 800e318:	eeb0 0a67 	vmov.f32	s0, s15
 800e31c:	7e99      	ldrb	r1, [r3, #26]
 800e31e:	4610      	mov	r0, r2
 800e320:	f00d ffe6 	bl	801c2f0 <spindle_sync>
        while(current_z > canned->xyz[plane.axis_linear]) {
 800e324:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	4413      	add	r3, r2
 800e32e:	edd3 7a00 	vldr	s15, [r3]
 800e332:	ed97 7a05 	vldr	s14, [r7, #20]
 800e336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33e:	f73f af48 	bgt.w	800e1d2 <mc_canned_drill+0x10a>
        }

       // rapid move to next position if incremental mode
        if(repeats && gc_state.modal.distance_incremental) {
 800e342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e344:	2b00      	cmp	r3, #0
 800e346:	d03b      	beq.n	800e3c0 <mc_canned_drill+0x2f8>
 800e348:	4b42      	ldr	r3, [pc, #264]	; (800e454 <mc_canned_drill+0x38c>)
 800e34a:	791b      	ldrb	r3, [r3, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d037      	beq.n	800e3c0 <mc_canned_drill+0x2f8>
            position[plane.axis_0] += canned->xyz[plane.axis_0];
 800e350:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	4413      	add	r3, r2
 800e35a:	ed93 7a00 	vldr	s14, [r3]
 800e35e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	edd3 7a00 	vldr	s15, [r3]
 800e36c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	683a      	ldr	r2, [r7, #0]
 800e374:	4413      	add	r3, r2
 800e376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e37a:	edc3 7a00 	vstr	s15, [r3]
            position[plane.axis_1] += canned->xyz[plane.axis_1];
 800e37e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	4413      	add	r3, r2
 800e388:	ed93 7a00 	vldr	s14, [r3]
 800e38c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	edd3 7a00 	vldr	s15, [r3]
 800e39a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	683a      	ldr	r2, [r7, #0]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3a8:	edc3 7a00 	vstr	s15, [r3]
            if(!mc_line(position, pl_data))
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	6838      	ldr	r0, [r7, #0]
 800e3b0:	f7ff f804 	bl	800d3bc <mc_line>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	f083 0301 	eor.w	r3, r3, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d141      	bne.n	800e444 <mc_canned_drill+0x37c>
    while(repeats--) {
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	1e5a      	subs	r2, r3, #1
 800e3c4:	627a      	str	r2, [r7, #36]	; 0x24
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f47f aeff 	bne.w	800e1ca <mc_canned_drill+0x102>
                return;
        }
    }

    memcpy(target, position, sizeof(float) * N_AXIS);
 800e3cc:	220c      	movs	r2, #12
 800e3ce:	6839      	ldr	r1, [r7, #0]
 800e3d0:	68b8      	ldr	r0, [r7, #8]
 800e3d2:	f017 fe91 	bl	80260f8 <memcpy>

    if(canned->retract_mode == CCRetractMode_Previous && motion != MotionMode_DrillChipBreak && target[plane.axis_linear] < canned->prev_position) {
 800e3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d8:	7f9b      	ldrb	r3, [r3, #30]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d133      	bne.n	800e446 <mc_canned_drill+0x37e>
 800e3de:	89fb      	ldrh	r3, [r7, #14]
 800e3e0:	2b49      	cmp	r3, #73	; 0x49
 800e3e2:	d030      	beq.n	800e446 <mc_canned_drill+0x37e>
 800e3e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	68ba      	ldr	r2, [r7, #8]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	ed93 7a00 	vldr	s14, [r3]
 800e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f4:	edd3 7a05 	vldr	s15, [r3, #20]
 800e3f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	d521      	bpl.n	800e446 <mc_canned_drill+0x37e>
        pl_data->condition.rapid_motion = On;
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	7d13      	ldrb	r3, [r2, #20]
 800e406:	f043 0301 	orr.w	r3, r3, #1
 800e40a:	7513      	strb	r3, [r2, #20]
        target[plane.axis_linear] = canned->prev_position;
 800e40c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	4413      	add	r3, r2
 800e416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e418:	6952      	ldr	r2, [r2, #20]
 800e41a:	601a      	str	r2, [r3, #0]
        if(!mc_line(target, pl_data))
 800e41c:	6879      	ldr	r1, [r7, #4]
 800e41e:	68b8      	ldr	r0, [r7, #8]
 800e420:	f7fe ffcc 	bl	800d3bc <mc_line>
 800e424:	4603      	mov	r3, r0
 800e426:	f083 0301 	eor.w	r3, r3, #1
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	e00a      	b.n	800e446 <mc_canned_drill+0x37e>
            return;
 800e430:	bf00      	nop
 800e432:	e008      	b.n	800e446 <mc_canned_drill+0x37e>
        return;
 800e434:	bf00      	nop
 800e436:	e006      	b.n	800e446 <mc_canned_drill+0x37e>
            return;
 800e438:	bf00      	nop
 800e43a:	e004      	b.n	800e446 <mc_canned_drill+0x37e>
                return;
 800e43c:	bf00      	nop
 800e43e:	e002      	b.n	800e446 <mc_canned_drill+0x37e>
                return;
 800e440:	bf00      	nop
 800e442:	e000      	b.n	800e446 <mc_canned_drill+0x37e>
                return;
 800e444:	bf00      	nop
            return;
    }
}
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	00000000 	.word	0x00000000
 800e450:	20001cf0 	.word	0x20001cf0
 800e454:	2000137c 	.word	0x2000137c

0800e458 <calc_thread_doc>:

// Calculates depth-of-cut (DOC) for a given threading pass.
inline static float calc_thread_doc (uint_fast16_t pass, float cut_depth, float inv_degression)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	ed87 0a02 	vstr	s0, [r7, #8]
 800e464:	edc7 0a01 	vstr	s1, [r7, #4]
    return cut_depth * powf((float)pass, inv_degression);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	ee07 3a90 	vmov	s15, r3
 800e46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e472:	edd7 0a01 	vldr	s1, [r7, #4]
 800e476:	eeb0 0a67 	vmov.f32	s0, s15
 800e47a:	f018 fbc1 	bl	8026c00 <powf>
 800e47e:	eeb0 7a40 	vmov.f32	s14, s0
 800e482:	edd7 7a02 	vldr	s15, [r7, #8]
 800e486:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800e48a:	eeb0 0a67 	vmov.f32	s0, s15
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <mc_thread>:
// R - depth regression, Q - compound slide angle, H - spring passes, E - taper, L - taper end

// TODO: change pitch to follow any tapers

void mc_thread (plan_line_data_t *pl_data, float *position, gc_thread_data *thread, bool feed_hold_disabled)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b090      	sub	sp, #64	; 0x40
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
 800e4a0:	70fb      	strb	r3, [r7, #3]
    uint_fast16_t pass = 1, passes = 0;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	63bb      	str	r3, [r7, #56]	; 0x38
    float doc = thread->initial_depth, inv_degression = 1.0f / thread->depth_degression, thread_length;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	637b      	str	r3, [r7, #52]	; 0x34
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	ed93 7a05 	vldr	s14, [r3, #20]
 800e4b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float entry_taper_length = thread->end_taper_type & Taper_Entry ? thread->end_taper_length : 0.0f;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <mc_thread+0x42>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	69db      	ldr	r3, [r3, #28]
 800e4d4:	e001      	b.n	800e4da <mc_thread+0x46>
 800e4d6:	f04f 0300 	mov.w	r3, #0
 800e4da:	633b      	str	r3, [r7, #48]	; 0x30
    float exit_taper_length = thread->end_taper_type & Taper_Exit ? thread->end_taper_length : 0.0f;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e4e2:	f003 0302 	and.w	r3, r3, #2
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d002      	beq.n	800e4f0 <mc_thread+0x5c>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	69db      	ldr	r3, [r3, #28]
 800e4ee:	e001      	b.n	800e4f4 <mc_thread+0x60>
 800e4f0:	f04f 0300 	mov.w	r3, #0
 800e4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    float infeed_factor = tanf(thread->infeed_angle * RADDEG);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	edd3 7a08 	vldr	s15, [r3, #32]
 800e4fc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800e6ac <mc_thread+0x218>
 800e500:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e504:	eeb0 0a67 	vmov.f32	s0, s15
 800e508:	f018 fc7a 	bl	8026e00 <tanf>
 800e50c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float target[N_AXIS], start_z = position[Z_AXIS] + thread->depth * infeed_factor;
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	3308      	adds	r3, #8
 800e514:	ed93 7a00 	vldr	s14, [r3]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	edd3 6a04 	vldr	s13, [r3, #16]
 800e51e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e52a:	edc7 7a08 	vstr	s15, [r7, #32]

    memcpy(target, position, sizeof(float) * N_AXIS);
 800e52e:	f107 0310 	add.w	r3, r7, #16
 800e532:	220c      	movs	r2, #12
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	4618      	mov	r0, r3
 800e538:	f017 fdde 	bl	80260f8 <memcpy>

    // Calculate number of passes
    while(calc_thread_doc(++passes, doc, inv_degression) < thread->depth);
 800e53c:	bf00      	nop
 800e53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e540:	3301      	adds	r3, #1
 800e542:	63bb      	str	r3, [r7, #56]	; 0x38
 800e544:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800e548:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800e54c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e54e:	f7ff ff83 	bl	800e458 <calc_thread_doc>
 800e552:	eeb0 7a40 	vmov.f32	s14, s0
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	edd3 7a04 	vldr	s15, [r3, #16]
 800e55c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e564:	d4eb      	bmi.n	800e53e <mc_thread+0xaa>

    passes += thread->spring_passes + 1;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	4413      	add	r3, r2
 800e56e:	3301      	adds	r3, #1
 800e570:	63bb      	str	r3, [r7, #56]	; 0x38

    if((thread_length = thread->z_final - position[Z_AXIS]) > 0.0f) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	ed93 7a01 	vldr	s14, [r3, #4]
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	3308      	adds	r3, #8
 800e57c:	edd3 7a00 	vldr	s15, [r3]
 800e580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e584:	edc7 7a07 	vstr	s15, [r7, #28]
 800e588:	edd7 7a07 	vldr	s15, [r7, #28]
 800e58c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e594:	dd19      	ble.n	800e5ca <mc_thread+0x136>
        if(thread->end_taper_type & Taper_Entry)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d005      	beq.n	800e5b0 <mc_thread+0x11c>
            entry_taper_length = -entry_taper_length;
 800e5a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e5a8:	eef1 7a67 	vneg.f32	s15, s15
 800e5ac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        if(thread->end_taper_type & Taper_Exit)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e5b6:	f003 0302 	and.w	r3, r3, #2
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d005      	beq.n	800e5ca <mc_thread+0x136>
            exit_taper_length = - exit_taper_length;
 800e5be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e5c2:	eef1 7a67 	vneg.f32	s15, s15
 800e5c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }

    thread_length += entry_taper_length + exit_taper_length;
 800e5ca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e5ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e5d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5d6:	ed97 7a07 	vldr	s14, [r7, #28]
 800e5da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5de:	edc7 7a07 	vstr	s15, [r7, #28]

    if(thread->main_taper_height != 0.0f)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	edd3 7a06 	vldr	s15, [r3, #24]
 800e5e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5f0:	d015      	beq.n	800e61e <mc_thread+0x18a>
        thread->main_taper_height = thread->main_taper_height * thread_length / (thread_length - (entry_taper_length + exit_taper_length));
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	ed93 7a06 	vldr	s14, [r3, #24]
 800e5f8:	edd7 7a07 	vldr	s15, [r7, #28]
 800e5fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e600:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e604:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e60c:	ed97 7a07 	vldr	s14, [r7, #28]
 800e610:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	edc3 7a06 	vstr	s15, [r3, #24]

    pl_data->condition.rapid_motion = On; // Set rapid motion condition flag.
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	7d13      	ldrb	r3, [r2, #20]
 800e622:	f043 0301 	orr.w	r3, r3, #1
 800e626:	7513      	strb	r3, [r2, #20]
    float acc_distance = pl_data->feed_rate * pl_data->spindle.hal->get_data(SpindleData_RPM)->rpm / settings.acceleration[Z_AXIS];
    acc_distance = acc_distance * acc_distance * settings.acceleration[Z_AXIS] * 0.5f;
     */

    // Initial Z-move for compound slide angle offset.
    if(infeed_factor != 0.0f) {
 800e628:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e62c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e634:	f000 8169 	beq.w	800e90a <mc_thread+0x476>
        target[Z_AXIS] = start_z - doc * infeed_factor;
 800e638:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e63c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e640:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e644:	ed97 7a08 	vldr	s14, [r7, #32]
 800e648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e64c:	edc7 7a06 	vstr	s15, [r7, #24]
        if(!mc_line(target, pl_data))
 800e650:	f107 0310 	add.w	r3, r7, #16
 800e654:	68f9      	ldr	r1, [r7, #12]
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe feb0 	bl	800d3bc <mc_line>
 800e65c:	4603      	mov	r3, r0
 800e65e:	f083 0301 	eor.w	r3, r3, #1
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b00      	cmp	r3, #0
 800e666:	f040 8158 	bne.w	800e91a <mc_thread+0x486>
            return;
    }

    while(--passes) {
 800e66a:	e14e      	b.n	800e90a <mc_thread+0x476>

        if(thread->end_taper_type & Taper_Entry)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e672:	f003 0301 	and.w	r3, r3, #1
 800e676:	2b00      	cmp	r3, #0
 800e678:	d01c      	beq.n	800e6b4 <mc_thread+0x220>
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc - thread->depth) * thread->cut_direction;
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	ed93 7a00 	vldr	s14, [r3]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	edd3 6a02 	vldr	s13, [r3, #8]
 800e686:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e68a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	edd3 7a04 	vldr	s15, [r3, #16]
 800e694:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e69e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6a6:	edc7 7a04 	vstr	s15, [r7, #16]
 800e6aa:	e016      	b.n	800e6da <mc_thread+0x246>
 800e6ac:	3c8efa35 	.word	0x3c8efa35
 800e6b0:	00000000 	.word	0x00000000
        else
            target[X_AXIS] = position[X_AXIS] + (thread->peak + doc) * thread->cut_direction;
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	ed93 7a00 	vldr	s14, [r3]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	edd3 6a02 	vldr	s13, [r3, #8]
 800e6c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e6c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e6ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6d6:	edc7 7a04 	vstr	s15, [r7, #16]

        if(!mc_line(target, pl_data))
 800e6da:	f107 0310 	add.w	r3, r7, #16
 800e6de:	68f9      	ldr	r1, [r7, #12]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fe fe6b 	bl	800d3bc <mc_line>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	f083 0301 	eor.w	r3, r3, #1
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	f040 8115 	bne.w	800e91e <mc_thread+0x48a>
            return;

        if(!protocol_buffer_synchronize() && state_get() != STATE_IDLE) // Wait until any previous moves are finished.
 800e6f4:	f004 f846 	bl	8012784 <protocol_buffer_synchronize>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	f083 0301 	eor.w	r3, r3, #1
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	2b00      	cmp	r3, #0
 800e702:	d005      	beq.n	800e710 <mc_thread+0x27c>
 800e704:	f00e fb0c 	bl	801cd20 <state_get>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f040 8109 	bne.w	800e922 <mc_thread+0x48e>
            return;

        pl_data->condition.rapid_motion = Off;      // Clear rapid motion condition flag,
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	7d13      	ldrb	r3, [r2, #20]
 800e714:	f36f 0300 	bfc	r3, #0, #1
 800e718:	7513      	strb	r3, [r2, #20]
        pl_data->spindle.state.synchronized = On;   // enable spindle sync for cut
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	7a13      	ldrb	r3, [r2, #8]
 800e71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e722:	7213      	strb	r3, [r2, #8]
        pl_data->overrides.feed_hold_disable = On;  // and disable feed hold
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	7e13      	ldrb	r3, [r2, #24]
 800e728:	f043 0302 	orr.w	r3, r3, #2
 800e72c:	7613      	strb	r3, [r2, #24]

        // Cut thread pass

        // 1. Entry taper
        if(thread->end_taper_type & Taper_Entry) {
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e734:	f003 0301 	and.w	r3, r3, #1
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d022      	beq.n	800e782 <mc_thread+0x2ee>

            target[X_AXIS] += thread->depth * thread->cut_direction;
 800e73c:	ed97 7a04 	vldr	s14, [r7, #16]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	edd3 6a04 	vldr	s13, [r3, #16]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e74c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e750:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e754:	edc7 7a04 	vstr	s15, [r7, #16]
            target[Z_AXIS] -= entry_taper_length;
 800e758:	ed97 7a06 	vldr	s14, [r7, #24]
 800e75c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800e760:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e764:	edc7 7a06 	vstr	s15, [r7, #24]
            if(!mc_line(target, pl_data))
 800e768:	f107 0310 	add.w	r3, r7, #16
 800e76c:	68f9      	ldr	r1, [r7, #12]
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fe24 	bl	800d3bc <mc_line>
 800e774:	4603      	mov	r3, r0
 800e776:	f083 0301 	eor.w	r3, r3, #1
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f040 80d2 	bne.w	800e926 <mc_thread+0x492>
                return;
        }

        // 2. Main part
        target[Z_AXIS] += thread_length;
 800e782:	ed97 7a06 	vldr	s14, [r7, #24]
 800e786:	edd7 7a07 	vldr	s15, [r7, #28]
 800e78a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e78e:	edc7 7a06 	vstr	s15, [r7, #24]
        if(!mc_line(target, pl_data))
 800e792:	f107 0310 	add.w	r3, r7, #16
 800e796:	68f9      	ldr	r1, [r7, #12]
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fe fe0f 	bl	800d3bc <mc_line>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	f083 0301 	eor.w	r3, r3, #1
 800e7a4:	b2db      	uxtb	r3, r3
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	f040 80bf 	bne.w	800e92a <mc_thread+0x496>
            return;

        // 3. Exit taper
        if(thread->end_taper_type & Taper_Exit) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e7b2:	f003 0302 	and.w	r3, r3, #2
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d022      	beq.n	800e800 <mc_thread+0x36c>

            target[X_AXIS] -= thread->depth * thread->cut_direction;
 800e7ba:	ed97 7a04 	vldr	s14, [r7, #16]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	edd3 6a04 	vldr	s13, [r3, #16]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e7ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7d2:	edc7 7a04 	vstr	s15, [r7, #16]
            target[Z_AXIS] -= exit_taper_length;
 800e7d6:	ed97 7a06 	vldr	s14, [r7, #24]
 800e7da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e7de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7e2:	edc7 7a06 	vstr	s15, [r7, #24]
            if(!mc_line(target, pl_data))
 800e7e6:	f107 0310 	add.w	r3, r7, #16
 800e7ea:	68f9      	ldr	r1, [r7, #12]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fe fde5 	bl	800d3bc <mc_line>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	f083 0301 	eor.w	r3, r3, #1
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f040 8097 	bne.w	800e92e <mc_thread+0x49a>
                return;
        }

        pl_data->condition.rapid_motion = On;       // Set rapid motion condition flag and
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	7d13      	ldrb	r3, [r2, #20]
 800e804:	f043 0301 	orr.w	r3, r3, #1
 800e808:	7513      	strb	r3, [r2, #20]
        pl_data->spindle.state.synchronized = Off;  // disable spindle sync for retract & reposition
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	7a13      	ldrb	r3, [r2, #8]
 800e80e:	f36f 13c7 	bfc	r3, #7, #1
 800e812:	7213      	strb	r3, [r2, #8]

        if(passes > 1) {
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	2b01      	cmp	r3, #1
 800e818:	d965      	bls.n	800e8e6 <mc_thread+0x452>

            // Get DOC of next pass.
            doc = calc_thread_doc(++pass, thread->initial_depth, inv_degression);
 800e81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e81c:	3301      	adds	r3, #1
 800e81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	edd3 7a03 	vldr	s15, [r3, #12]
 800e826:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800e82a:	eeb0 0a67 	vmov.f32	s0, s15
 800e82e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e830:	f7ff fe12 	bl	800e458 <calc_thread_doc>
 800e834:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            doc = min(doc, thread->depth);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	edd3 7a04 	vldr	s15, [r3, #16]
 800e83e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84a:	d501      	bpl.n	800e850 <mc_thread+0x3bc>
 800e84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e84e:	e001      	b.n	800e854 <mc_thread+0x3c0>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	691b      	ldr	r3, [r3, #16]
 800e854:	637b      	str	r3, [r7, #52]	; 0x34

            // 4. Retract
            target[X_AXIS] = position[X_AXIS] + (doc - thread->depth) * thread->cut_direction;
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	ed93 7a00 	vldr	s14, [r3]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	edd3 7a04 	vldr	s15, [r3, #16]
 800e862:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800e866:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e874:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e878:	edc7 7a04 	vstr	s15, [r7, #16]
            if(!mc_line(target, pl_data))
 800e87c:	f107 0310 	add.w	r3, r7, #16
 800e880:	68f9      	ldr	r1, [r7, #12]
 800e882:	4618      	mov	r0, r3
 800e884:	f7fe fd9a 	bl	800d3bc <mc_line>
 800e888:	4603      	mov	r3, r0
 800e88a:	f083 0301 	eor.w	r3, r3, #1
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	2b00      	cmp	r3, #0
 800e892:	d14e      	bne.n	800e932 <mc_thread+0x49e>
                return;

            // Restore disable feed hold status for reposition move.
            pl_data->overrides.feed_hold_disable = feed_hold_disabled;
 800e894:	68fa      	ldr	r2, [r7, #12]
 800e896:	7e13      	ldrb	r3, [r2, #24]
 800e898:	78f9      	ldrb	r1, [r7, #3]
 800e89a:	f361 0341 	bfi	r3, r1, #1, #1
 800e89e:	7613      	strb	r3, [r2, #24]

            // 5. Back to start, add compound slide angle offset when commanded.
            target[Z_AXIS] = start_z - (infeed_factor != 0.0f ? doc * infeed_factor : 0.0f);
 800e8a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e8a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ac:	d006      	beq.n	800e8bc <mc_thread+0x428>
 800e8ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e8b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800e8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ba:	e001      	b.n	800e8c0 <mc_thread+0x42c>
 800e8bc:	ed5f 7a84 	vldr	s15, [pc, #-528]	; 800e6b0 <mc_thread+0x21c>
 800e8c0:	ed97 7a08 	vldr	s14, [r7, #32]
 800e8c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e8c8:	edc7 7a06 	vstr	s15, [r7, #24]
            if(!mc_line(target, pl_data))
 800e8cc:	f107 0310 	add.w	r3, r7, #16
 800e8d0:	68f9      	ldr	r1, [r7, #12]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fd72 	bl	800d3bc <mc_line>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	f083 0301 	eor.w	r3, r3, #1
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d012      	beq.n	800e90a <mc_thread+0x476>
                return;
 800e8e4:	e028      	b.n	800e938 <mc_thread+0x4a4>

        } else {

            doc = thread->depth;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	691b      	ldr	r3, [r3, #16]
 800e8ea:	637b      	str	r3, [r7, #52]	; 0x34
            target[X_AXIS] = position[X_AXIS];
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	613b      	str	r3, [r7, #16]
            if(!mc_line(target, pl_data))
 800e8f2:	f107 0310 	add.w	r3, r7, #16
 800e8f6:	68f9      	ldr	r1, [r7, #12]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fe fd5f 	bl	800d3bc <mc_line>
 800e8fe:	4603      	mov	r3, r0
 800e900:	f083 0301 	eor.w	r3, r3, #1
 800e904:	b2db      	uxtb	r3, r3
 800e906:	2b00      	cmp	r3, #0
 800e908:	d115      	bne.n	800e936 <mc_thread+0x4a2>
    while(--passes) {
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	3b01      	subs	r3, #1
 800e90e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e912:	2b00      	cmp	r3, #0
 800e914:	f47f aeaa 	bne.w	800e66c <mc_thread+0x1d8>
 800e918:	e00e      	b.n	800e938 <mc_thread+0x4a4>
            return;
 800e91a:	bf00      	nop
 800e91c:	e00c      	b.n	800e938 <mc_thread+0x4a4>
            return;
 800e91e:	bf00      	nop
 800e920:	e00a      	b.n	800e938 <mc_thread+0x4a4>
            return;
 800e922:	bf00      	nop
 800e924:	e008      	b.n	800e938 <mc_thread+0x4a4>
                return;
 800e926:	bf00      	nop
 800e928:	e006      	b.n	800e938 <mc_thread+0x4a4>
            return;
 800e92a:	bf00      	nop
 800e92c:	e004      	b.n	800e938 <mc_thread+0x4a4>
                return;
 800e92e:	bf00      	nop
 800e930:	e002      	b.n	800e938 <mc_thread+0x4a4>
                return;
 800e932:	bf00      	nop
 800e934:	e000      	b.n	800e938 <mc_thread+0x4a4>
                return;
 800e936:	bf00      	nop
        }
    }
}
 800e938:	3740      	adds	r7, #64	; 0x40
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop

0800e940 <mc_jog_execute>:

// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
status_code_t mc_jog_execute (plan_line_data_t *pl_data, parser_block_t *gc_block, float *position)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
    // Initialize planner data struct for jogging motions.
    // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
    pl_data->feed_rate = gc_block->values.f;
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	601a      	str	r2, [r3, #0]
    pl_data->condition.no_feed_override =
    pl_data->condition.jog_motion =
    pl_data->condition.target_valid =
    pl_data->condition.target_validated = On;
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	7d53      	ldrb	r3, [r2, #21]
 800e958:	f043 0302 	orr.w	r3, r3, #2
 800e95c:	7553      	strb	r3, [r2, #21]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	7d5b      	ldrb	r3, [r3, #21]
 800e962:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e966:	b2d9      	uxtb	r1, r3
    pl_data->condition.target_valid =
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	7d53      	ldrb	r3, [r2, #21]
 800e96c:	f361 0300 	bfi	r3, r1, #0, #1
 800e970:	7553      	strb	r3, [r2, #21]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	7d5b      	ldrb	r3, [r3, #21]
 800e976:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e97a:	b2d9      	uxtb	r1, r3
    pl_data->condition.jog_motion =
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	7d13      	ldrb	r3, [r2, #20]
 800e980:	f361 0382 	bfi	r3, r1, #2, #1
 800e984:	7513      	strb	r3, [r2, #20]
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	7d1b      	ldrb	r3, [r3, #20]
 800e98a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e98e:	b2d9      	uxtb	r1, r3
    pl_data->condition.no_feed_override =
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	7d13      	ldrb	r3, [r2, #20]
 800e994:	f361 1304 	bfi	r3, r1, #4, #1
 800e998:	7513      	strb	r3, [r2, #20]
    pl_data->line_number = gc_block->values.n;
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	61da      	str	r2, [r3, #28]

    if(settings.limits.flags.jog_soft_limited)
 800e9a4:	4b24      	ldr	r3, [pc, #144]	; (800ea38 <mc_jog_execute+0xf8>)
 800e9a6:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800e9aa:	f003 0308 	and.w	r3, r3, #8
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d008      	beq.n	800e9c6 <mc_jog_execute+0x86>
        grbl.apply_jog_limits(gc_block->values.xyz, position);
 800e9b4:	4b21      	ldr	r3, [pc, #132]	; (800ea3c <mc_jog_execute+0xfc>)
 800e9b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	3260      	adds	r2, #96	; 0x60
 800e9be:	6879      	ldr	r1, [r7, #4]
 800e9c0:	4610      	mov	r0, r2
 800e9c2:	4798      	blx	r3
 800e9c4:	e017      	b.n	800e9f6 <mc_jog_execute+0xb6>
    else if(sys.soft_limits.mask && !grbl.check_travel_limits(gc_block->values.xyz, sys.soft_limits, true))
 800e9c6:	4b1e      	ldr	r3, [pc, #120]	; (800ea40 <mc_jog_execute+0x100>)
 800e9c8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d012      	beq.n	800e9f6 <mc_jog_execute+0xb6>
 800e9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ea3c <mc_jog_execute+0xfc>)
 800e9d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e9d6:	68ba      	ldr	r2, [r7, #8]
 800e9d8:	f102 0060 	add.w	r0, r2, #96	; 0x60
 800e9dc:	4918      	ldr	r1, [pc, #96]	; (800ea40 <mc_jog_execute+0x100>)
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f891 1095 	ldrb.w	r1, [r1, #149]	; 0x95
 800e9e4:	4798      	blx	r3
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	f083 0301 	eor.w	r3, r3, #1
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <mc_jog_execute+0xb6>
        return Status_TravelExceeded;
 800e9f2:	230f      	movs	r3, #15
 800e9f4:	e01c      	b.n	800ea30 <mc_jog_execute+0xf0>

    // Valid jog command. Plan, set state, and execute.
    mc_line(gc_block->values.xyz, pl_data);
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	3360      	adds	r3, #96	; 0x60
 800e9fa:	68f9      	ldr	r1, [r7, #12]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fe fcdd 	bl	800d3bc <mc_line>

#ifndef KINEMATICS_API // kinematics may segment long jog moves triggering auto start (RUN)...
    sys_state_t state = state_get();
 800ea02:	f00e f98d 	bl	801cd20 <state_get>
 800ea06:	6178      	str	r0, [r7, #20]
    if ((state == STATE_IDLE || state == STATE_TOOL_CHANGE) && plan_get_current_block() != NULL) { // Check if there is a block to execute.
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d003      	beq.n	800ea16 <mc_jog_execute+0xd6>
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea14:	d10b      	bne.n	800ea2e <mc_jog_execute+0xee>
 800ea16:	f002 fcbd 	bl	8011394 <plan_get_current_block>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d006      	beq.n	800ea2e <mc_jog_execute+0xee>
        state_set(STATE_JOG);
 800ea20:	2020      	movs	r0, #32
 800ea22:	f00e f989 	bl	801cd38 <state_set>
        st_prep_buffer();
 800ea26:	f00f fe69 	bl	801e6fc <st_prep_buffer>
        st_wake_up();  // NOTE: Manual start. No state machine required.
 800ea2a:	f00f fa4b 	bl	801dec4 <st_wake_up>
    }
#endif

    return Status_OK;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3718      	adds	r7, #24
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	20001cf0 	.word	0x20001cf0
 800ea3c:	200015b8 	.word	0x200015b8
 800ea40:	20001520 	.word	0x20001520

0800ea44 <mc_dwell>:

// Execute dwell in seconds.
void mc_dwell (float seconds)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (state_get() != STATE_CHECK_MODE) {
 800ea4e:	f00e f967 	bl	801cd20 <state_get>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	d006      	beq.n	800ea66 <mc_dwell+0x22>
        protocol_buffer_synchronize();
 800ea58:	f003 fe94 	bl	8012784 <protocol_buffer_synchronize>
        delay_sec(seconds, DelayMode_Dwell);
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	ed97 0a01 	vldr	s0, [r7, #4]
 800ea62:	f001 fbef 	bl	8010244 <delay_sec>
    }
}
 800ea66:	bf00      	nop
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
	...

0800ea70 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
status_code_t mc_homing_cycle (axes_signals_t cycle)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b088      	sub	sp, #32
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	7138      	strb	r0, [r7, #4]
    bool home_all = cycle.mask == 0;
 800ea78:	793b      	ldrb	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	bf0c      	ite	eq
 800ea7e:	2301      	moveq	r3, #1
 800ea80:	2300      	movne	r3, #0
 800ea82:	75fb      	strb	r3, [r7, #23]
    status_code_t homed_status = Status_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	77fb      	strb	r3, [r7, #31]

    memset(&sys.last_event.limits, 0, sizeof(limit_signals_t));
 800ea88:	2204      	movs	r2, #4
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	489c      	ldr	r0, [pc, #624]	; (800ed00 <mc_homing_cycle+0x290>)
 800ea8e:	f017 f9d6 	bl	8025e3e <memset>

    if(settings.homing.flags.manual && (home_all ? sys.homing.mask : (cycle.mask & sys.homing.mask)) == 0) {
 800ea92:	4b9c      	ldr	r3, [pc, #624]	; (800ed04 <mc_homing_cycle+0x294>)
 800ea94:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800ea98:	f003 0310 	and.w	r3, r3, #16
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d024      	beq.n	800eaec <mc_homing_cycle+0x7c>
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d004      	beq.n	800eab2 <mc_homing_cycle+0x42>
 800eaa8:	4b97      	ldr	r3, [pc, #604]	; (800ed08 <mc_homing_cycle+0x298>)
 800eaaa:	7e9b      	ldrb	r3, [r3, #26]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d007      	beq.n	800eac0 <mc_homing_cycle+0x50>
 800eab0:	e01c      	b.n	800eaec <mc_homing_cycle+0x7c>
 800eab2:	793a      	ldrb	r2, [r7, #4]
 800eab4:	4b94      	ldr	r3, [pc, #592]	; (800ed08 <mc_homing_cycle+0x298>)
 800eab6:	7e9b      	ldrb	r3, [r3, #26]
 800eab8:	4013      	ands	r3, r2
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d115      	bne.n	800eaec <mc_homing_cycle+0x7c>

        if(home_all)
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <mc_homing_cycle+0x5a>
            cycle.mask = AXES_BITMASK;
 800eac6:	2307      	movs	r3, #7
 800eac8:	713b      	strb	r3, [r7, #4]

        tc_clear_tlo_reference(cycle);
 800eaca:	7938      	ldrb	r0, [r7, #4]
 800eacc:	f013 fb3a 	bl	8022144 <tc_clear_tlo_reference>

        sys.homed.mask |= cycle.mask;
 800ead0:	4b8d      	ldr	r3, [pc, #564]	; (800ed08 <mc_homing_cycle+0x298>)
 800ead2:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800ead6:	793b      	ldrb	r3, [r7, #4]
 800ead8:	4313      	orrs	r3, r2
 800eada:	b2da      	uxtb	r2, r3
 800eadc:	4b8a      	ldr	r3, [pc, #552]	; (800ed08 <mc_homing_cycle+0x298>)
 800eade:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#ifdef KINEMATICS_API
        kinematics.limits_set_machine_positions(cycle);
#else
        limits_set_machine_positions(cycle, false);
 800eae2:	2100      	movs	r1, #0
 800eae4:	7938      	ldrb	r0, [r7, #4]
 800eae6:	f7fd f847 	bl	800bb78 <limits_set_machine_positions>
 800eaea:	e094      	b.n	800ec16 <mc_homing_cycle+0x1a6>
#endif
    } else {

        if(settings.homing.seek_rate <= 0.0f)
 800eaec:	4b85      	ldr	r3, [pc, #532]	; (800ed04 <mc_homing_cycle+0x294>)
 800eaee:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 800eaf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafa:	d801      	bhi.n	800eb00 <mc_homing_cycle+0x90>
            return Status_HomingDisabled;
 800eafc:	2305      	movs	r3, #5
 800eafe:	e12b      	b.n	800ed58 <mc_homing_cycle+0x2e8>

        // Check and abort homing cycle, if hard limits are already enabled. Helps prevent problems
        // with machines with limits wired on both ends of travel to one limit pin.
        // TODO: Move the pin-specific LIMIT_BIT call to limits.c as a function.
        if (settings.limits.flags.two_switches && hal.home_cap.a.mask == 0 && limit_signals_merge(hal.limits.get_state()).value) {
 800eb00:	4b80      	ldr	r3, [pc, #512]	; (800ed04 <mc_homing_cycle+0x294>)
 800eb02:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800eb06:	f003 0310 	and.w	r3, r3, #16
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d019      	beq.n	800eb44 <mc_homing_cycle+0xd4>
 800eb10:	4b7e      	ldr	r3, [pc, #504]	; (800ed0c <mc_homing_cycle+0x29c>)
 800eb12:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d114      	bne.n	800eb44 <mc_homing_cycle+0xd4>
 800eb1a:	4b7c      	ldr	r3, [pc, #496]	; (800ed0c <mc_homing_cycle+0x29c>)
 800eb1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb1e:	4798      	blx	r3
 800eb20:	4603      	mov	r3, r0
 800eb22:	60fb      	str	r3, [r7, #12]
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f7fc feef 	bl	800b908 <limit_signals_merge>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d008      	beq.n	800eb44 <mc_homing_cycle+0xd4>
            mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 800eb32:	f000 fadd 	bl	800f0f0 <mc_reset>
            system_set_exec_alarm(Alarm_HardLimit);
 800eb36:	4b75      	ldr	r3, [pc, #468]	; (800ed0c <mc_homing_cycle+0x29c>)
 800eb38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb3a:	2101      	movs	r1, #1
 800eb3c:	4874      	ldr	r0, [pc, #464]	; (800ed10 <mc_homing_cycle+0x2a0>)
 800eb3e:	4798      	blx	r3
            return Status_Unhandled;
 800eb40:	2354      	movs	r3, #84	; 0x54
 800eb42:	e109      	b.n	800ed58 <mc_homing_cycle+0x2e8>
            } while(idx);

        }
#endif

        state_set(STATE_HOMING);                        // Set homing system state.
 800eb44:	2004      	movs	r0, #4
 800eb46:	f00e f8f7 	bl	801cd38 <state_set>
#if COMPATIBILITY_LEVEL == 0
        system_set_exec_state_flag(EXEC_STATUS_REPORT); // Force a status report and
 800eb4a:	4b70      	ldr	r3, [pc, #448]	; (800ed0c <mc_homing_cycle+0x29c>)
 800eb4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb4e:	2101      	movs	r1, #1
 800eb50:	4870      	ldr	r0, [pc, #448]	; (800ed14 <mc_homing_cycle+0x2a4>)
 800eb52:	4798      	blx	r3
        delay_sec(0.1f, DelayMode_Dwell);               // delay a bit to get it sent (or perhaps wait a bit for a request?)
 800eb54:	2000      	movs	r0, #0
 800eb56:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800ed18 <mc_homing_cycle+0x2a8>
 800eb5a:	f001 fb73 	bl	8010244 <delay_sec>
#endif
        // Turn off spindle and coolant (and update parser state)
        if(spindle_is_on())
 800eb5e:	f00d fd6f 	bl	801c640 <spindle_is_on>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d001      	beq.n	800eb6c <mc_homing_cycle+0xfc>
            gc_spindle_off();
 800eb68:	f7f6 feb4 	bl	80058d4 <gc_spindle_off>

        if(hal.coolant.get_state().mask)
 800eb6c:	4b67      	ldr	r3, [pc, #412]	; (800ed0c <mc_homing_cycle+0x29c>)
 800eb6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb70:	4798      	blx	r3
 800eb72:	4603      	mov	r3, r0
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <mc_homing_cycle+0x10e>
            gc_coolant_off();
 800eb7a:	f7f6 febd 	bl	80058f8 <gc_coolant_off>

        // ---------------------------------------------------------------------------
        // Perform homing routine. NOTE: Special motion case. Only system reset works.

        if (!home_all) // Perform homing cycle based on mask.
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
 800eb80:	f083 0301 	eor.w	r3, r3, #1
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d005      	beq.n	800eb96 <mc_homing_cycle+0x126>
            homed_status = limits_go_home(cycle);
 800eb8a:	7938      	ldrb	r0, [r7, #4]
 800eb8c:	f7fd fd0a 	bl	800c5a4 <limits_go_home>
 800eb90:	4603      	mov	r3, r0
 800eb92:	77fb      	strb	r3, [r7, #31]
 800eb94:	e02f      	b.n	800ebf6 <mc_homing_cycle+0x186>
        else {

            uint_fast8_t idx = 0;
 800eb96:	2300      	movs	r3, #0
 800eb98:	61bb      	str	r3, [r7, #24]

            sys.homed.mask &= ~sys.homing.mask;
 800eb9a:	4b5b      	ldr	r3, [pc, #364]	; (800ed08 <mc_homing_cycle+0x298>)
 800eb9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800eba0:	b25a      	sxtb	r2, r3
 800eba2:	4b59      	ldr	r3, [pc, #356]	; (800ed08 <mc_homing_cycle+0x298>)
 800eba4:	7e9b      	ldrb	r3, [r3, #26]
 800eba6:	b25b      	sxtb	r3, r3
 800eba8:	43db      	mvns	r3, r3
 800ebaa:	b25b      	sxtb	r3, r3
 800ebac:	4013      	ands	r3, r2
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	4b55      	ldr	r3, [pc, #340]	; (800ed08 <mc_homing_cycle+0x298>)
 800ebb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            do {
                if(settings.homing.cycle[idx].mask) {
 800ebb8:	4a52      	ldr	r2, [pc, #328]	; (800ed04 <mc_homing_cycle+0x294>)
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	f203 1315 	addw	r3, r3, #277	; 0x115
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d00e      	beq.n	800ebe6 <mc_homing_cycle+0x176>
                    cycle.mask = settings.homing.cycle[idx].mask;
 800ebc8:	4a4e      	ldr	r2, [pc, #312]	; (800ed04 <mc_homing_cycle+0x294>)
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	4413      	add	r3, r2
 800ebce:	f203 1315 	addw	r3, r3, #277	; 0x115
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	713b      	strb	r3, [r7, #4]
                    if((homed_status = limits_go_home(cycle)) != Status_OK)
 800ebd6:	7938      	ldrb	r0, [r7, #4]
 800ebd8:	f7fd fce4 	bl	800c5a4 <limits_go_home>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	77fb      	strb	r3, [r7, #31]
 800ebe0:	7ffb      	ldrb	r3, [r7, #31]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d106      	bne.n	800ebf4 <mc_homing_cycle+0x184>
                        break;
                }
            } while(++idx < N_AXIS);
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	61bb      	str	r3, [r7, #24]
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	d9e2      	bls.n	800ebb8 <mc_homing_cycle+0x148>
 800ebf2:	e000      	b.n	800ebf6 <mc_homing_cycle+0x186>
                        break;
 800ebf4:	bf00      	nop
        }

        // If hard limits feature enabled, re-enable hard limits pin change register after homing cycle.
        // NOTE: always call at end of homing regadless of setting, may be used to disable
        // sensorless homing or switch back to limit switches input (if different from homing switches)
        hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0});
 800ebf6:	4b45      	ldr	r3, [pc, #276]	; (800ed0c <mc_homing_cycle+0x29c>)
 800ebf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebfa:	4a42      	ldr	r2, [pc, #264]	; (800ed04 <mc_homing_cycle+0x294>)
 800ebfc:	f892 2124 	ldrb.w	r2, [r2, #292]	; 0x124
 800ec00:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800ec04:	b2d2      	uxtb	r2, r2
 800ec06:	2a00      	cmp	r2, #0
 800ec08:	bf14      	ite	ne
 800ec0a:	2201      	movne	r2, #1
 800ec0c:	2200      	moveq	r2, #0
 800ec0e:	b2d2      	uxtb	r2, r2
 800ec10:	2100      	movs	r1, #0
 800ec12:	4610      	mov	r0, r2
 800ec14:	4798      	blx	r3
    }

    if(cycle.mask) {
 800ec16:	793b      	ldrb	r3, [r7, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d04b      	beq.n	800ecb4 <mc_homing_cycle+0x244>

        if(!protocol_execute_realtime()) {  // Check for reset and set system abort.
 800ec1c:	f003 fde2 	bl	80127e4 <protocol_execute_realtime>
 800ec20:	4603      	mov	r3, r0
 800ec22:	f083 0301 	eor.w	r3, r3, #1
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00b      	beq.n	800ec44 <mc_homing_cycle+0x1d4>

            if(grbl.on_homing_completed)
 800ec2c:	4b3b      	ldr	r3, [pc, #236]	; (800ed1c <mc_homing_cycle+0x2ac>)
 800ec2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d004      	beq.n	800ec40 <mc_homing_cycle+0x1d0>
                grbl.on_homing_completed(false);
 800ec36:	4b39      	ldr	r3, [pc, #228]	; (800ed1c <mc_homing_cycle+0x2ac>)
 800ec38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	4798      	blx	r3

            return Status_Unhandled;        // Did not complete. Alarm state set by mc_alarm.
 800ec40:	2354      	movs	r3, #84	; 0x54
 800ec42:	e089      	b.n	800ed58 <mc_homing_cycle+0x2e8>
        }

        if(homed_status != Status_OK) {
 800ec44:	7ffb      	ldrb	r3, [r7, #31]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d013      	beq.n	800ec72 <mc_homing_cycle+0x202>

            if(state_get() == STATE_HOMING)
 800ec4a:	f00e f869 	bl	801cd20 <state_get>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b04      	cmp	r3, #4
 800ec52:	d102      	bne.n	800ec5a <mc_homing_cycle+0x1ea>
                state_set(STATE_IDLE);
 800ec54:	2000      	movs	r0, #0
 800ec56:	f00e f86f 	bl	801cd38 <state_set>

            if(grbl.on_homing_completed)
 800ec5a:	4b30      	ldr	r3, [pc, #192]	; (800ed1c <mc_homing_cycle+0x2ac>)
 800ec5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d004      	beq.n	800ec6e <mc_homing_cycle+0x1fe>
                grbl.on_homing_completed(false);
 800ec64:	4b2d      	ldr	r3, [pc, #180]	; (800ed1c <mc_homing_cycle+0x2ac>)
 800ec66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	4798      	blx	r3

            return homed_status;
 800ec6e:	7ffb      	ldrb	r3, [r7, #31]
 800ec70:	e072      	b.n	800ed58 <mc_homing_cycle+0x2e8>
        }

        if(home_all && settings.homing.flags.manual)
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d017      	beq.n	800eca8 <mc_homing_cycle+0x238>
 800ec78:	4b22      	ldr	r3, [pc, #136]	; (800ed04 <mc_homing_cycle+0x294>)
 800ec7a:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800ec7e:	f003 0310 	and.w	r3, r3, #16
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d00f      	beq.n	800eca8 <mc_homing_cycle+0x238>
        {
            cycle.mask = AXES_BITMASK & ~sys.homing.mask;
 800ec88:	4b1f      	ldr	r3, [pc, #124]	; (800ed08 <mc_homing_cycle+0x298>)
 800ec8a:	7e9b      	ldrb	r3, [r3, #26]
 800ec8c:	43db      	mvns	r3, r3
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	f003 0307 	and.w	r3, r3, #7
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	713b      	strb	r3, [r7, #4]
            sys.homed.mask = AXES_BITMASK;
 800ec98:	4b1b      	ldr	r3, [pc, #108]	; (800ed08 <mc_homing_cycle+0x298>)
 800ec9a:	2207      	movs	r2, #7
 800ec9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#ifdef KINEMATICS_API
            kinematics.limits_set_machine_positions(cycle);
#else
            limits_set_machine_positions(cycle, false);
 800eca0:	2100      	movs	r1, #0
 800eca2:	7938      	ldrb	r0, [r7, #4]
 800eca4:	f7fc ff68 	bl	800bb78 <limits_set_machine_positions>

        // Homing cycle complete! Setup system for normal operation.
        // ---------------------------------------------------------

        // Sync gcode parser and planner positions to homed position.
        sync_position();
 800eca8:	f002 ffe0 	bl	8011c6c <plan_sync_position>
 800ecac:	491c      	ldr	r1, [pc, #112]	; (800ed20 <mc_homing_cycle+0x2b0>)
 800ecae:	481d      	ldr	r0, [pc, #116]	; (800ed24 <mc_homing_cycle+0x2b4>)
 800ecb0:	f012 fba2 	bl	80213f8 <system_convert_array_steps_to_mpos>
    }

    system_add_rt_report(Report_Homed);
 800ecb4:	2004      	movs	r0, #4
 800ecb6:	f012 fc87 	bl	80215c8 <system_add_rt_report>

    homed_status = settings.limits.flags.hard_enabled &&
 800ecba:	4b12      	ldr	r3, [pc, #72]	; (800ed04 <mc_homing_cycle+0x294>)
 800ecbc:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800ecc0:	f003 0301 	and.w	r3, r3, #1
 800ecc4:	b2db      	uxtb	r3, r3
                    settings.limits.flags.check_at_init &&
                     (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)
                    ? Status_LimitsEngaged
                    : Status_OK;
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d02e      	beq.n	800ed28 <mc_homing_cycle+0x2b8>
    homed_status = settings.limits.flags.hard_enabled &&
 800ecca:	4b0e      	ldr	r3, [pc, #56]	; (800ed04 <mc_homing_cycle+0x294>)
 800eccc:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800ecd0:	f003 0304 	and.w	r3, r3, #4
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d026      	beq.n	800ed28 <mc_homing_cycle+0x2b8>
                     (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)
 800ecda:	4b0c      	ldr	r3, [pc, #48]	; (800ed0c <mc_homing_cycle+0x29c>)
 800ecdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecde:	4798      	blx	r3
 800ece0:	4603      	mov	r3, r0
 800ece2:	613b      	str	r3, [r7, #16]
 800ece4:	6938      	ldr	r0, [r7, #16]
 800ece6:	f7fc fe0f 	bl	800b908 <limit_signals_merge>
 800ecea:	4603      	mov	r3, r0
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <mc_homing_cycle+0x298>)
 800ecf0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
                    settings.limits.flags.check_at_init &&
 800ecf4:	4013      	ands	r3, r2
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d015      	beq.n	800ed28 <mc_homing_cycle+0x2b8>
                    : Status_OK;
 800ecfc:	232d      	movs	r3, #45	; 0x2d
 800ecfe:	e014      	b.n	800ed2a <mc_homing_cycle+0x2ba>
 800ed00:	200015a2 	.word	0x200015a2
 800ed04:	20001cf0 	.word	0x20001cf0
 800ed08:	20001520 	.word	0x20001520
 800ed0c:	200016a0 	.word	0x200016a0
 800ed10:	2000156c 	.word	0x2000156c
 800ed14:	20001568 	.word	0x20001568
 800ed18:	3dcccccd 	.word	0x3dcccccd
 800ed1c:	200015b8 	.word	0x200015b8
 800ed20:	200015a8 	.word	0x200015a8
 800ed24:	200013dc 	.word	0x200013dc
 800ed28:	2300      	movs	r3, #0
    homed_status = settings.limits.flags.hard_enabled &&
 800ed2a:	77fb      	strb	r3, [r7, #31]

    if(homed_status == Status_OK)
 800ed2c:	7ffb      	ldrb	r3, [r7, #31]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d101      	bne.n	800ed36 <mc_homing_cycle+0x2c6>
        limits_set_work_envelope();
 800ed32:	f7fc fe55 	bl	800b9e0 <limits_set_work_envelope>

    if(grbl.on_homing_completed)
 800ed36:	4b0a      	ldr	r3, [pc, #40]	; (800ed60 <mc_homing_cycle+0x2f0>)
 800ed38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00a      	beq.n	800ed56 <mc_homing_cycle+0x2e6>
        grbl.on_homing_completed(homed_status == Status_OK);
 800ed40:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <mc_homing_cycle+0x2f0>)
 800ed42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed46:	7ffa      	ldrb	r2, [r7, #31]
 800ed48:	2a00      	cmp	r2, #0
 800ed4a:	bf0c      	ite	eq
 800ed4c:	2201      	moveq	r2, #1
 800ed4e:	2200      	movne	r2, #0
 800ed50:	b2d2      	uxtb	r2, r2
 800ed52:	4610      	mov	r0, r2
 800ed54:	4798      	blx	r3

    return homed_status;
 800ed56:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3720      	adds	r7, #32
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	200015b8 	.word	0x200015b8

0800ed64 <mc_probe_cycle>:

// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
gc_probe_t mc_probe_cycle (float *target, plan_line_data_t *pl_data, gc_parser_flags_t parser_flags)
{
 800ed64:	b590      	push	{r4, r7, lr}
 800ed66:	b08d      	sub	sp, #52	; 0x34
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	80ba      	strh	r2, [r7, #4]
    uint_fast8_t idx = N_AXIS;
 800ed70:	2303      	movs	r3, #3
 800ed72:	62fb      	str	r3, [r7, #44]	; 0x2c

    // TODO: Need to update this cycle so it obeys a non-auto cycle start.
    if (state_get() == STATE_CHECK_MODE)
 800ed74:	f00d ffd4 	bl	801cd20 <state_get>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	d101      	bne.n	800ed82 <mc_probe_cycle+0x1e>
        return GCProbe_CheckMode;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e15c      	b.n	800f03c <mc_probe_cycle+0x2d8>

    do {
        idx--;
 800ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed84:	3b01      	subs	r3, #1
 800ed86:	62fb      	str	r3, [r7, #44]	; 0x2c
        sys.probe_position[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 800ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	4413      	add	r3, r2
 800ed90:	ed93 7a00 	vldr	s14, [r3]
 800ed94:	49ab      	ldr	r1, [pc, #684]	; (800f044 <mc_probe_cycle+0x2e0>)
 800ed96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed98:	4613      	mov	r3, r2
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	4413      	add	r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	440b      	add	r3, r1
 800eda2:	3330      	adds	r3, #48	; 0x30
 800eda4:	edd3 7a00 	vldr	s15, [r3]
 800eda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edac:	eeb0 0a67 	vmov.f32	s0, s15
 800edb0:	f018 f85f 	bl	8026e72 <lroundf>
 800edb4:	4602      	mov	r2, r0
 800edb6:	49a4      	ldr	r1, [pc, #656]	; (800f048 <mc_probe_cycle+0x2e4>)
 800edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edba:	330e      	adds	r3, #14
 800edbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } while(idx);
 800edc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d1dd      	bne.n	800ed82 <mc_probe_cycle+0x1e>

    sys.probe_coordsys_id = gc_state.modal.coord_system.id;
 800edc6:	4ba1      	ldr	r3, [pc, #644]	; (800f04c <mc_probe_cycle+0x2e8>)
 800edc8:	7d1a      	ldrb	r2, [r3, #20]
 800edca:	4b9f      	ldr	r3, [pc, #636]	; (800f048 <mc_probe_cycle+0x2e4>)
 800edcc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    // Finish all queued commands and empty planner buffer before starting probe cycle.
    if (!protocol_buffer_synchronize())
 800edd0:	f003 fcd8 	bl	8012784 <protocol_buffer_synchronize>
 800edd4:	4603      	mov	r3, r0
 800edd6:	f083 0301 	eor.w	r3, r3, #1
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <mc_probe_cycle+0x80>
        return GCProbe_Abort; // Return if system reset has been issued.
 800ede0:	2302      	movs	r3, #2
 800ede2:	e12b      	b.n	800f03c <mc_probe_cycle+0x2d8>

    // Initialize probing control variables
    sys.flags.probe_succeeded = Off; // Re-initialize probe history before beginning cycle.
 800ede4:	4a98      	ldr	r2, [pc, #608]	; (800f048 <mc_probe_cycle+0x2e4>)
 800ede6:	7d93      	ldrb	r3, [r2, #22]
 800ede8:	f36f 0341 	bfc	r3, #1, #1
 800edec:	7593      	strb	r3, [r2, #22]
    hal.probe.configure(parser_flags.probe_is_away, true);
 800edee:	4b98      	ldr	r3, [pc, #608]	; (800f050 <mc_probe_cycle+0x2ec>)
 800edf0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800edf4:	793a      	ldrb	r2, [r7, #4]
 800edf6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800edfa:	b2d2      	uxtb	r2, r2
 800edfc:	2a00      	cmp	r2, #0
 800edfe:	bf14      	ite	ne
 800ee00:	2201      	movne	r2, #1
 800ee02:	2200      	moveq	r2, #0
 800ee04:	b2d2      	uxtb	r2, r2
 800ee06:	2101      	movs	r1, #1
 800ee08:	4610      	mov	r0, r2
 800ee0a:	4798      	blx	r3

#if COMPATIBILITY_LEVEL <= 1
    bool at_g59_3 = false, probe_fixture = grbl.on_probe_fixture != NULL && state_get() != STATE_TOOL_CHANGE && (sys.homed.mask & (X_AXIS_BIT|Y_AXIS_BIT));
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee12:	4b90      	ldr	r3, [pc, #576]	; (800f054 <mc_probe_cycle+0x2f0>)
 800ee14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00e      	beq.n	800ee3a <mc_probe_cycle+0xd6>
 800ee1c:	f00d ff80 	bl	801cd20 <state_get>
 800ee20:	4603      	mov	r3, r0
 800ee22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee26:	d008      	beq.n	800ee3a <mc_probe_cycle+0xd6>
 800ee28:	4b87      	ldr	r3, [pc, #540]	; (800f048 <mc_probe_cycle+0x2e4>)
 800ee2a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ee2e:	f003 0303 	and.w	r3, r3, #3
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d001      	beq.n	800ee3a <mc_probe_cycle+0xd6>
 800ee36:	2301      	movs	r3, #1
 800ee38:	e000      	b.n	800ee3c <mc_probe_cycle+0xd8>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ee40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee44:	f003 0301 	and.w	r3, r3, #1
 800ee48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if(probe_fixture)
 800ee4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d010      	beq.n	800ee76 <mc_probe_cycle+0x112>
        grbl.on_probe_fixture(NULL, at_g59_3 = system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 800ee54:	4b7f      	ldr	r3, [pc, #508]	; (800f054 <mc_probe_cycle+0x2f0>)
 800ee56:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ee5a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800ee5e:	2008      	movs	r0, #8
 800ee60:	f012 fafc 	bl	802145c <system_xy_at_fixture>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee6e:	2201      	movs	r2, #1
 800ee70:	4619      	mov	r1, r3
 800ee72:	2000      	movs	r0, #0
 800ee74:	47a0      	blx	r4
#endif

    // After syncing, check if probe is already triggered or not connected. If so, halt and issue alarm.
    // NOTE: This probe initialization error applies to all probing cycles.
    probe_state_t probe = hal.probe.get_state();
 800ee76:	4b76      	ldr	r3, [pc, #472]	; (800f050 <mc_probe_cycle+0x2ec>)
 800ee78:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ee7c:	4798      	blx	r3
 800ee7e:	4603      	mov	r3, r0
 800ee80:	f887 3020 	strb.w	r3, [r7, #32]
    if (probe.triggered || !probe.connected) { // Check probe state.
 800ee84:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee88:	f003 0301 	and.w	r3, r3, #1
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <mc_probe_cycle+0x13c>
 800ee92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee96:	f003 0302 	and.w	r3, r3, #2
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d10e      	bne.n	800eebe <mc_probe_cycle+0x15a>
        system_set_exec_alarm(Alarm_ProbeFailInitial);
 800eea0:	4b6b      	ldr	r3, [pc, #428]	; (800f050 <mc_probe_cycle+0x2ec>)
 800eea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eea4:	2104      	movs	r1, #4
 800eea6:	486c      	ldr	r0, [pc, #432]	; (800f058 <mc_probe_cycle+0x2f4>)
 800eea8:	4798      	blx	r3
        protocol_execute_realtime();
 800eeaa:	f003 fc9b 	bl	80127e4 <protocol_execute_realtime>
        hal.probe.configure(false, false); // Re-initialize invert mask before returning.
 800eeae:	4b68      	ldr	r3, [pc, #416]	; (800f050 <mc_probe_cycle+0x2ec>)
 800eeb0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	4798      	blx	r3
        return GCProbe_FailInit; // Nothing else to do but bail.
 800eeba:	2302      	movs	r3, #2
 800eebc:	e0be      	b.n	800f03c <mc_probe_cycle+0x2d8>
    }

    if(grbl.on_probe_start) {
 800eebe:	4b65      	ldr	r3, [pc, #404]	; (800f054 <mc_probe_cycle+0x2f0>)
 800eec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d039      	beq.n	800ef3c <mc_probe_cycle+0x1d8>

        uint_fast8_t idx = N_AXIS;
 800eec8:	2303      	movs	r3, #3
 800eeca:	627b      	str	r3, [r7, #36]	; 0x24
        axes_signals_t axes = {0};
 800eecc:	2300      	movs	r3, #0
 800eece:	773b      	strb	r3, [r7, #28]
        coord_data_t position;

        system_convert_array_steps_to_mpos(position.values, sys.position);
 800eed0:	f107 0310 	add.w	r3, r7, #16
 800eed4:	4961      	ldr	r1, [pc, #388]	; (800f05c <mc_probe_cycle+0x2f8>)
 800eed6:	4618      	mov	r0, r3
 800eed8:	f012 fa8e 	bl	80213f8 <system_convert_array_steps_to_mpos>

        do {
            idx--;
 800eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eede:	3b01      	subs	r3, #1
 800eee0:	627b      	str	r3, [r7, #36]	; 0x24
            if(fabsf(target[idx] - position.values[idx]) > TOLERANCE_EQUAL)
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	68fa      	ldr	r2, [r7, #12]
 800eee8:	4413      	add	r3, r2
 800eeea:	ed93 7a00 	vldr	s14, [r3]
 800eeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	3330      	adds	r3, #48	; 0x30
 800eef4:	443b      	add	r3, r7
 800eef6:	3b20      	subs	r3, #32
 800eef8:	edd3 7a00 	vldr	s15, [r3]
 800eefc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef00:	eef0 7ae7 	vabs.f32	s15, s15
 800ef04:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800f060 <mc_probe_cycle+0x2fc>
 800ef08:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef10:	dd08      	ble.n	800ef24 <mc_probe_cycle+0x1c0>
                bit_true(axes.mask, bit(idx));
 800ef12:	7f3a      	ldrb	r2, [r7, #28]
 800ef14:	2101      	movs	r1, #1
 800ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef18:	fa01 f303 	lsl.w	r3, r1, r3
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	773b      	strb	r3, [r7, #28]
        } while(idx--);
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	1e5a      	subs	r2, r3, #1
 800ef28:	627a      	str	r2, [r7, #36]	; 0x24
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1d6      	bne.n	800eedc <mc_probe_cycle+0x178>

        grbl.on_probe_start(axes, target, pl_data);
 800ef2e:	4b49      	ldr	r3, [pc, #292]	; (800f054 <mc_probe_cycle+0x2f0>)
 800ef30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef34:	68ba      	ldr	r2, [r7, #8]
 800ef36:	68f9      	ldr	r1, [r7, #12]
 800ef38:	7f38      	ldrb	r0, [r7, #28]
 800ef3a:	4798      	blx	r3
    }

    // Setup and queue probing motion. Auto cycle-start should not start the cycle.
    if(!mc_line(target, pl_data))
 800ef3c:	68b9      	ldr	r1, [r7, #8]
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	f7fe fa3c 	bl	800d3bc <mc_line>
 800ef44:	4603      	mov	r3, r0
 800ef46:	f083 0301 	eor.w	r3, r3, #1
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <mc_probe_cycle+0x1f0>
        return GCProbe_Abort;
 800ef50:	2302      	movs	r3, #2
 800ef52:	e073      	b.n	800f03c <mc_probe_cycle+0x2d8>

    // Activate the probing state monitor in the stepper module.
    sys.probing_state = Probing_Active;
 800ef54:	4b3c      	ldr	r3, [pc, #240]	; (800f048 <mc_probe_cycle+0x2e4>)
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    // Perform probing cycle. Wait here until probe is triggered or motion completes.
    system_set_exec_state_flag(EXEC_CYCLE_START);
 800ef5c:	4b3c      	ldr	r3, [pc, #240]	; (800f050 <mc_probe_cycle+0x2ec>)
 800ef5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef60:	2102      	movs	r1, #2
 800ef62:	4840      	ldr	r0, [pc, #256]	; (800f064 <mc_probe_cycle+0x300>)
 800ef64:	4798      	blx	r3
    do {
        if(!protocol_execute_realtime()) // Check for system abort
 800ef66:	f003 fc3d 	bl	80127e4 <protocol_execute_realtime>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	f083 0301 	eor.w	r3, r3, #1
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d001      	beq.n	800ef7a <mc_probe_cycle+0x216>
            return GCProbe_Abort;
 800ef76:	2302      	movs	r3, #2
 800ef78:	e060      	b.n	800f03c <mc_probe_cycle+0x2d8>
    } while (!(state_get() == STATE_IDLE || state_get() == STATE_TOOL_CHANGE));
 800ef7a:	f00d fed1 	bl	801cd20 <state_get>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d005      	beq.n	800ef90 <mc_probe_cycle+0x22c>
 800ef84:	f00d fecc 	bl	801cd20 <state_get>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef8e:	d1ea      	bne.n	800ef66 <mc_probe_cycle+0x202>

    // Probing cycle complete!

    // Set state variables and error out, if the probe failed and cycle with error is enabled.
    if(sys.probing_state == Probing_Active) {
 800ef90:	4b2d      	ldr	r3, [pc, #180]	; (800f048 <mc_probe_cycle+0x2e4>)
 800ef92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d112      	bne.n	800efc2 <mc_probe_cycle+0x25e>
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 800ef9c:	4b2a      	ldr	r3, [pc, #168]	; (800f048 <mc_probe_cycle+0x2e4>)
 800ef9e:	4a2a      	ldr	r2, [pc, #168]	; (800f048 <mc_probe_cycle+0x2e4>)
 800efa0:	3338      	adds	r3, #56	; 0x38
 800efa2:	3288      	adds	r2, #136	; 0x88
 800efa4:	ca07      	ldmia	r2, {r0, r1, r2}
 800efa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        if(!parser_flags.probe_is_no_error)
 800efaa:	793b      	ldrb	r3, [r7, #4]
 800efac:	f003 0310 	and.w	r3, r3, #16
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d10a      	bne.n	800efcc <mc_probe_cycle+0x268>
            system_set_exec_alarm(Alarm_ProbeFailContact);
 800efb6:	4b26      	ldr	r3, [pc, #152]	; (800f050 <mc_probe_cycle+0x2ec>)
 800efb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efba:	2105      	movs	r1, #5
 800efbc:	4826      	ldr	r0, [pc, #152]	; (800f058 <mc_probe_cycle+0x2f4>)
 800efbe:	4798      	blx	r3
 800efc0:	e004      	b.n	800efcc <mc_probe_cycle+0x268>
    } else
        sys.flags.probe_succeeded = On; // Indicate to system the probing cycle completed successfully.
 800efc2:	4a21      	ldr	r2, [pc, #132]	; (800f048 <mc_probe_cycle+0x2e4>)
 800efc4:	7d93      	ldrb	r3, [r2, #22]
 800efc6:	f043 0302 	orr.w	r3, r3, #2
 800efca:	7593      	strb	r3, [r2, #22]

    sys.probing_state = Probing_Off;    // Ensure probe state monitor is disabled.
 800efcc:	4b1e      	ldr	r3, [pc, #120]	; (800f048 <mc_probe_cycle+0x2e4>)
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    hal.probe.configure(false, false);  // Re-initialize invert mask.
 800efd4:	4b1e      	ldr	r3, [pc, #120]	; (800f050 <mc_probe_cycle+0x2ec>)
 800efd6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800efda:	2100      	movs	r1, #0
 800efdc:	2000      	movs	r0, #0
 800efde:	4798      	blx	r3
    protocol_execute_realtime();        // Check and execute run-time commands
 800efe0:	f003 fc00 	bl	80127e4 <protocol_execute_realtime>

#if COMPATIBILITY_LEVEL <= 1
    if(probe_fixture)
 800efe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d007      	beq.n	800effc <mc_probe_cycle+0x298>
        grbl.on_probe_fixture(NULL, at_g59_3, false);
 800efec:	4b19      	ldr	r3, [pc, #100]	; (800f054 <mc_probe_cycle+0x2f0>)
 800efee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eff2:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800eff6:	2200      	movs	r2, #0
 800eff8:	2000      	movs	r0, #0
 800effa:	4798      	blx	r3
#endif

    // Reset the stepper and planner buffers to remove the remainder of the probe motion.
    st_reset();             // Reset step segment buffer.
 800effc:	f00f f9e0 	bl	801e3c0 <st_reset>
    plan_reset();           // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 800f000:	f002 f8e8 	bl	80111d4 <plan_reset>
    plan_sync_position();   // Sync planner position to current machine position.
 800f004:	f002 fe32 	bl	8011c6c <plan_sync_position>
#if ENABLE_BACKLASH_COMPENSATION
    mc_sync_backlash_position();
#endif

    // All done! Output the probe position as message if configured.
    if(settings.status_report.probe_coordinates)
 800f008:	4b0e      	ldr	r3, [pc, #56]	; (800f044 <mc_probe_cycle+0x2e0>)
 800f00a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f00e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f012:	b2db      	uxtb	r3, r3
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <mc_probe_cycle+0x2b8>
        report_probe_parameters();
 800f018:	f005 faf0 	bl	80145fc <report_probe_parameters>

    if(grbl.on_probe_completed)
 800f01c:	4b0d      	ldr	r3, [pc, #52]	; (800f054 <mc_probe_cycle+0x2f0>)
 800f01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f022:	2b00      	cmp	r3, #0
 800f024:	d003      	beq.n	800f02e <mc_probe_cycle+0x2ca>
        grbl.on_probe_completed();
 800f026:	4b0b      	ldr	r3, [pc, #44]	; (800f054 <mc_probe_cycle+0x2f0>)
 800f028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f02c:	4798      	blx	r3

    // Successful probe cycle or Failed to trigger probe within travel. With or without error.
    return sys.flags.probe_succeeded ? GCProbe_Found : GCProbe_FailEnd;
 800f02e:	4b06      	ldr	r3, [pc, #24]	; (800f048 <mc_probe_cycle+0x2e4>)
 800f030:	7d9b      	ldrb	r3, [r3, #22]
 800f032:	085b      	lsrs	r3, r3, #1
 800f034:	b2db      	uxtb	r3, r3
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	b2db      	uxtb	r3, r3
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3734      	adds	r7, #52	; 0x34
 800f040:	46bd      	mov	sp, r7
 800f042:	bd90      	pop	{r4, r7, pc}
 800f044:	20001cf0 	.word	0x20001cf0
 800f048:	20001520 	.word	0x20001520
 800f04c:	2000137c 	.word	0x2000137c
 800f050:	200016a0 	.word	0x200016a0
 800f054:	200015b8 	.word	0x200015b8
 800f058:	2000156c 	.word	0x2000156c
 800f05c:	200015a8 	.word	0x200015a8
 800f060:	38d1b717 	.word	0x38d1b717
 800f064:	20001568 	.word	0x20001568

0800f068 <mc_parking_motion>:


// Plans and executes the single special motion case for parking. Independent of main planner buffer.
// NOTE: Uses the always free planner ring buffer head to store motion parameters for execution.
bool mc_parking_motion (float *parking_target, plan_line_data_t *pl_data)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
    bool ok;

    if (sys.abort)
 800f072:	4b12      	ldr	r3, [pc, #72]	; (800f0bc <mc_parking_motion+0x54>)
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <mc_parking_motion+0x16>
        return false; // Block during abort.
 800f07a:	2300      	movs	r3, #0
 800f07c:	e019      	b.n	800f0b2 <mc_parking_motion+0x4a>

    if ((ok = plan_buffer_line(parking_target, pl_data))) {
 800f07e:	6839      	ldr	r1, [r7, #0]
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f002 fb35 	bl	80116f0 <plan_buffer_line>
 800f086:	4603      	mov	r3, r0
 800f088:	73fb      	strb	r3, [r7, #15]
 800f08a:	7bfb      	ldrb	r3, [r7, #15]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00f      	beq.n	800f0b0 <mc_parking_motion+0x48>
        sys.step_control.execute_sys_motion = On;
 800f090:	4a0a      	ldr	r2, [pc, #40]	; (800f0bc <mc_parking_motion+0x54>)
 800f092:	7e13      	ldrb	r3, [r2, #24]
 800f094:	f043 0304 	orr.w	r3, r3, #4
 800f098:	7613      	strb	r3, [r2, #24]
        sys.step_control.end_motion = Off;  // Allow parking motion to execute, if feed hold is active.
 800f09a:	4a08      	ldr	r2, [pc, #32]	; (800f0bc <mc_parking_motion+0x54>)
 800f09c:	7e13      	ldrb	r3, [r2, #24]
 800f09e:	f36f 0300 	bfc	r3, #0, #1
 800f0a2:	7613      	strb	r3, [r2, #24]
        st_parking_setup_buffer();          // Setup step segment buffer for special parking motion case.
 800f0a4:	f00f fa9e 	bl	801e5e4 <st_parking_setup_buffer>
        st_prep_buffer();
 800f0a8:	f00f fb28 	bl	801e6fc <st_prep_buffer>
        st_wake_up();
 800f0ac:	f00e ff0a 	bl	801dec4 <st_wake_up>
    }

    return ok;
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	20001520 	.word	0x20001520

0800f0c0 <mc_override_ctrl_update>:

void mc_override_ctrl_update (gc_override_flags_t override_state)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	7138      	strb	r0, [r7, #4]
// Finish all queued commands before altering override control state
    protocol_buffer_synchronize();
 800f0c8:	f003 fb5c 	bl	8012784 <protocol_buffer_synchronize>
    if (!sys.abort)
 800f0cc:	4b07      	ldr	r3, [pc, #28]	; (800f0ec <mc_override_ctrl_update+0x2c>)
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	f083 0301 	eor.w	r3, r3, #1
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d003      	beq.n	800f0e2 <mc_override_ctrl_update+0x22>
        sys.override.control = override_state;
 800f0da:	4a04      	ldr	r2, [pc, #16]	; (800f0ec <mc_override_ctrl_update+0x2c>)
 800f0dc:	793b      	ldrb	r3, [r7, #4]
 800f0de:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
}
 800f0e2:	bf00      	nop
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	20001520 	.word	0x20001520

0800f0f0 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
ISR_CODE void ISR_FUNC(mc_reset)(void)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	af00      	add	r7, sp, #0
    // Only this function can set the system reset. Helps prevent multiple kill calls.
    if (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 800f0f4:	4b37      	ldr	r3, [pc, #220]	; (800f1d4 <mc_reset+0xe4>)
 800f0f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0f8:	f003 0320 	and.w	r3, r3, #32
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d166      	bne.n	800f1ce <mc_reset+0xde>

        system_set_exec_state_flag(EXEC_RESET);
 800f100:	4b35      	ldr	r3, [pc, #212]	; (800f1d8 <mc_reset+0xe8>)
 800f102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f104:	2120      	movs	r1, #32
 800f106:	4835      	ldr	r0, [pc, #212]	; (800f1dc <mc_reset+0xec>)
 800f108:	4798      	blx	r3

        if(hal.stream.suspend_read)
 800f10a:	4b33      	ldr	r3, [pc, #204]	; (800f1d8 <mc_reset+0xe8>)
 800f10c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f110:	2b00      	cmp	r3, #0
 800f112:	d004      	beq.n	800f11e <mc_reset+0x2e>
            hal.stream.suspend_read(false);
 800f114:	4b30      	ldr	r3, [pc, #192]	; (800f1d8 <mc_reset+0xe8>)
 800f116:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f11a:	2000      	movs	r0, #0
 800f11c:	4798      	blx	r3

        // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
        // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
        // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
        // violated, by which, all bets are off.
        if ((state_get() & (STATE_CYCLE|STATE_HOMING|STATE_JOG)) || sys.step_control.execute_hold || sys.step_control.execute_sys_motion) {
 800f11e:	f00d fdff 	bl	801cd20 <state_get>
 800f122:	4603      	mov	r3, r0
 800f124:	f003 032c 	and.w	r3, r3, #44	; 0x2c
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d10d      	bne.n	800f148 <mc_reset+0x58>
 800f12c:	4b29      	ldr	r3, [pc, #164]	; (800f1d4 <mc_reset+0xe4>)
 800f12e:	7e1b      	ldrb	r3, [r3, #24]
 800f130:	f003 0302 	and.w	r3, r3, #2
 800f134:	b2db      	uxtb	r3, r3
 800f136:	2b00      	cmp	r3, #0
 800f138:	d106      	bne.n	800f148 <mc_reset+0x58>
 800f13a:	4b26      	ldr	r3, [pc, #152]	; (800f1d4 <mc_reset+0xe4>)
 800f13c:	7e1b      	ldrb	r3, [r3, #24]
 800f13e:	f003 0304 	and.w	r3, r3, #4
 800f142:	b2db      	uxtb	r3, r3
 800f144:	2b00      	cmp	r3, #0
 800f146:	d018      	beq.n	800f17a <mc_reset+0x8a>

            sys.position_lost = true;
 800f148:	4b22      	ldr	r3, [pc, #136]	; (800f1d4 <mc_reset+0xe4>)
 800f14a:	2201      	movs	r2, #1
 800f14c:	70da      	strb	r2, [r3, #3]

            if (state_get() != STATE_HOMING)
 800f14e:	f00d fde7 	bl	801cd20 <state_get>
 800f152:	4603      	mov	r3, r0
 800f154:	2b04      	cmp	r3, #4
 800f156:	d005      	beq.n	800f164 <mc_reset+0x74>
                system_set_exec_alarm(Alarm_AbortCycle);
 800f158:	4b1f      	ldr	r3, [pc, #124]	; (800f1d8 <mc_reset+0xe8>)
 800f15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f15c:	2103      	movs	r1, #3
 800f15e:	4820      	ldr	r0, [pc, #128]	; (800f1e0 <mc_reset+0xf0>)
 800f160:	4798      	blx	r3
 800f162:	e008      	b.n	800f176 <mc_reset+0x86>
            else if (!sys.rt_exec_alarm)
 800f164:	4b1b      	ldr	r3, [pc, #108]	; (800f1d4 <mc_reset+0xe4>)
 800f166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d104      	bne.n	800f176 <mc_reset+0x86>
                system_set_exec_alarm(Alarm_HomingFailReset);
 800f16c:	4b1a      	ldr	r3, [pc, #104]	; (800f1d8 <mc_reset+0xe8>)
 800f16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f170:	2106      	movs	r1, #6
 800f172:	481b      	ldr	r0, [pc, #108]	; (800f1e0 <mc_reset+0xf0>)
 800f174:	4798      	blx	r3

            st_go_idle(); // Force kill steppers. Position has likely been lost.
 800f176:	f00e feb9 	bl	801deec <st_go_idle>
        }

        if(hal.control.get_state().e_stop)
 800f17a:	4b17      	ldr	r3, [pc, #92]	; (800f1d8 <mc_reset+0xe8>)
 800f17c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f17e:	4798      	blx	r3
 800f180:	4603      	mov	r3, r0
 800f182:	b2db      	uxtb	r3, r3
 800f184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d005      	beq.n	800f19a <mc_reset+0xaa>
            system_set_exec_alarm(Alarm_EStop);
 800f18e:	4b12      	ldr	r3, [pc, #72]	; (800f1d8 <mc_reset+0xe8>)
 800f190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f192:	210a      	movs	r1, #10
 800f194:	4812      	ldr	r0, [pc, #72]	; (800f1e0 <mc_reset+0xf0>)
 800f196:	4798      	blx	r3
 800f198:	e010      	b.n	800f1bc <mc_reset+0xcc>
        else if(hal.control.get_state().motor_fault)
 800f19a:	4b0f      	ldr	r3, [pc, #60]	; (800f1d8 <mc_reset+0xe8>)
 800f19c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f19e:	4798      	blx	r3
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	f003 0301 	and.w	r3, r3, #1
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d004      	beq.n	800f1bc <mc_reset+0xcc>
            system_set_exec_alarm(Alarm_MotorFault);
 800f1b2:	4b09      	ldr	r3, [pc, #36]	; (800f1d8 <mc_reset+0xe8>)
 800f1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1b6:	2111      	movs	r1, #17
 800f1b8:	4809      	ldr	r0, [pc, #36]	; (800f1e0 <mc_reset+0xf0>)
 800f1ba:	4798      	blx	r3

        if(grbl.on_reset)
 800f1bc:	4b09      	ldr	r3, [pc, #36]	; (800f1e4 <mc_reset+0xf4>)
 800f1be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d003      	beq.n	800f1ce <mc_reset+0xde>
            grbl.on_reset();
 800f1c6:	4b07      	ldr	r3, [pc, #28]	; (800f1e4 <mc_reset+0xf4>)
 800f1c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f1cc:	4798      	blx	r3
    }
}
 800f1ce:	bf00      	nop
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	20001520 	.word	0x20001520
 800f1d8:	200016a0 	.word	0x200016a0
 800f1dc:	20001568 	.word	0x20001568
 800f1e0:	2000156c 	.word	0x2000156c
 800f1e4:	200015b8 	.word	0x200015b8

0800f1e8 <my_plugin_init>:
*/

#ifndef ADD_MY_PLUGIN

__attribute__((weak)) void my_plugin_init (void)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	af00      	add	r7, sp, #0
    // NOOP
}
 800f1ec:	bf00      	nop
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
	...

0800f1f8 <_relative_pos>:

ngc_rw_param_t *rw_params = NULL;
ngc_named_rw_param_t *rw_global_params = NULL;

static float _relative_pos (uint_fast8_t axis)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	ed2d 8b02 	vpush	{d8}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
    float value;

    if(axis < N_AXIS) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b02      	cmp	r3, #2
 800f208:	d82e      	bhi.n	800f268 <_relative_pos+0x70>
        value = sys.position[axis] / settings.axis[axis].steps_per_mm - gc_get_offset(axis);
 800f20a:	4a1e      	ldr	r2, [pc, #120]	; (800f284 <_relative_pos+0x8c>)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	3322      	adds	r3, #34	; 0x22
 800f210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f214:	ee07 3a90 	vmov	s15, r3
 800f218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f21c:	491a      	ldr	r1, [pc, #104]	; (800f288 <_relative_pos+0x90>)
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	4613      	mov	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4413      	add	r3, r2
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	440b      	add	r3, r1
 800f22a:	3330      	adds	r3, #48	; 0x30
 800f22c:	edd3 7a00 	vldr	s15, [r3]
 800f230:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7f6 f979 	bl	800552c <gc_get_offset>
 800f23a:	eef0 7a40 	vmov.f32	s15, s0
 800f23e:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f242:	edc7 7a03 	vstr	s15, [r7, #12]
        if(settings.flags.report_inches)
 800f246:	4b10      	ldr	r3, [pc, #64]	; (800f288 <_relative_pos+0x90>)
 800f248:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f24c:	f003 0301 	and.w	r3, r3, #1
 800f250:	b2db      	uxtb	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00b      	beq.n	800f26e <_relative_pos+0x76>
            value *= 25.4f;
 800f256:	edd7 7a03 	vldr	s15, [r7, #12]
 800f25a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f28c <_relative_pos+0x94>
 800f25e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f262:	edc7 7a03 	vstr	s15, [r7, #12]
 800f266:	e002      	b.n	800f26e <_relative_pos+0x76>
    } else
        value = 0.0f;
 800f268:	f04f 0300 	mov.w	r3, #0
 800f26c:	60fb      	str	r3, [r7, #12]

    return value;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	ee07 3a90 	vmov	s15, r3
}
 800f274:	eeb0 0a67 	vmov.f32	s0, s15
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	ecbd 8b02 	vpop	{d8}
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	20001520 	.word	0x20001520
 800f288:	20001cf0 	.word	0x20001cf0
 800f28c:	41cb3333 	.word	0x41cb3333

0800f290 <probe_coord>:

// numbered parameters

static float probe_coord (ngc_param_id_t id)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b088      	sub	sp, #32
 800f294:	af00      	add	r7, sp, #0
 800f296:	4603      	mov	r3, r0
 800f298:	80fb      	strh	r3, [r7, #6]
    float value = 0.0f;
 800f29a:	f04f 0300 	mov.w	r3, #0
 800f29e:	61fb      	str	r3, [r7, #28]
    uint_fast8_t axis = (id % 10) - 1;
 800f2a0:	88fa      	ldrh	r2, [r7, #6]
 800f2a2:	4b34      	ldr	r3, [pc, #208]	; (800f374 <probe_coord+0xe4>)
 800f2a4:	fba3 1302 	umull	r1, r3, r3, r2
 800f2a8:	08d9      	lsrs	r1, r3, #3
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	440b      	add	r3, r1
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	61bb      	str	r3, [r7, #24]
    coord_system_t data;

    if(axis < N_AXIS && (sys.probe_coordsys_id == gc_state.modal.coord_system.id || settings_read_coord_data(sys.probe_coordsys_id, &data.xyz))) {
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d851      	bhi.n	800f364 <probe_coord+0xd4>
 800f2c0:	4b2d      	ldr	r3, [pc, #180]	; (800f378 <probe_coord+0xe8>)
 800f2c2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800f2c6:	4b2d      	ldr	r3, [pc, #180]	; (800f37c <probe_coord+0xec>)
 800f2c8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d00b      	beq.n	800f2e6 <probe_coord+0x56>
 800f2ce:	4b2a      	ldr	r3, [pc, #168]	; (800f378 <probe_coord+0xe8>)
 800f2d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f2d4:	f107 0208 	add.w	r2, r7, #8
 800f2d8:	4611      	mov	r1, r2
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f00a ff90 	bl	801a200 <settings_read_coord_data>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d03e      	beq.n	800f364 <probe_coord+0xd4>
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 800f2e6:	4a24      	ldr	r2, [pc, #144]	; (800f378 <probe_coord+0xe8>)
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	330e      	adds	r3, #14
 800f2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2f0:	ee07 3a90 	vmov	s15, r3
 800f2f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f2f8:	4921      	ldr	r1, [pc, #132]	; (800f380 <probe_coord+0xf0>)
 800f2fa:	69ba      	ldr	r2, [r7, #24]
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	009b      	lsls	r3, r3, #2
 800f300:	4413      	add	r3, r2
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	440b      	add	r3, r1
 800f306:	3330      	adds	r3, #48	; 0x30
 800f308:	edd3 7a00 	vldr	s15, [r3]
 800f30c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                 (sys.probe_coordsys_id == gc_state.modal.coord_system.id ? gc_state.modal.coord_system.xyz[axis] : data.xyz[axis]);
 800f310:	4b19      	ldr	r3, [pc, #100]	; (800f378 <probe_coord+0xe8>)
 800f312:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800f316:	4b19      	ldr	r3, [pc, #100]	; (800f37c <probe_coord+0xec>)
 800f318:	7d1b      	ldrb	r3, [r3, #20]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d107      	bne.n	800f32e <probe_coord+0x9e>
 800f31e:	4a17      	ldr	r2, [pc, #92]	; (800f37c <probe_coord+0xec>)
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	3302      	adds	r3, #2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	4413      	add	r3, r2
 800f328:	edd3 7a00 	vldr	s15, [r3]
 800f32c:	e006      	b.n	800f33c <probe_coord+0xac>
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	3320      	adds	r3, #32
 800f334:	443b      	add	r3, r7
 800f336:	3b18      	subs	r3, #24
 800f338:	edd3 7a00 	vldr	s15, [r3]
        value = sys.probe_position[axis] / settings.axis[axis].steps_per_mm -
 800f33c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f340:	edc7 7a07 	vstr	s15, [r7, #28]
        if(settings.flags.report_inches)
 800f344:	4b0e      	ldr	r3, [pc, #56]	; (800f380 <probe_coord+0xf0>)
 800f346:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f34a:	f003 0301 	and.w	r3, r3, #1
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	2b00      	cmp	r3, #0
 800f352:	d007      	beq.n	800f364 <probe_coord+0xd4>
            value *= 25.4f;
 800f354:	edd7 7a07 	vldr	s15, [r7, #28]
 800f358:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800f384 <probe_coord+0xf4>
 800f35c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f360:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return value;
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	ee07 3a90 	vmov	s15, r3
}
 800f36a:	eeb0 0a67 	vmov.f32	s0, s15
 800f36e:	3720      	adds	r7, #32
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	cccccccd 	.word	0xcccccccd
 800f378:	20001520 	.word	0x20001520
 800f37c:	2000137c 	.word	0x2000137c
 800f380:	20001cf0 	.word	0x20001cf0
 800f384:	41cb3333 	.word	0x41cb3333

0800f388 <scaling_factors>:

static float scaling_factors (ngc_param_id_t id)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	4603      	mov	r3, r0
 800f390:	80fb      	strh	r3, [r7, #6]
    float *factors = gc_get_scaling();
 800f392:	f7f6 f893 	bl	80054bc <gc_get_scaling>
 800f396:	60f8      	str	r0, [r7, #12]
    uint_fast8_t axis = id % 10;
 800f398:	88fa      	ldrh	r2, [r7, #6]
 800f39a:	4b10      	ldr	r3, [pc, #64]	; (800f3dc <scaling_factors+0x54>)
 800f39c:	fba3 1302 	umull	r1, r3, r3, r2
 800f3a0:	08d9      	lsrs	r1, r3, #3
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	440b      	add	r3, r1
 800f3a8:	005b      	lsls	r3, r3, #1
 800f3aa:	1ad3      	subs	r3, r2, r3
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	60bb      	str	r3, [r7, #8]

    return axis <= N_AXIS ? factors[axis - 1] : 0.0f;
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	2b03      	cmp	r3, #3
 800f3b4:	d808      	bhi.n	800f3c8 <scaling_factors+0x40>
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f3bc:	3b01      	subs	r3, #1
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	e001      	b.n	800f3cc <scaling_factors+0x44>
 800f3c8:	f04f 0300 	mov.w	r3, #0
 800f3cc:	ee07 3a90 	vmov	s15, r3
}
 800f3d0:	eeb0 0a67 	vmov.f32	s0, s15
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	cccccccd 	.word	0xcccccccd

0800f3e0 <probe_result>:

static float probe_result (ngc_param_id_t id)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	80fb      	strh	r3, [r7, #6]
    return sys.flags.probe_succeeded ? 1.0f : 0.0f;
 800f3ea:	4b0a      	ldr	r3, [pc, #40]	; (800f414 <probe_result+0x34>)
 800f3ec:	7d9b      	ldrb	r3, [r3, #22]
 800f3ee:	f003 0302 	and.w	r3, r3, #2
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d002      	beq.n	800f3fe <probe_result+0x1e>
 800f3f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f3fc:	e001      	b.n	800f402 <probe_result+0x22>
 800f3fe:	f04f 0300 	mov.w	r3, #0
 800f402:	ee07 3a90 	vmov	s15, r3
}
 800f406:	eeb0 0a67 	vmov.f32	s0, s15
 800f40a:	370c      	adds	r7, #12
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	20001520 	.word	0x20001520

0800f418 <m66_result>:

    return axis <= N_AXIS ? sys.home_position[axis - 1] : 0.0f;
}
*/
static float m66_result (ngc_param_id_t id)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	4603      	mov	r3, r0
 800f420:	80fb      	strh	r3, [r7, #6]
    return (float)sys.var5399;
 800f422:	4b06      	ldr	r3, [pc, #24]	; (800f43c <m66_result+0x24>)
 800f424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f426:	ee07 3a90 	vmov	s15, r3
 800f42a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800f42e:	eeb0 0a67 	vmov.f32	s0, s15
 800f432:	370c      	adds	r7, #12
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr
 800f43c:	20001520 	.word	0x20001520

0800f440 <tool_number>:

static float tool_number (ngc_param_id_t id)
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	4603      	mov	r3, r0
 800f448:	80fb      	strh	r3, [r7, #6]
    return (float)gc_state.tool->tool_id;
 800f44a:	4b07      	ldr	r3, [pc, #28]	; (800f468 <tool_number+0x28>)
 800f44c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f450:	691b      	ldr	r3, [r3, #16]
 800f452:	ee07 3a90 	vmov	s15, r3
 800f456:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800f45a:	eeb0 0a67 	vmov.f32	s0, s15
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	2000137c 	.word	0x2000137c

0800f46c <tool_offset>:

static float tool_offset (ngc_param_id_t id)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	80fb      	strh	r3, [r7, #6]
    uint_fast8_t axis = id % 10;
 800f476:	88fa      	ldrh	r2, [r7, #6]
 800f478:	4b0f      	ldr	r3, [pc, #60]	; (800f4b8 <tool_offset+0x4c>)
 800f47a:	fba3 1302 	umull	r1, r3, r3, r2
 800f47e:	08d9      	lsrs	r1, r3, #3
 800f480:	460b      	mov	r3, r1
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	440b      	add	r3, r1
 800f486:	005b      	lsls	r3, r3, #1
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	60fb      	str	r3, [r7, #12]

    return axis <= N_AXIS ? gc_state.tool_length_offset[axis] : 0.0f;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2b03      	cmp	r3, #3
 800f492:	d806      	bhi.n	800f4a2 <tool_offset+0x36>
 800f494:	4a09      	ldr	r2, [pc, #36]	; (800f4bc <tool_offset+0x50>)
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	3322      	adds	r3, #34	; 0x22
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	4413      	add	r3, r2
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	e001      	b.n	800f4a6 <tool_offset+0x3a>
 800f4a2:	f04f 0300 	mov.w	r3, #0
 800f4a6:	ee07 3a90 	vmov	s15, r3
}
 800f4aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f4ae:	3714      	adds	r7, #20
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	cccccccd 	.word	0xcccccccd
 800f4bc:	2000137c 	.word	0x2000137c

0800f4c0 <g28_home>:

static float g28_home (ngc_param_id_t id)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b088      	sub	sp, #32
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	80fb      	strh	r3, [r7, #6]
    float value = 0.0f;
 800f4ca:	f04f 0300 	mov.w	r3, #0
 800f4ce:	61fb      	str	r3, [r7, #28]
    uint_fast8_t axis = id % 10;
 800f4d0:	88fa      	ldrh	r2, [r7, #6]
 800f4d2:	4b13      	ldr	r3, [pc, #76]	; (800f520 <g28_home+0x60>)
 800f4d4:	fba3 1302 	umull	r1, r3, r3, r2
 800f4d8:	08d9      	lsrs	r1, r3, #3
 800f4da:	460b      	mov	r3, r1
 800f4dc:	009b      	lsls	r3, r3, #2
 800f4de:	440b      	add	r3, r1
 800f4e0:	005b      	lsls	r3, r3, #1
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	61bb      	str	r3, [r7, #24]
    coord_system_t data;

    if(axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G28, &data.xyz))
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	2b03      	cmp	r3, #3
 800f4ec:	d810      	bhi.n	800f510 <g28_home+0x50>
 800f4ee:	f107 0308 	add.w	r3, r7, #8
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	2009      	movs	r0, #9
 800f4f6:	f00a fe83 	bl	801a200 <settings_read_coord_data>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d007      	beq.n	800f510 <g28_home+0x50>
        value = data.xyz[axis - 1];
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	3b01      	subs	r3, #1
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	3320      	adds	r3, #32
 800f508:	443b      	add	r3, r7
 800f50a:	3b18      	subs	r3, #24
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	61fb      	str	r3, [r7, #28]

    return value;
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	ee07 3a90 	vmov	s15, r3
}
 800f516:	eeb0 0a67 	vmov.f32	s0, s15
 800f51a:	3720      	adds	r7, #32
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	cccccccd 	.word	0xcccccccd

0800f524 <g30_home>:

static float g30_home (ngc_param_id_t id)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b088      	sub	sp, #32
 800f528:	af00      	add	r7, sp, #0
 800f52a:	4603      	mov	r3, r0
 800f52c:	80fb      	strh	r3, [r7, #6]
    float value = 0.0f;
 800f52e:	f04f 0300 	mov.w	r3, #0
 800f532:	61fb      	str	r3, [r7, #28]
    uint_fast8_t axis = id % 10;
 800f534:	88fa      	ldrh	r2, [r7, #6]
 800f536:	4b13      	ldr	r3, [pc, #76]	; (800f584 <g30_home+0x60>)
 800f538:	fba3 1302 	umull	r1, r3, r3, r2
 800f53c:	08d9      	lsrs	r1, r3, #3
 800f53e:	460b      	mov	r3, r1
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	440b      	add	r3, r1
 800f544:	005b      	lsls	r3, r3, #1
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	b29b      	uxth	r3, r3
 800f54a:	61bb      	str	r3, [r7, #24]
    coord_system_t data;

#if COMPATIBILITY_LEVEL > 1
    if(id <= CoordinateSystem_G59) {
#endif
    if (axis <= N_AXIS && settings_read_coord_data(CoordinateSystem_G30, &data.xyz))
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	2b03      	cmp	r3, #3
 800f550:	d810      	bhi.n	800f574 <g30_home+0x50>
 800f552:	f107 0308 	add.w	r3, r7, #8
 800f556:	4619      	mov	r1, r3
 800f558:	200a      	movs	r0, #10
 800f55a:	f00a fe51 	bl	801a200 <settings_read_coord_data>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d007      	beq.n	800f574 <g30_home+0x50>
        value = data.xyz[axis - 1];
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	3b01      	subs	r3, #1
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	3320      	adds	r3, #32
 800f56c:	443b      	add	r3, r7
 800f56e:	3b18      	subs	r3, #24
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	61fb      	str	r3, [r7, #28]
#if COMPATIBILITY_LEVEL > 1
    }
#endif

    return value;
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	ee07 3a90 	vmov	s15, r3
}
 800f57a:	eeb0 0a67 	vmov.f32	s0, s15
 800f57e:	3720      	adds	r7, #32
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	cccccccd 	.word	0xcccccccd

0800f588 <coord_system>:

static float coord_system (ngc_param_id_t id)
{
 800f588:	b480      	push	{r7}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	80fb      	strh	r3, [r7, #6]
    return (float)gc_state.modal.coord_system.id + 1;
 800f592:	4b08      	ldr	r3, [pc, #32]	; (800f5b4 <coord_system+0x2c>)
 800f594:	7d1b      	ldrb	r3, [r3, #20]
 800f596:	ee07 3a90 	vmov	s15, r3
 800f59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f59e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f5a2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800f5a6:	eeb0 0a67 	vmov.f32	s0, s15
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr
 800f5b4:	2000137c 	.word	0x2000137c

0800f5b8 <coord_system_offset>:

static float coord_system_offset (ngc_param_id_t id)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b088      	sub	sp, #32
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	4603      	mov	r3, r0
 800f5c0:	80fb      	strh	r3, [r7, #6]
    float value = 0.0f;
 800f5c2:	f04f 0300 	mov.w	r3, #0
 800f5c6:	61fb      	str	r3, [r7, #28]
    uint_fast8_t axis = id % 10;
 800f5c8:	88fa      	ldrh	r2, [r7, #6]
 800f5ca:	4b1f      	ldr	r3, [pc, #124]	; (800f648 <coord_system_offset+0x90>)
 800f5cc:	fba3 1302 	umull	r1, r3, r3, r2
 800f5d0:	08d9      	lsrs	r1, r3, #3
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	009b      	lsls	r3, r3, #2
 800f5d6:	440b      	add	r3, r1
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	1ad3      	subs	r3, r2, r3
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	61bb      	str	r3, [r7, #24]
    coord_system_t data;

    id = (id - 5220 - axis - (id == 0 ? 10 : 0)) / 20;
 800f5e0:	88fa      	ldrh	r2, [r7, #6]
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	1ad2      	subs	r2, r2, r3
 800f5e6:	88fb      	ldrh	r3, [r7, #6]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d101      	bne.n	800f5f0 <coord_system_offset+0x38>
 800f5ec:	230a      	movs	r3, #10
 800f5ee:	e000      	b.n	800f5f2 <coord_system_offset+0x3a>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	f5a3 53a3 	sub.w	r3, r3, #5216	; 0x1460
 800f5f8:	3b04      	subs	r3, #4
 800f5fa:	4a13      	ldr	r2, [pc, #76]	; (800f648 <coord_system_offset+0x90>)
 800f5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800f600:	091b      	lsrs	r3, r3, #4
 800f602:	80fb      	strh	r3, [r7, #6]

    if (axis > 0 && axis <= N_AXIS && settings_read_coord_data((coord_system_id_t)id, &data.xyz))
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d015      	beq.n	800f636 <coord_system_offset+0x7e>
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	2b03      	cmp	r3, #3
 800f60e:	d812      	bhi.n	800f636 <coord_system_offset+0x7e>
 800f610:	88fb      	ldrh	r3, [r7, #6]
 800f612:	b2db      	uxtb	r3, r3
 800f614:	f107 0208 	add.w	r2, r7, #8
 800f618:	4611      	mov	r1, r2
 800f61a:	4618      	mov	r0, r3
 800f61c:	f00a fdf0 	bl	801a200 <settings_read_coord_data>
 800f620:	4603      	mov	r3, r0
 800f622:	2b00      	cmp	r3, #0
 800f624:	d007      	beq.n	800f636 <coord_system_offset+0x7e>
        value = data.xyz[axis - 1];
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	3b01      	subs	r3, #1
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	3320      	adds	r3, #32
 800f62e:	443b      	add	r3, r7
 800f630:	3b18      	subs	r3, #24
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	61fb      	str	r3, [r7, #28]

    return value;
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	ee07 3a90 	vmov	s15, r3
}
 800f63c:	eeb0 0a67 	vmov.f32	s0, s15
 800f640:	3720      	adds	r7, #32
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	cccccccd 	.word	0xcccccccd

0800f64c <g92_offset_applied>:

static float g92_offset_applied (ngc_param_id_t id)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b083      	sub	sp, #12
 800f650:	af00      	add	r7, sp, #0
 800f652:	4603      	mov	r3, r0
 800f654:	80fb      	strh	r3, [r7, #6]
    return (float)gc_state.g92_coord_offset_applied;
 800f656:	4b07      	ldr	r3, [pc, #28]	; (800f674 <g92_offset_applied+0x28>)
 800f658:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800f65c:	ee07 3a90 	vmov	s15, r3
 800f660:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800f664:	eeb0 0a67 	vmov.f32	s0, s15
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	2000137c 	.word	0x2000137c

0800f678 <g92_offset>:

static float g92_offset (ngc_param_id_t id)
{
 800f678:	b480      	push	{r7}
 800f67a:	b085      	sub	sp, #20
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	4603      	mov	r3, r0
 800f680:	80fb      	strh	r3, [r7, #6]
    uint_fast8_t axis = id % 10;
 800f682:	88fa      	ldrh	r2, [r7, #6]
 800f684:	4b10      	ldr	r3, [pc, #64]	; (800f6c8 <g92_offset+0x50>)
 800f686:	fba3 1302 	umull	r1, r3, r3, r2
 800f68a:	08d9      	lsrs	r1, r3, #3
 800f68c:	460b      	mov	r3, r1
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	440b      	add	r3, r1
 800f692:	005b      	lsls	r3, r3, #1
 800f694:	1ad3      	subs	r3, r2, r3
 800f696:	b29b      	uxth	r3, r3
 800f698:	60fb      	str	r3, [r7, #12]

    return axis <= N_AXIS ? gc_state.g92_coord_offset [axis - 1] : 0.0f;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2b03      	cmp	r3, #3
 800f69e:	d808      	bhi.n	800f6b2 <g92_offset+0x3a>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	3b01      	subs	r3, #1
 800f6a4:	4a09      	ldr	r2, [pc, #36]	; (800f6cc <g92_offset+0x54>)
 800f6a6:	331e      	adds	r3, #30
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	4413      	add	r3, r2
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	e001      	b.n	800f6b6 <g92_offset+0x3e>
 800f6b2:	f04f 0300 	mov.w	r3, #0
 800f6b6:	ee07 3a90 	vmov	s15, r3
}
 800f6ba:	eeb0 0a67 	vmov.f32	s0, s15
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr
 800f6c8:	cccccccd 	.word	0xcccccccd
 800f6cc:	2000137c 	.word	0x2000137c

0800f6d0 <work_position>:

static float work_position (ngc_param_id_t id)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	80fb      	strh	r3, [r7, #6]
    float value = 0.0f;
 800f6da:	f04f 0300 	mov.w	r3, #0
 800f6de:	60fb      	str	r3, [r7, #12]
    uint_fast8_t axis = id % 10;
 800f6e0:	88fa      	ldrh	r2, [r7, #6]
 800f6e2:	4b0d      	ldr	r3, [pc, #52]	; (800f718 <work_position+0x48>)
 800f6e4:	fba3 1302 	umull	r1, r3, r3, r2
 800f6e8:	08d9      	lsrs	r1, r3, #3
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	440b      	add	r3, r1
 800f6f0:	005b      	lsls	r3, r3, #1
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	60bb      	str	r3, [r7, #8]

    if(axis < N_AXIS)
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d804      	bhi.n	800f708 <work_position+0x38>
        value = _relative_pos(axis);
 800f6fe:	68b8      	ldr	r0, [r7, #8]
 800f700:	f7ff fd7a 	bl	800f1f8 <_relative_pos>
 800f704:	ed87 0a03 	vstr	s0, [r7, #12]

    return value;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	ee07 3a90 	vmov	s15, r3
}
 800f70e:	eeb0 0a67 	vmov.f32	s0, s15
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	cccccccd 	.word	0xcccccccd

0800f71c <ngc_param_get>:
    { .id_min = 5401, .id_max = 5409, .get = tool_offset },        // LinuxCNC
    { .id_min = 5420, .id_max = 5428, .get = work_position }       // LinuxCNC
};

bool ngc_param_get (ngc_param_id_t id, float *value)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	4603      	mov	r3, r0
 800f724:	6039      	str	r1, [r7, #0]
 800f726:	80fb      	strh	r3, [r7, #6]
    bool found = id > 0 && id < ngc_ro_params[0].id_min;
 800f728:	88fb      	ldrh	r3, [r7, #6]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d006      	beq.n	800f73c <ngc_param_get+0x20>
 800f72e:	f241 32c5 	movw	r2, #5061	; 0x13c5
 800f732:	88fb      	ldrh	r3, [r7, #6]
 800f734:	4293      	cmp	r3, r2
 800f736:	d201      	bcs.n	800f73c <ngc_param_get+0x20>
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <ngc_param_get+0x22>
 800f73c:	2300      	movs	r3, #0
 800f73e:	75fb      	strb	r3, [r7, #23]
 800f740:	7dfb      	ldrb	r3, [r7, #23]
 800f742:	f003 0301 	and.w	r3, r3, #1
 800f746:	75fb      	strb	r3, [r7, #23]
    uint_fast8_t idx = sizeof(ngc_ro_params) / sizeof(ngc_ro_param_t);
 800f748:	2315      	movs	r3, #21
 800f74a:	613b      	str	r3, [r7, #16]

    *value = 0.0f;
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	f04f 0200 	mov.w	r2, #0
 800f752:	601a      	str	r2, [r3, #0]

    if(found) {
 800f754:	7dfb      	ldrb	r3, [r7, #23]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d016      	beq.n	800f788 <ngc_param_get+0x6c>
        ngc_rw_param_t *rw_param = rw_params;
 800f75a:	4b27      	ldr	r3, [pc, #156]	; (800f7f8 <ngc_param_get+0xdc>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	60fb      	str	r3, [r7, #12]
        while(rw_param) {
 800f760:	e00e      	b.n	800f780 <ngc_param_get+0x64>
            if(rw_param->id == id) {
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	88fa      	ldrh	r2, [r7, #6]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d106      	bne.n	800f77a <ngc_param_get+0x5e>
                *value = rw_param->value;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	685a      	ldr	r2, [r3, #4]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	601a      	str	r2, [r3, #0]
                rw_param = NULL;
 800f774:	2300      	movs	r3, #0
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	e002      	b.n	800f780 <ngc_param_get+0x64>
            } else
                rw_param = rw_param->next;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	689b      	ldr	r3, [r3, #8]
 800f77e:	60fb      	str	r3, [r7, #12]
        while(rw_param) {
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1ed      	bne.n	800f762 <ngc_param_get+0x46>
 800f786:	e032      	b.n	800f7ee <ngc_param_get+0xd2>
        }
    } else do {
        idx--;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	3b01      	subs	r3, #1
 800f78c:	613b      	str	r3, [r7, #16]
        if((found = id >= ngc_ro_params[idx].id_min && id <= ngc_ro_params[idx].id_max))
 800f78e:	4a1b      	ldr	r2, [pc, #108]	; (800f7fc <ngc_param_get+0xe0>)
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 800f796:	88fa      	ldrh	r2, [r7, #6]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d309      	bcc.n	800f7b0 <ngc_param_get+0x94>
 800f79c:	4a17      	ldr	r2, [pc, #92]	; (800f7fc <ngc_param_get+0xe0>)
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	00db      	lsls	r3, r3, #3
 800f7a2:	4413      	add	r3, r2
 800f7a4:	885b      	ldrh	r3, [r3, #2]
 800f7a6:	88fa      	ldrh	r2, [r7, #6]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d801      	bhi.n	800f7b0 <ngc_param_get+0x94>
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	e000      	b.n	800f7b2 <ngc_param_get+0x96>
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	75fb      	strb	r3, [r7, #23]
 800f7b4:	7dfb      	ldrb	r3, [r7, #23]
 800f7b6:	f003 0301 	and.w	r3, r3, #1
 800f7ba:	75fb      	strb	r3, [r7, #23]
 800f7bc:	7dfb      	ldrb	r3, [r7, #23]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00c      	beq.n	800f7dc <ngc_param_get+0xc0>
            *value = ngc_ro_params[idx].get(id);
 800f7c2:	4a0e      	ldr	r2, [pc, #56]	; (800f7fc <ngc_param_get+0xe0>)
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	00db      	lsls	r3, r3, #3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	88fa      	ldrh	r2, [r7, #6]
 800f7ce:	4610      	mov	r0, r2
 800f7d0:	4798      	blx	r3
 800f7d2:	eef0 7a40 	vmov.f32	s15, s0
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	edc3 7a00 	vstr	s15, [r3]
    } while(idx && !found);
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d005      	beq.n	800f7ee <ngc_param_get+0xd2>
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	f083 0301 	eor.w	r3, r3, #1
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d1cc      	bne.n	800f788 <ngc_param_get+0x6c>

    return found;
 800f7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	2000194c 	.word	0x2000194c
 800f7fc:	08032a58 	.word	0x08032a58

0800f800 <ngc_named_param_get_by_id>:


// Named parameters

float ngc_named_param_get_by_id (ncg_name_param_id_t id)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	4603      	mov	r3, r0
 800f808:	71fb      	strb	r3, [r7, #7]
    float value;

    switch(id) {
 800f80a:	79fb      	ldrb	r3, [r7, #7]
 800f80c:	2b2c      	cmp	r3, #44	; 0x2c
 800f80e:	f200 81e8 	bhi.w	800fbe2 <ngc_named_param_get_by_id+0x3e2>
 800f812:	a201      	add	r2, pc, #4	; (adr r2, 800f818 <ngc_named_param_get_by_id+0x18>)
 800f814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f818:	0800f8cd 	.word	0x0800f8cd
 800f81c:	0800f8d3 	.word	0x0800f8d3
 800f820:	0800f8db 	.word	0x0800f8db
 800f824:	0800f8ed 	.word	0x0800f8ed
 800f828:	0800f909 	.word	0x0800f909
 800f82c:	0800f927 	.word	0x0800f927
 800f830:	0800f92d 	.word	0x0800f92d
 800f834:	0800f943 	.word	0x0800f943
 800f838:	0800f959 	.word	0x0800f959
 800f83c:	0800f96f 	.word	0x0800f96f
 800f840:	0800f985 	.word	0x0800f985
 800f844:	0800f99b 	.word	0x0800f99b
 800f848:	0800f9b1 	.word	0x0800f9b1
 800f84c:	0800f9c7 	.word	0x0800f9c7
 800f850:	0800f9f9 	.word	0x0800f9f9
 800f854:	0800fa0f 	.word	0x0800fa0f
 800f858:	0800fa25 	.word	0x0800fa25
 800f85c:	0800fa3b 	.word	0x0800fa3b
 800f860:	0800fa51 	.word	0x0800fa51
 800f864:	0800fa67 	.word	0x0800fa67
 800f868:	0800fa6f 	.word	0x0800fa6f
 800f86c:	0800fa85 	.word	0x0800fa85
 800f870:	0800fa9b 	.word	0x0800fa9b
 800f874:	0800fab7 	.word	0x0800fab7
 800f878:	0800fad3 	.word	0x0800fad3
 800f87c:	0800faef 	.word	0x0800faef
 800f880:	0800fb0b 	.word	0x0800fb0b
 800f884:	0800fb27 	.word	0x0800fb27
 800f888:	0800fb43 	.word	0x0800fb43
 800f88c:	0800fb59 	.word	0x0800fb59
 800f890:	0800fb75 	.word	0x0800fb75
 800f894:	0800fb7d 	.word	0x0800fb7d
 800f898:	0800fb85 	.word	0x0800fb85
 800f89c:	0800fb85 	.word	0x0800fb85
 800f8a0:	0800fb85 	.word	0x0800fb85
 800f8a4:	0800fb85 	.word	0x0800fb85
 800f8a8:	0800fb85 	.word	0x0800fb85
 800f8ac:	0800fb85 	.word	0x0800fb85
 800f8b0:	0800fb85 	.word	0x0800fb85
 800f8b4:	0800fb85 	.word	0x0800fb85
 800f8b8:	0800fb85 	.word	0x0800fb85
 800f8bc:	0800fb95 	.word	0x0800fb95
 800f8c0:	0800fbab 	.word	0x0800fbab
 800f8c4:	0800fbb3 	.word	0x0800fbb3
 800f8c8:	0800fbdb 	.word	0x0800fbdb

        case NGCParam_vmajor:
            value = 1.1f;
 800f8cc:	4b9f      	ldr	r3, [pc, #636]	; (800fb4c <ngc_named_param_get_by_id+0x34c>)
 800f8ce:	60fb      	str	r3, [r7, #12]
            break;
 800f8d0:	e189      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_vminor:
            value = 0.0f; // TODO: derive from version letter?
 800f8d2:	f04f 0300 	mov.w	r3, #0
 800f8d6:	60fb      	str	r3, [r7, #12]
            break;
 800f8d8:	e185      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_line:
            value = (float)gc_state.line_number;
 800f8da:	4b9d      	ldr	r3, [pc, #628]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8de:	ee07 3a90 	vmov	s15, r3
 800f8e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8e6:	edc7 7a03 	vstr	s15, [r7, #12]
            break;
 800f8ea:	e17c      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_motion_mode:
            value = (float)(gc_state.modal.motion * 10); // TODO: Fix G38.x
 800f8ec:	4b98      	ldr	r3, [pc, #608]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f8ee:	881b      	ldrh	r3, [r3, #0]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	4413      	add	r3, r2
 800f8f8:	005b      	lsls	r3, r3, #1
 800f8fa:	ee07 3a90 	vmov	s15, r3
 800f8fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f902:	edc7 7a03 	vstr	s15, [r7, #12]
            break;
 800f906:	e16e      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_plane:
            value = (float)(170 + gc_state.modal.plane_select * 10);
 800f908:	4b91      	ldr	r3, [pc, #580]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f90a:	799b      	ldrb	r3, [r3, #6]
 800f90c:	461a      	mov	r2, r3
 800f90e:	4613      	mov	r3, r2
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	4413      	add	r3, r2
 800f914:	005b      	lsls	r3, r3, #1
 800f916:	33aa      	adds	r3, #170	; 0xaa
 800f918:	ee07 3a90 	vmov	s15, r3
 800f91c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f920:	edc7 7a03 	vstr	s15, [r7, #12]
            break;
 800f924:	e15f      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_ccomp:
            value = 400.0f;
 800f926:	4b8b      	ldr	r3, [pc, #556]	; (800fb54 <ngc_named_param_get_by_id+0x354>)
 800f928:	60fb      	str	r3, [r7, #12]
            break;
 800f92a:	e15c      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_metric:
            value = gc_state.modal.units_imperial ? 0.0f : 1.0f;
 800f92c:	4b88      	ldr	r3, [pc, #544]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f92e:	78db      	ldrb	r3, [r3, #3]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d002      	beq.n	800f93a <ngc_named_param_get_by_id+0x13a>
 800f934:	f04f 0300 	mov.w	r3, #0
 800f938:	e001      	b.n	800f93e <ngc_named_param_get_by_id+0x13e>
 800f93a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f93e:	60fb      	str	r3, [r7, #12]
            break;
 800f940:	e151      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_imperial:
            value = gc_state.modal.units_imperial ? 1.0f : 0.0f;
 800f942:	4b83      	ldr	r3, [pc, #524]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f944:	78db      	ldrb	r3, [r3, #3]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d002      	beq.n	800f950 <ngc_named_param_get_by_id+0x150>
 800f94a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f94e:	e001      	b.n	800f954 <ngc_named_param_get_by_id+0x154>
 800f950:	f04f 0300 	mov.w	r3, #0
 800f954:	60fb      	str	r3, [r7, #12]
            break;
 800f956:	e146      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_absolute:
            value = gc_state.modal.distance_incremental ? 0.0f : 1.0f;
 800f958:	4b7d      	ldr	r3, [pc, #500]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f95a:	791b      	ldrb	r3, [r3, #4]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <ngc_named_param_get_by_id+0x166>
 800f960:	f04f 0300 	mov.w	r3, #0
 800f964:	e001      	b.n	800f96a <ngc_named_param_get_by_id+0x16a>
 800f966:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f96a:	60fb      	str	r3, [r7, #12]
            break;
 800f96c:	e13b      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_incremental:
            value = gc_state.modal.distance_incremental ? 1.0f : 0.0f;
 800f96e:	4b78      	ldr	r3, [pc, #480]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f970:	791b      	ldrb	r3, [r3, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d002      	beq.n	800f97c <ngc_named_param_get_by_id+0x17c>
 800f976:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f97a:	e001      	b.n	800f980 <ngc_named_param_get_by_id+0x180>
 800f97c:	f04f 0300 	mov.w	r3, #0
 800f980:	60fb      	str	r3, [r7, #12]
            break;
 800f982:	e130      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_inverse_time:
            value = gc_state.modal.feed_mode == FeedMode_InverseTime ? 1.0f : 0.0f;
 800f984:	4b72      	ldr	r3, [pc, #456]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f986:	789b      	ldrb	r3, [r3, #2]
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d102      	bne.n	800f992 <ngc_named_param_get_by_id+0x192>
 800f98c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f990:	e001      	b.n	800f996 <ngc_named_param_get_by_id+0x196>
 800f992:	f04f 0300 	mov.w	r3, #0
 800f996:	60fb      	str	r3, [r7, #12]
            break;
 800f998:	e125      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_units_per_minute:
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerMin ? 1.0f : 0.0f;
 800f99a:	4b6d      	ldr	r3, [pc, #436]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f99c:	789b      	ldrb	r3, [r3, #2]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d102      	bne.n	800f9a8 <ngc_named_param_get_by_id+0x1a8>
 800f9a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f9a6:	e001      	b.n	800f9ac <ngc_named_param_get_by_id+0x1ac>
 800f9a8:	f04f 0300 	mov.w	r3, #0
 800f9ac:	60fb      	str	r3, [r7, #12]
            break;
 800f9ae:	e11a      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_units_per_rev:
            value = gc_state.modal.feed_mode == FeedMode_UnitsPerRev ? 1.0f : 0.0f;
 800f9b0:	4b67      	ldr	r3, [pc, #412]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f9b2:	789b      	ldrb	r3, [r3, #2]
 800f9b4:	2b02      	cmp	r3, #2
 800f9b6:	d102      	bne.n	800f9be <ngc_named_param_get_by_id+0x1be>
 800f9b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f9bc:	e001      	b.n	800f9c2 <ngc_named_param_get_by_id+0x1c2>
 800f9be:	f04f 0300 	mov.w	r3, #0
 800f9c2:	60fb      	str	r3, [r7, #12]
            break;
 800f9c4:	e10f      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_coord_system:
            {
                uint_fast16_t id = gc_state.modal.coord_system.id * 10;
 800f9c6:	4b62      	ldr	r3, [pc, #392]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f9c8:	7d1b      	ldrb	r3, [r3, #20]
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	4413      	add	r3, r2
 800f9d2:	005b      	lsls	r3, r3, #1
 800f9d4:	60bb      	str	r3, [r7, #8]

                if(id > (CoordinateSystem_G59 * 10))
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	2b32      	cmp	r3, #50	; 0x32
 800f9da:	d903      	bls.n	800f9e4 <ngc_named_param_get_by_id+0x1e4>
                    id = (CoordinateSystem_G59 * 10) + gc_state.modal.coord_system.id - CoordinateSystem_G59;
 800f9dc:	4b5c      	ldr	r3, [pc, #368]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f9de:	7d1b      	ldrb	r3, [r3, #20]
 800f9e0:	332d      	adds	r3, #45	; 0x2d
 800f9e2:	60bb      	str	r3, [r7, #8]

                value = (float)(540 + id);
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800f9ea:	ee07 3a90 	vmov	s15, r3
 800f9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9f2:	edc7 7a03 	vstr	s15, [r7, #12]
            }
            break;
 800f9f6:	e0f6      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_tool_offset:
            value = gc_state.modal.tool_offset_mode >= ToolLengthOffset_Enable ? 1.0f : 0.0f;
 800f9f8:	4b55      	ldr	r3, [pc, #340]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800f9fa:	79db      	ldrb	r3, [r3, #7]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d002      	beq.n	800fa06 <ngc_named_param_get_by_id+0x206>
 800fa00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa04:	e001      	b.n	800fa0a <ngc_named_param_get_by_id+0x20a>
 800fa06:	f04f 0300 	mov.w	r3, #0
 800fa0a:	60fb      	str	r3, [r7, #12]
            break;
 800fa0c:	e0eb      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_retract_r_plane:
            value = gc_state.modal.retract_mode == CCRetractMode_Previous ? 1.0f : 0.0f;
 800fa0e:	4b50      	ldr	r3, [pc, #320]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fa10:	7f5b      	ldrb	r3, [r3, #29]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d102      	bne.n	800fa1c <ngc_named_param_get_by_id+0x21c>
 800fa16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa1a:	e001      	b.n	800fa20 <ngc_named_param_get_by_id+0x220>
 800fa1c:	f04f 0300 	mov.w	r3, #0
 800fa20:	60fb      	str	r3, [r7, #12]
            break;
 800fa22:	e0e0      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_retract_old_z:
            value = gc_state.modal.retract_mode == CCRetractMode_RPos ? 1.0f : 0.0f;
 800fa24:	4b4a      	ldr	r3, [pc, #296]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fa26:	7f5b      	ldrb	r3, [r3, #29]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d102      	bne.n	800fa32 <ngc_named_param_get_by_id+0x232>
 800fa2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa30:	e001      	b.n	800fa36 <ngc_named_param_get_by_id+0x236>
 800fa32:	f04f 0300 	mov.w	r3, #0
 800fa36:	60fb      	str	r3, [r7, #12]
            break;
 800fa38:	e0d5      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_spindle_rpm_mode:
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? 1.0f : 0.0f;
 800fa3a:	4b45      	ldr	r3, [pc, #276]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fa3c:	7edb      	ldrb	r3, [r3, #27]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d102      	bne.n	800fa48 <ngc_named_param_get_by_id+0x248>
 800fa42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa46:	e001      	b.n	800fa4c <ngc_named_param_get_by_id+0x24c>
 800fa48:	f04f 0300 	mov.w	r3, #0
 800fa4c:	60fb      	str	r3, [r7, #12]
            break;
 800fa4e:	e0ca      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_spindle_css_mode:
            value = gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_CSS ? 1.0f : 0.0f;
 800fa50:	4b3f      	ldr	r3, [pc, #252]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fa52:	7edb      	ldrb	r3, [r3, #27]
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d102      	bne.n	800fa5e <ngc_named_param_get_by_id+0x25e>
 800fa58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa5c:	e001      	b.n	800fa62 <ngc_named_param_get_by_id+0x262>
 800fa5e:	f04f 0300 	mov.w	r3, #0
 800fa62:	60fb      	str	r3, [r7, #12]
            break;
 800fa64:	e0bf      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_ijk_absolute_mode:
            value = 0.0f;
 800fa66:	f04f 0300 	mov.w	r3, #0
 800fa6a:	60fb      	str	r3, [r7, #12]
            break;
 800fa6c:	e0bb      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_lathe_diameter_mode:
            value = gc_state.modal.diameter_mode ? 1.0f : 0.0f;
 800fa6e:	4b38      	ldr	r3, [pc, #224]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fa70:	795b      	ldrb	r3, [r3, #5]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d002      	beq.n	800fa7c <ngc_named_param_get_by_id+0x27c>
 800fa76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa7a:	e001      	b.n	800fa80 <ngc_named_param_get_by_id+0x280>
 800fa7c:	f04f 0300 	mov.w	r3, #0
 800fa80:	60fb      	str	r3, [r7, #12]
            break;
 800fa82:	e0b0      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_lathe_radius_mode:
            value = gc_state.modal.diameter_mode ? 0.0f : 1.0f;
 800fa84:	4b32      	ldr	r3, [pc, #200]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fa86:	795b      	ldrb	r3, [r3, #5]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d002      	beq.n	800fa92 <ngc_named_param_get_by_id+0x292>
 800fa8c:	f04f 0300 	mov.w	r3, #0
 800fa90:	e001      	b.n	800fa96 <ngc_named_param_get_by_id+0x296>
 800fa92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa96:	60fb      	str	r3, [r7, #12]
            break;
 800fa98:	e0a5      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_spindle_on:
            value = gc_state.modal.spindle.state.on ? 1.0f : 0.0f;
 800fa9a:	4b2d      	ldr	r3, [pc, #180]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fa9c:	7e9b      	ldrb	r3, [r3, #26]
 800fa9e:	f003 0301 	and.w	r3, r3, #1
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d002      	beq.n	800faae <ngc_named_param_get_by_id+0x2ae>
 800faa8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800faac:	e001      	b.n	800fab2 <ngc_named_param_get_by_id+0x2b2>
 800faae:	f04f 0300 	mov.w	r3, #0
 800fab2:	60fb      	str	r3, [r7, #12]
            break;
 800fab4:	e097      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_spindle_cw:
            value = gc_state.modal.spindle.state.ccw ? 1.0f : 0.0f;
 800fab6:	4b26      	ldr	r3, [pc, #152]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fab8:	7e9b      	ldrb	r3, [r3, #26]
 800faba:	f003 0302 	and.w	r3, r3, #2
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d002      	beq.n	800faca <ngc_named_param_get_by_id+0x2ca>
 800fac4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fac8:	e001      	b.n	800face <ngc_named_param_get_by_id+0x2ce>
 800faca:	f04f 0300 	mov.w	r3, #0
 800face:	60fb      	str	r3, [r7, #12]
            break;
 800fad0:	e089      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_mist:
            value = gc_state.modal.coolant.mist ? 1.0f : 0.0f;
 800fad2:	4b1f      	ldr	r3, [pc, #124]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fad4:	7e5b      	ldrb	r3, [r3, #25]
 800fad6:	f003 0302 	and.w	r3, r3, #2
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d002      	beq.n	800fae6 <ngc_named_param_get_by_id+0x2e6>
 800fae0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fae4:	e001      	b.n	800faea <ngc_named_param_get_by_id+0x2ea>
 800fae6:	f04f 0300 	mov.w	r3, #0
 800faea:	60fb      	str	r3, [r7, #12]
            break;
 800faec:	e07b      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_flood:
            value = gc_state.modal.coolant.flood ? 1.0f : 0.0f;
 800faee:	4b18      	ldr	r3, [pc, #96]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800faf0:	7e5b      	ldrb	r3, [r3, #25]
 800faf2:	f003 0301 	and.w	r3, r3, #1
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d002      	beq.n	800fb02 <ngc_named_param_get_by_id+0x302>
 800fafc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb00:	e001      	b.n	800fb06 <ngc_named_param_get_by_id+0x306>
 800fb02:	f04f 0300 	mov.w	r3, #0
 800fb06:	60fb      	str	r3, [r7, #12]
            break;
 800fb08:	e06d      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_speed_override:
            value = gc_state.modal.override_ctrl.spindle_rpm_disable ? 0.0f : 1.0f;
 800fb0a:	4b11      	ldr	r3, [pc, #68]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fb0c:	7f1b      	ldrb	r3, [r3, #28]
 800fb0e:	f003 0304 	and.w	r3, r3, #4
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d002      	beq.n	800fb1e <ngc_named_param_get_by_id+0x31e>
 800fb18:	f04f 0300 	mov.w	r3, #0
 800fb1c:	e001      	b.n	800fb22 <ngc_named_param_get_by_id+0x322>
 800fb1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb22:	60fb      	str	r3, [r7, #12]
            break;
 800fb24:	e05f      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_feed_override:
            value = gc_state.modal.override_ctrl.feed_rate_disable ? 0.0f : 1.0f;
 800fb26:	4b0a      	ldr	r3, [pc, #40]	; (800fb50 <ngc_named_param_get_by_id+0x350>)
 800fb28:	7f1b      	ldrb	r3, [r3, #28]
 800fb2a:	f003 0301 	and.w	r3, r3, #1
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d002      	beq.n	800fb3a <ngc_named_param_get_by_id+0x33a>
 800fb34:	f04f 0300 	mov.w	r3, #0
 800fb38:	e001      	b.n	800fb3e <ngc_named_param_get_by_id+0x33e>
 800fb3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb3e:	60fb      	str	r3, [r7, #12]
            break;
 800fb40:	e051      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_adaptive_feed:
            value = 0.0f;
 800fb42:	f04f 0300 	mov.w	r3, #0
 800fb46:	60fb      	str	r3, [r7, #12]
            break;
 800fb48:	e04d      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>
 800fb4a:	bf00      	nop
 800fb4c:	3f8ccccd 	.word	0x3f8ccccd
 800fb50:	2000137c 	.word	0x2000137c
 800fb54:	43c80000 	.word	0x43c80000

        case NGCParam_feed_hold:
            value = gc_state.modal.override_ctrl.feed_hold_disable ? 0.0f : 1.0f;
 800fb58:	4b27      	ldr	r3, [pc, #156]	; (800fbf8 <ngc_named_param_get_by_id+0x3f8>)
 800fb5a:	7f1b      	ldrb	r3, [r3, #28]
 800fb5c:	f003 0302 	and.w	r3, r3, #2
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d002      	beq.n	800fb6c <ngc_named_param_get_by_id+0x36c>
 800fb66:	f04f 0300 	mov.w	r3, #0
 800fb6a:	e001      	b.n	800fb70 <ngc_named_param_get_by_id+0x370>
 800fb6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb70:	60fb      	str	r3, [r7, #12]
            break;
 800fb72:	e038      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_feed:
            value = gc_state.feed_rate;
 800fb74:	4b20      	ldr	r3, [pc, #128]	; (800fbf8 <ngc_named_param_get_by_id+0x3f8>)
 800fb76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb78:	60fb      	str	r3, [r7, #12]
            break;
 800fb7a:	e034      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_rpm:
            value = gc_state.spindle.rpm;
 800fb7c:	4b1e      	ldr	r3, [pc, #120]	; (800fbf8 <ngc_named_param_get_by_id+0x3f8>)
 800fb7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb80:	60fb      	str	r3, [r7, #12]
            break;
 800fb82:	e030      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>
        case NGCParam_u:
            //no break
        case NGCParam_v:
            //no break
        case NGCParam_w:
            value = _relative_pos(id - NGCParam_x);
 800fb84:	79fb      	ldrb	r3, [r7, #7]
 800fb86:	3b20      	subs	r3, #32
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff fb35 	bl	800f1f8 <_relative_pos>
 800fb8e:	ed87 0a03 	vstr	s0, [r7, #12]
            break;
 800fb92:	e028      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_current_tool:
            value = (float)gc_state.tool->tool_id;
 800fb94:	4b18      	ldr	r3, [pc, #96]	; (800fbf8 <ngc_named_param_get_by_id+0x3f8>)
 800fb96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	ee07 3a90 	vmov	s15, r3
 800fba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fba4:	edc7 7a03 	vstr	s15, [r7, #12]
            break;
 800fba8:	e01d      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_current_pocket:
            value = 0.0f;
 800fbaa:	f04f 0300 	mov.w	r3, #0
 800fbae:	60fb      	str	r3, [r7, #12]
            break;
 800fbb0:	e019      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_selected_tool:
            value = gc_state.tool_pending != gc_state.tool->tool_id ? (float)gc_state.tool_pending : -1.0f;
 800fbb2:	4b11      	ldr	r3, [pc, #68]	; (800fbf8 <ngc_named_param_get_by_id+0x3f8>)
 800fbb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fbb6:	4b10      	ldr	r3, [pc, #64]	; (800fbf8 <ngc_named_param_get_by_id+0x3f8>)
 800fbb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbbc:	691b      	ldr	r3, [r3, #16]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d006      	beq.n	800fbd0 <ngc_named_param_get_by_id+0x3d0>
 800fbc2:	4b0d      	ldr	r3, [pc, #52]	; (800fbf8 <ngc_named_param_get_by_id+0x3f8>)
 800fbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbc6:	ee07 3a90 	vmov	s15, r3
 800fbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbce:	e001      	b.n	800fbd4 <ngc_named_param_get_by_id+0x3d4>
 800fbd0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800fbd4:	edc7 7a03 	vstr	s15, [r7, #12]
            break;
 800fbd8:	e005      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        case NGCParam_selected_pocket:
            value = 0.0f;
 800fbda:	f04f 0300 	mov.w	r3, #0
 800fbde:	60fb      	str	r3, [r7, #12]
            break;
 800fbe0:	e001      	b.n	800fbe6 <ngc_named_param_get_by_id+0x3e6>

        default:
            value = NAN;
 800fbe2:	4b06      	ldr	r3, [pc, #24]	; (800fbfc <ngc_named_param_get_by_id+0x3fc>)
 800fbe4:	60fb      	str	r3, [r7, #12]
    }

    return value;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	ee07 3a90 	vmov	s15, r3
}
 800fbec:	eeb0 0a67 	vmov.f32	s0, s15
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	2000137c 	.word	0x2000137c
 800fbfc:	7fc00000 	.word	0x7fc00000

0800fc00 <ngc_named_param_get>:

bool ngc_named_param_get (char *name, float *value)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b088      	sub	sp, #32
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
    char c, *s = name;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	61fb      	str	r3, [r7, #28]
    bool found = false;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	76fb      	strb	r3, [r7, #27]
    uint_fast8_t idx = sizeof(ngc_named_ro_param) / sizeof(ngc_named_ro_param_t);
 800fc12:	232d      	movs	r3, #45	; 0x2d
 800fc14:	617b      	str	r3, [r7, #20]

    // Lowercase name
    while((c = *s))
 800fc16:	e00f      	b.n	800fc38 <ngc_named_param_get+0x38>
        *s++ = LCAPS(c);
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	2b40      	cmp	r3, #64	; 0x40
 800fc1c:	d907      	bls.n	800fc2e <ngc_named_param_get+0x2e>
 800fc1e:	7bfb      	ldrb	r3, [r7, #15]
 800fc20:	2b5a      	cmp	r3, #90	; 0x5a
 800fc22:	d804      	bhi.n	800fc2e <ngc_named_param_get+0x2e>
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
 800fc26:	f043 0320 	orr.w	r3, r3, #32
 800fc2a:	b2da      	uxtb	r2, r3
 800fc2c:	e000      	b.n	800fc30 <ngc_named_param_get+0x30>
 800fc2e:	7bfa      	ldrb	r2, [r7, #15]
 800fc30:	69fb      	ldr	r3, [r7, #28]
 800fc32:	1c59      	adds	r1, r3, #1
 800fc34:	61f9      	str	r1, [r7, #28]
 800fc36:	701a      	strb	r2, [r3, #0]
    while((c = *s))
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	73fb      	strb	r3, [r7, #15]
 800fc3e:	7bfb      	ldrb	r3, [r7, #15]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d1e9      	bne.n	800fc18 <ngc_named_param_get+0x18>

    *value = 0.0f;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	f04f 0200 	mov.w	r2, #0
 800fc4a:	601a      	str	r2, [r3, #0]

     if(*name == '_') do {
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2b5f      	cmp	r3, #95	; 0x5f
 800fc52:	d131      	bne.n	800fcb8 <ngc_named_param_get+0xb8>
        idx--;
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	3b01      	subs	r3, #1
 800fc58:	617b      	str	r3, [r7, #20]
        if((found = !strcmp(name, ngc_named_ro_param[idx].name)))
 800fc5a:	492e      	ldr	r1, [pc, #184]	; (800fd14 <ngc_named_param_get+0x114>)
 800fc5c:	697a      	ldr	r2, [r7, #20]
 800fc5e:	4613      	mov	r3, r2
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	4413      	add	r3, r2
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	440b      	add	r3, r1
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7f0 fb03 	bl	8000278 <strcmp>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	bf0c      	ite	eq
 800fc78:	2301      	moveq	r3, #1
 800fc7a:	2300      	movne	r3, #0
 800fc7c:	76fb      	strb	r3, [r7, #27]
 800fc7e:	7efb      	ldrb	r3, [r7, #27]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d010      	beq.n	800fca6 <ngc_named_param_get+0xa6>
            *value = ngc_named_param_get_by_id(ngc_named_ro_param[idx].id);
 800fc84:	4923      	ldr	r1, [pc, #140]	; (800fd14 <ngc_named_param_get+0x114>)
 800fc86:	697a      	ldr	r2, [r7, #20]
 800fc88:	4613      	mov	r3, r2
 800fc8a:	005b      	lsls	r3, r3, #1
 800fc8c:	4413      	add	r3, r2
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	440b      	add	r3, r1
 800fc92:	3304      	adds	r3, #4
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7ff fdb2 	bl	800f800 <ngc_named_param_get_by_id>
 800fc9c:	eef0 7a40 	vmov.f32	s15, s0
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	edc3 7a00 	vstr	s15, [r3]
    } while(idx && !found);
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d005      	beq.n	800fcb8 <ngc_named_param_get+0xb8>
 800fcac:	7efb      	ldrb	r3, [r7, #27]
 800fcae:	f083 0301 	eor.w	r3, r3, #1
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1cd      	bne.n	800fc54 <ngc_named_param_get+0x54>

    if(!found) {
 800fcb8:	7efb      	ldrb	r3, [r7, #27]
 800fcba:	f083 0301 	eor.w	r3, r3, #1
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d022      	beq.n	800fd0a <ngc_named_param_get+0x10a>
        ngc_named_rw_param_t *rw_param = rw_global_params;
 800fcc4:	4b14      	ldr	r3, [pc, #80]	; (800fd18 <ngc_named_param_get+0x118>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	613b      	str	r3, [r7, #16]
        while(rw_param && !found) {
 800fcca:	e015      	b.n	800fcf8 <ngc_named_param_get+0xf8>
            if((found = !strcmp(rw_param->name, name)))
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	6879      	ldr	r1, [r7, #4]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7f0 fad1 	bl	8000278 <strcmp>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	bf0c      	ite	eq
 800fcdc:	2301      	moveq	r3, #1
 800fcde:	2300      	movne	r3, #0
 800fce0:	76fb      	strb	r3, [r7, #27]
 800fce2:	7efb      	ldrb	r3, [r7, #27]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d004      	beq.n	800fcf2 <ngc_named_param_get+0xf2>
                *value = rw_param->value;
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	699a      	ldr	r2, [r3, #24]
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	601a      	str	r2, [r3, #0]
 800fcf0:	e002      	b.n	800fcf8 <ngc_named_param_get+0xf8>
            else
                rw_param = rw_param->next;
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	69db      	ldr	r3, [r3, #28]
 800fcf6:	613b      	str	r3, [r7, #16]
        while(rw_param && !found) {
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d005      	beq.n	800fd0a <ngc_named_param_get+0x10a>
 800fcfe:	7efb      	ldrb	r3, [r7, #27]
 800fd00:	f083 0301 	eor.w	r3, r3, #1
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1e0      	bne.n	800fccc <ngc_named_param_get+0xcc>
        }
    }

    return found;
 800fd0a:	7efb      	ldrb	r3, [r7, #27]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3720      	adds	r7, #32
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	08032b00 	.word	0x08032b00
 800fd18:	20001950 	.word	0x20001950

0800fd1c <uitoa>:
#endif
};

// Converts an uint32 variable to string.
char *uitoa (uint32_t n)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b085      	sub	sp, #20
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
    char *bptr = buf + sizeof(buf);
 800fd24:	4b19      	ldr	r3, [pc, #100]	; (800fd8c <uitoa+0x70>)
 800fd26:	60fb      	str	r3, [r7, #12]

    *--bptr = '\0';
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	60fb      	str	r3, [r7, #12]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2200      	movs	r2, #0
 800fd32:	701a      	strb	r2, [r3, #0]

    if (n == 0)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d11e      	bne.n	800fd78 <uitoa+0x5c>
        *--bptr = '0';
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	60fb      	str	r3, [r7, #12]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2230      	movs	r2, #48	; 0x30
 800fd44:	701a      	strb	r2, [r3, #0]
 800fd46:	e01a      	b.n	800fd7e <uitoa+0x62>
    else while (n) {
        *--bptr = '0' + (n % 10);
 800fd48:	6879      	ldr	r1, [r7, #4]
 800fd4a:	4b11      	ldr	r3, [pc, #68]	; (800fd90 <uitoa+0x74>)
 800fd4c:	fba3 2301 	umull	r2, r3, r3, r1
 800fd50:	08da      	lsrs	r2, r3, #3
 800fd52:	4613      	mov	r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4413      	add	r3, r2
 800fd58:	005b      	lsls	r3, r3, #1
 800fd5a:	1aca      	subs	r2, r1, r3
 800fd5c:	b2d3      	uxtb	r3, r2
 800fd5e:	68fa      	ldr	r2, [r7, #12]
 800fd60:	3a01      	subs	r2, #1
 800fd62:	60fa      	str	r2, [r7, #12]
 800fd64:	3330      	adds	r3, #48	; 0x30
 800fd66:	b2da      	uxtb	r2, r3
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	701a      	strb	r2, [r3, #0]
        n /= 10;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a08      	ldr	r2, [pc, #32]	; (800fd90 <uitoa+0x74>)
 800fd70:	fba2 2303 	umull	r2, r3, r2, r3
 800fd74:	08db      	lsrs	r3, r3, #3
 800fd76:	607b      	str	r3, [r7, #4]
    else while (n) {
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d1e4      	bne.n	800fd48 <uitoa+0x2c>
    }

    return bptr;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3714      	adds	r7, #20
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr
 800fd8c:	20001963 	.word	0x20001963
 800fd90:	cccccccd 	.word	0xcccccccd

0800fd94 <ftoa>:

// Convert float to string by immediately converting to integers.
// Number of decimal places, which are tracked by a counter, must be set by the user.
// The integers is then efficiently converted to a string.
char *ftoa (float n, uint8_t decimal_places)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b089      	sub	sp, #36	; 0x24
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	ed87 0a01 	vstr	s0, [r7, #4]
 800fd9e:	4603      	mov	r3, r0
 800fda0:	70fb      	strb	r3, [r7, #3]
    bool isNegative;
    char *bptr = buf + sizeof(buf);
 800fda2:	4b61      	ldr	r3, [pc, #388]	; (800ff28 <ftoa+0x194>)
 800fda4:	61fb      	str	r3, [r7, #28]

    *--bptr = '\0';
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	61fb      	str	r3, [r7, #28]
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	701a      	strb	r2, [r3, #0]

    if ((isNegative = n < 0.0f))
 800fdb2:	edd7 7a01 	vldr	s15, [r7, #4]
 800fdb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbe:	bf4c      	ite	mi
 800fdc0:	2301      	movmi	r3, #1
 800fdc2:	2300      	movpl	r3, #0
 800fdc4:	73fb      	strb	r3, [r7, #15]
 800fdc6:	7bfb      	ldrb	r3, [r7, #15]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d005      	beq.n	800fdd8 <ftoa+0x44>
        n = -n;
 800fdcc:	edd7 7a01 	vldr	s15, [r7, #4]
 800fdd0:	eef1 7a67 	vneg.f32	s15, s15
 800fdd4:	edc7 7a01 	vstr	s15, [r7, #4]

    n += froundvalues[decimal_places];
 800fdd8:	78fb      	ldrb	r3, [r7, #3]
 800fdda:	4a54      	ldr	r2, [pc, #336]	; (800ff2c <ftoa+0x198>)
 800fddc:	009b      	lsls	r3, r3, #2
 800fdde:	4413      	add	r3, r2
 800fde0:	edd3 7a00 	vldr	s15, [r3]
 800fde4:	ed97 7a01 	vldr	s14, [r7, #4]
 800fde8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdec:	edc7 7a01 	vstr	s15, [r7, #4]

    uint32_t a = (uint32_t)n;
 800fdf0:	edd7 7a01 	vldr	s15, [r7, #4]
 800fdf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdf8:	ee17 3a90 	vmov	r3, s15
 800fdfc:	61bb      	str	r3, [r7, #24]

    if (decimal_places) {
 800fdfe:	78fb      	ldrb	r3, [r7, #3]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d055      	beq.n	800feb0 <ftoa+0x11c>

        n -= (float)a;
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	ee07 3a90 	vmov	s15, r3
 800fe0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe0e:	ed97 7a01 	vldr	s14, [r7, #4]
 800fe12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe16:	edc7 7a01 	vstr	s15, [r7, #4]

        uint_fast8_t decimals = decimal_places;
 800fe1a:	78fb      	ldrb	r3, [r7, #3]
 800fe1c:	617b      	str	r3, [r7, #20]
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 800fe1e:	e00a      	b.n	800fe36 <ftoa+0xa2>
            n *= 100.0f;
 800fe20:	edd7 7a01 	vldr	s15, [r7, #4]
 800fe24:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800ff30 <ftoa+0x19c>
 800fe28:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe2c:	edc7 7a01 	vstr	s15, [r7, #4]
            decimals -= 2;
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	3b02      	subs	r3, #2
 800fe34:	617b      	str	r3, [r7, #20]
        while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d8f1      	bhi.n	800fe20 <ftoa+0x8c>
        }

        if (decimals)
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d007      	beq.n	800fe52 <ftoa+0xbe>
            n *= 10.0f;
 800fe42:	edd7 7a01 	vldr	s15, [r7, #4]
 800fe46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800fe4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe4e:	edc7 7a01 	vstr	s15, [r7, #4]

        uint32_t b = (uint32_t)n;
 800fe52:	edd7 7a01 	vldr	s15, [r7, #4]
 800fe56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe5a:	ee17 3a90 	vmov	r3, s15
 800fe5e:	613b      	str	r3, [r7, #16]

        while(decimal_places--) {
 800fe60:	e021      	b.n	800fea6 <ftoa+0x112>
            if(b) {
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d018      	beq.n	800fe9a <ftoa+0x106>
                *--bptr = (b % 10) + '0'; // Get digit
 800fe68:	6939      	ldr	r1, [r7, #16]
 800fe6a:	4b32      	ldr	r3, [pc, #200]	; (800ff34 <ftoa+0x1a0>)
 800fe6c:	fba3 2301 	umull	r2, r3, r3, r1
 800fe70:	08da      	lsrs	r2, r3, #3
 800fe72:	4613      	mov	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4413      	add	r3, r2
 800fe78:	005b      	lsls	r3, r3, #1
 800fe7a:	1aca      	subs	r2, r1, r3
 800fe7c:	b2d3      	uxtb	r3, r2
 800fe7e:	69fa      	ldr	r2, [r7, #28]
 800fe80:	3a01      	subs	r2, #1
 800fe82:	61fa      	str	r2, [r7, #28]
 800fe84:	3330      	adds	r3, #48	; 0x30
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	701a      	strb	r2, [r3, #0]
                b /= 10;
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	4a29      	ldr	r2, [pc, #164]	; (800ff34 <ftoa+0x1a0>)
 800fe90:	fba2 2303 	umull	r2, r3, r2, r3
 800fe94:	08db      	lsrs	r3, r3, #3
 800fe96:	613b      	str	r3, [r7, #16]
 800fe98:	e005      	b.n	800fea6 <ftoa+0x112>
            } else
                *--bptr = '0';
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	61fb      	str	r3, [r7, #28]
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	2230      	movs	r2, #48	; 0x30
 800fea4:	701a      	strb	r2, [r3, #0]
        while(decimal_places--) {
 800fea6:	78fb      	ldrb	r3, [r7, #3]
 800fea8:	1e5a      	subs	r2, r3, #1
 800feaa:	70fa      	strb	r2, [r7, #3]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1d8      	bne.n	800fe62 <ftoa+0xce>
        }
    }

    *--bptr = '.'; // Always add decimal point (TODO: is this really needed?)
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	3b01      	subs	r3, #1
 800feb4:	61fb      	str	r3, [r7, #28]
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	222e      	movs	r2, #46	; 0x2e
 800feba:	701a      	strb	r2, [r3, #0]

    if(a == 0)
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d11e      	bne.n	800ff00 <ftoa+0x16c>
        *--bptr = '0';
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	3b01      	subs	r3, #1
 800fec6:	61fb      	str	r3, [r7, #28]
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	2230      	movs	r2, #48	; 0x30
 800fecc:	701a      	strb	r2, [r3, #0]
 800fece:	e01a      	b.n	800ff06 <ftoa+0x172>

    else while(a) {
        *--bptr = (a % 10) + '0'; // Get digit
 800fed0:	69b9      	ldr	r1, [r7, #24]
 800fed2:	4b18      	ldr	r3, [pc, #96]	; (800ff34 <ftoa+0x1a0>)
 800fed4:	fba3 2301 	umull	r2, r3, r3, r1
 800fed8:	08da      	lsrs	r2, r3, #3
 800feda:	4613      	mov	r3, r2
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	005b      	lsls	r3, r3, #1
 800fee2:	1aca      	subs	r2, r1, r3
 800fee4:	b2d3      	uxtb	r3, r2
 800fee6:	69fa      	ldr	r2, [r7, #28]
 800fee8:	3a01      	subs	r2, #1
 800feea:	61fa      	str	r2, [r7, #28]
 800feec:	3330      	adds	r3, #48	; 0x30
 800feee:	b2da      	uxtb	r2, r3
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	701a      	strb	r2, [r3, #0]
        a /= 10;
 800fef4:	69bb      	ldr	r3, [r7, #24]
 800fef6:	4a0f      	ldr	r2, [pc, #60]	; (800ff34 <ftoa+0x1a0>)
 800fef8:	fba2 2303 	umull	r2, r3, r2, r3
 800fefc:	08db      	lsrs	r3, r3, #3
 800fefe:	61bb      	str	r3, [r7, #24]
    else while(a) {
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d1e4      	bne.n	800fed0 <ftoa+0x13c>
    }

    if(isNegative)
 800ff06:	7bfb      	ldrb	r3, [r7, #15]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d005      	beq.n	800ff18 <ftoa+0x184>
        *--bptr = '-';
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	61fb      	str	r3, [r7, #28]
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	222d      	movs	r2, #45	; 0x2d
 800ff16:	701a      	strb	r2, [r3, #0]

    return bptr;
 800ff18:	69fb      	ldr	r3, [r7, #28]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3724      	adds	r7, #36	; 0x24
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop
 800ff28:	20001963 	.word	0x20001963
 800ff2c:	08032d1c 	.word	0x08032d1c
 800ff30:	42c80000 	.word	0x42c80000
 800ff34:	cccccccd 	.word	0xcccccccd

0800ff38 <read_uint>:

// Extracts an unsigned integer value from a string.
status_code_t read_uint (char *line, uint_fast8_t *char_counter, uint32_t *uint_ptr)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b08b      	sub	sp, #44	; 0x2c
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
    char *ptr = line + *char_counter;
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	4413      	add	r3, r2
 800ff4c:	627b      	str	r3, [r7, #36]	; 0x24
    int_fast8_t exp = 0;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	623b      	str	r3, [r7, #32]
    uint_fast8_t ndigit = 0, c;
 800ff52:	2300      	movs	r3, #0
 800ff54:	61fb      	str	r3, [r7, #28]
    uint32_t intval = 0;
 800ff56:	2300      	movs	r3, #0
 800ff58:	617b      	str	r3, [r7, #20]
    bool isdecimal = false, ok = false;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	74fb      	strb	r3, [r7, #19]
 800ff5e:	2300      	movs	r3, #0
 800ff60:	74bb      	strb	r3, [r7, #18]

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 800ff62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff64:	1c5a      	adds	r2, r3, #1
 800ff66:	627a      	str	r2, [r7, #36]	; 0x24
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	61bb      	str	r3, [r7, #24]

    if (c == '-')
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	2b2d      	cmp	r3, #45	; 0x2d
 800ff70:	d101      	bne.n	800ff76 <read_uint+0x3e>
        return Status_NegativeValue;
 800ff72:	2304      	movs	r3, #4
 800ff74:	e06b      	b.n	801004e <read_uint+0x116>

    // Skip initial sign character
    if (c == '+')
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	2b2b      	cmp	r3, #43	; 0x2b
 800ff7a:	d152      	bne.n	8010022 <read_uint+0xea>
        c = *ptr++;
 800ff7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7e:	1c5a      	adds	r2, r3, #1
 800ff80:	627a      	str	r2, [r7, #36]	; 0x24
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	61bb      	str	r3, [r7, #24]

    // Extract number into fast integer. Track decimal in terms of exponent value.
    while(c) {
 800ff86:	e04c      	b.n	8010022 <read_uint+0xea>
        c -= '0';
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	3b30      	subs	r3, #48	; 0x30
 800ff8c:	61bb      	str	r3, [r7, #24]
        if (c <= 9) {
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	2b09      	cmp	r3, #9
 800ff92:	d835      	bhi.n	8010000 <read_uint+0xc8>
            ok = true;
 800ff94:	2301      	movs	r3, #1
 800ff96:	74bb      	strb	r3, [r7, #18]
            if(!isdecimal && (c != 0 || intval))
 800ff98:	7cfb      	ldrb	r3, [r7, #19]
 800ff9a:	f083 0301 	eor.w	r3, r3, #1
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d008      	beq.n	800ffb6 <read_uint+0x7e>
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d102      	bne.n	800ffb0 <read_uint+0x78>
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d002      	beq.n	800ffb6 <read_uint+0x7e>
                ndigit++;
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	61fb      	str	r3, [r7, #28]
            if (isdecimal && c != 0)
 800ffb6:	7cfb      	ldrb	r3, [r7, #19]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d004      	beq.n	800ffc6 <read_uint+0x8e>
 800ffbc:	69bb      	ldr	r3, [r7, #24]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d001      	beq.n	800ffc6 <read_uint+0x8e>
                return Status_GcodeCommandValueNotInteger;
 800ffc2:	2317      	movs	r3, #23
 800ffc4:	e043      	b.n	801004e <read_uint+0x116>

            if ((ndigit <= 9 || c <= 4) && intval <= 429496729) {
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	2b09      	cmp	r3, #9
 800ffca:	d902      	bls.n	800ffd2 <read_uint+0x9a>
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	2b04      	cmp	r3, #4
 800ffd0:	d80c      	bhi.n	800ffec <read_uint+0xb4>
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	4a21      	ldr	r2, [pc, #132]	; (801005c <read_uint+0x124>)
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d808      	bhi.n	800ffec <read_uint+0xb4>
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	009a      	lsls	r2, r3, #2
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	69ba      	ldr	r2, [r7, #24]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	617b      	str	r3, [r7, #20]
 800ffea:	e015      	b.n	8010018 <read_uint+0xe0>
            } else if (!isdecimal)
 800ffec:	7cfb      	ldrb	r3, [r7, #19]
 800ffee:	f083 0301 	eor.w	r3, r3, #1
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d00f      	beq.n	8010018 <read_uint+0xe0>
                exp++;  // Drop overflow digits
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	3301      	adds	r3, #1
 800fffc:	623b      	str	r3, [r7, #32]
 800fffe:	e00b      	b.n	8010018 <read_uint+0xe0>
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	f113 0f02 	cmn.w	r3, #2
 8010006:	d10f      	bne.n	8010028 <read_uint+0xf0>
 8010008:	7cfb      	ldrb	r3, [r7, #19]
 801000a:	f083 0301 	eor.w	r3, r3, #1
 801000e:	b2db      	uxtb	r3, r3
 8010010:	2b00      	cmp	r3, #0
 8010012:	d009      	beq.n	8010028 <read_uint+0xf0>
            isdecimal = true;
 8010014:	2301      	movs	r3, #1
 8010016:	74fb      	strb	r3, [r7, #19]
         else
            break;

        c = *ptr++;
 8010018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001a:	1c5a      	adds	r2, r3, #1
 801001c:	627a      	str	r2, [r7, #36]	; 0x24
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	61bb      	str	r3, [r7, #24]
    while(c) {
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d1af      	bne.n	800ff88 <read_uint+0x50>
    }

    // Return if no digits have been read.

    if (!ok)
 8010028:	7cbb      	ldrb	r3, [r7, #18]
 801002a:	f083 0301 	eor.w	r3, r3, #1
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b00      	cmp	r3, #0
 8010032:	d001      	beq.n	8010038 <read_uint+0x100>
        return Status_BadNumberFormat;
 8010034:	2302      	movs	r3, #2
 8010036:	e00a      	b.n	801004e <read_uint+0x116>

    *uint_ptr = intval; // Assign value.
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	697a      	ldr	r2, [r7, #20]
 801003c:	601a      	str	r2, [r3, #0]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 801003e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	3b01      	subs	r3, #1
 8010046:	461a      	mov	r2, r3
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	601a      	str	r2, [r3, #0]

    return Status_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	372c      	adds	r7, #44	; 0x2c
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop
 801005c:	19999999 	.word	0x19999999

08010060 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
bool read_float (char *line, uint_fast8_t *char_counter, float *float_ptr)
{
 8010060:	b480      	push	{r7}
 8010062:	b08d      	sub	sp, #52	; 0x34
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
    char *ptr = line + *char_counter;
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	4413      	add	r3, r2
 8010074:	62fb      	str	r3, [r7, #44]	; 0x2c
    int_fast8_t exp = 0;
 8010076:	2300      	movs	r3, #0
 8010078:	62bb      	str	r3, [r7, #40]	; 0x28
    uint_fast8_t ndigit = 0, c;
 801007a:	2300      	movs	r3, #0
 801007c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t intval = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	61fb      	str	r3, [r7, #28]
    bool isnegative, isdecimal = false, ok = false;
 8010082:	2300      	movs	r3, #0
 8010084:	76fb      	strb	r3, [r7, #27]
 8010086:	2300      	movs	r3, #0
 8010088:	76bb      	strb	r3, [r7, #26]

    // Grab first character and increment pointer. No spaces assumed in line.
    c = *ptr++;
 801008a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008c:	1c5a      	adds	r2, r3, #1
 801008e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	623b      	str	r3, [r7, #32]

    // Capture initial sign character
    if ((isnegative = (c == '-')) || c == '+')
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	2b2d      	cmp	r3, #45	; 0x2d
 8010098:	bf0c      	ite	eq
 801009a:	2301      	moveq	r3, #1
 801009c:	2300      	movne	r3, #0
 801009e:	74fb      	strb	r3, [r7, #19]
 80100a0:	7cfb      	ldrb	r3, [r7, #19]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d102      	bne.n	80100ac <read_float+0x4c>
 80100a6:	6a3b      	ldr	r3, [r7, #32]
 80100a8:	2b2b      	cmp	r3, #43	; 0x2b
 80100aa:	d143      	bne.n	8010134 <read_float+0xd4>
        c = *ptr++;
 80100ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ae:	1c5a      	adds	r2, r3, #1
 80100b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	623b      	str	r3, [r7, #32]

    // Extract number into fast integer. Track decimal in terms of exponent value.
    while(c) {
 80100b6:	e03d      	b.n	8010134 <read_float+0xd4>
        c -= '0';
 80100b8:	6a3b      	ldr	r3, [r7, #32]
 80100ba:	3b30      	subs	r3, #48	; 0x30
 80100bc:	623b      	str	r3, [r7, #32]
        if (c <= 9) {
 80100be:	6a3b      	ldr	r3, [r7, #32]
 80100c0:	2b09      	cmp	r3, #9
 80100c2:	d826      	bhi.n	8010112 <read_float+0xb2>
            ok = true;
 80100c4:	2301      	movs	r3, #1
 80100c6:	76bb      	strb	r3, [r7, #26]
            if(c != 0 || intval)
 80100c8:	6a3b      	ldr	r3, [r7, #32]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d102      	bne.n	80100d4 <read_float+0x74>
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <read_float+0x7a>
                ndigit++;
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	3301      	adds	r3, #1
 80100d8:	627b      	str	r3, [r7, #36]	; 0x24
            if (ndigit <= MAX_INT_DIGITS) {
 80100da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100dc:	2b09      	cmp	r3, #9
 80100de:	d80e      	bhi.n	80100fe <read_float+0x9e>
                if (isdecimal)
 80100e0:	7efb      	ldrb	r3, [r7, #27]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d002      	beq.n	80100ec <read_float+0x8c>
                    exp--;
 80100e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e8:	3b01      	subs	r3, #1
 80100ea:	62bb      	str	r3, [r7, #40]	; 0x28
                intval = (((intval << 2) + intval) << 1) + c; // intval * 10 + c
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	009a      	lsls	r2, r3, #2
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	4413      	add	r3, r2
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	6a3a      	ldr	r2, [r7, #32]
 80100f8:	4413      	add	r3, r2
 80100fa:	61fb      	str	r3, [r7, #28]
 80100fc:	e015      	b.n	801012a <read_float+0xca>
            } else if (!isdecimal)
 80100fe:	7efb      	ldrb	r3, [r7, #27]
 8010100:	f083 0301 	eor.w	r3, r3, #1
 8010104:	b2db      	uxtb	r3, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	d00f      	beq.n	801012a <read_float+0xca>
                exp++;  // Drop overflow digits
 801010a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010c:	3301      	adds	r3, #1
 801010e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010110:	e00b      	b.n	801012a <read_float+0xca>
        } else if (c == (uint_fast8_t)('.' - '0') && !isdecimal)
 8010112:	6a3b      	ldr	r3, [r7, #32]
 8010114:	f113 0f02 	cmn.w	r3, #2
 8010118:	d10f      	bne.n	801013a <read_float+0xda>
 801011a:	7efb      	ldrb	r3, [r7, #27]
 801011c:	f083 0301 	eor.w	r3, r3, #1
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d009      	beq.n	801013a <read_float+0xda>
            isdecimal = true;
 8010126:	2301      	movs	r3, #1
 8010128:	76fb      	strb	r3, [r7, #27]
         else
            break;

        c = *ptr++;
 801012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012c:	1c5a      	adds	r2, r3, #1
 801012e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	623b      	str	r3, [r7, #32]
    while(c) {
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d1be      	bne.n	80100b8 <read_float+0x58>
    }

    // Return if no digits have been read.
    if (!ok)
 801013a:	7ebb      	ldrb	r3, [r7, #26]
 801013c:	f083 0301 	eor.w	r3, r3, #1
 8010140:	b2db      	uxtb	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	d001      	beq.n	801014a <read_float+0xea>
        return false;
 8010146:	2300      	movs	r3, #0
 8010148:	e04f      	b.n	80101ea <read_float+0x18a>

    // Convert integer into floating point.
    float fval = (float)intval;
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	ee07 3a90 	vmov	s15, r3
 8010150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010154:	edc7 7a05 	vstr	s15, [r7, #20]

    // Apply decimal. Should perform no more than two floating point multiplications for the
    // expected range of E0 to E-4.
    if (fval != 0.0f) {
 8010158:	edd7 7a05 	vldr	s15, [r7, #20]
 801015c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010164:	d02c      	beq.n	80101c0 <read_float+0x160>
        while (exp <= -2) {
 8010166:	e00a      	b.n	801017e <read_float+0x11e>
            fval *= 0.01f;
 8010168:	edd7 7a05 	vldr	s15, [r7, #20]
 801016c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80101f8 <read_float+0x198>
 8010170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010174:	edc7 7a05 	vstr	s15, [r7, #20]
            exp += 2;
 8010178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017a:	3302      	adds	r3, #2
 801017c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (exp <= -2) {
 801017e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010184:	dbf0      	blt.n	8010168 <read_float+0x108>
        }
        if (exp < 0)
 8010186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010188:	2b00      	cmp	r3, #0
 801018a:	da08      	bge.n	801019e <read_float+0x13e>
            fval *= 0.1f;
 801018c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010190:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80101fc <read_float+0x19c>
 8010194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010198:	edc7 7a05 	vstr	s15, [r7, #20]
 801019c:	e010      	b.n	80101c0 <read_float+0x160>
        else if (exp > 0) do {
 801019e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	dd0d      	ble.n	80101c0 <read_float+0x160>
            fval *= 10.0f;
 80101a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80101a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80101ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101b0:	edc7 7a05 	vstr	s15, [r7, #20]
        } while (--exp > 0);
 80101b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b6:	3b01      	subs	r3, #1
 80101b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80101ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101bc:	2b00      	cmp	r3, #0
 80101be:	dcf1      	bgt.n	80101a4 <read_float+0x144>
    }

    // Assign floating point value with correct sign.
    *float_ptr = isnegative ? - fval : fval;
 80101c0:	7cfb      	ldrb	r3, [r7, #19]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d004      	beq.n	80101d0 <read_float+0x170>
 80101c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80101ca:	eef1 7a67 	vneg.f32	s15, s15
 80101ce:	e001      	b.n	80101d4 <read_float+0x174>
 80101d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	edc3 7a00 	vstr	s15, [r3]
    *char_counter = ptr - line - 1; // Set char_counter to next statement
 80101da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	1ad3      	subs	r3, r2, r3
 80101e0:	3b01      	subs	r3, #1
 80101e2:	461a      	mov	r2, r3
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	601a      	str	r2, [r3, #0]

    return true;
 80101e8:	2301      	movs	r3, #1
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3734      	adds	r7, #52	; 0x34
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	3c23d70a 	.word	0x3c23d70a
 80101fc:	3dcccccd 	.word	0x3dcccccd

08010200 <isintf>:

// Returns true if float value is a whole number (integer)
bool isintf (float value)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	ed87 0a01 	vstr	s0, [r7, #4]
    return value != NAN && fabsf(value - truncf(value)) < 0.001f;
 801020a:	ed97 0a01 	vldr	s0, [r7, #4]
 801020e:	f016 fe68 	bl	8026ee2 <truncf>
 8010212:	eeb0 7a40 	vmov.f32	s14, s0
 8010216:	edd7 7a01 	vldr	s15, [r7, #4]
 801021a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801021e:	eef0 7ae7 	vabs.f32	s15, s15
 8010222:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8010240 <isintf+0x40>
 8010226:	eef4 7ac7 	vcmpe.f32	s15, s14
 801022a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022e:	bf4c      	ite	mi
 8010230:	2301      	movmi	r3, #1
 8010232:	2300      	movpl	r3, #0
 8010234:	b2db      	uxtb	r3, r3
}
 8010236:	4618      	mov	r0, r3
 8010238:	3708      	adds	r7, #8
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	3a83126f 	.word	0x3a83126f

08010244 <delay_sec>:

// Non-blocking delay function used for general operation and suspend features.
void delay_sec (float seconds, delaymode_t mode)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	ed87 0a01 	vstr	s0, [r7, #4]
 801024e:	4603      	mov	r3, r0
 8010250:	70fb      	strb	r3, [r7, #3]
    uint_fast16_t i = (uint_fast16_t)ceilf((1000.0f / DWELL_TIME_STEP) * seconds) + 1;
 8010252:	edd7 7a01 	vldr	s15, [r7, #4]
 8010256:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801025a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801025e:	eeb0 0a67 	vmov.f32	s0, s15
 8010262:	f016 fe35 	bl	8026ed0 <ceilf>
 8010266:	eef0 7a40 	vmov.f32	s15, s0
 801026a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801026e:	ee17 3a90 	vmov	r3, s15
 8010272:	3301      	adds	r3, #1
 8010274:	60fb      	str	r3, [r7, #12]

    while (--i && !sys.abort) {
 8010276:	e011      	b.n	801029c <delay_sec+0x58>
        if (mode == DelayMode_Dwell) {
 8010278:	78fb      	ldrb	r3, [r7, #3]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d102      	bne.n	8010284 <delay_sec+0x40>
            protocol_execute_realtime();
 801027e:	f002 fab1 	bl	80127e4 <protocol_execute_realtime>
 8010282:	e006      	b.n	8010292 <delay_sec+0x4e>
        } else { // DelayMode_SysSuspend
          // Execute rt_system() only to avoid nesting suspend loops.
          protocol_exec_rt_system();
 8010284:	f002 fb88 	bl	8012998 <protocol_exec_rt_system>
          if (state_door_reopened()) // Bail, if safety door reopens.
 8010288:	f00c fd0e 	bl	801cca8 <state_door_reopened>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d112      	bne.n	80102b8 <delay_sec+0x74>
              return;
        }
        hal.delay_ms(DWELL_TIME_STEP, 0); // Delay DWELL_TIME_STEP increment
 8010292:	4b0b      	ldr	r3, [pc, #44]	; (80102c0 <delay_sec+0x7c>)
 8010294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010296:	2100      	movs	r1, #0
 8010298:	2032      	movs	r0, #50	; 0x32
 801029a:	4798      	blx	r3
    while (--i && !sys.abort) {
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	3b01      	subs	r3, #1
 80102a0:	60fb      	str	r3, [r7, #12]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d008      	beq.n	80102ba <delay_sec+0x76>
 80102a8:	4b06      	ldr	r3, [pc, #24]	; (80102c4 <delay_sec+0x80>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	f083 0301 	eor.w	r3, r3, #1
 80102b0:	b2db      	uxtb	r3, r3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1e0      	bne.n	8010278 <delay_sec+0x34>
 80102b6:	e000      	b.n	80102ba <delay_sec+0x76>
              return;
 80102b8:	bf00      	nop
    }
}
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	200016a0 	.word	0x200016a0
 80102c4:	20001520 	.word	0x20001520

080102c8 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector (float *vector)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b086      	sub	sp, #24
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
    uint_fast8_t idx = N_AXIS;
 80102d0:	2303      	movs	r3, #3
 80102d2:	617b      	str	r3, [r7, #20]
    float magnitude = 0.0f, inv_magnitude;
 80102d4:	f04f 0300 	mov.w	r3, #0
 80102d8:	613b      	str	r3, [r7, #16]

    do {
        if (vector[--idx] != 0.0f)
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	3b01      	subs	r3, #1
 80102de:	617b      	str	r3, [r7, #20]
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	009b      	lsls	r3, r3, #2
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	4413      	add	r3, r2
 80102e8:	edd3 7a00 	vldr	s15, [r3]
 80102ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80102f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f4:	d013      	beq.n	801031e <convert_delta_vector_to_unit_vector+0x56>
            magnitude += vector[idx] * vector[idx];
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	4413      	add	r3, r2
 80102fe:	ed93 7a00 	vldr	s14, [r3]
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	4413      	add	r3, r2
 801030a:	edd3 7a00 	vldr	s15, [r3]
 801030e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010312:	ed97 7a04 	vldr	s14, [r7, #16]
 8010316:	ee77 7a27 	vadd.f32	s15, s14, s15
 801031a:	edc7 7a04 	vstr	s15, [r7, #16]
    } while(idx);
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1da      	bne.n	80102da <convert_delta_vector_to_unit_vector+0x12>

    idx = N_AXIS;
 8010324:	2303      	movs	r3, #3
 8010326:	617b      	str	r3, [r7, #20]
    magnitude = sqrtf(magnitude);
 8010328:	ed97 0a04 	vldr	s0, [r7, #16]
 801032c:	f016 fcc0 	bl	8026cb0 <sqrtf>
 8010330:	ed87 0a04 	vstr	s0, [r7, #16]
    inv_magnitude = 1.0f / magnitude;
 8010334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010338:	ed97 7a04 	vldr	s14, [r7, #16]
 801033c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010340:	edc7 7a03 	vstr	s15, [r7, #12]

    do {
        vector[--idx] *= inv_magnitude;
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	3b01      	subs	r3, #1
 8010348:	617b      	str	r3, [r7, #20]
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	009a      	lsls	r2, r3, #2
 801034e:	6879      	ldr	r1, [r7, #4]
 8010350:	440a      	add	r2, r1
 8010352:	ed92 7a00 	vldr	s14, [r2]
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	4413      	add	r3, r2
 801035c:	edd7 7a03 	vldr	s15, [r7, #12]
 8010360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010364:	edc3 7a00 	vstr	s15, [r3]
    } while(idx);
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d1ea      	bne.n	8010344 <convert_delta_vector_to_unit_vector+0x7c>

    return magnitude;
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	ee07 3a90 	vmov	s15, r3
}
 8010374:	eeb0 0a67 	vmov.f32	s0, s15
 8010378:	3718      	adds	r7, #24
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
	...

08010380 <get_datetime>:

// parse ISO8601 datetime: YYYY-MM-DDTHH:MM:SSZxxx
struct tm *get_datetime (const char *s)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b086      	sub	sp, #24
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
    static struct tm dt;
    PROGMEM static const uint8_t mdays[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    char *s1 = (char *)s, c;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	617b      	str	r3, [r7, #20]
    uint_fast16_t idx = 0, value = 0;
 801038c:	2300      	movs	r3, #0
 801038e:	613b      	str	r3, [r7, #16]
 8010390:	2300      	movs	r3, #0
 8010392:	60fb      	str	r3, [r7, #12]

    memset(&dt, 0, sizeof(struct tm));
 8010394:	2224      	movs	r2, #36	; 0x24
 8010396:	2100      	movs	r1, #0
 8010398:	4878      	ldr	r0, [pc, #480]	; (801057c <get_datetime+0x1fc>)
 801039a:	f015 fd50 	bl	8025e3e <memset>
    dt.tm_year = dt.tm_mon = dt.tm_mday = dt.tm_hour = dt.tm_min = dt.tm_sec = -1;
 801039e:	4b77      	ldr	r3, [pc, #476]	; (801057c <get_datetime+0x1fc>)
 80103a0:	f04f 32ff 	mov.w	r2, #4294967295
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	4b75      	ldr	r3, [pc, #468]	; (801057c <get_datetime+0x1fc>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	4a74      	ldr	r2, [pc, #464]	; (801057c <get_datetime+0x1fc>)
 80103ac:	6053      	str	r3, [r2, #4]
 80103ae:	4b73      	ldr	r3, [pc, #460]	; (801057c <get_datetime+0x1fc>)
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	4a72      	ldr	r2, [pc, #456]	; (801057c <get_datetime+0x1fc>)
 80103b4:	6093      	str	r3, [r2, #8]
 80103b6:	4b71      	ldr	r3, [pc, #452]	; (801057c <get_datetime+0x1fc>)
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	4a70      	ldr	r2, [pc, #448]	; (801057c <get_datetime+0x1fc>)
 80103bc:	60d3      	str	r3, [r2, #12]
 80103be:	4b6f      	ldr	r3, [pc, #444]	; (801057c <get_datetime+0x1fc>)
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	4a6e      	ldr	r2, [pc, #440]	; (801057c <get_datetime+0x1fc>)
 80103c4:	6113      	str	r3, [r2, #16]
 80103c6:	4b6d      	ldr	r3, [pc, #436]	; (801057c <get_datetime+0x1fc>)
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	4a6c      	ldr	r2, [pc, #432]	; (801057c <get_datetime+0x1fc>)
 80103cc:	6153      	str	r3, [r2, #20]

    do {
        c = *s1++;
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	1c5a      	adds	r2, r3, #1
 80103d2:	617a      	str	r2, [r7, #20]
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	72fb      	strb	r3, [r7, #11]

        if(isdigit(c))
 80103d8:	7afb      	ldrb	r3, [r7, #11]
 80103da:	3301      	adds	r3, #1
 80103dc:	4a68      	ldr	r2, [pc, #416]	; (8010580 <get_datetime+0x200>)
 80103de:	4413      	add	r3, r2
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	f003 0304 	and.w	r3, r3, #4
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00a      	beq.n	8010400 <get_datetime+0x80>
            value = (value * 10) + c - '0';
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	4613      	mov	r3, r2
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	4413      	add	r3, r2
 80103f2:	005b      	lsls	r3, r3, #1
 80103f4:	461a      	mov	r2, r3
 80103f6:	7afb      	ldrb	r3, [r7, #11]
 80103f8:	4413      	add	r3, r2
 80103fa:	3b30      	subs	r3, #48	; 0x30
 80103fc:	60fb      	str	r3, [r7, #12]
 80103fe:	e09e      	b.n	801053e <get_datetime+0x1be>

        else if(!(c == '-' || c == ':' || c == 'T' || c == 'Z' || c == '\0'))
 8010400:	7afb      	ldrb	r3, [r7, #11]
 8010402:	2b2d      	cmp	r3, #45	; 0x2d
 8010404:	d00c      	beq.n	8010420 <get_datetime+0xa0>
 8010406:	7afb      	ldrb	r3, [r7, #11]
 8010408:	2b3a      	cmp	r3, #58	; 0x3a
 801040a:	d009      	beq.n	8010420 <get_datetime+0xa0>
 801040c:	7afb      	ldrb	r3, [r7, #11]
 801040e:	2b54      	cmp	r3, #84	; 0x54
 8010410:	d006      	beq.n	8010420 <get_datetime+0xa0>
 8010412:	7afb      	ldrb	r3, [r7, #11]
 8010414:	2b5a      	cmp	r3, #90	; 0x5a
 8010416:	d003      	beq.n	8010420 <get_datetime+0xa0>
 8010418:	7afb      	ldrb	r3, [r7, #11]
 801041a:	2b00      	cmp	r3, #0
 801041c:	f040 8093 	bne.w	8010546 <get_datetime+0x1c6>
            break;

        else {
            switch(idx) {
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	2b05      	cmp	r3, #5
 8010424:	f200 8086 	bhi.w	8010534 <get_datetime+0x1b4>
 8010428:	a201      	add	r2, pc, #4	; (adr r2, 8010430 <get_datetime+0xb0>)
 801042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801042e:	bf00      	nop
 8010430:	08010449 	.word	0x08010449
 8010434:	08010471 	.word	0x08010471
 8010438:	0801048f 	.word	0x0801048f
 801043c:	080104dd 	.word	0x080104dd
 8010440:	080104f1 	.word	0x080104f1
 8010444:	08010505 	.word	0x08010505
                case 0:
                    if(c == '-' && value >= 1970 && value <= 2099)
 8010448:	7afb      	ldrb	r3, [r7, #11]
 801044a:	2b2d      	cmp	r3, #45	; 0x2d
 801044c:	d167      	bne.n	801051e <get_datetime+0x19e>
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f240 72b1 	movw	r2, #1969	; 0x7b1
 8010454:	4293      	cmp	r3, r2
 8010456:	d962      	bls.n	801051e <get_datetime+0x19e>
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f640 0233 	movw	r2, #2099	; 0x833
 801045e:	4293      	cmp	r3, r2
 8010460:	d85d      	bhi.n	801051e <get_datetime+0x19e>
                        dt.tm_year = value - 1900;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8010468:	461a      	mov	r2, r3
 801046a:	4b44      	ldr	r3, [pc, #272]	; (801057c <get_datetime+0x1fc>)
 801046c:	615a      	str	r2, [r3, #20]
                    break;
 801046e:	e056      	b.n	801051e <get_datetime+0x19e>

                case 1:
                    if(c == '-' && value >= 1 && value <= 12)
 8010470:	7afb      	ldrb	r3, [r7, #11]
 8010472:	2b2d      	cmp	r3, #45	; 0x2d
 8010474:	d155      	bne.n	8010522 <get_datetime+0x1a2>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d052      	beq.n	8010522 <get_datetime+0x1a2>
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2b0c      	cmp	r3, #12
 8010480:	d84f      	bhi.n	8010522 <get_datetime+0x1a2>
                        dt.tm_mon = value - 1;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	3b01      	subs	r3, #1
 8010486:	461a      	mov	r2, r3
 8010488:	4b3c      	ldr	r3, [pc, #240]	; (801057c <get_datetime+0x1fc>)
 801048a:	611a      	str	r2, [r3, #16]
                    break;
 801048c:	e049      	b.n	8010522 <get_datetime+0x1a2>

                case 2:
                    if(c == 'T' && value >= 1 && value <= (mdays[dt.tm_mon >= 0 ? dt.tm_mon : 0] + (dt.tm_mon == 1 && dt.tm_year != 100 && (dt.tm_year % 4) == 0 ? 1 : 0)))
 801048e:	7afb      	ldrb	r3, [r7, #11]
 8010490:	2b54      	cmp	r3, #84	; 0x54
 8010492:	d148      	bne.n	8010526 <get_datetime+0x1a6>
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d045      	beq.n	8010526 <get_datetime+0x1a6>
 801049a:	4b38      	ldr	r3, [pc, #224]	; (801057c <get_datetime+0x1fc>)
 801049c:	691b      	ldr	r3, [r3, #16]
 801049e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104a2:	4a38      	ldr	r2, [pc, #224]	; (8010584 <get_datetime+0x204>)
 80104a4:	5cd3      	ldrb	r3, [r2, r3]
 80104a6:	461a      	mov	r2, r3
 80104a8:	4b34      	ldr	r3, [pc, #208]	; (801057c <get_datetime+0x1fc>)
 80104aa:	691b      	ldr	r3, [r3, #16]
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d10b      	bne.n	80104c8 <get_datetime+0x148>
 80104b0:	4b32      	ldr	r3, [pc, #200]	; (801057c <get_datetime+0x1fc>)
 80104b2:	695b      	ldr	r3, [r3, #20]
 80104b4:	2b64      	cmp	r3, #100	; 0x64
 80104b6:	d007      	beq.n	80104c8 <get_datetime+0x148>
 80104b8:	4b30      	ldr	r3, [pc, #192]	; (801057c <get_datetime+0x1fc>)
 80104ba:	695b      	ldr	r3, [r3, #20]
 80104bc:	f003 0303 	and.w	r3, r3, #3
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d101      	bne.n	80104c8 <get_datetime+0x148>
 80104c4:	2301      	movs	r3, #1
 80104c6:	e000      	b.n	80104ca <get_datetime+0x14a>
 80104c8:	2300      	movs	r3, #0
 80104ca:	4413      	add	r3, r2
 80104cc:	461a      	mov	r2, r3
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d828      	bhi.n	8010526 <get_datetime+0x1a6>
                        dt.tm_mday = value;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	4a29      	ldr	r2, [pc, #164]	; (801057c <get_datetime+0x1fc>)
 80104d8:	60d3      	str	r3, [r2, #12]
                    break;
 80104da:	e024      	b.n	8010526 <get_datetime+0x1a6>

                case 3:
                    if(c == ':' && value <= 23)
 80104dc:	7afb      	ldrb	r3, [r7, #11]
 80104de:	2b3a      	cmp	r3, #58	; 0x3a
 80104e0:	d123      	bne.n	801052a <get_datetime+0x1aa>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2b17      	cmp	r3, #23
 80104e6:	d820      	bhi.n	801052a <get_datetime+0x1aa>
                        dt.tm_hour = value;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	4a24      	ldr	r2, [pc, #144]	; (801057c <get_datetime+0x1fc>)
 80104ec:	6093      	str	r3, [r2, #8]
                    break;
 80104ee:	e01c      	b.n	801052a <get_datetime+0x1aa>

                case 4:
                    if(c == ':' && value <= 59)
 80104f0:	7afb      	ldrb	r3, [r7, #11]
 80104f2:	2b3a      	cmp	r3, #58	; 0x3a
 80104f4:	d11b      	bne.n	801052e <get_datetime+0x1ae>
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2b3b      	cmp	r3, #59	; 0x3b
 80104fa:	d818      	bhi.n	801052e <get_datetime+0x1ae>
                        dt.tm_min = value;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	4a1f      	ldr	r2, [pc, #124]	; (801057c <get_datetime+0x1fc>)
 8010500:	6053      	str	r3, [r2, #4]
                    break;
 8010502:	e014      	b.n	801052e <get_datetime+0x1ae>

                case 5:
                    if((c == 'Z' || c == '\0') && value <= 59)
 8010504:	7afb      	ldrb	r3, [r7, #11]
 8010506:	2b5a      	cmp	r3, #90	; 0x5a
 8010508:	d002      	beq.n	8010510 <get_datetime+0x190>
 801050a:	7afb      	ldrb	r3, [r7, #11]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d110      	bne.n	8010532 <get_datetime+0x1b2>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	2b3b      	cmp	r3, #59	; 0x3b
 8010514:	d80d      	bhi.n	8010532 <get_datetime+0x1b2>
                        dt.tm_sec = value;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	4a18      	ldr	r2, [pc, #96]	; (801057c <get_datetime+0x1fc>)
 801051a:	6013      	str	r3, [r2, #0]
                    break;
 801051c:	e009      	b.n	8010532 <get_datetime+0x1b2>
                    break;
 801051e:	bf00      	nop
 8010520:	e008      	b.n	8010534 <get_datetime+0x1b4>
                    break;
 8010522:	bf00      	nop
 8010524:	e006      	b.n	8010534 <get_datetime+0x1b4>
                    break;
 8010526:	bf00      	nop
 8010528:	e004      	b.n	8010534 <get_datetime+0x1b4>
                    break;
 801052a:	bf00      	nop
 801052c:	e002      	b.n	8010534 <get_datetime+0x1b4>
                    break;
 801052e:	bf00      	nop
 8010530:	e000      	b.n	8010534 <get_datetime+0x1b4>
                    break;
 8010532:	bf00      	nop
            }
            idx++;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	3301      	adds	r3, #1
 8010538:	613b      	str	r3, [r7, #16]
            value = 0;
 801053a:	2300      	movs	r3, #0
 801053c:	60fb      	str	r3, [r7, #12]
        }
    } while(c);
 801053e:	7afb      	ldrb	r3, [r7, #11]
 8010540:	2b00      	cmp	r3, #0
 8010542:	f47f af44 	bne.w	80103ce <get_datetime+0x4e>

    return (dt.tm_year | dt.tm_mon | dt.tm_mday | dt.tm_hour | dt.tm_min | dt.tm_sec) > 0 ? &dt : NULL;
 8010546:	4b0d      	ldr	r3, [pc, #52]	; (801057c <get_datetime+0x1fc>)
 8010548:	695a      	ldr	r2, [r3, #20]
 801054a:	4b0c      	ldr	r3, [pc, #48]	; (801057c <get_datetime+0x1fc>)
 801054c:	691b      	ldr	r3, [r3, #16]
 801054e:	431a      	orrs	r2, r3
 8010550:	4b0a      	ldr	r3, [pc, #40]	; (801057c <get_datetime+0x1fc>)
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	431a      	orrs	r2, r3
 8010556:	4b09      	ldr	r3, [pc, #36]	; (801057c <get_datetime+0x1fc>)
 8010558:	689b      	ldr	r3, [r3, #8]
 801055a:	431a      	orrs	r2, r3
 801055c:	4b07      	ldr	r3, [pc, #28]	; (801057c <get_datetime+0x1fc>)
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	431a      	orrs	r2, r3
 8010562:	4b06      	ldr	r3, [pc, #24]	; (801057c <get_datetime+0x1fc>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	4313      	orrs	r3, r2
 8010568:	2b00      	cmp	r3, #0
 801056a:	dd01      	ble.n	8010570 <get_datetime+0x1f0>
 801056c:	4b03      	ldr	r3, [pc, #12]	; (801057c <get_datetime+0x1fc>)
 801056e:	e000      	b.n	8010572 <get_datetime+0x1f2>
 8010570:	2300      	movs	r3, #0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3718      	adds	r7, #24
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	20001964 	.word	0x20001964
 8010580:	08034b88 	.word	0x08034b88
 8010584:	08032d54 	.word	0x08032d54

08010588 <calc_checksum>:

// calculate checksum byte for data
uint8_t calc_checksum (uint8_t *data, uint32_t size) {
 8010588:	b480      	push	{r7}
 801058a:	b085      	sub	sp, #20
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]

    uint8_t checksum = 0;
 8010592:	2300      	movs	r3, #0
 8010594:	73fb      	strb	r3, [r7, #15]

    while(size--) {
 8010596:	e010      	b.n	80105ba <calc_checksum+0x32>
        checksum = (checksum << 1) | (checksum >> 7);
 8010598:	7bfb      	ldrb	r3, [r7, #15]
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	b25a      	sxtb	r2, r3
 801059e:	7bfb      	ldrb	r3, [r7, #15]
 80105a0:	09db      	lsrs	r3, r3, #7
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	b25b      	sxtb	r3, r3
 80105a6:	4313      	orrs	r3, r2
 80105a8:	b25b      	sxtb	r3, r3
 80105aa:	73fb      	strb	r3, [r7, #15]
        checksum += *(data++);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	1c5a      	adds	r2, r3, #1
 80105b0:	607a      	str	r2, [r7, #4]
 80105b2:	781a      	ldrb	r2, [r3, #0]
 80105b4:	7bfb      	ldrb	r3, [r7, #15]
 80105b6:	4413      	add	r3, r2
 80105b8:	73fb      	strb	r3, [r7, #15]
    while(size--) {
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	1e5a      	subs	r2, r3, #1
 80105be:	603a      	str	r2, [r7, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1e9      	bne.n	8010598 <calc_checksum+0x10>
    }

    return checksum;
 80105c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3714      	adds	r7, #20
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <dummy_handler>:

    return s;
}

void dummy_handler (void)
{
 80105d2:	b480      	push	{r7}
 80105d4:	af00      	add	r7, sp, #0
    // NOOP
}
 80105d6:	bf00      	nop
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <ram_get_byte>:
#endif
    {0, 0, 0} // list termination - do not remove
};

inline static uint8_t ram_get_byte (uint32_t addr)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
    return nvsbuffer[addr];
 80105e8:	4b05      	ldr	r3, [pc, #20]	; (8010600 <ram_get_byte+0x20>)
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4413      	add	r3, r2
 80105f0:	781b      	ldrb	r3, [r3, #0]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	370c      	adds	r7, #12
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr
 80105fe:	bf00      	nop
 8010600:	20001988 	.word	0x20001988

08010604 <ram_put_byte>:

inline static void ram_put_byte (uint32_t addr, uint8_t new_value)
{
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	70fb      	strb	r3, [r7, #3]
    if(addr == 0)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d102      	bne.n	801061c <ram_put_byte+0x18>
        settings_dirty.version = true;
 8010616:	4b13      	ldr	r3, [pc, #76]	; (8010664 <ram_put_byte+0x60>)
 8010618:	2201      	movs	r2, #1
 801061a:	705a      	strb	r2, [r3, #1]
    dirty = dirty || nvsbuffer[addr] != new_value || addr == 0;
 801061c:	4b12      	ldr	r3, [pc, #72]	; (8010668 <ram_put_byte+0x64>)
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10a      	bne.n	801063a <ram_put_byte+0x36>
 8010624:	4b11      	ldr	r3, [pc, #68]	; (801066c <ram_put_byte+0x68>)
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4413      	add	r3, r2
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	78fa      	ldrb	r2, [r7, #3]
 8010630:	429a      	cmp	r2, r3
 8010632:	d102      	bne.n	801063a <ram_put_byte+0x36>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d101      	bne.n	801063e <ram_put_byte+0x3a>
 801063a:	2301      	movs	r3, #1
 801063c:	e000      	b.n	8010640 <ram_put_byte+0x3c>
 801063e:	2300      	movs	r3, #0
 8010640:	f003 0301 	and.w	r3, r3, #1
 8010644:	b2da      	uxtb	r2, r3
 8010646:	4b08      	ldr	r3, [pc, #32]	; (8010668 <ram_put_byte+0x64>)
 8010648:	701a      	strb	r2, [r3, #0]
    nvsbuffer[addr] = new_value;
 801064a:	4b08      	ldr	r3, [pc, #32]	; (801066c <ram_put_byte+0x68>)
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4413      	add	r3, r2
 8010652:	78fa      	ldrb	r2, [r7, #3]
 8010654:	701a      	strb	r2, [r3, #0]
}
 8010656:	bf00      	nop
 8010658:	370c      	adds	r7, #12
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr
 8010662:	bf00      	nop
 8010664:	200019bc 	.word	0x200019bc
 8010668:	200019b8 	.word	0x200019b8
 801066c:	20001988 	.word	0x20001988

08010670 <memcpy_to_ram>:

static nvs_transfer_result_t memcpy_to_ram (uint32_t destination, uint8_t *source, uint32_t size, bool with_checksum)
{
 8010670:	b590      	push	{r4, r7, lr}
 8010672:	b087      	sub	sp, #28
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
 801067c:	70fb      	strb	r3, [r7, #3]
    if(hal.nvs.driver_area.address && destination > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 801067e:	4b66      	ldr	r3, [pc, #408]	; (8010818 <memcpy_to_ram+0x1a8>)
 8010680:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8010684:	2b00      	cmp	r3, #0
 8010686:	d014      	beq.n	80106b2 <memcpy_to_ram+0x42>
 8010688:	4b63      	ldr	r3, [pc, #396]	; (8010818 <memcpy_to_ram+0x1a8>)
 801068a:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 801068e:	461a      	mov	r2, r3
 8010690:	4b61      	ldr	r3, [pc, #388]	; (8010818 <memcpy_to_ram+0x1a8>)
 8010692:	f8b3 3156 	ldrh.w	r3, [r3, #342]	; 0x156
 8010696:	4413      	add	r3, r2
 8010698:	461a      	mov	r2, r3
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	4293      	cmp	r3, r2
 801069e:	d908      	bls.n	80106b2 <memcpy_to_ram+0x42>
        return physical_nvs.memcpy_to_nvs(destination, source, size, with_checksum);
 80106a0:	4b5e      	ldr	r3, [pc, #376]	; (801081c <memcpy_to_ram+0x1ac>)
 80106a2:	69dc      	ldr	r4, [r3, #28]
 80106a4:	78fb      	ldrb	r3, [r7, #3]
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	68b9      	ldr	r1, [r7, #8]
 80106aa:	68f8      	ldr	r0, [r7, #12]
 80106ac:	47a0      	blx	r4
 80106ae:	4603      	mov	r3, r0
 80106b0:	e0ad      	b.n	801080e <memcpy_to_ram+0x19e>

    uint32_t dest = destination;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	617b      	str	r3, [r7, #20]
    uint8_t checksum = with_checksum ? calc_checksum(source, size) : 0;
 80106b6:	78fb      	ldrb	r3, [r7, #3]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d005      	beq.n	80106c8 <memcpy_to_ram+0x58>
 80106bc:	6879      	ldr	r1, [r7, #4]
 80106be:	68b8      	ldr	r0, [r7, #8]
 80106c0:	f7ff ff62 	bl	8010588 <calc_checksum>
 80106c4:	4603      	mov	r3, r0
 80106c6:	e000      	b.n	80106ca <memcpy_to_ram+0x5a>
 80106c8:	2300      	movs	r3, #0
 80106ca:	74bb      	strb	r3, [r7, #18]

    dirty = false;
 80106cc:	4b54      	ldr	r3, [pc, #336]	; (8010820 <memcpy_to_ram+0x1b0>)
 80106ce:	2200      	movs	r2, #0
 80106d0:	701a      	strb	r2, [r3, #0]

    for(; size > 0; size--)
 80106d2:	e00d      	b.n	80106f0 <memcpy_to_ram+0x80>
        ram_put_byte(dest++, *(source++));
 80106d4:	697a      	ldr	r2, [r7, #20]
 80106d6:	1c53      	adds	r3, r2, #1
 80106d8:	617b      	str	r3, [r7, #20]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	1c59      	adds	r1, r3, #1
 80106de:	60b9      	str	r1, [r7, #8]
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	4619      	mov	r1, r3
 80106e4:	4610      	mov	r0, r2
 80106e6:	f7ff ff8d 	bl	8010604 <ram_put_byte>
    for(; size > 0; size--)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	3b01      	subs	r3, #1
 80106ee:	607b      	str	r3, [r7, #4]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1ee      	bne.n	80106d4 <memcpy_to_ram+0x64>

    if(with_checksum)
 80106f6:	78fb      	ldrb	r3, [r7, #3]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d004      	beq.n	8010706 <memcpy_to_ram+0x96>
        ram_put_byte(dest, checksum);
 80106fc:	7cbb      	ldrb	r3, [r7, #18]
 80106fe:	4619      	mov	r1, r3
 8010700:	6978      	ldr	r0, [r7, #20]
 8010702:	f7ff ff7f 	bl	8010604 <ram_put_byte>

    if(settings_dirty.version || source == hal.nvs.driver_area.mem_address)
 8010706:	4b47      	ldr	r3, [pc, #284]	; (8010824 <memcpy_to_ram+0x1b4>)
 8010708:	785b      	ldrb	r3, [r3, #1]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d105      	bne.n	801071a <memcpy_to_ram+0xaa>
 801070e:	4b42      	ldr	r3, [pc, #264]	; (8010818 <memcpy_to_ram+0x1a8>)
 8010710:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	429a      	cmp	r2, r3
 8010718:	d102      	bne.n	8010720 <memcpy_to_ram+0xb0>
        dirty = true;
 801071a:	4b41      	ldr	r3, [pc, #260]	; (8010820 <memcpy_to_ram+0x1b0>)
 801071c:	2201      	movs	r2, #1
 801071e:	701a      	strb	r2, [r3, #0]

    if(dirty && physical_nvs.type != NVS_None) {
 8010720:	4b3f      	ldr	r3, [pc, #252]	; (8010820 <memcpy_to_ram+0x1b0>)
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d071      	beq.n	801080c <memcpy_to_ram+0x19c>
 8010728:	4b3c      	ldr	r3, [pc, #240]	; (801081c <memcpy_to_ram+0x1ac>)
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d06d      	beq.n	801080c <memcpy_to_ram+0x19c>

        uint8_t idx = 0;
 8010730:	2300      	movs	r3, #0
 8010732:	74fb      	strb	r3, [r7, #19]

        settings_dirty.is_dirty = true;
 8010734:	4b3b      	ldr	r3, [pc, #236]	; (8010824 <memcpy_to_ram+0x1b4>)
 8010736:	2201      	movs	r2, #1
 8010738:	701a      	strb	r2, [r3, #0]

        if(hal.nvs.driver_area.address && destination >= hal.nvs.driver_area.address)
 801073a:	4b37      	ldr	r3, [pc, #220]	; (8010818 <memcpy_to_ram+0x1a8>)
 801073c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8010740:	2b00      	cmp	r3, #0
 8010742:	d00a      	beq.n	801075a <memcpy_to_ram+0xea>
 8010744:	4b34      	ldr	r3, [pc, #208]	; (8010818 <memcpy_to_ram+0x1a8>)
 8010746:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 801074a:	461a      	mov	r2, r3
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	4293      	cmp	r3, r2
 8010750:	d303      	bcc.n	801075a <memcpy_to_ram+0xea>
            settings_dirty.driver_settings = true;
 8010752:	4b34      	ldr	r3, [pc, #208]	; (8010824 <memcpy_to_ram+0x1b4>)
 8010754:	2201      	movs	r2, #1
 8010756:	711a      	strb	r2, [r3, #4]
 8010758:	e058      	b.n	801080c <memcpy_to_ram+0x19c>

        else {

            do {
                if(target[idx].addr == destination)
 801075a:	7cfb      	ldrb	r3, [r7, #19]
 801075c:	4a32      	ldr	r2, [pc, #200]	; (8010828 <memcpy_to_ram+0x1b8>)
 801075e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010762:	461a      	mov	r2, r3
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	4293      	cmp	r3, r2
 8010768:	d009      	beq.n	801077e <memcpy_to_ram+0x10e>
                    break;
            } while(target[++idx].addr);
 801076a:	7cfb      	ldrb	r3, [r7, #19]
 801076c:	3301      	adds	r3, #1
 801076e:	74fb      	strb	r3, [r7, #19]
 8010770:	7cfb      	ldrb	r3, [r7, #19]
 8010772:	4a2d      	ldr	r2, [pc, #180]	; (8010828 <memcpy_to_ram+0x1b8>)
 8010774:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d1ee      	bne.n	801075a <memcpy_to_ram+0xea>
 801077c:	e000      	b.n	8010780 <memcpy_to_ram+0x110>
                    break;
 801077e:	bf00      	nop

            if(target[idx].addr) switch(target[idx].type) {
 8010780:	7cfb      	ldrb	r3, [r7, #19]
 8010782:	4a29      	ldr	r2, [pc, #164]	; (8010828 <memcpy_to_ram+0x1b8>)
 8010784:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d03f      	beq.n	801080c <memcpy_to_ram+0x19c>
 801078c:	7cfb      	ldrb	r3, [r7, #19]
 801078e:	4a26      	ldr	r2, [pc, #152]	; (8010828 <memcpy_to_ram+0x1b8>)
 8010790:	009b      	lsls	r3, r3, #2
 8010792:	4413      	add	r3, r2
 8010794:	789b      	ldrb	r3, [r3, #2]
 8010796:	2b04      	cmp	r3, #4
 8010798:	d838      	bhi.n	801080c <memcpy_to_ram+0x19c>
 801079a:	a201      	add	r2, pc, #4	; (adr r2, 80107a0 <memcpy_to_ram+0x130>)
 801079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a0:	080107b5 	.word	0x080107b5
 80107a4:	0801080d 	.word	0x0801080d
 80107a8:	080107bd 	.word	0x080107bd
 80107ac:	080107e1 	.word	0x080107e1
 80107b0:	08010805 	.word	0x08010805

                case NVS_GROUP_GLOBAL:
                    settings_dirty.global_settings = true;
 80107b4:	4b1b      	ldr	r3, [pc, #108]	; (8010824 <memcpy_to_ram+0x1b4>)
 80107b6:	2201      	movs	r2, #1
 80107b8:	709a      	strb	r2, [r3, #2]
                    break;
 80107ba:	e027      	b.n	801080c <memcpy_to_ram+0x19c>
                case NVS_GROUP_TOOLS:
                    settings_dirty.tool_data |= (1 << target[idx].offset);
                    break;
#endif
                case NVS_GROUP_PARAMETERS:
                    settings_dirty.coord_data |= (1 << target[idx].offset);
 80107bc:	4b19      	ldr	r3, [pc, #100]	; (8010824 <memcpy_to_ram+0x1b4>)
 80107be:	88db      	ldrh	r3, [r3, #6]
 80107c0:	b21a      	sxth	r2, r3
 80107c2:	7cfb      	ldrb	r3, [r7, #19]
 80107c4:	4918      	ldr	r1, [pc, #96]	; (8010828 <memcpy_to_ram+0x1b8>)
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	440b      	add	r3, r1
 80107ca:	78db      	ldrb	r3, [r3, #3]
 80107cc:	4619      	mov	r1, r3
 80107ce:	2301      	movs	r3, #1
 80107d0:	408b      	lsls	r3, r1
 80107d2:	b21b      	sxth	r3, r3
 80107d4:	4313      	orrs	r3, r2
 80107d6:	b21b      	sxth	r3, r3
 80107d8:	b29a      	uxth	r2, r3
 80107da:	4b12      	ldr	r3, [pc, #72]	; (8010824 <memcpy_to_ram+0x1b4>)
 80107dc:	80da      	strh	r2, [r3, #6]
                    break;
 80107de:	e015      	b.n	801080c <memcpy_to_ram+0x19c>

                case NVS_GROUP_STARTUP:
                    settings_dirty.startup_lines |= (1 << target[idx].offset);
 80107e0:	4b10      	ldr	r3, [pc, #64]	; (8010824 <memcpy_to_ram+0x1b4>)
 80107e2:	795b      	ldrb	r3, [r3, #5]
 80107e4:	b25a      	sxtb	r2, r3
 80107e6:	7cfb      	ldrb	r3, [r7, #19]
 80107e8:	490f      	ldr	r1, [pc, #60]	; (8010828 <memcpy_to_ram+0x1b8>)
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	440b      	add	r3, r1
 80107ee:	78db      	ldrb	r3, [r3, #3]
 80107f0:	4619      	mov	r1, r3
 80107f2:	2301      	movs	r3, #1
 80107f4:	408b      	lsls	r3, r1
 80107f6:	b25b      	sxtb	r3, r3
 80107f8:	4313      	orrs	r3, r2
 80107fa:	b25b      	sxtb	r3, r3
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	4b09      	ldr	r3, [pc, #36]	; (8010824 <memcpy_to_ram+0x1b4>)
 8010800:	715a      	strb	r2, [r3, #5]
                    break;
 8010802:	e003      	b.n	801080c <memcpy_to_ram+0x19c>

                case NVS_GROUP_BUILD:
                    settings_dirty.build_info = true;
 8010804:	4b07      	ldr	r3, [pc, #28]	; (8010824 <memcpy_to_ram+0x1b4>)
 8010806:	2201      	movs	r2, #1
 8010808:	70da      	strb	r2, [r3, #3]
                    break;
 801080a:	bf00      	nop
            }
        }
    }

    return NVS_TransferResult_OK;
 801080c:	2302      	movs	r3, #2
}
 801080e:	4618      	mov	r0, r3
 8010810:	371c      	adds	r7, #28
 8010812:	46bd      	mov	sp, r7
 8010814:	bd90      	pop	{r4, r7, pc}
 8010816:	bf00      	nop
 8010818:	200016a0 	.word	0x200016a0
 801081c:	2000198c 	.word	0x2000198c
 8010820:	200019b8 	.word	0x200019b8
 8010824:	200019bc 	.word	0x200019bc
 8010828:	08032d60 	.word	0x08032d60

0801082c <memcpy_from_ram>:

static nvs_transfer_result_t memcpy_from_ram (uint8_t *destination, uint32_t source, uint32_t size, bool with_checksum)
{
 801082c:	b590      	push	{r4, r7, lr}
 801082e:	b087      	sub	sp, #28
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	60b9      	str	r1, [r7, #8]
 8010836:	607a      	str	r2, [r7, #4]
 8010838:	70fb      	strb	r3, [r7, #3]
    if(hal.nvs.driver_area.address && source > hal.nvs.driver_area.address + hal.nvs.driver_area.size)
 801083a:	4b27      	ldr	r3, [pc, #156]	; (80108d8 <memcpy_from_ram+0xac>)
 801083c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8010840:	2b00      	cmp	r3, #0
 8010842:	d014      	beq.n	801086e <memcpy_from_ram+0x42>
 8010844:	4b24      	ldr	r3, [pc, #144]	; (80108d8 <memcpy_from_ram+0xac>)
 8010846:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 801084a:	461a      	mov	r2, r3
 801084c:	4b22      	ldr	r3, [pc, #136]	; (80108d8 <memcpy_from_ram+0xac>)
 801084e:	f8b3 3156 	ldrh.w	r3, [r3, #342]	; 0x156
 8010852:	4413      	add	r3, r2
 8010854:	461a      	mov	r2, r3
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	4293      	cmp	r3, r2
 801085a:	d908      	bls.n	801086e <memcpy_from_ram+0x42>
        return physical_nvs.memcpy_from_nvs(destination, source, size, with_checksum);
 801085c:	4b1f      	ldr	r3, [pc, #124]	; (80108dc <memcpy_from_ram+0xb0>)
 801085e:	6a1c      	ldr	r4, [r3, #32]
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	68b9      	ldr	r1, [r7, #8]
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	47a0      	blx	r4
 801086a:	4603      	mov	r3, r0
 801086c:	e030      	b.n	80108d0 <memcpy_from_ram+0xa4>

    uint8_t checksum = with_checksum ? calc_checksum(&nvsbuffer[source], size) : 0;
 801086e:	78fb      	ldrb	r3, [r7, #3]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d009      	beq.n	8010888 <memcpy_from_ram+0x5c>
 8010874:	4b1a      	ldr	r3, [pc, #104]	; (80108e0 <memcpy_from_ram+0xb4>)
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	4413      	add	r3, r2
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	4618      	mov	r0, r3
 8010880:	f7ff fe82 	bl	8010588 <calc_checksum>
 8010884:	4603      	mov	r3, r0
 8010886:	e000      	b.n	801088a <memcpy_from_ram+0x5e>
 8010888:	2300      	movs	r3, #0
 801088a:	75fb      	strb	r3, [r7, #23]

    for(; size > 0; size--)
 801088c:	e00d      	b.n	80108aa <memcpy_from_ram+0x7e>
        *(destination++) = ram_get_byte(source++);
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	1c5a      	adds	r2, r3, #1
 8010892:	60ba      	str	r2, [r7, #8]
 8010894:	68fc      	ldr	r4, [r7, #12]
 8010896:	1c62      	adds	r2, r4, #1
 8010898:	60fa      	str	r2, [r7, #12]
 801089a:	4618      	mov	r0, r3
 801089c:	f7ff fea0 	bl	80105e0 <ram_get_byte>
 80108a0:	4603      	mov	r3, r0
 80108a2:	7023      	strb	r3, [r4, #0]
    for(; size > 0; size--)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	3b01      	subs	r3, #1
 80108a8:	607b      	str	r3, [r7, #4]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d1ee      	bne.n	801088e <memcpy_from_ram+0x62>

    return with_checksum ? (checksum == ram_get_byte(source) ? NVS_TransferResult_OK : NVS_TransferResult_Failed) : NVS_TransferResult_OK;
 80108b0:	78fb      	ldrb	r3, [r7, #3]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00b      	beq.n	80108ce <memcpy_from_ram+0xa2>
 80108b6:	68b8      	ldr	r0, [r7, #8]
 80108b8:	f7ff fe92 	bl	80105e0 <ram_get_byte>
 80108bc:	4603      	mov	r3, r0
 80108be:	461a      	mov	r2, r3
 80108c0:	7dfb      	ldrb	r3, [r7, #23]
 80108c2:	4293      	cmp	r3, r2
 80108c4:	d101      	bne.n	80108ca <memcpy_from_ram+0x9e>
 80108c6:	2302      	movs	r3, #2
 80108c8:	e002      	b.n	80108d0 <memcpy_from_ram+0xa4>
 80108ca:	2300      	movs	r3, #0
 80108cc:	e000      	b.n	80108d0 <memcpy_from_ram+0xa4>
 80108ce:	2302      	movs	r3, #2
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	371c      	adds	r7, #28
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd90      	pop	{r4, r7, pc}
 80108d8:	200016a0 	.word	0x200016a0
 80108dc:	2000198c 	.word	0x2000198c
 80108e0:	20001988 	.word	0x20001988

080108e4 <nvs_warning>:

static void nvs_warning (sys_state_t state)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
    report_message("Not enough heap for NVS buffer!", Message_Warning);
 80108ec:	2102      	movs	r1, #2
 80108ee:	4803      	ldr	r0, [pc, #12]	; (80108fc <nvs_warning+0x18>)
 80108f0:	f003 fb40 	bl	8013f74 <report_message>
}
 80108f4:	bf00      	nop
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	0802c33c 	.word	0x0802c33c

08010900 <nvs_buffer_alloc>:

// Try to allocate RAM from heap for buffer/emulation.
bool nvs_buffer_alloc (void)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	af00      	add	r7, sp, #0
    assert(NVS_SIZE >= GRBL_NVS_SIZE);

    if((nvsbuffer = malloc(NVS_SIZE)))
 8010904:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010908:	f014 ff36 	bl	8025778 <malloc>
 801090c:	4603      	mov	r3, r0
 801090e:	461a      	mov	r2, r3
 8010910:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <nvs_buffer_alloc+0x40>)
 8010912:	601a      	str	r2, [r3, #0]
 8010914:	4b0a      	ldr	r3, [pc, #40]	; (8010940 <nvs_buffer_alloc+0x40>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d007      	beq.n	801092c <nvs_buffer_alloc+0x2c>
        memset(nvsbuffer, 0xFF, NVS_SIZE);
 801091c:	4b08      	ldr	r3, [pc, #32]	; (8010940 <nvs_buffer_alloc+0x40>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010924:	21ff      	movs	r1, #255	; 0xff
 8010926:	4618      	mov	r0, r3
 8010928:	f015 fa89 	bl	8025e3e <memset>

    return nvsbuffer != NULL;
 801092c:	4b04      	ldr	r3, [pc, #16]	; (8010940 <nvs_buffer_alloc+0x40>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	bf14      	ite	ne
 8010934:	2301      	movne	r3, #1
 8010936:	2300      	moveq	r3, #0
 8010938:	b2db      	uxtb	r3, r3
}
 801093a:	4618      	mov	r0, r3
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	20001988 	.word	0x20001988

08010944 <nvs_buffer_free>:

void nvs_buffer_free (void)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	af00      	add	r7, sp, #0
    if(nvsbuffer) {
 8010948:	4b06      	ldr	r3, [pc, #24]	; (8010964 <nvs_buffer_free+0x20>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d006      	beq.n	801095e <nvs_buffer_free+0x1a>
        nvs_buffer_sync_physical();
 8010950:	f000 f8ba 	bl	8010ac8 <nvs_buffer_sync_physical>
        free(nvsbuffer);
 8010954:	4b03      	ldr	r3, [pc, #12]	; (8010964 <nvs_buffer_free+0x20>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4618      	mov	r0, r3
 801095a:	f014 ff15 	bl	8025788 <free>
    }
}
 801095e:	bf00      	nop
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	20001988 	.word	0x20001988

08010968 <nvs_buffer_init>:
//
// Switch over to RAM based copy.
// Changes to RAM based copy will be written to physical storage when grblHAL is in IDLE state.
bool nvs_buffer_init (void)
{
 8010968:	b5b0      	push	{r4, r5, r7, lr}
 801096a:	af00      	add	r7, sp, #0
    hal.nvs.size = ((hal.nvs.size - 1) | 0x03) + 1; // Ensure NVS area ends on a word boundary
 801096c:	4b4b      	ldr	r3, [pc, #300]	; (8010a9c <nvs_buffer_init+0x134>)
 801096e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010972:	3b01      	subs	r3, #1
 8010974:	f043 0303 	orr.w	r3, r3, #3
 8010978:	3301      	adds	r3, #1
 801097a:	4a48      	ldr	r2, [pc, #288]	; (8010a9c <nvs_buffer_init+0x134>)
 801097c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

    if(nvsbuffer) {
 8010980:	4b47      	ldr	r3, [pc, #284]	; (8010aa0 <nvs_buffer_init+0x138>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d077      	beq.n	8010a78 <nvs_buffer_init+0x110>

        memcpy(&physical_nvs, &hal.nvs, sizeof(nvs_io_t)); // save pointers to physical storage handler functions
 8010988:	4a46      	ldr	r2, [pc, #280]	; (8010aa4 <nvs_buffer_init+0x13c>)
 801098a:	4b44      	ldr	r3, [pc, #272]	; (8010a9c <nvs_buffer_init+0x134>)
 801098c:	4615      	mov	r5, r2
 801098e:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8010992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801099a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801099e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

        // Copy physical storage content to RAM when available
        if(physical_nvs.type == NVS_Flash)
 80109a2:	4b40      	ldr	r3, [pc, #256]	; (8010aa4 <nvs_buffer_init+0x13c>)
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	d106      	bne.n	80109b8 <nvs_buffer_init+0x50>
            physical_nvs.memcpy_from_flash(nvsbuffer);
 80109aa:	4b3e      	ldr	r3, [pc, #248]	; (8010aa4 <nvs_buffer_init+0x13c>)
 80109ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ae:	4a3c      	ldr	r2, [pc, #240]	; (8010aa0 <nvs_buffer_init+0x138>)
 80109b0:	6812      	ldr	r2, [r2, #0]
 80109b2:	4610      	mov	r0, r2
 80109b4:	4798      	blx	r3
 80109b6:	e010      	b.n	80109da <nvs_buffer_init+0x72>
        else if(physical_nvs.type != NVS_None)
 80109b8:	4b3a      	ldr	r3, [pc, #232]	; (8010aa4 <nvs_buffer_init+0x13c>)
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00c      	beq.n	80109da <nvs_buffer_init+0x72>
            physical_nvs.memcpy_from_nvs(nvsbuffer, 0, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 80109c0:	4b38      	ldr	r3, [pc, #224]	; (8010aa4 <nvs_buffer_init+0x13c>)
 80109c2:	6a1c      	ldr	r4, [r3, #32]
 80109c4:	4b36      	ldr	r3, [pc, #216]	; (8010aa0 <nvs_buffer_init+0x138>)
 80109c6:	6818      	ldr	r0, [r3, #0]
 80109c8:	4b34      	ldr	r3, [pc, #208]	; (8010a9c <nvs_buffer_init+0x134>)
 80109ca:	f8b3 3156 	ldrh.w	r3, [r3, #342]	; 0x156
 80109ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80109d2:	461a      	mov	r2, r3
 80109d4:	2300      	movs	r3, #0
 80109d6:	2100      	movs	r1, #0
 80109d8:	47a0      	blx	r4

        // Switch hal to use RAM version of non-volatile storage data
        hal.nvs.type = NVS_Emulated;
 80109da:	4b30      	ldr	r3, [pc, #192]	; (8010a9c <nvs_buffer_init+0x134>)
 80109dc:	2204      	movs	r2, #4
 80109de:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        hal.nvs.get_byte = &ram_get_byte;
 80109e2:	4b2e      	ldr	r3, [pc, #184]	; (8010a9c <nvs_buffer_init+0x134>)
 80109e4:	4a30      	ldr	r2, [pc, #192]	; (8010aa8 <nvs_buffer_init+0x140>)
 80109e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
        hal.nvs.put_byte = &ram_put_byte;
 80109ea:	4b2c      	ldr	r3, [pc, #176]	; (8010a9c <nvs_buffer_init+0x134>)
 80109ec:	4a2f      	ldr	r2, [pc, #188]	; (8010aac <nvs_buffer_init+0x144>)
 80109ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        hal.nvs.memcpy_to_nvs = &memcpy_to_ram;
 80109f2:	4b2a      	ldr	r3, [pc, #168]	; (8010a9c <nvs_buffer_init+0x134>)
 80109f4:	4a2e      	ldr	r2, [pc, #184]	; (8010ab0 <nvs_buffer_init+0x148>)
 80109f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        hal.nvs.memcpy_from_nvs = &memcpy_from_ram;
 80109fa:	4b28      	ldr	r3, [pc, #160]	; (8010a9c <nvs_buffer_init+0x134>)
 80109fc:	4a2d      	ldr	r2, [pc, #180]	; (8010ab4 <nvs_buffer_init+0x14c>)
 80109fe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        hal.nvs.memcpy_from_flash = NULL;
 8010a02:	4b26      	ldr	r3, [pc, #152]	; (8010a9c <nvs_buffer_init+0x134>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        hal.nvs.memcpy_to_flash = NULL;
 8010a0a:	4b24      	ldr	r3, [pc, #144]	; (8010a9c <nvs_buffer_init+0x134>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

        // If no physical storage available or if NVS import fails copy default settings to RAM
        // and write out to physical storage when available.
        if(physical_nvs.type == NVS_None || ram_get_byte(0) != SETTINGS_VERSION) {
 8010a12:	4b24      	ldr	r3, [pc, #144]	; (8010aa4 <nvs_buffer_init+0x13c>)
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d005      	beq.n	8010a26 <nvs_buffer_init+0xbe>
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	f7ff fde0 	bl	80105e0 <ram_get_byte>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b16      	cmp	r3, #22
 8010a24:	d02b      	beq.n	8010a7e <nvs_buffer_init+0x116>
            settings_restore(settings_all);
 8010a26:	4b24      	ldr	r3, [pc, #144]	; (8010ab8 <nvs_buffer_init+0x150>)
 8010a28:	7818      	ldrb	r0, [r3, #0]
 8010a2a:	f009 fccd 	bl	801a3c8 <settings_restore>
            if(physical_nvs.type == NVS_Flash)
 8010a2e:	4b1d      	ldr	r3, [pc, #116]	; (8010aa4 <nvs_buffer_init+0x13c>)
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	2b03      	cmp	r3, #3
 8010a34:	d106      	bne.n	8010a44 <nvs_buffer_init+0xdc>
                physical_nvs.memcpy_to_flash(nvsbuffer);
 8010a36:	4b1b      	ldr	r3, [pc, #108]	; (8010aa4 <nvs_buffer_init+0x13c>)
 8010a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3a:	4a19      	ldr	r2, [pc, #100]	; (8010aa0 <nvs_buffer_init+0x138>)
 8010a3c:	6812      	ldr	r2, [r2, #0]
 8010a3e:	4610      	mov	r0, r2
 8010a40:	4798      	blx	r3
 8010a42:	e010      	b.n	8010a66 <nvs_buffer_init+0xfe>
            else if(physical_nvs.memcpy_to_nvs)
 8010a44:	4b17      	ldr	r3, [pc, #92]	; (8010aa4 <nvs_buffer_init+0x13c>)
 8010a46:	69db      	ldr	r3, [r3, #28]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00c      	beq.n	8010a66 <nvs_buffer_init+0xfe>
                physical_nvs.memcpy_to_nvs(0, nvsbuffer, GRBL_NVS_SIZE + hal.nvs.driver_area.size, false);
 8010a4c:	4b15      	ldr	r3, [pc, #84]	; (8010aa4 <nvs_buffer_init+0x13c>)
 8010a4e:	69dc      	ldr	r4, [r3, #28]
 8010a50:	4b13      	ldr	r3, [pc, #76]	; (8010aa0 <nvs_buffer_init+0x138>)
 8010a52:	6819      	ldr	r1, [r3, #0]
 8010a54:	4b11      	ldr	r3, [pc, #68]	; (8010a9c <nvs_buffer_init+0x134>)
 8010a56:	f8b3 3156 	ldrh.w	r3, [r3, #342]	; 0x156
 8010a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010a5e:	461a      	mov	r2, r3
 8010a60:	2300      	movs	r3, #0
 8010a62:	2000      	movs	r0, #0
 8010a64:	47a0      	blx	r4
            if(physical_nvs.type != NVS_None)
 8010a66:	4b0f      	ldr	r3, [pc, #60]	; (8010aa4 <nvs_buffer_init+0x13c>)
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d007      	beq.n	8010a7e <nvs_buffer_init+0x116>
                grbl.report.status_message(Status_SettingReadFail);
 8010a6e:	4b13      	ldr	r3, [pc, #76]	; (8010abc <nvs_buffer_init+0x154>)
 8010a70:	689b      	ldr	r3, [r3, #8]
 8010a72:	2007      	movs	r0, #7
 8010a74:	4798      	blx	r3
 8010a76:	e002      	b.n	8010a7e <nvs_buffer_init+0x116>
        }
    } else
        protocol_enqueue_rt_command(nvs_warning);
 8010a78:	4811      	ldr	r0, [pc, #68]	; (8010ac0 <nvs_buffer_init+0x158>)
 8010a7a:	f002 feed 	bl	8013858 <protocol_enqueue_rt_command>

    // Clear settings dirty flags
    memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 8010a7e:	2208      	movs	r2, #8
 8010a80:	2100      	movs	r1, #0
 8010a82:	4810      	ldr	r0, [pc, #64]	; (8010ac4 <nvs_buffer_init+0x15c>)
 8010a84:	f015 f9db 	bl	8025e3e <memset>

    return nvsbuffer != NULL;
 8010a88:	4b05      	ldr	r3, [pc, #20]	; (8010aa0 <nvs_buffer_init+0x138>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	bf14      	ite	ne
 8010a90:	2301      	movne	r3, #1
 8010a92:	2300      	moveq	r3, #0
 8010a94:	b2db      	uxtb	r3, r3
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	bdb0      	pop	{r4, r5, r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	200016a0 	.word	0x200016a0
 8010aa0:	20001988 	.word	0x20001988
 8010aa4:	2000198c 	.word	0x2000198c
 8010aa8:	080105e1 	.word	0x080105e1
 8010aac:	08010605 	.word	0x08010605
 8010ab0:	08010671 	.word	0x08010671
 8010ab4:	0801082d 	.word	0x0801082d
 8010ab8:	0803317c 	.word	0x0803317c
 8010abc:	200015b8 	.word	0x200015b8
 8010ac0:	080108e5 	.word	0x080108e5
 8010ac4:	200019bc 	.word	0x200019bc

08010ac8 <nvs_buffer_sync_physical>:
    return addr;
}

// Write RAM changes to physical storage
void nvs_buffer_sync_physical (void)
{
 8010ac8:	b590      	push	{r4, r7, lr}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
    if(!settings_dirty.is_dirty)
 8010ace:	4b97      	ldr	r3, [pc, #604]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	f083 0301 	eor.w	r3, r3, #1
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f040 8122 	bne.w	8010d22 <nvs_buffer_sync_physical+0x25a>
        return;

    if(physical_nvs.memcpy_to_nvs) {
 8010ade:	4b94      	ldr	r3, [pc, #592]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010ae0:	69db      	ldr	r3, [r3, #28]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	f000 8103 	beq.w	8010cee <nvs_buffer_sync_physical+0x226>

        if(settings_dirty.version)
 8010ae8:	4b90      	ldr	r3, [pc, #576]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010aea:	785b      	ldrb	r3, [r3, #1]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00f      	beq.n	8010b10 <nvs_buffer_sync_physical+0x48>
            settings_dirty.version = physical_nvs.memcpy_to_nvs(0, nvsbuffer, 1, false) != NVS_TransferResult_OK;
 8010af0:	4b8f      	ldr	r3, [pc, #572]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010af2:	69dc      	ldr	r4, [r3, #28]
 8010af4:	4b8f      	ldr	r3, [pc, #572]	; (8010d34 <nvs_buffer_sync_physical+0x26c>)
 8010af6:	6819      	ldr	r1, [r3, #0]
 8010af8:	2300      	movs	r3, #0
 8010afa:	2201      	movs	r2, #1
 8010afc:	2000      	movs	r0, #0
 8010afe:	47a0      	blx	r4
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b02      	cmp	r3, #2
 8010b04:	bf14      	ite	ne
 8010b06:	2301      	movne	r3, #1
 8010b08:	2300      	moveq	r3, #0
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	4b87      	ldr	r3, [pc, #540]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010b0e:	705a      	strb	r2, [r3, #1]

        if(settings_dirty.global_settings)
 8010b10:	4b86      	ldr	r3, [pc, #536]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010b12:	789b      	ldrb	r3, [r3, #2]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d011      	beq.n	8010b3c <nvs_buffer_sync_physical+0x74>
            settings_dirty.global_settings = physical_nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)(nvsbuffer + NVS_ADDR_GLOBAL), sizeof(settings_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 8010b18:	4b85      	ldr	r3, [pc, #532]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010b1a:	69dc      	ldr	r4, [r3, #28]
 8010b1c:	4b85      	ldr	r3, [pc, #532]	; (8010d34 <nvs_buffer_sync_physical+0x26c>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	1c59      	adds	r1, r3, #1
 8010b22:	2300      	movs	r3, #0
 8010b24:	f240 126d 	movw	r2, #365	; 0x16d
 8010b28:	2001      	movs	r0, #1
 8010b2a:	47a0      	blx	r4
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	bf14      	ite	ne
 8010b32:	2301      	movne	r3, #1
 8010b34:	2300      	moveq	r3, #0
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	4b7c      	ldr	r3, [pc, #496]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010b3a:	709a      	strb	r2, [r3, #2]

        if(settings_dirty.build_info)
 8010b3c:	4b7b      	ldr	r3, [pc, #492]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010b3e:	78db      	ldrb	r3, [r3, #3]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d012      	beq.n	8010b6a <nvs_buffer_sync_physical+0xa2>
            settings_dirty.build_info = physical_nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)(nvsbuffer + NVS_ADDR_BUILD_INFO), sizeof(stored_line_t) + NVS_CRC_BYTES, false) != NVS_TransferResult_OK;
 8010b44:	4b7a      	ldr	r3, [pc, #488]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010b46:	69dc      	ldr	r4, [r3, #28]
 8010b48:	4b7a      	ldr	r3, [pc, #488]	; (8010d34 <nvs_buffer_sync_physical+0x26c>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f203 31ae 	addw	r1, r3, #942	; 0x3ae
 8010b50:	2300      	movs	r3, #0
 8010b52:	2247      	movs	r2, #71	; 0x47
 8010b54:	f240 30ae 	movw	r0, #942	; 0x3ae
 8010b58:	47a0      	blx	r4
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	bf14      	ite	ne
 8010b60:	2301      	movne	r3, #1
 8010b62:	2300      	moveq	r3, #0
 8010b64:	b2da      	uxtb	r2, r3
 8010b66:	4b71      	ldr	r3, [pc, #452]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010b68:	70da      	strb	r2, [r3, #3]

        uint_fast8_t idx = N_STARTUP_LINE, offset;
 8010b6a:	2302      	movs	r3, #2
 8010b6c:	607b      	str	r3, [r7, #4]
        if(settings_dirty.startup_lines) do {
 8010b6e:	4b6f      	ldr	r3, [pc, #444]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010b70:	795b      	ldrb	r3, [r3, #5]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d03f      	beq.n	8010bf6 <nvs_buffer_sync_physical+0x12e>
            idx--;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	607b      	str	r3, [r7, #4]
            if(bit_istrue(settings_dirty.startup_lines, bit(idx))) {
 8010b7c:	4b6b      	ldr	r3, [pc, #428]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010b7e:	795b      	ldrb	r3, [r3, #5]
 8010b80:	461a      	mov	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	fa22 f303 	lsr.w	r3, r2, r3
 8010b88:	f003 0301 	and.w	r3, r3, #1
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d02f      	beq.n	8010bf0 <nvs_buffer_sync_physical+0x128>
                bit_false(settings_dirty.startup_lines, bit(idx));
 8010b90:	4b66      	ldr	r3, [pc, #408]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010b92:	795a      	ldrb	r2, [r3, #5]
 8010b94:	2101      	movs	r1, #1
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	fa01 f303 	lsl.w	r3, r1, r3
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	43db      	mvns	r3, r3
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	4013      	ands	r3, r2
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	4b61      	ldr	r3, [pc, #388]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010ba8:	715a      	strb	r2, [r3, #5]
                offset = NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES);
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	4613      	mov	r3, r2
 8010bae:	00db      	lsls	r3, r3, #3
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	1a9b      	subs	r3, r3, r2
 8010bb6:	f203 331f 	addw	r3, r3, #799	; 0x31f
 8010bba:	603b      	str	r3, [r7, #0]
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(stored_line_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8010bbc:	4b5c      	ldr	r3, [pc, #368]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010bbe:	69dc      	ldr	r4, [r3, #28]
 8010bc0:	4b5c      	ldr	r3, [pc, #368]	; (8010d34 <nvs_buffer_sync_physical+0x26c>)
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	18d1      	adds	r1, r2, r3
 8010bc8:	2300      	movs	r3, #0
 8010bca:	2247      	movs	r2, #71	; 0x47
 8010bcc:	6838      	ldr	r0, [r7, #0]
 8010bce:	47a0      	blx	r4
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	d10c      	bne.n	8010bf0 <nvs_buffer_sync_physical+0x128>
                    bit_false(settings_dirty.startup_lines, bit(idx));
 8010bd6:	4b55      	ldr	r3, [pc, #340]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010bd8:	795a      	ldrb	r2, [r3, #5]
 8010bda:	2101      	movs	r1, #1
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	fa01 f303 	lsl.w	r3, r1, r3
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	43db      	mvns	r3, r3
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	4013      	ands	r3, r2
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	4b4f      	ldr	r3, [pc, #316]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010bee:	715a      	strb	r2, [r3, #5]
            }
        } while(idx);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d1bf      	bne.n	8010b76 <nvs_buffer_sync_physical+0xae>

        idx = N_CoordinateSystems;
 8010bf6:	230c      	movs	r3, #12
 8010bf8:	607b      	str	r3, [r7, #4]
        if(settings_dirty.coord_data) do {
 8010bfa:	4b4c      	ldr	r3, [pc, #304]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010bfc:	88db      	ldrh	r3, [r3, #6]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d031      	beq.n	8010c66 <nvs_buffer_sync_physical+0x19e>
            if(bit_istrue(settings_dirty.coord_data, bit(idx))) {
 8010c02:	4b4a      	ldr	r3, [pc, #296]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010c04:	88db      	ldrh	r3, [r3, #6]
 8010c06:	461a      	mov	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8010c0e:	f003 0301 	and.w	r3, r3, #1
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d022      	beq.n	8010c5c <nvs_buffer_sync_physical+0x194>
                offset = NVS_ADDR_PARAMETERS + idx * (sizeof(coord_data_t) + NVS_CRC_BYTES);
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	4613      	mov	r3, r2
 8010c1a:	005b      	lsls	r3, r3, #1
 8010c1c:	4413      	add	r3, r2
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	4413      	add	r3, r2
 8010c22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010c26:	603b      	str	r3, [r7, #0]
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(coord_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
 8010c28:	4b41      	ldr	r3, [pc, #260]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010c2a:	69dc      	ldr	r4, [r3, #28]
 8010c2c:	4b41      	ldr	r3, [pc, #260]	; (8010d34 <nvs_buffer_sync_physical+0x26c>)
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	18d1      	adds	r1, r2, r3
 8010c34:	2300      	movs	r3, #0
 8010c36:	220d      	movs	r2, #13
 8010c38:	6838      	ldr	r0, [r7, #0]
 8010c3a:	47a0      	blx	r4
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	d10c      	bne.n	8010c5c <nvs_buffer_sync_physical+0x194>
                    bit_false(settings_dirty.coord_data, bit(idx));
 8010c42:	4b3a      	ldr	r3, [pc, #232]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010c44:	88da      	ldrh	r2, [r3, #6]
 8010c46:	2101      	movs	r1, #1
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	43db      	mvns	r3, r3
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	4013      	ands	r3, r2
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	4b34      	ldr	r3, [pc, #208]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010c5a:	80da      	strh	r2, [r3, #6]
            }
        } while(idx--);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	1e5a      	subs	r2, r3, #1
 8010c60:	607a      	str	r2, [r7, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1cd      	bne.n	8010c02 <nvs_buffer_sync_physical+0x13a>

        if(settings_dirty.driver_settings) {
 8010c66:	4b31      	ldr	r3, [pc, #196]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010c68:	791b      	ldrb	r3, [r3, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d022      	beq.n	8010cb4 <nvs_buffer_sync_physical+0x1ec>
            if(hal.nvs.driver_area.size > 0)
 8010c6e:	4b32      	ldr	r3, [pc, #200]	; (8010d38 <nvs_buffer_sync_physical+0x270>)
 8010c70:	f8b3 3156 	ldrh.w	r3, [r3, #342]	; 0x156
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d01a      	beq.n	8010cae <nvs_buffer_sync_physical+0x1e6>
                settings_dirty.driver_settings = physical_nvs.memcpy_to_nvs(hal.nvs.driver_area.address, (uint8_t *)(nvsbuffer + hal.nvs.driver_area.address), hal.nvs.driver_area.size, false) != NVS_TransferResult_OK;
 8010c78:	4b2d      	ldr	r3, [pc, #180]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010c7a:	69dc      	ldr	r4, [r3, #28]
 8010c7c:	4b2e      	ldr	r3, [pc, #184]	; (8010d38 <nvs_buffer_sync_physical+0x270>)
 8010c7e:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8010c82:	4618      	mov	r0, r3
 8010c84:	4b2b      	ldr	r3, [pc, #172]	; (8010d34 <nvs_buffer_sync_physical+0x26c>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4a2b      	ldr	r2, [pc, #172]	; (8010d38 <nvs_buffer_sync_physical+0x270>)
 8010c8a:	f8b2 2154 	ldrh.w	r2, [r2, #340]	; 0x154
 8010c8e:	1899      	adds	r1, r3, r2
 8010c90:	4b29      	ldr	r3, [pc, #164]	; (8010d38 <nvs_buffer_sync_physical+0x270>)
 8010c92:	f8b3 3156 	ldrh.w	r3, [r3, #342]	; 0x156
 8010c96:	461a      	mov	r2, r3
 8010c98:	2300      	movs	r3, #0
 8010c9a:	47a0      	blx	r4
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	bf14      	ite	ne
 8010ca2:	2301      	movne	r3, #1
 8010ca4:	2300      	moveq	r3, #0
 8010ca6:	b2da      	uxtb	r2, r3
 8010ca8:	4b20      	ldr	r3, [pc, #128]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010caa:	711a      	strb	r2, [r3, #4]
 8010cac:	e002      	b.n	8010cb4 <nvs_buffer_sync_physical+0x1ec>
            else
                settings_dirty.driver_settings = false;
 8010cae:	4b1f      	ldr	r3, [pc, #124]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	711a      	strb	r2, [r3, #4]
                if(physical_nvs.memcpy_to_nvs(offset, (uint8_t *)(nvsbuffer + offset), sizeof(tool_data_t) + NVS_CRC_BYTES, false) == NVS_TransferResult_OK)
                    bit_false(settings_dirty.tool_data, bit(idx));
            }
        } while(idx);
#endif
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8010cb4:	4b1d      	ldr	r3, [pc, #116]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010cb6:	88db      	ldrh	r3, [r3, #6]
                                   settings_dirty.global_settings ||
                                    settings_dirty.driver_settings ||
                                     settings_dirty.startup_lines ||
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d10f      	bne.n	8010cdc <nvs_buffer_sync_physical+0x214>
                                   settings_dirty.global_settings ||
 8010cbc:	4b1b      	ldr	r3, [pc, #108]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010cbe:	789b      	ldrb	r3, [r3, #2]
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d10b      	bne.n	8010cdc <nvs_buffer_sync_physical+0x214>
                                    settings_dirty.driver_settings ||
 8010cc4:	4b19      	ldr	r3, [pc, #100]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010cc6:	791b      	ldrb	r3, [r3, #4]
                                   settings_dirty.global_settings ||
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d107      	bne.n	8010cdc <nvs_buffer_sync_physical+0x214>
                                     settings_dirty.startup_lines ||
 8010ccc:	4b17      	ldr	r3, [pc, #92]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010cce:	795b      	ldrb	r3, [r3, #5]
                                    settings_dirty.driver_settings ||
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d103      	bne.n	8010cdc <nvs_buffer_sync_physical+0x214>
#if N_TOOLS
                                      settings_dirty.tool_data ||
#endif
                                       settings_dirty.build_info;
 8010cd4:	4b15      	ldr	r3, [pc, #84]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010cd6:	78db      	ldrb	r3, [r3, #3]
                                     settings_dirty.startup_lines ||
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <nvs_buffer_sync_physical+0x218>
 8010cdc:	2301      	movs	r3, #1
 8010cde:	e000      	b.n	8010ce2 <nvs_buffer_sync_physical+0x21a>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	f003 0301 	and.w	r3, r3, #1
 8010ce6:	b2da      	uxtb	r2, r3
        settings_dirty.is_dirty = settings_dirty.coord_data ||
 8010ce8:	4b10      	ldr	r3, [pc, #64]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010cea:	701a      	strb	r2, [r3, #0]
 8010cec:	e01a      	b.n	8010d24 <nvs_buffer_sync_physical+0x25c>

    } else if(physical_nvs.memcpy_to_flash) {
 8010cee:	4b10      	ldr	r3, [pc, #64]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d016      	beq.n	8010d24 <nvs_buffer_sync_physical+0x25c>
        if(!physical_nvs.memcpy_to_flash(nvsbuffer))
 8010cf6:	4b0e      	ldr	r3, [pc, #56]	; (8010d30 <nvs_buffer_sync_physical+0x268>)
 8010cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cfa:	4a0e      	ldr	r2, [pc, #56]	; (8010d34 <nvs_buffer_sync_physical+0x26c>)
 8010cfc:	6812      	ldr	r2, [r2, #0]
 8010cfe:	4610      	mov	r0, r2
 8010d00:	4798      	blx	r3
 8010d02:	4603      	mov	r3, r0
 8010d04:	f083 0301 	eor.w	r3, r3, #1
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d003      	beq.n	8010d16 <nvs_buffer_sync_physical+0x24e>
            report_message("Settings write failed!", Message_Warning);
 8010d0e:	2102      	movs	r1, #2
 8010d10:	480a      	ldr	r0, [pc, #40]	; (8010d3c <nvs_buffer_sync_physical+0x274>)
 8010d12:	f003 f92f 	bl	8013f74 <report_message>
        memset(&settings_dirty, 0, sizeof(settings_dirty_t));
 8010d16:	2208      	movs	r2, #8
 8010d18:	2100      	movs	r1, #0
 8010d1a:	4804      	ldr	r0, [pc, #16]	; (8010d2c <nvs_buffer_sync_physical+0x264>)
 8010d1c:	f015 f88f 	bl	8025e3e <memset>
 8010d20:	e000      	b.n	8010d24 <nvs_buffer_sync_physical+0x25c>
        return;
 8010d22:	bf00      	nop
    }
}
 8010d24:	370c      	adds	r7, #12
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd90      	pop	{r4, r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	200019bc 	.word	0x200019bc
 8010d30:	2000198c 	.word	0x2000198c
 8010d34:	20001988 	.word	0x20001988
 8010d38:	200016a0 	.word	0x200016a0
 8010d3c:	0802c35c 	.word	0x0802c35c

08010d40 <nvs_buffer_get_physical>:

nvs_io_t *nvs_buffer_get_physical (void)
{
 8010d40:	b480      	push	{r7}
 8010d42:	af00      	add	r7, sp, #0
    return hal.nvs.type == NVS_Emulated ? &physical_nvs : &hal.nvs;
 8010d44:	4b06      	ldr	r3, [pc, #24]	; (8010d60 <nvs_buffer_get_physical+0x20>)
 8010d46:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8010d4a:	2b04      	cmp	r3, #4
 8010d4c:	d101      	bne.n	8010d52 <nvs_buffer_get_physical+0x12>
 8010d4e:	4b05      	ldr	r3, [pc, #20]	; (8010d64 <nvs_buffer_get_physical+0x24>)
 8010d50:	e000      	b.n	8010d54 <nvs_buffer_get_physical+0x14>
 8010d52:	4b05      	ldr	r3, [pc, #20]	; (8010d68 <nvs_buffer_get_physical+0x28>)
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	200016a0 	.word	0x200016a0
 8010d64:	2000198c 	.word	0x2000198c
 8010d68:	200017e4 	.word	0x200017e4

08010d6c <enqueue_feed_override>:
} override_queue_t;

static override_queue_t feed = {0}, spindle = {0}, coolant = {0};

ISR_CODE void ISR_FUNC(enqueue_feed_override)(uint8_t cmd)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = (feed.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8010d76:	4b0d      	ldr	r3, [pc, #52]	; (8010dac <enqueue_feed_override+0x40>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	f003 030f 	and.w	r3, r3, #15
 8010d80:	60fb      	str	r3, [r7, #12]

    if(bptr != feed.tail) {         // If not buffer full
 8010d82:	4b0a      	ldr	r3, [pc, #40]	; (8010dac <enqueue_feed_override+0x40>)
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d008      	beq.n	8010d9e <enqueue_feed_override+0x32>
        feed.buf[feed.head] = cmd;  // add data to buffer
 8010d8c:	4b07      	ldr	r3, [pc, #28]	; (8010dac <enqueue_feed_override+0x40>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4a06      	ldr	r2, [pc, #24]	; (8010dac <enqueue_feed_override+0x40>)
 8010d92:	4413      	add	r3, r2
 8010d94:	79fa      	ldrb	r2, [r7, #7]
 8010d96:	721a      	strb	r2, [r3, #8]
        feed.head = bptr;           // and update pointer
 8010d98:	4a04      	ldr	r2, [pc, #16]	; (8010dac <enqueue_feed_override+0x40>)
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6013      	str	r3, [r2, #0]
    }
}
 8010d9e:	bf00      	nop
 8010da0:	3714      	adds	r7, #20
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop
 8010dac:	200019c4 	.word	0x200019c4

08010db0 <get_feed_override>:

// Returns 0 if no commands enqueued
uint8_t get_feed_override (void)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = feed.tail;
 8010dba:	4b0d      	ldr	r3, [pc, #52]	; (8010df0 <get_feed_override+0x40>)
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	603b      	str	r3, [r7, #0]

    if(bptr != feed.head) {
 8010dc0:	4b0b      	ldr	r3, [pc, #44]	; (8010df0 <get_feed_override+0x40>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	683a      	ldr	r2, [r7, #0]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d00b      	beq.n	8010de2 <get_feed_override+0x32>
        data = feed.buf[bptr++];                    // Get next character, increment tmp pointer
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	1c5a      	adds	r2, r3, #1
 8010dce:	603a      	str	r2, [r7, #0]
 8010dd0:	4a07      	ldr	r2, [pc, #28]	; (8010df0 <get_feed_override+0x40>)
 8010dd2:	4413      	add	r3, r2
 8010dd4:	7a1b      	ldrb	r3, [r3, #8]
 8010dd6:	71fb      	strb	r3, [r7, #7]
        feed.tail = bptr & (OVERRIDE_BUFSIZE - 1);  // and update pointer
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	f003 030f 	and.w	r3, r3, #15
 8010dde:	4a04      	ldr	r2, [pc, #16]	; (8010df0 <get_feed_override+0x40>)
 8010de0:	6053      	str	r3, [r2, #4]
    }

    return data;
 8010de2:	79fb      	ldrb	r3, [r7, #7]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr
 8010df0:	200019c4 	.word	0x200019c4

08010df4 <enqueue_spindle_override>:

ISR_CODE void ISR_FUNC(enqueue_spindle_override)(uint8_t cmd)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b085      	sub	sp, #20
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = (spindle.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8010dfe:	4b0d      	ldr	r3, [pc, #52]	; (8010e34 <enqueue_spindle_override+0x40>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	3301      	adds	r3, #1
 8010e04:	f003 030f 	and.w	r3, r3, #15
 8010e08:	60fb      	str	r3, [r7, #12]

    if(bptr != spindle.tail) {              // If not buffer full
 8010e0a:	4b0a      	ldr	r3, [pc, #40]	; (8010e34 <enqueue_spindle_override+0x40>)
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	68fa      	ldr	r2, [r7, #12]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d008      	beq.n	8010e26 <enqueue_spindle_override+0x32>
        spindle.buf[spindle.head] = cmd;    // add data to buffer
 8010e14:	4b07      	ldr	r3, [pc, #28]	; (8010e34 <enqueue_spindle_override+0x40>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4a06      	ldr	r2, [pc, #24]	; (8010e34 <enqueue_spindle_override+0x40>)
 8010e1a:	4413      	add	r3, r2
 8010e1c:	79fa      	ldrb	r2, [r7, #7]
 8010e1e:	721a      	strb	r2, [r3, #8]
        spindle.head = bptr;                // and update pointer
 8010e20:	4a04      	ldr	r2, [pc, #16]	; (8010e34 <enqueue_spindle_override+0x40>)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6013      	str	r3, [r2, #0]
    }
}
 8010e26:	bf00      	nop
 8010e28:	3714      	adds	r7, #20
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop
 8010e34:	200019dc 	.word	0x200019dc

08010e38 <get_spindle_override>:

// Returns 0 if no commands enqueued
uint8_t get_spindle_override (void)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = spindle.tail;
 8010e42:	4b0d      	ldr	r3, [pc, #52]	; (8010e78 <get_spindle_override+0x40>)
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	603b      	str	r3, [r7, #0]

    if(bptr != spindle.head) {
 8010e48:	4b0b      	ldr	r3, [pc, #44]	; (8010e78 <get_spindle_override+0x40>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	683a      	ldr	r2, [r7, #0]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d00b      	beq.n	8010e6a <get_spindle_override+0x32>
        data = spindle.buf[bptr++];                     // Get next character, increment tmp pointer
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	1c5a      	adds	r2, r3, #1
 8010e56:	603a      	str	r2, [r7, #0]
 8010e58:	4a07      	ldr	r2, [pc, #28]	; (8010e78 <get_spindle_override+0x40>)
 8010e5a:	4413      	add	r3, r2
 8010e5c:	7a1b      	ldrb	r3, [r3, #8]
 8010e5e:	71fb      	strb	r3, [r7, #7]
        spindle.tail = bptr & (OVERRIDE_BUFSIZE - 1);   // and update pointer
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	f003 030f 	and.w	r3, r3, #15
 8010e66:	4a04      	ldr	r2, [pc, #16]	; (8010e78 <get_spindle_override+0x40>)
 8010e68:	6053      	str	r3, [r2, #4]
    }

    return data;
 8010e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr
 8010e78:	200019dc 	.word	0x200019dc

08010e7c <enqueue_coolant_override>:

ISR_CODE void ISR_FUNC(enqueue_coolant_override)(uint8_t cmd)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b085      	sub	sp, #20
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	4603      	mov	r3, r0
 8010e84:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = (coolant.head + 1) & (OVERRIDE_BUFSIZE - 1);    // Get next head pointer
 8010e86:	4b0d      	ldr	r3, [pc, #52]	; (8010ebc <enqueue_coolant_override+0x40>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	3301      	adds	r3, #1
 8010e8c:	f003 030f 	and.w	r3, r3, #15
 8010e90:	60fb      	str	r3, [r7, #12]

    if(bptr != coolant.tail) {              // If not buffer full
 8010e92:	4b0a      	ldr	r3, [pc, #40]	; (8010ebc <enqueue_coolant_override+0x40>)
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d008      	beq.n	8010eae <enqueue_coolant_override+0x32>
        coolant.buf[coolant.head] = cmd;    // add data to buffer
 8010e9c:	4b07      	ldr	r3, [pc, #28]	; (8010ebc <enqueue_coolant_override+0x40>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a06      	ldr	r2, [pc, #24]	; (8010ebc <enqueue_coolant_override+0x40>)
 8010ea2:	4413      	add	r3, r2
 8010ea4:	79fa      	ldrb	r2, [r7, #7]
 8010ea6:	721a      	strb	r2, [r3, #8]
        coolant.head = bptr;                // and update pointer
 8010ea8:	4a04      	ldr	r2, [pc, #16]	; (8010ebc <enqueue_coolant_override+0x40>)
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	6013      	str	r3, [r2, #0]
    }
}
 8010eae:	bf00      	nop
 8010eb0:	3714      	adds	r7, #20
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr
 8010eba:	bf00      	nop
 8010ebc:	200019f4 	.word	0x200019f4

08010ec0 <get_coolant_override>:

// Returns 0 if no commands enqueued
uint8_t get_coolant_override (void)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t bptr = coolant.tail;
 8010eca:	4b0d      	ldr	r3, [pc, #52]	; (8010f00 <get_coolant_override+0x40>)
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	603b      	str	r3, [r7, #0]

    if(bptr != coolant.head) {
 8010ed0:	4b0b      	ldr	r3, [pc, #44]	; (8010f00 <get_coolant_override+0x40>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	683a      	ldr	r2, [r7, #0]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d00b      	beq.n	8010ef2 <get_coolant_override+0x32>
        data = coolant.buf[bptr++];                   // Get next character, increment tmp pointer
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	603a      	str	r2, [r7, #0]
 8010ee0:	4a07      	ldr	r2, [pc, #28]	; (8010f00 <get_coolant_override+0x40>)
 8010ee2:	4413      	add	r3, r2
 8010ee4:	7a1b      	ldrb	r3, [r3, #8]
 8010ee6:	71fb      	strb	r3, [r7, #7]
        coolant.tail = bptr & (OVERRIDE_BUFSIZE - 1); // and update pointer
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	f003 030f 	and.w	r3, r3, #15
 8010eee:	4a04      	ldr	r2, [pc, #16]	; (8010f00 <get_coolant_override+0x40>)
 8010ef0:	6053      	str	r3, [r2, #4]
    }

    return data;
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	370c      	adds	r7, #12
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr
 8010f00:	200019f4 	.word	0x200019f4

08010f04 <flush_override_buffers>:

void flush_override_buffers (void)
{
 8010f04:	b480      	push	{r7}
 8010f06:	af00      	add	r7, sp, #0
    feed.head = feed.tail = spindle.head = spindle.tail = coolant.head = coolant.tail = 0;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	4a08      	ldr	r2, [pc, #32]	; (8010f2c <flush_override_buffers+0x28>)
 8010f0c:	6053      	str	r3, [r2, #4]
 8010f0e:	4a07      	ldr	r2, [pc, #28]	; (8010f2c <flush_override_buffers+0x28>)
 8010f10:	6013      	str	r3, [r2, #0]
 8010f12:	4a07      	ldr	r2, [pc, #28]	; (8010f30 <flush_override_buffers+0x2c>)
 8010f14:	6053      	str	r3, [r2, #4]
 8010f16:	4a06      	ldr	r2, [pc, #24]	; (8010f30 <flush_override_buffers+0x2c>)
 8010f18:	6013      	str	r3, [r2, #0]
 8010f1a:	4a06      	ldr	r2, [pc, #24]	; (8010f34 <flush_override_buffers+0x30>)
 8010f1c:	6053      	str	r3, [r2, #4]
 8010f1e:	4a05      	ldr	r2, [pc, #20]	; (8010f34 <flush_override_buffers+0x30>)
 8010f20:	6013      	str	r3, [r2, #0]
}
 8010f22:	bf00      	nop
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr
 8010f2c:	200019f4 	.word	0x200019f4
 8010f30:	200019dc 	.word	0x200019dc
 8010f34:	200019c4 	.word	0x200019c4

08010f38 <planner_recalculate>:
  to compute an optimal plan, so select carefully. ARM versions should have enough memory and speed for
  look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate (void)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
    // Initialize block pointer to the last block in the planner buffer.
    plan_block_t *block = block_buffer_head->prev;
 8010f3e:	4b68      	ldr	r3, [pc, #416]	; (80110e0 <planner_recalculate+0x1a8>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f44:	60fb      	str	r3, [r7, #12]

    // Bail. Can't do anything with one only one plan-able block.
    if (block == block_buffer_planned)
 8010f46:	4b67      	ldr	r3, [pc, #412]	; (80110e4 <planner_recalculate+0x1ac>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68fa      	ldr	r2, [r7, #12]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	f000 80c3 	beq.w	80110d8 <planner_recalculate+0x1a0>
    // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
    // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
    // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
    float entry_speed_sqr;
    plan_block_t *next;
    plan_block_t *current = block;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	607b      	str	r3, [r7, #4]

    // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
    current->entry_speed_sqr = min(current->max_entry_speed_sqr, 2.0f * current->acceleration * current->millimeters);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	ed93 7a08 	vldr	s14, [r3, #32]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010f62:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f78:	d503      	bpl.n	8010f82 <planner_recalculate+0x4a>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	edd3 7a08 	vldr	s15, [r3, #32]
 8010f80:	e009      	b.n	8010f96 <planner_recalculate+0x5e>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010f88:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	edc3 7a07 	vstr	s15, [r3, #28]

    block = block->prev;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fa0:	60fb      	str	r3, [r7, #12]
    if (block == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8010fa2:	4b50      	ldr	r3, [pc, #320]	; (80110e4 <planner_recalculate+0x1ac>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d141      	bne.n	8011030 <planner_recalculate+0xf8>
        // Check if the first block is the tail. If so, notify stepper to update its current parameters.
        if (block == block_buffer_tail)
 8010fac:	4b4e      	ldr	r3, [pc, #312]	; (80110e8 <planner_recalculate+0x1b0>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d141      	bne.n	801103a <planner_recalculate+0x102>
            st_update_plan_block_parameters();
 8010fb6:	f00d faf1 	bl	801e59c <st_update_plan_block_parameters>
 8010fba:	e03e      	b.n	801103a <planner_recalculate+0x102>
    } else while (block != block_buffer_planned) { // Three or more plan-able blocks

        next = current;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	60bb      	str	r3, [r7, #8]
        current = block;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	607b      	str	r3, [r7, #4]
        block = block->prev;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fc8:	60fb      	str	r3, [r7, #12]

        // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
        if (block == block_buffer_tail)
 8010fca:	4b47      	ldr	r3, [pc, #284]	; (80110e8 <planner_recalculate+0x1b0>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	68fa      	ldr	r2, [r7, #12]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d101      	bne.n	8010fd8 <planner_recalculate+0xa0>
            st_update_plan_block_parameters();
 8010fd4:	f00d fae2 	bl	801e59c <st_update_plan_block_parameters>

        // Compute maximum entry speed decelerating over the current block from its exit speed.
        if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	ed93 7a07 	vldr	s14, [r3, #28]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	edd3 7a08 	vldr	s15, [r3, #32]
 8010fe4:	eeb4 7a67 	vcmp.f32	s14, s15
 8010fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fec:	d020      	beq.n	8011030 <planner_recalculate+0xf8>
            entry_speed_sqr = next->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	ed93 7a07 	vldr	s14, [r3, #28]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010ffa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8011004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801100c:	edc7 7a00 	vstr	s15, [r7]
            current->entry_speed_sqr = entry_speed_sqr < current->max_entry_speed_sqr ? entry_speed_sqr : current->max_entry_speed_sqr;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	edd3 7a08 	vldr	s15, [r3, #32]
 8011016:	ed97 7a00 	vldr	s14, [r7]
 801101a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011022:	d501      	bpl.n	8011028 <planner_recalculate+0xf0>
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	e001      	b.n	801102c <planner_recalculate+0xf4>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6a1b      	ldr	r3, [r3, #32]
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	61d3      	str	r3, [r2, #28]
    } else while (block != block_buffer_planned) { // Three or more plan-able blocks
 8011030:	4b2c      	ldr	r3, [pc, #176]	; (80110e4 <planner_recalculate+0x1ac>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	68fa      	ldr	r2, [r7, #12]
 8011036:	429a      	cmp	r2, r3
 8011038:	d1c0      	bne.n	8010fbc <planner_recalculate+0x84>
        }
    }

    // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
    // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
    next = block_buffer_planned; // Begin at buffer planned pointer
 801103a:	4b2a      	ldr	r3, [pc, #168]	; (80110e4 <planner_recalculate+0x1ac>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	60bb      	str	r3, [r7, #8]
    block = block_buffer_planned->next;
 8011040:	4b28      	ldr	r3, [pc, #160]	; (80110e4 <planner_recalculate+0x1ac>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011046:	60fb      	str	r3, [r7, #12]

    while (block != block_buffer_head) {
 8011048:	e040      	b.n	80110cc <planner_recalculate+0x194>

        current = next;
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	607b      	str	r3, [r7, #4]
        next = block;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	60bb      	str	r3, [r7, #8]

        // Any acceleration detected in the forward pass automatically moves the optimal planned
        // pointer forward, since everything before this is all optimal. In other words, nothing
        // can improve the plan from the buffer tail to the planned pointer by logic.
        if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	ed93 7a07 	vldr	s14, [r3, #28]
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	edd3 7a07 	vldr	s15, [r3, #28]
 801105e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011066:	d520      	bpl.n	80110aa <planner_recalculate+0x172>
            entry_speed_sqr = current->entry_speed_sqr + 2.0f * current->acceleration * current->millimeters;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	ed93 7a07 	vldr	s14, [r3, #28]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011074:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801107e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011086:	edc7 7a00 	vstr	s15, [r7]
        // If true, current block is full-acceleration and we can move the planned pointer forward.
            if (entry_speed_sqr < next->entry_speed_sqr) {
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	edd3 7a07 	vldr	s15, [r3, #28]
 8011090:	ed97 7a00 	vldr	s14, [r7]
 8011094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801109c:	d505      	bpl.n	80110aa <planner_recalculate+0x172>
                next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	683a      	ldr	r2, [r7, #0]
 80110a2:	61da      	str	r2, [r3, #28]
                block_buffer_planned = block; // Set optimal plan pointer.
 80110a4:	4a0f      	ldr	r2, [pc, #60]	; (80110e4 <planner_recalculate+0x1ac>)
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	6013      	str	r3, [r2, #0]

        // Any block set at its maximum entry speed also creates an optimal plan up to this
        // point in the buffer. When the plan is bracketed by either the beginning of the
        // buffer and a maximum entry speed or two maximum entry speeds, every block in between
        // cannot logically be further improved. Hence, we don't have to recompute them anymore.
        if (next->entry_speed_sqr == next->max_entry_speed_sqr)
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80110b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80110ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110be:	d102      	bne.n	80110c6 <planner_recalculate+0x18e>
            block_buffer_planned = block;
 80110c0:	4a08      	ldr	r2, [pc, #32]	; (80110e4 <planner_recalculate+0x1ac>)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	6013      	str	r3, [r2, #0]

        block = block->next;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110ca:	60fb      	str	r3, [r7, #12]
    while (block != block_buffer_head) {
 80110cc:	4b04      	ldr	r3, [pc, #16]	; (80110e0 <planner_recalculate+0x1a8>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	68fa      	ldr	r2, [r7, #12]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d1b9      	bne.n	801104a <planner_recalculate+0x112>
 80110d6:	e000      	b.n	80110da <planner_recalculate+0x1a2>
        return;
 80110d8:	bf00      	nop
    }
}
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	20001a18 	.word	0x20001a18
 80110e4:	20001a20 	.word	0x20001a20
 80110e8:	20001a14 	.word	0x20001a14

080110ec <plan_cleanup>:

inline static void plan_cleanup (plan_block_t *block)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
    if(block->message) {
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d014      	beq.n	8011126 <plan_cleanup+0x3a>
        free(block->message);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011100:	4618      	mov	r0, r3
 8011102:	f014 fb41 	bl	8025788 <free>
        block->message = NULL;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	649a      	str	r2, [r3, #72]	; 0x48
    }

    while(block->output_commands) {
 801110c:	e00b      	b.n	8011126 <plan_cleanup+0x3a>
        output_command_t *next = block->output_commands->next;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011112:	689b      	ldr	r3, [r3, #8]
 8011114:	60fb      	str	r3, [r7, #12]
        free(block->output_commands);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801111a:	4618      	mov	r0, r3
 801111c:	f014 fb34 	bl	8025788 <free>
        block->output_commands = next;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	68fa      	ldr	r2, [r7, #12]
 8011124:	64da      	str	r2, [r3, #76]	; 0x4c
    while(block->output_commands) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801112a:	2b00      	cmp	r3, #0
 801112c:	d1ef      	bne.n	801110e <plan_cleanup+0x22>
    }
}
 801112e:	bf00      	nop
 8011130:	bf00      	nop
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <plan_reset_buffer>:


inline static void plan_reset_buffer (void)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	af00      	add	r7, sp, #0
    if(block_buffer_tail) {
 801113c:	4b13      	ldr	r3, [pc, #76]	; (801118c <plan_reset_buffer+0x54>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d010      	beq.n	8011166 <plan_reset_buffer+0x2e>
        // Free memory for any pending messages and output commands after soft reset
        while(block_buffer_tail != block_buffer_head) {
 8011144:	e009      	b.n	801115a <plan_reset_buffer+0x22>
            plan_cleanup(block_buffer_tail);
 8011146:	4b11      	ldr	r3, [pc, #68]	; (801118c <plan_reset_buffer+0x54>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4618      	mov	r0, r3
 801114c:	f7ff ffce 	bl	80110ec <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 8011150:	4b0e      	ldr	r3, [pc, #56]	; (801118c <plan_reset_buffer+0x54>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011156:	4a0d      	ldr	r2, [pc, #52]	; (801118c <plan_reset_buffer+0x54>)
 8011158:	6013      	str	r3, [r2, #0]
        while(block_buffer_tail != block_buffer_head) {
 801115a:	4b0c      	ldr	r3, [pc, #48]	; (801118c <plan_reset_buffer+0x54>)
 801115c:	681a      	ldr	r2, [r3, #0]
 801115e:	4b0c      	ldr	r3, [pc, #48]	; (8011190 <plan_reset_buffer+0x58>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	429a      	cmp	r2, r3
 8011164:	d1ef      	bne.n	8011146 <plan_reset_buffer+0xe>
        }
    }

    block_buffer_tail = block_buffer_head = block_buffer;   // Empty = tail == head
 8011166:	4b0b      	ldr	r3, [pc, #44]	; (8011194 <plan_reset_buffer+0x5c>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	4a09      	ldr	r2, [pc, #36]	; (8011190 <plan_reset_buffer+0x58>)
 801116c:	6013      	str	r3, [r2, #0]
 801116e:	4b08      	ldr	r3, [pc, #32]	; (8011190 <plan_reset_buffer+0x58>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a06      	ldr	r2, [pc, #24]	; (801118c <plan_reset_buffer+0x54>)
 8011174:	6013      	str	r3, [r2, #0]
    next_buffer_head = block_buffer_head->next;             // = next block
 8011176:	4b06      	ldr	r3, [pc, #24]	; (8011190 <plan_reset_buffer+0x58>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801117c:	4a06      	ldr	r2, [pc, #24]	; (8011198 <plan_reset_buffer+0x60>)
 801117e:	6013      	str	r3, [r2, #0]
    block_buffer_planned = block_buffer_tail;               // = block_buffer_tail
 8011180:	4b02      	ldr	r3, [pc, #8]	; (801118c <plan_reset_buffer+0x54>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4a05      	ldr	r2, [pc, #20]	; (801119c <plan_reset_buffer+0x64>)
 8011186:	6013      	str	r3, [r2, #0]
}
 8011188:	bf00      	nop
 801118a:	bd80      	pop	{r7, pc}
 801118c:	20001a14 	.word	0x20001a14
 8011190:	20001a18 	.word	0x20001a18
 8011194:	20001a10 	.word	0x20001a10
 8011198:	20001a1c 	.word	0x20001a1c
 801119c:	20001a20 	.word	0x20001a20

080111a0 <planner_warning>:

static void planner_warning (sys_state_t state)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
    report_message("Planner buffer size was reduced!", Message_Plain);
 80111a8:	2100      	movs	r1, #0
 80111aa:	4803      	ldr	r0, [pc, #12]	; (80111b8 <planner_warning+0x18>)
 80111ac:	f002 fee2 	bl	8013f74 <report_message>
}
 80111b0:	bf00      	nop
 80111b2:	3708      	adds	r7, #8
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	0802c910 	.word	0x0802c910

080111bc <plan_get_buffer_size>:

uint_fast16_t plan_get_buffer_size (void)
{
 80111bc:	b480      	push	{r7}
 80111be:	af00      	add	r7, sp, #0
    return block_buffer_size;
 80111c0:	4b03      	ldr	r3, [pc, #12]	; (80111d0 <plan_get_buffer_size+0x14>)
 80111c2:	681b      	ldr	r3, [r3, #0]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop
 80111d0:	20001a0c 	.word	0x20001a0c

080111d4 <plan_reset>:

bool plan_reset (void)
{
 80111d4:	b590      	push	{r4, r7, lr}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
    if(block_buffer == NULL) {
 80111da:	4b4e      	ldr	r3, [pc, #312]	; (8011314 <plan_reset+0x140>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d128      	bne.n	8011234 <plan_reset+0x60>

        block_buffer_size = settings.planner_buffer_blocks;
 80111e2:	4b4d      	ldr	r3, [pc, #308]	; (8011318 <plan_reset+0x144>)
 80111e4:	8adb      	ldrh	r3, [r3, #22]
 80111e6:	461a      	mov	r2, r3
 80111e8:	4b4c      	ldr	r3, [pc, #304]	; (801131c <plan_reset+0x148>)
 80111ea:	601a      	str	r2, [r3, #0]

        while((block_buffer = malloc((block_buffer_size + 1) * sizeof(plan_block_t))) == NULL) {
 80111ec:	e00f      	b.n	801120e <plan_reset+0x3a>
            if(block_buffer_size > 40)
 80111ee:	4b4b      	ldr	r3, [pc, #300]	; (801131c <plan_reset+0x148>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	2b28      	cmp	r3, #40	; 0x28
 80111f4:	d91d      	bls.n	8011232 <plan_reset+0x5e>
                block_buffer_size -= block_buffer_size >= 250 ? 100 : 10;
 80111f6:	4b49      	ldr	r3, [pc, #292]	; (801131c <plan_reset+0x148>)
 80111f8:	681a      	ldr	r2, [r3, #0]
 80111fa:	4b48      	ldr	r3, [pc, #288]	; (801131c <plan_reset+0x148>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2bf9      	cmp	r3, #249	; 0xf9
 8011200:	d901      	bls.n	8011206 <plan_reset+0x32>
 8011202:	2364      	movs	r3, #100	; 0x64
 8011204:	e000      	b.n	8011208 <plan_reset+0x34>
 8011206:	230a      	movs	r3, #10
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	4a44      	ldr	r2, [pc, #272]	; (801131c <plan_reset+0x148>)
 801120c:	6013      	str	r3, [r2, #0]
        while((block_buffer = malloc((block_buffer_size + 1) * sizeof(plan_block_t))) == NULL) {
 801120e:	4b43      	ldr	r3, [pc, #268]	; (801131c <plan_reset+0x148>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	3301      	adds	r3, #1
 8011214:	2258      	movs	r2, #88	; 0x58
 8011216:	fb02 f303 	mul.w	r3, r2, r3
 801121a:	4618      	mov	r0, r3
 801121c:	f014 faac 	bl	8025778 <malloc>
 8011220:	4603      	mov	r3, r0
 8011222:	461a      	mov	r2, r3
 8011224:	4b3b      	ldr	r3, [pc, #236]	; (8011314 <plan_reset+0x140>)
 8011226:	601a      	str	r2, [r3, #0]
 8011228:	4b3a      	ldr	r3, [pc, #232]	; (8011314 <plan_reset+0x140>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d0de      	beq.n	80111ee <plan_reset+0x1a>
 8011230:	e000      	b.n	8011234 <plan_reset+0x60>
            else
                break;
 8011232:	bf00      	nop
        }
    }

    if(block_buffer_size != settings.planner_buffer_blocks)
 8011234:	4b38      	ldr	r3, [pc, #224]	; (8011318 <plan_reset+0x144>)
 8011236:	8adb      	ldrh	r3, [r3, #22]
 8011238:	461a      	mov	r2, r3
 801123a:	4b38      	ldr	r3, [pc, #224]	; (801131c <plan_reset+0x148>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	429a      	cmp	r2, r3
 8011240:	d002      	beq.n	8011248 <plan_reset+0x74>
        protocol_enqueue_rt_command(planner_warning);
 8011242:	4837      	ldr	r0, [pc, #220]	; (8011320 <plan_reset+0x14c>)
 8011244:	f002 fb08 	bl	8013858 <protocol_enqueue_rt_command>

    if(block_buffer == NULL)
 8011248:	4b32      	ldr	r3, [pc, #200]	; (8011314 <plan_reset+0x140>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d101      	bne.n	8011254 <plan_reset+0x80>
        return false;
 8011250:	2300      	movs	r3, #0
 8011252:	e05a      	b.n	801130a <plan_reset+0x136>

    if(block_buffer_tail) {
 8011254:	4b33      	ldr	r3, [pc, #204]	; (8011324 <plan_reset+0x150>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d013      	beq.n	8011284 <plan_reset+0xb0>
        // Free memory for any pending messages and output commands after soft reset
        while(block_buffer_tail != block_buffer_head) {
 801125c:	e009      	b.n	8011272 <plan_reset+0x9e>
            plan_cleanup(block_buffer_tail);
 801125e:	4b31      	ldr	r3, [pc, #196]	; (8011324 <plan_reset+0x150>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	4618      	mov	r0, r3
 8011264:	f7ff ff42 	bl	80110ec <plan_cleanup>
            block_buffer_tail = block_buffer_tail->next;
 8011268:	4b2e      	ldr	r3, [pc, #184]	; (8011324 <plan_reset+0x150>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801126e:	4a2d      	ldr	r2, [pc, #180]	; (8011324 <plan_reset+0x150>)
 8011270:	6013      	str	r3, [r2, #0]
        while(block_buffer_tail != block_buffer_head) {
 8011272:	4b2c      	ldr	r3, [pc, #176]	; (8011324 <plan_reset+0x150>)
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	4b2c      	ldr	r3, [pc, #176]	; (8011328 <plan_reset+0x154>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	429a      	cmp	r2, r3
 801127c:	d1ef      	bne.n	801125e <plan_reset+0x8a>
        }
        block_buffer_tail = NULL;
 801127e:	4b29      	ldr	r3, [pc, #164]	; (8011324 <plan_reset+0x150>)
 8011280:	2200      	movs	r2, #0
 8011282:	601a      	str	r2, [r3, #0]
    }

    memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8011284:	221c      	movs	r2, #28
 8011286:	2100      	movs	r1, #0
 8011288:	4828      	ldr	r0, [pc, #160]	; (801132c <plan_reset+0x158>)
 801128a:	f014 fdd8 	bl	8025e3e <memset>

    // Set up stepper block ringbuffer as circular doubly linked list
    uint_fast8_t idx;
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 801128e:	2300      	movs	r3, #0
 8011290:	607b      	str	r3, [r7, #4]
 8011292:	e032      	b.n	80112fa <plan_reset+0x126>
        block_buffer[idx].prev = &block_buffer[idx == 0 ? block_buffer_size : idx - 1];
 8011294:	4b1f      	ldr	r3, [pc, #124]	; (8011314 <plan_reset+0x140>)
 8011296:	6819      	ldr	r1, [r3, #0]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d105      	bne.n	80112aa <plan_reset+0xd6>
 801129e:	4b1f      	ldr	r3, [pc, #124]	; (801131c <plan_reset+0x148>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2258      	movs	r2, #88	; 0x58
 80112a4:	fb02 f303 	mul.w	r3, r2, r3
 80112a8:	e004      	b.n	80112b4 <plan_reset+0xe0>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2258      	movs	r2, #88	; 0x58
 80112ae:	fb02 f303 	mul.w	r3, r2, r3
 80112b2:	3b58      	subs	r3, #88	; 0x58
 80112b4:	4a17      	ldr	r2, [pc, #92]	; (8011314 <plan_reset+0x140>)
 80112b6:	6810      	ldr	r0, [r2, #0]
 80112b8:	687a      	ldr	r2, [r7, #4]
 80112ba:	2458      	movs	r4, #88	; 0x58
 80112bc:	fb04 f202 	mul.w	r2, r4, r2
 80112c0:	4402      	add	r2, r0
 80112c2:	440b      	add	r3, r1
 80112c4:	6513      	str	r3, [r2, #80]	; 0x50
        block_buffer[idx].next = &block_buffer[idx == block_buffer_size ? 0 : idx + 1];
 80112c6:	4b13      	ldr	r3, [pc, #76]	; (8011314 <plan_reset+0x140>)
 80112c8:	6819      	ldr	r1, [r3, #0]
 80112ca:	4b14      	ldr	r3, [pc, #80]	; (801131c <plan_reset+0x148>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d005      	beq.n	80112e0 <plan_reset+0x10c>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	3301      	adds	r3, #1
 80112d8:	2258      	movs	r2, #88	; 0x58
 80112da:	fb02 f303 	mul.w	r3, r2, r3
 80112de:	e000      	b.n	80112e2 <plan_reset+0x10e>
 80112e0:	2300      	movs	r3, #0
 80112e2:	4a0c      	ldr	r2, [pc, #48]	; (8011314 <plan_reset+0x140>)
 80112e4:	6810      	ldr	r0, [r2, #0]
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	2458      	movs	r4, #88	; 0x58
 80112ea:	fb04 f202 	mul.w	r2, r4, r2
 80112ee:	4402      	add	r2, r0
 80112f0:	440b      	add	r3, r1
 80112f2:	6553      	str	r3, [r2, #84]	; 0x54
    for(idx = 0 ; idx <= block_buffer_size ; idx++) {
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	3301      	adds	r3, #1
 80112f8:	607b      	str	r3, [r7, #4]
 80112fa:	4b08      	ldr	r3, [pc, #32]	; (801131c <plan_reset+0x148>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	429a      	cmp	r2, r3
 8011302:	d9c7      	bls.n	8011294 <plan_reset+0xc0>
    }

    plan_reset_buffer();
 8011304:	f7ff ff18 	bl	8011138 <plan_reset_buffer>

    return true;
 8011308:	2301      	movs	r3, #1
}
 801130a:	4618      	mov	r0, r3
 801130c:	370c      	adds	r7, #12
 801130e:	46bd      	mov	sp, r7
 8011310:	bd90      	pop	{r4, r7, pc}
 8011312:	bf00      	nop
 8011314:	20001a10 	.word	0x20001a10
 8011318:	20001cf0 	.word	0x20001cf0
 801131c:	20001a0c 	.word	0x20001a0c
 8011320:	080111a1 	.word	0x080111a1
 8011324:	20001a14 	.word	0x20001a14
 8011328:	20001a18 	.word	0x20001a18
 801132c:	20001a24 	.word	0x20001a24

08011330 <plan_discard_current_block>:


void plan_discard_current_block (void)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	af00      	add	r7, sp, #0
    if (block_buffer_tail != block_buffer_head) { // Discard non-empty buffer.
 8011334:	4b0e      	ldr	r3, [pc, #56]	; (8011370 <plan_discard_current_block+0x40>)
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	4b0e      	ldr	r3, [pc, #56]	; (8011374 <plan_discard_current_block+0x44>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	429a      	cmp	r2, r3
 801133e:	d014      	beq.n	801136a <plan_discard_current_block+0x3a>
        plan_cleanup(block_buffer_tail);
 8011340:	4b0b      	ldr	r3, [pc, #44]	; (8011370 <plan_discard_current_block+0x40>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	4618      	mov	r0, r3
 8011346:	f7ff fed1 	bl	80110ec <plan_cleanup>
        // Push block_buffer_planned pointer, if encountered.
        if (block_buffer_tail == block_buffer_planned)
 801134a:	4b09      	ldr	r3, [pc, #36]	; (8011370 <plan_discard_current_block+0x40>)
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	4b0a      	ldr	r3, [pc, #40]	; (8011378 <plan_discard_current_block+0x48>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	429a      	cmp	r2, r3
 8011354:	d104      	bne.n	8011360 <plan_discard_current_block+0x30>
            block_buffer_planned = block_buffer_tail->next;
 8011356:	4b06      	ldr	r3, [pc, #24]	; (8011370 <plan_discard_current_block+0x40>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801135c:	4a06      	ldr	r2, [pc, #24]	; (8011378 <plan_discard_current_block+0x48>)
 801135e:	6013      	str	r3, [r2, #0]
        block_buffer_tail = block_buffer_tail->next;
 8011360:	4b03      	ldr	r3, [pc, #12]	; (8011370 <plan_discard_current_block+0x40>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011366:	4a02      	ldr	r2, [pc, #8]	; (8011370 <plan_discard_current_block+0x40>)
 8011368:	6013      	str	r3, [r2, #0]
    }
}
 801136a:	bf00      	nop
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	20001a14 	.word	0x20001a14
 8011374:	20001a18 	.word	0x20001a18
 8011378:	20001a20 	.word	0x20001a20

0801137c <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block (void)
{
 801137c:	b480      	push	{r7}
 801137e:	af00      	add	r7, sp, #0
    return block_buffer_head;
 8011380:	4b03      	ldr	r3, [pc, #12]	; (8011390 <plan_get_system_motion_block+0x14>)
 8011382:	681b      	ldr	r3, [r3, #0]
}
 8011384:	4618      	mov	r0, r3
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	20001a18 	.word	0x20001a18

08011394 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block (void)
{
 8011394:	b480      	push	{r7}
 8011396:	af00      	add	r7, sp, #0
    return block_buffer_head == block_buffer_tail ? NULL : block_buffer_tail;
 8011398:	4b07      	ldr	r3, [pc, #28]	; (80113b8 <plan_get_current_block+0x24>)
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	4b07      	ldr	r3, [pc, #28]	; (80113bc <plan_get_current_block+0x28>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d002      	beq.n	80113aa <plan_get_current_block+0x16>
 80113a4:	4b05      	ldr	r3, [pc, #20]	; (80113bc <plan_get_current_block+0x28>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	e000      	b.n	80113ac <plan_get_current_block+0x18>
 80113aa:	2300      	movs	r3, #0
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	46bd      	mov	sp, r7
 80113b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop
 80113b8:	20001a18 	.word	0x20001a18
 80113bc:	20001a14 	.word	0x20001a14

080113c0 <plan_get_exec_block_exit_speed_sqr>:


inline float plan_get_exec_block_exit_speed_sqr (void)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
    plan_block_t *block = block_buffer_tail->next;
 80113c6:	4b0b      	ldr	r3, [pc, #44]	; (80113f4 <plan_get_exec_block_exit_speed_sqr+0x34>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113cc:	607b      	str	r3, [r7, #4]
    return block == block_buffer_head ? 0.0f : block->entry_speed_sqr;
 80113ce:	4b0a      	ldr	r3, [pc, #40]	; (80113f8 <plan_get_exec_block_exit_speed_sqr+0x38>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d002      	beq.n	80113de <plan_get_exec_block_exit_speed_sqr+0x1e>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	69db      	ldr	r3, [r3, #28]
 80113dc:	e001      	b.n	80113e2 <plan_get_exec_block_exit_speed_sqr+0x22>
 80113de:	f04f 0300 	mov.w	r3, #0
 80113e2:	ee07 3a90 	vmov	s15, r3
}
 80113e6:	eeb0 0a67 	vmov.f32	s0, s15
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr
 80113f4:	20001a14 	.word	0x20001a14
 80113f8:	20001a18 	.word	0x20001a18

080113fc <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
bool plan_check_full_buffer (void)
{
 80113fc:	b480      	push	{r7}
 80113fe:	af00      	add	r7, sp, #0
    return block_buffer_tail == next_buffer_head;
 8011400:	4b06      	ldr	r3, [pc, #24]	; (801141c <plan_check_full_buffer+0x20>)
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	4b06      	ldr	r3, [pc, #24]	; (8011420 <plan_check_full_buffer+0x24>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	429a      	cmp	r2, r3
 801140a:	bf0c      	ite	eq
 801140c:	2301      	moveq	r3, #1
 801140e:	2300      	movne	r3, #0
 8011410:	b2db      	uxtb	r3, r3
}
 8011412:	4618      	mov	r0, r3
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	20001a14 	.word	0x20001a14
 8011420:	20001a1c 	.word	0x20001a1c

08011424 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed (plan_block_t *block)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	ed2d 8b02 	vpush	{d8}
 801142a:	b084      	sub	sp, #16
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
    float nominal_speed = block->spindle.state.synchronized ? block->programmed_rate * block->spindle.hal->get_data(SpindleData_RPM)->rpm : block->programmed_rate;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011436:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801143a:	b2db      	uxtb	r3, r3
 801143c:	2b00      	cmp	r3, #0
 801143e:	d00d      	beq.n	801145c <plan_compute_profile_nominal_speed+0x38>
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801144c:	2001      	movs	r0, #1
 801144e:	4798      	blx	r3
 8011450:	4603      	mov	r3, r0
 8011452:	edd3 7a00 	vldr	s15, [r3]
 8011456:	ee68 7a27 	vmul.f32	s15, s16, s15
 801145a:	e002      	b.n	8011462 <plan_compute_profile_nominal_speed+0x3e>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011462:	edc7 7a03 	vstr	s15, [r7, #12]

    if (block->condition.rapid_motion)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	7d1b      	ldrb	r3, [r3, #20]
 801146a:	f003 0301 	and.w	r3, r3, #1
 801146e:	b2db      	uxtb	r3, r3
 8011470:	2b00      	cmp	r3, #0
 8011472:	d010      	beq.n	8011496 <plan_compute_profile_nominal_speed+0x72>
        nominal_speed *= (0.01f * (float)sys.override.rapid_rate);
 8011474:	4b25      	ldr	r3, [pc, #148]	; (801150c <plan_compute_profile_nominal_speed+0xe8>)
 8011476:	6a1b      	ldr	r3, [r3, #32]
 8011478:	ee07 3a90 	vmov	s15, r3
 801147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011480:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8011510 <plan_compute_profile_nominal_speed+0xec>
 8011484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011488:	ed97 7a03 	vldr	s14, [r7, #12]
 801148c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011490:	edc7 7a03 	vstr	s15, [r7, #12]
 8011494:	e023      	b.n	80114de <plan_compute_profile_nominal_speed+0xba>
    else {
        if (!block->condition.no_feed_override)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	7d1b      	ldrb	r3, [r3, #20]
 801149a:	f003 0310 	and.w	r3, r3, #16
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d10f      	bne.n	80114c4 <plan_compute_profile_nominal_speed+0xa0>
            nominal_speed *= (0.01f * (float)sys.override.feed_rate);
 80114a4:	4b19      	ldr	r3, [pc, #100]	; (801150c <plan_compute_profile_nominal_speed+0xe8>)
 80114a6:	69db      	ldr	r3, [r3, #28]
 80114a8:	ee07 3a90 	vmov	s15, r3
 80114ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114b0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8011510 <plan_compute_profile_nominal_speed+0xec>
 80114b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80114bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114c0:	edc7 7a03 	vstr	s15, [r7, #12]
        if (nominal_speed > block->rapid_rate)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80114ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80114ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d6:	dd02      	ble.n	80114de <plan_compute_profile_nominal_speed+0xba>
            nominal_speed = block->rapid_rate;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114dc:	60fb      	str	r3, [r7, #12]
    }

// TODO: if nominal speed is outside bounds when synchronized motion is on then (?? retract and) abort, ignore overrides?
    return nominal_speed > MINIMUM_FEED_RATE ? nominal_speed : MINIMUM_FEED_RATE;
 80114de:	edd7 7a03 	vldr	s15, [r7, #12]
 80114e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80114e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ee:	dd01      	ble.n	80114f4 <plan_compute_profile_nominal_speed+0xd0>
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	e001      	b.n	80114f8 <plan_compute_profile_nominal_speed+0xd4>
 80114f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80114f8:	ee07 3a90 	vmov	s15, r3
}
 80114fc:	eeb0 0a67 	vmov.f32	s0, s15
 8011500:	3710      	adds	r7, #16
 8011502:	46bd      	mov	sp, r7
 8011504:	ecbd 8b02 	vpop	{d8}
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	20001520 	.word	0x20001520
 8011510:	3c23d70a 	.word	0x3c23d70a

08011514 <plan_compute_profile_parameters>:


// Computes and updates the max entry speed (sqr) of the block, based on the minimum of the junction's
// previous and current nominal speeds and max junction speed.
inline static float plan_compute_profile_parameters (plan_block_t *block, float nominal_speed, float prev_nominal_speed)
{
 8011514:	b480      	push	{r7}
 8011516:	b085      	sub	sp, #20
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	ed87 0a02 	vstr	s0, [r7, #8]
 8011520:	edc7 0a01 	vstr	s1, [r7, #4]
  // Compute the junction maximum entry based on the minimum of the junction speed and neighboring nominal speeds.
    block->max_entry_speed_sqr = nominal_speed > prev_nominal_speed ? (prev_nominal_speed * prev_nominal_speed) : (nominal_speed * nominal_speed);
 8011524:	ed97 7a02 	vldr	s14, [r7, #8]
 8011528:	edd7 7a01 	vldr	s15, [r7, #4]
 801152c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011534:	dd04      	ble.n	8011540 <plan_compute_profile_parameters+0x2c>
 8011536:	edd7 7a01 	vldr	s15, [r7, #4]
 801153a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801153e:	e003      	b.n	8011548 <plan_compute_profile_parameters+0x34>
 8011540:	edd7 7a02 	vldr	s15, [r7, #8]
 8011544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	edc3 7a08 	vstr	s15, [r3, #32]
    if (block->max_entry_speed_sqr > block->max_junction_speed_sqr)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	ed93 7a08 	vldr	s14, [r3, #32]
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801155a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011562:	dd03      	ble.n	801156c <plan_compute_profile_parameters+0x58>
        block->max_entry_speed_sqr = block->max_junction_speed_sqr;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	621a      	str	r2, [r3, #32]
    return nominal_speed;
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	ee07 3a90 	vmov	s15, r3
}
 8011572:	eeb0 0a67 	vmov.f32	s0, s15
 8011576:	3714      	adds	r7, #20
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <limit_acceleration_by_axis_maximum>:

static inline float limit_acceleration_by_axis_maximum (float *unit_vec)
{
 8011580:	b480      	push	{r7}
 8011582:	b085      	sub	sp, #20
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
    uint_fast8_t idx = N_AXIS;
 8011588:	2303      	movs	r3, #3
 801158a:	60fb      	str	r3, [r7, #12]
    float limit_value = SOME_LARGE_VALUE;
 801158c:	4b28      	ldr	r3, [pc, #160]	; (8011630 <limit_acceleration_by_axis_maximum+0xb0>)
 801158e:	60bb      	str	r3, [r7, #8]

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	3b01      	subs	r3, #1
 8011594:	60fb      	str	r3, [r7, #12]
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	009b      	lsls	r3, r3, #2
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	4413      	add	r3, r2
 801159e:	edd3 7a00 	vldr	s15, [r3]
 80115a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80115a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115aa:	d033      	beq.n	8011614 <limit_acceleration_by_axis_maximum+0x94>
            limit_value = min(limit_value, fabsf(settings.axis[idx].acceleration / unit_vec[idx]));
 80115ac:	4921      	ldr	r1, [pc, #132]	; (8011634 <limit_acceleration_by_axis_maximum+0xb4>)
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	4613      	mov	r3, r2
 80115b2:	009b      	lsls	r3, r3, #2
 80115b4:	4413      	add	r3, r2
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	440b      	add	r3, r1
 80115ba:	3338      	adds	r3, #56	; 0x38
 80115bc:	edd3 6a00 	vldr	s13, [r3]
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	4413      	add	r3, r2
 80115c8:	ed93 7a00 	vldr	s14, [r3]
 80115cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115d0:	eef0 7ae7 	vabs.f32	s15, s15
 80115d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80115d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80115dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e0:	d502      	bpl.n	80115e8 <limit_acceleration_by_axis_maximum+0x68>
 80115e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80115e6:	e013      	b.n	8011610 <limit_acceleration_by_axis_maximum+0x90>
 80115e8:	4912      	ldr	r1, [pc, #72]	; (8011634 <limit_acceleration_by_axis_maximum+0xb4>)
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	4613      	mov	r3, r2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	4413      	add	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	440b      	add	r3, r1
 80115f6:	3338      	adds	r3, #56	; 0x38
 80115f8:	edd3 6a00 	vldr	s13, [r3]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	4413      	add	r3, r2
 8011604:	ed93 7a00 	vldr	s14, [r3]
 8011608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801160c:	eef0 7ae7 	vabs.f32	s15, s15
 8011610:	edc7 7a02 	vstr	s15, [r7, #8]
    } while(idx);
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d1ba      	bne.n	8011590 <limit_acceleration_by_axis_maximum+0x10>

    return limit_value;
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	ee07 3a90 	vmov	s15, r3
}
 8011620:	eeb0 0a67 	vmov.f32	s0, s15
 8011624:	3714      	adds	r7, #20
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	7e967699 	.word	0x7e967699
 8011634:	20001cf0 	.word	0x20001cf0

08011638 <limit_max_rate_by_axis_maximum>:

static inline float limit_max_rate_by_axis_maximum (float *unit_vec)
{
 8011638:	b480      	push	{r7}
 801163a:	b085      	sub	sp, #20
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
    uint_fast8_t idx = N_AXIS;
 8011640:	2303      	movs	r3, #3
 8011642:	60fb      	str	r3, [r7, #12]
    float limit_value = SOME_LARGE_VALUE;
 8011644:	4b28      	ldr	r3, [pc, #160]	; (80116e8 <limit_max_rate_by_axis_maximum+0xb0>)
 8011646:	60bb      	str	r3, [r7, #8]

    do {
        if (unit_vec[--idx] != 0.0f)  // Avoid divide by zero.
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	3b01      	subs	r3, #1
 801164c:	60fb      	str	r3, [r7, #12]
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	009b      	lsls	r3, r3, #2
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	4413      	add	r3, r2
 8011656:	edd3 7a00 	vldr	s15, [r3]
 801165a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011662:	d033      	beq.n	80116cc <limit_max_rate_by_axis_maximum+0x94>
            limit_value = min(limit_value, fabsf(settings.axis[idx].max_rate / unit_vec[idx]));
 8011664:	4921      	ldr	r1, [pc, #132]	; (80116ec <limit_max_rate_by_axis_maximum+0xb4>)
 8011666:	68fa      	ldr	r2, [r7, #12]
 8011668:	4613      	mov	r3, r2
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	4413      	add	r3, r2
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	440b      	add	r3, r1
 8011672:	3334      	adds	r3, #52	; 0x34
 8011674:	edd3 6a00 	vldr	s13, [r3]
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	4413      	add	r3, r2
 8011680:	ed93 7a00 	vldr	s14, [r3]
 8011684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011688:	eef0 7ae7 	vabs.f32	s15, s15
 801168c:	ed97 7a02 	vldr	s14, [r7, #8]
 8011690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011698:	d502      	bpl.n	80116a0 <limit_max_rate_by_axis_maximum+0x68>
 801169a:	edd7 7a02 	vldr	s15, [r7, #8]
 801169e:	e013      	b.n	80116c8 <limit_max_rate_by_axis_maximum+0x90>
 80116a0:	4912      	ldr	r1, [pc, #72]	; (80116ec <limit_max_rate_by_axis_maximum+0xb4>)
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	4613      	mov	r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4413      	add	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	440b      	add	r3, r1
 80116ae:	3334      	adds	r3, #52	; 0x34
 80116b0:	edd3 6a00 	vldr	s13, [r3]
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	4413      	add	r3, r2
 80116bc:	ed93 7a00 	vldr	s14, [r3]
 80116c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116c4:	eef0 7ae7 	vabs.f32	s15, s15
 80116c8:	edc7 7a02 	vstr	s15, [r7, #8]
    } while(idx);
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d1ba      	bne.n	8011648 <limit_max_rate_by_axis_maximum+0x10>

    return limit_value;
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	ee07 3a90 	vmov	s15, r3
}
 80116d8:	eeb0 0a67 	vmov.f32	s0, s15
 80116dc:	3714      	adds	r7, #20
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr
 80116e6:	bf00      	nop
 80116e8:	7e967699 	.word	0x7e967699
 80116ec:	20001cf0 	.word	0x20001cf0

080116f0 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
bool plan_buffer_line (float *target, plan_line_data_t *pl_data)
{
 80116f0:	b590      	push	{r4, r7, lr}
 80116f2:	b097      	sub	sp, #92	; 0x5c
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
    // Prepare and initialize new block. Copy relevant pl_data for block execution.
    plan_block_t *block = block_buffer_head;
 80116fa:	4bae      	ldr	r3, [pc, #696]	; (80119b4 <plan_buffer_line+0x2c4>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	64fb      	str	r3, [r7, #76]	; 0x4c
#if N_AXIS > 3 && ROTARY_FIX
    axes_signals_t motion = {0};
#endif

//    plan_cleanup(block);
    memset(block, 0, sizeof(plan_block_t) - 2 * sizeof(plan_block_t *));    // Zero all block values (except linked list pointers).
 8011700:	2250      	movs	r2, #80	; 0x50
 8011702:	2100      	movs	r1, #0
 8011704:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011706:	f014 fb9a 	bl	8025e3e <memset>
    memcpy(&block->spindle, &pl_data->spindle, sizeof(spindle_t));          // Copy spindle data (RPM etc)
 801170a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801170c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	3304      	adds	r3, #4
 8011714:	2210      	movs	r2, #16
 8011716:	4619      	mov	r1, r3
 8011718:	f014 fcee 	bl	80260f8 <memcpy>
    block->condition = pl_data->condition;
 801171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801171e:	683a      	ldr	r2, [r7, #0]
 8011720:	6952      	ldr	r2, [r2, #20]
 8011722:	615a      	str	r2, [r3, #20]
    block->overrides = pl_data->overrides;
 8011724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011726:	683a      	ldr	r2, [r7, #0]
 8011728:	7e12      	ldrb	r2, [r2, #24]
 801172a:	745a      	strb	r2, [r3, #17]
    block->line_number = pl_data->line_number;
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	69da      	ldr	r2, [r3, #28]
 8011730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011732:	619a      	str	r2, [r3, #24]
    block->output_commands = pl_data->output_commands;
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801173a:	64da      	str	r2, [r3, #76]	; 0x4c
    block->message = pl_data->message;
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	6a1a      	ldr	r2, [r3, #32]
 8011740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011742:	649a      	str	r2, [r3, #72]	; 0x48
    pl_data->message = NULL;
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	2200      	movs	r2, #0
 8011748:	621a      	str	r2, [r3, #32]

    // Copy position data based on type of motion being planned.
    memcpy(position_steps, block->condition.system_motion ? sys.position : pl.position, sizeof(position_steps));
 801174a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801174c:	7d1b      	ldrb	r3, [r3, #20]
 801174e:	f003 0302 	and.w	r3, r3, #2
 8011752:	b2db      	uxtb	r3, r3
 8011754:	2b00      	cmp	r3, #0
 8011756:	d001      	beq.n	801175c <plan_buffer_line+0x6c>
 8011758:	4997      	ldr	r1, [pc, #604]	; (80119b8 <plan_buffer_line+0x2c8>)
 801175a:	e000      	b.n	801175e <plan_buffer_line+0x6e>
 801175c:	4997      	ldr	r1, [pc, #604]	; (80119bc <plan_buffer_line+0x2cc>)
 801175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011762:	220c      	movs	r2, #12
 8011764:	4618      	mov	r0, r3
 8011766:	f014 fcc7 	bl	80260f8 <memcpy>

    // Compute and store initial move distance data.

    idx = N_AXIS;
 801176a:	2303      	movs	r3, #3
 801176c:	657b      	str	r3, [r7, #84]	; 0x54
    do {
        idx--;
 801176e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011770:	3b01      	subs	r3, #1
 8011772:	657b      	str	r3, [r7, #84]	; 0x54
        // Calculate target position in absolute steps, number of steps for each axis, and determine max step events.
        // Also, compute individual axes distance for move and prep unit vector calculations.
        // NOTE: Computes true distance from converted step values.

        target_steps[idx] = lroundf(target[idx] * settings.axis[idx].steps_per_mm);
 8011774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011776:	009b      	lsls	r3, r3, #2
 8011778:	687a      	ldr	r2, [r7, #4]
 801177a:	4413      	add	r3, r2
 801177c:	ed93 7a00 	vldr	s14, [r3]
 8011780:	498f      	ldr	r1, [pc, #572]	; (80119c0 <plan_buffer_line+0x2d0>)
 8011782:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011784:	4613      	mov	r3, r2
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	4413      	add	r3, r2
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	440b      	add	r3, r1
 801178e:	3330      	adds	r3, #48	; 0x30
 8011790:	edd3 7a00 	vldr	s15, [r3]
 8011794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011798:	eeb0 0a67 	vmov.f32	s0, s15
 801179c:	f015 fb69 	bl	8026e72 <lroundf>
 80117a0:	4602      	mov	r2, r0
 80117a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	3358      	adds	r3, #88	; 0x58
 80117a8:	443b      	add	r3, r7
 80117aa:	f843 2c28 	str.w	r2, [r3, #-40]
        if((delta_steps = target_steps[idx] - position_steps[idx])) {
 80117ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117b0:	009b      	lsls	r3, r3, #2
 80117b2:	3358      	adds	r3, #88	; 0x58
 80117b4:	443b      	add	r3, r7
 80117b6:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80117ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117bc:	009b      	lsls	r3, r3, #2
 80117be:	3358      	adds	r3, #88	; 0x58
 80117c0:	443b      	add	r3, r7
 80117c2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80117ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d02c      	beq.n	801182a <plan_buffer_line+0x13a>
            block->steps[idx] = labs(delta_steps);
 80117d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	bfb8      	it	lt
 80117d6:	425b      	neglt	r3, r3
 80117d8:	4619      	mov	r1, r3
 80117da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80117e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80117ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	bf38      	it	cc
 80117f2:	461a      	movcc	r2, r3
 80117f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117f6:	60da      	str	r2, [r3, #12]
            unit_vec[idx] = (float)delta_steps / settings.axis[idx].steps_per_mm; // Store unit vector numerator
 80117f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117fa:	ee07 3a90 	vmov	s15, r3
 80117fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011802:	496f      	ldr	r1, [pc, #444]	; (80119c0 <plan_buffer_line+0x2d0>)
 8011804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011806:	4613      	mov	r3, r2
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	4413      	add	r3, r2
 801180c:	009b      	lsls	r3, r3, #2
 801180e:	440b      	add	r3, r1
 8011810:	3330      	adds	r3, #48	; 0x30
 8011812:	ed93 7a00 	vldr	s14, [r3]
 8011816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801181a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	3358      	adds	r3, #88	; 0x58
 8011820:	443b      	add	r3, r7
 8011822:	3b40      	subs	r3, #64	; 0x40
 8011824:	edc3 7a00 	vstr	s15, [r3]
 8011828:	e00c      	b.n	8011844 <plan_buffer_line+0x154>
#if N_AXIS > 3  && ROTARY_FIX
            motion.mask |= bit(idx);
#endif
        } else {
            block->steps[idx] = 0;
 801182a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801182c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801182e:	2100      	movs	r1, #0
 8011830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            unit_vec[idx] = 0.0f; // Store unit vector numerator
 8011834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	3358      	adds	r3, #88	; 0x58
 801183a:	443b      	add	r3, r7
 801183c:	3b40      	subs	r3, #64	; 0x40
 801183e:	f04f 0200 	mov.w	r2, #0
 8011842:	601a      	str	r2, [r3, #0]
        }

        // Set direction bits. Bit enabled always means direction is negative.
        if (delta_steps < 0)
 8011844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011846:	2b00      	cmp	r3, #0
 8011848:	da0a      	bge.n	8011860 <plan_buffer_line+0x170>
            block->direction_bits.mask |= bit(idx);
 801184a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801184c:	7c1a      	ldrb	r2, [r3, #16]
 801184e:	2101      	movs	r1, #1
 8011850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011852:	fa01 f303 	lsl.w	r3, r1, r3
 8011856:	b2db      	uxtb	r3, r3
 8011858:	4313      	orrs	r3, r2
 801185a:	b2da      	uxtb	r2, r3
 801185c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801185e:	741a      	strb	r2, [r3, #16]

    } while(idx);
 8011860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011862:	2b00      	cmp	r3, #0
 8011864:	d183      	bne.n	801176e <plan_buffer_line+0x7e>

    // Calculate RPMs to be used for Constant Surface Speed (CSS) calculations.
    if(block->spindle.css) {
 8011866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801186a:	2b00      	cmp	r3, #0
 801186c:	f000 809b 	beq.w	80119a6 <plan_buffer_line+0x2b6>

        float pos;

        if((pos = (float)position_steps[block->spindle.css->axis] / settings.axis[block->spindle.css->axis].steps_per_mm - block->spindle.css->tool_offset) > 0.0f) {
 8011870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011874:	695b      	ldr	r3, [r3, #20]
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	3358      	adds	r3, #88	; 0x58
 801187a:	443b      	add	r3, r7
 801187c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8011880:	ee07 3a90 	vmov	s15, r3
 8011884:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188c:	695a      	ldr	r2, [r3, #20]
 801188e:	494c      	ldr	r1, [pc, #304]	; (80119c0 <plan_buffer_line+0x2d0>)
 8011890:	4613      	mov	r3, r2
 8011892:	009b      	lsls	r3, r3, #2
 8011894:	4413      	add	r3, r2
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	440b      	add	r3, r1
 801189a:	3330      	adds	r3, #48	; 0x30
 801189c:	edd3 7a00 	vldr	s15, [r3]
 80118a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80118a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80118ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118b0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80118b4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80118b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80118bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c0:	dd20      	ble.n	8011904 <plan_buffer_line+0x214>
            if((block->spindle.rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 80118c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118c6:	edd3 6a00 	vldr	s13, [r3]
 80118ca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80118ce:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80119c4 <plan_buffer_line+0x2d4>
 80118d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80118d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118dc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 80118e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118e2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80118e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80118ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f6:	dd0a      	ble.n	801190e <plan_buffer_line+0x21e>
                block->spindle.rpm = block->spindle.css->max_rpm;
 80118f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118fc:	68da      	ldr	r2, [r3, #12]
 80118fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011900:	639a      	str	r2, [r3, #56]	; 0x38
 8011902:	e004      	b.n	801190e <plan_buffer_line+0x21e>
        } else
            block->spindle.rpm = block->spindle.css->max_rpm;
 8011904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011908:	68da      	ldr	r2, [r3, #12]
 801190a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801190c:	639a      	str	r2, [r3, #56]	; 0x38

        if((pos = target[block->spindle.css->axis] - block->spindle.css->tool_offset) > 0.0f) {
 801190e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011912:	695b      	ldr	r3, [r3, #20]
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	4413      	add	r3, r2
 801191a:	ed93 7a00 	vldr	s14, [r3]
 801191e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011922:	edd3 7a04 	vldr	s15, [r3, #16]
 8011926:	ee77 7a67 	vsub.f32	s15, s14, s15
 801192a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 801192e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193a:	dd21      	ble.n	8011980 <plan_buffer_line+0x290>
            if((block->spindle.css->target_rpm = block->spindle.css->surface_speed / (pos * (float)(2.0f * M_PI))) > block->spindle.css->max_rpm)
 801193c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011940:	edd3 6a00 	vldr	s13, [r3]
 8011944:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8011948:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80119c4 <plan_buffer_line+0x2d4>
 801194c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011958:	edc3 7a01 	vstr	s15, [r3, #4]
 801195c:	ed93 7a01 	vldr	s14, [r3, #4]
 8011960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011964:	edd3 7a03 	vldr	s15, [r3, #12]
 8011968:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011970:	dd0c      	ble.n	801198c <plan_buffer_line+0x29c>
                block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 8011972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801197a:	68d2      	ldr	r2, [r2, #12]
 801197c:	605a      	str	r2, [r3, #4]
 801197e:	e005      	b.n	801198c <plan_buffer_line+0x29c>
        } else
            block->spindle.css->target_rpm = block->spindle.css->max_rpm;
 8011980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011988:	68d2      	ldr	r2, [r2, #12]
 801198a:	605a      	str	r2, [r3, #4]

        block->spindle.css->delta_rpm = block->spindle.css->target_rpm - block->spindle.rpm;
 801198c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011990:	ed93 7a01 	vldr	s14, [r3, #4]
 8011994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011996:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801199a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801199e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119a2:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    // Bail if this is a zero-length block. Highly unlikely to occur.
    if (block->step_event_count == 0)
 80119a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d10c      	bne.n	80119c8 <plan_buffer_line+0x2d8>
        return false;
 80119ae:	2300      	movs	r3, #0
 80119b0:	e145      	b.n	8011c3e <plan_buffer_line+0x54e>
 80119b2:	bf00      	nop
 80119b4:	20001a18 	.word	0x20001a18
 80119b8:	200015a8 	.word	0x200015a8
 80119bc:	20001a24 	.word	0x20001a24
 80119c0:	20001cf0 	.word	0x20001cf0
 80119c4:	40c90fdb 	.word	0x40c90fdb

    pl_data->message = NULL;         // Indicate message is already queued for display on execution
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	2200      	movs	r2, #0
 80119cc:	621a      	str	r2, [r3, #32]
    pl_data->output_commands = NULL; // Indicate commands are already queued for execution
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	2200      	movs	r2, #0
 80119d2:	625a      	str	r2, [r3, #36]	; 0x24
#else
    // NOTE: This calculation assumes all axes are orthogonal (Cartesian) and works with ABC-axes,
    // if they are also orthogonal/independent. Operates on the absolute value of the unit vector.
#endif

    block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 80119d4:	f107 0318 	add.w	r3, r7, #24
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fe fc75 	bl	80102c8 <convert_delta_vector_to_unit_vector>
 80119de:	eef0 7a40 	vmov.f32	s15, s0
 80119e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119e4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    block->acceleration = limit_acceleration_by_axis_maximum(unit_vec);
 80119e8:	f107 0318 	add.w	r3, r7, #24
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7ff fdc7 	bl	8011580 <limit_acceleration_by_axis_maximum>
 80119f2:	eef0 7a40 	vmov.f32	s15, s0
 80119f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119f8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    block->rapid_rate = limit_max_rate_by_axis_maximum(unit_vec);
 80119fc:	f107 0318 	add.w	r3, r7, #24
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7ff fe19 	bl	8011638 <limit_max_rate_by_axis_maximum>
 8011a06:	eef0 7a40 	vmov.f32	s15, s0
 8011a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a0c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // Store programmed rate.
    if (block->condition.rapid_motion)
 8011a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a12:	7d1b      	ldrb	r3, [r3, #20]
 8011a14:	f003 0301 	and.w	r3, r3, #1
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d004      	beq.n	8011a28 <plan_buffer_line+0x338>
        block->programmed_rate = block->rapid_rate;
 8011a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a24:	635a      	str	r2, [r3, #52]	; 0x34
 8011a26:	e015      	b.n	8011a54 <plan_buffer_line+0x364>
    else {
        block->programmed_rate = pl_data->feed_rate;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a2e:	635a      	str	r2, [r3, #52]	; 0x34
#ifdef KINEMATICS_API
        block->rate_multiplier = pl_data->rate_multiplier;
#endif
        if (block->condition.inverse_time)
 8011a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a32:	7d1b      	ldrb	r3, [r3, #20]
 8011a34:	f003 0320 	and.w	r3, r3, #32
 8011a38:	b2db      	uxtb	r3, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d00a      	beq.n	8011a54 <plan_buffer_line+0x364>
            block->programmed_rate *= block->millimeters;
 8011a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a40:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8011a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a46:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8011a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a50:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    }

    // TODO: Need to check this method handling zero junction speeds when starting from rest.
    if ((block_buffer_head == block_buffer_tail) || (block->condition.system_motion)) {
 8011a54:	4b7c      	ldr	r3, [pc, #496]	; (8011c48 <plan_buffer_line+0x558>)
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	4b7c      	ldr	r3, [pc, #496]	; (8011c4c <plan_buffer_line+0x55c>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d006      	beq.n	8011a6e <plan_buffer_line+0x37e>
 8011a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a62:	7d1b      	ldrb	r3, [r3, #20]
 8011a64:	f003 0302 	and.w	r3, r3, #2
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d008      	beq.n	8011a80 <plan_buffer_line+0x390>

        // Initialize block entry speed as zero. Assume it will be starting from rest. Planner will correct this later.
        // If system motion, the system motion block always is assumed to start from rest and end at a complete stop.
        block->entry_speed_sqr = 0.0f;
 8011a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a70:	f04f 0200 	mov.w	r2, #0
 8011a74:	61da      	str	r2, [r3, #28]
        block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8011a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a78:	f04f 0200 	mov.w	r2, #0
 8011a7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8011a7e:	e0a1      	b.n	8011bc4 <plan_buffer_line+0x4d4>
        // changed dynamically during operation nor can the line move geometry. This must be kept in
        // memory in the event of a feedrate override changing the nominal speeds of blocks, which can
        // change the overall maximum entry speed conditions of all blocks.

        float junction_unit_vec[N_AXIS];
        float junction_cos_theta = 0.0f;
 8011a80:	f04f 0300 	mov.w	r3, #0
 8011a84:	653b      	str	r3, [r7, #80]	; 0x50

        idx = N_AXIS;
 8011a86:	2303      	movs	r3, #3
 8011a88:	657b      	str	r3, [r7, #84]	; 0x54
        do {
            idx--;
 8011a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	657b      	str	r3, [r7, #84]	; 0x54
            junction_cos_theta -= pl.previous_unit_vec[idx] * unit_vec[idx];
 8011a90:	4a6f      	ldr	r2, [pc, #444]	; (8011c50 <plan_buffer_line+0x560>)
 8011a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a94:	3302      	adds	r3, #2
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	4413      	add	r3, r2
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	ed93 7a00 	vldr	s14, [r3]
 8011aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	3358      	adds	r3, #88	; 0x58
 8011aa6:	443b      	add	r3, r7
 8011aa8:	3b40      	subs	r3, #64	; 0x40
 8011aaa:	edd3 7a00 	vldr	s15, [r3]
 8011aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ab2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            junction_unit_vec[idx] = unit_vec[idx] - pl.previous_unit_vec[idx];
 8011abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	3358      	adds	r3, #88	; 0x58
 8011ac4:	443b      	add	r3, r7
 8011ac6:	3b40      	subs	r3, #64	; 0x40
 8011ac8:	ed93 7a00 	vldr	s14, [r3]
 8011acc:	4a60      	ldr	r2, [pc, #384]	; (8011c50 <plan_buffer_line+0x560>)
 8011ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad0:	3302      	adds	r3, #2
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	4413      	add	r3, r2
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	edd3 7a00 	vldr	s15, [r3]
 8011adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	3358      	adds	r3, #88	; 0x58
 8011ae6:	443b      	add	r3, r7
 8011ae8:	3b4c      	subs	r3, #76	; 0x4c
 8011aea:	edc3 7a00 	vstr	s15, [r3]
        } while(idx);
 8011aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1ca      	bne.n	8011a8a <plan_buffer_line+0x39a>

        // NOTE: Computed without any expensive trig, sin() or acos(), by trig half angle identity of cos(theta).
        if (junction_cos_theta > 0.999999f)
 8011af4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011af8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8011c54 <plan_buffer_line+0x564>
 8011afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b04:	dd04      	ble.n	8011b10 <plan_buffer_line+0x420>
            //  For a 0 degree acute junction, just set minimum junction speed.
            block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED;
 8011b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b08:	f04f 0200 	mov.w	r2, #0
 8011b0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8011b0e:	e059      	b.n	8011bc4 <plan_buffer_line+0x4d4>
        else if (junction_cos_theta < -0.999999f) {
 8011b10:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011b14:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8011c58 <plan_buffer_line+0x568>
 8011b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b20:	d503      	bpl.n	8011b2a <plan_buffer_line+0x43a>
            // Junction is a straight line or 180 degrees. Junction speed is infinite.
            block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8011b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b24:	4a4d      	ldr	r2, [pc, #308]	; (8011c5c <plan_buffer_line+0x56c>)
 8011b26:	62da      	str	r2, [r3, #44]	; 0x2c
 8011b28:	e04c      	b.n	8011bc4 <plan_buffer_line+0x4d4>
        } else {
            convert_delta_vector_to_unit_vector(junction_unit_vec);
 8011b2a:	f107 030c 	add.w	r3, r7, #12
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fe fbca 	bl	80102c8 <convert_delta_vector_to_unit_vector>
            float junction_acceleration = limit_acceleration_by_axis_maximum(junction_unit_vec);
 8011b34:	f107 030c 	add.w	r3, r7, #12
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff fd21 	bl	8011580 <limit_acceleration_by_axis_maximum>
 8011b3e:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
            float sin_theta_d2 = sqrtf(0.5f * (1.0f - junction_cos_theta)); // Trig half angle identity. Always positive.
 8011b42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b46:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8011b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b56:	eeb0 0a67 	vmov.f32	s0, s15
 8011b5a:	f015 f8a9 	bl	8026cb0 <sqrtf>
 8011b5e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
            block->max_junction_speed_sqr = max(MINIMUM_JUNCTION_SPEED * MINIMUM_JUNCTION_SPEED,
 8011b62:	4b3f      	ldr	r3, [pc, #252]	; (8011c60 <plan_buffer_line+0x570>)
 8011b64:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b68:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8011b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b70:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011b74:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011b80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b90:	d502      	bpl.n	8011b98 <plan_buffer_line+0x4a8>
 8011b92:	eddf 7a34 	vldr	s15, [pc, #208]	; 8011c64 <plan_buffer_line+0x574>
 8011b96:	e012      	b.n	8011bbe <plan_buffer_line+0x4ce>
 8011b98:	4b31      	ldr	r3, [pc, #196]	; (8011c60 <plan_buffer_line+0x570>)
 8011b9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b9e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8011ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011ba6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011baa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011bb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8011bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bc0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
                                                  (junction_acceleration * settings.junction_deviation * sin_theta_d2) / (1.0f - sin_theta_d2));
        }
    }

    // Block system motion from updating this data to ensure next g-code motion is computed correctly.
    if (!block->condition.system_motion) {
 8011bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bc6:	7d1b      	ldrb	r3, [r3, #20]
 8011bc8:	f003 0302 	and.w	r3, r3, #2
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d134      	bne.n	8011c3c <plan_buffer_line+0x54c>

        pl.previous_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), pl.previous_nominal_speed);
 8011bd2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011bd4:	f7ff fc26 	bl	8011424 <plan_compute_profile_nominal_speed>
 8011bd8:	eeb0 7a40 	vmov.f32	s14, s0
 8011bdc:	4b1c      	ldr	r3, [pc, #112]	; (8011c50 <plan_buffer_line+0x560>)
 8011bde:	edd3 7a06 	vldr	s15, [r3, #24]
 8011be2:	eef0 0a67 	vmov.f32	s1, s15
 8011be6:	eeb0 0a47 	vmov.f32	s0, s14
 8011bea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011bec:	f7ff fc92 	bl	8011514 <plan_compute_profile_parameters>
 8011bf0:	eef0 7a40 	vmov.f32	s15, s0
 8011bf4:	4b16      	ldr	r3, [pc, #88]	; (8011c50 <plan_buffer_line+0x560>)
 8011bf6:	edc3 7a06 	vstr	s15, [r3, #24]

        if(!block->condition.backlash_motion) {
 8011bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bfc:	7d1b      	ldrb	r3, [r3, #20]
 8011bfe:	f003 0308 	and.w	r3, r3, #8
 8011c02:	b2db      	uxtb	r3, r3
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d10e      	bne.n	8011c26 <plan_buffer_line+0x536>
            // Update previous path unit_vector and planner position.
            memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8011c08:	4b11      	ldr	r3, [pc, #68]	; (8011c50 <plan_buffer_line+0x560>)
 8011c0a:	330c      	adds	r3, #12
 8011c0c:	f107 0218 	add.w	r2, r7, #24
 8011c10:	ca07      	ldmia	r2, {r0, r1, r2}
 8011c12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8011c16:	4b0e      	ldr	r3, [pc, #56]	; (8011c50 <plan_buffer_line+0x560>)
 8011c18:	461c      	mov	r4, r3
 8011c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        }
        // New block is all set. Update buffer head and next buffer head indices.
        block_buffer_head = next_buffer_head;
 8011c26:	4b10      	ldr	r3, [pc, #64]	; (8011c68 <plan_buffer_line+0x578>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	4a07      	ldr	r2, [pc, #28]	; (8011c48 <plan_buffer_line+0x558>)
 8011c2c:	6013      	str	r3, [r2, #0]
        next_buffer_head = block_buffer_head->next;
 8011c2e:	4b06      	ldr	r3, [pc, #24]	; (8011c48 <plan_buffer_line+0x558>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c34:	4a0c      	ldr	r2, [pc, #48]	; (8011c68 <plan_buffer_line+0x578>)
 8011c36:	6013      	str	r3, [r2, #0]

        // Finish up by recalculating the plan with the new block.
        planner_recalculate();
 8011c38:	f7ff f97e 	bl	8010f38 <planner_recalculate>
    }

    return true;
 8011c3c:	2301      	movs	r3, #1
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	375c      	adds	r7, #92	; 0x5c
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd90      	pop	{r4, r7, pc}
 8011c46:	bf00      	nop
 8011c48:	20001a18 	.word	0x20001a18
 8011c4c:	20001a14 	.word	0x20001a14
 8011c50:	20001a24 	.word	0x20001a24
 8011c54:	3f7fffef 	.word	0x3f7fffef
 8011c58:	bf7fffef 	.word	0xbf7fffef
 8011c5c:	7e967699 	.word	0x7e967699
 8011c60:	20001cf0 	.word	0x20001cf0
 8011c64:	00000000 	.word	0x00000000
 8011c68:	20001a1c 	.word	0x20001a1c

08011c6c <plan_sync_position>:
}


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position (void)
{
 8011c6c:	b490      	push	{r4, r7}
 8011c6e:	af00      	add	r7, sp, #0
    memcpy(pl.position, sys.position, sizeof(pl.position));
 8011c70:	4a05      	ldr	r2, [pc, #20]	; (8011c88 <plan_sync_position+0x1c>)
 8011c72:	4b06      	ldr	r3, [pc, #24]	; (8011c8c <plan_sync_position+0x20>)
 8011c74:	4614      	mov	r4, r2
 8011c76:	3388      	adds	r3, #136	; 0x88
 8011c78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#if ENABLE_BACKLASH_COMPENSATION
    mc_sync_backlash_position();
#endif
}
 8011c80:	bf00      	nop
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bc90      	pop	{r4, r7}
 8011c86:	4770      	bx	lr
 8011c88:	20001a24 	.word	0x20001a24
 8011c8c:	20001520 	.word	0x20001520

08011c90 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint_fast16_t plan_get_block_buffer_available (void)
{
 8011c90:	b480      	push	{r7}
 8011c92:	af00      	add	r7, sp, #0
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 8011c94:	4b10      	ldr	r3, [pc, #64]	; (8011cd8 <plan_get_block_buffer_available+0x48>)
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	4b10      	ldr	r3, [pc, #64]	; (8011cdc <plan_get_block_buffer_available+0x4c>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d30c      	bcc.n	8011cba <plan_get_block_buffer_available+0x2a>
                            ? (block_buffer_size - (block_buffer_head - block_buffer_tail))
 8011ca0:	4b0f      	ldr	r3, [pc, #60]	; (8011ce0 <plan_get_block_buffer_available+0x50>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	4a0c      	ldr	r2, [pc, #48]	; (8011cd8 <plan_get_block_buffer_available+0x48>)
 8011ca6:	6811      	ldr	r1, [r2, #0]
 8011ca8:	4a0c      	ldr	r2, [pc, #48]	; (8011cdc <plan_get_block_buffer_available+0x4c>)
 8011caa:	6812      	ldr	r2, [r2, #0]
 8011cac:	1a8a      	subs	r2, r1, r2
 8011cae:	10d2      	asrs	r2, r2, #3
 8011cb0:	490c      	ldr	r1, [pc, #48]	; (8011ce4 <plan_get_block_buffer_available+0x54>)
 8011cb2:	fb01 f202 	mul.w	r2, r1, r2
    return (uint_fast16_t)(block_buffer_head >= block_buffer_tail
 8011cb6:	1a9b      	subs	r3, r3, r2
 8011cb8:	e009      	b.n	8011cce <plan_get_block_buffer_available+0x3e>
                            : ((block_buffer_tail - block_buffer_head) - 1));
 8011cba:	4b08      	ldr	r3, [pc, #32]	; (8011cdc <plan_get_block_buffer_available+0x4c>)
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	4b06      	ldr	r3, [pc, #24]	; (8011cd8 <plan_get_block_buffer_available+0x48>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	1ad3      	subs	r3, r2, r3
 8011cc4:	10db      	asrs	r3, r3, #3
 8011cc6:	4a07      	ldr	r2, [pc, #28]	; (8011ce4 <plan_get_block_buffer_available+0x54>)
 8011cc8:	fb02 f303 	mul.w	r3, r2, r3
 8011ccc:	3b01      	subs	r3, #1
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr
 8011cd8:	20001a18 	.word	0x20001a18
 8011cdc:	20001a14 	.word	0x20001a14
 8011ce0:	20001a0c 	.word	0x20001a0c
 8011ce4:	ba2e8ba3 	.word	0xba2e8ba3

08011ce8 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize (void)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	af00      	add	r7, sp, #0
    // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
    st_update_plan_block_parameters();
 8011cec:	f00c fc56 	bl	801e59c <st_update_plan_block_parameters>
    block_buffer_planned = block_buffer_tail;
 8011cf0:	4b03      	ldr	r3, [pc, #12]	; (8011d00 <plan_cycle_reinitialize+0x18>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	4a03      	ldr	r2, [pc, #12]	; (8011d04 <plan_cycle_reinitialize+0x1c>)
 8011cf6:	6013      	str	r3, [r2, #0]
    planner_recalculate();
 8011cf8:	f7ff f91e 	bl	8010f38 <planner_recalculate>
}
 8011cfc:	bf00      	nop
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	20001a14 	.word	0x20001a14
 8011d04:	20001a20 	.word	0x20001a20

08011d08 <plan_update_velocity_profile_parameters>:

// Re-calculates buffered motions profile parameters upon a motion-based override change.
static bool plan_update_velocity_profile_parameters (void)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
    if(block_buffer_tail != block_buffer_head) {
 8011d0e:	4b19      	ldr	r3, [pc, #100]	; (8011d74 <plan_update_velocity_profile_parameters+0x6c>)
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	4b19      	ldr	r3, [pc, #100]	; (8011d78 <plan_update_velocity_profile_parameters+0x70>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d01e      	beq.n	8011d58 <plan_update_velocity_profile_parameters+0x50>

        plan_block_t *block = block_buffer_tail;
 8011d1a:	4b16      	ldr	r3, [pc, #88]	; (8011d74 <plan_update_velocity_profile_parameters+0x6c>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	607b      	str	r3, [r7, #4]
        float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8011d20:	4b16      	ldr	r3, [pc, #88]	; (8011d7c <plan_update_velocity_profile_parameters+0x74>)
 8011d22:	603b      	str	r3, [r7, #0]

        while (block != block_buffer_head) {
 8011d24:	e010      	b.n	8011d48 <plan_update_velocity_profile_parameters+0x40>
            prev_nominal_speed = plan_compute_profile_parameters(block, plan_compute_profile_nominal_speed(block), prev_nominal_speed);
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f7ff fb7c 	bl	8011424 <plan_compute_profile_nominal_speed>
 8011d2c:	eef0 7a40 	vmov.f32	s15, s0
 8011d30:	edd7 0a00 	vldr	s1, [r7]
 8011d34:	eeb0 0a67 	vmov.f32	s0, s15
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7ff fbeb 	bl	8011514 <plan_compute_profile_parameters>
 8011d3e:	ed87 0a00 	vstr	s0, [r7]
            block = block->next;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d46:	607b      	str	r3, [r7, #4]
        while (block != block_buffer_head) {
 8011d48:	4b0b      	ldr	r3, [pc, #44]	; (8011d78 <plan_update_velocity_profile_parameters+0x70>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d1e9      	bne.n	8011d26 <plan_update_velocity_profile_parameters+0x1e>
        }

        pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8011d52:	4a0b      	ldr	r2, [pc, #44]	; (8011d80 <plan_update_velocity_profile_parameters+0x78>)
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	6193      	str	r3, [r2, #24]
    }

    return block_buffer_tail != block_buffer_head;
 8011d58:	4b06      	ldr	r3, [pc, #24]	; (8011d74 <plan_update_velocity_profile_parameters+0x6c>)
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	4b06      	ldr	r3, [pc, #24]	; (8011d78 <plan_update_velocity_profile_parameters+0x70>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	bf14      	ite	ne
 8011d64:	2301      	movne	r3, #1
 8011d66:	2300      	moveq	r3, #0
 8011d68:	b2db      	uxtb	r3, r3
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3708      	adds	r7, #8
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	20001a14 	.word	0x20001a14
 8011d78:	20001a18 	.word	0x20001a18
 8011d7c:	7e967699 	.word	0x7e967699
 8011d80:	20001a24 	.word	0x20001a24

08011d84 <plan_feed_override>:

// Set feed overrides
void plan_feed_override (override_t feed_override, override_t rapid_override)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	6039      	str	r1, [r7, #0]
    bool feedrate_changed = false, rapidrate_changed = false;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	73bb      	strb	r3, [r7, #14]
 8011d92:	2300      	movs	r3, #0
 8011d94:	73fb      	strb	r3, [r7, #15]

    if(sys.override.control.feed_rate_disable)
 8011d96:	4b27      	ldr	r3, [pc, #156]	; (8011e34 <plan_feed_override+0xb0>)
 8011d98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011d9c:	f003 0301 	and.w	r3, r3, #1
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d142      	bne.n	8011e2c <plan_feed_override+0xa8>
        return;

    feed_override = constrain(feed_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2b09      	cmp	r3, #9
 8011daa:	d904      	bls.n	8011db6 <plan_feed_override+0x32>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2bc8      	cmp	r3, #200	; 0xc8
 8011db0:	bf28      	it	cs
 8011db2:	23c8      	movcs	r3, #200	; 0xc8
 8011db4:	e000      	b.n	8011db8 <plan_feed_override+0x34>
 8011db6:	230a      	movs	r3, #10
 8011db8:	607b      	str	r3, [r7, #4]

    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 8011dba:	4b1e      	ldr	r3, [pc, #120]	; (8011e34 <plan_feed_override+0xb0>)
 8011dbc:	69db      	ldr	r3, [r3, #28]
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	bf14      	ite	ne
 8011dc4:	2301      	movne	r3, #1
 8011dc6:	2300      	moveq	r3, #0
 8011dc8:	73bb      	strb	r3, [r7, #14]
 8011dca:	7bbb      	ldrb	r3, [r7, #14]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10a      	bne.n	8011de6 <plan_feed_override+0x62>
         (rapidrate_changed = rapid_override != sys.override.rapid_rate)) {
 8011dd0:	4b18      	ldr	r3, [pc, #96]	; (8011e34 <plan_feed_override+0xb0>)
 8011dd2:	6a1b      	ldr	r3, [r3, #32]
 8011dd4:	683a      	ldr	r2, [r7, #0]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	bf14      	ite	ne
 8011dda:	2301      	movne	r3, #1
 8011ddc:	2300      	moveq	r3, #0
 8011dde:	73fb      	strb	r3, [r7, #15]
    if((feedrate_changed = feed_override != sys.override.feed_rate) ||
 8011de0:	7bfb      	ldrb	r3, [r7, #15]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d023      	beq.n	8011e2e <plan_feed_override+0xaa>
        sys.override.feed_rate = feed_override;
 8011de6:	4a13      	ldr	r2, [pc, #76]	; (8011e34 <plan_feed_override+0xb0>)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	61d3      	str	r3, [r2, #28]
        sys.override.rapid_rate = rapid_override;
 8011dec:	4a11      	ldr	r2, [pc, #68]	; (8011e34 <plan_feed_override+0xb0>)
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	6213      	str	r3, [r2, #32]
        system_add_rt_report(Report_Overrides); // Set to report change immediately
 8011df2:	2040      	movs	r0, #64	; 0x40
 8011df4:	f00f fbe8 	bl	80215c8 <system_add_rt_report>
        if(plan_update_velocity_profile_parameters())
 8011df8:	f7ff ff86 	bl	8011d08 <plan_update_velocity_profile_parameters>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d001      	beq.n	8011e06 <plan_feed_override+0x82>
            plan_cycle_reinitialize();
 8011e02:	f7ff ff71 	bl	8011ce8 <plan_cycle_reinitialize>
        if(grbl.on_override_changed) {
 8011e06:	4b0c      	ldr	r3, [pc, #48]	; (8011e38 <plan_feed_override+0xb4>)
 8011e08:	6a1b      	ldr	r3, [r3, #32]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d00f      	beq.n	8011e2e <plan_feed_override+0xaa>
            if(feedrate_changed)
 8011e0e:	7bbb      	ldrb	r3, [r7, #14]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d003      	beq.n	8011e1c <plan_feed_override+0x98>
                grbl.on_override_changed(OverrideChanged_FeedRate);
 8011e14:	4b08      	ldr	r3, [pc, #32]	; (8011e38 <plan_feed_override+0xb4>)
 8011e16:	6a1b      	ldr	r3, [r3, #32]
 8011e18:	2000      	movs	r0, #0
 8011e1a:	4798      	blx	r3
            if(rapidrate_changed)
 8011e1c:	7bfb      	ldrb	r3, [r7, #15]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d005      	beq.n	8011e2e <plan_feed_override+0xaa>
                grbl.on_override_changed(OverrideChanged_RapidRate);
 8011e22:	4b05      	ldr	r3, [pc, #20]	; (8011e38 <plan_feed_override+0xb4>)
 8011e24:	6a1b      	ldr	r3, [r3, #32]
 8011e26:	2000      	movs	r0, #0
 8011e28:	4798      	blx	r3
 8011e2a:	e000      	b.n	8011e2e <plan_feed_override+0xaa>
        return;
 8011e2c:	bf00      	nop
        }
    }
}
 8011e2e:	3710      	adds	r7, #16
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	20001520 	.word	0x20001520
 8011e38:	200015b8 	.word	0x200015b8

08011e3c <plan_data_init>:

void plan_data_init (plan_line_data_t *plan_data)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
    memset(plan_data, 0, sizeof(plan_line_data_t));
 8011e44:	2228      	movs	r2, #40	; 0x28
 8011e46:	2100      	movs	r1, #0
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f013 fff8 	bl	8025e3e <memset>
    plan_data->spindle.hal = gc_state.spindle.hal ? gc_state.spindle.hal : spindle_get(0);
 8011e4e:	4b14      	ldr	r3, [pc, #80]	; (8011ea0 <plan_data_init+0x64>)
 8011e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d002      	beq.n	8011e5c <plan_data_init+0x20>
 8011e56:	4b12      	ldr	r3, [pc, #72]	; (8011ea0 <plan_data_init+0x64>)
 8011e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e5a:	e003      	b.n	8011e64 <plan_data_init+0x28>
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	f00a f8bb 	bl	801bfd8 <spindle_get>
 8011e62:	4603      	mov	r3, r0
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	6113      	str	r3, [r2, #16]
    plan_data->condition.target_validated = plan_data->condition.target_valid = sys.soft_limits.mask == 0;
 8011e68:	4b0e      	ldr	r3, [pc, #56]	; (8011ea4 <plan_data_init+0x68>)
 8011e6a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	bf0c      	ite	eq
 8011e72:	2301      	moveq	r3, #1
 8011e74:	2300      	movne	r3, #0
 8011e76:	b2d9      	uxtb	r1, r3
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	7d53      	ldrb	r3, [r2, #21]
 8011e7c:	f361 0300 	bfi	r3, r1, #0, #1
 8011e80:	7553      	strb	r3, [r2, #21]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	7d5b      	ldrb	r3, [r3, #21]
 8011e86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011e8a:	b2d9      	uxtb	r1, r3
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	7d53      	ldrb	r3, [r2, #21]
 8011e90:	f361 0341 	bfi	r3, r1, #1, #1
 8011e94:	7553      	strb	r3, [r2, #21]
#ifdef KINEMATICS_API
    plan_data->rate_multiplier = 1.0;
#endif
}
 8011e96:	bf00      	nop
 8011e98:	3708      	adds	r7, #8
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	2000137c 	.word	0x2000137c
 8011ea4:	20001520 	.word	0x20001520

08011ea8 <protocol_enqueue_gcode>:
static void protocol_exec_rt_suspend (sys_state_t state);
static void protocol_execute_rt_commands (void);

// add gcode to execute not originating from normal input stream
bool protocol_enqueue_gcode (char *gcode)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
    bool ok = xcommand[0] == '\0' &&
 8011eb0:	4b22      	ldr	r3, [pc, #136]	; (8011f3c <protocol_enqueue_gcode+0x94>)
 8011eb2:	781b      	ldrb	r3, [r3, #0]
               (state_get() == STATE_IDLE || (state_get() & (STATE_JOG|STATE_TOOL_CHANGE))) &&
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d113      	bne.n	8011ee0 <protocol_enqueue_gcode+0x38>
 8011eb8:	f00a ff32 	bl	801cd20 <state_get>
 8011ebc:	4603      	mov	r3, r0
    bool ok = xcommand[0] == '\0' &&
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d006      	beq.n	8011ed0 <protocol_enqueue_gcode+0x28>
               (state_get() == STATE_IDLE || (state_get() & (STATE_JOG|STATE_TOOL_CHANGE))) &&
 8011ec2:	f00a ff2d 	bl	801cd20 <state_get>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	f403 7308 	and.w	r3, r3, #544	; 0x220
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d007      	beq.n	8011ee0 <protocol_enqueue_gcode+0x38>
                 bit_isfalse(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 8011ed0:	4b1b      	ldr	r3, [pc, #108]	; (8011f40 <protocol_enqueue_gcode+0x98>)
 8011ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
               (state_get() == STATE_IDLE || (state_get() & (STATE_JOG|STATE_TOOL_CHANGE))) &&
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d101      	bne.n	8011ee0 <protocol_enqueue_gcode+0x38>
 8011edc:	2301      	movs	r3, #1
 8011ede:	e000      	b.n	8011ee2 <protocol_enqueue_gcode+0x3a>
 8011ee0:	2300      	movs	r3, #0
    bool ok = xcommand[0] == '\0' &&
 8011ee2:	73fb      	strb	r3, [r7, #15]
 8011ee4:	7bfb      	ldrb	r3, [r7, #15]
 8011ee6:	f003 0301 	and.w	r3, r3, #1
 8011eea:	73fb      	strb	r3, [r7, #15]

    if(ok && gc_state.file_run)
 8011eec:	7bfb      	ldrb	r3, [r7, #15]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d018      	beq.n	8011f24 <protocol_enqueue_gcode+0x7c>
 8011ef2:	4b14      	ldr	r3, [pc, #80]	; (8011f44 <protocol_enqueue_gcode+0x9c>)
 8011ef4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d013      	beq.n	8011f24 <protocol_enqueue_gcode+0x7c>
        ok = gc_state.modal.program_flow != ProgramFlow_Running || strncmp((char *)gcode, "$J=", 3);
 8011efc:	4b11      	ldr	r3, [pc, #68]	; (8011f44 <protocol_enqueue_gcode+0x9c>)
 8011efe:	7e1b      	ldrb	r3, [r3, #24]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d107      	bne.n	8011f14 <protocol_enqueue_gcode+0x6c>
 8011f04:	2203      	movs	r2, #3
 8011f06:	4910      	ldr	r1, [pc, #64]	; (8011f48 <protocol_enqueue_gcode+0xa0>)
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f013 ffbc 	bl	8025e86 <strncmp>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d001      	beq.n	8011f18 <protocol_enqueue_gcode+0x70>
 8011f14:	2301      	movs	r3, #1
 8011f16:	e000      	b.n	8011f1a <protocol_enqueue_gcode+0x72>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	73fb      	strb	r3, [r7, #15]
 8011f1c:	7bfb      	ldrb	r3, [r7, #15]
 8011f1e:	f003 0301 	and.w	r3, r3, #1
 8011f22:	73fb      	strb	r3, [r7, #15]

    if(ok)
 8011f24:	7bfb      	ldrb	r3, [r7, #15]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d003      	beq.n	8011f32 <protocol_enqueue_gcode+0x8a>
        strcpy(xcommand, gcode);
 8011f2a:	6879      	ldr	r1, [r7, #4]
 8011f2c:	4803      	ldr	r0, [pc, #12]	; (8011f3c <protocol_enqueue_gcode+0x94>)
 8011f2e:	f014 f8db 	bl	80260e8 <strcpy>

    return ok;
 8011f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3710      	adds	r7, #16
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}
 8011f3c:	20001b48 	.word	0x20001b48
 8011f40:	20001520 	.word	0x20001520
 8011f44:	2000137c 	.word	0x2000137c
 8011f48:	0802ced0 	.word	0x0802ced0

08011f4c <recheck_line>:

static bool recheck_line (char *line, line_flags_t *flags)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
    bool keep_rt_commands = false, first_char = true;
 8011f56:	2300      	movs	r3, #0
 8011f58:	73fb      	strb	r3, [r7, #15]
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	73bb      	strb	r3, [r7, #14]

    flags->value = 0;
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	2200      	movs	r2, #0
 8011f62:	701a      	strb	r2, [r3, #0]

    if(*line != '\0') do {
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	f000 809e 	beq.w	80120aa <recheck_line+0x15e>

        switch(*line) {
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	2b3b      	cmp	r3, #59	; 0x3b
 8011f74:	dc3a      	bgt.n	8011fec <recheck_line+0xa0>
 8011f76:	2b24      	cmp	r3, #36	; 0x24
 8011f78:	f2c0 808d 	blt.w	8012096 <recheck_line+0x14a>
 8011f7c:	3b24      	subs	r3, #36	; 0x24
 8011f7e:	2b17      	cmp	r3, #23
 8011f80:	f200 8089 	bhi.w	8012096 <recheck_line+0x14a>
 8011f84:	a201      	add	r2, pc, #4	; (adr r2, 8011f8c <recheck_line+0x40>)
 8011f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f8a:	bf00      	nop
 8011f8c:	08011ff1 	.word	0x08011ff1
 8011f90:	08012097 	.word	0x08012097
 8011f94:	08012097 	.word	0x08012097
 8011f98:	08012097 	.word	0x08012097
 8011f9c:	08011ffd 	.word	0x08011ffd
 8011fa0:	0801204d 	.word	0x0801204d
 8011fa4:	08012097 	.word	0x08012097
 8011fa8:	08012097 	.word	0x08012097
 8011fac:	08012097 	.word	0x08012097
 8011fb0:	08012097 	.word	0x08012097
 8011fb4:	08012097 	.word	0x08012097
 8011fb8:	08012097 	.word	0x08012097
 8011fbc:	08012097 	.word	0x08012097
 8011fc0:	08012097 	.word	0x08012097
 8011fc4:	08012097 	.word	0x08012097
 8011fc8:	08012097 	.word	0x08012097
 8011fcc:	08012097 	.word	0x08012097
 8011fd0:	08012097 	.word	0x08012097
 8011fd4:	08012097 	.word	0x08012097
 8011fd8:	08012097 	.word	0x08012097
 8011fdc:	08012097 	.word	0x08012097
 8011fe0:	08012097 	.word	0x08012097
 8011fe4:	08012097 	.word	0x08012097
 8011fe8:	0801206b 	.word	0x0801206b
 8011fec:	2b5b      	cmp	r3, #91	; 0x5b
 8011fee:	d152      	bne.n	8012096 <recheck_line+0x14a>

            case '$':
            case '[':
                if(first_char)
 8011ff0:	7bbb      	ldrb	r3, [r7, #14]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d048      	beq.n	8012088 <recheck_line+0x13c>
                    keep_rt_commands = true;
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	73fb      	strb	r3, [r7, #15]
                break;
 8011ffa:	e045      	b.n	8012088 <recheck_line+0x13c>

            case '(':
                if(!keep_rt_commands && (flags->comment_parentheses = !flags->comment_semicolon))
 8011ffc:	7bfb      	ldrb	r3, [r7, #15]
 8011ffe:	f083 0301 	eor.w	r3, r3, #1
 8012002:	b2db      	uxtb	r3, r3
 8012004:	2b00      	cmp	r3, #0
 8012006:	d041      	beq.n	801208c <recheck_line+0x140>
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	f003 0304 	and.w	r3, r3, #4
 8012010:	b2db      	uxtb	r3, r3
 8012012:	2b00      	cmp	r3, #0
 8012014:	bf0c      	ite	eq
 8012016:	2301      	moveq	r3, #1
 8012018:	2300      	movne	r3, #0
 801201a:	b2d9      	uxtb	r1, r3
 801201c:	683a      	ldr	r2, [r7, #0]
 801201e:	7813      	ldrb	r3, [r2, #0]
 8012020:	f361 0341 	bfi	r3, r1, #1, #1
 8012024:	7013      	strb	r3, [r2, #0]
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801202e:	b2db      	uxtb	r3, r3
 8012030:	2b00      	cmp	r3, #0
 8012032:	d02b      	beq.n	801208c <recheck_line+0x140>
                    keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 8012034:	4b20      	ldr	r3, [pc, #128]	; (80120b8 <recheck_line+0x16c>)
 8012036:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 801203a:	f003 0302 	and.w	r3, r3, #2
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b00      	cmp	r3, #0
 8012042:	bf0c      	ite	eq
 8012044:	2301      	moveq	r3, #1
 8012046:	2300      	movne	r3, #0
 8012048:	73fb      	strb	r3, [r7, #15]
                break;
 801204a:	e01f      	b.n	801208c <recheck_line+0x140>

            case ')':
                if(!flags->comment_semicolon)
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	f003 0304 	and.w	r3, r3, #4
 8012054:	b2db      	uxtb	r3, r3
 8012056:	2b00      	cmp	r3, #0
 8012058:	d11a      	bne.n	8012090 <recheck_line+0x144>
                    flags->comment_parentheses = keep_rt_commands = false;
 801205a:	2300      	movs	r3, #0
 801205c:	73fb      	strb	r3, [r7, #15]
 801205e:	683a      	ldr	r2, [r7, #0]
 8012060:	7813      	ldrb	r3, [r2, #0]
 8012062:	f36f 0341 	bfc	r3, #1, #1
 8012066:	7013      	strb	r3, [r2, #0]
                break;
 8012068:	e012      	b.n	8012090 <recheck_line+0x144>

            case ';':
                if(!flags->comment_parentheses) {
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	f003 0302 	and.w	r3, r3, #2
 8012072:	b2db      	uxtb	r3, r3
 8012074:	2b00      	cmp	r3, #0
 8012076:	d10d      	bne.n	8012094 <recheck_line+0x148>
                    keep_rt_commands = false;
 8012078:	2300      	movs	r3, #0
 801207a:	73fb      	strb	r3, [r7, #15]
                    flags->comment_semicolon = On;
 801207c:	683a      	ldr	r2, [r7, #0]
 801207e:	7813      	ldrb	r3, [r2, #0]
 8012080:	f043 0304 	orr.w	r3, r3, #4
 8012084:	7013      	strb	r3, [r2, #0]
                }
                break;
 8012086:	e005      	b.n	8012094 <recheck_line+0x148>
                break;
 8012088:	bf00      	nop
 801208a:	e004      	b.n	8012096 <recheck_line+0x14a>
                break;
 801208c:	bf00      	nop
 801208e:	e002      	b.n	8012096 <recheck_line+0x14a>
                break;
 8012090:	bf00      	nop
 8012092:	e000      	b.n	8012096 <recheck_line+0x14a>
                break;
 8012094:	bf00      	nop
        }

        first_char = false;
 8012096:	2300      	movs	r3, #0
 8012098:	73bb      	strb	r3, [r7, #14]

    } while(*++line != '\0');
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	3301      	adds	r3, #1
 801209e:	607b      	str	r3, [r7, #4]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	f47f af62 	bne.w	8011f6e <recheck_line+0x22>

    return keep_rt_commands;
 80120aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3714      	adds	r7, #20
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr
 80120b8:	200016a0 	.word	0x200016a0

080120bc <protocol_main_loop>:

/*
  GRBL PRIMARY LOOP:
*/
bool protocol_main_loop (void)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
    if(sys.alarm == Alarm_SelftestFailed) {
 80120c2:	4ba4      	ldr	r3, [pc, #656]	; (8012354 <protocol_main_loop+0x298>)
 80120c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80120c8:	2b10      	cmp	r3, #16
 80120ca:	d107      	bne.n	80120dc <protocol_main_loop+0x20>
        sys.alarm = Alarm_None;
 80120cc:	4ba1      	ldr	r3, [pc, #644]	; (8012354 <protocol_main_loop+0x298>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        system_raise_alarm(Alarm_SelftestFailed);
 80120d4:	2010      	movs	r0, #16
 80120d6:	f00f fa09 	bl	80214ec <system_raise_alarm>
 80120da:	e0e9      	b.n	80122b0 <protocol_main_loop+0x1f4>
    } else if (hal.control.get_state().e_stop) {
 80120dc:	4b9e      	ldr	r3, [pc, #632]	; (8012358 <protocol_main_loop+0x29c>)
 80120de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120e0:	4798      	blx	r3
 80120e2:	4603      	mov	r3, r0
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d007      	beq.n	8012100 <protocol_main_loop+0x44>
        // Check for e-stop active. Blocks everything until cleared.
        system_raise_alarm(Alarm_EStop);
 80120f0:	200a      	movs	r0, #10
 80120f2:	f00f f9fb 	bl	80214ec <system_raise_alarm>
        grbl.report.feedback_message(Message_EStop);
 80120f6:	4b99      	ldr	r3, [pc, #612]	; (801235c <protocol_main_loop+0x2a0>)
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	200c      	movs	r0, #12
 80120fc:	4798      	blx	r3
 80120fe:	e0d7      	b.n	80122b0 <protocol_main_loop+0x1f4>
    } else if(hal.control.get_state().motor_fault) {
 8012100:	4b95      	ldr	r3, [pc, #596]	; (8012358 <protocol_main_loop+0x29c>)
 8012102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012104:	4798      	blx	r3
 8012106:	4603      	mov	r3, r0
 8012108:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801210c:	b2db      	uxtb	r3, r3
 801210e:	f003 0301 	and.w	r3, r3, #1
 8012112:	b2db      	uxtb	r3, r3
 8012114:	2b00      	cmp	r3, #0
 8012116:	d007      	beq.n	8012128 <protocol_main_loop+0x6c>
        // Check for motor fault active. Blocks everything until cleared.
        system_raise_alarm(Alarm_MotorFault);
 8012118:	2011      	movs	r0, #17
 801211a:	f00f f9e7 	bl	80214ec <system_raise_alarm>
        grbl.report.feedback_message(Message_MotorFault);
 801211e:	4b8f      	ldr	r3, [pc, #572]	; (801235c <protocol_main_loop+0x2a0>)
 8012120:	68db      	ldr	r3, [r3, #12]
 8012122:	2010      	movs	r0, #16
 8012124:	4798      	blx	r3
 8012126:	e0c3      	b.n	80122b0 <protocol_main_loop+0x1f4>
    } else if(settings.probe.enable_protection && hal.control.get_state().probe_triggered) {
 8012128:	4b8d      	ldr	r3, [pc, #564]	; (8012360 <protocol_main_loop+0x2a4>)
 801212a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 801212e:	f003 0320 	and.w	r3, r3, #32
 8012132:	b2db      	uxtb	r3, r3
 8012134:	2b00      	cmp	r3, #0
 8012136:	d013      	beq.n	8012160 <protocol_main_loop+0xa4>
 8012138:	4b87      	ldr	r3, [pc, #540]	; (8012358 <protocol_main_loop+0x29c>)
 801213a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801213c:	4798      	blx	r3
 801213e:	4603      	mov	r3, r0
 8012140:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012144:	b2db      	uxtb	r3, r3
 8012146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801214a:	b2db      	uxtb	r3, r3
 801214c:	2b00      	cmp	r3, #0
 801214e:	d007      	beq.n	8012160 <protocol_main_loop+0xa4>
        system_raise_alarm(Alarm_ProbeProtect);
 8012150:	200d      	movs	r0, #13
 8012152:	f00f f9cb 	bl	80214ec <system_raise_alarm>
        grbl.report.feedback_message(Message_ProbeProtected);
 8012156:	4b81      	ldr	r3, [pc, #516]	; (801235c <protocol_main_loop+0x2a0>)
 8012158:	68db      	ldr	r3, [r3, #12]
 801215a:	2015      	movs	r0, #21
 801215c:	4798      	blx	r3
 801215e:	e0a7      	b.n	80122b0 <protocol_main_loop+0x1f4>
    } else if (limits_homing_required()) {
 8012160:	f7fa fb2e 	bl	800c7c0 <limits_homing_required>
 8012164:	4603      	mov	r3, r0
 8012166:	2b00      	cmp	r3, #0
 8012168:	d007      	beq.n	801217a <protocol_main_loop+0xbe>
        // by setting Grbl's alarm state. Alarm locks out all g-code commands, including the
        // startup scripts, but allows access to settings and internal commands.
        // Only a successful homing cycle '$H' will disable the alarm.
        // NOTE: The startup script will run after successful completion of the homing cycle. Prevents motion startup
        // blocks from crashing into things uncontrollably. Very bad.
        system_raise_alarm(Alarm_HomingRequired);
 801216a:	200b      	movs	r0, #11
 801216c:	f00f f9be 	bl	80214ec <system_raise_alarm>
        grbl.report.feedback_message(Message_HomingCycleRequired);
 8012170:	4b7a      	ldr	r3, [pc, #488]	; (801235c <protocol_main_loop+0x2a0>)
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	200d      	movs	r0, #13
 8012176:	4798      	blx	r3
 8012178:	e09a      	b.n	80122b0 <protocol_main_loop+0x1f4>
    } else if (settings.limits.flags.hard_enabled &&
 801217a:	4b79      	ldr	r3, [pc, #484]	; (8012360 <protocol_main_loop+0x2a4>)
 801217c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8012180:	f003 0301 	and.w	r3, r3, #1
 8012184:	b2db      	uxtb	r3, r3
 8012186:	2b00      	cmp	r3, #0
 8012188:	d035      	beq.n	80121f6 <protocol_main_loop+0x13a>
 801218a:	4b75      	ldr	r3, [pc, #468]	; (8012360 <protocol_main_loop+0x2a4>)
 801218c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8012190:	f003 0304 	and.w	r3, r3, #4
 8012194:	b2db      	uxtb	r3, r3
 8012196:	2b00      	cmp	r3, #0
 8012198:	d02d      	beq.n	80121f6 <protocol_main_loop+0x13a>
                settings.limits.flags.check_at_init &&
                 (limit_signals_merge(hal.limits.get_state()).value & sys.hard_limits.mask)) {
 801219a:	4b6f      	ldr	r3, [pc, #444]	; (8012358 <protocol_main_loop+0x29c>)
 801219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801219e:	4798      	blx	r3
 80121a0:	4603      	mov	r3, r0
 80121a2:	60bb      	str	r3, [r7, #8]
 80121a4:	68b8      	ldr	r0, [r7, #8]
 80121a6:	f7f9 fbaf 	bl	800b908 <limit_signals_merge>
 80121aa:	4603      	mov	r3, r0
 80121ac:	b2da      	uxtb	r2, r3
 80121ae:	4b69      	ldr	r3, [pc, #420]	; (8012354 <protocol_main_loop+0x298>)
 80121b0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
                settings.limits.flags.check_at_init &&
 80121b4:	4013      	ands	r3, r2
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d01c      	beq.n	80121f6 <protocol_main_loop+0x13a>
        if(sys.alarm == Alarm_LimitsEngaged && hal.control.get_state().limits_override)
 80121bc:	4b65      	ldr	r3, [pc, #404]	; (8012354 <protocol_main_loop+0x298>)
 80121be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80121c2:	2b0c      	cmp	r3, #12
 80121c4:	d10f      	bne.n	80121e6 <protocol_main_loop+0x12a>
 80121c6:	4b64      	ldr	r3, [pc, #400]	; (8012358 <protocol_main_loop+0x29c>)
 80121c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121ca:	4798      	blx	r3
 80121cc:	4603      	mov	r3, r0
 80121ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	f003 0304 	and.w	r3, r3, #4
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d003      	beq.n	80121e6 <protocol_main_loop+0x12a>
            state_set(STATE_IDLE); // Clear alarm state to enable limit switch pulloff.
 80121de:	2000      	movs	r0, #0
 80121e0:	f00a fdaa 	bl	801cd38 <state_set>
        if(sys.alarm == Alarm_LimitsEngaged && hal.control.get_state().limits_override)
 80121e4:	e064      	b.n	80122b0 <protocol_main_loop+0x1f4>
        else {
            // Check that no limit switches are engaged to make sure everything is good to go.
            system_raise_alarm(Alarm_LimitsEngaged);
 80121e6:	200c      	movs	r0, #12
 80121e8:	f00f f980 	bl	80214ec <system_raise_alarm>
            grbl.report.feedback_message(Message_CheckLimits);
 80121ec:	4b5b      	ldr	r3, [pc, #364]	; (801235c <protocol_main_loop+0x2a0>)
 80121ee:	68db      	ldr	r3, [r3, #12]
 80121f0:	2007      	movs	r0, #7
 80121f2:	4798      	blx	r3
        if(sys.alarm == Alarm_LimitsEngaged && hal.control.get_state().limits_override)
 80121f4:	e05c      	b.n	80122b0 <protocol_main_loop+0x1f4>
        }
    } else if(sys.cold_start && (settings.flags.force_initialization_alarm || hal.control.get_state().reset)) {
 80121f6:	4b57      	ldr	r3, [pc, #348]	; (8012354 <protocol_main_loop+0x298>)
 80121f8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d019      	beq.n	8012234 <protocol_main_loop+0x178>
 8012200:	4b57      	ldr	r3, [pc, #348]	; (8012360 <protocol_main_loop+0x2a4>)
 8012202:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8012206:	f003 0320 	and.w	r3, r3, #32
 801220a:	b2db      	uxtb	r3, r3
 801220c:	2b00      	cmp	r3, #0
 801220e:	d109      	bne.n	8012224 <protocol_main_loop+0x168>
 8012210:	4b51      	ldr	r3, [pc, #324]	; (8012358 <protocol_main_loop+0x29c>)
 8012212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012214:	4798      	blx	r3
 8012216:	4603      	mov	r3, r0
 8012218:	b2db      	uxtb	r3, r3
 801221a:	f003 0301 	and.w	r3, r3, #1
 801221e:	b2db      	uxtb	r3, r3
 8012220:	2b00      	cmp	r3, #0
 8012222:	d007      	beq.n	8012234 <protocol_main_loop+0x178>
        state_set(STATE_ALARM); // Ensure alarm state is set.
 8012224:	2001      	movs	r0, #1
 8012226:	f00a fd87 	bl	801cd38 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 801222a:	4b4c      	ldr	r3, [pc, #304]	; (801235c <protocol_main_loop+0x2a0>)
 801222c:	68db      	ldr	r3, [r3, #12]
 801222e:	2002      	movs	r0, #2
 8012230:	4798      	blx	r3
 8012232:	e03d      	b.n	80122b0 <protocol_main_loop+0x1f4>
    } else if (state_get() & (STATE_ALARM|STATE_SLEEP)) {
 8012234:	f00a fd74 	bl	801cd20 <state_get>
 8012238:	4603      	mov	r3, r0
 801223a:	f003 0381 	and.w	r3, r3, #129	; 0x81
 801223e:	2b00      	cmp	r3, #0
 8012240:	d010      	beq.n	8012264 <protocol_main_loop+0x1a8>
        // Check for and report alarm state after a reset, error, or an initial power up.
        // NOTE: Sleep mode disables the stepper drivers and position can't be guaranteed.
        // Re-initialize the sleep state as an ALARM mode to ensure user homes or acknowledges.
        if(sys.alarm == Alarm_HomingRequired)
 8012242:	4b44      	ldr	r3, [pc, #272]	; (8012354 <protocol_main_loop+0x298>)
 8012244:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012248:	2b0b      	cmp	r3, #11
 801224a:	d103      	bne.n	8012254 <protocol_main_loop+0x198>
            sys.alarm = Alarm_None; // Clear Alarm_HomingRequired as the lock has been overridden by a soft reset.
 801224c:	4b41      	ldr	r3, [pc, #260]	; (8012354 <protocol_main_loop+0x298>)
 801224e:	2200      	movs	r2, #0
 8012250:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        state_set(STATE_ALARM); // Ensure alarm state is set.
 8012254:	2001      	movs	r0, #1
 8012256:	f00a fd6f 	bl	801cd38 <state_set>
        grbl.report.feedback_message(Message_AlarmLock);
 801225a:	4b40      	ldr	r3, [pc, #256]	; (801235c <protocol_main_loop+0x2a0>)
 801225c:	68db      	ldr	r3, [r3, #12]
 801225e:	2002      	movs	r0, #2
 8012260:	4798      	blx	r3
 8012262:	e025      	b.n	80122b0 <protocol_main_loop+0x1f4>
    } else {
        state_set(STATE_IDLE);
 8012264:	2000      	movs	r0, #0
 8012266:	f00a fd67 	bl	801cd38 <state_set>
#ifndef NO_SAFETY_DOOR_SUPPORT
        // Check if the safety door is open.
        if (hal.signals_cap.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle && hal.control.get_state().safety_door_ajar) {
 801226a:	4b3b      	ldr	r3, [pc, #236]	; (8012358 <protocol_main_loop+0x29c>)
 801226c:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8012270:	f003 0308 	and.w	r3, r3, #8
 8012274:	b2db      	uxtb	r3, r3
 8012276:	2b00      	cmp	r3, #0
 8012278:	d018      	beq.n	80122ac <protocol_main_loop+0x1f0>
 801227a:	4b39      	ldr	r3, [pc, #228]	; (8012360 <protocol_main_loop+0x2a4>)
 801227c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8012280:	f003 0301 	and.w	r3, r3, #1
 8012284:	b2db      	uxtb	r3, r3
 8012286:	2b00      	cmp	r3, #0
 8012288:	d110      	bne.n	80122ac <protocol_main_loop+0x1f0>
 801228a:	4b33      	ldr	r3, [pc, #204]	; (8012358 <protocol_main_loop+0x29c>)
 801228c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801228e:	4798      	blx	r3
 8012290:	4603      	mov	r3, r0
 8012292:	b2db      	uxtb	r3, r3
 8012294:	f003 0308 	and.w	r3, r3, #8
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	d006      	beq.n	80122ac <protocol_main_loop+0x1f0>
            system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 801229e:	4b2e      	ldr	r3, [pc, #184]	; (8012358 <protocol_main_loop+0x29c>)
 80122a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122a2:	2140      	movs	r1, #64	; 0x40
 80122a4:	482f      	ldr	r0, [pc, #188]	; (8012364 <protocol_main_loop+0x2a8>)
 80122a6:	4798      	blx	r3
            protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 80122a8:	f000 fa9c 	bl	80127e4 <protocol_execute_realtime>
        }
#endif
        // All systems go!
        system_execute_startup(); // Execute startup script.
 80122ac:	f00d ffa2 	bl	80201f4 <system_execute_startup>
    }

    // Ensure spindle and coolant is switched off on a cold start
    if(sys.cold_start) {
 80122b0:	4b28      	ldr	r3, [pc, #160]	; (8012354 <protocol_main_loop+0x298>)
 80122b2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d017      	beq.n	80122ea <protocol_main_loop+0x22e>
        spindle_all_off();
 80122ba:	f00a f991 	bl	801c5e0 <spindle_all_off>
        hal.coolant.set_state((coolant_state_t){0});
 80122be:	4b26      	ldr	r3, [pc, #152]	; (8012358 <protocol_main_loop+0x29c>)
 80122c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122c2:	2200      	movs	r2, #0
 80122c4:	4610      	mov	r0, r2
 80122c6:	4798      	blx	r3
        if(realtime_queue.head != realtime_queue.tail)
 80122c8:	4b27      	ldr	r3, [pc, #156]	; (8012368 <protocol_main_loop+0x2ac>)
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	4b26      	ldr	r3, [pc, #152]	; (8012368 <protocol_main_loop+0x2ac>)
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d005      	beq.n	80122e0 <protocol_main_loop+0x224>
            system_set_exec_state_flag(EXEC_RT_COMMAND);  // execute any boot up commands
 80122d4:	4b20      	ldr	r3, [pc, #128]	; (8012358 <protocol_main_loop+0x29c>)
 80122d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80122dc:	4821      	ldr	r0, [pc, #132]	; (8012364 <protocol_main_loop+0x2a8>)
 80122de:	4798      	blx	r3
        sys.cold_start = false;
 80122e0:	4b1c      	ldr	r3, [pc, #112]	; (8012354 <protocol_main_loop+0x298>)
 80122e2:	2200      	movs	r2, #0
 80122e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 80122e8:	e004      	b.n	80122f4 <protocol_main_loop+0x238>
    } else
        memset(&realtime_queue, 0, sizeof(realtime_queue_t));
 80122ea:	2228      	movs	r2, #40	; 0x28
 80122ec:	2100      	movs	r1, #0
 80122ee:	481e      	ldr	r0, [pc, #120]	; (8012368 <protocol_main_loop+0x2ac>)
 80122f0:	f013 fda5 	bl	8025e3e <memset>
    // Primary loop! Upon a system abort, this exits back to main() to reset the system.
    // This is also where Grbl idles while waiting for something to do.
    // ---------------------------------------------------------------------------------

    int16_t c;
    char eol = '\0';
 80122f4:	2300      	movs	r3, #0
 80122f6:	73fb      	strb	r3, [r7, #15]
    line_flags_t line_flags = {0};
 80122f8:	2300      	movs	r3, #0
 80122fa:	713b      	strb	r3, [r7, #4]

    xcommand[0] = '\0';
 80122fc:	4b1b      	ldr	r3, [pc, #108]	; (801236c <protocol_main_loop+0x2b0>)
 80122fe:	2200      	movs	r2, #0
 8012300:	701a      	strb	r2, [r3, #0]
    char_counter = 0;
 8012302:	4b1b      	ldr	r3, [pc, #108]	; (8012370 <protocol_main_loop+0x2b4>)
 8012304:	2200      	movs	r2, #0
 8012306:	601a      	str	r2, [r3, #0]
    keep_rt_commands = false;
 8012308:	4b1a      	ldr	r3, [pc, #104]	; (8012374 <protocol_main_loop+0x2b8>)
 801230a:	2200      	movs	r2, #0
 801230c:	701a      	strb	r2, [r3, #0]

    while(true) {

        // Process one line of incoming stream data, as the data becomes available. Performs an
        // initial filtering by removing leading spaces and control characters.
        while((c = hal.stream.read()) != SERIAL_NO_DATA) {
 801230e:	e1d2      	b.n	80126b6 <protocol_main_loop+0x5fa>

            if(c == ASCII_CAN) {
 8012310:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012314:	2b18      	cmp	r3, #24
 8012316:	d131      	bne.n	801237c <protocol_main_loop+0x2c0>

                eol = xcommand[0] = '\0';
 8012318:	4b14      	ldr	r3, [pc, #80]	; (801236c <protocol_main_loop+0x2b0>)
 801231a:	2200      	movs	r2, #0
 801231c:	701a      	strb	r2, [r3, #0]
 801231e:	4b13      	ldr	r3, [pc, #76]	; (801236c <protocol_main_loop+0x2b0>)
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	73fb      	strb	r3, [r7, #15]
                keep_rt_commands = false;
 8012324:	4b13      	ldr	r3, [pc, #76]	; (8012374 <protocol_main_loop+0x2b8>)
 8012326:	2200      	movs	r2, #0
 8012328:	701a      	strb	r2, [r3, #0]
                char_counter = line_flags.value = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	713b      	strb	r3, [r7, #4]
 801232e:	4b10      	ldr	r3, [pc, #64]	; (8012370 <protocol_main_loop+0x2b4>)
 8012330:	2200      	movs	r2, #0
 8012332:	601a      	str	r2, [r3, #0]
                gc_state.last_error = Status_OK;
 8012334:	4b10      	ldr	r3, [pc, #64]	; (8012378 <protocol_main_loop+0x2bc>)
 8012336:	2200      	movs	r2, #0
 8012338:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

                if (state_get() == STATE_JOG) // Block all other states from invoking motion cancel.
 801233c:	f00a fcf0 	bl	801cd20 <state_get>
 8012340:	4603      	mov	r3, r0
 8012342:	2b20      	cmp	r3, #32
 8012344:	f040 81b7 	bne.w	80126b6 <protocol_main_loop+0x5fa>
                    system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 8012348:	4b03      	ldr	r3, [pc, #12]	; (8012358 <protocol_main_loop+0x29c>)
 801234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801234c:	2180      	movs	r1, #128	; 0x80
 801234e:	4805      	ldr	r0, [pc, #20]	; (8012364 <protocol_main_loop+0x2a8>)
 8012350:	4798      	blx	r3
 8012352:	e1b0      	b.n	80126b6 <protocol_main_loop+0x5fa>
 8012354:	20001520 	.word	0x20001520
 8012358:	200016a0 	.word	0x200016a0
 801235c:	200015b8 	.word	0x200015b8
 8012360:	20001cf0 	.word	0x20001cf0
 8012364:	20001568 	.word	0x20001568
 8012368:	20001c4c 	.word	0x20001c4c
 801236c:	20001b48 	.word	0x20001b48
 8012370:	20001a40 	.word	0x20001a40
 8012374:	20001c49 	.word	0x20001c49
 8012378:	2000137c 	.word	0x2000137c

            } else if ((c == '\n') || (c == '\r')) { // End of line reached
 801237c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012380:	2b0a      	cmp	r3, #10
 8012382:	d004      	beq.n	801238e <protocol_main_loop+0x2d2>
 8012384:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012388:	2b0d      	cmp	r3, #13
 801238a:	f040 80a1 	bne.w	80124d0 <protocol_main_loop+0x414>

                // Check for possible secondary end of line character, do not process as empty line
                // if part of crlf (or lfcr pair) as this produces a possibly unwanted double response
                if(char_counter == 0 && eol && eol != c) {
 801238e:	4ba6      	ldr	r3, [pc, #664]	; (8012628 <protocol_main_loop+0x56c>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d10a      	bne.n	80123ac <protocol_main_loop+0x2f0>
 8012396:	7bfb      	ldrb	r3, [r7, #15]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d007      	beq.n	80123ac <protocol_main_loop+0x2f0>
 801239c:	7bfa      	ldrb	r2, [r7, #15]
 801239e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d002      	beq.n	80123ac <protocol_main_loop+0x2f0>
                    eol = '\0';
 80123a6:	2300      	movs	r3, #0
 80123a8:	73fb      	strb	r3, [r7, #15]
                    continue;
 80123aa:	e184      	b.n	80126b6 <protocol_main_loop+0x5fa>
                } else
                    eol = (char)c;
 80123ac:	89bb      	ldrh	r3, [r7, #12]
 80123ae:	73fb      	strb	r3, [r7, #15]

                if(!protocol_execute_realtime()) // Runtime command check point.
 80123b0:	f000 fa18 	bl	80127e4 <protocol_execute_realtime>
 80123b4:	4603      	mov	r3, r0
 80123b6:	f083 0301 	eor.w	r3, r3, #1
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00a      	beq.n	80123d6 <protocol_main_loop+0x31a>
                    return !sys.flags.exit;      // Bail to calling function upon system abort
 80123c0:	4b9a      	ldr	r3, [pc, #616]	; (801262c <protocol_main_loop+0x570>)
 80123c2:	7d9b      	ldrb	r3, [r3, #22]
 80123c4:	f003 0308 	and.w	r3, r3, #8
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	bf0c      	ite	eq
 80123ce:	2301      	moveq	r3, #1
 80123d0:	2300      	movne	r3, #0
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	e1c1      	b.n	801275a <protocol_main_loop+0x69e>

                line[char_counter] = '\0'; // Set string termination character.
 80123d6:	4b94      	ldr	r3, [pc, #592]	; (8012628 <protocol_main_loop+0x56c>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4a95      	ldr	r2, [pc, #596]	; (8012630 <protocol_main_loop+0x574>)
 80123dc:	2100      	movs	r1, #0
 80123de:	54d1      	strb	r1, [r2, r3]
              #if REPORT_ECHO_LINE_RECEIVED
                report_echo_line_received(line);
              #endif

                // Direct and execute one line of formatted input, and report status of execution.
                if (line_flags.overflow) // Report line overflow error.
 80123e0:	793b      	ldrb	r3, [r7, #4]
 80123e2:	f003 0301 	and.w	r3, r3, #1
 80123e6:	b2db      	uxtb	r3, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d004      	beq.n	80123f6 <protocol_main_loop+0x33a>
                    gc_state.last_error = Status_Overflow;
 80123ec:	4b91      	ldr	r3, [pc, #580]	; (8012634 <protocol_main_loop+0x578>)
 80123ee:	220b      	movs	r2, #11
 80123f0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 80123f4:	e052      	b.n	801249c <protocol_main_loop+0x3e0>
                else if(*line == '\0') // Empty line. For syncing purposes.
 80123f6:	4b8e      	ldr	r3, [pc, #568]	; (8012630 <protocol_main_loop+0x574>)
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d104      	bne.n	8012408 <protocol_main_loop+0x34c>
                    gc_state.last_error = Status_OK;
 80123fe:	4b8d      	ldr	r3, [pc, #564]	; (8012634 <protocol_main_loop+0x578>)
 8012400:	2200      	movs	r2, #0
 8012402:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8012406:	e049      	b.n	801249c <protocol_main_loop+0x3e0>
                else if(*line == '$') {// Grbl '$' system command
 8012408:	4b89      	ldr	r3, [pc, #548]	; (8012630 <protocol_main_loop+0x574>)
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	2b24      	cmp	r3, #36	; 0x24
 801240e:	d114      	bne.n	801243a <protocol_main_loop+0x37e>
                    if((gc_state.last_error = system_execute_line(line)) == Status_LimitsEngaged) {
 8012410:	4887      	ldr	r0, [pc, #540]	; (8012630 <protocol_main_loop+0x574>)
 8012412:	f00e f8d9 	bl	80205c8 <system_execute_line>
 8012416:	4603      	mov	r3, r0
 8012418:	461a      	mov	r2, r3
 801241a:	4b86      	ldr	r3, [pc, #536]	; (8012634 <protocol_main_loop+0x578>)
 801241c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8012420:	4b84      	ldr	r3, [pc, #528]	; (8012634 <protocol_main_loop+0x578>)
 8012422:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8012426:	2b2d      	cmp	r3, #45	; 0x2d
 8012428:	d138      	bne.n	801249c <protocol_main_loop+0x3e0>
                        system_raise_alarm(Alarm_LimitsEngaged);
 801242a:	200c      	movs	r0, #12
 801242c:	f00f f85e 	bl	80214ec <system_raise_alarm>
                        grbl.report.feedback_message(Message_CheckLimits);
 8012430:	4b81      	ldr	r3, [pc, #516]	; (8012638 <protocol_main_loop+0x57c>)
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	2007      	movs	r0, #7
 8012436:	4798      	blx	r3
 8012438:	e030      	b.n	801249c <protocol_main_loop+0x3e0>
                    }
                } else if(*line == '[' && grbl.on_user_command)
 801243a:	4b7d      	ldr	r3, [pc, #500]	; (8012630 <protocol_main_loop+0x574>)
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	2b5b      	cmp	r3, #91	; 0x5b
 8012440:	d10d      	bne.n	801245e <protocol_main_loop+0x3a2>
 8012442:	4b7d      	ldr	r3, [pc, #500]	; (8012638 <protocol_main_loop+0x57c>)
 8012444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012446:	2b00      	cmp	r3, #0
 8012448:	d009      	beq.n	801245e <protocol_main_loop+0x3a2>
                    gc_state.last_error = grbl.on_user_command(line);
 801244a:	4b7b      	ldr	r3, [pc, #492]	; (8012638 <protocol_main_loop+0x57c>)
 801244c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801244e:	4878      	ldr	r0, [pc, #480]	; (8012630 <protocol_main_loop+0x574>)
 8012450:	4798      	blx	r3
 8012452:	4603      	mov	r3, r0
 8012454:	461a      	mov	r2, r3
 8012456:	4b77      	ldr	r3, [pc, #476]	; (8012634 <protocol_main_loop+0x578>)
 8012458:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 801245c:	e01e      	b.n	801249c <protocol_main_loop+0x3e0>
                else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog mode.
 801245e:	f00a fc5f 	bl	801cd20 <state_get>
 8012462:	4602      	mov	r2, r0
 8012464:	f240 1321 	movw	r3, #289	; 0x121
 8012468:	4013      	ands	r3, r2
 801246a:	2b00      	cmp	r3, #0
 801246c:	d004      	beq.n	8012478 <protocol_main_loop+0x3bc>
                    gc_state.last_error = Status_SystemGClock;
 801246e:	4b71      	ldr	r3, [pc, #452]	; (8012634 <protocol_main_loop+0x578>)
 8012470:	2209      	movs	r2, #9
 8012472:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8012476:	e011      	b.n	801249c <protocol_main_loop+0x3e0>
#if COMPATIBILITY_LEVEL == 0
                else if(gc_state.last_error == Status_OK || gc_state.last_error == Status_GcodeToolChangePending) { // Parse and execute g-code block.
 8012478:	4b6e      	ldr	r3, [pc, #440]	; (8012634 <protocol_main_loop+0x578>)
 801247a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 801247e:	2b00      	cmp	r3, #0
 8012480:	d004      	beq.n	801248c <protocol_main_loop+0x3d0>
 8012482:	4b6c      	ldr	r3, [pc, #432]	; (8012634 <protocol_main_loop+0x578>)
 8012484:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8012488:	2b28      	cmp	r3, #40	; 0x28
 801248a:	d107      	bne.n	801249c <protocol_main_loop+0x3e0>
#else
                else { // Parse and execute g-code block.

#endif
                    gc_state.last_error = gc_execute_block(line);
 801248c:	4868      	ldr	r0, [pc, #416]	; (8012630 <protocol_main_loop+0x574>)
 801248e:	f7f3 fc47 	bl	8005d20 <gc_execute_block>
 8012492:	4603      	mov	r3, r0
 8012494:	461a      	mov	r2, r3
 8012496:	4b67      	ldr	r3, [pc, #412]	; (8012634 <protocol_main_loop+0x578>)
 8012498:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                // the speed is not limited to 115200 baud. An example is native USB streaming.
#if CHECK_MODE_DELAY
                if(state_get() == STATE_CHECK_MODE)
                    hal.delay_ms(CHECK_MODE_DELAY, NULL);
#endif
                if(ABORTED)
 801249c:	4b63      	ldr	r3, [pc, #396]	; (801262c <protocol_main_loop+0x570>)
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	f040 8114 	bne.w	80126ce <protocol_main_loop+0x612>
 80124a6:	4b61      	ldr	r3, [pc, #388]	; (801262c <protocol_main_loop+0x570>)
 80124a8:	785b      	ldrb	r3, [r3, #1]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	f040 810f 	bne.w	80126ce <protocol_main_loop+0x612>
                    break;
                else
                    grbl.report.status_message(gc_state.last_error);
 80124b0:	4b61      	ldr	r3, [pc, #388]	; (8012638 <protocol_main_loop+0x57c>)
 80124b2:	689b      	ldr	r3, [r3, #8]
 80124b4:	4a5f      	ldr	r2, [pc, #380]	; (8012634 <protocol_main_loop+0x578>)
 80124b6:	f892 2079 	ldrb.w	r2, [r2, #121]	; 0x79
 80124ba:	4610      	mov	r0, r2
 80124bc:	4798      	blx	r3

                // Reset tracking data for next line.
                keep_rt_commands = false;
 80124be:	4b5f      	ldr	r3, [pc, #380]	; (801263c <protocol_main_loop+0x580>)
 80124c0:	2200      	movs	r2, #0
 80124c2:	701a      	strb	r2, [r3, #0]
                char_counter = line_flags.value = 0;
 80124c4:	2300      	movs	r3, #0
 80124c6:	713b      	strb	r3, [r7, #4]
 80124c8:	4b57      	ldr	r3, [pc, #348]	; (8012628 <protocol_main_loop+0x56c>)
 80124ca:	2200      	movs	r2, #0
 80124cc:	601a      	str	r2, [r3, #0]
 80124ce:	e0f2      	b.n	80126b6 <protocol_main_loop+0x5fa>

            } else if (c != ASCII_BS && c <= (char_counter > 0 ? ' ' - 1 : ' '))
 80124d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80124d4:	2b08      	cmp	r3, #8
 80124d6:	d00b      	beq.n	80124f0 <protocol_main_loop+0x434>
 80124d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80124dc:	4a52      	ldr	r2, [pc, #328]	; (8012628 <protocol_main_loop+0x56c>)
 80124de:	6812      	ldr	r2, [r2, #0]
 80124e0:	2a00      	cmp	r2, #0
 80124e2:	d001      	beq.n	80124e8 <protocol_main_loop+0x42c>
 80124e4:	221f      	movs	r2, #31
 80124e6:	e000      	b.n	80124ea <protocol_main_loop+0x42e>
 80124e8:	2220      	movs	r2, #32
 80124ea:	429a      	cmp	r2, r3
 80124ec:	db00      	blt.n	80124f0 <protocol_main_loop+0x434>
                continue; // Strip control characters and leading whitespace.
 80124ee:	e0e2      	b.n	80126b6 <protocol_main_loop+0x5fa>
            else {
                switch(c) {
 80124f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80124f4:	2b7f      	cmp	r3, #127	; 0x7f
 80124f6:	f000 80a5 	beq.w	8012644 <protocol_main_loop+0x588>
 80124fa:	2b7f      	cmp	r3, #127	; 0x7f
 80124fc:	f300 80c1 	bgt.w	8012682 <protocol_main_loop+0x5c6>
 8012500:	2b5b      	cmp	r3, #91	; 0x5b
 8012502:	d045      	beq.n	8012590 <protocol_main_loop+0x4d4>
 8012504:	2b5b      	cmp	r3, #91	; 0x5b
 8012506:	f300 80bc 	bgt.w	8012682 <protocol_main_loop+0x5c6>
 801250a:	2b08      	cmp	r3, #8
 801250c:	f000 809a 	beq.w	8012644 <protocol_main_loop+0x588>
 8012510:	2b08      	cmp	r3, #8
 8012512:	f2c0 80b6 	blt.w	8012682 <protocol_main_loop+0x5c6>
 8012516:	2b3b      	cmp	r3, #59	; 0x3b
 8012518:	f300 80b3 	bgt.w	8012682 <protocol_main_loop+0x5c6>
 801251c:	2b24      	cmp	r3, #36	; 0x24
 801251e:	f2c0 80b0 	blt.w	8012682 <protocol_main_loop+0x5c6>
 8012522:	3b24      	subs	r3, #36	; 0x24
 8012524:	2b17      	cmp	r3, #23
 8012526:	f200 80ac 	bhi.w	8012682 <protocol_main_loop+0x5c6>
 801252a:	a201      	add	r2, pc, #4	; (adr r2, 8012530 <protocol_main_loop+0x474>)
 801252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012530:	08012591 	.word	0x08012591
 8012534:	08012683 	.word	0x08012683
 8012538:	08012683 	.word	0x08012683
 801253c:	08012683 	.word	0x08012683
 8012540:	080125a1 	.word	0x080125a1
 8012544:	080125f1 	.word	0x080125f1
 8012548:	08012683 	.word	0x08012683
 801254c:	08012683 	.word	0x08012683
 8012550:	08012683 	.word	0x08012683
 8012554:	08012683 	.word	0x08012683
 8012558:	08012683 	.word	0x08012683
 801255c:	08012683 	.word	0x08012683
 8012560:	08012683 	.word	0x08012683
 8012564:	08012683 	.word	0x08012683
 8012568:	08012683 	.word	0x08012683
 801256c:	08012683 	.word	0x08012683
 8012570:	08012683 	.word	0x08012683
 8012574:	08012683 	.word	0x08012683
 8012578:	08012683 	.word	0x08012683
 801257c:	08012683 	.word	0x08012683
 8012580:	08012683 	.word	0x08012683
 8012584:	08012683 	.word	0x08012683
 8012588:	08012683 	.word	0x08012683
 801258c:	0801260d 	.word	0x0801260d

                    case '$':
                    case '[':
                        if(char_counter == 0)
 8012590:	4b25      	ldr	r3, [pc, #148]	; (8012628 <protocol_main_loop+0x56c>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d16d      	bne.n	8012674 <protocol_main_loop+0x5b8>
                            keep_rt_commands = true;
 8012598:	4b28      	ldr	r3, [pc, #160]	; (801263c <protocol_main_loop+0x580>)
 801259a:	2201      	movs	r2, #1
 801259c:	701a      	strb	r2, [r3, #0]
                        break;
 801259e:	e069      	b.n	8012674 <protocol_main_loop+0x5b8>

                    case '(':
                        if(!keep_rt_commands && (line_flags.comment_parentheses = !line_flags.comment_semicolon))
 80125a0:	4b26      	ldr	r3, [pc, #152]	; (801263c <protocol_main_loop+0x580>)
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	f083 0301 	eor.w	r3, r3, #1
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d064      	beq.n	8012678 <protocol_main_loop+0x5bc>
 80125ae:	793b      	ldrb	r3, [r7, #4]
 80125b0:	f003 0304 	and.w	r3, r3, #4
 80125b4:	b2db      	uxtb	r3, r3
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	bf0c      	ite	eq
 80125ba:	2301      	moveq	r3, #1
 80125bc:	2300      	movne	r3, #0
 80125be:	b2da      	uxtb	r2, r3
 80125c0:	793b      	ldrb	r3, [r7, #4]
 80125c2:	f362 0341 	bfi	r3, r2, #1, #1
 80125c6:	713b      	strb	r3, [r7, #4]
 80125c8:	793b      	ldrb	r3, [r7, #4]
 80125ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d051      	beq.n	8012678 <protocol_main_loop+0x5bc>
                            keep_rt_commands = !hal.driver_cap.no_gcode_message_handling; // Suspend real-time processing of printable command characters.
 80125d4:	4b1a      	ldr	r3, [pc, #104]	; (8012640 <protocol_main_loop+0x584>)
 80125d6:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 80125da:	f003 0302 	and.w	r3, r3, #2
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	bf0c      	ite	eq
 80125e4:	2301      	moveq	r3, #1
 80125e6:	2300      	movne	r3, #0
 80125e8:	b2da      	uxtb	r2, r3
 80125ea:	4b14      	ldr	r3, [pc, #80]	; (801263c <protocol_main_loop+0x580>)
 80125ec:	701a      	strb	r2, [r3, #0]
                        break;
 80125ee:	e043      	b.n	8012678 <protocol_main_loop+0x5bc>

                    case ')':
                        if(!line_flags.comment_semicolon)
 80125f0:	793b      	ldrb	r3, [r7, #4]
 80125f2:	f003 0304 	and.w	r3, r3, #4
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d13f      	bne.n	801267c <protocol_main_loop+0x5c0>
                            line_flags.comment_parentheses = keep_rt_commands = false;
 80125fc:	4b0f      	ldr	r3, [pc, #60]	; (801263c <protocol_main_loop+0x580>)
 80125fe:	2200      	movs	r2, #0
 8012600:	701a      	strb	r2, [r3, #0]
 8012602:	793b      	ldrb	r3, [r7, #4]
 8012604:	f36f 0341 	bfc	r3, #1, #1
 8012608:	713b      	strb	r3, [r7, #4]
                        break;
 801260a:	e037      	b.n	801267c <protocol_main_loop+0x5c0>

                    case ';':
                        if(!line_flags.comment_parentheses) {
 801260c:	793b      	ldrb	r3, [r7, #4]
 801260e:	f003 0302 	and.w	r3, r3, #2
 8012612:	b2db      	uxtb	r3, r3
 8012614:	2b00      	cmp	r3, #0
 8012616:	d133      	bne.n	8012680 <protocol_main_loop+0x5c4>
                            keep_rt_commands = false;
 8012618:	4b08      	ldr	r3, [pc, #32]	; (801263c <protocol_main_loop+0x580>)
 801261a:	2200      	movs	r2, #0
 801261c:	701a      	strb	r2, [r3, #0]
                            line_flags.comment_semicolon = On;
 801261e:	793b      	ldrb	r3, [r7, #4]
 8012620:	f043 0304 	orr.w	r3, r3, #4
 8012624:	713b      	strb	r3, [r7, #4]
                        }
                        break;
 8012626:	e02b      	b.n	8012680 <protocol_main_loop+0x5c4>
 8012628:	20001a40 	.word	0x20001a40
 801262c:	20001520 	.word	0x20001520
 8012630:	20001a44 	.word	0x20001a44
 8012634:	2000137c 	.word	0x2000137c
 8012638:	200015b8 	.word	0x200015b8
 801263c:	20001c49 	.word	0x20001c49
 8012640:	200016a0 	.word	0x200016a0

                    case ASCII_BS:
                    case ASCII_DEL:
                        if(char_counter) {
 8012644:	4b47      	ldr	r3, [pc, #284]	; (8012764 <protocol_main_loop+0x6a8>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d034      	beq.n	80126b6 <protocol_main_loop+0x5fa>
                            line[--char_counter] = '\0';
 801264c:	4b45      	ldr	r3, [pc, #276]	; (8012764 <protocol_main_loop+0x6a8>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	3b01      	subs	r3, #1
 8012652:	4a44      	ldr	r2, [pc, #272]	; (8012764 <protocol_main_loop+0x6a8>)
 8012654:	6013      	str	r3, [r2, #0]
 8012656:	4b43      	ldr	r3, [pc, #268]	; (8012764 <protocol_main_loop+0x6a8>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4a43      	ldr	r2, [pc, #268]	; (8012768 <protocol_main_loop+0x6ac>)
 801265c:	2100      	movs	r1, #0
 801265e:	54d1      	strb	r1, [r2, r3]
                            keep_rt_commands = recheck_line(line, &line_flags);
 8012660:	1d3b      	adds	r3, r7, #4
 8012662:	4619      	mov	r1, r3
 8012664:	4840      	ldr	r0, [pc, #256]	; (8012768 <protocol_main_loop+0x6ac>)
 8012666:	f7ff fc71 	bl	8011f4c <recheck_line>
 801266a:	4603      	mov	r3, r0
 801266c:	461a      	mov	r2, r3
 801266e:	4b3f      	ldr	r3, [pc, #252]	; (801276c <protocol_main_loop+0x6b0>)
 8012670:	701a      	strb	r2, [r3, #0]
                        }
                        continue;
 8012672:	e020      	b.n	80126b6 <protocol_main_loop+0x5fa>
                        break;
 8012674:	bf00      	nop
 8012676:	e004      	b.n	8012682 <protocol_main_loop+0x5c6>
                        break;
 8012678:	bf00      	nop
 801267a:	e002      	b.n	8012682 <protocol_main_loop+0x5c6>
                        break;
 801267c:	bf00      	nop
 801267e:	e000      	b.n	8012682 <protocol_main_loop+0x5c6>
                        break;
 8012680:	bf00      	nop
                }
                if(!(line_flags.overflow = char_counter >= (LINE_BUFFER_SIZE - 1)))
 8012682:	4b38      	ldr	r3, [pc, #224]	; (8012764 <protocol_main_loop+0x6a8>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	2bff      	cmp	r3, #255	; 0xff
 8012688:	bf8c      	ite	hi
 801268a:	2301      	movhi	r3, #1
 801268c:	2300      	movls	r3, #0
 801268e:	b2da      	uxtb	r2, r3
 8012690:	793b      	ldrb	r3, [r7, #4]
 8012692:	f362 0300 	bfi	r3, r2, #0, #1
 8012696:	713b      	strb	r3, [r7, #4]
 8012698:	793b      	ldrb	r3, [r7, #4]
 801269a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d108      	bne.n	80126b6 <protocol_main_loop+0x5fa>
                    line[char_counter++] = c;
 80126a4:	4b2f      	ldr	r3, [pc, #188]	; (8012764 <protocol_main_loop+0x6a8>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	1c5a      	adds	r2, r3, #1
 80126aa:	492e      	ldr	r1, [pc, #184]	; (8012764 <protocol_main_loop+0x6a8>)
 80126ac:	600a      	str	r2, [r1, #0]
 80126ae:	89ba      	ldrh	r2, [r7, #12]
 80126b0:	b2d1      	uxtb	r1, r2
 80126b2:	4a2d      	ldr	r2, [pc, #180]	; (8012768 <protocol_main_loop+0x6ac>)
 80126b4:	54d1      	strb	r1, [r2, r3]
        while((c = hal.stream.read()) != SERIAL_NO_DATA) {
 80126b6:	4b2e      	ldr	r3, [pc, #184]	; (8012770 <protocol_main_loop+0x6b4>)
 80126b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80126bc:	4798      	blx	r3
 80126be:	4603      	mov	r3, r0
 80126c0:	81bb      	strh	r3, [r7, #12]
 80126c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80126c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ca:	f47f ae21 	bne.w	8012310 <protocol_main_loop+0x254>
            }
        }

        // Handle extra command (internal stream)
        if(xcommand[0] != '\0') {
 80126ce:	4b29      	ldr	r3, [pc, #164]	; (8012774 <protocol_main_loop+0x6b8>)
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d01a      	beq.n	801270c <protocol_main_loop+0x650>

            if (xcommand[0] == '$') // Grbl '$' system command
 80126d6:	4b27      	ldr	r3, [pc, #156]	; (8012774 <protocol_main_loop+0x6b8>)
 80126d8:	781b      	ldrb	r3, [r3, #0]
 80126da:	2b24      	cmp	r3, #36	; 0x24
 80126dc:	d103      	bne.n	80126e6 <protocol_main_loop+0x62a>
                system_execute_line(xcommand);
 80126de:	4825      	ldr	r0, [pc, #148]	; (8012774 <protocol_main_loop+0x6b8>)
 80126e0:	f00d ff72 	bl	80205c8 <system_execute_line>
 80126e4:	e00f      	b.n	8012706 <protocol_main_loop+0x64a>
            else if (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_JOG)) // Everything else is gcode. Block if in alarm, eStop or jog state.
 80126e6:	f00a fb1b 	bl	801cd20 <state_get>
 80126ea:	4602      	mov	r2, r0
 80126ec:	f240 1321 	movw	r3, #289	; 0x121
 80126f0:	4013      	ands	r3, r2
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d004      	beq.n	8012700 <protocol_main_loop+0x644>
                grbl.report.status_message(Status_SystemGClock);
 80126f6:	4b20      	ldr	r3, [pc, #128]	; (8012778 <protocol_main_loop+0x6bc>)
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	2009      	movs	r0, #9
 80126fc:	4798      	blx	r3
 80126fe:	e002      	b.n	8012706 <protocol_main_loop+0x64a>
            else // Parse and execute g-code block.
                gc_execute_block(xcommand);
 8012700:	481c      	ldr	r0, [pc, #112]	; (8012774 <protocol_main_loop+0x6b8>)
 8012702:	f7f3 fb0d 	bl	8005d20 <gc_execute_block>

            xcommand[0] = '\0';
 8012706:	4b1b      	ldr	r3, [pc, #108]	; (8012774 <protocol_main_loop+0x6b8>)
 8012708:	2200      	movs	r2, #0
 801270a:	701a      	strb	r2, [r3, #0]
        }

        // If there are no more characters in the input stream buffer to be processed and executed,
        // this indicates that g-code streaming has either filled the planner buffer or has
        // completed. In either case, auto-cycle start, if enabled, any queued moves.
        protocol_auto_cycle_start();
 801270c:	f000 f858 	bl	80127c0 <protocol_auto_cycle_start>

        if(!protocol_execute_realtime() && sys.abort) // Runtime command check point.
 8012710:	f000 f868 	bl	80127e4 <protocol_execute_realtime>
 8012714:	4603      	mov	r3, r0
 8012716:	f083 0301 	eor.w	r3, r3, #1
 801271a:	b2db      	uxtb	r3, r3
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00e      	beq.n	801273e <protocol_main_loop+0x682>
 8012720:	4b16      	ldr	r3, [pc, #88]	; (801277c <protocol_main_loop+0x6c0>)
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00a      	beq.n	801273e <protocol_main_loop+0x682>
            return !sys.flags.exit;                   // Bail to main() program loop to reset system.
 8012728:	4b14      	ldr	r3, [pc, #80]	; (801277c <protocol_main_loop+0x6c0>)
 801272a:	7d9b      	ldrb	r3, [r3, #22]
 801272c:	f003 0308 	and.w	r3, r3, #8
 8012730:	b2db      	uxtb	r3, r3
 8012732:	2b00      	cmp	r3, #0
 8012734:	bf0c      	ite	eq
 8012736:	2301      	moveq	r3, #1
 8012738:	2300      	movne	r3, #0
 801273a:	b2db      	uxtb	r3, r3
 801273c:	e00d      	b.n	801275a <protocol_main_loop+0x69e>

        sys.cancel = false;
 801273e:	4b0f      	ldr	r3, [pc, #60]	; (801277c <protocol_main_loop+0x6c0>)
 8012740:	2200      	movs	r2, #0
 8012742:	705a      	strb	r2, [r3, #1]

        // Check for sleep conditions and execute auto-park, if timeout duration elapses.
        if(settings.flags.sleep_enable)
 8012744:	4b0e      	ldr	r3, [pc, #56]	; (8012780 <protocol_main_loop+0x6c4>)
 8012746:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801274a:	f003 0308 	and.w	r3, r3, #8
 801274e:	b2db      	uxtb	r3, r3
 8012750:	2b00      	cmp	r3, #0
 8012752:	d0b0      	beq.n	80126b6 <protocol_main_loop+0x5fa>
            sleep_check();
 8012754:	f008 ff8a 	bl	801b66c <sleep_check>
        while((c = hal.stream.read()) != SERIAL_NO_DATA) {
 8012758:	e7ad      	b.n	80126b6 <protocol_main_loop+0x5fa>
    }
}
 801275a:	4618      	mov	r0, r3
 801275c:	3710      	adds	r7, #16
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	20001a40 	.word	0x20001a40
 8012768:	20001a44 	.word	0x20001a44
 801276c:	20001c49 	.word	0x20001c49
 8012770:	200016a0 	.word	0x200016a0
 8012774:	20001b48 	.word	0x20001b48
 8012778:	200015b8 	.word	0x200015b8
 801277c:	20001520 	.word	0x20001520
 8012780:	20001cf0 	.word	0x20001cf0

08012784 <protocol_buffer_synchronize>:


// Block until all buffered steps are executed or in a cycle state. Works with feed hold
// during a synchronize call, if it should happen. Also, waits for clean cycle end.
bool protocol_buffer_synchronize (void)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
    bool ok = true;
 801278a:	2301      	movs	r3, #1
 801278c:	71fb      	strb	r3, [r7, #7]
    // If system is queued, ensure cycle resumes if the auto start flag is present.
    protocol_auto_cycle_start();
 801278e:	f000 f817 	bl	80127c0 <protocol_auto_cycle_start>
    while ((ok = protocol_execute_realtime()) && (plan_get_current_block() || state_get() == STATE_CYCLE));
 8012792:	bf00      	nop
 8012794:	f000 f826 	bl	80127e4 <protocol_execute_realtime>
 8012798:	4603      	mov	r3, r0
 801279a:	71fb      	strb	r3, [r7, #7]
 801279c:	79fb      	ldrb	r3, [r7, #7]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d009      	beq.n	80127b6 <protocol_buffer_synchronize+0x32>
 80127a2:	f7fe fdf7 	bl	8011394 <plan_get_current_block>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d1f3      	bne.n	8012794 <protocol_buffer_synchronize+0x10>
 80127ac:	f00a fab8 	bl	801cd20 <state_get>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b08      	cmp	r3, #8
 80127b4:	d0ee      	beq.n	8012794 <protocol_buffer_synchronize+0x10>

    return ok;
 80127b6:	79fb      	ldrb	r3, [r7, #7]
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3708      	adds	r7, #8
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start (void)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	af00      	add	r7, sp, #0
    if (plan_get_current_block() != NULL) // Check if there are any blocks in the buffer.
 80127c4:	f7fe fde6 	bl	8011394 <plan_get_current_block>
 80127c8:	4603      	mov	r3, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d004      	beq.n	80127d8 <protocol_auto_cycle_start+0x18>
        system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80127ce:	4b03      	ldr	r3, [pc, #12]	; (80127dc <protocol_auto_cycle_start+0x1c>)
 80127d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127d2:	2102      	movs	r1, #2
 80127d4:	4802      	ldr	r0, [pc, #8]	; (80127e0 <protocol_auto_cycle_start+0x20>)
 80127d6:	4798      	blx	r3
}
 80127d8:	bf00      	nop
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	200016a0 	.word	0x200016a0
 80127e0:	20001568 	.word	0x20001568

080127e4 <protocol_execute_realtime>:
// the same task, such as the planner recalculating the buffer upon a feedhold or overrides.
// NOTE: The sys_rt_exec_state variable flags are set by any process, step or input stream events, pinouts,
// limit switches, or the main program.
// Returns false if aborted
bool protocol_execute_realtime (void)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
    if(protocol_exec_rt_system()) {
 80127ea:	f000 f8d5 	bl	8012998 <protocol_exec_rt_system>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d020      	beq.n	8012836 <protocol_execute_realtime+0x52>

        sys_state_t state = state_get();
 80127f4:	f00a fa94 	bl	801cd20 <state_get>
 80127f8:	6078      	str	r0, [r7, #4]

        if(sys.suspend)
 80127fa:	4b1b      	ldr	r3, [pc, #108]	; (8012868 <protocol_execute_realtime+0x84>)
 80127fc:	789b      	ldrb	r3, [r3, #2]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d002      	beq.n	8012808 <protocol_execute_realtime+0x24>
            protocol_exec_rt_suspend(state);
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f000 fc6c 	bl	80130e0 <protocol_exec_rt_suspend>

#if NVSDATA_BUFFER_ENABLE
        if((state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))) && settings_dirty.is_dirty && !gc_state.file_run)
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d005      	beq.n	801281a <protocol_execute_realtime+0x36>
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	f240 1301 	movw	r3, #257	; 0x101
 8012814:	4013      	ands	r3, r2
 8012816:	2b00      	cmp	r3, #0
 8012818:	d00d      	beq.n	8012836 <protocol_execute_realtime+0x52>
 801281a:	4b14      	ldr	r3, [pc, #80]	; (801286c <protocol_execute_realtime+0x88>)
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d009      	beq.n	8012836 <protocol_execute_realtime+0x52>
 8012822:	4b13      	ldr	r3, [pc, #76]	; (8012870 <protocol_execute_realtime+0x8c>)
 8012824:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012828:	f083 0301 	eor.w	r3, r3, #1
 801282c:	b2db      	uxtb	r3, r3
 801282e:	2b00      	cmp	r3, #0
 8012830:	d001      	beq.n	8012836 <protocol_execute_realtime+0x52>
            nvs_buffer_sync_physical();
 8012832:	f7fe f949 	bl	8010ac8 <nvs_buffer_sync_physical>
#endif
    }

    return !ABORTED;
 8012836:	4b0c      	ldr	r3, [pc, #48]	; (8012868 <protocol_execute_realtime+0x84>)
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	f083 0301 	eor.w	r3, r3, #1
 801283e:	b2db      	uxtb	r3, r3
 8012840:	2b00      	cmp	r3, #0
 8012842:	d008      	beq.n	8012856 <protocol_execute_realtime+0x72>
 8012844:	4b08      	ldr	r3, [pc, #32]	; (8012868 <protocol_execute_realtime+0x84>)
 8012846:	785b      	ldrb	r3, [r3, #1]
 8012848:	f083 0301 	eor.w	r3, r3, #1
 801284c:	b2db      	uxtb	r3, r3
 801284e:	2b00      	cmp	r3, #0
 8012850:	d001      	beq.n	8012856 <protocol_execute_realtime+0x72>
 8012852:	2301      	movs	r3, #1
 8012854:	e000      	b.n	8012858 <protocol_execute_realtime+0x74>
 8012856:	2300      	movs	r3, #0
 8012858:	f003 0301 	and.w	r3, r3, #1
 801285c:	b2db      	uxtb	r3, r3
}
 801285e:	4618      	mov	r0, r3
 8012860:	3708      	adds	r7, #8
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	20001520 	.word	0x20001520
 801286c:	200019bc 	.word	0x200019bc
 8012870:	2000137c 	.word	0x2000137c

08012874 <protocol_poll_cmd>:

static void protocol_poll_cmd (void)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
    int16_t c;

    if((c = hal.stream.read()) != SERIAL_NO_DATA) {
 801287a:	4b41      	ldr	r3, [pc, #260]	; (8012980 <protocol_poll_cmd+0x10c>)
 801287c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012880:	4798      	blx	r3
 8012882:	4603      	mov	r3, r0
 8012884:	80fb      	strh	r3, [r7, #6]
 8012886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801288e:	d072      	beq.n	8012976 <protocol_poll_cmd+0x102>

        if ((c == '\n') || (c == '\r')) { // End of line reached
 8012890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012894:	2b0a      	cmp	r3, #10
 8012896:	d003      	beq.n	80128a0 <protocol_poll_cmd+0x2c>
 8012898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801289c:	2b0d      	cmp	r3, #13
 801289e:	d125      	bne.n	80128ec <protocol_poll_cmd+0x78>
            line[char_counter] = '\0';
 80128a0:	4b38      	ldr	r3, [pc, #224]	; (8012984 <protocol_poll_cmd+0x110>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	4a38      	ldr	r2, [pc, #224]	; (8012988 <protocol_poll_cmd+0x114>)
 80128a6:	2100      	movs	r1, #0
 80128a8:	54d1      	strb	r1, [r2, r3]
            gc_state.last_error = *line == '\0' ? Status_OK : (*line == '$' ? system_execute_line(line) : Status_SystemGClock);
 80128aa:	4b37      	ldr	r3, [pc, #220]	; (8012988 <protocol_poll_cmd+0x114>)
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d00a      	beq.n	80128c8 <protocol_poll_cmd+0x54>
 80128b2:	4b35      	ldr	r3, [pc, #212]	; (8012988 <protocol_poll_cmd+0x114>)
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	2b24      	cmp	r3, #36	; 0x24
 80128b8:	d104      	bne.n	80128c4 <protocol_poll_cmd+0x50>
 80128ba:	4833      	ldr	r0, [pc, #204]	; (8012988 <protocol_poll_cmd+0x114>)
 80128bc:	f00d fe84 	bl	80205c8 <system_execute_line>
 80128c0:	4603      	mov	r3, r0
 80128c2:	e002      	b.n	80128ca <protocol_poll_cmd+0x56>
 80128c4:	2309      	movs	r3, #9
 80128c6:	e000      	b.n	80128ca <protocol_poll_cmd+0x56>
 80128c8:	2300      	movs	r3, #0
 80128ca:	4a30      	ldr	r2, [pc, #192]	; (801298c <protocol_poll_cmd+0x118>)
 80128cc:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
            char_counter = 0;
 80128d0:	4b2c      	ldr	r3, [pc, #176]	; (8012984 <protocol_poll_cmd+0x110>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	601a      	str	r2, [r3, #0]
            *line = '\0';
 80128d6:	4b2c      	ldr	r3, [pc, #176]	; (8012988 <protocol_poll_cmd+0x114>)
 80128d8:	2200      	movs	r2, #0
 80128da:	701a      	strb	r2, [r3, #0]
            grbl.report.status_message(gc_state.last_error);
 80128dc:	4b2c      	ldr	r3, [pc, #176]	; (8012990 <protocol_poll_cmd+0x11c>)
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	4a2a      	ldr	r2, [pc, #168]	; (801298c <protocol_poll_cmd+0x118>)
 80128e2:	f892 2079 	ldrb.w	r2, [r2, #121]	; 0x79
 80128e6:	4610      	mov	r0, r2
 80128e8:	4798      	blx	r3
 80128ea:	e034      	b.n	8012956 <protocol_poll_cmd+0xe2>
        } else if(c == ASCII_DEL || c == ASCII_BS) {
 80128ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128f0:	2b7f      	cmp	r3, #127	; 0x7f
 80128f2:	d003      	beq.n	80128fc <protocol_poll_cmd+0x88>
 80128f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128f8:	2b08      	cmp	r3, #8
 80128fa:	d10e      	bne.n	801291a <protocol_poll_cmd+0xa6>
            if(char_counter)
 80128fc:	4b21      	ldr	r3, [pc, #132]	; (8012984 <protocol_poll_cmd+0x110>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d028      	beq.n	8012956 <protocol_poll_cmd+0xe2>
                line[--char_counter] = '\0';
 8012904:	4b1f      	ldr	r3, [pc, #124]	; (8012984 <protocol_poll_cmd+0x110>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	3b01      	subs	r3, #1
 801290a:	4a1e      	ldr	r2, [pc, #120]	; (8012984 <protocol_poll_cmd+0x110>)
 801290c:	6013      	str	r3, [r2, #0]
 801290e:	4b1d      	ldr	r3, [pc, #116]	; (8012984 <protocol_poll_cmd+0x110>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	4a1d      	ldr	r2, [pc, #116]	; (8012988 <protocol_poll_cmd+0x114>)
 8012914:	2100      	movs	r1, #0
 8012916:	54d1      	strb	r1, [r2, r3]
            if(char_counter)
 8012918:	e01d      	b.n	8012956 <protocol_poll_cmd+0xe2>
        } else if(char_counter == 0 ? c != ' ' : char_counter < (LINE_BUFFER_SIZE - 1))
 801291a:	4b1a      	ldr	r3, [pc, #104]	; (8012984 <protocol_poll_cmd+0x110>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d107      	bne.n	8012932 <protocol_poll_cmd+0xbe>
 8012922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012926:	2b20      	cmp	r3, #32
 8012928:	bf14      	ite	ne
 801292a:	2301      	movne	r3, #1
 801292c:	2300      	moveq	r3, #0
 801292e:	b2db      	uxtb	r3, r3
 8012930:	e006      	b.n	8012940 <protocol_poll_cmd+0xcc>
 8012932:	4b14      	ldr	r3, [pc, #80]	; (8012984 <protocol_poll_cmd+0x110>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2bff      	cmp	r3, #255	; 0xff
 8012938:	bf94      	ite	ls
 801293a:	2301      	movls	r3, #1
 801293c:	2300      	movhi	r3, #0
 801293e:	b2db      	uxtb	r3, r3
 8012940:	2b00      	cmp	r3, #0
 8012942:	d008      	beq.n	8012956 <protocol_poll_cmd+0xe2>
            line[char_counter++] = c;
 8012944:	4b0f      	ldr	r3, [pc, #60]	; (8012984 <protocol_poll_cmd+0x110>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	1c5a      	adds	r2, r3, #1
 801294a:	490e      	ldr	r1, [pc, #56]	; (8012984 <protocol_poll_cmd+0x110>)
 801294c:	600a      	str	r2, [r1, #0]
 801294e:	88fa      	ldrh	r2, [r7, #6]
 8012950:	b2d1      	uxtb	r1, r2
 8012952:	4a0d      	ldr	r2, [pc, #52]	; (8012988 <protocol_poll_cmd+0x114>)
 8012954:	54d1      	strb	r1, [r2, r3]

        keep_rt_commands = char_counter > 0 && *line == '$';
 8012956:	4b0b      	ldr	r3, [pc, #44]	; (8012984 <protocol_poll_cmd+0x110>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d005      	beq.n	801296a <protocol_poll_cmd+0xf6>
 801295e:	4b0a      	ldr	r3, [pc, #40]	; (8012988 <protocol_poll_cmd+0x114>)
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	2b24      	cmp	r3, #36	; 0x24
 8012964:	d101      	bne.n	801296a <protocol_poll_cmd+0xf6>
 8012966:	2301      	movs	r3, #1
 8012968:	e000      	b.n	801296c <protocol_poll_cmd+0xf8>
 801296a:	2300      	movs	r3, #0
 801296c:	f003 0301 	and.w	r3, r3, #1
 8012970:	b2da      	uxtb	r2, r3
 8012972:	4b08      	ldr	r3, [pc, #32]	; (8012994 <protocol_poll_cmd+0x120>)
 8012974:	701a      	strb	r2, [r3, #0]
    }
}
 8012976:	bf00      	nop
 8012978:	3708      	adds	r7, #8
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	200016a0 	.word	0x200016a0
 8012984:	20001a40 	.word	0x20001a40
 8012988:	20001a44 	.word	0x20001a44
 801298c:	2000137c 	.word	0x2000137c
 8012990:	200015b8 	.word	0x200015b8
 8012994:	20001c49 	.word	0x20001c49

08012998 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
bool protocol_exec_rt_system (void)
{
 8012998:	b590      	push	{r4, r7, lr}
 801299a:	b089      	sub	sp, #36	; 0x24
 801299c:	af00      	add	r7, sp, #0
    rt_exec_t rt_exec;
    bool killed = false;
 801299e:	2300      	movs	r3, #0
 80129a0:	76fb      	strb	r3, [r7, #27]

    if (sys.rt_exec_alarm && (rt_exec = system_clear_exec_alarm())) { // Enter only if any bit flag is true
 80129a2:	4b8b      	ldr	r3, [pc, #556]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 80129a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	f000 8094 	beq.w	8012ad4 <protocol_exec_rt_system+0x13c>
 80129ac:	4b89      	ldr	r3, [pc, #548]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 80129ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129b0:	2100      	movs	r1, #0
 80129b2:	4889      	ldr	r0, [pc, #548]	; (8012bd8 <protocol_exec_rt_system+0x240>)
 80129b4:	4798      	blx	r3
 80129b6:	61f8      	str	r0, [r7, #28]
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f000 808a 	beq.w	8012ad4 <protocol_exec_rt_system+0x13c>

        if((sys.reset_pending = !!(sys.rt_exec_state & EXEC_RESET))) {
 80129c0:	4b83      	ldr	r3, [pc, #524]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 80129c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129c4:	f003 0320 	and.w	r3, r3, #32
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	bf14      	ite	ne
 80129cc:	2301      	movne	r3, #1
 80129ce:	2300      	moveq	r3, #0
 80129d0:	b2da      	uxtb	r2, r3
 80129d2:	4b7f      	ldr	r3, [pc, #508]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 80129d4:	711a      	strb	r2, [r3, #4]
 80129d6:	4b7e      	ldr	r3, [pc, #504]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 80129d8:	791b      	ldrb	r3, [r3, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d008      	beq.n	80129f0 <protocol_exec_rt_system+0x58>
            // Kill spindle and coolant.
            killed = true;
 80129de:	2301      	movs	r3, #1
 80129e0:	76fb      	strb	r3, [r7, #27]
            spindle_all_off();
 80129e2:	f009 fdfd 	bl	801c5e0 <spindle_all_off>
            hal.coolant.set_state((coolant_state_t){0});
 80129e6:	4b7b      	ldr	r3, [pc, #492]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 80129e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129ea:	2200      	movs	r2, #0
 80129ec:	4610      	mov	r0, r2
 80129ee:	4798      	blx	r3
        }

        // System alarm. Everything has shutdown by something that has gone severely wrong. Report
        // the source of the error to the user. If critical, Grbl disables by entering an infinite
        // loop until system reset/abort.
        system_raise_alarm((alarm_code_t)rt_exec);
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	4618      	mov	r0, r3
 80129f6:	f00e fd79 	bl	80214ec <system_raise_alarm>

        if(killed) // Tell driver/plugins about reset.
 80129fa:	7efb      	ldrb	r3, [r7, #27]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d003      	beq.n	8012a08 <protocol_exec_rt_system+0x70>
            hal.driver_reset();
 8012a00:	4b74      	ldr	r3, [pc, #464]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012a02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8012a06:	4798      	blx	r3

        // Halt everything upon a critical event flag. Currently hard and soft limits flag this.
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	b2db      	uxtb	r3, r3
                                  (alarm_code_t)rt_exec == Alarm_SoftLimit ||
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d00b      	beq.n	8012a28 <protocol_exec_rt_system+0x90>
                                  (alarm_code_t)rt_exec == Alarm_SoftLimit ||
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	b2db      	uxtb	r3, r3
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8012a14:	2b02      	cmp	r3, #2
 8012a16:	d007      	beq.n	8012a28 <protocol_exec_rt_system+0x90>
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	b2db      	uxtb	r3, r3
                                  (alarm_code_t)rt_exec == Alarm_SoftLimit ||
 8012a1c:	2b0a      	cmp	r3, #10
 8012a1e:	d003      	beq.n	8012a28 <protocol_exec_rt_system+0x90>
                                    (alarm_code_t)rt_exec == Alarm_MotorFault)) {
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	b2db      	uxtb	r3, r3
                                   (alarm_code_t)rt_exec == Alarm_EStop ||
 8012a24:	2b11      	cmp	r3, #17
 8012a26:	d101      	bne.n	8012a2c <protocol_exec_rt_system+0x94>
 8012a28:	2301      	movs	r3, #1
 8012a2a:	e000      	b.n	8012a2e <protocol_exec_rt_system+0x96>
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	f003 0301 	and.w	r3, r3, #1
 8012a32:	b2da      	uxtb	r2, r3
        if((sys.blocking_event = (alarm_code_t)rt_exec == Alarm_HardLimit ||
 8012a34:	4b66      	ldr	r3, [pc, #408]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012a36:	715a      	strb	r2, [r3, #5]
 8012a38:	4b65      	ldr	r3, [pc, #404]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012a3a:	795b      	ldrb	r3, [r3, #5]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d049      	beq.n	8012ad4 <protocol_exec_rt_system+0x13c>

            system_set_exec_alarm(rt_exec);
 8012a40:	4b64      	ldr	r3, [pc, #400]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a44:	69f9      	ldr	r1, [r7, #28]
 8012a46:	4864      	ldr	r0, [pc, #400]	; (8012bd8 <protocol_exec_rt_system+0x240>)
 8012a48:	4798      	blx	r3

            switch((alarm_code_t)rt_exec) {
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	b2db      	uxtb	r3, r3
 8012a4e:	2b0a      	cmp	r3, #10
 8012a50:	d002      	beq.n	8012a58 <protocol_exec_rt_system+0xc0>
 8012a52:	2b11      	cmp	r3, #17
 8012a54:	d005      	beq.n	8012a62 <protocol_exec_rt_system+0xca>
 8012a56:	e009      	b.n	8012a6c <protocol_exec_rt_system+0xd4>

                case Alarm_EStop:
                    grbl.report.feedback_message(Message_EStop);
 8012a58:	4b60      	ldr	r3, [pc, #384]	; (8012bdc <protocol_exec_rt_system+0x244>)
 8012a5a:	68db      	ldr	r3, [r3, #12]
 8012a5c:	200c      	movs	r0, #12
 8012a5e:	4798      	blx	r3
                    break;
 8012a60:	e009      	b.n	8012a76 <protocol_exec_rt_system+0xde>

                case Alarm_MotorFault:
                    grbl.report.feedback_message(Message_MotorFault);
 8012a62:	4b5e      	ldr	r3, [pc, #376]	; (8012bdc <protocol_exec_rt_system+0x244>)
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	2010      	movs	r0, #16
 8012a68:	4798      	blx	r3
                    break;
 8012a6a:	e004      	b.n	8012a76 <protocol_exec_rt_system+0xde>

                default:
                    grbl.report.feedback_message(Message_CriticalEvent);
 8012a6c:	4b5b      	ldr	r3, [pc, #364]	; (8012bdc <protocol_exec_rt_system+0x244>)
 8012a6e:	68db      	ldr	r3, [r3, #12]
 8012a70:	2001      	movs	r0, #1
 8012a72:	4798      	blx	r3
                    break;
 8012a74:	bf00      	nop
            }

            system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8012a76:	4b57      	ldr	r3, [pc, #348]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7a:	2120      	movs	r1, #32
 8012a7c:	4858      	ldr	r0, [pc, #352]	; (8012be0 <protocol_exec_rt_system+0x248>)
 8012a7e:	4798      	blx	r3

            *line = '\0';
 8012a80:	4b58      	ldr	r3, [pc, #352]	; (8012be4 <protocol_exec_rt_system+0x24c>)
 8012a82:	2200      	movs	r2, #0
 8012a84:	701a      	strb	r2, [r3, #0]
            char_counter = 0;
 8012a86:	4b58      	ldr	r3, [pc, #352]	; (8012be8 <protocol_exec_rt_system+0x250>)
 8012a88:	2200      	movs	r2, #0
 8012a8a:	601a      	str	r2, [r3, #0]
            hal.stream.reset_read_buffer();
 8012a8c:	4b51      	ldr	r3, [pc, #324]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012a8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012a92:	4798      	blx	r3

            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8012a94:	e013      	b.n	8012abe <protocol_exec_rt_system+0x126>
                // cycles. Hard limits typically occur while unattended or not paying attention. Gives
                // the user and a GUI time to do what is needed before resetting, like killing the
                // incoming stream. The same could be said about soft limits. While the position is not
                // lost, continued streaming could cause a serious crash if by chance it gets executed.

                if(bit_istrue(sys.rt_exec_state, EXEC_STATUS_REPORT)) {
 8012a96:	4b4e      	ldr	r3, [pc, #312]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a9a:	f003 0301 	and.w	r3, r3, #1
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d006      	beq.n	8012ab0 <protocol_exec_rt_system+0x118>
                    system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8012aa2:	4b4c      	ldr	r3, [pc, #304]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aa6:	2101      	movs	r1, #1
 8012aa8:	484d      	ldr	r0, [pc, #308]	; (8012be0 <protocol_exec_rt_system+0x248>)
 8012aaa:	4798      	blx	r3
                    report_realtime_status();
 8012aac:	f002 ffa0 	bl	80159f0 <report_realtime_status>
                }

                protocol_poll_cmd();
 8012ab0:	f7ff fee0 	bl	8012874 <protocol_poll_cmd>
                grbl.on_execute_realtime(STATE_ESTOP);
 8012ab4:	4b49      	ldr	r3, [pc, #292]	; (8012bdc <protocol_exec_rt_system+0x244>)
 8012ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ab8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012abc:	4798      	blx	r3
            while (bit_isfalse(sys.rt_exec_state, EXEC_RESET)) {
 8012abe:	4b44      	ldr	r3, [pc, #272]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ac2:	f003 0320 	and.w	r3, r3, #32
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d0e5      	beq.n	8012a96 <protocol_exec_rt_system+0xfe>
            }

            system_clear_exec_alarm(); // Clear alarm
 8012aca:	4b42      	ldr	r3, [pc, #264]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ace:	2100      	movs	r1, #0
 8012ad0:	4841      	ldr	r0, [pc, #260]	; (8012bd8 <protocol_exec_rt_system+0x240>)
 8012ad2:	4798      	blx	r3
        }
    }

    if (sys.rt_exec_state && (rt_exec = system_clear_exec_states())) { // Get and clear volatile sys.rt_exec_state atomically.
 8012ad4:	4b3e      	ldr	r3, [pc, #248]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 814e 	beq.w	8012d7a <protocol_exec_rt_system+0x3e2>
 8012ade:	4b3d      	ldr	r3, [pc, #244]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	483e      	ldr	r0, [pc, #248]	; (8012be0 <protocol_exec_rt_system+0x248>)
 8012ae6:	4798      	blx	r3
 8012ae8:	61f8      	str	r0, [r7, #28]
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f000 8144 	beq.w	8012d7a <protocol_exec_rt_system+0x3e2>

        // Execute system abort.
        if((sys.reset_pending = !!(rt_exec & EXEC_RESET))) {
 8012af2:	69fb      	ldr	r3, [r7, #28]
 8012af4:	f003 0320 	and.w	r3, r3, #32
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	bf14      	ite	ne
 8012afc:	2301      	movne	r3, #1
 8012afe:	2300      	moveq	r3, #0
 8012b00:	b2da      	uxtb	r2, r3
 8012b02:	4b33      	ldr	r3, [pc, #204]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012b04:	711a      	strb	r2, [r3, #4]
 8012b06:	4b32      	ldr	r3, [pc, #200]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012b08:	791b      	ldrb	r3, [r3, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d06e      	beq.n	8012bec <protocol_exec_rt_system+0x254>

            if(!killed) {
 8012b0e:	7efb      	ldrb	r3, [r7, #27]
 8012b10:	f083 0301 	eor.w	r3, r3, #1
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d006      	beq.n	8012b28 <protocol_exec_rt_system+0x190>
                // Kill spindle and coolant.
                spindle_all_off();
 8012b1a:	f009 fd61 	bl	801c5e0 <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0});
 8012b1e:	4b2d      	ldr	r3, [pc, #180]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b22:	2200      	movs	r2, #0
 8012b24:	4610      	mov	r0, r2
 8012b26:	4798      	blx	r3
            }

            // Only place sys.abort is set true, when E-stop is not asserted.
            if(!(sys.abort = !hal.control.get_state().e_stop)) {
 8012b28:	4b2a      	ldr	r3, [pc, #168]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b2c:	4798      	blx	r3
 8012b2e:	4603      	mov	r3, r0
 8012b30:	b2db      	uxtb	r3, r3
 8012b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	bf0c      	ite	eq
 8012b3c:	2301      	moveq	r3, #1
 8012b3e:	2300      	movne	r3, #0
 8012b40:	b2da      	uxtb	r2, r3
 8012b42:	4b23      	ldr	r3, [pc, #140]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012b44:	701a      	strb	r2, [r3, #0]
 8012b46:	4b22      	ldr	r3, [pc, #136]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	f083 0301 	eor.w	r3, r3, #1
 8012b4e:	b2db      	uxtb	r3, r3
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d00b      	beq.n	8012b6c <protocol_exec_rt_system+0x1d4>
                hal.stream.reset_read_buffer();
 8012b54:	4b1f      	ldr	r3, [pc, #124]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012b56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012b5a:	4798      	blx	r3
                system_raise_alarm(Alarm_EStop);
 8012b5c:	200a      	movs	r0, #10
 8012b5e:	f00e fcc5 	bl	80214ec <system_raise_alarm>
                grbl.report.feedback_message(Message_EStop);
 8012b62:	4b1e      	ldr	r3, [pc, #120]	; (8012bdc <protocol_exec_rt_system+0x244>)
 8012b64:	68db      	ldr	r3, [r3, #12]
 8012b66:	200c      	movs	r0, #12
 8012b68:	4798      	blx	r3
 8012b6a:	e019      	b.n	8012ba0 <protocol_exec_rt_system+0x208>
            } else if(hal.control.get_state().motor_fault) {
 8012b6c:	4b19      	ldr	r3, [pc, #100]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b70:	4798      	blx	r3
 8012b72:	4603      	mov	r3, r0
 8012b74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	f003 0301 	and.w	r3, r3, #1
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d00d      	beq.n	8012ba0 <protocol_exec_rt_system+0x208>
                sys.abort = false;
 8012b84:	4b12      	ldr	r3, [pc, #72]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012b86:	2200      	movs	r2, #0
 8012b88:	701a      	strb	r2, [r3, #0]
                hal.stream.reset_read_buffer();
 8012b8a:	4b12      	ldr	r3, [pc, #72]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012b8c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012b90:	4798      	blx	r3
                system_raise_alarm(Alarm_MotorFault);
 8012b92:	2011      	movs	r0, #17
 8012b94:	f00e fcaa 	bl	80214ec <system_raise_alarm>
                grbl.report.feedback_message(Message_MotorFault);
 8012b98:	4b10      	ldr	r3, [pc, #64]	; (8012bdc <protocol_exec_rt_system+0x244>)
 8012b9a:	68db      	ldr	r3, [r3, #12]
 8012b9c:	2010      	movs	r0, #16
 8012b9e:	4798      	blx	r3
            }

            if(!killed) // Tell driver/plugins about reset.
 8012ba0:	7efb      	ldrb	r3, [r7, #27]
 8012ba2:	f083 0301 	eor.w	r3, r3, #1
 8012ba6:	b2db      	uxtb	r3, r3
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d003      	beq.n	8012bb4 <protocol_exec_rt_system+0x21c>
                hal.driver_reset();
 8012bac:	4b09      	ldr	r3, [pc, #36]	; (8012bd4 <protocol_exec_rt_system+0x23c>)
 8012bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8012bb2:	4798      	blx	r3

            return !sys.abort; // Nothing else to do but exit.
 8012bb4:	4b06      	ldr	r3, [pc, #24]	; (8012bd0 <protocol_exec_rt_system+0x238>)
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	bf14      	ite	ne
 8012bbc:	2301      	movne	r3, #1
 8012bbe:	2300      	moveq	r3, #0
 8012bc0:	b2db      	uxtb	r3, r3
 8012bc2:	f083 0301 	eor.w	r3, r3, #1
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	f003 0301 	and.w	r3, r3, #1
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	e27a      	b.n	80130c6 <protocol_exec_rt_system+0x72e>
 8012bd0:	20001520 	.word	0x20001520
 8012bd4:	200016a0 	.word	0x200016a0
 8012bd8:	2000156c 	.word	0x2000156c
 8012bdc:	200015b8 	.word	0x200015b8
 8012be0:	20001568 	.word	0x20001568
 8012be4:	20001a44 	.word	0x20001a44
 8012be8:	20001a40 	.word	0x20001a40
        }

        if(rt_exec & EXEC_STOP) { // Experimental for now, must be verified. Do NOT move to interrupt context!
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	f003 0310 	and.w	r3, r3, #16
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d074      	beq.n	8012ce0 <protocol_exec_rt_system+0x348>

            sys.cancel = true;
 8012bf6:	4bad      	ldr	r3, [pc, #692]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	705a      	strb	r2, [r3, #1]
            sys.step_control.flags = 0;
 8012bfc:	4bab      	ldr	r3, [pc, #684]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	761a      	strb	r2, [r3, #24]
            sys.flags.feed_hold_pending = Off;
 8012c02:	4aaa      	ldr	r2, [pc, #680]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012c04:	7d93      	ldrb	r3, [r2, #22]
 8012c06:	f36f 1345 	bfc	r3, #5, #1
 8012c0a:	7593      	strb	r3, [r2, #22]
            sys.override_delay.flags = 0;
 8012c0c:	4ba7      	ldr	r3, [pc, #668]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012c0e:	2200      	movs	r2, #0
 8012c10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            if(sys.override.control.sync)
 8012c14:	4ba5      	ldr	r3, [pc, #660]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012c16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012c1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012c1e:	b2db      	uxtb	r3, r3
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d004      	beq.n	8012c2e <protocol_exec_rt_system+0x296>
                sys.override.control = gc_state.modal.override_ctrl;
 8012c24:	4aa1      	ldr	r2, [pc, #644]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012c26:	4ba2      	ldr	r3, [pc, #648]	; (8012eb0 <protocol_exec_rt_system+0x518>)
 8012c28:	7f1b      	ldrb	r3, [r3, #28]
 8012c2a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29

            gc_state.tool_change = false;
 8012c2e:	4ba0      	ldr	r3, [pc, #640]	; (8012eb0 <protocol_exec_rt_system+0x518>)
 8012c30:	2200      	movs	r2, #0
 8012c32:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
            gc_state.modal.spindle.rpm_mode = SpindleSpeedMode_RPM;
 8012c36:	4b9e      	ldr	r3, [pc, #632]	; (8012eb0 <protocol_exec_rt_system+0x518>)
 8012c38:	2200      	movs	r2, #0
 8012c3a:	76da      	strb	r2, [r3, #27]

            // Tell driver/plugins about reset.
            hal.driver_reset();
 8012c3c:	4b9d      	ldr	r3, [pc, #628]	; (8012eb4 <protocol_exec_rt_system+0x51c>)
 8012c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8012c42:	4798      	blx	r3

            if(!sys.flags.keep_input && hal.stream.suspend_read && hal.stream.suspend_read(false))
 8012c44:	4b99      	ldr	r3, [pc, #612]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012c46:	7ddb      	ldrb	r3, [r3, #23]
 8012c48:	f003 0301 	and.w	r3, r3, #1
 8012c4c:	b2db      	uxtb	r3, r3
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d110      	bne.n	8012c74 <protocol_exec_rt_system+0x2dc>
 8012c52:	4b98      	ldr	r3, [pc, #608]	; (8012eb4 <protocol_exec_rt_system+0x51c>)
 8012c54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d00b      	beq.n	8012c74 <protocol_exec_rt_system+0x2dc>
 8012c5c:	4b95      	ldr	r3, [pc, #596]	; (8012eb4 <protocol_exec_rt_system+0x51c>)
 8012c5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8012c62:	2000      	movs	r0, #0
 8012c64:	4798      	blx	r3
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d003      	beq.n	8012c74 <protocol_exec_rt_system+0x2dc>
                hal.stream.cancel_read_buffer(); // flush pending blocks (after M6)
 8012c6c:	4b91      	ldr	r3, [pc, #580]	; (8012eb4 <protocol_exec_rt_system+0x51c>)
 8012c6e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012c72:	4798      	blx	r3

            sys.flags.keep_input = Off;
 8012c74:	4a8d      	ldr	r2, [pc, #564]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012c76:	7dd3      	ldrb	r3, [r2, #23]
 8012c78:	f36f 0300 	bfc	r3, #0, #1
 8012c7c:	75d3      	strb	r3, [r2, #23]

            gc_init();
 8012c7e:	f7f2 fd63 	bl	8005748 <gc_init>
            plan_reset();
 8012c82:	f7fe faa7 	bl	80111d4 <plan_reset>
/*            if(sys.alarm_pending == Alarm_ProbeProtect) {
                st_go_idle();
                system_set_exec_alarm(sys.alarm_pending);
                sys.alarm_pending = Alarm_None;
            } else*/
            st_reset();
 8012c86:	f00b fb9b 	bl	801e3c0 <st_reset>
            sync_position();
 8012c8a:	f7fe ffef 	bl	8011c6c <plan_sync_position>
 8012c8e:	498a      	ldr	r1, [pc, #552]	; (8012eb8 <protocol_exec_rt_system+0x520>)
 8012c90:	488a      	ldr	r0, [pc, #552]	; (8012ebc <protocol_exec_rt_system+0x524>)
 8012c92:	f00e fbb1 	bl	80213f8 <system_convert_array_steps_to_mpos>

            // Kill spindle and coolant. TODO: Check Mach3 behaviour?
            gc_spindle_off();
 8012c96:	f7f2 fe1d 	bl	80058d4 <gc_spindle_off>
            gc_coolant_off();
 8012c9a:	f7f2 fe2d 	bl	80058f8 <gc_coolant_off>

            flush_override_buffers();
 8012c9e:	f7fe f931 	bl	8010f04 <flush_override_buffers>
            if(!((state_get() == STATE_ALARM) && (sys.alarm == Alarm_LimitsEngaged || sys.alarm == Alarm_HomingRequired)))
 8012ca2:	f00a f83d 	bl	801cd20 <state_get>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b01      	cmp	r3, #1
 8012caa:	d109      	bne.n	8012cc0 <protocol_exec_rt_system+0x328>
 8012cac:	4b7f      	ldr	r3, [pc, #508]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012cae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012cb2:	2b0c      	cmp	r3, #12
 8012cb4:	d014      	beq.n	8012ce0 <protocol_exec_rt_system+0x348>
 8012cb6:	4b7d      	ldr	r3, [pc, #500]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012cb8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012cbc:	2b0b      	cmp	r3, #11
 8012cbe:	d00f      	beq.n	8012ce0 <protocol_exec_rt_system+0x348>
                state_set(hal.control.get_state().safety_door_ajar ? STATE_SAFETY_DOOR : STATE_IDLE);
 8012cc0:	4b7c      	ldr	r3, [pc, #496]	; (8012eb4 <protocol_exec_rt_system+0x51c>)
 8012cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012cc4:	4798      	blx	r3
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	f003 0308 	and.w	r3, r3, #8
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d001      	beq.n	8012cd8 <protocol_exec_rt_system+0x340>
 8012cd4:	2340      	movs	r3, #64	; 0x40
 8012cd6:	e000      	b.n	8012cda <protocol_exec_rt_system+0x342>
 8012cd8:	2300      	movs	r3, #0
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f00a f82c 	bl	801cd38 <state_set>
        }

        // Execute and print status to output stream
        if (rt_exec & EXEC_STATUS_REPORT)
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	f003 0301 	and.w	r3, r3, #1
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d001      	beq.n	8012cee <protocol_exec_rt_system+0x356>
            report_realtime_status();
 8012cea:	f002 fe81 	bl	80159f0 <report_realtime_status>

        if(rt_exec & EXEC_GCODE_REPORT)
 8012cee:	69fb      	ldr	r3, [r7, #28]
 8012cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d001      	beq.n	8012cfc <protocol_exec_rt_system+0x364>
            report_gcode_modes();
 8012cf8:	f001 fee0 	bl	8014abc <report_gcode_modes>

        if(rt_exec & EXEC_TLO_REPORT)
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d001      	beq.n	8012d0a <protocol_exec_rt_system+0x372>
            report_tool_offsets();
 8012d06:	f001 fcf1 	bl	80146ec <report_tool_offsets>

        // Execute and print PID log to output stream
        if (rt_exec & EXEC_PID_REPORT)
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d001      	beq.n	8012d18 <protocol_exec_rt_system+0x380>
            report_pid_log();
 8012d14:	f005 fb04 	bl	8018320 <report_pid_log>

        if(rt_exec & EXEC_RT_COMMAND)
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <protocol_exec_rt_system+0x38e>
            protocol_execute_rt_commands();
 8012d22:	f000 fdc9 	bl	80138b8 <protocol_execute_rt_commands>

        rt_exec &= ~(EXEC_STOP|EXEC_STATUS_REPORT|EXEC_GCODE_REPORT|EXEC_PID_REPORT|EXEC_TLO_REPORT|EXEC_RT_COMMAND); // clear requests already processed
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8012d2c:	f023 0311 	bic.w	r3, r3, #17
 8012d30:	61fb      	str	r3, [r7, #28]

        if(sys.flags.feed_hold_pending) {
 8012d32:	4b5e      	ldr	r3, [pc, #376]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012d34:	7d9b      	ldrb	r3, [r3, #22]
 8012d36:	f003 0320 	and.w	r3, r3, #32
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d016      	beq.n	8012d6e <protocol_exec_rt_system+0x3d6>
            if(rt_exec & EXEC_CYCLE_START)
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	f003 0302 	and.w	r3, r3, #2
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d005      	beq.n	8012d56 <protocol_exec_rt_system+0x3be>
                sys.flags.feed_hold_pending = Off;
 8012d4a:	4a58      	ldr	r2, [pc, #352]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012d4c:	7d93      	ldrb	r3, [r2, #22]
 8012d4e:	f36f 1345 	bfc	r3, #5, #1
 8012d52:	7593      	strb	r3, [r2, #22]
 8012d54:	e00b      	b.n	8012d6e <protocol_exec_rt_system+0x3d6>
            else if(!sys.override.control.feed_hold_disable)
 8012d56:	4b55      	ldr	r3, [pc, #340]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012d58:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8012d5c:	f003 0302 	and.w	r3, r3, #2
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d103      	bne.n	8012d6e <protocol_exec_rt_system+0x3d6>
                rt_exec |= EXEC_FEED_HOLD;
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	f043 0308 	orr.w	r3, r3, #8
 8012d6c:	61fb      	str	r3, [r7, #28]
        }

        // Let state machine handle any remaining requests
        if(rt_exec)
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d002      	beq.n	8012d7a <protocol_exec_rt_system+0x3e2>
            state_update(rt_exec);
 8012d74:	69f8      	ldr	r0, [r7, #28]
 8012d76:	f009 ffb7 	bl	801cce8 <state_update>
    }

    grbl.on_execute_realtime(state_get());
 8012d7a:	4b51      	ldr	r3, [pc, #324]	; (8012ec0 <protocol_exec_rt_system+0x528>)
 8012d7c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8012d7e:	f009 ffcf 	bl	801cd20 <state_get>
 8012d82:	4603      	mov	r3, r0
 8012d84:	4618      	mov	r0, r3
 8012d86:	47a0      	blx	r4

    // Execute overrides.

    if(!sys.override_delay.feedrate && (rt_exec = get_feed_override())) {
 8012d88:	4b48      	ldr	r3, [pc, #288]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012d8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012d8e:	f003 0301 	and.w	r3, r3, #1
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d154      	bne.n	8012e42 <protocol_exec_rt_system+0x4aa>
 8012d98:	f7fe f80a 	bl	8010db0 <get_feed_override>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	61fb      	str	r3, [r7, #28]
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d04d      	beq.n	8012e42 <protocol_exec_rt_system+0x4aa>

        override_t new_f_override = sys.override.feed_rate;
 8012da6:	4b41      	ldr	r3, [pc, #260]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012da8:	69db      	ldr	r3, [r3, #28]
 8012daa:	617b      	str	r3, [r7, #20]
        override_t new_r_override = sys.override.rapid_rate;
 8012dac:	4b3f      	ldr	r3, [pc, #252]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012dae:	6a1b      	ldr	r3, [r3, #32]
 8012db0:	613b      	str	r3, [r7, #16]

        do {

            switch(rt_exec) {
 8012db2:	69fb      	ldr	r3, [r7, #28]
 8012db4:	3b90      	subs	r3, #144	; 0x90
 8012db6:	2b07      	cmp	r3, #7
 8012db8:	d82e      	bhi.n	8012e18 <protocol_exec_rt_system+0x480>
 8012dba:	a201      	add	r2, pc, #4	; (adr r2, 8012dc0 <protocol_exec_rt_system+0x428>)
 8012dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dc0:	08012de1 	.word	0x08012de1
 8012dc4:	08012de7 	.word	0x08012de7
 8012dc8:	08012def 	.word	0x08012def
 8012dcc:	08012df7 	.word	0x08012df7
 8012dd0:	08012dff 	.word	0x08012dff
 8012dd4:	08012e07 	.word	0x08012e07
 8012dd8:	08012e0d 	.word	0x08012e0d
 8012ddc:	08012e13 	.word	0x08012e13

                case CMD_OVERRIDE_FEED_RESET:
                    new_f_override = DEFAULT_FEED_OVERRIDE;
 8012de0:	2364      	movs	r3, #100	; 0x64
 8012de2:	617b      	str	r3, [r7, #20]
                    break;
 8012de4:	e018      	b.n	8012e18 <protocol_exec_rt_system+0x480>

                case CMD_OVERRIDE_FEED_COARSE_PLUS:
                    new_f_override += FEED_OVERRIDE_COARSE_INCREMENT;
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	330a      	adds	r3, #10
 8012dea:	617b      	str	r3, [r7, #20]
                    break;
 8012dec:	e014      	b.n	8012e18 <protocol_exec_rt_system+0x480>

                case CMD_OVERRIDE_FEED_COARSE_MINUS:
                    new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT;
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	3b0a      	subs	r3, #10
 8012df2:	617b      	str	r3, [r7, #20]
                    break;
 8012df4:	e010      	b.n	8012e18 <protocol_exec_rt_system+0x480>

                case CMD_OVERRIDE_FEED_FINE_PLUS:
                    new_f_override += FEED_OVERRIDE_FINE_INCREMENT;
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	617b      	str	r3, [r7, #20]
                    break;
 8012dfc:	e00c      	b.n	8012e18 <protocol_exec_rt_system+0x480>

                case CMD_OVERRIDE_FEED_FINE_MINUS:
                    new_f_override -= FEED_OVERRIDE_FINE_INCREMENT;
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	3b01      	subs	r3, #1
 8012e02:	617b      	str	r3, [r7, #20]
                    break;
 8012e04:	e008      	b.n	8012e18 <protocol_exec_rt_system+0x480>

                case CMD_OVERRIDE_RAPID_RESET:
                    new_r_override = DEFAULT_RAPID_OVERRIDE;
 8012e06:	2364      	movs	r3, #100	; 0x64
 8012e08:	613b      	str	r3, [r7, #16]
                    break;
 8012e0a:	e005      	b.n	8012e18 <protocol_exec_rt_system+0x480>

                case CMD_OVERRIDE_RAPID_MEDIUM:
                    new_r_override = RAPID_OVERRIDE_MEDIUM;
 8012e0c:	2332      	movs	r3, #50	; 0x32
 8012e0e:	613b      	str	r3, [r7, #16]
                    break;
 8012e10:	e002      	b.n	8012e18 <protocol_exec_rt_system+0x480>

                case CMD_OVERRIDE_RAPID_LOW:
                    new_r_override = RAPID_OVERRIDE_LOW;
 8012e12:	2319      	movs	r3, #25
 8012e14:	613b      	str	r3, [r7, #16]
                    break;
 8012e16:	bf00      	nop
            }

            new_f_override = constrain(new_f_override, MIN_FEED_RATE_OVERRIDE, MAX_FEED_RATE_OVERRIDE);
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	2b09      	cmp	r3, #9
 8012e1c:	d904      	bls.n	8012e28 <protocol_exec_rt_system+0x490>
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	2bc8      	cmp	r3, #200	; 0xc8
 8012e22:	bf28      	it	cs
 8012e24:	23c8      	movcs	r3, #200	; 0xc8
 8012e26:	e000      	b.n	8012e2a <protocol_exec_rt_system+0x492>
 8012e28:	230a      	movs	r3, #10
 8012e2a:	617b      	str	r3, [r7, #20]

        } while((rt_exec = get_feed_override()));
 8012e2c:	f7fd ffc0 	bl	8010db0 <get_feed_override>
 8012e30:	4603      	mov	r3, r0
 8012e32:	61fb      	str	r3, [r7, #28]
 8012e34:	69fb      	ldr	r3, [r7, #28]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1bb      	bne.n	8012db2 <protocol_exec_rt_system+0x41a>

        plan_feed_override(new_f_override, new_r_override);
 8012e3a:	6939      	ldr	r1, [r7, #16]
 8012e3c:	6978      	ldr	r0, [r7, #20]
 8012e3e:	f7fe ffa1 	bl	8011d84 <plan_feed_override>
    }

    if(!sys.override_delay.spindle && (rt_exec = get_spindle_override())) {
 8012e42:	4b1a      	ldr	r3, [pc, #104]	; (8012eac <protocol_exec_rt_system+0x514>)
 8012e44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012e48:	f003 0304 	and.w	r3, r3, #4
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	f040 809e 	bne.w	8012f90 <protocol_exec_rt_system+0x5f8>
 8012e54:	f7fd fff0 	bl	8010e38 <get_spindle_override>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	61fb      	str	r3, [r7, #28]
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f000 8096 	beq.w	8012f90 <protocol_exec_rt_system+0x5f8>

        bool spindle_stop = false;
 8012e64:	2300      	movs	r3, #0
 8012e66:	73fb      	strb	r3, [r7, #15]
        spindle_ptrs_t *spindle = gc_spindle_get();
 8012e68:	f7f2 fd5a 	bl	8005920 <gc_spindle_get>
 8012e6c:	6078      	str	r0, [r7, #4]
        override_t last_s_override = spindle->param->override_pct;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	60bb      	str	r3, [r7, #8]

        do {

            switch(rt_exec) {
 8012e76:	69fb      	ldr	r3, [r7, #28]
 8012e78:	3b99      	subs	r3, #153	; 0x99
 8012e7a:	2b05      	cmp	r3, #5
 8012e7c:	d83d      	bhi.n	8012efa <protocol_exec_rt_system+0x562>
 8012e7e:	a201      	add	r2, pc, #4	; (adr r2, 8012e84 <protocol_exec_rt_system+0x4ec>)
 8012e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e84:	08012e9d 	.word	0x08012e9d
 8012e88:	08012ea3 	.word	0x08012ea3
 8012e8c:	08012ec5 	.word	0x08012ec5
 8012e90:	08012ecd 	.word	0x08012ecd
 8012e94:	08012ed5 	.word	0x08012ed5
 8012e98:	08012edd 	.word	0x08012edd

                case CMD_OVERRIDE_SPINDLE_RESET:
                    last_s_override = DEFAULT_SPINDLE_RPM_OVERRIDE;
 8012e9c:	2364      	movs	r3, #100	; 0x64
 8012e9e:	60bb      	str	r3, [r7, #8]
                    break;
 8012ea0:	e036      	b.n	8012f10 <protocol_exec_rt_system+0x578>

                case CMD_OVERRIDE_SPINDLE_COARSE_PLUS:
                    last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	330a      	adds	r3, #10
 8012ea6:	60bb      	str	r3, [r7, #8]
                    break;
 8012ea8:	e032      	b.n	8012f10 <protocol_exec_rt_system+0x578>
 8012eaa:	bf00      	nop
 8012eac:	20001520 	.word	0x20001520
 8012eb0:	2000137c 	.word	0x2000137c
 8012eb4:	200016a0 	.word	0x200016a0
 8012eb8:	200015a8 	.word	0x200015a8
 8012ebc:	200013dc 	.word	0x200013dc
 8012ec0:	200015b8 	.word	0x200015b8

                case CMD_OVERRIDE_SPINDLE_COARSE_MINUS:
                    last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT;
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	3b0a      	subs	r3, #10
 8012ec8:	60bb      	str	r3, [r7, #8]
                    break;
 8012eca:	e021      	b.n	8012f10 <protocol_exec_rt_system+0x578>

                case CMD_OVERRIDE_SPINDLE_FINE_PLUS:
                    last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT;
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	60bb      	str	r3, [r7, #8]
                    break;
 8012ed2:	e01d      	b.n	8012f10 <protocol_exec_rt_system+0x578>

                case CMD_OVERRIDE_SPINDLE_FINE_MINUS:
                    last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT;
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	3b01      	subs	r3, #1
 8012ed8:	60bb      	str	r3, [r7, #8]
                    break;
 8012eda:	e019      	b.n	8012f10 <protocol_exec_rt_system+0x578>

                case CMD_OVERRIDE_SPINDLE_STOP:
                    spindle_stop = !spindle_stop;
 8012edc:	7bfb      	ldrb	r3, [r7, #15]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	bf14      	ite	ne
 8012ee2:	2301      	movne	r3, #1
 8012ee4:	2300      	moveq	r3, #0
 8012ee6:	b2db      	uxtb	r3, r3
 8012ee8:	f083 0301 	eor.w	r3, r3, #1
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	73fb      	strb	r3, [r7, #15]
 8012ef0:	7bfb      	ldrb	r3, [r7, #15]
 8012ef2:	f003 0301 	and.w	r3, r3, #1
 8012ef6:	73fb      	strb	r3, [r7, #15]
                    break;
 8012ef8:	e00a      	b.n	8012f10 <protocol_exec_rt_system+0x578>

                default:
                    if(grbl.on_unknown_accessory_override)
 8012efa:	4b75      	ldr	r3, [pc, #468]	; (80130d0 <protocol_exec_rt_system+0x738>)
 8012efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d005      	beq.n	8012f0e <protocol_exec_rt_system+0x576>
                        grbl.on_unknown_accessory_override(rt_exec);
 8012f02:	4b73      	ldr	r3, [pc, #460]	; (80130d0 <protocol_exec_rt_system+0x738>)
 8012f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f06:	69fa      	ldr	r2, [r7, #28]
 8012f08:	b2d2      	uxtb	r2, r2
 8012f0a:	4610      	mov	r0, r2
 8012f0c:	4798      	blx	r3
                    break;
 8012f0e:	bf00      	nop
            }

            last_s_override = constrain(last_s_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	2b09      	cmp	r3, #9
 8012f14:	d904      	bls.n	8012f20 <protocol_exec_rt_system+0x588>
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	2bc8      	cmp	r3, #200	; 0xc8
 8012f1a:	bf28      	it	cs
 8012f1c:	23c8      	movcs	r3, #200	; 0xc8
 8012f1e:	e000      	b.n	8012f22 <protocol_exec_rt_system+0x58a>
 8012f20:	230a      	movs	r3, #10
 8012f22:	60bb      	str	r3, [r7, #8]

        } while((rt_exec = get_spindle_override()));
 8012f24:	f7fd ff88 	bl	8010e38 <get_spindle_override>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	61fb      	str	r3, [r7, #28]
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d1a1      	bne.n	8012e76 <protocol_exec_rt_system+0x4de>

        spindle_set_override(spindle, last_s_override);
 8012f32:	68b9      	ldr	r1, [r7, #8]
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f009 f8ef 	bl	801c118 <spindle_set_override>

        if (spindle_stop && state_get() == STATE_HOLD && gc_state.modal.spindle.state.on) {
 8012f3a:	7bfb      	ldrb	r3, [r7, #15]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d027      	beq.n	8012f90 <protocol_exec_rt_system+0x5f8>
 8012f40:	f009 feee 	bl	801cd20 <state_get>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b10      	cmp	r3, #16
 8012f48:	d122      	bne.n	8012f90 <protocol_exec_rt_system+0x5f8>
 8012f4a:	4b62      	ldr	r3, [pc, #392]	; (80130d4 <protocol_exec_rt_system+0x73c>)
 8012f4c:	7e9b      	ldrb	r3, [r3, #26]
 8012f4e:	f003 0301 	and.w	r3, r3, #1
 8012f52:	b2db      	uxtb	r3, r3
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d01b      	beq.n	8012f90 <protocol_exec_rt_system+0x5f8>
            // Spindle stop override allowed only while in HOLD state.
            // NOTE: Report flag is set in spindle_set_state() when spindle stop is executed.
            if (!sys.override.spindle_stop.value)
 8012f58:	4b5f      	ldr	r3, [pc, #380]	; (80130d8 <protocol_exec_rt_system+0x740>)
 8012f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d107      	bne.n	8012f72 <protocol_exec_rt_system+0x5da>
                sys.override.spindle_stop.initiate = On;
 8012f62:	4a5d      	ldr	r2, [pc, #372]	; (80130d8 <protocol_exec_rt_system+0x740>)
 8012f64:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8012f68:	f043 0302 	orr.w	r3, r3, #2
 8012f6c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8012f70:	e00e      	b.n	8012f90 <protocol_exec_rt_system+0x5f8>
            else if (sys.override.spindle_stop.enabled)
 8012f72:	4b59      	ldr	r3, [pc, #356]	; (80130d8 <protocol_exec_rt_system+0x740>)
 8012f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f78:	f003 0301 	and.w	r3, r3, #1
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d006      	beq.n	8012f90 <protocol_exec_rt_system+0x5f8>
                sys.override.spindle_stop.restore = On;
 8012f82:	4a55      	ldr	r2, [pc, #340]	; (80130d8 <protocol_exec_rt_system+0x740>)
 8012f84:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8012f88:	f043 0304 	orr.w	r3, r3, #4
 8012f8c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        }
    }

    if(!sys.override_delay.coolant && (rt_exec = get_coolant_override())) {
 8012f90:	4b51      	ldr	r3, [pc, #324]	; (80130d8 <protocol_exec_rt_system+0x740>)
 8012f92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f96:	f003 0302 	and.w	r3, r3, #2
 8012f9a:	b2db      	uxtb	r3, r3
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d175      	bne.n	801308c <protocol_exec_rt_system+0x6f4>
 8012fa0:	f7fd ff8e 	bl	8010ec0 <get_coolant_override>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	61fb      	str	r3, [r7, #28]
 8012fa8:	69fb      	ldr	r3, [r7, #28]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d06e      	beq.n	801308c <protocol_exec_rt_system+0x6f4>

        coolant_state_t coolant_state = gc_state.modal.coolant;
 8012fae:	4b49      	ldr	r3, [pc, #292]	; (80130d4 <protocol_exec_rt_system+0x73c>)
 8012fb0:	7e5b      	ldrb	r3, [r3, #25]
 8012fb2:	703b      	strb	r3, [r7, #0]

        do {

            switch(rt_exec) {
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	2ba0      	cmp	r3, #160	; 0xa0
 8012fb8:	d024      	beq.n	8013004 <protocol_exec_rt_system+0x66c>
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	2ba1      	cmp	r3, #161	; 0xa1
 8012fbe:	d13b      	bne.n	8013038 <protocol_exec_rt_system+0x6a0>

                case CMD_OVERRIDE_COOLANT_MIST_TOGGLE:
                    if (hal.driver_cap.mist_control && ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD)))) {
 8012fc0:	4b46      	ldr	r3, [pc, #280]	; (80130dc <protocol_exec_rt_system+0x744>)
 8012fc2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8012fc6:	f003 0301 	and.w	r3, r3, #1
 8012fca:	b2db      	uxtb	r3, r3
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d03e      	beq.n	801304e <protocol_exec_rt_system+0x6b6>
 8012fd0:	f009 fea6 	bl	801cd20 <state_get>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d006      	beq.n	8012fe8 <protocol_exec_rt_system+0x650>
 8012fda:	f009 fea1 	bl	801cd20 <state_get>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	f003 0318 	and.w	r3, r3, #24
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d032      	beq.n	801304e <protocol_exec_rt_system+0x6b6>
                        coolant_state.mist = !coolant_state.mist;
 8012fe8:	783b      	ldrb	r3, [r7, #0]
 8012fea:	f003 0302 	and.w	r3, r3, #2
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	bf0c      	ite	eq
 8012ff4:	2301      	moveq	r3, #1
 8012ff6:	2300      	movne	r3, #0
 8012ff8:	b2da      	uxtb	r2, r3
 8012ffa:	783b      	ldrb	r3, [r7, #0]
 8012ffc:	f362 0341 	bfi	r3, r2, #1, #1
 8013000:	703b      	strb	r3, [r7, #0]
                    }
                    break;
 8013002:	e024      	b.n	801304e <protocol_exec_rt_system+0x6b6>

                case CMD_OVERRIDE_COOLANT_FLOOD_TOGGLE:
                    if ((state_get() == STATE_IDLE) || (state_get() & (STATE_CYCLE | STATE_HOLD))) {
 8013004:	f009 fe8c 	bl	801cd20 <state_get>
 8013008:	4603      	mov	r3, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	d006      	beq.n	801301c <protocol_exec_rt_system+0x684>
 801300e:	f009 fe87 	bl	801cd20 <state_get>
 8013012:	4603      	mov	r3, r0
 8013014:	f003 0318 	and.w	r3, r3, #24
 8013018:	2b00      	cmp	r3, #0
 801301a:	d01a      	beq.n	8013052 <protocol_exec_rt_system+0x6ba>
                        coolant_state.flood = !coolant_state.flood;
 801301c:	783b      	ldrb	r3, [r7, #0]
 801301e:	f003 0301 	and.w	r3, r3, #1
 8013022:	b2db      	uxtb	r3, r3
 8013024:	2b00      	cmp	r3, #0
 8013026:	bf0c      	ite	eq
 8013028:	2301      	moveq	r3, #1
 801302a:	2300      	movne	r3, #0
 801302c:	b2da      	uxtb	r2, r3
 801302e:	783b      	ldrb	r3, [r7, #0]
 8013030:	f362 0300 	bfi	r3, r2, #0, #1
 8013034:	703b      	strb	r3, [r7, #0]
                    }
                    break;
 8013036:	e00c      	b.n	8013052 <protocol_exec_rt_system+0x6ba>

                default:
                    if(grbl.on_unknown_accessory_override)
 8013038:	4b25      	ldr	r3, [pc, #148]	; (80130d0 <protocol_exec_rt_system+0x738>)
 801303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801303c:	2b00      	cmp	r3, #0
 801303e:	d00a      	beq.n	8013056 <protocol_exec_rt_system+0x6be>
                        grbl.on_unknown_accessory_override(rt_exec);
 8013040:	4b23      	ldr	r3, [pc, #140]	; (80130d0 <protocol_exec_rt_system+0x738>)
 8013042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013044:	69fa      	ldr	r2, [r7, #28]
 8013046:	b2d2      	uxtb	r2, r2
 8013048:	4610      	mov	r0, r2
 801304a:	4798      	blx	r3
                    break;
 801304c:	e003      	b.n	8013056 <protocol_exec_rt_system+0x6be>
                    break;
 801304e:	bf00      	nop
 8013050:	e002      	b.n	8013058 <protocol_exec_rt_system+0x6c0>
                    break;
 8013052:	bf00      	nop
 8013054:	e000      	b.n	8013058 <protocol_exec_rt_system+0x6c0>
                    break;
 8013056:	bf00      	nop
            }

        } while((rt_exec = get_coolant_override()));
 8013058:	f7fd ff32 	bl	8010ec0 <get_coolant_override>
 801305c:	4603      	mov	r3, r0
 801305e:	61fb      	str	r3, [r7, #28]
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d1a6      	bne.n	8012fb4 <protocol_exec_rt_system+0x61c>

      // NOTE: Since coolant state always performs a planner sync whenever it changes, the current
      // run state can be determined by checking the parser state.
        if(coolant_state.value != gc_state.modal.coolant.value) {
 8013066:	783a      	ldrb	r2, [r7, #0]
 8013068:	4b1a      	ldr	r3, [pc, #104]	; (80130d4 <protocol_exec_rt_system+0x73c>)
 801306a:	7e5b      	ldrb	r3, [r3, #25]
 801306c:	429a      	cmp	r2, r3
 801306e:	d00d      	beq.n	801308c <protocol_exec_rt_system+0x6f4>
            coolant_set_state(coolant_state); // Report flag set in coolant_set_state().
 8013070:	7838      	ldrb	r0, [r7, #0]
 8013072:	f7f2 f893 	bl	800519c <coolant_set_state>
            gc_state.modal.coolant = coolant_state;
 8013076:	4a17      	ldr	r2, [pc, #92]	; (80130d4 <protocol_exec_rt_system+0x73c>)
 8013078:	783b      	ldrb	r3, [r7, #0]
 801307a:	7653      	strb	r3, [r2, #25]
            if(grbl.on_override_changed)
 801307c:	4b14      	ldr	r3, [pc, #80]	; (80130d0 <protocol_exec_rt_system+0x738>)
 801307e:	6a1b      	ldr	r3, [r3, #32]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d003      	beq.n	801308c <protocol_exec_rt_system+0x6f4>
                grbl.on_override_changed(OverrideChanged_CoolantState);
 8013084:	4b12      	ldr	r3, [pc, #72]	; (80130d0 <protocol_exec_rt_system+0x738>)
 8013086:	6a1b      	ldr	r3, [r3, #32]
 8013088:	2000      	movs	r0, #0
 801308a:	4798      	blx	r3
    }

    // End execute overrides.

    // Reload step segment buffer
    if (state_get() & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG))
 801308c:	f009 fe48 	bl	801cd20 <state_get>
 8013090:	4603      	mov	r3, r0
 8013092:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8013096:	2b00      	cmp	r3, #0
 8013098:	d001      	beq.n	801309e <protocol_exec_rt_system+0x706>
        st_prep_buffer();
 801309a:	f00b fb2f 	bl	801e6fc <st_prep_buffer>

    return !ABORTED;
 801309e:	4b0e      	ldr	r3, [pc, #56]	; (80130d8 <protocol_exec_rt_system+0x740>)
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	f083 0301 	eor.w	r3, r3, #1
 80130a6:	b2db      	uxtb	r3, r3
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d008      	beq.n	80130be <protocol_exec_rt_system+0x726>
 80130ac:	4b0a      	ldr	r3, [pc, #40]	; (80130d8 <protocol_exec_rt_system+0x740>)
 80130ae:	785b      	ldrb	r3, [r3, #1]
 80130b0:	f083 0301 	eor.w	r3, r3, #1
 80130b4:	b2db      	uxtb	r3, r3
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d001      	beq.n	80130be <protocol_exec_rt_system+0x726>
 80130ba:	2301      	movs	r3, #1
 80130bc:	e000      	b.n	80130c0 <protocol_exec_rt_system+0x728>
 80130be:	2300      	movs	r3, #0
 80130c0:	f003 0301 	and.w	r3, r3, #1
 80130c4:	b2db      	uxtb	r3, r3
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3724      	adds	r7, #36	; 0x24
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd90      	pop	{r4, r7, pc}
 80130ce:	bf00      	nop
 80130d0:	200015b8 	.word	0x200015b8
 80130d4:	2000137c 	.word	0x2000137c
 80130d8:	20001520 	.word	0x20001520
 80130dc:	200016a0 	.word	0x200016a0

080130e0 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template.
static void protocol_exec_rt_suspend (sys_state_t state)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
    if((sys.blocking_event = state == STATE_SLEEP)) {
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b80      	cmp	r3, #128	; 0x80
 80130ec:	bf0c      	ite	eq
 80130ee:	2301      	moveq	r3, #1
 80130f0:	2300      	movne	r3, #0
 80130f2:	b2da      	uxtb	r2, r3
 80130f4:	4b23      	ldr	r3, [pc, #140]	; (8013184 <protocol_exec_rt_suspend+0xa4>)
 80130f6:	715a      	strb	r2, [r3, #5]
 80130f8:	4b22      	ldr	r3, [pc, #136]	; (8013184 <protocol_exec_rt_suspend+0xa4>)
 80130fa:	795b      	ldrb	r3, [r3, #5]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d037      	beq.n	8013170 <protocol_exec_rt_suspend+0x90>
        *line = '\0';
 8013100:	4b21      	ldr	r3, [pc, #132]	; (8013188 <protocol_exec_rt_suspend+0xa8>)
 8013102:	2200      	movs	r2, #0
 8013104:	701a      	strb	r2, [r3, #0]
        char_counter = 0;
 8013106:	4b21      	ldr	r3, [pc, #132]	; (801318c <protocol_exec_rt_suspend+0xac>)
 8013108:	2200      	movs	r2, #0
 801310a:	601a      	str	r2, [r3, #0]
        hal.stream.reset_read_buffer();
 801310c:	4b20      	ldr	r3, [pc, #128]	; (8013190 <protocol_exec_rt_suspend+0xb0>)
 801310e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013112:	4798      	blx	r3
    }

    while(sys.suspend) {
 8013114:	e02c      	b.n	8013170 <protocol_exec_rt_suspend+0x90>

        if(sys.abort)
 8013116:	4b1b      	ldr	r3, [pc, #108]	; (8013184 <protocol_exec_rt_suspend+0xa4>)
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d12d      	bne.n	801317a <protocol_exec_rt_suspend+0x9a>
            return;

        if(sys.blocking_event)
 801311e:	4b19      	ldr	r3, [pc, #100]	; (8013184 <protocol_exec_rt_suspend+0xa4>)
 8013120:	795b      	ldrb	r3, [r3, #5]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d001      	beq.n	801312a <protocol_exec_rt_suspend+0x4a>
            protocol_poll_cmd();
 8013126:	f7ff fba5 	bl	8012874 <protocol_poll_cmd>

        // Handle spindle overrides during suspend
        state_suspend_manager();
 801312a:	f009 ffd5 	bl	801d0d8 <state_suspend_manager>

        // If door closed keep issuing door closed requests until resumed
        if(state_get() == STATE_SAFETY_DOOR && !hal.control.get_state().safety_door_ajar)
 801312e:	f009 fdf7 	bl	801cd20 <state_get>
 8013132:	4603      	mov	r3, r0
 8013134:	2b40      	cmp	r3, #64	; 0x40
 8013136:	d10f      	bne.n	8013158 <protocol_exec_rt_suspend+0x78>
 8013138:	4b15      	ldr	r3, [pc, #84]	; (8013190 <protocol_exec_rt_suspend+0xb0>)
 801313a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801313c:	4798      	blx	r3
 801313e:	4603      	mov	r3, r0
 8013140:	b2db      	uxtb	r3, r3
 8013142:	f003 0308 	and.w	r3, r3, #8
 8013146:	b2db      	uxtb	r3, r3
 8013148:	2b00      	cmp	r3, #0
 801314a:	d105      	bne.n	8013158 <protocol_exec_rt_suspend+0x78>
            system_set_exec_state_flag(EXEC_DOOR_CLOSED);
 801314c:	4b10      	ldr	r3, [pc, #64]	; (8013190 <protocol_exec_rt_suspend+0xb0>)
 801314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013154:	480f      	ldr	r0, [pc, #60]	; (8013194 <protocol_exec_rt_suspend+0xb4>)
 8013156:	4798      	blx	r3

        // Check for sleep conditions and execute auto-park, if timeout duration elapses.
        // Sleep is valid for both hold and door states, if the spindle or coolant are on or
        // set to be re-enabled.
        if(settings.flags.sleep_enable)
 8013158:	4b0f      	ldr	r3, [pc, #60]	; (8013198 <protocol_exec_rt_suspend+0xb8>)
 801315a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801315e:	f003 0308 	and.w	r3, r3, #8
 8013162:	b2db      	uxtb	r3, r3
 8013164:	2b00      	cmp	r3, #0
 8013166:	d001      	beq.n	801316c <protocol_exec_rt_suspend+0x8c>
            sleep_check();
 8013168:	f008 fa80 	bl	801b66c <sleep_check>

        protocol_exec_rt_system();
 801316c:	f7ff fc14 	bl	8012998 <protocol_exec_rt_system>
    while(sys.suspend) {
 8013170:	4b04      	ldr	r3, [pc, #16]	; (8013184 <protocol_exec_rt_suspend+0xa4>)
 8013172:	789b      	ldrb	r3, [r3, #2]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d1ce      	bne.n	8013116 <protocol_exec_rt_suspend+0x36>
 8013178:	e000      	b.n	801317c <protocol_exec_rt_suspend+0x9c>
            return;
 801317a:	bf00      	nop
    }
}
 801317c:	3708      	adds	r7, #8
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	20001520 	.word	0x20001520
 8013188:	20001a44 	.word	0x20001a44
 801318c:	20001a40 	.word	0x20001a40
 8013190:	200016a0 	.word	0x200016a0
 8013194:	20001568 	.word	0x20001568
 8013198:	20001cf0 	.word	0x20001cf0

0801319c <protocol_enqueue_realtime_command>:
// Pick off (drop) real-time command characters from input stream.
// These characters are not passed into the main buffer,
// but rather sets system state flag bits for later execution by protocol_exec_rt_system().
// Called from input stream interrupt handler.
ISR_CODE bool ISR_FUNC(protocol_enqueue_realtime_command)(char c)
{
 801319c:	b590      	push	{r4, r7, lr}
 801319e:	b085      	sub	sp, #20
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	4603      	mov	r3, r0
 80131a4:	71fb      	strb	r3, [r7, #7]
    static bool esc = false;

    bool drop = false;
 80131a6:	2300      	movs	r3, #0
 80131a8:	73fb      	strb	r3, [r7, #15]

    // 1. Process characters in the ranges 0x - 1x and 8x-Ax
    // Characters with functions assigned are always acted upon even when the input stream
    // is redirected to a non-interactive stream such as from a SD card.

    switch ((unsigned char)c) {
 80131aa:	79fb      	ldrb	r3, [r7, #7]
 80131ac:	3b03      	subs	r3, #3
 80131ae:	2ba1      	cmp	r3, #161	; 0xa1
 80131b0:	f200 8290 	bhi.w	80136d4 <protocol_enqueue_realtime_command+0x538>
 80131b4:	a201      	add	r2, pc, #4	; (adr r2, 80131bc <protocol_enqueue_realtime_command+0x20>)
 80131b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131ba:	bf00      	nop
 80131bc:	080134a7 	.word	0x080134a7
 80131c0:	080136d5 	.word	0x080136d5
 80131c4:	08013503 	.word	0x08013503
 80131c8:	080136d5 	.word	0x080136d5
 80131cc:	080136d5 	.word	0x080136d5
 80131d0:	080136d5 	.word	0x080136d5
 80131d4:	080136d5 	.word	0x080136d5
 80131d8:	08013719 	.word	0x08013719
 80131dc:	080136d5 	.word	0x080136d5
 80131e0:	080136d5 	.word	0x080136d5
 80131e4:	08013719 	.word	0x08013719
 80131e8:	080136d5 	.word	0x080136d5
 80131ec:	080136d5 	.word	0x080136d5
 80131f0:	080136d5 	.word	0x080136d5
 80131f4:	080136d5 	.word	0x080136d5
 80131f8:	080136d5 	.word	0x080136d5
 80131fc:	080136d5 	.word	0x080136d5
 8013200:	08013691 	.word	0x08013691
 8013204:	080136d5 	.word	0x080136d5
 8013208:	080136d5 	.word	0x080136d5
 801320c:	080136d5 	.word	0x080136d5
 8013210:	08013489 	.word	0x08013489
 8013214:	0801346b 	.word	0x0801346b
 8013218:	080136d5 	.word	0x080136d5
 801321c:	080136d5 	.word	0x080136d5
 8013220:	080136d5 	.word	0x080136d5
 8013224:	080136d5 	.word	0x080136d5
 8013228:	080136d5 	.word	0x080136d5
 801322c:	080136d5 	.word	0x080136d5
 8013230:	080136d5 	.word	0x080136d5
 8013234:	080136d5 	.word	0x080136d5
 8013238:	080136d5 	.word	0x080136d5
 801323c:	080136d5 	.word	0x080136d5
 8013240:	08013445 	.word	0x08013445
 8013244:	080136d5 	.word	0x080136d5
 8013248:	080136d5 	.word	0x080136d5
 801324c:	080136d5 	.word	0x080136d5
 8013250:	080136d5 	.word	0x080136d5
 8013254:	080136d5 	.word	0x080136d5
 8013258:	080136d5 	.word	0x080136d5
 801325c:	080136d5 	.word	0x080136d5
 8013260:	080136d5 	.word	0x080136d5
 8013264:	080136d5 	.word	0x080136d5
 8013268:	080136d5 	.word	0x080136d5
 801326c:	080136d5 	.word	0x080136d5
 8013270:	080136d5 	.word	0x080136d5
 8013274:	080136d5 	.word	0x080136d5
 8013278:	080136d5 	.word	0x080136d5
 801327c:	080136d5 	.word	0x080136d5
 8013280:	080136d5 	.word	0x080136d5
 8013284:	080136d5 	.word	0x080136d5
 8013288:	080136d5 	.word	0x080136d5
 801328c:	080136d5 	.word	0x080136d5
 8013290:	080136d5 	.word	0x080136d5
 8013294:	080136d5 	.word	0x080136d5
 8013298:	080136d5 	.word	0x080136d5
 801329c:	080136d5 	.word	0x080136d5
 80132a0:	080136d5 	.word	0x080136d5
 80132a4:	080136d5 	.word	0x080136d5
 80132a8:	080136d5 	.word	0x080136d5
 80132ac:	080136d5 	.word	0x080136d5
 80132b0:	080136d5 	.word	0x080136d5
 80132b4:	080136d5 	.word	0x080136d5
 80132b8:	080136d5 	.word	0x080136d5
 80132bc:	080136d5 	.word	0x080136d5
 80132c0:	080136d5 	.word	0x080136d5
 80132c4:	080136d5 	.word	0x080136d5
 80132c8:	080136d5 	.word	0x080136d5
 80132cc:	080136d5 	.word	0x080136d5
 80132d0:	080136d5 	.word	0x080136d5
 80132d4:	080136d5 	.word	0x080136d5
 80132d8:	080136d5 	.word	0x080136d5
 80132dc:	080136d5 	.word	0x080136d5
 80132e0:	080136d5 	.word	0x080136d5
 80132e4:	080136d5 	.word	0x080136d5
 80132e8:	080136d5 	.word	0x080136d5
 80132ec:	080136d5 	.word	0x080136d5
 80132f0:	080136d5 	.word	0x080136d5
 80132f4:	080136d5 	.word	0x080136d5
 80132f8:	080136d5 	.word	0x080136d5
 80132fc:	080136d5 	.word	0x080136d5
 8013300:	080136d5 	.word	0x080136d5
 8013304:	080136d5 	.word	0x080136d5
 8013308:	080136d5 	.word	0x080136d5
 801330c:	080136d5 	.word	0x080136d5
 8013310:	080136d5 	.word	0x080136d5
 8013314:	080136d5 	.word	0x080136d5
 8013318:	080136d5 	.word	0x080136d5
 801331c:	080136d5 	.word	0x080136d5
 8013320:	080136d5 	.word	0x080136d5
 8013324:	080136d5 	.word	0x080136d5
 8013328:	080136d5 	.word	0x080136d5
 801332c:	080136d5 	.word	0x080136d5
 8013330:	080136d5 	.word	0x080136d5
 8013334:	080136d5 	.word	0x080136d5
 8013338:	080136d5 	.word	0x080136d5
 801333c:	080136d5 	.word	0x080136d5
 8013340:	080136d5 	.word	0x080136d5
 8013344:	080136d5 	.word	0x080136d5
 8013348:	080136d5 	.word	0x080136d5
 801334c:	080136d5 	.word	0x080136d5
 8013350:	080136d5 	.word	0x080136d5
 8013354:	080136d5 	.word	0x080136d5
 8013358:	080136d5 	.word	0x080136d5
 801335c:	080136d5 	.word	0x080136d5
 8013360:	080136d5 	.word	0x080136d5
 8013364:	080136d5 	.word	0x080136d5
 8013368:	080136d5 	.word	0x080136d5
 801336c:	080136d5 	.word	0x080136d5
 8013370:	080136d5 	.word	0x080136d5
 8013374:	080136d5 	.word	0x080136d5
 8013378:	080136d5 	.word	0x080136d5
 801337c:	080136d5 	.word	0x080136d5
 8013380:	080136d5 	.word	0x080136d5
 8013384:	080136d5 	.word	0x080136d5
 8013388:	080136d5 	.word	0x080136d5
 801338c:	080136d5 	.word	0x080136d5
 8013390:	080136d5 	.word	0x080136d5
 8013394:	080136d5 	.word	0x080136d5
 8013398:	080136d5 	.word	0x080136d5
 801339c:	080136d5 	.word	0x080136d5
 80133a0:	080136d5 	.word	0x080136d5
 80133a4:	080136d5 	.word	0x080136d5
 80133a8:	080136d5 	.word	0x080136d5
 80133ac:	080136d5 	.word	0x080136d5
 80133b0:	08013503 	.word	0x08013503
 80133b4:	08013521 	.word	0x08013521
 80133b8:	08013539 	.word	0x08013539
 80133bc:	08013595 	.word	0x08013595
 80133c0:	08013549 	.word	0x08013549
 80133c4:	08013565 	.word	0x08013565
 80133c8:	080136d5 	.word	0x080136d5
 80133cc:	080134bb 	.word	0x080134bb
 80133d0:	080135bd 	.word	0x080135bd
 80133d4:	080135ef 	.word	0x080135ef
 80133d8:	08013683 	.word	0x08013683
 80133dc:	0801362d 	.word	0x0801362d
 80133e0:	0801363f 	.word	0x0801363f
 80133e4:	080136d5 	.word	0x080136d5
 80133e8:	080136d5 	.word	0x080136d5
 80133ec:	080136d5 	.word	0x080136d5
 80133f0:	08013667 	.word	0x08013667
 80133f4:	08013667 	.word	0x08013667
 80133f8:	08013667 	.word	0x08013667
 80133fc:	08013667 	.word	0x08013667
 8013400:	08013667 	.word	0x08013667
 8013404:	08013667 	.word	0x08013667
 8013408:	08013667 	.word	0x08013667
 801340c:	08013667 	.word	0x08013667
 8013410:	080136d5 	.word	0x080136d5
 8013414:	08013675 	.word	0x08013675
 8013418:	08013675 	.word	0x08013675
 801341c:	08013675 	.word	0x08013675
 8013420:	08013675 	.word	0x08013675
 8013424:	08013675 	.word	0x08013675
 8013428:	08013675 	.word	0x08013675
 801342c:	080136d5 	.word	0x080136d5
 8013430:	08013683 	.word	0x08013683
 8013434:	08013683 	.word	0x08013683
 8013438:	0801361b 	.word	0x0801361b
 801343c:	080136d5 	.word	0x080136d5
 8013440:	080135a7 	.word	0x080135a7
        case '\n':
        case '\r':
            break;

        case '$':
            if(char_counter == 0)
 8013444:	4b99      	ldr	r3, [pc, #612]	; (80136ac <protocol_enqueue_realtime_command+0x510>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	2b00      	cmp	r3, #0
 801344a:	f040 8167 	bne.w	801371c <protocol_enqueue_realtime_command+0x580>
                keep_rt_commands = !settings.flags.legacy_rt_commands;
 801344e:	4b98      	ldr	r3, [pc, #608]	; (80136b0 <protocol_enqueue_realtime_command+0x514>)
 8013450:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8013454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013458:	b2db      	uxtb	r3, r3
 801345a:	2b00      	cmp	r3, #0
 801345c:	bf0c      	ite	eq
 801345e:	2301      	moveq	r3, #1
 8013460:	2300      	movne	r3, #0
 8013462:	b2da      	uxtb	r2, r3
 8013464:	4b93      	ldr	r3, [pc, #588]	; (80136b4 <protocol_enqueue_realtime_command+0x518>)
 8013466:	701a      	strb	r2, [r3, #0]
            break;
 8013468:	e158      	b.n	801371c <protocol_enqueue_realtime_command+0x580>

        case CMD_STOP:
            system_set_exec_state_flag(EXEC_STOP);
 801346a:	4b93      	ldr	r3, [pc, #588]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 801346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801346e:	2110      	movs	r1, #16
 8013470:	4892      	ldr	r0, [pc, #584]	; (80136bc <protocol_enqueue_realtime_command+0x520>)
 8013472:	4798      	blx	r3
            char_counter = 0;
 8013474:	4b8d      	ldr	r3, [pc, #564]	; (80136ac <protocol_enqueue_realtime_command+0x510>)
 8013476:	2200      	movs	r2, #0
 8013478:	601a      	str	r2, [r3, #0]
            hal.stream.cancel_read_buffer();
 801347a:	4b8f      	ldr	r3, [pc, #572]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 801347c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013480:	4798      	blx	r3
            drop = true;
 8013482:	2301      	movs	r3, #1
 8013484:	73fb      	strb	r3, [r7, #15]
            break;
 8013486:	e15c      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_RESET: // Call motion control reset routine.
            if(!hal.control.get_state().e_stop)
 8013488:	4b8b      	ldr	r3, [pc, #556]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 801348a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801348c:	4798      	blx	r3
 801348e:	4603      	mov	r3, r0
 8013490:	b2db      	uxtb	r3, r3
 8013492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013496:	b2db      	uxtb	r3, r3
 8013498:	2b00      	cmp	r3, #0
 801349a:	d101      	bne.n	80134a0 <protocol_enqueue_realtime_command+0x304>
                mc_reset();
 801349c:	f7fb fe28 	bl	800f0f0 <mc_reset>
            drop = true;
 80134a0:	2301      	movs	r3, #1
 80134a2:	73fb      	strb	r3, [r7, #15]
            break;
 80134a4:	e14d      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

#if COMPATIBILITY_LEVEL == 0
        case CMD_EXIT: // Call motion control reset routine.
            mc_reset();
 80134a6:	f7fb fe23 	bl	800f0f0 <mc_reset>
            sys.flags.exit = On;
 80134aa:	4a85      	ldr	r2, [pc, #532]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 80134ac:	7d93      	ldrb	r3, [r2, #22]
 80134ae:	f043 0308 	orr.w	r3, r3, #8
 80134b2:	7593      	strb	r3, [r2, #22]
            drop = true;
 80134b4:	2301      	movs	r3, #1
 80134b6:	73fb      	strb	r3, [r7, #15]
            break;
 80134b8:	e143      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_STATUS_REPORT_ALL: // Add all statuses to report
            {
                report_tracking_flags_t report;

                report.value = (uint32_t)Report_All;
 80134ba:	4b82      	ldr	r3, [pc, #520]	; (80136c4 <protocol_enqueue_realtime_command+0x528>)
 80134bc:	60bb      	str	r3, [r7, #8]
                report.tool_offset = sys.report.tool_offset;
 80134be:	4b80      	ldr	r3, [pc, #512]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 80134c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80134c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80134c8:	b2da      	uxtb	r2, r3
 80134ca:	7a7b      	ldrb	r3, [r7, #9]
 80134cc:	f362 0382 	bfi	r3, r2, #2, #1
 80134d0:	727b      	strb	r3, [r7, #9]
                report.m66result = sys.var5399 > -2;
 80134d2:	4b7b      	ldr	r3, [pc, #492]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 80134d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134da:	bfac      	ite	ge
 80134dc:	2301      	movge	r3, #1
 80134de:	2300      	movlt	r3, #0
 80134e0:	b2da      	uxtb	r2, r3
 80134e2:	7a7b      	ldrb	r3, [r7, #9]
 80134e4:	f362 03c3 	bfi	r3, r2, #3, #1
 80134e8:	727b      	strb	r3, [r7, #9]

                system_add_rt_report((report_tracking_t)report.value);
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f00e f86b 	bl	80215c8 <system_add_rt_report>
            }
            system_set_exec_state_flag(EXEC_STATUS_REPORT);
 80134f2:	4b71      	ldr	r3, [pc, #452]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 80134f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134f6:	2101      	movs	r1, #1
 80134f8:	4870      	ldr	r0, [pc, #448]	; (80136bc <protocol_enqueue_realtime_command+0x520>)
 80134fa:	4798      	blx	r3
            drop = true;
 80134fc:	2301      	movs	r3, #1
 80134fe:	73fb      	strb	r3, [r7, #15]
            break;
 8013500:	e11f      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_STATUS_REPORT:
        case 0x05:
            if(!sys.flags.auto_reporting)
 8013502:	4b6f      	ldr	r3, [pc, #444]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 8013504:	7ddb      	ldrb	r3, [r3, #23]
 8013506:	f003 0302 	and.w	r3, r3, #2
 801350a:	b2db      	uxtb	r3, r3
 801350c:	2b00      	cmp	r3, #0
 801350e:	d104      	bne.n	801351a <protocol_enqueue_realtime_command+0x37e>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 8013510:	4b69      	ldr	r3, [pc, #420]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 8013512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013514:	2101      	movs	r1, #1
 8013516:	4869      	ldr	r0, [pc, #420]	; (80136bc <protocol_enqueue_realtime_command+0x520>)
 8013518:	4798      	blx	r3
            drop = true;
 801351a:	2301      	movs	r3, #1
 801351c:	73fb      	strb	r3, [r7, #15]
            break;
 801351e:	e110      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_CYCLE_START:
            system_set_exec_state_flag(EXEC_CYCLE_START);
 8013520:	4b65      	ldr	r3, [pc, #404]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 8013522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013524:	2102      	movs	r1, #2
 8013526:	4865      	ldr	r0, [pc, #404]	; (80136bc <protocol_enqueue_realtime_command+0x520>)
 8013528:	4798      	blx	r3
            // Cancel any pending tool change
            gc_state.tool_change = false;
 801352a:	4b67      	ldr	r3, [pc, #412]	; (80136c8 <protocol_enqueue_realtime_command+0x52c>)
 801352c:	2200      	movs	r2, #0
 801352e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
            drop = true;
 8013532:	2301      	movs	r3, #1
 8013534:	73fb      	strb	r3, [r7, #15]
            break;
 8013536:	e104      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_FEED_HOLD:
            system_set_exec_state_flag(EXEC_FEED_HOLD);
 8013538:	4b5f      	ldr	r3, [pc, #380]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 801353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801353c:	2108      	movs	r1, #8
 801353e:	485f      	ldr	r0, [pc, #380]	; (80136bc <protocol_enqueue_realtime_command+0x520>)
 8013540:	4798      	blx	r3
            drop = true;
 8013542:	2301      	movs	r3, #1
 8013544:	73fb      	strb	r3, [r7, #15]
            break;
 8013546:	e0fc      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_SAFETY_DOOR:
            if(state_get() != STATE_SAFETY_DOOR) {
 8013548:	f009 fbea 	bl	801cd20 <state_get>
 801354c:	4603      	mov	r3, r0
 801354e:	2b40      	cmp	r3, #64	; 0x40
 8013550:	f000 80e6 	beq.w	8013720 <protocol_enqueue_realtime_command+0x584>
                system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 8013554:	4b58      	ldr	r3, [pc, #352]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 8013556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013558:	2140      	movs	r1, #64	; 0x40
 801355a:	4858      	ldr	r0, [pc, #352]	; (80136bc <protocol_enqueue_realtime_command+0x520>)
 801355c:	4798      	blx	r3
                drop = true;
 801355e:	2301      	movs	r3, #1
 8013560:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8013562:	e0dd      	b.n	8013720 <protocol_enqueue_realtime_command+0x584>

        case CMD_JOG_CANCEL:
            char_counter = 0;
 8013564:	4b51      	ldr	r3, [pc, #324]	; (80136ac <protocol_enqueue_realtime_command+0x510>)
 8013566:	2200      	movs	r2, #0
 8013568:	601a      	str	r2, [r3, #0]
            drop = true;
 801356a:	2301      	movs	r3, #1
 801356c:	73fb      	strb	r3, [r7, #15]
            hal.stream.cancel_read_buffer();
 801356e:	4b52      	ldr	r3, [pc, #328]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 8013570:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013574:	4798      	blx	r3
#ifdef KINEMATICS_API // needed when kinematics algorithm segments long jog distances (as it blocks reading from input stream)
            if (state_get() & STATE_JOG) // Block all other states from invoking motion cancel.
                system_set_exec_state_flag(EXEC_MOTION_CANCEL);
#endif
            if(grbl.on_jog_cancel)
 8013576:	4b55      	ldr	r3, [pc, #340]	; (80136cc <protocol_enqueue_realtime_command+0x530>)
 8013578:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801357c:	2b00      	cmp	r3, #0
 801357e:	f000 80d1 	beq.w	8013724 <protocol_enqueue_realtime_command+0x588>
                grbl.on_jog_cancel(state_get());
 8013582:	4b52      	ldr	r3, [pc, #328]	; (80136cc <protocol_enqueue_realtime_command+0x530>)
 8013584:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8013588:	f009 fbca 	bl	801cd20 <state_get>
 801358c:	4603      	mov	r3, r0
 801358e:	4618      	mov	r0, r3
 8013590:	47a0      	blx	r4
            break;
 8013592:	e0c7      	b.n	8013724 <protocol_enqueue_realtime_command+0x588>

        case CMD_GCODE_REPORT:
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 8013594:	4b48      	ldr	r3, [pc, #288]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 8013596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801359c:	4847      	ldr	r0, [pc, #284]	; (80136bc <protocol_enqueue_realtime_command+0x520>)
 801359e:	4798      	blx	r3
            drop = true;
 80135a0:	2301      	movs	r3, #1
 80135a2:	73fb      	strb	r3, [r7, #15]
            break;
 80135a4:	e0cd      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_PROBE_CONNECTED_TOGGLE:
            if(hal.probe.connected_toggle)
 80135a6:	4b44      	ldr	r3, [pc, #272]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 80135a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	f000 80bb 	beq.w	8013728 <protocol_enqueue_realtime_command+0x58c>
                hal.probe.connected_toggle();
 80135b2:	4b41      	ldr	r3, [pc, #260]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 80135b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80135b8:	4798      	blx	r3
            break;
 80135ba:	e0b5      	b.n	8013728 <protocol_enqueue_realtime_command+0x58c>

        case CMD_OPTIONAL_STOP_TOGGLE:
            if(!hal.signals_cap.stop_disable) // Not available as realtime command if HAL supports physical switch
 80135bc:	4b3e      	ldr	r3, [pc, #248]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 80135be:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 80135c2:	f003 0320 	and.w	r3, r3, #32
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	f040 80af 	bne.w	801372c <protocol_enqueue_realtime_command+0x590>
                sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 80135ce:	4b3c      	ldr	r3, [pc, #240]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 80135d0:	7d9b      	ldrb	r3, [r3, #22]
 80135d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135d6:	b2db      	uxtb	r3, r3
 80135d8:	2b00      	cmp	r3, #0
 80135da:	bf0c      	ite	eq
 80135dc:	2301      	moveq	r3, #1
 80135de:	2300      	movne	r3, #0
 80135e0:	b2d9      	uxtb	r1, r3
 80135e2:	4a37      	ldr	r2, [pc, #220]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 80135e4:	7d93      	ldrb	r3, [r2, #22]
 80135e6:	f361 1386 	bfi	r3, r1, #6, #1
 80135ea:	7593      	strb	r3, [r2, #22]
            break;
 80135ec:	e09e      	b.n	801372c <protocol_enqueue_realtime_command+0x590>

        case CMD_SINGLE_BLOCK_TOGGLE:
            if(!hal.signals_cap.single_block) // Not available as realtime command if HAL supports physical switch
 80135ee:	4b32      	ldr	r3, [pc, #200]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 80135f0:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 80135f4:	f003 0308 	and.w	r3, r3, #8
 80135f8:	b2db      	uxtb	r3, r3
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	f040 8098 	bne.w	8013730 <protocol_enqueue_realtime_command+0x594>
                sys.flags.single_block = !sys.flags.single_block;
 8013600:	4b2f      	ldr	r3, [pc, #188]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 8013602:	7d9b      	ldrb	r3, [r3, #22]
 8013604:	b25b      	sxtb	r3, r3
 8013606:	43db      	mvns	r3, r3
 8013608:	b2db      	uxtb	r3, r3
 801360a:	09db      	lsrs	r3, r3, #7
 801360c:	b2d9      	uxtb	r1, r3
 801360e:	4a2c      	ldr	r2, [pc, #176]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 8013610:	7d93      	ldrb	r3, [r2, #22]
 8013612:	f361 13c7 	bfi	r3, r1, #7, #1
 8013616:	7593      	strb	r3, [r2, #22]
            break;
 8013618:	e08a      	b.n	8013730 <protocol_enqueue_realtime_command+0x594>

        case CMD_PID_REPORT:
            system_set_exec_state_flag(EXEC_PID_REPORT);
 801361a:	4b27      	ldr	r3, [pc, #156]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 801361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801361e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013622:	4826      	ldr	r0, [pc, #152]	; (80136bc <protocol_enqueue_realtime_command+0x520>)
 8013624:	4798      	blx	r3
            drop = true;
 8013626:	2301      	movs	r3, #1
 8013628:	73fb      	strb	r3, [r7, #15]
            break;
 801362a:	e08a      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_MPG_MODE_TOGGLE:           // Switch off MPG mode
            if(hal.stream.type == StreamType_MPG)
 801362c:	4b22      	ldr	r3, [pc, #136]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 801362e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8013632:	2b01      	cmp	r3, #1
 8013634:	d17e      	bne.n	8013734 <protocol_enqueue_realtime_command+0x598>
                stream_mpg_enable(false);
 8013636:	2000      	movs	r0, #0
 8013638:	f00c fb96 	bl	801fd68 <stream_mpg_enable>
            break;
 801363c:	e07a      	b.n	8013734 <protocol_enqueue_realtime_command+0x598>

        case CMD_AUTO_REPORTING_TOGGLE:
            if(settings.report_interval)
 801363e:	4b1c      	ldr	r3, [pc, #112]	; (80136b0 <protocol_enqueue_realtime_command+0x514>)
 8013640:	8a9b      	ldrh	r3, [r3, #20]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d078      	beq.n	8013738 <protocol_enqueue_realtime_command+0x59c>
                sys.flags.auto_reporting = !sys.flags.auto_reporting;
 8013646:	4b1e      	ldr	r3, [pc, #120]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 8013648:	7ddb      	ldrb	r3, [r3, #23]
 801364a:	f003 0302 	and.w	r3, r3, #2
 801364e:	b2db      	uxtb	r3, r3
 8013650:	2b00      	cmp	r3, #0
 8013652:	bf0c      	ite	eq
 8013654:	2301      	moveq	r3, #1
 8013656:	2300      	movne	r3, #0
 8013658:	b2d9      	uxtb	r1, r3
 801365a:	4a19      	ldr	r2, [pc, #100]	; (80136c0 <protocol_enqueue_realtime_command+0x524>)
 801365c:	7dd3      	ldrb	r3, [r2, #23]
 801365e:	f361 0341 	bfi	r3, r1, #1, #1
 8013662:	75d3      	strb	r3, [r2, #23]
            break;
 8013664:	e068      	b.n	8013738 <protocol_enqueue_realtime_command+0x59c>
        case CMD_OVERRIDE_FEED_FINE_PLUS:
        case CMD_OVERRIDE_FEED_FINE_MINUS:
        case CMD_OVERRIDE_RAPID_RESET:
        case CMD_OVERRIDE_RAPID_MEDIUM:
        case CMD_OVERRIDE_RAPID_LOW:
            drop = true;
 8013666:	2301      	movs	r3, #1
 8013668:	73fb      	strb	r3, [r7, #15]
            enqueue_feed_override(c);
 801366a:	79fb      	ldrb	r3, [r7, #7]
 801366c:	4618      	mov	r0, r3
 801366e:	f7fd fb7d 	bl	8010d6c <enqueue_feed_override>
            break;
 8013672:	e066      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
        case CMD_OVERRIDE_SPINDLE_COARSE_PLUS:
        case CMD_OVERRIDE_SPINDLE_COARSE_MINUS:
        case CMD_OVERRIDE_SPINDLE_FINE_PLUS:
        case CMD_OVERRIDE_SPINDLE_FINE_MINUS:
        case CMD_OVERRIDE_SPINDLE_STOP:
            drop = true;
 8013674:	2301      	movs	r3, #1
 8013676:	73fb      	strb	r3, [r7, #15]
            enqueue_spindle_override((uint8_t)c);
 8013678:	79fb      	ldrb	r3, [r7, #7]
 801367a:	4618      	mov	r0, r3
 801367c:	f7fd fbba 	bl	8010df4 <enqueue_spindle_override>
            break;
 8013680:	e05f      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_OVERRIDE_COOLANT_FLOOD_TOGGLE:
        case CMD_OVERRIDE_COOLANT_MIST_TOGGLE:
        case CMD_OVERRIDE_FAN0_TOGGLE:
            drop = true;
 8013682:	2301      	movs	r3, #1
 8013684:	73fb      	strb	r3, [r7, #15]
            enqueue_coolant_override((uint8_t)c);
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	4618      	mov	r0, r3
 801368a:	f7fd fbf7 	bl	8010e7c <enqueue_coolant_override>
            break;
 801368e:	e058      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>

        case CMD_REBOOT:
            if(esc && hal.reboot)
 8013690:	4b0f      	ldr	r3, [pc, #60]	; (80136d0 <protocol_enqueue_realtime_command+0x534>)
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d051      	beq.n	801373c <protocol_enqueue_realtime_command+0x5a0>
 8013698:	4b07      	ldr	r3, [pc, #28]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 801369a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d04c      	beq.n	801373c <protocol_enqueue_realtime_command+0x5a0>
                hal.reboot(); // Force MCU reboot. This call should never return.
 80136a2:	4b05      	ldr	r3, [pc, #20]	; (80136b8 <protocol_enqueue_realtime_command+0x51c>)
 80136a4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80136a8:	4798      	blx	r3
            break;
 80136aa:	e047      	b.n	801373c <protocol_enqueue_realtime_command+0x5a0>
 80136ac:	20001a40 	.word	0x20001a40
 80136b0:	20001cf0 	.word	0x20001cf0
 80136b4:	20001c49 	.word	0x20001c49
 80136b8:	200016a0 	.word	0x200016a0
 80136bc:	20001568 	.word	0x20001568
 80136c0:	20001520 	.word	0x20001520
 80136c4:	8001ffff 	.word	0x8001ffff
 80136c8:	2000137c 	.word	0x2000137c
 80136cc:	200015b8 	.word	0x200015b8
 80136d0:	20001c74 	.word	0x20001c74

        default:
            if((c < ' ' && c != ASCII_BS) || (c > ASCII_DEL && c <= 0xBF))
 80136d4:	79fb      	ldrb	r3, [r7, #7]
 80136d6:	2b1f      	cmp	r3, #31
 80136d8:	d802      	bhi.n	80136e0 <protocol_enqueue_realtime_command+0x544>
 80136da:	79fb      	ldrb	r3, [r7, #7]
 80136dc:	2b08      	cmp	r3, #8
 80136de:	d106      	bne.n	80136ee <protocol_enqueue_realtime_command+0x552>
 80136e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	da2b      	bge.n	8013740 <protocol_enqueue_realtime_command+0x5a4>
 80136e8:	79fb      	ldrb	r3, [r7, #7]
 80136ea:	2bbf      	cmp	r3, #191	; 0xbf
 80136ec:	d828      	bhi.n	8013740 <protocol_enqueue_realtime_command+0x5a4>
                drop = grbl.on_unknown_realtime_cmd == NULL || grbl.on_unknown_realtime_cmd(c);
 80136ee:	4b53      	ldr	r3, [pc, #332]	; (801383c <protocol_enqueue_realtime_command+0x6a0>)
 80136f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d007      	beq.n	8013706 <protocol_enqueue_realtime_command+0x56a>
 80136f6:	4b51      	ldr	r3, [pc, #324]	; (801383c <protocol_enqueue_realtime_command+0x6a0>)
 80136f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80136fa:	79fa      	ldrb	r2, [r7, #7]
 80136fc:	4610      	mov	r0, r2
 80136fe:	4798      	blx	r3
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	d001      	beq.n	801370a <protocol_enqueue_realtime_command+0x56e>
 8013706:	2301      	movs	r3, #1
 8013708:	e000      	b.n	801370c <protocol_enqueue_realtime_command+0x570>
 801370a:	2300      	movs	r3, #0
 801370c:	73fb      	strb	r3, [r7, #15]
 801370e:	7bfb      	ldrb	r3, [r7, #15]
 8013710:	f003 0301 	and.w	r3, r3, #1
 8013714:	73fb      	strb	r3, [r7, #15]
            break;
 8013716:	e013      	b.n	8013740 <protocol_enqueue_realtime_command+0x5a4>
            break;
 8013718:	bf00      	nop
 801371a:	e012      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 801371c:	bf00      	nop
 801371e:	e010      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 8013720:	bf00      	nop
 8013722:	e00e      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 8013724:	bf00      	nop
 8013726:	e00c      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 8013728:	bf00      	nop
 801372a:	e00a      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 801372c:	bf00      	nop
 801372e:	e008      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 8013730:	bf00      	nop
 8013732:	e006      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 8013734:	bf00      	nop
 8013736:	e004      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 8013738:	bf00      	nop
 801373a:	e002      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 801373c:	bf00      	nop
 801373e:	e000      	b.n	8013742 <protocol_enqueue_realtime_command+0x5a6>
            break;
 8013740:	bf00      	nop

    // 2. Process printable ASCII characters and top-bit set characters
    //    If legacy realtime commands are disabled they are returned to the input stream
    //    when appearing in settings ($ commands) or comments

    if(!drop) switch ((unsigned char)c) {
 8013742:	7bfb      	ldrb	r3, [r7, #15]
 8013744:	f083 0301 	eor.w	r3, r3, #1
 8013748:	b2db      	uxtb	r3, r3
 801374a:	2b00      	cmp	r3, #0
 801374c:	d069      	beq.n	8013822 <protocol_enqueue_realtime_command+0x686>
 801374e:	79fb      	ldrb	r3, [r7, #7]
 8013750:	2b7e      	cmp	r3, #126	; 0x7e
 8013752:	d01c      	beq.n	801378e <protocol_enqueue_realtime_command+0x5f2>
 8013754:	2b7e      	cmp	r3, #126	; 0x7e
 8013756:	dc4c      	bgt.n	80137f2 <protocol_enqueue_realtime_command+0x656>
 8013758:	2b21      	cmp	r3, #33	; 0x21
 801375a:	d033      	beq.n	80137c4 <protocol_enqueue_realtime_command+0x628>
 801375c:	2b3f      	cmp	r3, #63	; 0x3f
 801375e:	d148      	bne.n	80137f2 <protocol_enqueue_realtime_command+0x656>

        case CMD_STATUS_REPORT_LEGACY:
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 8013760:	4b37      	ldr	r3, [pc, #220]	; (8013840 <protocol_enqueue_realtime_command+0x6a4>)
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	f083 0301 	eor.w	r3, r3, #1
 8013768:	b2db      	uxtb	r3, r3
 801376a:	2b00      	cmp	r3, #0
 801376c:	d107      	bne.n	801377e <protocol_enqueue_realtime_command+0x5e2>
 801376e:	4b35      	ldr	r3, [pc, #212]	; (8013844 <protocol_enqueue_realtime_command+0x6a8>)
 8013770:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8013774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013778:	b2db      	uxtb	r3, r3
 801377a:	2b00      	cmp	r3, #0
 801377c:	d04c      	beq.n	8013818 <protocol_enqueue_realtime_command+0x67c>
                system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801377e:	4b32      	ldr	r3, [pc, #200]	; (8013848 <protocol_enqueue_realtime_command+0x6ac>)
 8013780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013782:	2101      	movs	r1, #1
 8013784:	4831      	ldr	r0, [pc, #196]	; (801384c <protocol_enqueue_realtime_command+0x6b0>)
 8013786:	4798      	blx	r3
                drop = true;
 8013788:	2301      	movs	r3, #1
 801378a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 801378c:	e044      	b.n	8013818 <protocol_enqueue_realtime_command+0x67c>

        case CMD_CYCLE_START_LEGACY:
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 801378e:	4b2c      	ldr	r3, [pc, #176]	; (8013840 <protocol_enqueue_realtime_command+0x6a4>)
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	f083 0301 	eor.w	r3, r3, #1
 8013796:	b2db      	uxtb	r3, r3
 8013798:	2b00      	cmp	r3, #0
 801379a:	d107      	bne.n	80137ac <protocol_enqueue_realtime_command+0x610>
 801379c:	4b29      	ldr	r3, [pc, #164]	; (8013844 <protocol_enqueue_realtime_command+0x6a8>)
 801379e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80137a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d037      	beq.n	801381c <protocol_enqueue_realtime_command+0x680>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 80137ac:	4b26      	ldr	r3, [pc, #152]	; (8013848 <protocol_enqueue_realtime_command+0x6ac>)
 80137ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137b0:	2102      	movs	r1, #2
 80137b2:	4826      	ldr	r0, [pc, #152]	; (801384c <protocol_enqueue_realtime_command+0x6b0>)
 80137b4:	4798      	blx	r3
                // Cancel any pending tool change
                gc_state.tool_change = false;
 80137b6:	4b26      	ldr	r3, [pc, #152]	; (8013850 <protocol_enqueue_realtime_command+0x6b4>)
 80137b8:	2200      	movs	r2, #0
 80137ba:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
                drop = true;
 80137be:	2301      	movs	r3, #1
 80137c0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80137c2:	e02b      	b.n	801381c <protocol_enqueue_realtime_command+0x680>

        case CMD_FEED_HOLD_LEGACY:
            if(!keep_rt_commands || settings.flags.legacy_rt_commands) {
 80137c4:	4b1e      	ldr	r3, [pc, #120]	; (8013840 <protocol_enqueue_realtime_command+0x6a4>)
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	f083 0301 	eor.w	r3, r3, #1
 80137cc:	b2db      	uxtb	r3, r3
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d107      	bne.n	80137e2 <protocol_enqueue_realtime_command+0x646>
 80137d2:	4b1c      	ldr	r3, [pc, #112]	; (8013844 <protocol_enqueue_realtime_command+0x6a8>)
 80137d4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80137d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d01e      	beq.n	8013820 <protocol_enqueue_realtime_command+0x684>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 80137e2:	4b19      	ldr	r3, [pc, #100]	; (8013848 <protocol_enqueue_realtime_command+0x6ac>)
 80137e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137e6:	2108      	movs	r1, #8
 80137e8:	4818      	ldr	r0, [pc, #96]	; (801384c <protocol_enqueue_realtime_command+0x6b0>)
 80137ea:	4798      	blx	r3
                drop = true;
 80137ec:	2301      	movs	r3, #1
 80137ee:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80137f0:	e016      	b.n	8013820 <protocol_enqueue_realtime_command+0x684>

        default: // Drop top bit set characters
            drop = !(keep_rt_commands || (unsigned char)c < 0x7F);
 80137f2:	4b13      	ldr	r3, [pc, #76]	; (8013840 <protocol_enqueue_realtime_command+0x6a4>)
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	f083 0301 	eor.w	r3, r3, #1
 80137fa:	b2db      	uxtb	r3, r3
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d004      	beq.n	801380a <protocol_enqueue_realtime_command+0x66e>
 8013800:	79fb      	ldrb	r3, [r7, #7]
 8013802:	2b7e      	cmp	r3, #126	; 0x7e
 8013804:	d901      	bls.n	801380a <protocol_enqueue_realtime_command+0x66e>
 8013806:	2301      	movs	r3, #1
 8013808:	e000      	b.n	801380c <protocol_enqueue_realtime_command+0x670>
 801380a:	2300      	movs	r3, #0
 801380c:	73fb      	strb	r3, [r7, #15]
 801380e:	7bfb      	ldrb	r3, [r7, #15]
 8013810:	f003 0301 	and.w	r3, r3, #1
 8013814:	73fb      	strb	r3, [r7, #15]
            break;
 8013816:	e004      	b.n	8013822 <protocol_enqueue_realtime_command+0x686>
            break;
 8013818:	bf00      	nop
 801381a:	e002      	b.n	8013822 <protocol_enqueue_realtime_command+0x686>
            break;
 801381c:	bf00      	nop
 801381e:	e000      	b.n	8013822 <protocol_enqueue_realtime_command+0x686>
            break;
 8013820:	bf00      	nop
    }

    esc = c == ASCII_ESC;
 8013822:	79fb      	ldrb	r3, [r7, #7]
 8013824:	2b1b      	cmp	r3, #27
 8013826:	bf0c      	ite	eq
 8013828:	2301      	moveq	r3, #1
 801382a:	2300      	movne	r3, #0
 801382c:	b2da      	uxtb	r2, r3
 801382e:	4b09      	ldr	r3, [pc, #36]	; (8013854 <protocol_enqueue_realtime_command+0x6b8>)
 8013830:	701a      	strb	r2, [r3, #0]

    return drop;
 8013832:	7bfb      	ldrb	r3, [r7, #15]
}
 8013834:	4618      	mov	r0, r3
 8013836:	3714      	adds	r7, #20
 8013838:	46bd      	mov	sp, r7
 801383a:	bd90      	pop	{r4, r7, pc}
 801383c:	200015b8 	.word	0x200015b8
 8013840:	20001c49 	.word	0x20001c49
 8013844:	20001cf0 	.word	0x20001cf0
 8013848:	200016a0 	.word	0x200016a0
 801384c:	20001568 	.word	0x20001568
 8013850:	2000137c 	.word	0x2000137c
 8013854:	20001c74 	.word	0x20001c74

08013858 <protocol_enqueue_rt_command>:

// Enqueue a function to be called once by the
// foreground process, typically enqueued from an interrupt handler.
ISR_CODE bool ISR_FUNC(protocol_enqueue_rt_command)(on_execute_realtime_ptr fn)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b084      	sub	sp, #16
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
    bool ok;
    uint_fast8_t bptr = (realtime_queue.head + 1) & (RT_QUEUE_SIZE - 1);    // Get next head pointer
 8013860:	4b12      	ldr	r3, [pc, #72]	; (80138ac <protocol_enqueue_rt_command+0x54>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	3301      	adds	r3, #1
 8013866:	f003 0307 	and.w	r3, r3, #7
 801386a:	60fb      	str	r3, [r7, #12]

    if((ok = bptr != realtime_queue.tail)) {          // If not buffer full
 801386c:	4b0f      	ldr	r3, [pc, #60]	; (80138ac <protocol_enqueue_rt_command+0x54>)
 801386e:	685b      	ldr	r3, [r3, #4]
 8013870:	68fa      	ldr	r2, [r7, #12]
 8013872:	429a      	cmp	r2, r3
 8013874:	bf14      	ite	ne
 8013876:	2301      	movne	r3, #1
 8013878:	2300      	moveq	r3, #0
 801387a:	72fb      	strb	r3, [r7, #11]
 801387c:	7afb      	ldrb	r3, [r7, #11]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00f      	beq.n	80138a2 <protocol_enqueue_rt_command+0x4a>
        realtime_queue.fn[realtime_queue.head] = fn;  // add function pointer to buffer,
 8013882:	4b0a      	ldr	r3, [pc, #40]	; (80138ac <protocol_enqueue_rt_command+0x54>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	4909      	ldr	r1, [pc, #36]	; (80138ac <protocol_enqueue_rt_command+0x54>)
 8013888:	3302      	adds	r3, #2
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        realtime_queue.head = bptr;                   // update pointer and
 8013890:	4a06      	ldr	r2, [pc, #24]	; (80138ac <protocol_enqueue_rt_command+0x54>)
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	6013      	str	r3, [r2, #0]
        system_set_exec_state_flag(EXEC_RT_COMMAND);  // flag it for execute
 8013896:	4b06      	ldr	r3, [pc, #24]	; (80138b0 <protocol_enqueue_rt_command+0x58>)
 8013898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801389a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801389e:	4805      	ldr	r0, [pc, #20]	; (80138b4 <protocol_enqueue_rt_command+0x5c>)
 80138a0:	4798      	blx	r3
    }

    return ok;
 80138a2:	7afb      	ldrb	r3, [r7, #11]
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3710      	adds	r7, #16
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	20001c4c 	.word	0x20001c4c
 80138b0:	200016a0 	.word	0x200016a0
 80138b4:	20001568 	.word	0x20001568

080138b8 <protocol_execute_rt_commands>:

// Execute enqueued functions.
static void protocol_execute_rt_commands (void)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b082      	sub	sp, #8
 80138bc:	af00      	add	r7, sp, #0
    while(realtime_queue.tail != realtime_queue.head) {
 80138be:	e01d      	b.n	80138fc <protocol_execute_rt_commands+0x44>
        uint_fast8_t bptr = realtime_queue.tail;
 80138c0:	4b18      	ldr	r3, [pc, #96]	; (8013924 <protocol_execute_rt_commands+0x6c>)
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	607b      	str	r3, [r7, #4]
        on_execute_realtime_ptr call;
        if((call = realtime_queue.fn[bptr])) {
 80138c6:	4a17      	ldr	r2, [pc, #92]	; (8013924 <protocol_execute_rt_commands+0x6c>)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	3302      	adds	r3, #2
 80138cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138d0:	603b      	str	r3, [r7, #0]
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d00b      	beq.n	80138f0 <protocol_execute_rt_commands+0x38>
            realtime_queue.fn[bptr] = NULL;
 80138d8:	4a12      	ldr	r2, [pc, #72]	; (8013924 <protocol_execute_rt_commands+0x6c>)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	3302      	adds	r3, #2
 80138de:	2100      	movs	r1, #0
 80138e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            call(state_get());
 80138e4:	f009 fa1c 	bl	801cd20 <state_get>
 80138e8:	4602      	mov	r2, r0
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	4610      	mov	r0, r2
 80138ee:	4798      	blx	r3
        }
        realtime_queue.tail = (bptr + 1) & (RT_QUEUE_SIZE - 1);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	3301      	adds	r3, #1
 80138f4:	f003 0307 	and.w	r3, r3, #7
 80138f8:	4a0a      	ldr	r2, [pc, #40]	; (8013924 <protocol_execute_rt_commands+0x6c>)
 80138fa:	6053      	str	r3, [r2, #4]
    while(realtime_queue.tail != realtime_queue.head) {
 80138fc:	4b09      	ldr	r3, [pc, #36]	; (8013924 <protocol_execute_rt_commands+0x6c>)
 80138fe:	685a      	ldr	r2, [r3, #4]
 8013900:	4b08      	ldr	r3, [pc, #32]	; (8013924 <protocol_execute_rt_commands+0x6c>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	429a      	cmp	r2, r3
 8013906:	d1db      	bne.n	80138c0 <protocol_execute_rt_commands+0x8>
    }

    if(!sys.driver_started)
 8013908:	4b07      	ldr	r3, [pc, #28]	; (8013928 <protocol_execute_rt_commands+0x70>)
 801390a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 801390e:	f083 0301 	eor.w	r3, r3, #1
 8013912:	b2db      	uxtb	r3, r3
 8013914:	2b00      	cmp	r3, #0
 8013916:	d000      	beq.n	801391a <protocol_execute_rt_commands+0x62>
        while(true);
 8013918:	e7fe      	b.n	8013918 <protocol_execute_rt_commands+0x60>
}
 801391a:	bf00      	nop
 801391c:	3708      	adds	r7, #8
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	20001c4c 	.word	0x20001c4c
 8013928:	20001520 	.word	0x20001520

0801392c <protocol_execute_noop>:

void protocol_execute_noop (sys_state_t state)
{
 801392c:	b480      	push	{r7}
 801392e:	b083      	sub	sp, #12
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
    (void)state;
}
 8013934:	bf00      	nop
 8013936:	370c      	adds	r7, #12
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr

08013940 <matchhere>:
    return 0;
}

/* matchhere: search for regexp at beginning of text */
int matchhere(char *regexp, char *text)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
    if (regexp[0] == '\0')
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d101      	bne.n	8013956 <matchhere+0x16>
        return 1;
 8013952:	2301      	movs	r3, #1
 8013954:	e039      	b.n	80139ca <matchhere+0x8a>
    if (regexp[1] == '*')
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	3301      	adds	r3, #1
 801395a:	781b      	ldrb	r3, [r3, #0]
 801395c:	2b2a      	cmp	r3, #42	; 0x2a
 801395e:	d10a      	bne.n	8013976 <matchhere+0x36>
        return matchstar(regexp[0], regexp+2, text);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	4618      	mov	r0, r3
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	3302      	adds	r3, #2
 801396a:	683a      	ldr	r2, [r7, #0]
 801396c:	4619      	mov	r1, r3
 801396e:	f000 f830 	bl	80139d2 <matchstar>
 8013972:	4603      	mov	r3, r0
 8013974:	e029      	b.n	80139ca <matchhere+0x8a>
    if (regexp[0] == '$' && regexp[1] == '\0')
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	2b24      	cmp	r3, #36	; 0x24
 801397c:	d10c      	bne.n	8013998 <matchhere+0x58>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	3301      	adds	r3, #1
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d107      	bne.n	8013998 <matchhere+0x58>
        return *text == '\0';
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	781b      	ldrb	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	bf0c      	ite	eq
 8013990:	2301      	moveq	r3, #1
 8013992:	2300      	movne	r3, #0
 8013994:	b2db      	uxtb	r3, r3
 8013996:	e018      	b.n	80139ca <matchhere+0x8a>
    if (*text!='\0' && (regexp[0]=='.' || regexp[0]==*text))
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d013      	beq.n	80139c8 <matchhere+0x88>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	2b2e      	cmp	r3, #46	; 0x2e
 80139a6:	d005      	beq.n	80139b4 <matchhere+0x74>
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	781a      	ldrb	r2, [r3, #0]
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d109      	bne.n	80139c8 <matchhere+0x88>
        return matchhere(regexp+1, text+1);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	1c5a      	adds	r2, r3, #1
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	3301      	adds	r3, #1
 80139bc:	4619      	mov	r1, r3
 80139be:	4610      	mov	r0, r2
 80139c0:	f7ff ffbe 	bl	8013940 <matchhere>
 80139c4:	4603      	mov	r3, r0
 80139c6:	e000      	b.n	80139ca <matchhere+0x8a>
    return 0;
 80139c8:	2300      	movs	r3, #0
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3708      	adds	r7, #8
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <matchstar>:

/* matchstar: search for c*regexp at beginning of text */
int matchstar(int c, char *regexp, char *text)
{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b084      	sub	sp, #16
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	60b9      	str	r1, [r7, #8]
 80139dc:	607a      	str	r2, [r7, #4]
    do {    /* a * matches zero or more instances */
        if (matchhere(regexp, text))
 80139de:	6879      	ldr	r1, [r7, #4]
 80139e0:	68b8      	ldr	r0, [r7, #8]
 80139e2:	f7ff ffad 	bl	8013940 <matchhere>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d001      	beq.n	80139f0 <matchstar+0x1e>
            return 1;
 80139ec:	2301      	movs	r3, #1
 80139ee:	e00f      	b.n	8013a10 <matchstar+0x3e>
    } while (*text != '\0' && (*text++ == c || c == '.'));
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d00a      	beq.n	8013a0e <matchstar+0x3c>
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	1c5a      	adds	r2, r3, #1
 80139fc:	607a      	str	r2, [r7, #4]
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	461a      	mov	r2, r3
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	4293      	cmp	r3, r2
 8013a06:	d0ea      	beq.n	80139de <matchstar+0xc>
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8013a0c:	d0e7      	beq.n	80139de <matchstar+0xc>
    return 0;
 8013a0e:	2300      	movs	r3, #0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <appendbuf>:
static const char vbar[2] = { '|', '\0' };

// Append a number of strings to the static buffer
// NOTE: do NOT use for several int/float conversions as these share the same underlying buffer!
static char *appendbuf (int argc, ...)
{
 8013a18:	b40f      	push	{r0, r1, r2, r3}
 8013a1a:	b480      	push	{r7}
 8013a1c:	b085      	sub	sp, #20
 8013a1e:	af00      	add	r7, sp, #0
    char c, *s = buf, *arg;
 8013a20:	4b13      	ldr	r3, [pc, #76]	; (8013a70 <appendbuf+0x58>)
 8013a22:	60fb      	str	r3, [r7, #12]

    va_list list;
    va_start(list, argc);
 8013a24:	f107 031c 	add.w	r3, r7, #28
 8013a28:	603b      	str	r3, [r7, #0]

    while(argc--) {
 8013a2a:	e014      	b.n	8013a56 <appendbuf+0x3e>
        arg = va_arg(list, char *);
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	1d1a      	adds	r2, r3, #4
 8013a30:	603a      	str	r2, [r7, #0]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	60bb      	str	r3, [r7, #8]
        do {
            c = *s++ = *arg++;
 8013a36:	68ba      	ldr	r2, [r7, #8]
 8013a38:	1c53      	adds	r3, r2, #1
 8013a3a:	60bb      	str	r3, [r7, #8]
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	1c59      	adds	r1, r3, #1
 8013a40:	60f9      	str	r1, [r7, #12]
 8013a42:	7812      	ldrb	r2, [r2, #0]
 8013a44:	701a      	strb	r2, [r3, #0]
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	71fb      	strb	r3, [r7, #7]
        } while(c);
 8013a4a:	79fb      	ldrb	r3, [r7, #7]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d1f2      	bne.n	8013a36 <appendbuf+0x1e>
        s--;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	3b01      	subs	r3, #1
 8013a54:	60fb      	str	r3, [r7, #12]
    while(argc--) {
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	1e5a      	subs	r2, r3, #1
 8013a5a:	61ba      	str	r2, [r7, #24]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1e5      	bne.n	8013a2c <appendbuf+0x14>
    }

    va_end(list);

    return buf;
 8013a60:	4b03      	ldr	r3, [pc, #12]	; (8013a70 <appendbuf+0x58>)
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3714      	adds	r7, #20
 8013a66:	46bd      	mov	sp, r7
 8013a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6c:	b004      	add	sp, #16
 8013a6e:	4770      	bx	lr
 8013a70:	20001c78 	.word	0x20001c78

08013a74 <map_coord_system>:

static char *map_coord_system (coord_system_id_t id)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	71fb      	strb	r3, [r7, #7]
    uint8_t g5x = id + 54;
 8013a7e:	79fb      	ldrb	r3, [r7, #7]
 8013a80:	3336      	adds	r3, #54	; 0x36
 8013a82:	73fb      	strb	r3, [r7, #15]

    strcpy(buf, uitoa((uint32_t)(g5x > 59 ? 59 : g5x)));
 8013a84:	7bfb      	ldrb	r3, [r7, #15]
 8013a86:	2b3b      	cmp	r3, #59	; 0x3b
 8013a88:	bf28      	it	cs
 8013a8a:	233b      	movcs	r3, #59	; 0x3b
 8013a8c:	b2db      	uxtb	r3, r3
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7fc f944 	bl	800fd1c <uitoa>
 8013a94:	4603      	mov	r3, r0
 8013a96:	4619      	mov	r1, r3
 8013a98:	4810      	ldr	r0, [pc, #64]	; (8013adc <map_coord_system+0x68>)
 8013a9a:	f012 fb25 	bl	80260e8 <strcpy>
    if(g5x > 59) {
 8013a9e:	7bfb      	ldrb	r3, [r7, #15]
 8013aa0:	2b3b      	cmp	r3, #59	; 0x3b
 8013aa2:	d915      	bls.n	8013ad0 <map_coord_system+0x5c>
        strcat(buf, ".");
 8013aa4:	480d      	ldr	r0, [pc, #52]	; (8013adc <map_coord_system+0x68>)
 8013aa6:	f7ec fbf1 	bl	800028c <strlen>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	461a      	mov	r2, r3
 8013aae:	4b0b      	ldr	r3, [pc, #44]	; (8013adc <map_coord_system+0x68>)
 8013ab0:	4413      	add	r3, r2
 8013ab2:	490b      	ldr	r1, [pc, #44]	; (8013ae0 <map_coord_system+0x6c>)
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	460b      	mov	r3, r1
 8013ab8:	881b      	ldrh	r3, [r3, #0]
 8013aba:	8013      	strh	r3, [r2, #0]
        strcat(buf, uitoa((uint32_t)(g5x - 59)));
 8013abc:	7bfb      	ldrb	r3, [r7, #15]
 8013abe:	3b3b      	subs	r3, #59	; 0x3b
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7fc f92b 	bl	800fd1c <uitoa>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4804      	ldr	r0, [pc, #16]	; (8013adc <map_coord_system+0x68>)
 8013acc:	f012 f9bf 	bl	8025e4e <strcat>
    }

    return buf;
 8013ad0:	4b02      	ldr	r3, [pc, #8]	; (8013adc <map_coord_system+0x68>)
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3710      	adds	r7, #16
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	20001c78 	.word	0x20001c78
 8013ae0:	0802d470 	.word	0x0802d470

08013ae4 <get_axis_values_mm>:

// Convert axis position values to null terminated string (mm).
static char *get_axis_values_mm (float *axis_values)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
    uint_fast32_t idx;

    buf[0] = '\0';
 8013aec:	4b24      	ldr	r3, [pc, #144]	; (8013b80 <get_axis_values_mm+0x9c>)
 8013aee:	2200      	movs	r2, #0
 8013af0:	701a      	strb	r2, [r3, #0]

    for (idx = 0; idx < N_AXIS; idx++) {
 8013af2:	2300      	movs	r3, #0
 8013af4:	60fb      	str	r3, [r7, #12]
 8013af6:	e03b      	b.n	8013b70 <get_axis_values_mm+0x8c>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d116      	bne.n	8013b2c <get_axis_values_mm+0x48>
 8013afe:	4b21      	ldr	r3, [pc, #132]	; (8013b84 <get_axis_values_mm+0xa0>)
 8013b00:	795b      	ldrb	r3, [r3, #5]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d012      	beq.n	8013b2c <get_axis_values_mm+0x48>
            strcat(buf, ftoa(axis_values[idx] * 2.0f, N_DECIMAL_COORDVALUE_MM));
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	009b      	lsls	r3, r3, #2
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	edd3 7a00 	vldr	s15, [r3]
 8013b12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013b16:	2003      	movs	r0, #3
 8013b18:	eeb0 0a67 	vmov.f32	s0, s15
 8013b1c:	f7fc f93a 	bl	800fd94 <ftoa>
 8013b20:	4603      	mov	r3, r0
 8013b22:	4619      	mov	r1, r3
 8013b24:	4816      	ldr	r0, [pc, #88]	; (8013b80 <get_axis_values_mm+0x9c>)
 8013b26:	f012 f992 	bl	8025e4e <strcat>
 8013b2a:	e00f      	b.n	8013b4c <get_axis_values_mm+0x68>
        else
            strcat(buf, ftoa(axis_values[idx], N_DECIMAL_COORDVALUE_MM));
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	4413      	add	r3, r2
 8013b34:	edd3 7a00 	vldr	s15, [r3]
 8013b38:	2003      	movs	r0, #3
 8013b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8013b3e:	f7fc f929 	bl	800fd94 <ftoa>
 8013b42:	4603      	mov	r3, r0
 8013b44:	4619      	mov	r1, r3
 8013b46:	480e      	ldr	r0, [pc, #56]	; (8013b80 <get_axis_values_mm+0x9c>)
 8013b48:	f012 f981 	bl	8025e4e <strcat>
        if (idx < (N_AXIS - 1))
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d80b      	bhi.n	8013b6a <get_axis_values_mm+0x86>
            strcat(buf, ",");
 8013b52:	480b      	ldr	r0, [pc, #44]	; (8013b80 <get_axis_values_mm+0x9c>)
 8013b54:	f7ec fb9a 	bl	800028c <strlen>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	4b08      	ldr	r3, [pc, #32]	; (8013b80 <get_axis_values_mm+0x9c>)
 8013b5e:	4413      	add	r3, r2
 8013b60:	4909      	ldr	r1, [pc, #36]	; (8013b88 <get_axis_values_mm+0xa4>)
 8013b62:	461a      	mov	r2, r3
 8013b64:	460b      	mov	r3, r1
 8013b66:	881b      	ldrh	r3, [r3, #0]
 8013b68:	8013      	strh	r3, [r2, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	60fb      	str	r3, [r7, #12]
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2b02      	cmp	r3, #2
 8013b74:	d9c0      	bls.n	8013af8 <get_axis_values_mm+0x14>
    }

    return buf;
 8013b76:	4b02      	ldr	r3, [pc, #8]	; (8013b80 <get_axis_values_mm+0x9c>)
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3710      	adds	r7, #16
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	20001c78 	.word	0x20001c78
 8013b84:	2000137c 	.word	0x2000137c
 8013b88:	0802d474 	.word	0x0802d474

08013b8c <get_axis_values_inches>:

// Convert axis position values to null terminated string (inch).
static char *get_axis_values_inches (float *axis_values)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
    uint_fast32_t idx;

    buf[0] = '\0';
 8013b94:	4b28      	ldr	r3, [pc, #160]	; (8013c38 <get_axis_values_inches+0xac>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	701a      	strb	r2, [r3, #0]

    for (idx = 0; idx < N_AXIS; idx++) {
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	60fb      	str	r3, [r7, #12]
 8013b9e:	e043      	b.n	8013c28 <get_axis_values_inches+0x9c>
        if(idx == X_AXIS && gc_state.modal.diameter_mode)
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d11a      	bne.n	8013bdc <get_axis_values_inches+0x50>
 8013ba6:	4b25      	ldr	r3, [pc, #148]	; (8013c3c <get_axis_values_inches+0xb0>)
 8013ba8:	795b      	ldrb	r3, [r3, #5]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d016      	beq.n	8013bdc <get_axis_values_inches+0x50>
            strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM * 2.0f, N_DECIMAL_COORDVALUE_INCH));
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	4413      	add	r3, r2
 8013bb6:	edd3 7a00 	vldr	s15, [r3]
 8013bba:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8013c40 <get_axis_values_inches+0xb4>
 8013bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013bc6:	2004      	movs	r0, #4
 8013bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8013bcc:	f7fc f8e2 	bl	800fd94 <ftoa>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	4818      	ldr	r0, [pc, #96]	; (8013c38 <get_axis_values_inches+0xac>)
 8013bd6:	f012 f93a 	bl	8025e4e <strcat>
 8013bda:	e013      	b.n	8013c04 <get_axis_values_inches+0x78>
#if N_AXIS > 3
        else if(idx > Z_AXIS && bit_istrue(settings.steppers.is_rotational.mask, bit(idx)))
            strcat(buf, ftoa(axis_values[idx], N_DECIMAL_COORDVALUE_MM));
#endif
        else
             strcat(buf, ftoa(axis_values[idx] * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	4413      	add	r3, r2
 8013be4:	edd3 7a00 	vldr	s15, [r3]
 8013be8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8013c40 <get_axis_values_inches+0xb4>
 8013bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bf0:	2004      	movs	r0, #4
 8013bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8013bf6:	f7fc f8cd 	bl	800fd94 <ftoa>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	480e      	ldr	r0, [pc, #56]	; (8013c38 <get_axis_values_inches+0xac>)
 8013c00:	f012 f925 	bl	8025e4e <strcat>
        if (idx < (N_AXIS - 1))
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2b01      	cmp	r3, #1
 8013c08:	d80b      	bhi.n	8013c22 <get_axis_values_inches+0x96>
            strcat(buf, ",");
 8013c0a:	480b      	ldr	r0, [pc, #44]	; (8013c38 <get_axis_values_inches+0xac>)
 8013c0c:	f7ec fb3e 	bl	800028c <strlen>
 8013c10:	4603      	mov	r3, r0
 8013c12:	461a      	mov	r2, r3
 8013c14:	4b08      	ldr	r3, [pc, #32]	; (8013c38 <get_axis_values_inches+0xac>)
 8013c16:	4413      	add	r3, r2
 8013c18:	490a      	ldr	r1, [pc, #40]	; (8013c44 <get_axis_values_inches+0xb8>)
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	881b      	ldrh	r3, [r3, #0]
 8013c20:	8013      	strh	r3, [r2, #0]
    for (idx = 0; idx < N_AXIS; idx++) {
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	3301      	adds	r3, #1
 8013c26:	60fb      	str	r3, [r7, #12]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2b02      	cmp	r3, #2
 8013c2c:	d9b8      	bls.n	8013ba0 <get_axis_values_inches+0x14>
    }

    return buf;
 8013c2e:	4b02      	ldr	r3, [pc, #8]	; (8013c38 <get_axis_values_inches+0xac>)
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	3710      	adds	r7, #16
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	20001c78 	.word	0x20001c78
 8013c3c:	2000137c 	.word	0x2000137c
 8013c40:	3d21428b 	.word	0x3d21428b
 8013c44:	0802d474 	.word	0x0802d474

08013c48 <get_axis_value_mm>:

// Convert rate value to null terminated string (mm).
static char *get_axis_value_mm (float value)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	ed87 0a01 	vstr	s0, [r7, #4]
    return strcpy(buf, ftoa(value, N_DECIMAL_COORDVALUE_MM));
 8013c52:	2003      	movs	r0, #3
 8013c54:	ed97 0a01 	vldr	s0, [r7, #4]
 8013c58:	f7fc f89c 	bl	800fd94 <ftoa>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	4619      	mov	r1, r3
 8013c60:	4803      	ldr	r0, [pc, #12]	; (8013c70 <get_axis_value_mm+0x28>)
 8013c62:	f012 fa41 	bl	80260e8 <strcpy>
 8013c66:	4603      	mov	r3, r0
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3708      	adds	r7, #8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	20001c78 	.word	0x20001c78

08013c74 <get_axis_value_inches>:

// Convert rate value to null terminated string (mm).
static char *get_axis_value_inches (float value)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	ed87 0a01 	vstr	s0, [r7, #4]
    return strcpy(buf, ftoa(value * INCH_PER_MM, N_DECIMAL_COORDVALUE_INCH));
 8013c7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8013c82:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8013ca8 <get_axis_value_inches+0x34>
 8013c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c8a:	2004      	movs	r0, #4
 8013c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8013c90:	f7fc f880 	bl	800fd94 <ftoa>
 8013c94:	4603      	mov	r3, r0
 8013c96:	4619      	mov	r1, r3
 8013c98:	4804      	ldr	r0, [pc, #16]	; (8013cac <get_axis_value_inches+0x38>)
 8013c9a:	f012 fa25 	bl	80260e8 <strcpy>
 8013c9e:	4603      	mov	r3, r0
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3708      	adds	r7, #8
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	3d21428b 	.word	0x3d21428b
 8013cac:	20001c78 	.word	0x20001c78

08013cb0 <get_rate_value_mm>:

// Convert rate value to null terminated string (mm).
static char *get_rate_value_mm (float value)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	ed87 0a01 	vstr	s0, [r7, #4]
    return uitoa((uint32_t)value);
 8013cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8013cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cc2:	ee17 0a90 	vmov	r0, s15
 8013cc6:	f7fc f829 	bl	800fd1c <uitoa>
 8013cca:	4603      	mov	r3, r0
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3708      	adds	r7, #8
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <get_rate_value_inch>:

// Convert rate value to null terminated string (mm).
static char *get_rate_value_inch (float value)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	ed87 0a01 	vstr	s0, [r7, #4]
    return uitoa((uint32_t)(value * INCH_PER_MM));
 8013cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8013ce2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8013d00 <get_rate_value_inch+0x2c>
 8013ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cee:	ee17 0a90 	vmov	r0, s15
 8013cf2:	f7fc f813 	bl	800fd1c <uitoa>
 8013cf6:	4603      	mov	r3, r0
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	3d21428b 	.word	0x3d21428b

08013d04 <axis_signals_tostring>:

// Convert axes signals bits to string representation.
// NOTE: returns pointer to null terminator!
inline static char *axis_signals_tostring (char *buf, axes_signals_t signals)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b085      	sub	sp, #20
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	7039      	strb	r1, [r7, #0]
    uint_fast16_t idx = 0;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	60fb      	str	r3, [r7, #12]

    signals.mask &= AXES_BITMASK;
 8013d12:	783b      	ldrb	r3, [r7, #0]
 8013d14:	f003 0307 	and.w	r3, r3, #7
 8013d18:	b2db      	uxtb	r3, r3
 8013d1a:	703b      	strb	r3, [r7, #0]

    while(signals.mask) {
 8013d1c:	e014      	b.n	8013d48 <axis_signals_tostring+0x44>
        if(signals.mask & 0x01)
 8013d1e:	783b      	ldrb	r3, [r7, #0]
 8013d20:	f003 0301 	and.w	r3, r3, #1
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d008      	beq.n	8013d3a <axis_signals_tostring+0x36>
            *buf++ = *axis_letter[idx];
 8013d28:	4a0e      	ldr	r2, [pc, #56]	; (8013d64 <axis_signals_tostring+0x60>)
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	1c59      	adds	r1, r3, #1
 8013d34:	6079      	str	r1, [r7, #4]
 8013d36:	7812      	ldrb	r2, [r2, #0]
 8013d38:	701a      	strb	r2, [r3, #0]
        idx++;
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	60fb      	str	r3, [r7, #12]
        signals.mask >>= 1;
 8013d40:	783b      	ldrb	r3, [r7, #0]
 8013d42:	085b      	lsrs	r3, r3, #1
 8013d44:	b2db      	uxtb	r3, r3
 8013d46:	703b      	strb	r3, [r7, #0]
    while(signals.mask) {
 8013d48:	783b      	ldrb	r3, [r7, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d1e7      	bne.n	8013d1e <axis_signals_tostring+0x1a>
    };

    *buf = '\0';
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2200      	movs	r2, #0
 8013d52:	701a      	strb	r2, [r3, #0]

    return buf;
 8013d54:	687b      	ldr	r3, [r7, #4]
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3714      	adds	r7, #20
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr
 8013d62:	bf00      	nop
 8013d64:	08032d48 	.word	0x08032d48

08013d68 <control_signals_tostring>:

// Convert control signals bits to string representation.
// NOTE: returns pointer to null terminator!
inline static char *control_signals_tostring (char *buf, control_signals_t signals)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b085      	sub	sp, #20
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	8039      	strh	r1, [r7, #0]
    static const char signals_map[] = "RHSDLTE FM    P ";

    char *map = (char *)signals_map;
 8013d72:	4b33      	ldr	r3, [pc, #204]	; (8013e40 <control_signals_tostring+0xd8>)
 8013d74:	60fb      	str	r3, [r7, #12]

    if(!hal.signals_cap.stop_disable)
 8013d76:	4b33      	ldr	r3, [pc, #204]	; (8013e44 <control_signals_tostring+0xdc>)
 8013d78:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8013d7c:	f003 0320 	and.w	r3, r3, #32
 8013d80:	b2db      	uxtb	r3, r3
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d108      	bne.n	8013d98 <control_signals_tostring+0x30>
        signals.stop_disable = sys.flags.optional_stop_disable;
 8013d86:	4b30      	ldr	r3, [pc, #192]	; (8013e48 <control_signals_tostring+0xe0>)
 8013d88:	7d9b      	ldrb	r3, [r3, #22]
 8013d8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8013d8e:	b2da      	uxtb	r2, r3
 8013d90:	783b      	ldrb	r3, [r7, #0]
 8013d92:	f362 1345 	bfi	r3, r2, #5, #1
 8013d96:	703b      	strb	r3, [r7, #0]

    if(!signals.deasserted)
 8013d98:	787b      	ldrb	r3, [r7, #1]
 8013d9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d142      	bne.n	8013e2a <control_signals_tostring+0xc2>
      while(signals.mask) {
 8013da4:	e03e      	b.n	8013e24 <control_signals_tostring+0xbc>

        if(signals.mask & 0x01) {
 8013da6:	883b      	ldrh	r3, [r7, #0]
 8013da8:	f003 0301 	and.w	r3, r3, #1
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d032      	beq.n	8013e16 <control_signals_tostring+0xae>

            switch(*map) {
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	2b4c      	cmp	r3, #76	; 0x4c
 8013db6:	d014      	beq.n	8013de2 <control_signals_tostring+0x7a>
 8013db8:	2b4c      	cmp	r3, #76	; 0x4c
 8013dba:	dc20      	bgt.n	8013dfe <control_signals_tostring+0x96>
 8013dbc:	2b20      	cmp	r3, #32
 8013dbe:	d025      	beq.n	8013e0c <control_signals_tostring+0xa4>
 8013dc0:	2b44      	cmp	r3, #68	; 0x44
 8013dc2:	d11c      	bne.n	8013dfe <control_signals_tostring+0x96>

                case ' ':
                    break;

                case 'D':
                    if(hal.signals_cap.safety_door_ajar)
 8013dc4:	4b1f      	ldr	r3, [pc, #124]	; (8013e44 <control_signals_tostring+0xdc>)
 8013dc6:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8013dca:	f003 0308 	and.w	r3, r3, #8
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d01d      	beq.n	8013e10 <control_signals_tostring+0xa8>
                        *buf++ = *map;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	1c5a      	adds	r2, r3, #1
 8013dd8:	607a      	str	r2, [r7, #4]
 8013dda:	68fa      	ldr	r2, [r7, #12]
 8013ddc:	7812      	ldrb	r2, [r2, #0]
 8013dde:	701a      	strb	r2, [r3, #0]
                    break;
 8013de0:	e016      	b.n	8013e10 <control_signals_tostring+0xa8>

                case 'L':
                    if(sys.flags.block_delete_enabled)
 8013de2:	4b19      	ldr	r3, [pc, #100]	; (8013e48 <control_signals_tostring+0xe0>)
 8013de4:	7d9b      	ldrb	r3, [r3, #22]
 8013de6:	f003 0310 	and.w	r3, r3, #16
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d011      	beq.n	8013e14 <control_signals_tostring+0xac>
                        *buf++ = *map;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	1c5a      	adds	r2, r3, #1
 8013df4:	607a      	str	r2, [r7, #4]
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	7812      	ldrb	r2, [r2, #0]
 8013dfa:	701a      	strb	r2, [r3, #0]
                    break;
 8013dfc:	e00a      	b.n	8013e14 <control_signals_tostring+0xac>

                default:
                    *buf++ = *map;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	1c5a      	adds	r2, r3, #1
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	68fa      	ldr	r2, [r7, #12]
 8013e06:	7812      	ldrb	r2, [r2, #0]
 8013e08:	701a      	strb	r2, [r3, #0]
                    break;
 8013e0a:	e004      	b.n	8013e16 <control_signals_tostring+0xae>
                    break;
 8013e0c:	bf00      	nop
 8013e0e:	e002      	b.n	8013e16 <control_signals_tostring+0xae>
                    break;
 8013e10:	bf00      	nop
 8013e12:	e000      	b.n	8013e16 <control_signals_tostring+0xae>
                    break;
 8013e14:	bf00      	nop
            }
        }

        map++;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	3301      	adds	r3, #1
 8013e1a:	60fb      	str	r3, [r7, #12]
        signals.mask >>= 1;
 8013e1c:	883b      	ldrh	r3, [r7, #0]
 8013e1e:	085b      	lsrs	r3, r3, #1
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	803b      	strh	r3, [r7, #0]
      while(signals.mask) {
 8013e24:	883b      	ldrh	r3, [r7, #0]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d1bd      	bne.n	8013da6 <control_signals_tostring+0x3e>
    }

    *buf = '\0';
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	701a      	strb	r2, [r3, #0]

    return buf;
 8013e30:	687b      	ldr	r3, [r7, #4]
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3714      	adds	r7, #20
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop
 8013e40:	08033168 	.word	0x08033168
 8013e44:	200016a0 	.word	0x200016a0
 8013e48:	20001520 	.word	0x20001520

08013e4c <report_init>:

void report_init (void)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	af00      	add	r7, sp, #0
    get_axis_value = settings.flags.report_inches ? get_axis_value_inches : get_axis_value_mm;
 8013e50:	4b15      	ldr	r3, [pc, #84]	; (8013ea8 <report_init+0x5c>)
 8013e52:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8013e56:	f003 0301 	and.w	r3, r3, #1
 8013e5a:	b2db      	uxtb	r3, r3
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d001      	beq.n	8013e64 <report_init+0x18>
 8013e60:	4b12      	ldr	r3, [pc, #72]	; (8013eac <report_init+0x60>)
 8013e62:	e000      	b.n	8013e66 <report_init+0x1a>
 8013e64:	4b12      	ldr	r3, [pc, #72]	; (8013eb0 <report_init+0x64>)
 8013e66:	4a13      	ldr	r2, [pc, #76]	; (8013eb4 <report_init+0x68>)
 8013e68:	6013      	str	r3, [r2, #0]
    get_axis_values = settings.flags.report_inches ? get_axis_values_inches : get_axis_values_mm;
 8013e6a:	4b0f      	ldr	r3, [pc, #60]	; (8013ea8 <report_init+0x5c>)
 8013e6c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8013e70:	f003 0301 	and.w	r3, r3, #1
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d001      	beq.n	8013e7e <report_init+0x32>
 8013e7a:	4b0f      	ldr	r3, [pc, #60]	; (8013eb8 <report_init+0x6c>)
 8013e7c:	e000      	b.n	8013e80 <report_init+0x34>
 8013e7e:	4b0f      	ldr	r3, [pc, #60]	; (8013ebc <report_init+0x70>)
 8013e80:	4a0f      	ldr	r2, [pc, #60]	; (8013ec0 <report_init+0x74>)
 8013e82:	6013      	str	r3, [r2, #0]
    get_rate_value = settings.flags.report_inches ? get_rate_value_inch : get_rate_value_mm;
 8013e84:	4b08      	ldr	r3, [pc, #32]	; (8013ea8 <report_init+0x5c>)
 8013e86:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8013e8a:	f003 0301 	and.w	r3, r3, #1
 8013e8e:	b2db      	uxtb	r3, r3
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d001      	beq.n	8013e98 <report_init+0x4c>
 8013e94:	4b0b      	ldr	r3, [pc, #44]	; (8013ec4 <report_init+0x78>)
 8013e96:	e000      	b.n	8013e9a <report_init+0x4e>
 8013e98:	4b0b      	ldr	r3, [pc, #44]	; (8013ec8 <report_init+0x7c>)
 8013e9a:	4a0c      	ldr	r2, [pc, #48]	; (8013ecc <report_init+0x80>)
 8013e9c:	6013      	str	r3, [r2, #0]
}
 8013e9e:	bf00      	nop
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr
 8013ea8:	20001cf0 	.word	0x20001cf0
 8013eac:	08013c75 	.word	0x08013c75
 8013eb0:	08013c49 	.word	0x08013c49
 8013eb4:	20001cac 	.word	0x20001cac
 8013eb8:	08013b8d 	.word	0x08013b8d
 8013ebc:	08013ae5 	.word	0x08013ae5
 8013ec0:	20001ca8 	.word	0x20001ca8
 8013ec4:	08013cd5 	.word	0x08013cd5
 8013ec8:	08013cb1 	.word	0x08013cb1
 8013ecc:	20001cb0 	.word	0x20001cb0

08013ed0 <report_status_message>:
// 'error:'  to indicate some error event with the line or some critical system error during
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
static status_code_t report_status_message (status_code_t status_code)
{
 8013ed0:	b590      	push	{r4, r7, lr}
 8013ed2:	b083      	sub	sp, #12
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	71fb      	strb	r3, [r7, #7]
    switch(status_code) {
 8013eda:	79fb      	ldrb	r3, [r7, #7]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d105      	bne.n	8013eec <report_status_message+0x1c>

        case Status_OK: // STATUS_OK
            hal.stream.write("ok" ASCII_EOL);
 8013ee0:	4b0d      	ldr	r3, [pc, #52]	; (8013f18 <report_status_message+0x48>)
 8013ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013ee6:	480d      	ldr	r0, [pc, #52]	; (8013f1c <report_status_message+0x4c>)
 8013ee8:	4798      	blx	r3
            break;
 8013eea:	e010      	b.n	8013f0e <report_status_message+0x3e>

        default:
            hal.stream.write(appendbuf(3, "error:", uitoa((uint32_t)status_code), ASCII_EOL));
 8013eec:	4b0a      	ldr	r3, [pc, #40]	; (8013f18 <report_status_message+0x48>)
 8013eee:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8013ef2:	79fb      	ldrb	r3, [r7, #7]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fb ff11 	bl	800fd1c <uitoa>
 8013efa:	4602      	mov	r2, r0
 8013efc:	4b08      	ldr	r3, [pc, #32]	; (8013f20 <report_status_message+0x50>)
 8013efe:	4909      	ldr	r1, [pc, #36]	; (8013f24 <report_status_message+0x54>)
 8013f00:	2003      	movs	r0, #3
 8013f02:	f7ff fd89 	bl	8013a18 <appendbuf>
 8013f06:	4603      	mov	r3, r0
 8013f08:	4618      	mov	r0, r3
 8013f0a:	47a0      	blx	r4
            break;
 8013f0c:	bf00      	nop
    }

    return status_code;
 8013f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd90      	pop	{r4, r7, pc}
 8013f18:	200016a0 	.word	0x200016a0
 8013f1c:	0802d478 	.word	0x0802d478
 8013f20:	0802d480 	.word	0x0802d480
 8013f24:	0802d484 	.word	0x0802d484

08013f28 <report_alarm_message>:

// Prints alarm messages.
static alarm_code_t report_alarm_message (alarm_code_t alarm_code)
{
 8013f28:	b590      	push	{r4, r7, lr}
 8013f2a:	b083      	sub	sp, #12
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	4603      	mov	r3, r0
 8013f30:	71fb      	strb	r3, [r7, #7]
    hal.stream.write_all(appendbuf(3, "ALARM:", uitoa((uint32_t)alarm_code), ASCII_EOL));
 8013f32:	4b0d      	ldr	r3, [pc, #52]	; (8013f68 <report_alarm_message+0x40>)
 8013f34:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8013f38:	79fb      	ldrb	r3, [r7, #7]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7fb feee 	bl	800fd1c <uitoa>
 8013f40:	4602      	mov	r2, r0
 8013f42:	4b0a      	ldr	r3, [pc, #40]	; (8013f6c <report_alarm_message+0x44>)
 8013f44:	490a      	ldr	r1, [pc, #40]	; (8013f70 <report_alarm_message+0x48>)
 8013f46:	2003      	movs	r0, #3
 8013f48:	f7ff fd66 	bl	8013a18 <appendbuf>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	4618      	mov	r0, r3
 8013f50:	47a0      	blx	r4
    hal.delay_ms(100, NULL); // Force delay to ensure message clears output stream buffer.
 8013f52:	4b05      	ldr	r3, [pc, #20]	; (8013f68 <report_alarm_message+0x40>)
 8013f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f56:	2100      	movs	r1, #0
 8013f58:	2064      	movs	r0, #100	; 0x64
 8013f5a:	4798      	blx	r3

    return alarm_code;
 8013f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	370c      	adds	r7, #12
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd90      	pop	{r4, r7, pc}
 8013f66:	bf00      	nop
 8013f68:	200016a0 	.word	0x200016a0
 8013f6c:	0802d480 	.word	0x0802d480
 8013f70:	0802d48c 	.word	0x0802d48c

08013f74 <report_message>:

// Prints feedback message, typically from gcode.
void report_message (const char *msg, message_type_t type)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b082      	sub	sp, #8
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	70fb      	strb	r3, [r7, #3]
    hal.stream.write("[MSG:");
 8013f80:	4b12      	ldr	r3, [pc, #72]	; (8013fcc <report_message+0x58>)
 8013f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013f86:	4812      	ldr	r0, [pc, #72]	; (8013fd0 <report_message+0x5c>)
 8013f88:	4798      	blx	r3

    switch(type) {
 8013f8a:	78fb      	ldrb	r3, [r7, #3]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d002      	beq.n	8013f96 <report_message+0x22>
 8013f90:	2b02      	cmp	r3, #2
 8013f92:	d006      	beq.n	8013fa2 <report_message+0x2e>
        case Message_Warning:
            hal.stream.write("Warning: ");
            break;

        default:
            break;
 8013f94:	e00b      	b.n	8013fae <report_message+0x3a>
            hal.stream.write("Info: ");
 8013f96:	4b0d      	ldr	r3, [pc, #52]	; (8013fcc <report_message+0x58>)
 8013f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013f9c:	480d      	ldr	r0, [pc, #52]	; (8013fd4 <report_message+0x60>)
 8013f9e:	4798      	blx	r3
            break;
 8013fa0:	e005      	b.n	8013fae <report_message+0x3a>
            hal.stream.write("Warning: ");
 8013fa2:	4b0a      	ldr	r3, [pc, #40]	; (8013fcc <report_message+0x58>)
 8013fa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013fa8:	480b      	ldr	r0, [pc, #44]	; (8013fd8 <report_message+0x64>)
 8013faa:	4798      	blx	r3
            break;
 8013fac:	bf00      	nop
    }

    hal.stream.write(msg);
 8013fae:	4b07      	ldr	r3, [pc, #28]	; (8013fcc <report_message+0x58>)
 8013fb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8013fb8:	4b04      	ldr	r3, [pc, #16]	; (8013fcc <report_message+0x58>)
 8013fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013fbe:	4807      	ldr	r0, [pc, #28]	; (8013fdc <report_message+0x68>)
 8013fc0:	4798      	blx	r3
}
 8013fc2:	bf00      	nop
 8013fc4:	3708      	adds	r7, #8
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	200016a0 	.word	0x200016a0
 8013fd0:	0802d494 	.word	0x0802d494
 8013fd4:	0802d49c 	.word	0x0802d49c
 8013fd8:	0802d4a4 	.word	0x0802d4a4
 8013fdc:	0802d4b0 	.word	0x0802d4b0

08013fe0 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
static message_code_t report_feedback_message (message_code_t id)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b084      	sub	sp, #16
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	71fb      	strb	r3, [r7, #7]
    const message_t *msg = message_get(id);
 8013fea:	79fb      	ldrb	r3, [r7, #7]
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7f9 f9bd 	bl	800d36c <message_get>
 8013ff2:	60f8      	str	r0, [r7, #12]

    report_message(msg ? msg->text : "", msg ? msg->type : Message_Plain);
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d002      	beq.n	8014000 <report_feedback_message+0x20>
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	e000      	b.n	8014002 <report_feedback_message+0x22>
 8014000:	4b0e      	ldr	r3, [pc, #56]	; (801403c <report_feedback_message+0x5c>)
 8014002:	68fa      	ldr	r2, [r7, #12]
 8014004:	2a00      	cmp	r2, #0
 8014006:	d002      	beq.n	801400e <report_feedback_message+0x2e>
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	7852      	ldrb	r2, [r2, #1]
 801400c:	e000      	b.n	8014010 <report_feedback_message+0x30>
 801400e:	2200      	movs	r2, #0
 8014010:	4611      	mov	r1, r2
 8014012:	4618      	mov	r0, r3
 8014014:	f7ff ffae 	bl	8013f74 <report_message>

    if(id == Message_None && grbl.on_gcode_message)
 8014018:	79fb      	ldrb	r3, [r7, #7]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d109      	bne.n	8014032 <report_feedback_message+0x52>
 801401e:	4b08      	ldr	r3, [pc, #32]	; (8014040 <report_feedback_message+0x60>)
 8014020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014024:	2b00      	cmp	r3, #0
 8014026:	d004      	beq.n	8014032 <report_feedback_message+0x52>
        grbl.on_gcode_message("");
 8014028:	4b05      	ldr	r3, [pc, #20]	; (8014040 <report_feedback_message+0x60>)
 801402a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801402e:	4803      	ldr	r0, [pc, #12]	; (801403c <report_feedback_message+0x5c>)
 8014030:	4798      	blx	r3

    return id;
 8014032:	79fb      	ldrb	r3, [r7, #7]
}
 8014034:	4618      	mov	r0, r3
 8014036:	3710      	adds	r7, #16
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	0802d4b4 	.word	0x0802d4b4
 8014040:	200015b8 	.word	0x200015b8

08014044 <report_init_message>:

// Welcome message
static void report_init_message (void)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	af00      	add	r7, sp, #0
    override_counter = wco_counter = 0;
 8014048:	4b06      	ldr	r3, [pc, #24]	; (8014064 <report_init_message+0x20>)
 801404a:	2200      	movs	r2, #0
 801404c:	701a      	strb	r2, [r3, #0]
 801404e:	4b05      	ldr	r3, [pc, #20]	; (8014064 <report_init_message+0x20>)
 8014050:	781a      	ldrb	r2, [r3, #0]
 8014052:	4b05      	ldr	r3, [pc, #20]	; (8014068 <report_init_message+0x24>)
 8014054:	701a      	strb	r2, [r3, #0]
#if COMPATIBILITY_LEVEL == 0
    hal.stream.write_all(ASCII_EOL "GrblHAL " GRBL_VERSION " ['$' or '$HELP' for help]" ASCII_EOL);
 8014056:	4b05      	ldr	r3, [pc, #20]	; (801406c <report_init_message+0x28>)
 8014058:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801405c:	4804      	ldr	r0, [pc, #16]	; (8014070 <report_init_message+0x2c>)
 801405e:	4798      	blx	r3
#else
    hal.stream.write_all(ASCII_EOL "Grbl " GRBL_VERSION " ['$' for help]" ASCII_EOL);
#endif
}
 8014060:	bf00      	nop
 8014062:	bd80      	pop	{r7, pc}
 8014064:	20001cb5 	.word	0x20001cb5
 8014068:	20001cb4 	.word	0x20001cb4
 801406c:	200016a0 	.word	0x200016a0
 8014070:	0802d4b8 	.word	0x0802d4b8

08014074 <report_help_message>:

// grblHAL help message
static void report_help_message (void)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	af00      	add	r7, sp, #0
    hal.stream.write("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H $B ~ ! ? ctrl-x]" ASCII_EOL);
 8014078:	4b03      	ldr	r3, [pc, #12]	; (8014088 <report_help_message+0x14>)
 801407a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801407e:	4803      	ldr	r0, [pc, #12]	; (801408c <report_help_message+0x18>)
 8014080:	4798      	blx	r3
}
 8014082:	bf00      	nop
 8014084:	bd80      	pop	{r7, pc}
 8014086:	bf00      	nop
 8014088:	200016a0 	.word	0x200016a0
 801408c:	0802d4e4 	.word	0x0802d4e4

08014090 <report_group_settings>:

static bool report_group_settings (const setting_group_detail_t *groups, const uint_fast8_t n_groups, char *args)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b08e      	sub	sp, #56	; 0x38
 8014094:	af00      	add	r7, sp, #0
 8014096:	60f8      	str	r0, [r7, #12]
 8014098:	60b9      	str	r1, [r7, #8]
 801409a:	607a      	str	r2, [r7, #4]
    bool found = false;
 801409c:	2300      	movs	r3, #0
 801409e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint_fast8_t idx;
    char c, *s, group[26];

    for(idx = 0; idx < n_groups; idx++) {
 80140a2:	2300      	movs	r3, #0
 80140a4:	633b      	str	r3, [r7, #48]	; 0x30
 80140a6:	e06a      	b.n	801417e <report_group_settings+0xee>

        s = group;
 80140a8:	f107 0310 	add.w	r3, r7, #16
 80140ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        strncpy(group, groups[idx].name, sizeof(group) - 1);
 80140ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140b0:	4613      	mov	r3, r2
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	4413      	add	r3, r2
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	461a      	mov	r2, r3
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	4413      	add	r3, r2
 80140be:	6859      	ldr	r1, [r3, #4]
 80140c0:	f107 0310 	add.w	r3, r7, #16
 80140c4:	2219      	movs	r2, #25
 80140c6:	4618      	mov	r0, r3
 80140c8:	f011 feef 	bl	8025eaa <strncpy>

        // Uppercase group name
        while((c = *s))
 80140cc:	e013      	b.n	80140f6 <report_group_settings+0x66>
            *s++ = CAPS(c);
 80140ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80140d2:	2b60      	cmp	r3, #96	; 0x60
 80140d4:	d909      	bls.n	80140ea <report_group_settings+0x5a>
 80140d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80140da:	2b7a      	cmp	r3, #122	; 0x7a
 80140dc:	d805      	bhi.n	80140ea <report_group_settings+0x5a>
 80140de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80140e2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 80140e6:	b2da      	uxtb	r2, r3
 80140e8:	e001      	b.n	80140ee <report_group_settings+0x5e>
 80140ea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80140ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f0:	1c59      	adds	r1, r3, #1
 80140f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80140f4:	701a      	strb	r2, [r3, #0]
        while((c = *s))
 80140f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80140fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014102:	2b00      	cmp	r3, #0
 8014104:	d1e3      	bne.n	80140ce <report_group_settings+0x3e>

        if((found = matchhere(args, group))) {
 8014106:	f107 0310 	add.w	r3, r7, #16
 801410a:	4619      	mov	r1, r3
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f7ff fc17 	bl	8013940 <matchhere>
 8014112:	4603      	mov	r3, r0
 8014114:	2b00      	cmp	r3, #0
 8014116:	bf14      	ite	ne
 8014118:	2301      	movne	r3, #1
 801411a:	2300      	moveq	r3, #0
 801411c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014124:	2b00      	cmp	r3, #0
 8014126:	d027      	beq.n	8014178 <report_group_settings+0xe8>
            hal.stream.write(ASCII_EOL "---- ");
 8014128:	4b1a      	ldr	r3, [pc, #104]	; (8014194 <report_group_settings+0x104>)
 801412a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801412e:	481a      	ldr	r0, [pc, #104]	; (8014198 <report_group_settings+0x108>)
 8014130:	4798      	blx	r3
            hal.stream.write(groups[idx].name);
 8014132:	4b18      	ldr	r3, [pc, #96]	; (8014194 <report_group_settings+0x104>)
 8014134:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8014138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801413a:	4613      	mov	r3, r2
 801413c:	005b      	lsls	r3, r3, #1
 801413e:	4413      	add	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	461a      	mov	r2, r3
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	4413      	add	r3, r2
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	4618      	mov	r0, r3
 801414c:	4788      	blx	r1
            hal.stream.write(":" ASCII_EOL);
 801414e:	4b11      	ldr	r3, [pc, #68]	; (8014194 <report_group_settings+0x104>)
 8014150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014154:	4811      	ldr	r0, [pc, #68]	; (801419c <report_group_settings+0x10c>)
 8014156:	4798      	blx	r3
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, groups[idx].id);
 8014158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801415a:	4613      	mov	r3, r2
 801415c:	005b      	lsls	r3, r3, #1
 801415e:	4413      	add	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	461a      	mov	r2, r3
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	4413      	add	r3, r2
 8014168:	785b      	ldrb	r3, [r3, #1]
 801416a:	461a      	mov	r2, r3
 801416c:	f240 218a 	movw	r1, #650	; 0x28a
 8014170:	2001      	movs	r0, #1
 8014172:	f003 fa05 	bl	8017580 <report_settings_details>
            break;
 8014176:	e006      	b.n	8014186 <report_group_settings+0xf6>
    for(idx = 0; idx < n_groups; idx++) {
 8014178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417a:	3301      	adds	r3, #1
 801417c:	633b      	str	r3, [r7, #48]	; 0x30
 801417e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	429a      	cmp	r2, r3
 8014184:	d390      	bcc.n	80140a8 <report_group_settings+0x18>
        }
    }

    return found;
 8014186:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 801418a:	4618      	mov	r0, r3
 801418c:	3738      	adds	r7, #56	; 0x38
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	200016a0 	.word	0x200016a0
 8014198:	0802d534 	.word	0x0802d534
 801419c:	0802d53c 	.word	0x0802d53c

080141a0 <report_help>:

status_code_t report_help (char *args)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b086      	sub	sp, #24
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
    // Strip leading spaces
    while(*args == ' ')
 80141a8:	e002      	b.n	80141b0 <report_help+0x10>
        args++;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	3301      	adds	r3, #1
 80141ae:	607b      	str	r3, [r7, #4]
    while(*args == ' ')
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	2b20      	cmp	r3, #32
 80141b6:	d0f8      	beq.n	80141aa <report_help+0xa>

    if(*args == '\0') {
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d113      	bne.n	80141e8 <report_help+0x48>

        hal.stream.write("Help topics:" ASCII_EOL);
 80141c0:	4b46      	ldr	r3, [pc, #280]	; (80142dc <report_help+0x13c>)
 80141c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80141c6:	4846      	ldr	r0, [pc, #280]	; (80142e0 <report_help+0x140>)
 80141c8:	4798      	blx	r3
        hal.stream.write(" Commands" ASCII_EOL);
 80141ca:	4b44      	ldr	r3, [pc, #272]	; (80142dc <report_help+0x13c>)
 80141cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80141d0:	4844      	ldr	r0, [pc, #272]	; (80142e4 <report_help+0x144>)
 80141d2:	4798      	blx	r3
        hal.stream.write(" Settings" ASCII_EOL);
 80141d4:	4b41      	ldr	r3, [pc, #260]	; (80142dc <report_help+0x13c>)
 80141d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80141da:	4843      	ldr	r0, [pc, #268]	; (80142e8 <report_help+0x148>)
 80141dc:	4798      	blx	r3
        report_setting_group_details(false, " ");
 80141de:	4943      	ldr	r1, [pc, #268]	; (80142ec <report_help+0x14c>)
 80141e0:	2000      	movs	r0, #0
 80141e2:	f003 fd35 	bl	8017c50 <report_setting_group_details>
 80141e6:	e074      	b.n	80142d2 <report_help+0x132>

    } else {

        char c, *s = args;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	617b      	str	r3, [r7, #20]

        // Upper case argument
        while((c = *s))
 80141ec:	e00f      	b.n	801420e <report_help+0x6e>
            *s++ = CAPS(c);
 80141ee:	7afb      	ldrb	r3, [r7, #11]
 80141f0:	2b60      	cmp	r3, #96	; 0x60
 80141f2:	d907      	bls.n	8014204 <report_help+0x64>
 80141f4:	7afb      	ldrb	r3, [r7, #11]
 80141f6:	2b7a      	cmp	r3, #122	; 0x7a
 80141f8:	d804      	bhi.n	8014204 <report_help+0x64>
 80141fa:	7afb      	ldrb	r3, [r7, #11]
 80141fc:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8014200:	b2da      	uxtb	r2, r3
 8014202:	e000      	b.n	8014206 <report_help+0x66>
 8014204:	7afa      	ldrb	r2, [r7, #11]
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	1c59      	adds	r1, r3, #1
 801420a:	6179      	str	r1, [r7, #20]
 801420c:	701a      	strb	r2, [r3, #0]
        while((c = *s))
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	72fb      	strb	r3, [r7, #11]
 8014214:	7afb      	ldrb	r3, [r7, #11]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d1e9      	bne.n	80141ee <report_help+0x4e>

        if(matchhere(args, "COMMANDS")) {
 801421a:	4935      	ldr	r1, [pc, #212]	; (80142f0 <report_help+0x150>)
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f7ff fb8f 	bl	8013940 <matchhere>
 8014222:	4603      	mov	r3, r0
 8014224:	2b00      	cmp	r3, #0
 8014226:	d007      	beq.n	8014238 <report_help+0x98>
            if(grbl.on_report_command_help)
 8014228:	4b32      	ldr	r3, [pc, #200]	; (80142f4 <report_help+0x154>)
 801422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801422c:	2b00      	cmp	r3, #0
 801422e:	d050      	beq.n	80142d2 <report_help+0x132>
                grbl.on_report_command_help();
 8014230:	4b30      	ldr	r3, [pc, #192]	; (80142f4 <report_help+0x154>)
 8014232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014234:	4798      	blx	r3
 8014236:	e04c      	b.n	80142d2 <report_help+0x132>

        } else if(matchhere(args, "SETTINGS"))
 8014238:	492f      	ldr	r1, [pc, #188]	; (80142f8 <report_help+0x158>)
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f7ff fb80 	bl	8013940 <matchhere>
 8014240:	4603      	mov	r3, r0
 8014242:	2b00      	cmp	r3, #0
 8014244:	d006      	beq.n	8014254 <report_help+0xb4>
            report_settings_details(SettingsFormat_HumanReadable, Setting_SettingsAll, Group_All);
 8014246:	2200      	movs	r2, #0
 8014248:	f240 218a 	movw	r1, #650	; 0x28a
 801424c:	2001      	movs	r0, #1
 801424e:	f003 f997 	bl	8017580 <report_settings_details>
 8014252:	e03e      	b.n	80142d2 <report_help+0x132>

        else {

            bool found = false;
 8014254:	2300      	movs	r3, #0
 8014256:	74fb      	strb	r3, [r7, #19]
            setting_details_t *settings_info = settings_get_details();
 8014258:	f004 f8ce 	bl	80183f8 <settings_get_details>
 801425c:	60f8      	str	r0, [r7, #12]

            found = report_group_settings(settings_info->groups, settings_info->n_groups, args);
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6858      	ldr	r0, [r3, #4]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	4619      	mov	r1, r3
 801426a:	f7ff ff11 	bl	8014090 <report_group_settings>
 801426e:	4603      	mov	r3, r0
 8014270:	74fb      	strb	r3, [r7, #19]

            if(!found && (settings_info = settings_info->next)) do {
 8014272:	7cfb      	ldrb	r3, [r7, #19]
 8014274:	f083 0301 	eor.w	r3, r3, #1
 8014278:	b2db      	uxtb	r3, r3
 801427a:	2b00      	cmp	r3, #0
 801427c:	d01e      	beq.n	80142bc <report_help+0x11c>
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	699b      	ldr	r3, [r3, #24]
 8014282:	60fb      	str	r3, [r7, #12]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d018      	beq.n	80142bc <report_help+0x11c>
                if(settings_info->groups && (found = report_group_settings(settings_info->groups, settings_info->n_groups, args)))
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d00c      	beq.n	80142ac <report_help+0x10c>
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	6858      	ldr	r0, [r3, #4]
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	4619      	mov	r1, r3
 801429e:	f7ff fef7 	bl	8014090 <report_group_settings>
 80142a2:	4603      	mov	r3, r0
 80142a4:	74fb      	strb	r3, [r7, #19]
 80142a6:	7cfb      	ldrb	r3, [r7, #19]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d106      	bne.n	80142ba <report_help+0x11a>
                    break;
            } while((settings_info = settings_info->next));
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	699b      	ldr	r3, [r3, #24]
 80142b0:	60fb      	str	r3, [r7, #12]
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d1e8      	bne.n	801428a <report_help+0xea>
 80142b8:	e000      	b.n	80142bc <report_help+0x11c>
                    break;
 80142ba:	bf00      	nop

            if(!found)
 80142bc:	7cfb      	ldrb	r3, [r7, #19]
 80142be:	f083 0301 	eor.w	r3, r3, #1
 80142c2:	b2db      	uxtb	r3, r3
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d004      	beq.n	80142d2 <report_help+0x132>
                hal.stream.write( ASCII_EOL "N/A" ASCII_EOL);
 80142c8:	4b04      	ldr	r3, [pc, #16]	; (80142dc <report_help+0x13c>)
 80142ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80142ce:	480b      	ldr	r0, [pc, #44]	; (80142fc <report_help+0x15c>)
 80142d0:	4798      	blx	r3
        }
    }

    return Status_OK;
 80142d2:	2300      	movs	r3, #0
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	3718      	adds	r7, #24
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	200016a0 	.word	0x200016a0
 80142e0:	0802d540 	.word	0x0802d540
 80142e4:	0802d550 	.word	0x0802d550
 80142e8:	0802d55c 	.word	0x0802d55c
 80142ec:	0802d568 	.word	0x0802d568
 80142f0:	0802d56c 	.word	0x0802d56c
 80142f4:	200015b8 	.word	0x200015b8
 80142f8:	0802d578 	.word	0x0802d578
 80142fc:	0802d584 	.word	0x0802d584

08014300 <cmp_settings>:


// Grbl settings print out.

static int cmp_settings (const void *a, const void *b)
{
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	6039      	str	r1, [r7, #0]
  return (*(setting_detail_t **)(a))->id - (*(setting_detail_t **)(b))->id;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	881b      	ldrh	r3, [r3, #0]
 8014310:	461a      	mov	r2, r3
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	881b      	ldrh	r3, [r3, #0]
 8014318:	1ad3      	subs	r3, r2, r3
}
 801431a:	4618      	mov	r0, r3
 801431c:	370c      	adds	r7, #12
 801431e:	46bd      	mov	sp, r7
 8014320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014324:	4770      	bx	lr
	...

08014328 <report_setting>:

static bool report_setting (const setting_detail_t *setting, uint_fast16_t offset, void *data)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b086      	sub	sp, #24
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	607a      	str	r2, [r7, #4]
    appendbuf(3, "$", uitoa(setting->id + offset), "=");
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	881b      	ldrh	r3, [r3, #0]
 8014338:	461a      	mov	r2, r3
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	4413      	add	r3, r2
 801433e:	4618      	mov	r0, r3
 8014340:	f7fb fcec 	bl	800fd1c <uitoa>
 8014344:	4602      	mov	r2, r0
 8014346:	4b10      	ldr	r3, [pc, #64]	; (8014388 <report_setting+0x60>)
 8014348:	4910      	ldr	r1, [pc, #64]	; (801438c <report_setting+0x64>)
 801434a:	2003      	movs	r0, #3
 801434c:	f7ff fb64 	bl	8013a18 <appendbuf>

    char *value = setting_get_value(setting, offset);
 8014350:	68b9      	ldr	r1, [r7, #8]
 8014352:	68f8      	ldr	r0, [r7, #12]
 8014354:	f005 faf4 	bl	8019940 <setting_get_value>
 8014358:	6178      	str	r0, [r7, #20]

    if(value) {
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d00e      	beq.n	801437e <report_setting+0x56>
        hal.stream.write(buf);
 8014360:	4b0b      	ldr	r3, [pc, #44]	; (8014390 <report_setting+0x68>)
 8014362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014366:	480b      	ldr	r0, [pc, #44]	; (8014394 <report_setting+0x6c>)
 8014368:	4798      	blx	r3
        hal.stream.write(value);
 801436a:	4b09      	ldr	r3, [pc, #36]	; (8014390 <report_setting+0x68>)
 801436c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014370:	6978      	ldr	r0, [r7, #20]
 8014372:	4798      	blx	r3
        hal.stream.write(ASCII_EOL);
 8014374:	4b06      	ldr	r3, [pc, #24]	; (8014390 <report_setting+0x68>)
 8014376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801437a:	4807      	ldr	r0, [pc, #28]	; (8014398 <report_setting+0x70>)
 801437c:	4798      	blx	r3
    }

    return true;
 801437e:	2301      	movs	r3, #1
}
 8014380:	4618      	mov	r0, r3
 8014382:	3718      	adds	r7, #24
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}
 8014388:	0802d58c 	.word	0x0802d58c
 801438c:	0802d590 	.word	0x0802d590
 8014390:	200016a0 	.word	0x200016a0
 8014394:	20001c78 	.word	0x20001c78
 8014398:	0802d480 	.word	0x0802d480

0801439c <report_grbl_setting>:

status_code_t report_grbl_setting (setting_id_t id, void *data)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	4603      	mov	r3, r0
 80143a4:	6039      	str	r1, [r7, #0]
 80143a6:	80fb      	strh	r3, [r7, #6]
    status_code_t status = Status_OK;
 80143a8:	2300      	movs	r3, #0
 80143aa:	73fb      	strb	r3, [r7, #15]

    const setting_detail_t *setting = setting_get_details(id, NULL);
 80143ac:	88fb      	ldrh	r3, [r7, #6]
 80143ae:	2100      	movs	r1, #0
 80143b0:	4618      	mov	r0, r3
 80143b2:	f006 fa41 	bl	801a838 <setting_get_details>
 80143b6:	60b8      	str	r0, [r7, #8]

    if(setting)
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00a      	beq.n	80143d4 <report_grbl_setting+0x38>
        grbl.report.setting(setting, id - setting->id, data);
 80143be:	4b09      	ldr	r3, [pc, #36]	; (80143e4 <report_grbl_setting+0x48>)
 80143c0:	695b      	ldr	r3, [r3, #20]
 80143c2:	88fa      	ldrh	r2, [r7, #6]
 80143c4:	68b9      	ldr	r1, [r7, #8]
 80143c6:	8809      	ldrh	r1, [r1, #0]
 80143c8:	1a52      	subs	r2, r2, r1
 80143ca:	4611      	mov	r1, r2
 80143cc:	683a      	ldr	r2, [r7, #0]
 80143ce:	68b8      	ldr	r0, [r7, #8]
 80143d0:	4798      	blx	r3
 80143d2:	e001      	b.n	80143d8 <report_grbl_setting+0x3c>
    else
        status = Status_SettingDisabled;
 80143d4:	2335      	movs	r3, #53	; 0x35
 80143d6:	73fb      	strb	r3, [r7, #15]

    return status;
 80143d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80143da:	4618      	mov	r0, r3
 80143dc:	3710      	adds	r7, #16
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	bf00      	nop
 80143e4:	200015b8 	.word	0x200015b8

080143e8 <print_setting>:

static bool print_setting (const setting_detail_t *setting, uint_fast16_t offset, void *data)
{
 80143e8:	b590      	push	{r4, r7, lr}
 80143ea:	b085      	sub	sp, #20
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	60f8      	str	r0, [r7, #12]
 80143f0:	60b9      	str	r1, [r7, #8]
 80143f2:	607a      	str	r2, [r7, #4]
    if(setting->value != NULL)
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	6a1b      	ldr	r3, [r3, #32]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d006      	beq.n	801440a <print_setting+0x22>
        grbl.report.setting(setting, offset, data);
 80143fc:	4b10      	ldr	r3, [pc, #64]	; (8014440 <print_setting+0x58>)
 80143fe:	695b      	ldr	r3, [r3, #20]
 8014400:	687a      	ldr	r2, [r7, #4]
 8014402:	68b9      	ldr	r1, [r7, #8]
 8014404:	68f8      	ldr	r0, [r7, #12]
 8014406:	4798      	blx	r3
 8014408:	e014      	b.n	8014434 <print_setting+0x4c>
    else {
        hal.stream.write("$");
 801440a:	4b0e      	ldr	r3, [pc, #56]	; (8014444 <print_setting+0x5c>)
 801440c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014410:	480d      	ldr	r0, [pc, #52]	; (8014448 <print_setting+0x60>)
 8014412:	4798      	blx	r3
        hal.stream.write(uitoa(setting->id));
 8014414:	4b0b      	ldr	r3, [pc, #44]	; (8014444 <print_setting+0x5c>)
 8014416:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	881b      	ldrh	r3, [r3, #0]
 801441e:	4618      	mov	r0, r3
 8014420:	f7fb fc7c 	bl	800fd1c <uitoa>
 8014424:	4603      	mov	r3, r0
 8014426:	4618      	mov	r0, r3
 8014428:	47a0      	blx	r4
        hal.stream.write("=N/A" ASCII_EOL);
 801442a:	4b06      	ldr	r3, [pc, #24]	; (8014444 <print_setting+0x5c>)
 801442c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014430:	4806      	ldr	r0, [pc, #24]	; (801444c <print_setting+0x64>)
 8014432:	4798      	blx	r3
    }

    return true;
 8014434:	2301      	movs	r3, #1
}
 8014436:	4618      	mov	r0, r3
 8014438:	3714      	adds	r7, #20
 801443a:	46bd      	mov	sp, r7
 801443c:	bd90      	pop	{r4, r7, pc}
 801443e:	bf00      	nop
 8014440:	200015b8 	.word	0x200015b8
 8014444:	200016a0 	.word	0x200016a0
 8014448:	0802d590 	.word	0x0802d590
 801444c:	0802d594 	.word	0x0802d594

08014450 <report_grbl_settings>:

void report_grbl_settings (bool all, void *data)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b088      	sub	sp, #32
 8014454:	af00      	add	r7, sp, #0
 8014456:	4603      	mov	r3, r0
 8014458:	6039      	str	r1, [r7, #0]
 801445a:	71fb      	strb	r3, [r7, #7]
    uint_fast16_t idx, n_settings = 0;
 801445c:	2300      	movs	r3, #0
 801445e:	61bb      	str	r3, [r7, #24]
    const setting_detail_t *setting;
    setting_detail_t **all_settings, **psetting;
    setting_details_t *details = settings_get_details();
 8014460:	f003 ffca 	bl	80183f8 <settings_get_details>
 8014464:	6138      	str	r0, [r7, #16]

    do {
        n_settings += details->n_settings;
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	891b      	ldrh	r3, [r3, #8]
 801446a:	461a      	mov	r2, r3
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	4413      	add	r3, r2
 8014470:	61bb      	str	r3, [r7, #24]
    } while((details = details->next));
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	699b      	ldr	r3, [r3, #24]
 8014476:	613b      	str	r3, [r7, #16]
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d1f3      	bne.n	8014466 <report_grbl_settings+0x16>

    details = settings_get_details();
 801447e:	f003 ffbb 	bl	80183f8 <settings_get_details>
 8014482:	6138      	str	r0, [r7, #16]

    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 8014484:	2104      	movs	r1, #4
 8014486:	69b8      	ldr	r0, [r7, #24]
 8014488:	f011 f958 	bl	802573c <calloc>
 801448c:	4603      	mov	r3, r0
 801448e:	617b      	str	r3, [r7, #20]
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	60fb      	str	r3, [r7, #12]
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	2b00      	cmp	r3, #0
 8014498:	f000 808a 	beq.w	80145b0 <report_grbl_settings+0x160>

        n_settings = 0;
 801449c:	2300      	movs	r3, #0
 801449e:	61bb      	str	r3, [r7, #24]

        // Report core settings
        for(idx = 0; idx < details->n_settings; idx++) {
 80144a0:	2300      	movs	r3, #0
 80144a2:	61fb      	str	r3, [r7, #28]
 80144a4:	e029      	b.n	80144fa <report_grbl_settings+0xaa>
            setting = &details->settings[idx];
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	68d9      	ldr	r1, [r3, #12]
 80144aa:	69fa      	ldr	r2, [r7, #28]
 80144ac:	4613      	mov	r3, r2
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	4413      	add	r3, r2
 80144b2:	011b      	lsls	r3, r3, #4
 80144b4:	440b      	add	r3, r1
 80144b6:	60bb      	str	r3, [r7, #8]
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 80144b8:	79fb      	ldrb	r3, [r7, #7]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d107      	bne.n	80144ce <report_grbl_settings+0x7e>
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	7f1b      	ldrb	r3, [r3, #28]
 80144c2:	2b04      	cmp	r3, #4
 80144c4:	d003      	beq.n	80144ce <report_grbl_settings+0x7e>
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	7f1b      	ldrb	r3, [r3, #28]
 80144ca:	2b05      	cmp	r3, #5
 80144cc:	d112      	bne.n	80144f4 <report_grbl_settings+0xa4>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            if((all || setting->type == Setting_IsLegacy || setting->type == Setting_IsLegacyFn) &&
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d006      	beq.n	80144e4 <report_grbl_settings+0x94>
                  (setting->is_available == NULL ||setting->is_available(setting))) {
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144da:	68b8      	ldr	r0, [r7, #8]
 80144dc:	4798      	blx	r3
 80144de:	4603      	mov	r3, r0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d007      	beq.n	80144f4 <report_grbl_settings+0xa4>
                *psetting++ = (setting_detail_t *)setting;
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	1d1a      	adds	r2, r3, #4
 80144e8:	617a      	str	r2, [r7, #20]
 80144ea:	68ba      	ldr	r2, [r7, #8]
 80144ec:	601a      	str	r2, [r3, #0]
                n_settings++;
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	3301      	adds	r3, #1
 80144f2:	61bb      	str	r3, [r7, #24]
        for(idx = 0; idx < details->n_settings; idx++) {
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	3301      	adds	r3, #1
 80144f8:	61fb      	str	r3, [r7, #28]
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	891b      	ldrh	r3, [r3, #8]
 80144fe:	461a      	mov	r2, r3
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	4293      	cmp	r3, r2
 8014504:	d3cf      	bcc.n	80144a6 <report_grbl_settings+0x56>
            }
        }

        // Report driver and plugin settings
        if(all && (details = details->next)) do {
 8014506:	79fb      	ldrb	r3, [r7, #7]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d033      	beq.n	8014574 <report_grbl_settings+0x124>
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	699b      	ldr	r3, [r3, #24]
 8014510:	613b      	str	r3, [r7, #16]
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d02d      	beq.n	8014574 <report_grbl_settings+0x124>
            for(idx = 0; idx < details->n_settings; idx++) {
 8014518:	2300      	movs	r3, #0
 801451a:	61fb      	str	r3, [r7, #28]
 801451c:	e01e      	b.n	801455c <report_grbl_settings+0x10c>
                setting = &details->settings[idx];
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	68d9      	ldr	r1, [r3, #12]
 8014522:	69fa      	ldr	r2, [r7, #28]
 8014524:	4613      	mov	r3, r2
 8014526:	005b      	lsls	r3, r3, #1
 8014528:	4413      	add	r3, r2
 801452a:	011b      	lsls	r3, r3, #4
 801452c:	440b      	add	r3, r1
 801452e:	60bb      	str	r3, [r7, #8]
                if(setting->is_available == NULL ||setting->is_available(setting)) {
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014534:	2b00      	cmp	r3, #0
 8014536:	d006      	beq.n	8014546 <report_grbl_settings+0xf6>
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801453c:	68b8      	ldr	r0, [r7, #8]
 801453e:	4798      	blx	r3
 8014540:	4603      	mov	r3, r0
 8014542:	2b00      	cmp	r3, #0
 8014544:	d007      	beq.n	8014556 <report_grbl_settings+0x106>
                    *psetting++ = (setting_detail_t *)setting;
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	1d1a      	adds	r2, r3, #4
 801454a:	617a      	str	r2, [r7, #20]
 801454c:	68ba      	ldr	r2, [r7, #8]
 801454e:	601a      	str	r2, [r3, #0]
                    n_settings++;
 8014550:	69bb      	ldr	r3, [r7, #24]
 8014552:	3301      	adds	r3, #1
 8014554:	61bb      	str	r3, [r7, #24]
            for(idx = 0; idx < details->n_settings; idx++) {
 8014556:	69fb      	ldr	r3, [r7, #28]
 8014558:	3301      	adds	r3, #1
 801455a:	61fb      	str	r3, [r7, #28]
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	891b      	ldrh	r3, [r3, #8]
 8014560:	461a      	mov	r2, r3
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	4293      	cmp	r3, r2
 8014566:	d3da      	bcc.n	801451e <report_grbl_settings+0xce>
                }
            }
        } while((details = details->next));
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	699b      	ldr	r3, [r3, #24]
 801456c:	613b      	str	r3, [r7, #16]
 801456e:	693b      	ldr	r3, [r7, #16]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d1d1      	bne.n	8014518 <report_grbl_settings+0xc8>

        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 8014574:	4b1f      	ldr	r3, [pc, #124]	; (80145f4 <report_grbl_settings+0x1a4>)
 8014576:	2204      	movs	r2, #4
 8014578:	69b9      	ldr	r1, [r7, #24]
 801457a:	68f8      	ldr	r0, [r7, #12]
 801457c:	f011 f9fa 	bl	8025974 <qsort>

        for(idx = 0; idx < n_settings; idx++)
 8014580:	2300      	movs	r3, #0
 8014582:	61fb      	str	r3, [r7, #28]
 8014584:	e00c      	b.n	80145a0 <report_grbl_settings+0x150>
            settings_iterator(all_settings[idx], print_setting, data);
 8014586:	69fb      	ldr	r3, [r7, #28]
 8014588:	009b      	lsls	r3, r3, #2
 801458a:	68fa      	ldr	r2, [r7, #12]
 801458c:	4413      	add	r3, r2
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	683a      	ldr	r2, [r7, #0]
 8014592:	4919      	ldr	r1, [pc, #100]	; (80145f8 <report_grbl_settings+0x1a8>)
 8014594:	4618      	mov	r0, r3
 8014596:	f006 f8ef 	bl	801a778 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 801459a:	69fb      	ldr	r3, [r7, #28]
 801459c:	3301      	adds	r3, #1
 801459e:	61fb      	str	r3, [r7, #28]
 80145a0:	69fa      	ldr	r2, [r7, #28]
 80145a2:	69bb      	ldr	r3, [r7, #24]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d3ee      	bcc.n	8014586 <report_grbl_settings+0x136>

        free(all_settings);
 80145a8:	68f8      	ldr	r0, [r7, #12]
 80145aa:	f011 f8ed 	bl	8025788 <free>

    } else do {
        for(idx = 0; idx < n_settings; idx++)
            settings_iterator(&details->settings[idx], print_setting, data);
    } while((details = details->next));
}
 80145ae:	e01c      	b.n	80145ea <report_grbl_settings+0x19a>
        for(idx = 0; idx < n_settings; idx++)
 80145b0:	2300      	movs	r3, #0
 80145b2:	61fb      	str	r3, [r7, #28]
 80145b4:	e00f      	b.n	80145d6 <report_grbl_settings+0x186>
            settings_iterator(&details->settings[idx], print_setting, data);
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	68d9      	ldr	r1, [r3, #12]
 80145ba:	69fa      	ldr	r2, [r7, #28]
 80145bc:	4613      	mov	r3, r2
 80145be:	005b      	lsls	r3, r3, #1
 80145c0:	4413      	add	r3, r2
 80145c2:	011b      	lsls	r3, r3, #4
 80145c4:	440b      	add	r3, r1
 80145c6:	683a      	ldr	r2, [r7, #0]
 80145c8:	490b      	ldr	r1, [pc, #44]	; (80145f8 <report_grbl_settings+0x1a8>)
 80145ca:	4618      	mov	r0, r3
 80145cc:	f006 f8d4 	bl	801a778 <settings_iterator>
        for(idx = 0; idx < n_settings; idx++)
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	3301      	adds	r3, #1
 80145d4:	61fb      	str	r3, [r7, #28]
 80145d6:	69fa      	ldr	r2, [r7, #28]
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d3eb      	bcc.n	80145b6 <report_grbl_settings+0x166>
    } while((details = details->next));
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	699b      	ldr	r3, [r3, #24]
 80145e2:	613b      	str	r3, [r7, #16]
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d1e2      	bne.n	80145b0 <report_grbl_settings+0x160>
}
 80145ea:	bf00      	nop
 80145ec:	3720      	adds	r7, #32
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
 80145f2:	bf00      	nop
 80145f4:	08014301 	.word	0x08014301
 80145f8:	080143e9 	.word	0x080143e9

080145fc <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters (void)
{
 80145fc:	b590      	push	{r4, r7, lr}
 80145fe:	b085      	sub	sp, #20
 8014600:	af00      	add	r7, sp, #0
    // Report in terms of machine position.
    float print_position[N_AXIS];
    system_convert_array_steps_to_mpos(print_position, sys.probe_position);
 8014602:	1d3b      	adds	r3, r7, #4
 8014604:	4915      	ldr	r1, [pc, #84]	; (801465c <report_probe_parameters+0x60>)
 8014606:	4618      	mov	r0, r3
 8014608:	f00c fef6 	bl	80213f8 <system_convert_array_steps_to_mpos>
    hal.stream.write("[PRB:");
 801460c:	4b14      	ldr	r3, [pc, #80]	; (8014660 <report_probe_parameters+0x64>)
 801460e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014612:	4814      	ldr	r0, [pc, #80]	; (8014664 <report_probe_parameters+0x68>)
 8014614:	4798      	blx	r3
    hal.stream.write(get_axis_values(print_position));
 8014616:	4b12      	ldr	r3, [pc, #72]	; (8014660 <report_probe_parameters+0x64>)
 8014618:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801461c:	4b12      	ldr	r3, [pc, #72]	; (8014668 <report_probe_parameters+0x6c>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	1d3a      	adds	r2, r7, #4
 8014622:	4610      	mov	r0, r2
 8014624:	4798      	blx	r3
 8014626:	4603      	mov	r3, r0
 8014628:	4618      	mov	r0, r3
 801462a:	47a0      	blx	r4
    hal.stream.write(sys.flags.probe_succeeded ? ":1" : ":0");
 801462c:	4b0c      	ldr	r3, [pc, #48]	; (8014660 <report_probe_parameters+0x64>)
 801462e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014632:	4a0e      	ldr	r2, [pc, #56]	; (801466c <report_probe_parameters+0x70>)
 8014634:	7d92      	ldrb	r2, [r2, #22]
 8014636:	f002 0202 	and.w	r2, r2, #2
 801463a:	b2d2      	uxtb	r2, r2
 801463c:	2a00      	cmp	r2, #0
 801463e:	d001      	beq.n	8014644 <report_probe_parameters+0x48>
 8014640:	4a0b      	ldr	r2, [pc, #44]	; (8014670 <report_probe_parameters+0x74>)
 8014642:	e000      	b.n	8014646 <report_probe_parameters+0x4a>
 8014644:	4a0b      	ldr	r2, [pc, #44]	; (8014674 <report_probe_parameters+0x78>)
 8014646:	4610      	mov	r0, r2
 8014648:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801464a:	4b05      	ldr	r3, [pc, #20]	; (8014660 <report_probe_parameters+0x64>)
 801464c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014650:	4809      	ldr	r0, [pc, #36]	; (8014678 <report_probe_parameters+0x7c>)
 8014652:	4798      	blx	r3
}
 8014654:	bf00      	nop
 8014656:	3714      	adds	r7, #20
 8014658:	46bd      	mov	sp, r7
 801465a:	bd90      	pop	{r4, r7, pc}
 801465c:	20001558 	.word	0x20001558
 8014660:	200016a0 	.word	0x200016a0
 8014664:	0802d59c 	.word	0x0802d59c
 8014668:	20001ca8 	.word	0x20001ca8
 801466c:	20001520 	.word	0x20001520
 8014670:	0802d5a4 	.word	0x0802d5a4
 8014674:	0802d5a8 	.word	0x0802d5a8
 8014678:	0802d4b0 	.word	0x0802d4b0

0801467c <report_home_position>:

// Prints current home position in terms of machine position.
// Bitmask for homed axes attached.
void report_home_position (void)
{
 801467c:	b598      	push	{r3, r4, r7, lr}
 801467e:	af00      	add	r7, sp, #0
    hal.stream.write("[HOME:");
 8014680:	4b13      	ldr	r3, [pc, #76]	; (80146d0 <report_home_position+0x54>)
 8014682:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014686:	4813      	ldr	r0, [pc, #76]	; (80146d4 <report_home_position+0x58>)
 8014688:	4798      	blx	r3
    hal.stream.write(get_axis_values(sys.home_position));
 801468a:	4b11      	ldr	r3, [pc, #68]	; (80146d0 <report_home_position+0x54>)
 801468c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014690:	4b11      	ldr	r3, [pc, #68]	; (80146d8 <report_home_position+0x5c>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	4811      	ldr	r0, [pc, #68]	; (80146dc <report_home_position+0x60>)
 8014696:	4798      	blx	r3
 8014698:	4603      	mov	r3, r0
 801469a:	4618      	mov	r0, r3
 801469c:	47a0      	blx	r4
    hal.stream.write(":");
 801469e:	4b0c      	ldr	r3, [pc, #48]	; (80146d0 <report_home_position+0x54>)
 80146a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80146a4:	480e      	ldr	r0, [pc, #56]	; (80146e0 <report_home_position+0x64>)
 80146a6:	4798      	blx	r3
    hal.stream.write(uitoa(sys.homed.mask));
 80146a8:	4b09      	ldr	r3, [pc, #36]	; (80146d0 <report_home_position+0x54>)
 80146aa:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80146ae:	4b0d      	ldr	r3, [pc, #52]	; (80146e4 <report_home_position+0x68>)
 80146b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7fb fb31 	bl	800fd1c <uitoa>
 80146ba:	4603      	mov	r3, r0
 80146bc:	4618      	mov	r0, r3
 80146be:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 80146c0:	4b03      	ldr	r3, [pc, #12]	; (80146d0 <report_home_position+0x54>)
 80146c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80146c6:	4808      	ldr	r0, [pc, #32]	; (80146e8 <report_home_position+0x6c>)
 80146c8:	4798      	blx	r3
}
 80146ca:	bf00      	nop
 80146cc:	bd98      	pop	{r3, r4, r7, pc}
 80146ce:	bf00      	nop
 80146d0:	200016a0 	.word	0x200016a0
 80146d4:	0802d5ac 	.word	0x0802d5ac
 80146d8:	20001ca8 	.word	0x20001ca8
 80146dc:	20001578 	.word	0x20001578
 80146e0:	0802d5b4 	.word	0x0802d5b4
 80146e4:	20001520 	.word	0x20001520
 80146e8:	0802d4b0 	.word	0x0802d4b0

080146ec <report_tool_offsets>:

// Prints current tool offsets.
void report_tool_offsets (void)
{
 80146ec:	b598      	push	{r3, r4, r7, lr}
 80146ee:	af00      	add	r7, sp, #0
    hal.stream.write("[TLO:");
 80146f0:	4b0a      	ldr	r3, [pc, #40]	; (801471c <report_tool_offsets+0x30>)
 80146f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80146f6:	480a      	ldr	r0, [pc, #40]	; (8014720 <report_tool_offsets+0x34>)
 80146f8:	4798      	blx	r3
#if TOOL_LENGTH_OFFSET_AXIS >= 0
    hal.stream.write(get_axis_value(gc_state.tool_length_offset[TOOL_LENGTH_OFFSET_AXIS]));
#else
    hal.stream.write(get_axis_values(gc_state.tool_length_offset));
 80146fa:	4b08      	ldr	r3, [pc, #32]	; (801471c <report_tool_offsets+0x30>)
 80146fc:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014700:	4b08      	ldr	r3, [pc, #32]	; (8014724 <report_tool_offsets+0x38>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4808      	ldr	r0, [pc, #32]	; (8014728 <report_tool_offsets+0x3c>)
 8014706:	4798      	blx	r3
 8014708:	4603      	mov	r3, r0
 801470a:	4618      	mov	r0, r3
 801470c:	47a0      	blx	r4
#endif
    hal.stream.write("]" ASCII_EOL);
 801470e:	4b03      	ldr	r3, [pc, #12]	; (801471c <report_tool_offsets+0x30>)
 8014710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014714:	4805      	ldr	r0, [pc, #20]	; (801472c <report_tool_offsets+0x40>)
 8014716:	4798      	blx	r3
}
 8014718:	bf00      	nop
 801471a:	bd98      	pop	{r3, r4, r7, pc}
 801471c:	200016a0 	.word	0x200016a0
 8014720:	0802d5b8 	.word	0x0802d5b8
 8014724:	20001ca8 	.word	0x20001ca8
 8014728:	20001404 	.word	0x20001404
 801472c:	0802d4b0 	.word	0x0802d4b0

08014730 <report_ngc_parameter>:

// Prints NIST/LinuxCNC NGC parameter value
status_code_t report_ngc_parameter (ngc_param_id_t id)
{
 8014730:	b590      	push	{r4, r7, lr}
 8014732:	b085      	sub	sp, #20
 8014734:	af00      	add	r7, sp, #0
 8014736:	4603      	mov	r3, r0
 8014738:	80fb      	strh	r3, [r7, #6]
    float value;

    hal.stream.write("[PARAM:");
 801473a:	4b1d      	ldr	r3, [pc, #116]	; (80147b0 <report_ngc_parameter+0x80>)
 801473c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014740:	481c      	ldr	r0, [pc, #112]	; (80147b4 <report_ngc_parameter+0x84>)
 8014742:	4798      	blx	r3
    hal.stream.write(uitoa(id));
 8014744:	4b1a      	ldr	r3, [pc, #104]	; (80147b0 <report_ngc_parameter+0x80>)
 8014746:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801474a:	88fb      	ldrh	r3, [r7, #6]
 801474c:	4618      	mov	r0, r3
 801474e:	f7fb fae5 	bl	800fd1c <uitoa>
 8014752:	4603      	mov	r3, r0
 8014754:	4618      	mov	r0, r3
 8014756:	47a0      	blx	r4
    if(ngc_param_get(id, &value)) {
 8014758:	f107 020c 	add.w	r2, r7, #12
 801475c:	88fb      	ldrh	r3, [r7, #6]
 801475e:	4611      	mov	r1, r2
 8014760:	4618      	mov	r0, r3
 8014762:	f7fa ffdb 	bl	800f71c <ngc_param_get>
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	d012      	beq.n	8014792 <report_ngc_parameter+0x62>
        hal.stream.write("=");
 801476c:	4b10      	ldr	r3, [pc, #64]	; (80147b0 <report_ngc_parameter+0x80>)
 801476e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014772:	4811      	ldr	r0, [pc, #68]	; (80147b8 <report_ngc_parameter+0x88>)
 8014774:	4798      	blx	r3
        hal.stream.write(ftoa(value, 3));
 8014776:	4b0e      	ldr	r3, [pc, #56]	; (80147b0 <report_ngc_parameter+0x80>)
 8014778:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801477c:	edd7 7a03 	vldr	s15, [r7, #12]
 8014780:	2003      	movs	r0, #3
 8014782:	eeb0 0a67 	vmov.f32	s0, s15
 8014786:	f7fb fb05 	bl	800fd94 <ftoa>
 801478a:	4603      	mov	r3, r0
 801478c:	4618      	mov	r0, r3
 801478e:	47a0      	blx	r4
 8014790:	e004      	b.n	801479c <report_ngc_parameter+0x6c>
    } else
        hal.stream.write("=N/A");
 8014792:	4b07      	ldr	r3, [pc, #28]	; (80147b0 <report_ngc_parameter+0x80>)
 8014794:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014798:	4808      	ldr	r0, [pc, #32]	; (80147bc <report_ngc_parameter+0x8c>)
 801479a:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 801479c:	4b04      	ldr	r3, [pc, #16]	; (80147b0 <report_ngc_parameter+0x80>)
 801479e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80147a2:	4807      	ldr	r0, [pc, #28]	; (80147c0 <report_ngc_parameter+0x90>)
 80147a4:	4798      	blx	r3

    return Status_OK;
 80147a6:	2300      	movs	r3, #0
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3714      	adds	r7, #20
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd90      	pop	{r4, r7, pc}
 80147b0:	200016a0 	.word	0x200016a0
 80147b4:	0802d5c0 	.word	0x0802d5c0
 80147b8:	0802d58c 	.word	0x0802d58c
 80147bc:	0802d5c8 	.word	0x0802d5c8
 80147c0:	0802d4b0 	.word	0x0802d4b0

080147c4 <report_named_ngc_parameter>:

// Prints named LinuxCNC NGC parameter value
status_code_t report_named_ngc_parameter (char *arg)
{
 80147c4:	b590      	push	{r4, r7, lr}
 80147c6:	b085      	sub	sp, #20
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
    float value;

    hal.stream.write("[PARAM:");
 80147cc:	4b1a      	ldr	r3, [pc, #104]	; (8014838 <report_named_ngc_parameter+0x74>)
 80147ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80147d2:	481a      	ldr	r0, [pc, #104]	; (801483c <report_named_ngc_parameter+0x78>)
 80147d4:	4798      	blx	r3
    hal.stream.write(arg);
 80147d6:	4b18      	ldr	r3, [pc, #96]	; (8014838 <report_named_ngc_parameter+0x74>)
 80147d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	4798      	blx	r3
    if(ngc_named_param_get(arg, &value)) {
 80147e0:	f107 030c 	add.w	r3, r7, #12
 80147e4:	4619      	mov	r1, r3
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f7fb fa0a 	bl	800fc00 <ngc_named_param_get>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d012      	beq.n	8014818 <report_named_ngc_parameter+0x54>
        hal.stream.write("=");
 80147f2:	4b11      	ldr	r3, [pc, #68]	; (8014838 <report_named_ngc_parameter+0x74>)
 80147f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80147f8:	4811      	ldr	r0, [pc, #68]	; (8014840 <report_named_ngc_parameter+0x7c>)
 80147fa:	4798      	blx	r3
        hal.stream.write(ftoa(value, 3));
 80147fc:	4b0e      	ldr	r3, [pc, #56]	; (8014838 <report_named_ngc_parameter+0x74>)
 80147fe:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014802:	edd7 7a03 	vldr	s15, [r7, #12]
 8014806:	2003      	movs	r0, #3
 8014808:	eeb0 0a67 	vmov.f32	s0, s15
 801480c:	f7fb fac2 	bl	800fd94 <ftoa>
 8014810:	4603      	mov	r3, r0
 8014812:	4618      	mov	r0, r3
 8014814:	47a0      	blx	r4
 8014816:	e004      	b.n	8014822 <report_named_ngc_parameter+0x5e>
    } else
        hal.stream.write("=N/A");
 8014818:	4b07      	ldr	r3, [pc, #28]	; (8014838 <report_named_ngc_parameter+0x74>)
 801481a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801481e:	4809      	ldr	r0, [pc, #36]	; (8014844 <report_named_ngc_parameter+0x80>)
 8014820:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8014822:	4b05      	ldr	r3, [pc, #20]	; (8014838 <report_named_ngc_parameter+0x74>)
 8014824:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014828:	4807      	ldr	r0, [pc, #28]	; (8014848 <report_named_ngc_parameter+0x84>)
 801482a:	4798      	blx	r3

    return Status_OK;
 801482c:	2300      	movs	r3, #0
}
 801482e:	4618      	mov	r0, r3
 8014830:	3714      	adds	r7, #20
 8014832:	46bd      	mov	sp, r7
 8014834:	bd90      	pop	{r4, r7, pc}
 8014836:	bf00      	nop
 8014838:	200016a0 	.word	0x200016a0
 801483c:	0802d5c0 	.word	0x0802d5c0
 8014840:	0802d58c 	.word	0x0802d58c
 8014844:	0802d5c8 	.word	0x0802d5c8
 8014848:	0802d4b0 	.word	0x0802d4b0

0801484c <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing, tool table)
void report_ngc_parameters (void)
{
 801484c:	b5b0      	push	{r4, r5, r7, lr}
 801484e:	b086      	sub	sp, #24
 8014850:	af00      	add	r7, sp, #0
    uint_fast8_t idx;
    float coord_data[N_AXIS];

    if(gc_state.modal.scaling_active) {
 8014852:	4b6b      	ldr	r3, [pc, #428]	; (8014a00 <report_ngc_parameters+0x1b4>)
 8014854:	7f9b      	ldrb	r3, [r3, #30]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d016      	beq.n	8014888 <report_ngc_parameters+0x3c>
        hal.stream.write("[G51:");
 801485a:	4b6a      	ldr	r3, [pc, #424]	; (8014a04 <report_ngc_parameters+0x1b8>)
 801485c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014860:	4869      	ldr	r0, [pc, #420]	; (8014a08 <report_ngc_parameters+0x1bc>)
 8014862:	4798      	blx	r3
        hal.stream.write(get_axis_values(gc_get_scaling()));
 8014864:	4b67      	ldr	r3, [pc, #412]	; (8014a04 <report_ngc_parameters+0x1b8>)
 8014866:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801486a:	4b68      	ldr	r3, [pc, #416]	; (8014a0c <report_ngc_parameters+0x1c0>)
 801486c:	681d      	ldr	r5, [r3, #0]
 801486e:	f7f0 fe25 	bl	80054bc <gc_get_scaling>
 8014872:	4603      	mov	r3, r0
 8014874:	4618      	mov	r0, r3
 8014876:	47a8      	blx	r5
 8014878:	4603      	mov	r3, r0
 801487a:	4618      	mov	r0, r3
 801487c:	47a0      	blx	r4
        hal.stream.write("]" ASCII_EOL);
 801487e:	4b61      	ldr	r3, [pc, #388]	; (8014a04 <report_ngc_parameters+0x1b8>)
 8014880:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014884:	4862      	ldr	r0, [pc, #392]	; (8014a10 <report_ngc_parameters+0x1c4>)
 8014886:	4798      	blx	r3
    }

    for (idx = 0; idx < N_CoordinateSystems; idx++) {
 8014888:	2300      	movs	r3, #0
 801488a:	617b      	str	r3, [r7, #20]
 801488c:	e059      	b.n	8014942 <report_ngc_parameters+0xf6>

        if (!(settings_read_coord_data((coord_system_id_t)idx, &coord_data))) {
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	b2db      	uxtb	r3, r3
 8014892:	f107 0208 	add.w	r2, r7, #8
 8014896:	4611      	mov	r1, r2
 8014898:	4618      	mov	r0, r3
 801489a:	f005 fcb1 	bl	801a200 <settings_read_coord_data>
 801489e:	4603      	mov	r3, r0
 80148a0:	f083 0301 	eor.w	r3, r3, #1
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d004      	beq.n	80148b4 <report_ngc_parameters+0x68>
            grbl.report.status_message(Status_SettingReadFail);
 80148aa:	4b5a      	ldr	r3, [pc, #360]	; (8014a14 <report_ngc_parameters+0x1c8>)
 80148ac:	689b      	ldr	r3, [r3, #8]
 80148ae:	2007      	movs	r0, #7
 80148b0:	4798      	blx	r3
 80148b2:	e0a1      	b.n	80149f8 <report_ngc_parameters+0x1ac>
            return;
        }

        hal.stream.write("[G");
 80148b4:	4b53      	ldr	r3, [pc, #332]	; (8014a04 <report_ngc_parameters+0x1b8>)
 80148b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80148ba:	4857      	ldr	r0, [pc, #348]	; (8014a18 <report_ngc_parameters+0x1cc>)
 80148bc:	4798      	blx	r3

        switch (idx) {
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	2b0b      	cmp	r3, #11
 80148c2:	d021      	beq.n	8014908 <report_ngc_parameters+0xbc>
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	2b0b      	cmp	r3, #11
 80148c8:	d812      	bhi.n	80148f0 <report_ngc_parameters+0xa4>
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	2b09      	cmp	r3, #9
 80148ce:	d003      	beq.n	80148d8 <report_ngc_parameters+0x8c>
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	2b0a      	cmp	r3, #10
 80148d4:	d006      	beq.n	80148e4 <report_ngc_parameters+0x98>
 80148d6:	e00b      	b.n	80148f0 <report_ngc_parameters+0xa4>

            case CoordinateSystem_G28:
                hal.stream.write("28");
 80148d8:	4b4a      	ldr	r3, [pc, #296]	; (8014a04 <report_ngc_parameters+0x1b8>)
 80148da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80148de:	484f      	ldr	r0, [pc, #316]	; (8014a1c <report_ngc_parameters+0x1d0>)
 80148e0:	4798      	blx	r3
                break;
 80148e2:	e012      	b.n	801490a <report_ngc_parameters+0xbe>

            case CoordinateSystem_G30:
                hal.stream.write("30");
 80148e4:	4b47      	ldr	r3, [pc, #284]	; (8014a04 <report_ngc_parameters+0x1b8>)
 80148e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80148ea:	484d      	ldr	r0, [pc, #308]	; (8014a20 <report_ngc_parameters+0x1d4>)
 80148ec:	4798      	blx	r3
                break;
 80148ee:	e00c      	b.n	801490a <report_ngc_parameters+0xbe>

            case CoordinateSystem_G92:
                break;

            default: // G54-G59
                hal.stream.write(map_coord_system((coord_system_id_t)idx));
 80148f0:	4b44      	ldr	r3, [pc, #272]	; (8014a04 <report_ngc_parameters+0x1b8>)
 80148f2:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	b2db      	uxtb	r3, r3
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7ff f8ba 	bl	8013a74 <map_coord_system>
 8014900:	4603      	mov	r3, r0
 8014902:	4618      	mov	r0, r3
 8014904:	47a0      	blx	r4
                break;
 8014906:	e000      	b.n	801490a <report_ngc_parameters+0xbe>
                break;
 8014908:	bf00      	nop
        }

        if(idx != CoordinateSystem_G92) {
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	2b0b      	cmp	r3, #11
 801490e:	d015      	beq.n	801493c <report_ngc_parameters+0xf0>
            hal.stream.write(":");
 8014910:	4b3c      	ldr	r3, [pc, #240]	; (8014a04 <report_ngc_parameters+0x1b8>)
 8014912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014916:	4843      	ldr	r0, [pc, #268]	; (8014a24 <report_ngc_parameters+0x1d8>)
 8014918:	4798      	blx	r3
            hal.stream.write(get_axis_values(coord_data));
 801491a:	4b3a      	ldr	r3, [pc, #232]	; (8014a04 <report_ngc_parameters+0x1b8>)
 801491c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014920:	4b3a      	ldr	r3, [pc, #232]	; (8014a0c <report_ngc_parameters+0x1c0>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f107 0208 	add.w	r2, r7, #8
 8014928:	4610      	mov	r0, r2
 801492a:	4798      	blx	r3
 801492c:	4603      	mov	r3, r0
 801492e:	4618      	mov	r0, r3
 8014930:	47a0      	blx	r4
            hal.stream.write("]" ASCII_EOL);
 8014932:	4b34      	ldr	r3, [pc, #208]	; (8014a04 <report_ngc_parameters+0x1b8>)
 8014934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014938:	4835      	ldr	r0, [pc, #212]	; (8014a10 <report_ngc_parameters+0x1c4>)
 801493a:	4798      	blx	r3
    for (idx = 0; idx < N_CoordinateSystems; idx++) {
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	3301      	adds	r3, #1
 8014940:	617b      	str	r3, [r7, #20]
 8014942:	697b      	ldr	r3, [r7, #20]
 8014944:	2b0b      	cmp	r3, #11
 8014946:	d9a2      	bls.n	801488e <report_ngc_parameters+0x42>
        }
    }

    // Print G92, G92.1 which are not persistent in memory
    hal.stream.write("92:");
 8014948:	4b2e      	ldr	r3, [pc, #184]	; (8014a04 <report_ngc_parameters+0x1b8>)
 801494a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801494e:	4836      	ldr	r0, [pc, #216]	; (8014a28 <report_ngc_parameters+0x1dc>)
 8014950:	4798      	blx	r3
    hal.stream.write(get_axis_values(gc_state.g92_coord_offset));
 8014952:	4b2c      	ldr	r3, [pc, #176]	; (8014a04 <report_ngc_parameters+0x1b8>)
 8014954:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014958:	4b2c      	ldr	r3, [pc, #176]	; (8014a0c <report_ngc_parameters+0x1c0>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	4833      	ldr	r0, [pc, #204]	; (8014a2c <report_ngc_parameters+0x1e0>)
 801495e:	4798      	blx	r3
 8014960:	4603      	mov	r3, r0
 8014962:	4618      	mov	r0, r3
 8014964:	47a0      	blx	r4
    hal.stream.write("]" ASCII_EOL);
 8014966:	4b27      	ldr	r3, [pc, #156]	; (8014a04 <report_ngc_parameters+0x1b8>)
 8014968:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801496c:	4828      	ldr	r0, [pc, #160]	; (8014a10 <report_ngc_parameters+0x1c4>)
 801496e:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
    }
#endif

#if COMPATIBILITY_LEVEL < 10
    if(settings.homing.flags.enabled)
 8014970:	4b2f      	ldr	r3, [pc, #188]	; (8014a30 <report_ngc_parameters+0x1e4>)
 8014972:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8014976:	f003 0301 	and.w	r3, r3, #1
 801497a:	b2db      	uxtb	r3, r3
 801497c:	2b00      	cmp	r3, #0
 801497e:	d001      	beq.n	8014984 <report_ngc_parameters+0x138>
        report_home_position();
 8014980:	f7ff fe7c 	bl	801467c <report_home_position>
#endif

    report_tool_offsets();      // Print tool length offset value.
 8014984:	f7ff feb2 	bl	80146ec <report_tool_offsets>
    report_probe_parameters();  // Print probe parameters. Not persistent in memory.
 8014988:	f7ff fe38 	bl	80145fc <report_probe_parameters>
    if(sys.tlo_reference_set.mask) { // Print tool length reference offset. Not persistent in memory.
 801498c:	4b29      	ldr	r3, [pc, #164]	; (8014a34 <report_ngc_parameters+0x1e8>)
 801498e:	79db      	ldrb	r3, [r3, #7]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d031      	beq.n	80149f8 <report_ngc_parameters+0x1ac>
        plane_t plane;
        gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8014994:	4b1a      	ldr	r3, [pc, #104]	; (8014a00 <report_ngc_parameters+0x1b4>)
 8014996:	799a      	ldrb	r2, [r3, #6]
 8014998:	1d3b      	adds	r3, r7, #4
 801499a:	4611      	mov	r1, r2
 801499c:	4618      	mov	r0, r3
 801499e:	f7f0 fea3 	bl	80056e8 <gc_get_plane_data>
        hal.stream.write("[TLR:");
 80149a2:	4b18      	ldr	r3, [pc, #96]	; (8014a04 <report_ngc_parameters+0x1b8>)
 80149a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80149a8:	4823      	ldr	r0, [pc, #140]	; (8014a38 <report_ngc_parameters+0x1ec>)
 80149aa:	4798      	blx	r3
        hal.stream.write(get_axis_value(sys.tlo_reference[plane.axis_linear] / settings.axis[plane.axis_linear].steps_per_mm));
 80149ac:	4b15      	ldr	r3, [pc, #84]	; (8014a04 <report_ngc_parameters+0x1b8>)
 80149ae:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80149b2:	4b22      	ldr	r3, [pc, #136]	; (8014a3c <report_ngc_parameters+0x1f0>)
 80149b4:	681a      	ldr	r2, [r3, #0]
 80149b6:	79bb      	ldrb	r3, [r7, #6]
 80149b8:	491e      	ldr	r1, [pc, #120]	; (8014a34 <report_ngc_parameters+0x1e8>)
 80149ba:	3302      	adds	r3, #2
 80149bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80149c0:	ee07 3a90 	vmov	s15, r3
 80149c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80149c8:	79bb      	ldrb	r3, [r7, #6]
 80149ca:	4618      	mov	r0, r3
 80149cc:	4918      	ldr	r1, [pc, #96]	; (8014a30 <report_ngc_parameters+0x1e4>)
 80149ce:	4603      	mov	r3, r0
 80149d0:	009b      	lsls	r3, r3, #2
 80149d2:	4403      	add	r3, r0
 80149d4:	009b      	lsls	r3, r3, #2
 80149d6:	440b      	add	r3, r1
 80149d8:	3330      	adds	r3, #48	; 0x30
 80149da:	edd3 7a00 	vldr	s15, [r3]
 80149de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80149e2:	eeb0 0a66 	vmov.f32	s0, s13
 80149e6:	4790      	blx	r2
 80149e8:	4603      	mov	r3, r0
 80149ea:	4618      	mov	r0, r3
 80149ec:	47a0      	blx	r4
        hal.stream.write("]" ASCII_EOL);
 80149ee:	4b05      	ldr	r3, [pc, #20]	; (8014a04 <report_ngc_parameters+0x1b8>)
 80149f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80149f4:	4806      	ldr	r0, [pc, #24]	; (8014a10 <report_ngc_parameters+0x1c4>)
 80149f6:	4798      	blx	r3
    }
}
 80149f8:	3718      	adds	r7, #24
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bdb0      	pop	{r4, r5, r7, pc}
 80149fe:	bf00      	nop
 8014a00:	2000137c 	.word	0x2000137c
 8014a04:	200016a0 	.word	0x200016a0
 8014a08:	0802d5d0 	.word	0x0802d5d0
 8014a0c:	20001ca8 	.word	0x20001ca8
 8014a10:	0802d4b0 	.word	0x0802d4b0
 8014a14:	200015b8 	.word	0x200015b8
 8014a18:	0802d5d8 	.word	0x0802d5d8
 8014a1c:	0802d5dc 	.word	0x0802d5dc
 8014a20:	0802d5e0 	.word	0x0802d5e0
 8014a24:	0802d5b4 	.word	0x0802d5b4
 8014a28:	0802d5e4 	.word	0x0802d5e4
 8014a2c:	200013f8 	.word	0x200013f8
 8014a30:	20001cf0 	.word	0x20001cf0
 8014a34:	20001520 	.word	0x20001520
 8014a38:	0802d5e8 	.word	0x0802d5e8
 8014a3c:	20001cac 	.word	0x20001cac

08014a40 <is_g92_active>:

static inline bool is_g92_active (void)
{
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
    bool active = false;
 8014a46:	2300      	movs	r3, #0
 8014a48:	70fb      	strb	r3, [r7, #3]
    uint_fast32_t idx = N_AXIS;
 8014a4a:	2303      	movs	r3, #3
 8014a4c:	607b      	str	r3, [r7, #4]

    do {
        idx--;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	3b01      	subs	r3, #1
 8014a52:	607b      	str	r3, [r7, #4]
        active = !(gc_state.g92_coord_offset[idx] == 0.0f || gc_state.g92_coord_offset[idx] == -0.0f);
 8014a54:	4a18      	ldr	r2, [pc, #96]	; (8014ab8 <is_g92_active+0x78>)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	331e      	adds	r3, #30
 8014a5a:	009b      	lsls	r3, r3, #2
 8014a5c:	4413      	add	r3, r2
 8014a5e:	3304      	adds	r3, #4
 8014a60:	edd3 7a00 	vldr	s15, [r3]
 8014a64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a6c:	d00e      	beq.n	8014a8c <is_g92_active+0x4c>
 8014a6e:	4a12      	ldr	r2, [pc, #72]	; (8014ab8 <is_g92_active+0x78>)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	331e      	adds	r3, #30
 8014a74:	009b      	lsls	r3, r3, #2
 8014a76:	4413      	add	r3, r2
 8014a78:	3304      	adds	r3, #4
 8014a7a:	edd3 7a00 	vldr	s15, [r3]
 8014a7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a86:	d001      	beq.n	8014a8c <is_g92_active+0x4c>
 8014a88:	2301      	movs	r3, #1
 8014a8a:	e000      	b.n	8014a8e <is_g92_active+0x4e>
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	70fb      	strb	r3, [r7, #3]
 8014a90:	78fb      	ldrb	r3, [r7, #3]
 8014a92:	f003 0301 	and.w	r3, r3, #1
 8014a96:	70fb      	strb	r3, [r7, #3]
    } while(idx && !active);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d005      	beq.n	8014aaa <is_g92_active+0x6a>
 8014a9e:	78fb      	ldrb	r3, [r7, #3]
 8014aa0:	f083 0301 	eor.w	r3, r3, #1
 8014aa4:	b2db      	uxtb	r3, r3
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d1d1      	bne.n	8014a4e <is_g92_active+0xe>

    return active;
 8014aaa:	78fb      	ldrb	r3, [r7, #3]
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	370c      	adds	r7, #12
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab6:	4770      	bx	lr
 8014ab8:	2000137c 	.word	0x2000137c

08014abc <report_gcode_modes>:

// Print current gcode parser mode state
void report_gcode_modes (void)
{
 8014abc:	b598      	push	{r3, r4, r7, lr}
 8014abe:	af00      	add	r7, sp, #0
    hal.stream.write("[GC:G");
 8014ac0:	4ba7      	ldr	r3, [pc, #668]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014ac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014ac6:	48a7      	ldr	r0, [pc, #668]	; (8014d64 <report_gcode_modes+0x2a8>)
 8014ac8:	4798      	blx	r3
    if (gc_state.modal.motion >= MotionMode_ProbeToward) {
 8014aca:	4ba7      	ldr	r3, [pc, #668]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014acc:	881b      	ldrh	r3, [r3, #0]
 8014ace:	2b8b      	cmp	r3, #139	; 0x8b
 8014ad0:	d911      	bls.n	8014af6 <report_gcode_modes+0x3a>
        hal.stream.write("38.");
 8014ad2:	4ba3      	ldr	r3, [pc, #652]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014ad4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014ad8:	48a4      	ldr	r0, [pc, #656]	; (8014d6c <report_gcode_modes+0x2b0>)
 8014ada:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)(gc_state.modal.motion - (MotionMode_ProbeToward - 2))));
 8014adc:	4ba0      	ldr	r3, [pc, #640]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014ade:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014ae2:	4ba1      	ldr	r3, [pc, #644]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014ae4:	881b      	ldrh	r3, [r3, #0]
 8014ae6:	3b8a      	subs	r3, #138	; 0x8a
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7fb f917 	bl	800fd1c <uitoa>
 8014aee:	4603      	mov	r3, r0
 8014af0:	4618      	mov	r0, r3
 8014af2:	47a0      	blx	r4
 8014af4:	e00a      	b.n	8014b0c <report_gcode_modes+0x50>
    } else
        hal.stream.write(uitoa((uint32_t)gc_state.modal.motion));
 8014af6:	4b9a      	ldr	r3, [pc, #616]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014af8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014afc:	4b9a      	ldr	r3, [pc, #616]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014afe:	881b      	ldrh	r3, [r3, #0]
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7fb f90b 	bl	800fd1c <uitoa>
 8014b06:	4603      	mov	r3, r0
 8014b08:	4618      	mov	r0, r3
 8014b0a:	47a0      	blx	r4

    hal.stream.write(" G");
 8014b0c:	4b94      	ldr	r3, [pc, #592]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014b0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014b12:	4897      	ldr	r0, [pc, #604]	; (8014d70 <report_gcode_modes+0x2b4>)
 8014b14:	4798      	blx	r3
    hal.stream.write(map_coord_system(gc_state.modal.coord_system.id));
 8014b16:	4b92      	ldr	r3, [pc, #584]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014b18:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014b1c:	4b92      	ldr	r3, [pc, #584]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014b1e:	7d1b      	ldrb	r3, [r3, #20]
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fe ffa7 	bl	8013a74 <map_coord_system>
 8014b26:	4603      	mov	r3, r0
 8014b28:	4618      	mov	r0, r3
 8014b2a:	47a0      	blx	r4

#if COMPATIBILITY_LEVEL < 10

    if(is_g92_active())
 8014b2c:	f7ff ff88 	bl	8014a40 <is_g92_active>
 8014b30:	4603      	mov	r3, r0
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d004      	beq.n	8014b40 <report_gcode_modes+0x84>
        hal.stream.write(" G92");
 8014b36:	4b8a      	ldr	r3, [pc, #552]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014b3c:	488d      	ldr	r0, [pc, #564]	; (8014d74 <report_gcode_modes+0x2b8>)
 8014b3e:	4798      	blx	r3

#endif

    if(settings.mode == Mode_Lathe)
 8014b40:	4b8d      	ldr	r3, [pc, #564]	; (8014d78 <report_gcode_modes+0x2bc>)
 8014b42:	7e1b      	ldrb	r3, [r3, #24]
 8014b44:	2b02      	cmp	r3, #2
 8014b46:	d10b      	bne.n	8014b60 <report_gcode_modes+0xa4>
        hal.stream.write(gc_state.modal.diameter_mode ? " G7" : " G8");
 8014b48:	4b85      	ldr	r3, [pc, #532]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014b4e:	4a86      	ldr	r2, [pc, #536]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014b50:	7952      	ldrb	r2, [r2, #5]
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	d001      	beq.n	8014b5a <report_gcode_modes+0x9e>
 8014b56:	4a89      	ldr	r2, [pc, #548]	; (8014d7c <report_gcode_modes+0x2c0>)
 8014b58:	e000      	b.n	8014b5c <report_gcode_modes+0xa0>
 8014b5a:	4a89      	ldr	r2, [pc, #548]	; (8014d80 <report_gcode_modes+0x2c4>)
 8014b5c:	4610      	mov	r0, r2
 8014b5e:	4798      	blx	r3

    hal.stream.write(" G");
 8014b60:	4b7f      	ldr	r3, [pc, #508]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014b66:	4882      	ldr	r0, [pc, #520]	; (8014d70 <report_gcode_modes+0x2b4>)
 8014b68:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(gc_state.modal.plane_select + 17)));
 8014b6a:	4b7d      	ldr	r3, [pc, #500]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014b6c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014b70:	4b7d      	ldr	r3, [pc, #500]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014b72:	799b      	ldrb	r3, [r3, #6]
 8014b74:	3311      	adds	r3, #17
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fb f8d0 	bl	800fd1c <uitoa>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	4618      	mov	r0, r3
 8014b80:	47a0      	blx	r4

    hal.stream.write(gc_state.modal.units_imperial ? " G20" : " G21");
 8014b82:	4b77      	ldr	r3, [pc, #476]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014b88:	4a77      	ldr	r2, [pc, #476]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014b8a:	78d2      	ldrb	r2, [r2, #3]
 8014b8c:	2a00      	cmp	r2, #0
 8014b8e:	d001      	beq.n	8014b94 <report_gcode_modes+0xd8>
 8014b90:	4a7c      	ldr	r2, [pc, #496]	; (8014d84 <report_gcode_modes+0x2c8>)
 8014b92:	e000      	b.n	8014b96 <report_gcode_modes+0xda>
 8014b94:	4a7c      	ldr	r2, [pc, #496]	; (8014d88 <report_gcode_modes+0x2cc>)
 8014b96:	4610      	mov	r0, r2
 8014b98:	4798      	blx	r3

    hal.stream.write(gc_state.modal.distance_incremental ? " G91" : " G90");
 8014b9a:	4b71      	ldr	r3, [pc, #452]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014ba0:	4a71      	ldr	r2, [pc, #452]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014ba2:	7912      	ldrb	r2, [r2, #4]
 8014ba4:	2a00      	cmp	r2, #0
 8014ba6:	d001      	beq.n	8014bac <report_gcode_modes+0xf0>
 8014ba8:	4a78      	ldr	r2, [pc, #480]	; (8014d8c <report_gcode_modes+0x2d0>)
 8014baa:	e000      	b.n	8014bae <report_gcode_modes+0xf2>
 8014bac:	4a78      	ldr	r2, [pc, #480]	; (8014d90 <report_gcode_modes+0x2d4>)
 8014bae:	4610      	mov	r0, r2
 8014bb0:	4798      	blx	r3

    hal.stream.write(" G");
 8014bb2:	4b6b      	ldr	r3, [pc, #428]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014bb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014bb8:	486d      	ldr	r0, [pc, #436]	; (8014d70 <report_gcode_modes+0x2b4>)
 8014bba:	4798      	blx	r3
    hal.stream.write(uitoa((uint32_t)(94 - gc_state.modal.feed_mode)));
 8014bbc:	4b68      	ldr	r3, [pc, #416]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014bbe:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014bc2:	4b69      	ldr	r3, [pc, #420]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014bc4:	789b      	ldrb	r3, [r3, #2]
 8014bc6:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7fb f8a6 	bl	800fd1c <uitoa>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	47a0      	blx	r4

    if(settings.mode == Mode_Lathe && gc_spindle_get()->cap.variable)
 8014bd6:	4b68      	ldr	r3, [pc, #416]	; (8014d78 <report_gcode_modes+0x2bc>)
 8014bd8:	7e1b      	ldrb	r3, [r3, #24]
 8014bda:	2b02      	cmp	r3, #2
 8014bdc:	d114      	bne.n	8014c08 <report_gcode_modes+0x14c>
 8014bde:	f7f0 fe9f 	bl	8005920 <gc_spindle_get>
 8014be2:	4603      	mov	r3, r0
 8014be4:	7a5b      	ldrb	r3, [r3, #9]
 8014be6:	f003 0301 	and.w	r3, r3, #1
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d00b      	beq.n	8014c08 <report_gcode_modes+0x14c>
        hal.stream.write(gc_state.modal.spindle.rpm_mode == SpindleSpeedMode_RPM ? " G97" : " G96");
 8014bf0:	4b5b      	ldr	r3, [pc, #364]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014bf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014bf6:	4a5c      	ldr	r2, [pc, #368]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014bf8:	7ed2      	ldrb	r2, [r2, #27]
 8014bfa:	2a00      	cmp	r2, #0
 8014bfc:	d101      	bne.n	8014c02 <report_gcode_modes+0x146>
 8014bfe:	4a65      	ldr	r2, [pc, #404]	; (8014d94 <report_gcode_modes+0x2d8>)
 8014c00:	e000      	b.n	8014c04 <report_gcode_modes+0x148>
 8014c02:	4a65      	ldr	r2, [pc, #404]	; (8014d98 <report_gcode_modes+0x2dc>)
 8014c04:	4610      	mov	r0, r2
 8014c06:	4798      	blx	r3

#if COMPATIBILITY_LEVEL < 10

    if(gc_state.modal.tool_offset_mode == ToolLengthOffset_Cancel)
 8014c08:	4b57      	ldr	r3, [pc, #348]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014c0a:	79db      	ldrb	r3, [r3, #7]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d105      	bne.n	8014c1c <report_gcode_modes+0x160>
        hal.stream.write(" G49");
 8014c10:	4b53      	ldr	r3, [pc, #332]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014c12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c16:	4861      	ldr	r0, [pc, #388]	; (8014d9c <report_gcode_modes+0x2e0>)
 8014c18:	4798      	blx	r3
 8014c1a:	e014      	b.n	8014c46 <report_gcode_modes+0x18a>
    else {
        hal.stream.write(" G43");
 8014c1c:	4b50      	ldr	r3, [pc, #320]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c22:	485f      	ldr	r0, [pc, #380]	; (8014da0 <report_gcode_modes+0x2e4>)
 8014c24:	4798      	blx	r3
        if(gc_state.modal.tool_offset_mode != ToolLengthOffset_Enable)
 8014c26:	4b50      	ldr	r3, [pc, #320]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014c28:	79db      	ldrb	r3, [r3, #7]
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d00b      	beq.n	8014c46 <report_gcode_modes+0x18a>
            hal.stream.write(gc_state.modal.tool_offset_mode == ToolLengthOffset_EnableDynamic ? ".1" : ".2");
 8014c2e:	4b4c      	ldr	r3, [pc, #304]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014c30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c34:	4a4c      	ldr	r2, [pc, #304]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014c36:	79d2      	ldrb	r2, [r2, #7]
 8014c38:	2a02      	cmp	r2, #2
 8014c3a:	d101      	bne.n	8014c40 <report_gcode_modes+0x184>
 8014c3c:	4a59      	ldr	r2, [pc, #356]	; (8014da4 <report_gcode_modes+0x2e8>)
 8014c3e:	e000      	b.n	8014c42 <report_gcode_modes+0x186>
 8014c40:	4a59      	ldr	r2, [pc, #356]	; (8014da8 <report_gcode_modes+0x2ec>)
 8014c42:	4610      	mov	r0, r2
 8014c44:	4798      	blx	r3
    }

    hal.stream.write(gc_state.canned.retract_mode == CCRetractMode_RPos ? " G99" : " G98");
 8014c46:	4b46      	ldr	r3, [pc, #280]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014c48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c4c:	4a46      	ldr	r2, [pc, #280]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014c4e:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
 8014c52:	2a01      	cmp	r2, #1
 8014c54:	d101      	bne.n	8014c5a <report_gcode_modes+0x19e>
 8014c56:	4a55      	ldr	r2, [pc, #340]	; (8014dac <report_gcode_modes+0x2f0>)
 8014c58:	e000      	b.n	8014c5c <report_gcode_modes+0x1a0>
 8014c5a:	4a55      	ldr	r2, [pc, #340]	; (8014db0 <report_gcode_modes+0x2f4>)
 8014c5c:	4610      	mov	r0, r2
 8014c5e:	4798      	blx	r3

    if(gc_state.modal.scaling_active) {
 8014c60:	4b41      	ldr	r3, [pc, #260]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014c62:	7f9b      	ldrb	r3, [r3, #30]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d011      	beq.n	8014c8c <report_gcode_modes+0x1d0>
        hal.stream.write(" G51:");
 8014c68:	4b3d      	ldr	r3, [pc, #244]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014c6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c6e:	4851      	ldr	r0, [pc, #324]	; (8014db4 <report_gcode_modes+0x2f8>)
 8014c70:	4798      	blx	r3
        axis_signals_tostring(buf, gc_get_g51_state());
 8014c72:	f7f0 fc2d 	bl	80054d0 <gc_get_g51_state>
 8014c76:	4603      	mov	r3, r0
 8014c78:	4619      	mov	r1, r3
 8014c7a:	484f      	ldr	r0, [pc, #316]	; (8014db8 <report_gcode_modes+0x2fc>)
 8014c7c:	f7ff f842 	bl	8013d04 <axis_signals_tostring>
        hal.stream.write(buf);
 8014c80:	4b37      	ldr	r3, [pc, #220]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014c82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c86:	484c      	ldr	r0, [pc, #304]	; (8014db8 <report_gcode_modes+0x2fc>)
 8014c88:	4798      	blx	r3
 8014c8a:	e004      	b.n	8014c96 <report_gcode_modes+0x1da>
    } else
        hal.stream.write(" G50");
 8014c8c:	4b34      	ldr	r3, [pc, #208]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014c8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014c92:	484a      	ldr	r0, [pc, #296]	; (8014dbc <report_gcode_modes+0x300>)
 8014c94:	4798      	blx	r3

#endif

    if (gc_state.modal.program_flow) {
 8014c96:	4b34      	ldr	r3, [pc, #208]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014c98:	7e1b      	ldrb	r3, [r3, #24]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f000 80a3 	beq.w	8014de6 <report_gcode_modes+0x32a>

        switch (gc_state.modal.program_flow) {
 8014ca0:	4b31      	ldr	r3, [pc, #196]	; (8014d68 <report_gcode_modes+0x2ac>)
 8014ca2:	7e1b      	ldrb	r3, [r3, #24]
 8014ca4:	2b1e      	cmp	r3, #30
 8014ca6:	dc45      	bgt.n	8014d34 <report_gcode_modes+0x278>
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	f340 809b 	ble.w	8014de4 <report_gcode_modes+0x328>
 8014cae:	3b01      	subs	r3, #1
 8014cb0:	2b1d      	cmp	r3, #29
 8014cb2:	f200 8097 	bhi.w	8014de4 <report_gcode_modes+0x328>
 8014cb6:	a201      	add	r2, pc, #4	; (adr r2, 8014cbc <report_gcode_modes+0x200>)
 8014cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cbc:	08014d47 	.word	0x08014d47
 8014cc0:	08014d53 	.word	0x08014d53
 8014cc4:	08014d3b 	.word	0x08014d3b
 8014cc8:	08014de5 	.word	0x08014de5
 8014ccc:	08014de5 	.word	0x08014de5
 8014cd0:	08014de5 	.word	0x08014de5
 8014cd4:	08014de5 	.word	0x08014de5
 8014cd8:	08014de5 	.word	0x08014de5
 8014cdc:	08014de5 	.word	0x08014de5
 8014ce0:	08014de5 	.word	0x08014de5
 8014ce4:	08014de5 	.word	0x08014de5
 8014ce8:	08014de5 	.word	0x08014de5
 8014cec:	08014de5 	.word	0x08014de5
 8014cf0:	08014de5 	.word	0x08014de5
 8014cf4:	08014de5 	.word	0x08014de5
 8014cf8:	08014de5 	.word	0x08014de5
 8014cfc:	08014de5 	.word	0x08014de5
 8014d00:	08014de5 	.word	0x08014de5
 8014d04:	08014de5 	.word	0x08014de5
 8014d08:	08014de5 	.word	0x08014de5
 8014d0c:	08014de5 	.word	0x08014de5
 8014d10:	08014de5 	.word	0x08014de5
 8014d14:	08014de5 	.word	0x08014de5
 8014d18:	08014de5 	.word	0x08014de5
 8014d1c:	08014de5 	.word	0x08014de5
 8014d20:	08014de5 	.word	0x08014de5
 8014d24:	08014de5 	.word	0x08014de5
 8014d28:	08014de5 	.word	0x08014de5
 8014d2c:	08014de5 	.word	0x08014de5
 8014d30:	08014dcd 	.word	0x08014dcd
 8014d34:	2b3c      	cmp	r3, #60	; 0x3c
 8014d36:	d04f      	beq.n	8014dd8 <report_gcode_modes+0x31c>
            case ProgramFlow_CompletedM60:
                hal.stream.write(" M60");
                break;

            default:
                break;
 8014d38:	e054      	b.n	8014de4 <report_gcode_modes+0x328>
                hal.stream.write(" M0");
 8014d3a:	4b09      	ldr	r3, [pc, #36]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014d3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014d40:	481f      	ldr	r0, [pc, #124]	; (8014dc0 <report_gcode_modes+0x304>)
 8014d42:	4798      	blx	r3
                break;
 8014d44:	e04f      	b.n	8014de6 <report_gcode_modes+0x32a>
                hal.stream.write(" M1");
 8014d46:	4b06      	ldr	r3, [pc, #24]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014d48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014d4c:	481d      	ldr	r0, [pc, #116]	; (8014dc4 <report_gcode_modes+0x308>)
 8014d4e:	4798      	blx	r3
                break;
 8014d50:	e049      	b.n	8014de6 <report_gcode_modes+0x32a>
                hal.stream.write(" M2");
 8014d52:	4b03      	ldr	r3, [pc, #12]	; (8014d60 <report_gcode_modes+0x2a4>)
 8014d54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014d58:	481b      	ldr	r0, [pc, #108]	; (8014dc8 <report_gcode_modes+0x30c>)
 8014d5a:	4798      	blx	r3
                break;
 8014d5c:	e043      	b.n	8014de6 <report_gcode_modes+0x32a>
 8014d5e:	bf00      	nop
 8014d60:	200016a0 	.word	0x200016a0
 8014d64:	0802d5f0 	.word	0x0802d5f0
 8014d68:	2000137c 	.word	0x2000137c
 8014d6c:	0802d5f8 	.word	0x0802d5f8
 8014d70:	0802d5fc 	.word	0x0802d5fc
 8014d74:	0802d600 	.word	0x0802d600
 8014d78:	20001cf0 	.word	0x20001cf0
 8014d7c:	0802d608 	.word	0x0802d608
 8014d80:	0802d60c 	.word	0x0802d60c
 8014d84:	0802d610 	.word	0x0802d610
 8014d88:	0802d618 	.word	0x0802d618
 8014d8c:	0802d620 	.word	0x0802d620
 8014d90:	0802d628 	.word	0x0802d628
 8014d94:	0802d630 	.word	0x0802d630
 8014d98:	0802d638 	.word	0x0802d638
 8014d9c:	0802d640 	.word	0x0802d640
 8014da0:	0802d648 	.word	0x0802d648
 8014da4:	0802d650 	.word	0x0802d650
 8014da8:	0802d654 	.word	0x0802d654
 8014dac:	0802d658 	.word	0x0802d658
 8014db0:	0802d660 	.word	0x0802d660
 8014db4:	0802d668 	.word	0x0802d668
 8014db8:	20001c78 	.word	0x20001c78
 8014dbc:	0802d670 	.word	0x0802d670
 8014dc0:	0802d678 	.word	0x0802d678
 8014dc4:	0802d67c 	.word	0x0802d67c
 8014dc8:	0802d680 	.word	0x0802d680
                hal.stream.write(" M30");
 8014dcc:	4b6b      	ldr	r3, [pc, #428]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014dce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014dd2:	486b      	ldr	r0, [pc, #428]	; (8014f80 <report_gcode_modes+0x4c4>)
 8014dd4:	4798      	blx	r3
                break;
 8014dd6:	e006      	b.n	8014de6 <report_gcode_modes+0x32a>
                hal.stream.write(" M60");
 8014dd8:	4b68      	ldr	r3, [pc, #416]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014dda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014dde:	4869      	ldr	r0, [pc, #420]	; (8014f84 <report_gcode_modes+0x4c8>)
 8014de0:	4798      	blx	r3
                break;
 8014de2:	e000      	b.n	8014de6 <report_gcode_modes+0x32a>
                break;
 8014de4:	bf00      	nop
        }
    }

    hal.stream.write(gc_state.modal.spindle.state.on ? (gc_state.modal.spindle.state.ccw ? " M4" : " M3") : " M5");
 8014de6:	4b65      	ldr	r3, [pc, #404]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014de8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8014dec:	4b66      	ldr	r3, [pc, #408]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014dee:	7e9b      	ldrb	r3, [r3, #26]
 8014df0:	f003 0301 	and.w	r3, r3, #1
 8014df4:	b2db      	uxtb	r3, r3
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d00a      	beq.n	8014e10 <report_gcode_modes+0x354>
 8014dfa:	4b63      	ldr	r3, [pc, #396]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014dfc:	7e9b      	ldrb	r3, [r3, #26]
 8014dfe:	f003 0302 	and.w	r3, r3, #2
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d001      	beq.n	8014e0c <report_gcode_modes+0x350>
 8014e08:	4b60      	ldr	r3, [pc, #384]	; (8014f8c <report_gcode_modes+0x4d0>)
 8014e0a:	e002      	b.n	8014e12 <report_gcode_modes+0x356>
 8014e0c:	4b60      	ldr	r3, [pc, #384]	; (8014f90 <report_gcode_modes+0x4d4>)
 8014e0e:	e000      	b.n	8014e12 <report_gcode_modes+0x356>
 8014e10:	4b60      	ldr	r3, [pc, #384]	; (8014f94 <report_gcode_modes+0x4d8>)
 8014e12:	4618      	mov	r0, r3
 8014e14:	4790      	blx	r2

    if(gc_state.tool_change)
 8014e16:	4b5c      	ldr	r3, [pc, #368]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014e18:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d004      	beq.n	8014e2a <report_gcode_modes+0x36e>
        hal.stream.write(" M6");
 8014e20:	4b56      	ldr	r3, [pc, #344]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014e26:	485c      	ldr	r0, [pc, #368]	; (8014f98 <report_gcode_modes+0x4dc>)
 8014e28:	4798      	blx	r3

    if (gc_state.modal.coolant.value) {
 8014e2a:	4b57      	ldr	r3, [pc, #348]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014e2c:	7e5b      	ldrb	r3, [r3, #25]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d018      	beq.n	8014e64 <report_gcode_modes+0x3a8>

        if (gc_state.modal.coolant.mist)
 8014e32:	4b55      	ldr	r3, [pc, #340]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014e34:	7e5b      	ldrb	r3, [r3, #25]
 8014e36:	f003 0302 	and.w	r3, r3, #2
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d004      	beq.n	8014e4a <report_gcode_modes+0x38e>
             hal.stream.write(" M7");
 8014e40:	4b4e      	ldr	r3, [pc, #312]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014e42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014e46:	4855      	ldr	r0, [pc, #340]	; (8014f9c <report_gcode_modes+0x4e0>)
 8014e48:	4798      	blx	r3

        if (gc_state.modal.coolant.flood)
 8014e4a:	4b4f      	ldr	r3, [pc, #316]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014e4c:	7e5b      	ldrb	r3, [r3, #25]
 8014e4e:	f003 0301 	and.w	r3, r3, #1
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d00a      	beq.n	8014e6e <report_gcode_modes+0x3b2>
            hal.stream.write(" M8");
 8014e58:	4b48      	ldr	r3, [pc, #288]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014e5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014e5e:	4850      	ldr	r0, [pc, #320]	; (8014fa0 <report_gcode_modes+0x4e4>)
 8014e60:	4798      	blx	r3
 8014e62:	e004      	b.n	8014e6e <report_gcode_modes+0x3b2>

    } else
        hal.stream.write(" M9");
 8014e64:	4b45      	ldr	r3, [pc, #276]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014e66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014e6a:	484e      	ldr	r0, [pc, #312]	; (8014fa4 <report_gcode_modes+0x4e8>)
 8014e6c:	4798      	blx	r3

    if (sys.override.control.feed_rate_disable)
 8014e6e:	4b4e      	ldr	r3, [pc, #312]	; (8014fa8 <report_gcode_modes+0x4ec>)
 8014e70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e74:	f003 0301 	and.w	r3, r3, #1
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d004      	beq.n	8014e88 <report_gcode_modes+0x3cc>
        hal.stream.write(" M50");
 8014e7e:	4b3f      	ldr	r3, [pc, #252]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014e80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014e84:	4849      	ldr	r0, [pc, #292]	; (8014fac <report_gcode_modes+0x4f0>)
 8014e86:	4798      	blx	r3

    if (sys.override.control.spindle_rpm_disable)
 8014e88:	4b47      	ldr	r3, [pc, #284]	; (8014fa8 <report_gcode_modes+0x4ec>)
 8014e8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014e8e:	f003 0304 	and.w	r3, r3, #4
 8014e92:	b2db      	uxtb	r3, r3
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d004      	beq.n	8014ea2 <report_gcode_modes+0x3e6>
        hal.stream.write(" M51");
 8014e98:	4b38      	ldr	r3, [pc, #224]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014e9e:	4844      	ldr	r0, [pc, #272]	; (8014fb0 <report_gcode_modes+0x4f4>)
 8014ea0:	4798      	blx	r3

    if (sys.override.control.feed_hold_disable)
 8014ea2:	4b41      	ldr	r3, [pc, #260]	; (8014fa8 <report_gcode_modes+0x4ec>)
 8014ea4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014ea8:	f003 0302 	and.w	r3, r3, #2
 8014eac:	b2db      	uxtb	r3, r3
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d004      	beq.n	8014ebc <report_gcode_modes+0x400>
        hal.stream.write(" M53");
 8014eb2:	4b32      	ldr	r3, [pc, #200]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014eb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014eb8:	483e      	ldr	r0, [pc, #248]	; (8014fb4 <report_gcode_modes+0x4f8>)
 8014eba:	4798      	blx	r3

    if (settings.parking.flags.enable_override_control && sys.override.control.parking_disable)
 8014ebc:	4b3e      	ldr	r3, [pc, #248]	; (8014fb8 <report_gcode_modes+0x4fc>)
 8014ebe:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8014ec2:	f003 0304 	and.w	r3, r3, #4
 8014ec6:	b2db      	uxtb	r3, r3
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d00c      	beq.n	8014ee6 <report_gcode_modes+0x42a>
 8014ecc:	4b36      	ldr	r3, [pc, #216]	; (8014fa8 <report_gcode_modes+0x4ec>)
 8014ece:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014ed2:	f003 0308 	and.w	r3, r3, #8
 8014ed6:	b2db      	uxtb	r3, r3
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d004      	beq.n	8014ee6 <report_gcode_modes+0x42a>
        hal.stream.write(" M56");
 8014edc:	4b27      	ldr	r3, [pc, #156]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014ede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014ee2:	4836      	ldr	r0, [pc, #216]	; (8014fbc <report_gcode_modes+0x500>)
 8014ee4:	4798      	blx	r3

    hal.stream.write(appendbuf(2, " T", uitoa((uint32_t)gc_state.tool->tool_id)));
 8014ee6:	4b25      	ldr	r3, [pc, #148]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014ee8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014eec:	4b26      	ldr	r3, [pc, #152]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014ef2:	691b      	ldr	r3, [r3, #16]
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f7fa ff11 	bl	800fd1c <uitoa>
 8014efa:	4603      	mov	r3, r0
 8014efc:	461a      	mov	r2, r3
 8014efe:	4930      	ldr	r1, [pc, #192]	; (8014fc0 <report_gcode_modes+0x504>)
 8014f00:	2002      	movs	r0, #2
 8014f02:	f7fe fd89 	bl	8013a18 <appendbuf>
 8014f06:	4603      	mov	r3, r0
 8014f08:	4618      	mov	r0, r3
 8014f0a:	47a0      	blx	r4

    hal.stream.write(appendbuf(2, " F", get_rate_value(gc_state.feed_rate)));
 8014f0c:	4b1b      	ldr	r3, [pc, #108]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014f0e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014f12:	4b2c      	ldr	r3, [pc, #176]	; (8014fc4 <report_gcode_modes+0x508>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	4a1c      	ldr	r2, [pc, #112]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014f18:	edd2 7a16 	vldr	s15, [r2, #88]	; 0x58
 8014f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8014f20:	4798      	blx	r3
 8014f22:	4603      	mov	r3, r0
 8014f24:	461a      	mov	r2, r3
 8014f26:	4928      	ldr	r1, [pc, #160]	; (8014fc8 <report_gcode_modes+0x50c>)
 8014f28:	2002      	movs	r0, #2
 8014f2a:	f7fe fd75 	bl	8013a18 <appendbuf>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	4618      	mov	r0, r3
 8014f32:	47a0      	blx	r4

    if(gc_spindle_get()->cap.variable)
 8014f34:	f7f0 fcf4 	bl	8005920 <gc_spindle_get>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	7a5b      	ldrb	r3, [r3, #9]
 8014f3c:	f003 0301 	and.w	r3, r3, #1
 8014f40:	b2db      	uxtb	r3, r3
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d013      	beq.n	8014f6e <report_gcode_modes+0x4b2>
        hal.stream.write(appendbuf(2, " S", ftoa(gc_state.spindle.rpm, N_DECIMAL_RPMVALUE)));
 8014f46:	4b0d      	ldr	r3, [pc, #52]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014f48:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014f4c:	4b0e      	ldr	r3, [pc, #56]	; (8014f88 <report_gcode_modes+0x4cc>)
 8014f4e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8014f52:	2000      	movs	r0, #0
 8014f54:	eeb0 0a67 	vmov.f32	s0, s15
 8014f58:	f7fa ff1c 	bl	800fd94 <ftoa>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	461a      	mov	r2, r3
 8014f60:	491a      	ldr	r1, [pc, #104]	; (8014fcc <report_gcode_modes+0x510>)
 8014f62:	2002      	movs	r0, #2
 8014f64:	f7fe fd58 	bl	8013a18 <appendbuf>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	47a0      	blx	r4

    hal.stream.write("]" ASCII_EOL);
 8014f6e:	4b03      	ldr	r3, [pc, #12]	; (8014f7c <report_gcode_modes+0x4c0>)
 8014f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014f74:	4816      	ldr	r0, [pc, #88]	; (8014fd0 <report_gcode_modes+0x514>)
 8014f76:	4798      	blx	r3
}
 8014f78:	bf00      	nop
 8014f7a:	bd98      	pop	{r3, r4, r7, pc}
 8014f7c:	200016a0 	.word	0x200016a0
 8014f80:	0802d684 	.word	0x0802d684
 8014f84:	0802d68c 	.word	0x0802d68c
 8014f88:	2000137c 	.word	0x2000137c
 8014f8c:	0802d694 	.word	0x0802d694
 8014f90:	0802d698 	.word	0x0802d698
 8014f94:	0802d69c 	.word	0x0802d69c
 8014f98:	0802d6a0 	.word	0x0802d6a0
 8014f9c:	0802d6a4 	.word	0x0802d6a4
 8014fa0:	0802d6a8 	.word	0x0802d6a8
 8014fa4:	0802d6ac 	.word	0x0802d6ac
 8014fa8:	20001520 	.word	0x20001520
 8014fac:	0802d6b0 	.word	0x0802d6b0
 8014fb0:	0802d6b8 	.word	0x0802d6b8
 8014fb4:	0802d6c0 	.word	0x0802d6c0
 8014fb8:	20001cf0 	.word	0x20001cf0
 8014fbc:	0802d6c8 	.word	0x0802d6c8
 8014fc0:	0802d6d0 	.word	0x0802d6d0
 8014fc4:	20001cb0 	.word	0x20001cb0
 8014fc8:	0802d6d4 	.word	0x0802d6d4
 8014fcc:	0802d6d8 	.word	0x0802d6d8
 8014fd0:	0802d4b0 	.word	0x0802d4b0

08014fd4 <report_startup_line>:

// Prints specified startup line
void report_startup_line (uint8_t n, char *line)
{
 8014fd4:	b590      	push	{r4, r7, lr}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	4603      	mov	r3, r0
 8014fdc:	6039      	str	r1, [r7, #0]
 8014fde:	71fb      	strb	r3, [r7, #7]
    hal.stream.write(appendbuf(3, "$N", uitoa((uint32_t)n), "="));
 8014fe0:	4b0e      	ldr	r3, [pc, #56]	; (801501c <report_startup_line+0x48>)
 8014fe2:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014fe6:	79fb      	ldrb	r3, [r7, #7]
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7fa fe97 	bl	800fd1c <uitoa>
 8014fee:	4602      	mov	r2, r0
 8014ff0:	4b0b      	ldr	r3, [pc, #44]	; (8015020 <report_startup_line+0x4c>)
 8014ff2:	490c      	ldr	r1, [pc, #48]	; (8015024 <report_startup_line+0x50>)
 8014ff4:	2003      	movs	r0, #3
 8014ff6:	f7fe fd0f 	bl	8013a18 <appendbuf>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	47a0      	blx	r4
    hal.stream.write(line);
 8015000:	4b06      	ldr	r3, [pc, #24]	; (801501c <report_startup_line+0x48>)
 8015002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015006:	6838      	ldr	r0, [r7, #0]
 8015008:	4798      	blx	r3
    hal.stream.write(ASCII_EOL);
 801500a:	4b04      	ldr	r3, [pc, #16]	; (801501c <report_startup_line+0x48>)
 801500c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015010:	4805      	ldr	r0, [pc, #20]	; (8015028 <report_startup_line+0x54>)
 8015012:	4798      	blx	r3
}
 8015014:	bf00      	nop
 8015016:	370c      	adds	r7, #12
 8015018:	46bd      	mov	sp, r7
 801501a:	bd90      	pop	{r4, r7, pc}
 801501c:	200016a0 	.word	0x200016a0
 8015020:	0802d58c 	.word	0x0802d58c
 8015024:	0802d6dc 	.word	0x0802d6dc
 8015028:	0802d480 	.word	0x0802d480

0801502c <report_execute_startup_message>:

void report_execute_startup_message (char *line, status_code_t status_code)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	460b      	mov	r3, r1
 8015036:	70fb      	strb	r3, [r7, #3]
    hal.stream.write(">");
 8015038:	4b0b      	ldr	r3, [pc, #44]	; (8015068 <report_execute_startup_message+0x3c>)
 801503a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801503e:	480b      	ldr	r0, [pc, #44]	; (801506c <report_execute_startup_message+0x40>)
 8015040:	4798      	blx	r3
    hal.stream.write(line);
 8015042:	4b09      	ldr	r3, [pc, #36]	; (8015068 <report_execute_startup_message+0x3c>)
 8015044:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	4798      	blx	r3
    hal.stream.write(":");
 801504c:	4b06      	ldr	r3, [pc, #24]	; (8015068 <report_execute_startup_message+0x3c>)
 801504e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015052:	4807      	ldr	r0, [pc, #28]	; (8015070 <report_execute_startup_message+0x44>)
 8015054:	4798      	blx	r3
    grbl.report.status_message(status_code);
 8015056:	4b07      	ldr	r3, [pc, #28]	; (8015074 <report_execute_startup_message+0x48>)
 8015058:	689b      	ldr	r3, [r3, #8]
 801505a:	78fa      	ldrb	r2, [r7, #3]
 801505c:	4610      	mov	r0, r2
 801505e:	4798      	blx	r3
}
 8015060:	bf00      	nop
 8015062:	3708      	adds	r7, #8
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}
 8015068:	200016a0 	.word	0x200016a0
 801506c:	0802d6e0 	.word	0x0802d6e0
 8015070:	0802d5b4 	.word	0x0802d5b4
 8015074:	200015b8 	.word	0x200015b8

08015078 <report_build_info>:

// Prints build info line
void report_build_info (char *line, bool extended)
{
 8015078:	b5b0      	push	{r4, r5, r7, lr}
 801507a:	b09e      	sub	sp, #120	; 0x78
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
 8015080:	460b      	mov	r3, r1
 8015082:	70fb      	strb	r3, [r7, #3]
    char buf[100];

    hal.stream.write("[VER:" GRBL_VERSION ".");
 8015084:	4ba9      	ldr	r3, [pc, #676]	; (801532c <report_build_info+0x2b4>)
 8015086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801508a:	48a9      	ldr	r0, [pc, #676]	; (8015330 <report_build_info+0x2b8>)
 801508c:	4798      	blx	r3
    hal.stream.write(uitoa(GRBL_BUILD));
 801508e:	4ba7      	ldr	r3, [pc, #668]	; (801532c <report_build_info+0x2b4>)
 8015090:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8015094:	48a7      	ldr	r0, [pc, #668]	; (8015334 <report_build_info+0x2bc>)
 8015096:	f7fa fe41 	bl	800fd1c <uitoa>
 801509a:	4603      	mov	r3, r0
 801509c:	4618      	mov	r0, r3
 801509e:	47a0      	blx	r4
    hal.stream.write(":");
 80150a0:	4ba2      	ldr	r3, [pc, #648]	; (801532c <report_build_info+0x2b4>)
 80150a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80150a6:	48a4      	ldr	r0, [pc, #656]	; (8015338 <report_build_info+0x2c0>)
 80150a8:	4798      	blx	r3
    hal.stream.write(line);
 80150aa:	4ba0      	ldr	r3, [pc, #640]	; (801532c <report_build_info+0x2b4>)
 80150ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80150b0:	6878      	ldr	r0, [r7, #4]
 80150b2:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 80150b4:	4b9d      	ldr	r3, [pc, #628]	; (801532c <report_build_info+0x2b4>)
 80150b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80150ba:	48a0      	ldr	r0, [pc, #640]	; (801533c <report_build_info+0x2c4>)
 80150bc:	4798      	blx	r3

#if COMPATIBILITY_LEVEL == 0
    extended = true;
 80150be:	2301      	movs	r3, #1
 80150c0:	70fb      	strb	r3, [r7, #3]
#endif

    // Generate compile-time build option list

    char *append = &buf[5];
 80150c2:	f107 0308 	add.w	r3, r7, #8
 80150c6:	3305      	adds	r3, #5
 80150c8:	677b      	str	r3, [r7, #116]	; 0x74

    strcpy(buf, "[OPT:");
 80150ca:	f107 0308 	add.w	r3, r7, #8
 80150ce:	4a9c      	ldr	r2, [pc, #624]	; (8015340 <report_build_info+0x2c8>)
 80150d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150d4:	6018      	str	r0, [r3, #0]
 80150d6:	3304      	adds	r3, #4
 80150d8:	8019      	strh	r1, [r3, #0]

    if(spindle_get_caps(false).variable)
 80150da:	2000      	movs	r0, #0
 80150dc:	f006 fdea 	bl	801bcb4 <spindle_get_caps>
 80150e0:	4603      	mov	r3, r0
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	f003 0301 	and.w	r3, r3, #1
 80150e8:	b2db      	uxtb	r3, r3
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d004      	beq.n	80150f8 <report_build_info+0x80>
        *append++ = 'V';
 80150ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150f0:	1c5a      	adds	r2, r3, #1
 80150f2:	677a      	str	r2, [r7, #116]	; 0x74
 80150f4:	2256      	movs	r2, #86	; 0x56
 80150f6:	701a      	strb	r2, [r3, #0]

    *append++ = 'N';
 80150f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150fa:	1c5a      	adds	r2, r3, #1
 80150fc:	677a      	str	r2, [r7, #116]	; 0x74
 80150fe:	224e      	movs	r2, #78	; 0x4e
 8015100:	701a      	strb	r2, [r3, #0]

    if(hal.driver_cap.mist_control)
 8015102:	4b8a      	ldr	r3, [pc, #552]	; (801532c <report_build_info+0x2b4>)
 8015104:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8015108:	f003 0301 	and.w	r3, r3, #1
 801510c:	b2db      	uxtb	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d004      	beq.n	801511c <report_build_info+0xa4>
        *append++ = 'M';
 8015112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015114:	1c5a      	adds	r2, r3, #1
 8015116:	677a      	str	r2, [r7, #116]	; 0x74
 8015118:	224d      	movs	r2, #77	; 0x4d
 801511a:	701a      	strb	r2, [r3, #0]

#if COREXY
    *append++ = 'C';
#endif

    if(settings.parking.flags.enabled)
 801511c:	4b89      	ldr	r3, [pc, #548]	; (8015344 <report_build_info+0x2cc>)
 801511e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8015122:	f003 0301 	and.w	r3, r3, #1
 8015126:	b2db      	uxtb	r3, r3
 8015128:	2b00      	cmp	r3, #0
 801512a:	d004      	beq.n	8015136 <report_build_info+0xbe>
        *append++ = 'P';
 801512c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801512e:	1c5a      	adds	r2, r3, #1
 8015130:	677a      	str	r2, [r7, #116]	; 0x74
 8015132:	2250      	movs	r2, #80	; 0x50
 8015134:	701a      	strb	r2, [r3, #0]

    if(settings.homing.flags.force_set_origin)
 8015136:	4b83      	ldr	r3, [pc, #524]	; (8015344 <report_build_info+0x2cc>)
 8015138:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 801513c:	f003 0308 	and.w	r3, r3, #8
 8015140:	b2db      	uxtb	r3, r3
 8015142:	2b00      	cmp	r3, #0
 8015144:	d004      	beq.n	8015150 <report_build_info+0xd8>
        *append++ = 'Z';
 8015146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015148:	1c5a      	adds	r2, r3, #1
 801514a:	677a      	str	r2, [r7, #116]	; 0x74
 801514c:	225a      	movs	r2, #90	; 0x5a
 801514e:	701a      	strb	r2, [r3, #0]

    if(settings.homing.flags.single_axis_commands)
 8015150:	4b7c      	ldr	r3, [pc, #496]	; (8015344 <report_build_info+0x2cc>)
 8015152:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8015156:	f003 0302 	and.w	r3, r3, #2
 801515a:	b2db      	uxtb	r3, r3
 801515c:	2b00      	cmp	r3, #0
 801515e:	d004      	beq.n	801516a <report_build_info+0xf2>
        *append++ = 'H';
 8015160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015162:	1c5a      	adds	r2, r3, #1
 8015164:	677a      	str	r2, [r7, #116]	; 0x74
 8015166:	2248      	movs	r2, #72	; 0x48
 8015168:	701a      	strb	r2, [r3, #0]

    if(settings.limits.flags.two_switches)
 801516a:	4b76      	ldr	r3, [pc, #472]	; (8015344 <report_build_info+0x2cc>)
 801516c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8015170:	f003 0310 	and.w	r3, r3, #16
 8015174:	b2db      	uxtb	r3, r3
 8015176:	2b00      	cmp	r3, #0
 8015178:	d004      	beq.n	8015184 <report_build_info+0x10c>
        *append++ = 'T';
 801517a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801517c:	1c5a      	adds	r2, r3, #1
 801517e:	677a      	str	r2, [r7, #116]	; 0x74
 8015180:	2254      	movs	r2, #84	; 0x54
 8015182:	701a      	strb	r2, [r3, #0]

    if(settings.probe.allow_feed_override)
 8015184:	4b6f      	ldr	r3, [pc, #444]	; (8015344 <report_build_info+0x2cc>)
 8015186:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 801518a:	f003 0310 	and.w	r3, r3, #16
 801518e:	b2db      	uxtb	r3, r3
 8015190:	2b00      	cmp	r3, #0
 8015192:	d004      	beq.n	801519e <report_build_info+0x126>
        *append++ = 'A';
 8015194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015196:	1c5a      	adds	r2, r3, #1
 8015198:	677a      	str	r2, [r7, #116]	; 0x74
 801519a:	2241      	movs	r2, #65	; 0x41
 801519c:	701a      	strb	r2, [r3, #0]

    if(settings.spindle.flags.enable_rpm_controlled)
 801519e:	4b69      	ldr	r3, [pc, #420]	; (8015344 <report_build_info+0x2cc>)
 80151a0:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 80151a4:	f003 0301 	and.w	r3, r3, #1
 80151a8:	b2db      	uxtb	r3, r3
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d004      	beq.n	80151b8 <report_build_info+0x140>
        *append++ = '0';
 80151ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151b0:	1c5a      	adds	r2, r3, #1
 80151b2:	677a      	str	r2, [r7, #116]	; 0x74
 80151b4:	2230      	movs	r2, #48	; 0x30
 80151b6:	701a      	strb	r2, [r3, #0]

    if(hal.driver_cap.software_debounce)
 80151b8:	4b5c      	ldr	r3, [pc, #368]	; (801532c <report_build_info+0x2b4>)
 80151ba:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80151be:	f003 0302 	and.w	r3, r3, #2
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d004      	beq.n	80151d2 <report_build_info+0x15a>
        *append++ = 'S';
 80151c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151ca:	1c5a      	adds	r2, r3, #1
 80151cc:	677a      	str	r2, [r7, #116]	; 0x74
 80151ce:	2253      	movs	r2, #83	; 0x53
 80151d0:	701a      	strb	r2, [r3, #0]

    if(settings.parking.flags.enable_override_control)
 80151d2:	4b5c      	ldr	r3, [pc, #368]	; (8015344 <report_build_info+0x2cc>)
 80151d4:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80151d8:	f003 0304 	and.w	r3, r3, #4
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d004      	beq.n	80151ec <report_build_info+0x174>
        *append++ = 'R';
 80151e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151e4:	1c5a      	adds	r2, r3, #1
 80151e6:	677a      	str	r2, [r7, #116]	; 0x74
 80151e8:	2252      	movs	r2, #82	; 0x52
 80151ea:	701a      	strb	r2, [r3, #0]

    if(!settings.homing.flags.init_lock)
 80151ec:	4b55      	ldr	r3, [pc, #340]	; (8015344 <report_build_info+0x2cc>)
 80151ee:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80151f2:	f003 0304 	and.w	r3, r3, #4
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d104      	bne.n	8015206 <report_build_info+0x18e>
        *append++ = 'L';
 80151fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151fe:	1c5a      	adds	r2, r3, #1
 8015200:	677a      	str	r2, [r7, #116]	; 0x74
 8015202:	224c      	movs	r2, #76	; 0x4c
 8015204:	701a      	strb	r2, [r3, #0]

    if(hal.signals_cap.safety_door_ajar)
 8015206:	4b49      	ldr	r3, [pc, #292]	; (801532c <report_build_info+0x2b4>)
 8015208:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 801520c:	f003 0308 	and.w	r3, r3, #8
 8015210:	b2db      	uxtb	r3, r3
 8015212:	2b00      	cmp	r3, #0
 8015214:	d004      	beq.n	8015220 <report_build_info+0x1a8>
        *append++ = '+';
 8015216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015218:	1c5a      	adds	r2, r3, #1
 801521a:	677a      	str	r2, [r7, #116]	; 0x74
 801521c:	222b      	movs	r2, #43	; 0x2b
 801521e:	701a      	strb	r2, [r3, #0]

  #if DISABLE_BUILD_INFO_WRITE_COMMAND // NOTE: Shown when disabled.
    *append++ = 'I';
  #endif

    if(!settings.status_report.sync_on_wco_change) // NOTE: Shown when disabled.
 8015220:	4b48      	ldr	r3, [pc, #288]	; (8015344 <report_build_info+0x2cc>)
 8015222:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8015226:	f003 0301 	and.w	r3, r3, #1
 801522a:	b2db      	uxtb	r3, r3
 801522c:	2b00      	cmp	r3, #0
 801522e:	d104      	bne.n	801523a <report_build_info+0x1c2>
        *append++ = 'W';
 8015230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015232:	1c5a      	adds	r2, r3, #1
 8015234:	677a      	str	r2, [r7, #116]	; 0x74
 8015236:	2257      	movs	r2, #87	; 0x57
 8015238:	701a      	strb	r2, [r3, #0]

    if(hal.stepper.get_ganged)
 801523a:	4b3c      	ldr	r3, [pc, #240]	; (801532c <report_build_info+0x2b4>)
 801523c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015240:	2b00      	cmp	r3, #0
 8015242:	d004      	beq.n	801524e <report_build_info+0x1d6>
        *append++ = '2';
 8015244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015246:	1c5a      	adds	r2, r3, #1
 8015248:	677a      	str	r2, [r7, #116]	; 0x74
 801524a:	2232      	movs	r2, #50	; 0x32
 801524c:	701a      	strb	r2, [r3, #0]

    *append++ = ',';
 801524e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015250:	1c5a      	adds	r2, r3, #1
 8015252:	677a      	str	r2, [r7, #116]	; 0x74
 8015254:	222c      	movs	r2, #44	; 0x2c
 8015256:	701a      	strb	r2, [r3, #0]
    *append = '\0';
 8015258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801525a:	2200      	movs	r2, #0
 801525c:	701a      	strb	r2, [r3, #0]
    hal.stream.write(buf);
 801525e:	4b33      	ldr	r3, [pc, #204]	; (801532c <report_build_info+0x2b4>)
 8015260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015264:	f107 0208 	add.w	r2, r7, #8
 8015268:	4610      	mov	r0, r2
 801526a:	4798      	blx	r3

    // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
    hal.stream.write(uitoa((uint32_t)plan_get_buffer_size()));
 801526c:	4b2f      	ldr	r3, [pc, #188]	; (801532c <report_build_info+0x2b4>)
 801526e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8015272:	f7fb ffa3 	bl	80111bc <plan_get_buffer_size>
 8015276:	4603      	mov	r3, r0
 8015278:	4618      	mov	r0, r3
 801527a:	f7fa fd4f 	bl	800fd1c <uitoa>
 801527e:	4603      	mov	r3, r0
 8015280:	4618      	mov	r0, r3
 8015282:	47a0      	blx	r4
    hal.stream.write(",");
 8015284:	4b29      	ldr	r3, [pc, #164]	; (801532c <report_build_info+0x2b4>)
 8015286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801528a:	482f      	ldr	r0, [pc, #188]	; (8015348 <report_build_info+0x2d0>)
 801528c:	4798      	blx	r3
    hal.stream.write(uitoa(hal.rx_buffer_size));
 801528e:	4b27      	ldr	r3, [pc, #156]	; (801532c <report_build_info+0x2b4>)
 8015290:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8015294:	4b25      	ldr	r3, [pc, #148]	; (801532c <report_build_info+0x2b4>)
 8015296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015298:	4618      	mov	r0, r3
 801529a:	f7fa fd3f 	bl	800fd1c <uitoa>
 801529e:	4603      	mov	r3, r0
 80152a0:	4618      	mov	r0, r3
 80152a2:	47a0      	blx	r4
    if(extended) {
 80152a4:	78fb      	ldrb	r3, [r7, #3]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d017      	beq.n	80152da <report_build_info+0x262>
        hal.stream.write(",");
 80152aa:	4b20      	ldr	r3, [pc, #128]	; (801532c <report_build_info+0x2b4>)
 80152ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80152b0:	4825      	ldr	r0, [pc, #148]	; (8015348 <report_build_info+0x2d0>)
 80152b2:	4798      	blx	r3
        hal.stream.write(uitoa((uint32_t)N_AXIS));
 80152b4:	4b1d      	ldr	r3, [pc, #116]	; (801532c <report_build_info+0x2b4>)
 80152b6:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80152ba:	2003      	movs	r0, #3
 80152bc:	f7fa fd2e 	bl	800fd1c <uitoa>
 80152c0:	4603      	mov	r3, r0
 80152c2:	4618      	mov	r0, r3
 80152c4:	47a0      	blx	r4
        hal.stream.write(",");
 80152c6:	4b19      	ldr	r3, [pc, #100]	; (801532c <report_build_info+0x2b4>)
 80152c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80152cc:	481e      	ldr	r0, [pc, #120]	; (8015348 <report_build_info+0x2d0>)
 80152ce:	4798      	blx	r3
  #if N_TOOLS
        hal.stream.write(uitoa((uint32_t)N_TOOLS));
  #else
        hal.stream.write("0");
 80152d0:	4b16      	ldr	r3, [pc, #88]	; (801532c <report_build_info+0x2b4>)
 80152d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80152d6:	481d      	ldr	r0, [pc, #116]	; (801534c <report_build_info+0x2d4>)
 80152d8:	4798      	blx	r3
  #endif
    }
    hal.stream.write("]" ASCII_EOL);
 80152da:	4b14      	ldr	r3, [pc, #80]	; (801532c <report_build_info+0x2b4>)
 80152dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80152e0:	4816      	ldr	r0, [pc, #88]	; (801533c <report_build_info+0x2c4>)
 80152e2:	4798      	blx	r3

    if(extended) {
 80152e4:	78fb      	ldrb	r3, [r7, #3]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	f000 835e 	beq.w	80159a8 <report_build_info+0x930>

        uint_fast8_t idx;
        nvs_io_t *nvs = nvs_buffer_get_physical();
 80152ec:	f7fb fd28 	bl	8010d40 <nvs_buffer_get_physical>
 80152f0:	66f8      	str	r0, [r7, #108]	; 0x6c

        strcat(strcpy(buf, "[AXS:"), uitoa(N_AXIS));
 80152f2:	f107 0208 	add.w	r2, r7, #8
 80152f6:	4916      	ldr	r1, [pc, #88]	; (8015350 <report_build_info+0x2d8>)
 80152f8:	4613      	mov	r3, r2
 80152fa:	c903      	ldmia	r1, {r0, r1}
 80152fc:	6018      	str	r0, [r3, #0]
 80152fe:	3304      	adds	r3, #4
 8015300:	8019      	strh	r1, [r3, #0]
 8015302:	4614      	mov	r4, r2
 8015304:	2003      	movs	r0, #3
 8015306:	f7fa fd09 	bl	800fd1c <uitoa>
 801530a:	4603      	mov	r3, r0
 801530c:	4619      	mov	r1, r3
 801530e:	4620      	mov	r0, r4
 8015310:	f010 fd9d 	bl	8025e4e <strcat>

        append = &buf[6];
 8015314:	f107 0308 	add.w	r3, r7, #8
 8015318:	3306      	adds	r3, #6
 801531a:	677b      	str	r3, [r7, #116]	; 0x74
        *append++ = ':';
 801531c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801531e:	1c5a      	adds	r2, r3, #1
 8015320:	677a      	str	r2, [r7, #116]	; 0x74
 8015322:	223a      	movs	r2, #58	; 0x3a
 8015324:	701a      	strb	r2, [r3, #0]

        for(idx = 0; idx < N_AXIS; idx++)
 8015326:	2300      	movs	r3, #0
 8015328:	673b      	str	r3, [r7, #112]	; 0x70
 801532a:	e01f      	b.n	801536c <report_build_info+0x2f4>
 801532c:	200016a0 	.word	0x200016a0
 8015330:	0802d6e4 	.word	0x0802d6e4
 8015334:	0134b35d 	.word	0x0134b35d
 8015338:	0802d5b4 	.word	0x0802d5b4
 801533c:	0802d4b0 	.word	0x0802d4b0
 8015340:	0802d6f0 	.word	0x0802d6f0
 8015344:	20001cf0 	.word	0x20001cf0
 8015348:	0802d474 	.word	0x0802d474
 801534c:	0802d6f8 	.word	0x0802d6f8
 8015350:	0802d6fc 	.word	0x0802d6fc
            *append++ = *axis_letter[idx];
 8015354:	4a94      	ldr	r2, [pc, #592]	; (80155a8 <report_build_info+0x530>)
 8015356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801535c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801535e:	1c59      	adds	r1, r3, #1
 8015360:	6779      	str	r1, [r7, #116]	; 0x74
 8015362:	7812      	ldrb	r2, [r2, #0]
 8015364:	701a      	strb	r2, [r3, #0]
        for(idx = 0; idx < N_AXIS; idx++)
 8015366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015368:	3301      	adds	r3, #1
 801536a:	673b      	str	r3, [r7, #112]	; 0x70
 801536c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801536e:	2b02      	cmp	r3, #2
 8015370:	d9f0      	bls.n	8015354 <report_build_info+0x2dc>

        *append = '\0';
 8015372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015374:	2200      	movs	r2, #0
 8015376:	701a      	strb	r2, [r3, #0]

        hal.stream.write(strcat(buf, "]" ASCII_EOL));
 8015378:	4b8c      	ldr	r3, [pc, #560]	; (80155ac <report_build_info+0x534>)
 801537a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801537e:	f107 0308 	add.w	r3, r7, #8
 8015382:	4618      	mov	r0, r3
 8015384:	f7ea ff82 	bl	800028c <strlen>
 8015388:	4603      	mov	r3, r0
 801538a:	461a      	mov	r2, r3
 801538c:	f107 0308 	add.w	r3, r7, #8
 8015390:	4413      	add	r3, r2
 8015392:	4a87      	ldr	r2, [pc, #540]	; (80155b0 <report_build_info+0x538>)
 8015394:	6810      	ldr	r0, [r2, #0]
 8015396:	6018      	str	r0, [r3, #0]
 8015398:	f107 0308 	add.w	r3, r7, #8
 801539c:	4618      	mov	r0, r3
 801539e:	47a0      	blx	r4

        strcpy(buf, "[NEWOPT:ENUMS,RT");
 80153a0:	f107 0308 	add.w	r3, r7, #8
 80153a4:	4a83      	ldr	r2, [pc, #524]	; (80155b4 <report_build_info+0x53c>)
 80153a6:	461c      	mov	r4, r3
 80153a8:	4615      	mov	r5, r2
 80153aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153ae:	682b      	ldr	r3, [r5, #0]
 80153b0:	7023      	strb	r3, [r4, #0]
        strcat(buf, settings.flags.legacy_rt_commands ? "+," : "-,");
 80153b2:	4b81      	ldr	r3, [pc, #516]	; (80155b8 <report_build_info+0x540>)
 80153b4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80153b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d001      	beq.n	80153c6 <report_build_info+0x34e>
 80153c2:	4a7e      	ldr	r2, [pc, #504]	; (80155bc <report_build_info+0x544>)
 80153c4:	e000      	b.n	80153c8 <report_build_info+0x350>
 80153c6:	4a7e      	ldr	r2, [pc, #504]	; (80155c0 <report_build_info+0x548>)
 80153c8:	f107 0308 	add.w	r3, r7, #8
 80153cc:	4611      	mov	r1, r2
 80153ce:	4618      	mov	r0, r3
 80153d0:	f010 fd3d 	bl	8025e4e <strcat>

        if(settings.homing.flags.enabled)
 80153d4:	4b78      	ldr	r3, [pc, #480]	; (80155b8 <report_build_info+0x540>)
 80153d6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80153da:	f003 0301 	and.w	r3, r3, #1
 80153de:	b2db      	uxtb	r3, r3
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d00e      	beq.n	8015402 <report_build_info+0x38a>
            strcat(buf, "HOME,");
 80153e4:	f107 0308 	add.w	r3, r7, #8
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7ea ff4f 	bl	800028c <strlen>
 80153ee:	4603      	mov	r3, r0
 80153f0:	461a      	mov	r2, r3
 80153f2:	f107 0308 	add.w	r3, r7, #8
 80153f6:	4413      	add	r3, r2
 80153f8:	4a72      	ldr	r2, [pc, #456]	; (80155c4 <report_build_info+0x54c>)
 80153fa:	6810      	ldr	r0, [r2, #0]
 80153fc:	6018      	str	r0, [r3, #0]
 80153fe:	8892      	ldrh	r2, [r2, #4]
 8015400:	809a      	strh	r2, [r3, #4]

        if(!hal.probe.get_state)
 8015402:	4b6a      	ldr	r3, [pc, #424]	; (80155ac <report_build_info+0x534>)
 8015404:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8015408:	2b00      	cmp	r3, #0
 801540a:	d112      	bne.n	8015432 <report_build_info+0x3ba>
            strcat(buf, "NOPROBE,");
 801540c:	f107 0308 	add.w	r3, r7, #8
 8015410:	4618      	mov	r0, r3
 8015412:	f7ea ff3b 	bl	800028c <strlen>
 8015416:	4603      	mov	r3, r0
 8015418:	461a      	mov	r2, r3
 801541a:	f107 0308 	add.w	r3, r7, #8
 801541e:	4413      	add	r3, r2
 8015420:	4969      	ldr	r1, [pc, #420]	; (80155c8 <report_build_info+0x550>)
 8015422:	461a      	mov	r2, r3
 8015424:	460b      	mov	r3, r1
 8015426:	cb03      	ldmia	r3!, {r0, r1}
 8015428:	6010      	str	r0, [r2, #0]
 801542a:	6051      	str	r1, [r2, #4]
 801542c:	781b      	ldrb	r3, [r3, #0]
 801542e:	7213      	strb	r3, [r2, #8]
 8015430:	e014      	b.n	801545c <report_build_info+0x3e4>
        else if(hal.signals_cap.probe_disconnected)
 8015432:	4b5e      	ldr	r3, [pc, #376]	; (80155ac <report_build_info+0x534>)
 8015434:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8015438:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801543c:	b2db      	uxtb	r3, r3
 801543e:	2b00      	cmp	r3, #0
 8015440:	d00c      	beq.n	801545c <report_build_info+0x3e4>
            strcat(buf, "PC,");
 8015442:	f107 0308 	add.w	r3, r7, #8
 8015446:	4618      	mov	r0, r3
 8015448:	f7ea ff20 	bl	800028c <strlen>
 801544c:	4603      	mov	r3, r0
 801544e:	461a      	mov	r2, r3
 8015450:	f107 0308 	add.w	r3, r7, #8
 8015454:	4413      	add	r3, r2
 8015456:	4a5d      	ldr	r2, [pc, #372]	; (80155cc <report_build_info+0x554>)
 8015458:	6810      	ldr	r0, [r2, #0]
 801545a:	6018      	str	r0, [r3, #0]

        if(hal.signals_cap.stop_disable)
 801545c:	4b53      	ldr	r3, [pc, #332]	; (80155ac <report_build_info+0x534>)
 801545e:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8015462:	f003 0320 	and.w	r3, r3, #32
 8015466:	b2db      	uxtb	r3, r3
 8015468:	2b00      	cmp	r3, #0
 801546a:	d00c      	beq.n	8015486 <report_build_info+0x40e>
            strcat(buf, "OS,");
 801546c:	f107 0308 	add.w	r3, r7, #8
 8015470:	4618      	mov	r0, r3
 8015472:	f7ea ff0b 	bl	800028c <strlen>
 8015476:	4603      	mov	r3, r0
 8015478:	461a      	mov	r2, r3
 801547a:	f107 0308 	add.w	r3, r7, #8
 801547e:	4413      	add	r3, r2
 8015480:	4a53      	ldr	r2, [pc, #332]	; (80155d0 <report_build_info+0x558>)
 8015482:	6810      	ldr	r0, [r2, #0]
 8015484:	6018      	str	r0, [r3, #0]

        if(hal.signals_cap.block_delete)
 8015486:	4b49      	ldr	r3, [pc, #292]	; (80155ac <report_build_info+0x534>)
 8015488:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 801548c:	f003 0310 	and.w	r3, r3, #16
 8015490:	b2db      	uxtb	r3, r3
 8015492:	2b00      	cmp	r3, #0
 8015494:	d00c      	beq.n	80154b0 <report_build_info+0x438>
            strcat(buf, "BD,");
 8015496:	f107 0308 	add.w	r3, r7, #8
 801549a:	4618      	mov	r0, r3
 801549c:	f7ea fef6 	bl	800028c <strlen>
 80154a0:	4603      	mov	r3, r0
 80154a2:	461a      	mov	r2, r3
 80154a4:	f107 0308 	add.w	r3, r7, #8
 80154a8:	4413      	add	r3, r2
 80154aa:	4a4a      	ldr	r2, [pc, #296]	; (80155d4 <report_build_info+0x55c>)
 80154ac:	6810      	ldr	r0, [r2, #0]
 80154ae:	6018      	str	r0, [r3, #0]

        if(hal.signals_cap.e_stop)
 80154b0:	4b3e      	ldr	r3, [pc, #248]	; (80155ac <report_build_info+0x534>)
 80154b2:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 80154b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d00c      	beq.n	80154da <report_build_info+0x462>
            strcat(buf, "ES,");
 80154c0:	f107 0308 	add.w	r3, r7, #8
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ea fee1 	bl	800028c <strlen>
 80154ca:	4603      	mov	r3, r0
 80154cc:	461a      	mov	r2, r3
 80154ce:	f107 0308 	add.w	r3, r7, #8
 80154d2:	4413      	add	r3, r2
 80154d4:	4a40      	ldr	r2, [pc, #256]	; (80155d8 <report_build_info+0x560>)
 80154d6:	6810      	ldr	r0, [r2, #0]
 80154d8:	6018      	str	r0, [r3, #0]

        if(hal.driver_cap.mpg_mode)
 80154da:	4b34      	ldr	r3, [pc, #208]	; (80155ac <report_build_info+0x534>)
 80154dc:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 80154e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154e4:	b2db      	uxtb	r3, r3
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d00e      	beq.n	8015508 <report_build_info+0x490>
            strcat(buf, "MPG,");
 80154ea:	f107 0308 	add.w	r3, r7, #8
 80154ee:	4618      	mov	r0, r3
 80154f0:	f7ea fecc 	bl	800028c <strlen>
 80154f4:	4603      	mov	r3, r0
 80154f6:	461a      	mov	r2, r3
 80154f8:	f107 0308 	add.w	r3, r7, #8
 80154fc:	4413      	add	r3, r2
 80154fe:	4a37      	ldr	r2, [pc, #220]	; (80155dc <report_build_info+0x564>)
 8015500:	6810      	ldr	r0, [r2, #0]
 8015502:	6018      	str	r0, [r3, #0]
 8015504:	7912      	ldrb	r2, [r2, #4]
 8015506:	711a      	strb	r2, [r3, #4]

        if(settings.mode == Mode_Lathe)
 8015508:	4b2b      	ldr	r3, [pc, #172]	; (80155b8 <report_build_info+0x540>)
 801550a:	7e1b      	ldrb	r3, [r3, #24]
 801550c:	2b02      	cmp	r3, #2
 801550e:	d110      	bne.n	8015532 <report_build_info+0x4ba>
            strcat(buf, "LATHE,");
 8015510:	f107 0308 	add.w	r3, r7, #8
 8015514:	4618      	mov	r0, r3
 8015516:	f7ea feb9 	bl	800028c <strlen>
 801551a:	4603      	mov	r3, r0
 801551c:	461a      	mov	r2, r3
 801551e:	f107 0308 	add.w	r3, r7, #8
 8015522:	4413      	add	r3, r2
 8015524:	4a2e      	ldr	r2, [pc, #184]	; (80155e0 <report_build_info+0x568>)
 8015526:	6810      	ldr	r0, [r2, #0]
 8015528:	6018      	str	r0, [r3, #0]
 801552a:	8891      	ldrh	r1, [r2, #4]
 801552c:	7992      	ldrb	r2, [r2, #6]
 801552e:	8099      	strh	r1, [r3, #4]
 8015530:	719a      	strb	r2, [r3, #6]

        if(hal.driver_cap.laser_ppi_mode)
 8015532:	4b1e      	ldr	r3, [pc, #120]	; (80155ac <report_build_info+0x534>)
 8015534:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 8015538:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801553c:	b2db      	uxtb	r3, r3
 801553e:	2b00      	cmp	r3, #0
 8015540:	d00e      	beq.n	8015560 <report_build_info+0x4e8>
            strcat(buf, "PPI,");
 8015542:	f107 0308 	add.w	r3, r7, #8
 8015546:	4618      	mov	r0, r3
 8015548:	f7ea fea0 	bl	800028c <strlen>
 801554c:	4603      	mov	r3, r0
 801554e:	461a      	mov	r2, r3
 8015550:	f107 0308 	add.w	r3, r7, #8
 8015554:	4413      	add	r3, r2
 8015556:	4a23      	ldr	r2, [pc, #140]	; (80155e4 <report_build_info+0x56c>)
 8015558:	6810      	ldr	r0, [r2, #0]
 801555a:	6018      	str	r0, [r3, #0]
 801555c:	7912      	ldrb	r2, [r2, #4]
 801555e:	711a      	strb	r2, [r3, #4]

        if(hal.reboot)
 8015560:	4b12      	ldr	r3, [pc, #72]	; (80155ac <report_build_info+0x534>)
 8015562:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8015566:	2b00      	cmp	r3, #0
 8015568:	d00f      	beq.n	801558a <report_build_info+0x512>
            strcat(buf, "REBOOT,");
 801556a:	f107 0308 	add.w	r3, r7, #8
 801556e:	4618      	mov	r0, r3
 8015570:	f7ea fe8c 	bl	800028c <strlen>
 8015574:	4603      	mov	r3, r0
 8015576:	461a      	mov	r2, r3
 8015578:	f107 0308 	add.w	r3, r7, #8
 801557c:	4413      	add	r3, r2
 801557e:	491a      	ldr	r1, [pc, #104]	; (80155e8 <report_build_info+0x570>)
 8015580:	461a      	mov	r2, r3
 8015582:	460b      	mov	r3, r1
 8015584:	cb03      	ldmia	r3!, {r0, r1}
 8015586:	6010      	str	r0, [r2, #0]
 8015588:	6051      	str	r1, [r2, #4]

    #if NGC_EXPRESSIONS_ENABLE
        strcat(buf, "EXPR,");
    #endif

        if(hal.tool.change)
 801558a:	4b08      	ldr	r3, [pc, #32]	; (80155ac <report_build_info+0x534>)
 801558c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8015590:	2b00      	cmp	r3, #0
 8015592:	d034      	beq.n	80155fe <report_build_info+0x586>
            strcat(buf, hal.driver_cap.atc ? "ATC," : "TC,"); // Tool change supported (M6)
 8015594:	4b05      	ldr	r3, [pc, #20]	; (80155ac <report_build_info+0x534>)
 8015596:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 801559a:	f003 0301 	and.w	r3, r3, #1
 801559e:	b2db      	uxtb	r3, r3
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d025      	beq.n	80155f0 <report_build_info+0x578>
 80155a4:	4a11      	ldr	r2, [pc, #68]	; (80155ec <report_build_info+0x574>)
 80155a6:	e024      	b.n	80155f2 <report_build_info+0x57a>
 80155a8:	08032d48 	.word	0x08032d48
 80155ac:	200016a0 	.word	0x200016a0
 80155b0:	0802d4b0 	.word	0x0802d4b0
 80155b4:	0802d704 	.word	0x0802d704
 80155b8:	20001cf0 	.word	0x20001cf0
 80155bc:	0802d718 	.word	0x0802d718
 80155c0:	0802d71c 	.word	0x0802d71c
 80155c4:	0802d720 	.word	0x0802d720
 80155c8:	0802d728 	.word	0x0802d728
 80155cc:	0802d734 	.word	0x0802d734
 80155d0:	0802d738 	.word	0x0802d738
 80155d4:	0802d73c 	.word	0x0802d73c
 80155d8:	0802d740 	.word	0x0802d740
 80155dc:	0802d744 	.word	0x0802d744
 80155e0:	0802d74c 	.word	0x0802d74c
 80155e4:	0802d754 	.word	0x0802d754
 80155e8:	0802d75c 	.word	0x0802d75c
 80155ec:	0802d764 	.word	0x0802d764
 80155f0:	4a4b      	ldr	r2, [pc, #300]	; (8015720 <report_build_info+0x6a8>)
 80155f2:	f107 0308 	add.w	r3, r7, #8
 80155f6:	4611      	mov	r1, r2
 80155f8:	4618      	mov	r0, r3
 80155fa:	f010 fc28 	bl	8025e4e <strcat>

        if(hal.driver_cap.spindle_sync)
 80155fe:	4b49      	ldr	r3, [pc, #292]	; (8015724 <report_build_info+0x6ac>)
 8015600:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 8015604:	f003 0301 	and.w	r3, r3, #1
 8015608:	b2db      	uxtb	r3, r3
 801560a:	2b00      	cmp	r3, #0
 801560c:	d00c      	beq.n	8015628 <report_build_info+0x5b0>
            strcat(buf, "SS,");
 801560e:	f107 0308 	add.w	r3, r7, #8
 8015612:	4618      	mov	r0, r3
 8015614:	f7ea fe3a 	bl	800028c <strlen>
 8015618:	4603      	mov	r3, r0
 801561a:	461a      	mov	r2, r3
 801561c:	f107 0308 	add.w	r3, r7, #8
 8015620:	4413      	add	r3, r2
 8015622:	4a41      	ldr	r2, [pc, #260]	; (8015728 <report_build_info+0x6b0>)
 8015624:	6810      	ldr	r0, [r2, #0]
 8015626:	6018      	str	r0, [r3, #0]

    #ifndef NO_SETTINGS_DESCRIPTIONS
        strcat(buf, "SED,");
 8015628:	f107 0308 	add.w	r3, r7, #8
 801562c:	4618      	mov	r0, r3
 801562e:	f7ea fe2d 	bl	800028c <strlen>
 8015632:	4603      	mov	r3, r0
 8015634:	461a      	mov	r2, r3
 8015636:	f107 0308 	add.w	r3, r7, #8
 801563a:	4413      	add	r3, r2
 801563c:	4a3b      	ldr	r2, [pc, #236]	; (801572c <report_build_info+0x6b4>)
 801563e:	6810      	ldr	r0, [r2, #0]
 8015640:	6018      	str	r0, [r3, #0]
 8015642:	7912      	ldrb	r2, [r2, #4]
 8015644:	711a      	strb	r2, [r3, #4]
    #endif

        if(hal.rtc.get_datetime)
 8015646:	4b37      	ldr	r3, [pc, #220]	; (8015724 <report_build_info+0x6ac>)
 8015648:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801564c:	2b00      	cmp	r3, #0
 801564e:	d00e      	beq.n	801566e <report_build_info+0x5f6>
            strcat(buf, "RTC,");
 8015650:	f107 0308 	add.w	r3, r7, #8
 8015654:	4618      	mov	r0, r3
 8015656:	f7ea fe19 	bl	800028c <strlen>
 801565a:	4603      	mov	r3, r0
 801565c:	461a      	mov	r2, r3
 801565e:	f107 0308 	add.w	r3, r7, #8
 8015662:	4413      	add	r3, r2
 8015664:	4a32      	ldr	r2, [pc, #200]	; (8015730 <report_build_info+0x6b8>)
 8015666:	6810      	ldr	r0, [r2, #0]
 8015668:	6018      	str	r0, [r3, #0]
 801566a:	7912      	ldrb	r2, [r2, #4]
 801566c:	711a      	strb	r2, [r3, #4]

    #ifdef PID_LOG
        strcat(buf, "PID,");
    #endif

        append = &buf[strlen(buf) - 1];
 801566e:	f107 0308 	add.w	r3, r7, #8
 8015672:	4618      	mov	r0, r3
 8015674:	f7ea fe0a 	bl	800028c <strlen>
 8015678:	4603      	mov	r3, r0
 801567a:	3b01      	subs	r3, #1
 801567c:	f107 0208 	add.w	r2, r7, #8
 8015680:	4413      	add	r3, r2
 8015682:	677b      	str	r3, [r7, #116]	; 0x74
        if(*append == ',')
 8015684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	2b2c      	cmp	r3, #44	; 0x2c
 801568a:	d102      	bne.n	8015692 <report_build_info+0x61a>
            *append = '\0';
 801568c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801568e:	2200      	movs	r2, #0
 8015690:	701a      	strb	r2, [r3, #0]

        hal.stream.write(buf);
 8015692:	4b24      	ldr	r3, [pc, #144]	; (8015724 <report_build_info+0x6ac>)
 8015694:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015698:	f107 0208 	add.w	r2, r7, #8
 801569c:	4610      	mov	r0, r2
 801569e:	4798      	blx	r3
        grbl.on_report_options(true);
 80156a0:	4b24      	ldr	r3, [pc, #144]	; (8015734 <report_build_info+0x6bc>)
 80156a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156a4:	2001      	movs	r0, #1
 80156a6:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 80156a8:	4b1e      	ldr	r3, [pc, #120]	; (8015724 <report_build_info+0x6ac>)
 80156aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80156ae:	4822      	ldr	r0, [pc, #136]	; (8015738 <report_build_info+0x6c0>)
 80156b0:	4798      	blx	r3

        hal.stream.write("[FIRMWARE:grblHAL]" ASCII_EOL);
 80156b2:	4b1c      	ldr	r3, [pc, #112]	; (8015724 <report_build_info+0x6ac>)
 80156b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80156b8:	4820      	ldr	r0, [pc, #128]	; (801573c <report_build_info+0x6c4>)
 80156ba:	4798      	blx	r3

        if(!(nvs->type == NVS_None || nvs->type == NVS_Emulated)) {
 80156bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	f000 8089 	beq.w	80157d8 <report_build_info+0x760>
 80156c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	2b04      	cmp	r3, #4
 80156cc:	f000 8084 	beq.w	80157d8 <report_build_info+0x760>
            hal.stream.write("[NVS STORAGE:");
 80156d0:	4b14      	ldr	r3, [pc, #80]	; (8015724 <report_build_info+0x6ac>)
 80156d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80156d6:	481a      	ldr	r0, [pc, #104]	; (8015740 <report_build_info+0x6c8>)
 80156d8:	4798      	blx	r3
            *buf = '\0';
 80156da:	2300      	movs	r3, #0
 80156dc:	723b      	strb	r3, [r7, #8]
            if(hal.nvs.type == NVS_Emulated)
 80156de:	4b11      	ldr	r3, [pc, #68]	; (8015724 <report_build_info+0x6ac>)
 80156e0:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80156e4:	2b04      	cmp	r3, #4
 80156e6:	d10e      	bne.n	8015706 <report_build_info+0x68e>
                strcat(buf, "*");
 80156e8:	f107 0308 	add.w	r3, r7, #8
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7ea fdcd 	bl	800028c <strlen>
 80156f2:	4603      	mov	r3, r0
 80156f4:	461a      	mov	r2, r3
 80156f6:	f107 0308 	add.w	r3, r7, #8
 80156fa:	4413      	add	r3, r2
 80156fc:	4911      	ldr	r1, [pc, #68]	; (8015744 <report_build_info+0x6cc>)
 80156fe:	461a      	mov	r2, r3
 8015700:	460b      	mov	r3, r1
 8015702:	881b      	ldrh	r3, [r3, #0]
 8015704:	8013      	strh	r3, [r2, #0]
            strcat(buf, nvs->type == NVS_Flash ? "FLASH" : (nvs->type == NVS_FRAM ? "FRAM" : "EEPROM"));
 8015706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	2b03      	cmp	r3, #3
 801570c:	d020      	beq.n	8015750 <report_build_info+0x6d8>
 801570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	2b02      	cmp	r3, #2
 8015714:	d101      	bne.n	801571a <report_build_info+0x6a2>
 8015716:	4b0c      	ldr	r3, [pc, #48]	; (8015748 <report_build_info+0x6d0>)
 8015718:	e01b      	b.n	8015752 <report_build_info+0x6da>
 801571a:	4b0c      	ldr	r3, [pc, #48]	; (801574c <report_build_info+0x6d4>)
 801571c:	e019      	b.n	8015752 <report_build_info+0x6da>
 801571e:	bf00      	nop
 8015720:	0802d76c 	.word	0x0802d76c
 8015724:	200016a0 	.word	0x200016a0
 8015728:	0802d770 	.word	0x0802d770
 801572c:	0802d774 	.word	0x0802d774
 8015730:	0802d77c 	.word	0x0802d77c
 8015734:	200015b8 	.word	0x200015b8
 8015738:	0802d4b0 	.word	0x0802d4b0
 801573c:	0802d784 	.word	0x0802d784
 8015740:	0802d79c 	.word	0x0802d79c
 8015744:	0802d7ac 	.word	0x0802d7ac
 8015748:	0802d7b0 	.word	0x0802d7b0
 801574c:	0802d7b8 	.word	0x0802d7b8
 8015750:	4b97      	ldr	r3, [pc, #604]	; (80159b0 <report_build_info+0x938>)
 8015752:	f107 0208 	add.w	r2, r7, #8
 8015756:	4619      	mov	r1, r3
 8015758:	4610      	mov	r0, r2
 801575a:	f010 fb78 	bl	8025e4e <strcat>
            if(hal.nvs.size_max) {
 801575e:	4b95      	ldr	r3, [pc, #596]	; (80159b4 <report_build_info+0x93c>)
 8015760:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8015764:	2b00      	cmp	r3, #0
 8015766:	d02b      	beq.n	80157c0 <report_build_info+0x748>
                strcat(buf, " ");
 8015768:	f107 0308 	add.w	r3, r7, #8
 801576c:	4618      	mov	r0, r3
 801576e:	f7ea fd8d 	bl	800028c <strlen>
 8015772:	4603      	mov	r3, r0
 8015774:	461a      	mov	r2, r3
 8015776:	f107 0308 	add.w	r3, r7, #8
 801577a:	4413      	add	r3, r2
 801577c:	498e      	ldr	r1, [pc, #568]	; (80159b8 <report_build_info+0x940>)
 801577e:	461a      	mov	r2, r3
 8015780:	460b      	mov	r3, r1
 8015782:	881b      	ldrh	r3, [r3, #0]
 8015784:	8013      	strh	r3, [r2, #0]
                strcat(buf, uitoa(hal.nvs.size_max / 1024));
 8015786:	4b8b      	ldr	r3, [pc, #556]	; (80159b4 <report_build_info+0x93c>)
 8015788:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801578c:	0a9b      	lsrs	r3, r3, #10
 801578e:	4618      	mov	r0, r3
 8015790:	f7fa fac4 	bl	800fd1c <uitoa>
 8015794:	4602      	mov	r2, r0
 8015796:	f107 0308 	add.w	r3, r7, #8
 801579a:	4611      	mov	r1, r2
 801579c:	4618      	mov	r0, r3
 801579e:	f010 fb56 	bl	8025e4e <strcat>
                strcat(buf, "K");
 80157a2:	f107 0308 	add.w	r3, r7, #8
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7ea fd70 	bl	800028c <strlen>
 80157ac:	4603      	mov	r3, r0
 80157ae:	461a      	mov	r2, r3
 80157b0:	f107 0308 	add.w	r3, r7, #8
 80157b4:	4413      	add	r3, r2
 80157b6:	4981      	ldr	r1, [pc, #516]	; (80159bc <report_build_info+0x944>)
 80157b8:	461a      	mov	r2, r3
 80157ba:	460b      	mov	r3, r1
 80157bc:	881b      	ldrh	r3, [r3, #0]
 80157be:	8013      	strh	r3, [r2, #0]
            }
            hal.stream.write(buf);
 80157c0:	4b7c      	ldr	r3, [pc, #496]	; (80159b4 <report_build_info+0x93c>)
 80157c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80157c6:	f107 0208 	add.w	r2, r7, #8
 80157ca:	4610      	mov	r0, r2
 80157cc:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 80157ce:	4b79      	ldr	r3, [pc, #484]	; (80159b4 <report_build_info+0x93c>)
 80157d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80157d4:	487a      	ldr	r0, [pc, #488]	; (80159c0 <report_build_info+0x948>)
 80157d6:	4798      	blx	r3
        }

        if(hal.get_free_mem) {
 80157d8:	4b76      	ldr	r3, [pc, #472]	; (80159b4 <report_build_info+0x93c>)
 80157da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d017      	beq.n	8015810 <report_build_info+0x798>
            hal.stream.write("[FREE MEMORY:");
 80157e0:	4b74      	ldr	r3, [pc, #464]	; (80159b4 <report_build_info+0x93c>)
 80157e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80157e6:	4877      	ldr	r0, [pc, #476]	; (80159c4 <report_build_info+0x94c>)
 80157e8:	4798      	blx	r3
            hal.stream.write(uitoa(hal.get_free_mem() / 1024));
 80157ea:	4b72      	ldr	r3, [pc, #456]	; (80159b4 <report_build_info+0x93c>)
 80157ec:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80157f0:	4b70      	ldr	r3, [pc, #448]	; (80159b4 <report_build_info+0x93c>)
 80157f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157f4:	4798      	blx	r3
 80157f6:	4603      	mov	r3, r0
 80157f8:	0a9b      	lsrs	r3, r3, #10
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7fa fa8e 	bl	800fd1c <uitoa>
 8015800:	4603      	mov	r3, r0
 8015802:	4618      	mov	r0, r3
 8015804:	47a0      	blx	r4
            hal.stream.write("K]" ASCII_EOL);
 8015806:	4b6b      	ldr	r3, [pc, #428]	; (80159b4 <report_build_info+0x93c>)
 8015808:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801580c:	486e      	ldr	r0, [pc, #440]	; (80159c8 <report_build_info+0x950>)
 801580e:	4798      	blx	r3
        }

        if(hal.info) {
 8015810:	4b68      	ldr	r3, [pc, #416]	; (80159b4 <report_build_info+0x93c>)
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d010      	beq.n	801583a <report_build_info+0x7c2>
            hal.stream.write("[DRIVER:");
 8015818:	4b66      	ldr	r3, [pc, #408]	; (80159b4 <report_build_info+0x93c>)
 801581a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801581e:	486b      	ldr	r0, [pc, #428]	; (80159cc <report_build_info+0x954>)
 8015820:	4798      	blx	r3
            hal.stream.write(hal.info);
 8015822:	4b64      	ldr	r3, [pc, #400]	; (80159b4 <report_build_info+0x93c>)
 8015824:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015828:	4a62      	ldr	r2, [pc, #392]	; (80159b4 <report_build_info+0x93c>)
 801582a:	6852      	ldr	r2, [r2, #4]
 801582c:	4610      	mov	r0, r2
 801582e:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8015830:	4b60      	ldr	r3, [pc, #384]	; (80159b4 <report_build_info+0x93c>)
 8015832:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015836:	4862      	ldr	r0, [pc, #392]	; (80159c0 <report_build_info+0x948>)
 8015838:	4798      	blx	r3
        }

        if(hal.driver_version) {
 801583a:	4b5e      	ldr	r3, [pc, #376]	; (80159b4 <report_build_info+0x93c>)
 801583c:	689b      	ldr	r3, [r3, #8]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d010      	beq.n	8015864 <report_build_info+0x7ec>
            hal.stream.write("[DRIVER VERSION:");
 8015842:	4b5c      	ldr	r3, [pc, #368]	; (80159b4 <report_build_info+0x93c>)
 8015844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015848:	4861      	ldr	r0, [pc, #388]	; (80159d0 <report_build_info+0x958>)
 801584a:	4798      	blx	r3
            hal.stream.write(hal.driver_version);
 801584c:	4b59      	ldr	r3, [pc, #356]	; (80159b4 <report_build_info+0x93c>)
 801584e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015852:	4a58      	ldr	r2, [pc, #352]	; (80159b4 <report_build_info+0x93c>)
 8015854:	6892      	ldr	r2, [r2, #8]
 8015856:	4610      	mov	r0, r2
 8015858:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 801585a:	4b56      	ldr	r3, [pc, #344]	; (80159b4 <report_build_info+0x93c>)
 801585c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015860:	4857      	ldr	r0, [pc, #348]	; (80159c0 <report_build_info+0x948>)
 8015862:	4798      	blx	r3
        }

        if(hal.driver_options) {
 8015864:	4b53      	ldr	r3, [pc, #332]	; (80159b4 <report_build_info+0x93c>)
 8015866:	68db      	ldr	r3, [r3, #12]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d010      	beq.n	801588e <report_build_info+0x816>
            hal.stream.write("[DRIVER OPTIONS:");
 801586c:	4b51      	ldr	r3, [pc, #324]	; (80159b4 <report_build_info+0x93c>)
 801586e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015872:	4858      	ldr	r0, [pc, #352]	; (80159d4 <report_build_info+0x95c>)
 8015874:	4798      	blx	r3
            hal.stream.write(hal.driver_options);
 8015876:	4b4f      	ldr	r3, [pc, #316]	; (80159b4 <report_build_info+0x93c>)
 8015878:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801587c:	4a4d      	ldr	r2, [pc, #308]	; (80159b4 <report_build_info+0x93c>)
 801587e:	68d2      	ldr	r2, [r2, #12]
 8015880:	4610      	mov	r0, r2
 8015882:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8015884:	4b4b      	ldr	r3, [pc, #300]	; (80159b4 <report_build_info+0x93c>)
 8015886:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801588a:	484d      	ldr	r0, [pc, #308]	; (80159c0 <report_build_info+0x948>)
 801588c:	4798      	blx	r3
        }

        if(hal.board) {
 801588e:	4b49      	ldr	r3, [pc, #292]	; (80159b4 <report_build_info+0x93c>)
 8015890:	695b      	ldr	r3, [r3, #20]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d010      	beq.n	80158b8 <report_build_info+0x840>
            hal.stream.write("[BOARD:");
 8015896:	4b47      	ldr	r3, [pc, #284]	; (80159b4 <report_build_info+0x93c>)
 8015898:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801589c:	484e      	ldr	r0, [pc, #312]	; (80159d8 <report_build_info+0x960>)
 801589e:	4798      	blx	r3
            hal.stream.write(hal.board);
 80158a0:	4b44      	ldr	r3, [pc, #272]	; (80159b4 <report_build_info+0x93c>)
 80158a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80158a6:	4a43      	ldr	r2, [pc, #268]	; (80159b4 <report_build_info+0x93c>)
 80158a8:	6952      	ldr	r2, [r2, #20]
 80158aa:	4610      	mov	r0, r2
 80158ac:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 80158ae:	4b41      	ldr	r3, [pc, #260]	; (80159b4 <report_build_info+0x93c>)
 80158b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80158b4:	4842      	ldr	r0, [pc, #264]	; (80159c0 <report_build_info+0x948>)
 80158b6:	4798      	blx	r3
        }

        if(hal.max_step_rate) {
 80158b8:	4b3e      	ldr	r3, [pc, #248]	; (80159b4 <report_build_info+0x93c>)
 80158ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d014      	beq.n	80158ea <report_build_info+0x872>
            hal.stream.write("[MAX STEP RATE:");
 80158c0:	4b3c      	ldr	r3, [pc, #240]	; (80159b4 <report_build_info+0x93c>)
 80158c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80158c6:	4845      	ldr	r0, [pc, #276]	; (80159dc <report_build_info+0x964>)
 80158c8:	4798      	blx	r3
            hal.stream.write(uitoa(hal.max_step_rate));
 80158ca:	4b3a      	ldr	r3, [pc, #232]	; (80159b4 <report_build_info+0x93c>)
 80158cc:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80158d0:	4b38      	ldr	r3, [pc, #224]	; (80159b4 <report_build_info+0x93c>)
 80158d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7fa fa21 	bl	800fd1c <uitoa>
 80158da:	4603      	mov	r3, r0
 80158dc:	4618      	mov	r0, r3
 80158de:	47a0      	blx	r4
            hal.stream.write(" Hz]" ASCII_EOL);
 80158e0:	4b34      	ldr	r3, [pc, #208]	; (80159b4 <report_build_info+0x93c>)
 80158e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80158e6:	483e      	ldr	r0, [pc, #248]	; (80159e0 <report_build_info+0x968>)
 80158e8:	4798      	blx	r3
        hal.stream.write("[COMPATIBILITY LEVEL:");
        hal.stream.write(uitoa(COMPATIBILITY_LEVEL));
        hal.stream.write("]" ASCII_EOL);
#endif

        if(hal.port.num_digital_in + hal.port.num_digital_out + hal.port.num_analog_in + hal.port.num_analog_out > 0) {
 80158ea:	4b32      	ldr	r3, [pc, #200]	; (80159b4 <report_build_info+0x93c>)
 80158ec:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80158f0:	461a      	mov	r2, r3
 80158f2:	4b30      	ldr	r3, [pc, #192]	; (80159b4 <report_build_info+0x93c>)
 80158f4:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80158f8:	4413      	add	r3, r2
 80158fa:	4a2e      	ldr	r2, [pc, #184]	; (80159b4 <report_build_info+0x93c>)
 80158fc:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 8015900:	4413      	add	r3, r2
 8015902:	4a2c      	ldr	r2, [pc, #176]	; (80159b4 <report_build_info+0x93c>)
 8015904:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 8015908:	4413      	add	r3, r2
 801590a:	2b00      	cmp	r3, #0
 801590c:	dd48      	ble.n	80159a0 <report_build_info+0x928>
            hal.stream.write("[AUX IO:");
 801590e:	4b29      	ldr	r3, [pc, #164]	; (80159b4 <report_build_info+0x93c>)
 8015910:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015914:	4833      	ldr	r0, [pc, #204]	; (80159e4 <report_build_info+0x96c>)
 8015916:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_in));
 8015918:	4b26      	ldr	r3, [pc, #152]	; (80159b4 <report_build_info+0x93c>)
 801591a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801591e:	4b25      	ldr	r3, [pc, #148]	; (80159b4 <report_build_info+0x93c>)
 8015920:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8015924:	4618      	mov	r0, r3
 8015926:	f7fa f9f9 	bl	800fd1c <uitoa>
 801592a:	4603      	mov	r3, r0
 801592c:	4618      	mov	r0, r3
 801592e:	47a0      	blx	r4
            hal.stream.write(",");
 8015930:	4b20      	ldr	r3, [pc, #128]	; (80159b4 <report_build_info+0x93c>)
 8015932:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015936:	482c      	ldr	r0, [pc, #176]	; (80159e8 <report_build_info+0x970>)
 8015938:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_digital_out));
 801593a:	4b1e      	ldr	r3, [pc, #120]	; (80159b4 <report_build_info+0x93c>)
 801593c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8015940:	4b1c      	ldr	r3, [pc, #112]	; (80159b4 <report_build_info+0x93c>)
 8015942:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8015946:	4618      	mov	r0, r3
 8015948:	f7fa f9e8 	bl	800fd1c <uitoa>
 801594c:	4603      	mov	r3, r0
 801594e:	4618      	mov	r0, r3
 8015950:	47a0      	blx	r4
            hal.stream.write(",");
 8015952:	4b18      	ldr	r3, [pc, #96]	; (80159b4 <report_build_info+0x93c>)
 8015954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015958:	4823      	ldr	r0, [pc, #140]	; (80159e8 <report_build_info+0x970>)
 801595a:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_in));
 801595c:	4b15      	ldr	r3, [pc, #84]	; (80159b4 <report_build_info+0x93c>)
 801595e:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8015962:	4b14      	ldr	r3, [pc, #80]	; (80159b4 <report_build_info+0x93c>)
 8015964:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8015968:	4618      	mov	r0, r3
 801596a:	f7fa f9d7 	bl	800fd1c <uitoa>
 801596e:	4603      	mov	r3, r0
 8015970:	4618      	mov	r0, r3
 8015972:	47a0      	blx	r4
            hal.stream.write(",");
 8015974:	4b0f      	ldr	r3, [pc, #60]	; (80159b4 <report_build_info+0x93c>)
 8015976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801597a:	481b      	ldr	r0, [pc, #108]	; (80159e8 <report_build_info+0x970>)
 801597c:	4798      	blx	r3
            hal.stream.write(uitoa(hal.port.num_analog_out));
 801597e:	4b0d      	ldr	r3, [pc, #52]	; (80159b4 <report_build_info+0x93c>)
 8015980:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8015984:	4b0b      	ldr	r3, [pc, #44]	; (80159b4 <report_build_info+0x93c>)
 8015986:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 801598a:	4618      	mov	r0, r3
 801598c:	f7fa f9c6 	bl	800fd1c <uitoa>
 8015990:	4603      	mov	r3, r0
 8015992:	4618      	mov	r0, r3
 8015994:	47a0      	blx	r4
            hal.stream.write("]" ASCII_EOL);
 8015996:	4b07      	ldr	r3, [pc, #28]	; (80159b4 <report_build_info+0x93c>)
 8015998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801599c:	4808      	ldr	r0, [pc, #32]	; (80159c0 <report_build_info+0x948>)
 801599e:	4798      	blx	r3
        }

        grbl.on_report_options(false);
 80159a0:	4b12      	ldr	r3, [pc, #72]	; (80159ec <report_build_info+0x974>)
 80159a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159a4:	2000      	movs	r0, #0
 80159a6:	4798      	blx	r3
    }
}
 80159a8:	bf00      	nop
 80159aa:	3778      	adds	r7, #120	; 0x78
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bdb0      	pop	{r4, r5, r7, pc}
 80159b0:	0802d7c0 	.word	0x0802d7c0
 80159b4:	200016a0 	.word	0x200016a0
 80159b8:	0802d568 	.word	0x0802d568
 80159bc:	0802d7c8 	.word	0x0802d7c8
 80159c0:	0802d4b0 	.word	0x0802d4b0
 80159c4:	0802d7cc 	.word	0x0802d7cc
 80159c8:	0802d7dc 	.word	0x0802d7dc
 80159cc:	0802d7e4 	.word	0x0802d7e4
 80159d0:	0802d7f0 	.word	0x0802d7f0
 80159d4:	0802d804 	.word	0x0802d804
 80159d8:	0802d818 	.word	0x0802d818
 80159dc:	0802d820 	.word	0x0802d820
 80159e0:	0802d830 	.word	0x0802d830
 80159e4:	0802d838 	.word	0x0802d838
 80159e8:	0802d474 	.word	0x0802d474
 80159ec:	200015b8 	.word	0x200015b8

080159f0 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status (void)
{
 80159f0:	b5b0      	push	{r4, r5, r7, lr}
 80159f2:	b096      	sub	sp, #88	; 0x58
 80159f4:	af00      	add	r7, sp, #0
    static bool probing = false;

    float print_position[N_AXIS];
    report_tracking_flags_t report = system_get_rt_report_flags();
 80159f6:	f00b fddb 	bl	80215b0 <system_get_rt_report_flags>
 80159fa:	4603      	mov	r3, r0
 80159fc:	62bb      	str	r3, [r7, #40]	; 0x28
    probe_state_t probe_state = {
 80159fe:	2300      	movs	r3, #0
 8015a00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8015a04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015a08:	f043 0302 	orr.w	r3, r3, #2
 8015a0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .connected = On,
        .triggered = Off
    };

    system_convert_array_steps_to_mpos(print_position, sys.position);
 8015a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a14:	49a8      	ldr	r1, [pc, #672]	; (8015cb8 <report_realtime_status+0x2c8>)
 8015a16:	4618      	mov	r0, r3
 8015a18:	f00b fcee 	bl	80213f8 <system_convert_array_steps_to_mpos>

    if(hal.probe.get_state)
 8015a1c:	4ba7      	ldr	r3, [pc, #668]	; (8015cbc <report_realtime_status+0x2cc>)
 8015a1e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d006      	beq.n	8015a34 <report_realtime_status+0x44>
        probe_state = hal.probe.get_state();
 8015a26:	4ba5      	ldr	r3, [pc, #660]	; (8015cbc <report_realtime_status+0x2cc>)
 8015a28:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8015a2c:	4798      	blx	r3
 8015a2e:	4603      	mov	r3, r0
 8015a30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    // Report current machine state and sub-states
    hal.stream.write_all("<");
 8015a34:	4ba1      	ldr	r3, [pc, #644]	; (8015cbc <report_realtime_status+0x2cc>)
 8015a36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015a3a:	48a1      	ldr	r0, [pc, #644]	; (8015cc0 <report_realtime_status+0x2d0>)
 8015a3c:	4798      	blx	r3

    sys_state_t state = state_get();
 8015a3e:	f007 f96f 	bl	801cd20 <state_get>
 8015a42:	6478      	str	r0, [r7, #68]	; 0x44

    switch (gc_state.tool_change && state == STATE_CYCLE ? STATE_TOOL_CHANGE : state) {
 8015a44:	4b9f      	ldr	r3, [pc, #636]	; (8015cc4 <report_realtime_status+0x2d4>)
 8015a46:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d002      	beq.n	8015a54 <report_realtime_status+0x64>
 8015a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a50:	2b08      	cmp	r3, #8
 8015a52:	d001      	beq.n	8015a58 <report_realtime_status+0x68>
 8015a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a56:	e001      	b.n	8015a5c <report_realtime_status+0x6c>
 8015a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a60:	f000 8110 	beq.w	8015c84 <report_realtime_status+0x294>
 8015a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a68:	f200 8113 	bhi.w	8015c92 <report_realtime_status+0x2a2>
 8015a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a70:	f000 80bc 	beq.w	8015bec <report_realtime_status+0x1fc>
 8015a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a78:	f200 810b 	bhi.w	8015c92 <report_realtime_status+0x2a2>
 8015a7c:	2b80      	cmp	r3, #128	; 0x80
 8015a7e:	f000 80fb 	beq.w	8015c78 <report_realtime_status+0x288>
 8015a82:	2b80      	cmp	r3, #128	; 0x80
 8015a84:	f200 8105 	bhi.w	8015c92 <report_realtime_status+0x2a2>
 8015a88:	2b20      	cmp	r3, #32
 8015a8a:	d847      	bhi.n	8015b1c <report_realtime_status+0x12c>
 8015a8c:	2b20      	cmp	r3, #32
 8015a8e:	f200 8100 	bhi.w	8015c92 <report_realtime_status+0x2a2>
 8015a92:	a201      	add	r2, pc, #4	; (adr r2, 8015a98 <report_realtime_status+0xa8>)
 8015a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a98:	08015b25 	.word	0x08015b25
 8015a9c:	08015bed 	.word	0x08015bed
 8015aa0:	08015c47 	.word	0x08015c47
 8015aa4:	08015c93 	.word	0x08015c93
 8015aa8:	08015be1 	.word	0x08015be1
 8015aac:	08015c93 	.word	0x08015c93
 8015ab0:	08015c93 	.word	0x08015c93
 8015ab4:	08015c93 	.word	0x08015c93
 8015ab8:	08015b31 	.word	0x08015b31
 8015abc:	08015c93 	.word	0x08015c93
 8015ac0:	08015c93 	.word	0x08015c93
 8015ac4:	08015c93 	.word	0x08015c93
 8015ac8:	08015c93 	.word	0x08015c93
 8015acc:	08015c93 	.word	0x08015c93
 8015ad0:	08015c93 	.word	0x08015c93
 8015ad4:	08015c93 	.word	0x08015c93
 8015ad8:	08015bad 	.word	0x08015bad
 8015adc:	08015c93 	.word	0x08015c93
 8015ae0:	08015c93 	.word	0x08015c93
 8015ae4:	08015c93 	.word	0x08015c93
 8015ae8:	08015c93 	.word	0x08015c93
 8015aec:	08015c93 	.word	0x08015c93
 8015af0:	08015c93 	.word	0x08015c93
 8015af4:	08015c93 	.word	0x08015c93
 8015af8:	08015c93 	.word	0x08015c93
 8015afc:	08015c93 	.word	0x08015c93
 8015b00:	08015c93 	.word	0x08015c93
 8015b04:	08015c93 	.word	0x08015c93
 8015b08:	08015c93 	.word	0x08015c93
 8015b0c:	08015c93 	.word	0x08015c93
 8015b10:	08015c93 	.word	0x08015c93
 8015b14:	08015c93 	.word	0x08015c93
 8015b18:	08015bd5 	.word	0x08015bd5
 8015b1c:	2b40      	cmp	r3, #64	; 0x40
 8015b1e:	f000 8098 	beq.w	8015c52 <report_realtime_status+0x262>
 8015b22:	e0b6      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_IDLE:
            hal.stream.write_all("Idle");
 8015b24:	4b65      	ldr	r3, [pc, #404]	; (8015cbc <report_realtime_status+0x2cc>)
 8015b26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015b2a:	4867      	ldr	r0, [pc, #412]	; (8015cc8 <report_realtime_status+0x2d8>)
 8015b2c:	4798      	blx	r3
            break;
 8015b2e:	e0b0      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_CYCLE:
            hal.stream.write_all("Run");
 8015b30:	4b62      	ldr	r3, [pc, #392]	; (8015cbc <report_realtime_status+0x2cc>)
 8015b32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015b36:	4865      	ldr	r0, [pc, #404]	; (8015ccc <report_realtime_status+0x2dc>)
 8015b38:	4798      	blx	r3
            if(sys.probing_state == Probing_Active && settings.status_report.run_substate)
 8015b3a:	4b65      	ldr	r3, [pc, #404]	; (8015cd0 <report_realtime_status+0x2e0>)
 8015b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b40:	b2db      	uxtb	r3, r3
 8015b42:	2b01      	cmp	r3, #1
 8015b44:	d10b      	bne.n	8015b5e <report_realtime_status+0x16e>
 8015b46:	4b63      	ldr	r3, [pc, #396]	; (8015cd4 <report_realtime_status+0x2e4>)
 8015b48:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8015b4c:	f003 0308 	and.w	r3, r3, #8
 8015b50:	b2db      	uxtb	r3, r3
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d003      	beq.n	8015b5e <report_realtime_status+0x16e>
                probing = true;
 8015b56:	4b60      	ldr	r3, [pc, #384]	; (8015cd8 <report_realtime_status+0x2e8>)
 8015b58:	2201      	movs	r2, #1
 8015b5a:	701a      	strb	r2, [r3, #0]
 8015b5c:	e00f      	b.n	8015b7e <report_realtime_status+0x18e>
            else if (probing)
 8015b5e:	4b5e      	ldr	r3, [pc, #376]	; (8015cd8 <report_realtime_status+0x2e8>)
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d00b      	beq.n	8015b7e <report_realtime_status+0x18e>
                probing = probe_state.triggered;
 8015b66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015b6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015b6e:	b2db      	uxtb	r3, r3
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	bf14      	ite	ne
 8015b74:	2301      	movne	r3, #1
 8015b76:	2300      	moveq	r3, #0
 8015b78:	b2da      	uxtb	r2, r3
 8015b7a:	4b57      	ldr	r3, [pc, #348]	; (8015cd8 <report_realtime_status+0x2e8>)
 8015b7c:	701a      	strb	r2, [r3, #0]
            if(sys.flags.feed_hold_pending)
 8015b7e:	4b54      	ldr	r3, [pc, #336]	; (8015cd0 <report_realtime_status+0x2e0>)
 8015b80:	7d9b      	ldrb	r3, [r3, #22]
 8015b82:	f003 0320 	and.w	r3, r3, #32
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d005      	beq.n	8015b98 <report_realtime_status+0x1a8>
                hal.stream.write_all(":1");
 8015b8c:	4b4b      	ldr	r3, [pc, #300]	; (8015cbc <report_realtime_status+0x2cc>)
 8015b8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015b92:	4852      	ldr	r0, [pc, #328]	; (8015cdc <report_realtime_status+0x2ec>)
 8015b94:	4798      	blx	r3
            else if(probing)
                hal.stream.write_all(":2");
            break;
 8015b96:	e07b      	b.n	8015c90 <report_realtime_status+0x2a0>
            else if(probing)
 8015b98:	4b4f      	ldr	r3, [pc, #316]	; (8015cd8 <report_realtime_status+0x2e8>)
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d077      	beq.n	8015c90 <report_realtime_status+0x2a0>
                hal.stream.write_all(":2");
 8015ba0:	4b46      	ldr	r3, [pc, #280]	; (8015cbc <report_realtime_status+0x2cc>)
 8015ba2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015ba6:	484e      	ldr	r0, [pc, #312]	; (8015ce0 <report_realtime_status+0x2f0>)
 8015ba8:	4798      	blx	r3
            break;
 8015baa:	e071      	b.n	8015c90 <report_realtime_status+0x2a0>

        case STATE_HOLD:
            hal.stream.write_all(appendbuf(2, "Hold:", uitoa((uint32_t)(sys.holding_state - 1))));
 8015bac:	4b43      	ldr	r3, [pc, #268]	; (8015cbc <report_realtime_status+0x2cc>)
 8015bae:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015bb2:	4b47      	ldr	r3, [pc, #284]	; (8015cd0 <report_realtime_status+0x2e0>)
 8015bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015bb8:	3b01      	subs	r3, #1
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f7fa f8ae 	bl	800fd1c <uitoa>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	461a      	mov	r2, r3
 8015bc4:	4947      	ldr	r1, [pc, #284]	; (8015ce4 <report_realtime_status+0x2f4>)
 8015bc6:	2002      	movs	r0, #2
 8015bc8:	f7fd ff26 	bl	8013a18 <appendbuf>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	4618      	mov	r0, r3
 8015bd0:	47a0      	blx	r4
            break;
 8015bd2:	e05e      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_JOG:
            hal.stream.write_all("Jog");
 8015bd4:	4b39      	ldr	r3, [pc, #228]	; (8015cbc <report_realtime_status+0x2cc>)
 8015bd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015bda:	4843      	ldr	r0, [pc, #268]	; (8015ce8 <report_realtime_status+0x2f8>)
 8015bdc:	4798      	blx	r3
            break;
 8015bde:	e058      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_HOMING:
            hal.stream.write_all("Home");
 8015be0:	4b36      	ldr	r3, [pc, #216]	; (8015cbc <report_realtime_status+0x2cc>)
 8015be2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015be6:	4841      	ldr	r0, [pc, #260]	; (8015cec <report_realtime_status+0x2fc>)
 8015be8:	4798      	blx	r3
            break;
 8015bea:	e052      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_ESTOP:
        case STATE_ALARM:
            if((report.all || settings.status_report.alarm_substate) && sys.alarm)
 8015bec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015bf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d107      	bne.n	8015c0a <report_realtime_status+0x21a>
 8015bfa:	4b36      	ldr	r3, [pc, #216]	; (8015cd4 <report_realtime_status+0x2e4>)
 8015bfc:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8015c00:	f003 0304 	and.w	r3, r3, #4
 8015c04:	b2db      	uxtb	r3, r3
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d017      	beq.n	8015c3a <report_realtime_status+0x24a>
 8015c0a:	4b31      	ldr	r3, [pc, #196]	; (8015cd0 <report_realtime_status+0x2e0>)
 8015c0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d012      	beq.n	8015c3a <report_realtime_status+0x24a>
                hal.stream.write_all(appendbuf(2, "Alarm:", uitoa((uint32_t)sys.alarm)));
 8015c14:	4b29      	ldr	r3, [pc, #164]	; (8015cbc <report_realtime_status+0x2cc>)
 8015c16:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015c1a:	4b2d      	ldr	r3, [pc, #180]	; (8015cd0 <report_realtime_status+0x2e0>)
 8015c1c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7fa f87b 	bl	800fd1c <uitoa>
 8015c26:	4603      	mov	r3, r0
 8015c28:	461a      	mov	r2, r3
 8015c2a:	4931      	ldr	r1, [pc, #196]	; (8015cf0 <report_realtime_status+0x300>)
 8015c2c:	2002      	movs	r0, #2
 8015c2e:	f7fd fef3 	bl	8013a18 <appendbuf>
 8015c32:	4603      	mov	r3, r0
 8015c34:	4618      	mov	r0, r3
 8015c36:	47a0      	blx	r4
            else
                hal.stream.write_all("Alarm");
            break;
 8015c38:	e02b      	b.n	8015c92 <report_realtime_status+0x2a2>
                hal.stream.write_all("Alarm");
 8015c3a:	4b20      	ldr	r3, [pc, #128]	; (8015cbc <report_realtime_status+0x2cc>)
 8015c3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015c40:	482c      	ldr	r0, [pc, #176]	; (8015cf4 <report_realtime_status+0x304>)
 8015c42:	4798      	blx	r3
            break;
 8015c44:	e025      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_CHECK_MODE:
            hal.stream.write_all("Check");
 8015c46:	4b1d      	ldr	r3, [pc, #116]	; (8015cbc <report_realtime_status+0x2cc>)
 8015c48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015c4c:	482a      	ldr	r0, [pc, #168]	; (8015cf8 <report_realtime_status+0x308>)
 8015c4e:	4798      	blx	r3
            break;
 8015c50:	e01f      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_SAFETY_DOOR:
            hal.stream.write_all(appendbuf(2, "Door:", uitoa((uint32_t)sys.parking_state)));
 8015c52:	4b1a      	ldr	r3, [pc, #104]	; (8015cbc <report_realtime_status+0x2cc>)
 8015c54:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015c58:	4b1d      	ldr	r3, [pc, #116]	; (8015cd0 <report_realtime_status+0x2e0>)
 8015c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7fa f85c 	bl	800fd1c <uitoa>
 8015c64:	4603      	mov	r3, r0
 8015c66:	461a      	mov	r2, r3
 8015c68:	4924      	ldr	r1, [pc, #144]	; (8015cfc <report_realtime_status+0x30c>)
 8015c6a:	2002      	movs	r0, #2
 8015c6c:	f7fd fed4 	bl	8013a18 <appendbuf>
 8015c70:	4603      	mov	r3, r0
 8015c72:	4618      	mov	r0, r3
 8015c74:	47a0      	blx	r4
            break;
 8015c76:	e00c      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_SLEEP:
            hal.stream.write_all("Sleep");
 8015c78:	4b10      	ldr	r3, [pc, #64]	; (8015cbc <report_realtime_status+0x2cc>)
 8015c7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015c7e:	4820      	ldr	r0, [pc, #128]	; (8015d00 <report_realtime_status+0x310>)
 8015c80:	4798      	blx	r3
            break;
 8015c82:	e006      	b.n	8015c92 <report_realtime_status+0x2a2>

        case STATE_TOOL_CHANGE:
            hal.stream.write_all("Tool");
 8015c84:	4b0d      	ldr	r3, [pc, #52]	; (8015cbc <report_realtime_status+0x2cc>)
 8015c86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015c8a:	481e      	ldr	r0, [pc, #120]	; (8015d04 <report_realtime_status+0x314>)
 8015c8c:	4798      	blx	r3
            break;
 8015c8e:	e000      	b.n	8015c92 <report_realtime_status+0x2a2>
            break;
 8015c90:	bf00      	nop
    }

    uint_fast8_t idx;
    float wco[N_AXIS];
    if (!settings.status_report.machine_position || report.wco) {
 8015c92:	4b10      	ldr	r3, [pc, #64]	; (8015cd4 <report_realtime_status+0x2e4>)
 8015c94:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015c98:	f003 0301 	and.w	r3, r3, #1
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d006      	beq.n	8015cb0 <report_realtime_status+0x2c0>
 8015ca2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8015ca6:	f003 0301 	and.w	r3, r3, #1
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d05c      	beq.n	8015d6a <report_realtime_status+0x37a>
        for (idx = 0; idx < N_AXIS; idx++) {
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8015cb4:	e056      	b.n	8015d64 <report_realtime_status+0x374>
 8015cb6:	bf00      	nop
 8015cb8:	200015a8 	.word	0x200015a8
 8015cbc:	200016a0 	.word	0x200016a0
 8015cc0:	0802d84c 	.word	0x0802d84c
 8015cc4:	2000137c 	.word	0x2000137c
 8015cc8:	0802d850 	.word	0x0802d850
 8015ccc:	0802d858 	.word	0x0802d858
 8015cd0:	20001520 	.word	0x20001520
 8015cd4:	20001cf0 	.word	0x20001cf0
 8015cd8:	20001cb6 	.word	0x20001cb6
 8015cdc:	0802d5a4 	.word	0x0802d5a4
 8015ce0:	0802d85c 	.word	0x0802d85c
 8015ce4:	0802d860 	.word	0x0802d860
 8015ce8:	0802d868 	.word	0x0802d868
 8015cec:	0802d86c 	.word	0x0802d86c
 8015cf0:	0802d874 	.word	0x0802d874
 8015cf4:	0802d87c 	.word	0x0802d87c
 8015cf8:	0802d884 	.word	0x0802d884
 8015cfc:	0802d88c 	.word	0x0802d88c
 8015d00:	0802d894 	.word	0x0802d894
 8015d04:	0802d89c 	.word	0x0802d89c
            // Apply work coordinate offsets and tool length offset to current position.
            wco[idx] = gc_get_offset(idx);
 8015d08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015d0a:	f7ef fc0f 	bl	800552c <gc_get_offset>
 8015d0e:	eef0 7a40 	vmov.f32	s15, s0
 8015d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d14:	009b      	lsls	r3, r3, #2
 8015d16:	3358      	adds	r3, #88	; 0x58
 8015d18:	443b      	add	r3, r7
 8015d1a:	3b40      	subs	r3, #64	; 0x40
 8015d1c:	edc3 7a00 	vstr	s15, [r3]
            if (!settings.status_report.machine_position)
 8015d20:	4b7e      	ldr	r3, [pc, #504]	; (8015f1c <report_realtime_status+0x52c>)
 8015d22:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015d26:	f003 0301 	and.w	r3, r3, #1
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d116      	bne.n	8015d5e <report_realtime_status+0x36e>
                print_position[idx] -= wco[idx];
 8015d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d32:	009b      	lsls	r3, r3, #2
 8015d34:	3358      	adds	r3, #88	; 0x58
 8015d36:	443b      	add	r3, r7
 8015d38:	3b2c      	subs	r3, #44	; 0x2c
 8015d3a:	ed93 7a00 	vldr	s14, [r3]
 8015d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d40:	009b      	lsls	r3, r3, #2
 8015d42:	3358      	adds	r3, #88	; 0x58
 8015d44:	443b      	add	r3, r7
 8015d46:	3b40      	subs	r3, #64	; 0x40
 8015d48:	edd3 7a00 	vldr	s15, [r3]
 8015d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d52:	009b      	lsls	r3, r3, #2
 8015d54:	3358      	adds	r3, #88	; 0x58
 8015d56:	443b      	add	r3, r7
 8015d58:	3b2c      	subs	r3, #44	; 0x2c
 8015d5a:	edc3 7a00 	vstr	s15, [r3]
        for (idx = 0; idx < N_AXIS; idx++) {
 8015d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d60:	3301      	adds	r3, #1
 8015d62:	657b      	str	r3, [r7, #84]	; 0x54
 8015d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d66:	2b02      	cmp	r3, #2
 8015d68:	d9ce      	bls.n	8015d08 <report_realtime_status+0x318>
        }
    }

    // Report position
    hal.stream.write_all(settings.status_report.machine_position ? "|MPos:" : "|WPos:");
 8015d6a:	4b6d      	ldr	r3, [pc, #436]	; (8015f20 <report_realtime_status+0x530>)
 8015d6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015d70:	4a6a      	ldr	r2, [pc, #424]	; (8015f1c <report_realtime_status+0x52c>)
 8015d72:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
 8015d76:	f002 0201 	and.w	r2, r2, #1
 8015d7a:	b2d2      	uxtb	r2, r2
 8015d7c:	2a00      	cmp	r2, #0
 8015d7e:	d001      	beq.n	8015d84 <report_realtime_status+0x394>
 8015d80:	4a68      	ldr	r2, [pc, #416]	; (8015f24 <report_realtime_status+0x534>)
 8015d82:	e000      	b.n	8015d86 <report_realtime_status+0x396>
 8015d84:	4a68      	ldr	r2, [pc, #416]	; (8015f28 <report_realtime_status+0x538>)
 8015d86:	4610      	mov	r0, r2
 8015d88:	4798      	blx	r3
    hal.stream.write_all(get_axis_values(print_position));
 8015d8a:	4b65      	ldr	r3, [pc, #404]	; (8015f20 <report_realtime_status+0x530>)
 8015d8c:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015d90:	4b66      	ldr	r3, [pc, #408]	; (8015f2c <report_realtime_status+0x53c>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015d98:	4610      	mov	r0, r2
 8015d9a:	4798      	blx	r3
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	4618      	mov	r0, r3
 8015da0:	47a0      	blx	r4

    // Returns planner and output stream buffer states.

    if (settings.status_report.buffer_state) {
 8015da2:	4b5e      	ldr	r3, [pc, #376]	; (8015f1c <report_realtime_status+0x52c>)
 8015da4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015da8:	f003 0302 	and.w	r3, r3, #2
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d023      	beq.n	8015dfa <report_realtime_status+0x40a>
        hal.stream.write_all("|Bf:");
 8015db2:	4b5b      	ldr	r3, [pc, #364]	; (8015f20 <report_realtime_status+0x530>)
 8015db4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015db8:	485d      	ldr	r0, [pc, #372]	; (8015f30 <report_realtime_status+0x540>)
 8015dba:	4798      	blx	r3
        hal.stream.write_all(uitoa((uint32_t)plan_get_block_buffer_available()));
 8015dbc:	4b58      	ldr	r3, [pc, #352]	; (8015f20 <report_realtime_status+0x530>)
 8015dbe:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015dc2:	f7fb ff65 	bl	8011c90 <plan_get_block_buffer_available>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f7f9 ffa7 	bl	800fd1c <uitoa>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	47a0      	blx	r4
        hal.stream.write_all(",");
 8015dd4:	4b52      	ldr	r3, [pc, #328]	; (8015f20 <report_realtime_status+0x530>)
 8015dd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015dda:	4856      	ldr	r0, [pc, #344]	; (8015f34 <report_realtime_status+0x544>)
 8015ddc:	4798      	blx	r3
        hal.stream.write_all(uitoa(hal.stream.get_rx_buffer_free()));
 8015dde:	4b50      	ldr	r3, [pc, #320]	; (8015f20 <report_realtime_status+0x530>)
 8015de0:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015de4:	4b4e      	ldr	r3, [pc, #312]	; (8015f20 <report_realtime_status+0x530>)
 8015de6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015dea:	4798      	blx	r3
 8015dec:	4603      	mov	r3, r0
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7f9 ff94 	bl	800fd1c <uitoa>
 8015df4:	4603      	mov	r3, r0
 8015df6:	4618      	mov	r0, r3
 8015df8:	47a0      	blx	r4
    }

    if(settings.status_report.line_numbers) {
 8015dfa:	4b48      	ldr	r3, [pc, #288]	; (8015f1c <report_realtime_status+0x52c>)
 8015dfc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015e00:	f003 0304 	and.w	r3, r3, #4
 8015e04:	b2db      	uxtb	r3, r3
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d01a      	beq.n	8015e40 <report_realtime_status+0x450>
        // Report current line number
        plan_block_t *cur_block = plan_get_current_block();
 8015e0a:	f7fb fac3 	bl	8011394 <plan_get_current_block>
 8015e0e:	6438      	str	r0, [r7, #64]	; 0x40
        if (cur_block != NULL && cur_block->line_number > 0)
 8015e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d014      	beq.n	8015e40 <report_realtime_status+0x450>
 8015e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e18:	699b      	ldr	r3, [r3, #24]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	dd10      	ble.n	8015e40 <report_realtime_status+0x450>
            hal.stream.write_all(appendbuf(2, "|Ln:", uitoa((uint32_t)cur_block->line_number)));
 8015e1e:	4b40      	ldr	r3, [pc, #256]	; (8015f20 <report_realtime_status+0x530>)
 8015e20:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e26:	699b      	ldr	r3, [r3, #24]
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7f9 ff77 	bl	800fd1c <uitoa>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	461a      	mov	r2, r3
 8015e32:	4941      	ldr	r1, [pc, #260]	; (8015f38 <report_realtime_status+0x548>)
 8015e34:	2002      	movs	r0, #2
 8015e36:	f7fd fdef 	bl	8013a18 <appendbuf>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	47a0      	blx	r4
    }

    spindle_ptrs_t *spindle_0;
    spindle_state_t spindle_0_state;

    spindle_0 = spindle_get(0);
 8015e40:	2000      	movs	r0, #0
 8015e42:	f006 f8c9 	bl	801bfd8 <spindle_get>
 8015e46:	63f8      	str	r0, [r7, #60]	; 0x3c
    spindle_0_state = spindle_0->get_state();
 8015e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e4a:	6a1b      	ldr	r3, [r3, #32]
 8015e4c:	4798      	blx	r3
 8015e4e:	4603      	mov	r3, r0
 8015e50:	753b      	strb	r3, [r7, #20]

    // Report realtime feed speed
    if(settings.status_report.feed_speed) {
 8015e52:	4b32      	ldr	r3, [pc, #200]	; (8015f1c <report_realtime_status+0x52c>)
 8015e54:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015e58:	f003 0308 	and.w	r3, r3, #8
 8015e5c:	b2db      	uxtb	r3, r3
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	f000 8085 	beq.w	8015f6e <report_realtime_status+0x57e>
        if(spindle_0->cap.variable) {
 8015e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e66:	7a5b      	ldrb	r3, [r3, #9]
 8015e68:	f003 0301 	and.w	r3, r3, #1
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d068      	beq.n	8015f44 <report_realtime_status+0x554>
            hal.stream.write_all(appendbuf(2, "|FS:", get_rate_value(st_get_realtime_rate())));
 8015e72:	4b2b      	ldr	r3, [pc, #172]	; (8015f20 <report_realtime_status+0x530>)
 8015e74:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015e78:	4b30      	ldr	r3, [pc, #192]	; (8015f3c <report_realtime_status+0x54c>)
 8015e7a:	681d      	ldr	r5, [r3, #0]
 8015e7c:	f009 fb1e 	bl	801f4bc <st_get_realtime_rate>
 8015e80:	eef0 7a40 	vmov.f32	s15, s0
 8015e84:	eeb0 0a67 	vmov.f32	s0, s15
 8015e88:	47a8      	blx	r5
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	461a      	mov	r2, r3
 8015e8e:	492c      	ldr	r1, [pc, #176]	; (8015f40 <report_realtime_status+0x550>)
 8015e90:	2002      	movs	r0, #2
 8015e92:	f7fd fdc1 	bl	8013a18 <appendbuf>
 8015e96:	4603      	mov	r3, r0
 8015e98:	4618      	mov	r0, r3
 8015e9a:	47a0      	blx	r4
            hal.stream.write_all(appendbuf(2, ",", uitoa(spindle_0_state.on ? lroundf(spindle_0->param->rpm_overridden) : 0)));
 8015e9c:	4b20      	ldr	r3, [pc, #128]	; (8015f20 <report_realtime_status+0x530>)
 8015e9e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015ea2:	7d3b      	ldrb	r3, [r7, #20]
 8015ea4:	f003 0301 	and.w	r3, r3, #1
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d009      	beq.n	8015ec2 <report_realtime_status+0x4d2>
 8015eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8015eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8015eba:	f010 ffda 	bl	8026e72 <lroundf>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	e000      	b.n	8015ec4 <report_realtime_status+0x4d4>
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f7f9 ff29 	bl	800fd1c <uitoa>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	461a      	mov	r2, r3
 8015ece:	4919      	ldr	r1, [pc, #100]	; (8015f34 <report_realtime_status+0x544>)
 8015ed0:	2002      	movs	r0, #2
 8015ed2:	f7fd fda1 	bl	8013a18 <appendbuf>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	4618      	mov	r0, r3
 8015eda:	47a0      	blx	r4
            if(spindle_0->get_data /* && sys.mpg_mode */)
 8015edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d044      	beq.n	8015f6e <report_realtime_status+0x57e>
                hal.stream.write_all(appendbuf(2, ",", uitoa(lroundf(spindle_0->get_data(SpindleData_RPM)->rpm))));
 8015ee4:	4b0e      	ldr	r3, [pc, #56]	; (8015f20 <report_realtime_status+0x530>)
 8015ee6:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eee:	2001      	movs	r0, #1
 8015ef0:	4798      	blx	r3
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	edd3 7a00 	vldr	s15, [r3]
 8015ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8015efc:	f010 ffb9 	bl	8026e72 <lroundf>
 8015f00:	4603      	mov	r3, r0
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7f9 ff0a 	bl	800fd1c <uitoa>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	4909      	ldr	r1, [pc, #36]	; (8015f34 <report_realtime_status+0x544>)
 8015f0e:	2002      	movs	r0, #2
 8015f10:	f7fd fd82 	bl	8013a18 <appendbuf>
 8015f14:	4603      	mov	r3, r0
 8015f16:	4618      	mov	r0, r3
 8015f18:	47a0      	blx	r4
 8015f1a:	e028      	b.n	8015f6e <report_realtime_status+0x57e>
 8015f1c:	20001cf0 	.word	0x20001cf0
 8015f20:	200016a0 	.word	0x200016a0
 8015f24:	0802d8a4 	.word	0x0802d8a4
 8015f28:	0802d8ac 	.word	0x0802d8ac
 8015f2c:	20001ca8 	.word	0x20001ca8
 8015f30:	0802d8b4 	.word	0x0802d8b4
 8015f34:	0802d474 	.word	0x0802d474
 8015f38:	0802d8bc 	.word	0x0802d8bc
 8015f3c:	20001cb0 	.word	0x20001cb0
 8015f40:	0802d8c4 	.word	0x0802d8c4
        } else
            hal.stream.write_all(appendbuf(2, "|F:", get_rate_value(st_get_realtime_rate())));
 8015f44:	4ba0      	ldr	r3, [pc, #640]	; (80161c8 <report_realtime_status+0x7d8>)
 8015f46:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8015f4a:	4ba0      	ldr	r3, [pc, #640]	; (80161cc <report_realtime_status+0x7dc>)
 8015f4c:	681d      	ldr	r5, [r3, #0]
 8015f4e:	f009 fab5 	bl	801f4bc <st_get_realtime_rate>
 8015f52:	eef0 7a40 	vmov.f32	s15, s0
 8015f56:	eeb0 0a67 	vmov.f32	s0, s15
 8015f5a:	47a8      	blx	r5
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	461a      	mov	r2, r3
 8015f60:	499b      	ldr	r1, [pc, #620]	; (80161d0 <report_realtime_status+0x7e0>)
 8015f62:	2002      	movs	r0, #2
 8015f64:	f7fd fd58 	bl	8013a18 <appendbuf>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	47a0      	blx	r4
        }
    }

#endif

    if(settings.status_report.pin_state) {
 8015f6e:	4b99      	ldr	r3, [pc, #612]	; (80161d4 <report_realtime_status+0x7e4>)
 8015f70:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8015f74:	f003 0310 	and.w	r3, r3, #16
 8015f78:	b2db      	uxtb	r3, r3
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d07a      	beq.n	8016074 <report_realtime_status+0x684>

        axes_signals_t lim_pin_state = limit_signals_merge(hal.limits.get_state());
 8015f7e:	4b92      	ldr	r3, [pc, #584]	; (80161c8 <report_realtime_status+0x7d8>)
 8015f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f82:	4798      	blx	r3
 8015f84:	4603      	mov	r3, r0
 8015f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8015f88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f8a:	f7f5 fcbd 	bl	800b908 <limit_signals_merge>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	743b      	strb	r3, [r7, #16]
        control_signals_t ctrl_pin_state = hal.control.get_state();
 8015f92:	4b8d      	ldr	r3, [pc, #564]	; (80161c8 <report_realtime_status+0x7d8>)
 8015f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015f96:	4798      	blx	r3
 8015f98:	4603      	mov	r3, r0
 8015f9a:	81bb      	strh	r3, [r7, #12]

        ctrl_pin_state.cycle_start |= sys.report.cycle_start;
 8015f9c:	7b3b      	ldrb	r3, [r7, #12]
 8015f9e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015fa2:	b2da      	uxtb	r2, r3
 8015fa4:	4b8c      	ldr	r3, [pc, #560]	; (80161d8 <report_realtime_status+0x7e8>)
 8015fa6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8015faa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	4313      	orrs	r3, r2
 8015fb2:	b2da      	uxtb	r2, r3
 8015fb4:	7b3b      	ldrb	r3, [r7, #12]
 8015fb6:	f362 0382 	bfi	r3, r2, #2, #1
 8015fba:	733b      	strb	r3, [r7, #12]

        if (lim_pin_state.value | ctrl_pin_state.value | probe_state.triggered | !probe_state.connected | sys.flags.block_delete_enabled) {
 8015fbc:	7c3b      	ldrb	r3, [r7, #16]
 8015fbe:	461a      	mov	r2, r3
 8015fc0:	89bb      	ldrh	r3, [r7, #12]
 8015fc2:	4313      	orrs	r3, r2
 8015fc4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8015fc8:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8015fcc:	b2d2      	uxtb	r2, r2
 8015fce:	4313      	orrs	r3, r2
 8015fd0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8015fd4:	f002 0202 	and.w	r2, r2, #2
 8015fd8:	b2d2      	uxtb	r2, r2
 8015fda:	2a00      	cmp	r2, #0
 8015fdc:	bf0c      	ite	eq
 8015fde:	2201      	moveq	r2, #1
 8015fe0:	2200      	movne	r2, #0
 8015fe2:	b2d2      	uxtb	r2, r2
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	4a7c      	ldr	r2, [pc, #496]	; (80161d8 <report_realtime_status+0x7e8>)
 8015fe8:	7d92      	ldrb	r2, [r2, #22]
 8015fea:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8015fee:	b2d2      	uxtb	r2, r2
 8015ff0:	4313      	orrs	r3, r2
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d03e      	beq.n	8016074 <report_realtime_status+0x684>

            char *append = &buf[4];
 8015ff6:	4b79      	ldr	r3, [pc, #484]	; (80161dc <report_realtime_status+0x7ec>)
 8015ff8:	653b      	str	r3, [r7, #80]	; 0x50

            strcpy(buf, "|Pn:");
 8015ffa:	4b79      	ldr	r3, [pc, #484]	; (80161e0 <report_realtime_status+0x7f0>)
 8015ffc:	4a79      	ldr	r2, [pc, #484]	; (80161e4 <report_realtime_status+0x7f4>)
 8015ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016002:	6018      	str	r0, [r3, #0]
 8016004:	3304      	adds	r3, #4
 8016006:	7019      	strb	r1, [r3, #0]

            if(probe_state.triggered)
 8016008:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801600c:	f003 0301 	and.w	r3, r3, #1
 8016010:	b2db      	uxtb	r3, r3
 8016012:	2b00      	cmp	r3, #0
 8016014:	d004      	beq.n	8016020 <report_realtime_status+0x630>
                *append++ = 'P';
 8016016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016018:	1c5a      	adds	r2, r3, #1
 801601a:	653a      	str	r2, [r7, #80]	; 0x50
 801601c:	2250      	movs	r2, #80	; 0x50
 801601e:	701a      	strb	r2, [r3, #0]

            if(!probe_state.connected)
 8016020:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016024:	f003 0302 	and.w	r3, r3, #2
 8016028:	b2db      	uxtb	r3, r3
 801602a:	2b00      	cmp	r3, #0
 801602c:	d104      	bne.n	8016038 <report_realtime_status+0x648>
                *append++ = 'O';
 801602e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016030:	1c5a      	adds	r2, r3, #1
 8016032:	653a      	str	r2, [r7, #80]	; 0x50
 8016034:	224f      	movs	r2, #79	; 0x4f
 8016036:	701a      	strb	r2, [r3, #0]

            if(lim_pin_state.value && !ctrl_pin_state.limits_override)
 8016038:	7c3b      	ldrb	r3, [r7, #16]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00a      	beq.n	8016054 <report_realtime_status+0x664>
 801603e:	7b7b      	ldrb	r3, [r7, #13]
 8016040:	f003 0304 	and.w	r3, r3, #4
 8016044:	b2db      	uxtb	r3, r3
 8016046:	2b00      	cmp	r3, #0
 8016048:	d104      	bne.n	8016054 <report_realtime_status+0x664>
                append = axis_signals_tostring(append, lim_pin_state);
 801604a:	7c39      	ldrb	r1, [r7, #16]
 801604c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801604e:	f7fd fe59 	bl	8013d04 <axis_signals_tostring>
 8016052:	6538      	str	r0, [r7, #80]	; 0x50

            if(ctrl_pin_state.value)
 8016054:	89bb      	ldrh	r3, [r7, #12]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d004      	beq.n	8016064 <report_realtime_status+0x674>
                append = control_signals_tostring(append, ctrl_pin_state);
 801605a:	89b9      	ldrh	r1, [r7, #12]
 801605c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801605e:	f7fd fe83 	bl	8013d68 <control_signals_tostring>
 8016062:	6538      	str	r0, [r7, #80]	; 0x50

            *append = '\0';
 8016064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016066:	2200      	movs	r2, #0
 8016068:	701a      	strb	r2, [r3, #0]
            hal.stream.write_all(buf);
 801606a:	4b57      	ldr	r3, [pc, #348]	; (80161c8 <report_realtime_status+0x7d8>)
 801606c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016070:	485b      	ldr	r0, [pc, #364]	; (80161e0 <report_realtime_status+0x7f0>)
 8016072:	4798      	blx	r3
        }
    }

    if(settings.status_report.work_coord_offset) {
 8016074:	4b57      	ldr	r3, [pc, #348]	; (80161d4 <report_realtime_status+0x7e4>)
 8016076:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801607a:	f003 0320 	and.w	r3, r3, #32
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b00      	cmp	r3, #0
 8016082:	d02a      	beq.n	80160da <report_realtime_status+0x6ea>

        if(wco_counter > 0 && !report.wco) {
 8016084:	4b58      	ldr	r3, [pc, #352]	; (80161e8 <report_realtime_status+0x7f8>)
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d019      	beq.n	80160c0 <report_realtime_status+0x6d0>
 801608c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8016090:	f003 0301 	and.w	r3, r3, #1
 8016094:	b2db      	uxtb	r3, r3
 8016096:	2b00      	cmp	r3, #0
 8016098:	d112      	bne.n	80160c0 <report_realtime_status+0x6d0>
            if(wco_counter > (REPORT_WCO_REFRESH_IDLE_COUNT - 1) && state_get() == STATE_IDLE)
 801609a:	4b53      	ldr	r3, [pc, #332]	; (80161e8 <report_realtime_status+0x7f8>)
 801609c:	781b      	ldrb	r3, [r3, #0]
 801609e:	2b09      	cmp	r3, #9
 80160a0:	d907      	bls.n	80160b2 <report_realtime_status+0x6c2>
 80160a2:	f006 fe3d 	bl	801cd20 <state_get>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d102      	bne.n	80160b2 <report_realtime_status+0x6c2>
                wco_counter = REPORT_WCO_REFRESH_IDLE_COUNT - 1;
 80160ac:	4b4e      	ldr	r3, [pc, #312]	; (80161e8 <report_realtime_status+0x7f8>)
 80160ae:	2209      	movs	r2, #9
 80160b0:	701a      	strb	r2, [r3, #0]
            wco_counter--;
 80160b2:	4b4d      	ldr	r3, [pc, #308]	; (80161e8 <report_realtime_status+0x7f8>)
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	3b01      	subs	r3, #1
 80160b8:	b2da      	uxtb	r2, r3
 80160ba:	4b4b      	ldr	r3, [pc, #300]	; (80161e8 <report_realtime_status+0x7f8>)
 80160bc:	701a      	strb	r2, [r3, #0]
 80160be:	e012      	b.n	80160e6 <report_realtime_status+0x6f6>
        } else
            wco_counter = state_get() & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 80160c0:	f006 fe2e 	bl	801cd20 <state_get>
 80160c4:	4603      	mov	r3, r0
 80160c6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d001      	beq.n	80160d2 <report_realtime_status+0x6e2>
 80160ce:	221d      	movs	r2, #29
 80160d0:	e000      	b.n	80160d4 <report_realtime_status+0x6e4>
 80160d2:	2209      	movs	r2, #9
 80160d4:	4b44      	ldr	r3, [pc, #272]	; (80161e8 <report_realtime_status+0x7f8>)
 80160d6:	701a      	strb	r2, [r3, #0]
 80160d8:	e005      	b.n	80160e6 <report_realtime_status+0x6f6>
                            ? (REPORT_WCO_REFRESH_BUSY_COUNT - 1) // Reset counter for slow refresh
                            : (REPORT_WCO_REFRESH_IDLE_COUNT - 1);
    } else
        report.wco = Off;
 80160da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80160de:	f36f 0300 	bfc	r3, #0, #1
 80160e2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    if(settings.status_report.overrides) {
 80160e6:	4b3b      	ldr	r3, [pc, #236]	; (80161d4 <report_realtime_status+0x7e4>)
 80160e8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80160ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d07c      	beq.n	80161f0 <report_realtime_status+0x800>

        if (override_counter > 0 && !report.overrides)
 80160f6:	4b3d      	ldr	r3, [pc, #244]	; (80161ec <report_realtime_status+0x7fc>)
 80160f8:	781b      	ldrb	r3, [r3, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00d      	beq.n	801611a <report_realtime_status+0x72a>
 80160fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016106:	b2db      	uxtb	r3, r3
 8016108:	2b00      	cmp	r3, #0
 801610a:	d106      	bne.n	801611a <report_realtime_status+0x72a>
            override_counter--;
 801610c:	4b37      	ldr	r3, [pc, #220]	; (80161ec <report_realtime_status+0x7fc>)
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	3b01      	subs	r3, #1
 8016112:	b2da      	uxtb	r2, r3
 8016114:	4b35      	ldr	r3, [pc, #212]	; (80161ec <report_realtime_status+0x7fc>)
 8016116:	701a      	strb	r2, [r3, #0]
 8016118:	e070      	b.n	80161fc <report_realtime_status+0x80c>
        else if((report.overrides = !report.wco)) {
 801611a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801611e:	f003 0301 	and.w	r3, r3, #1
 8016122:	b2db      	uxtb	r3, r3
 8016124:	2b00      	cmp	r3, #0
 8016126:	bf0c      	ite	eq
 8016128:	2301      	moveq	r3, #1
 801612a:	2300      	movne	r3, #0
 801612c:	b2da      	uxtb	r2, r3
 801612e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016132:	f362 1386 	bfi	r3, r2, #6, #1
 8016136:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 801613a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801613e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8016142:	b2db      	uxtb	r3, r3
 8016144:	2b00      	cmp	r3, #0
 8016146:	d059      	beq.n	80161fc <report_realtime_status+0x80c>
            report.spindle = report.spindle || spindle_0_state.on;
 8016148:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801614c:	f003 0310 	and.w	r3, r3, #16
 8016150:	b2db      	uxtb	r3, r3
 8016152:	2b00      	cmp	r3, #0
 8016154:	d105      	bne.n	8016162 <report_realtime_status+0x772>
 8016156:	7d3b      	ldrb	r3, [r7, #20]
 8016158:	f003 0301 	and.w	r3, r3, #1
 801615c:	b2db      	uxtb	r3, r3
 801615e:	2b00      	cmp	r3, #0
 8016160:	d001      	beq.n	8016166 <report_realtime_status+0x776>
 8016162:	2301      	movs	r3, #1
 8016164:	e000      	b.n	8016168 <report_realtime_status+0x778>
 8016166:	2300      	movs	r3, #0
 8016168:	f003 0301 	and.w	r3, r3, #1
 801616c:	b2da      	uxtb	r2, r3
 801616e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016172:	f362 1304 	bfi	r3, r2, #4, #1
 8016176:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            report.coolant = report.coolant || hal.coolant.get_state().value != 0;
 801617a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801617e:	f003 0320 	and.w	r3, r3, #32
 8016182:	b2db      	uxtb	r3, r3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d106      	bne.n	8016196 <report_realtime_status+0x7a6>
 8016188:	4b0f      	ldr	r3, [pc, #60]	; (80161c8 <report_realtime_status+0x7d8>)
 801618a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801618c:	4798      	blx	r3
 801618e:	4603      	mov	r3, r0
 8016190:	b2db      	uxtb	r3, r3
 8016192:	2b00      	cmp	r3, #0
 8016194:	d001      	beq.n	801619a <report_realtime_status+0x7aa>
 8016196:	2301      	movs	r3, #1
 8016198:	e000      	b.n	801619c <report_realtime_status+0x7ac>
 801619a:	2300      	movs	r3, #0
 801619c:	f003 0301 	and.w	r3, r3, #1
 80161a0:	b2da      	uxtb	r2, r3
 80161a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80161a6:	f362 1345 	bfi	r3, r2, #5, #1
 80161aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            override_counter = state_get() & (STATE_HOMING|STATE_CYCLE|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 80161ae:	f006 fdb7 	bl	801cd20 <state_get>
 80161b2:	4603      	mov	r3, r0
 80161b4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d001      	beq.n	80161c0 <report_realtime_status+0x7d0>
 80161bc:	2213      	movs	r2, #19
 80161be:	e000      	b.n	80161c2 <report_realtime_status+0x7d2>
 80161c0:	2209      	movs	r2, #9
 80161c2:	4b0a      	ldr	r3, [pc, #40]	; (80161ec <report_realtime_status+0x7fc>)
 80161c4:	701a      	strb	r2, [r3, #0]
 80161c6:	e019      	b.n	80161fc <report_realtime_status+0x80c>
 80161c8:	200016a0 	.word	0x200016a0
 80161cc:	20001cb0 	.word	0x20001cb0
 80161d0:	0802d8cc 	.word	0x0802d8cc
 80161d4:	20001cf0 	.word	0x20001cf0
 80161d8:	20001520 	.word	0x20001520
 80161dc:	20001c7c 	.word	0x20001c7c
 80161e0:	20001c78 	.word	0x20001c78
 80161e4:	0802d8d0 	.word	0x0802d8d0
 80161e8:	20001cb5 	.word	0x20001cb5
 80161ec:	20001cb4 	.word	0x20001cb4
                                 ? (REPORT_OVERRIDE_REFRESH_BUSY_COUNT - 1) // Reset counter for slow refresh
                                 : (REPORT_OVERRIDE_REFRESH_IDLE_COUNT - 1);
        }
    } else
        report.overrides = Off;
 80161f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80161f4:	f36f 1386 	bfc	r3, #6, #1
 80161f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    if(report.value || gc_state.tool_change) {
 80161fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d105      	bne.n	801620e <report_realtime_status+0x81e>
 8016202:	4ba3      	ldr	r3, [pc, #652]	; (8016490 <report_realtime_status+0xaa0>)
 8016204:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8016208:	2b00      	cmp	r3, #0
 801620a:	f000 822e 	beq.w	801666a <report_realtime_status+0xc7a>

        if(report.wco) {
 801620e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8016212:	f003 0301 	and.w	r3, r3, #1
 8016216:	b2db      	uxtb	r3, r3
 8016218:	2b00      	cmp	r3, #0
 801621a:	d010      	beq.n	801623e <report_realtime_status+0x84e>
            hal.stream.write_all("|WCO:");
 801621c:	4b9d      	ldr	r3, [pc, #628]	; (8016494 <report_realtime_status+0xaa4>)
 801621e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016222:	489d      	ldr	r0, [pc, #628]	; (8016498 <report_realtime_status+0xaa8>)
 8016224:	4798      	blx	r3
            hal.stream.write_all(get_axis_values(wco));
 8016226:	4b9b      	ldr	r3, [pc, #620]	; (8016494 <report_realtime_status+0xaa4>)
 8016228:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 801622c:	4b9b      	ldr	r3, [pc, #620]	; (801649c <report_realtime_status+0xaac>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	f107 0218 	add.w	r2, r7, #24
 8016234:	4610      	mov	r0, r2
 8016236:	4798      	blx	r3
 8016238:	4603      	mov	r3, r0
 801623a:	4618      	mov	r0, r3
 801623c:	47a0      	blx	r4
        }

        if(report.gwco) {
 801623e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8016242:	f003 0302 	and.w	r3, r3, #2
 8016246:	b2db      	uxtb	r3, r3
 8016248:	2b00      	cmp	r3, #0
 801624a:	d00f      	beq.n	801626c <report_realtime_status+0x87c>
            hal.stream.write_all("|WCS:G");
 801624c:	4b91      	ldr	r3, [pc, #580]	; (8016494 <report_realtime_status+0xaa4>)
 801624e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016252:	4893      	ldr	r0, [pc, #588]	; (80164a0 <report_realtime_status+0xab0>)
 8016254:	4798      	blx	r3
            hal.stream.write_all(map_coord_system(gc_state.modal.coord_system.id));
 8016256:	4b8f      	ldr	r3, [pc, #572]	; (8016494 <report_realtime_status+0xaa4>)
 8016258:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 801625c:	4b8c      	ldr	r3, [pc, #560]	; (8016490 <report_realtime_status+0xaa0>)
 801625e:	7d1b      	ldrb	r3, [r3, #20]
 8016260:	4618      	mov	r0, r3
 8016262:	f7fd fc07 	bl	8013a74 <map_coord_system>
 8016266:	4603      	mov	r3, r0
 8016268:	4618      	mov	r0, r3
 801626a:	47a0      	blx	r4
        }

        if(report.overrides) {
 801626c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016274:	b2db      	uxtb	r3, r3
 8016276:	2b00      	cmp	r3, #0
 8016278:	d033      	beq.n	80162e2 <report_realtime_status+0x8f2>
            hal.stream.write_all(appendbuf(2, "|Ov:", uitoa((uint32_t)sys.override.feed_rate)));
 801627a:	4b86      	ldr	r3, [pc, #536]	; (8016494 <report_realtime_status+0xaa4>)
 801627c:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8016280:	4b88      	ldr	r3, [pc, #544]	; (80164a4 <report_realtime_status+0xab4>)
 8016282:	69db      	ldr	r3, [r3, #28]
 8016284:	4618      	mov	r0, r3
 8016286:	f7f9 fd49 	bl	800fd1c <uitoa>
 801628a:	4603      	mov	r3, r0
 801628c:	461a      	mov	r2, r3
 801628e:	4986      	ldr	r1, [pc, #536]	; (80164a8 <report_realtime_status+0xab8>)
 8016290:	2002      	movs	r0, #2
 8016292:	f7fd fbc1 	bl	8013a18 <appendbuf>
 8016296:	4603      	mov	r3, r0
 8016298:	4618      	mov	r0, r3
 801629a:	47a0      	blx	r4
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)sys.override.rapid_rate)));
 801629c:	4b7d      	ldr	r3, [pc, #500]	; (8016494 <report_realtime_status+0xaa4>)
 801629e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 80162a2:	4b80      	ldr	r3, [pc, #512]	; (80164a4 <report_realtime_status+0xab4>)
 80162a4:	6a1b      	ldr	r3, [r3, #32]
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7f9 fd38 	bl	800fd1c <uitoa>
 80162ac:	4603      	mov	r3, r0
 80162ae:	461a      	mov	r2, r3
 80162b0:	497e      	ldr	r1, [pc, #504]	; (80164ac <report_realtime_status+0xabc>)
 80162b2:	2002      	movs	r0, #2
 80162b4:	f7fd fbb0 	bl	8013a18 <appendbuf>
 80162b8:	4603      	mov	r3, r0
 80162ba:	4618      	mov	r0, r3
 80162bc:	47a0      	blx	r4
            hal.stream.write_all(appendbuf(2, ",", uitoa((uint32_t)spindle_0->param->override_pct)));
 80162be:	4b75      	ldr	r3, [pc, #468]	; (8016494 <report_realtime_status+0xaa4>)
 80162c0:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 80162c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	4618      	mov	r0, r3
 80162cc:	f7f9 fd26 	bl	800fd1c <uitoa>
 80162d0:	4603      	mov	r3, r0
 80162d2:	461a      	mov	r2, r3
 80162d4:	4975      	ldr	r1, [pc, #468]	; (80164ac <report_realtime_status+0xabc>)
 80162d6:	2002      	movs	r0, #2
 80162d8:	f7fd fb9e 	bl	8013a18 <appendbuf>
 80162dc:	4603      	mov	r3, r0
 80162de:	4618      	mov	r0, r3
 80162e0:	47a0      	blx	r4
        }

        if(report.spindle || report.coolant || report.tool || gc_state.tool_change) {
 80162e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80162e6:	f003 0310 	and.w	r3, r3, #16
 80162ea:	b2db      	uxtb	r3, r3
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d112      	bne.n	8016316 <report_realtime_status+0x926>
 80162f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80162f4:	f003 0320 	and.w	r3, r3, #32
 80162f8:	b2db      	uxtb	r3, r3
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d10b      	bne.n	8016316 <report_realtime_status+0x926>
 80162fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016302:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016306:	b2db      	uxtb	r3, r3
 8016308:	2b00      	cmp	r3, #0
 801630a:	d104      	bne.n	8016316 <report_realtime_status+0x926>
 801630c:	4b60      	ldr	r3, [pc, #384]	; (8016490 <report_realtime_status+0xaa0>)
 801630e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8016312:	2b00      	cmp	r3, #0
 8016314:	d05f      	beq.n	80163d6 <report_realtime_status+0x9e6>

            coolant_state_t cl_state = hal.coolant.get_state();
 8016316:	4b5f      	ldr	r3, [pc, #380]	; (8016494 <report_realtime_status+0xaa4>)
 8016318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801631a:	4798      	blx	r3
 801631c:	4603      	mov	r3, r0
 801631e:	723b      	strb	r3, [r7, #8]

            char *append = &buf[3];
 8016320:	4b63      	ldr	r3, [pc, #396]	; (80164b0 <report_realtime_status+0xac0>)
 8016322:	64fb      	str	r3, [r7, #76]	; 0x4c

            strcpy(buf, "|A:");
 8016324:	4b63      	ldr	r3, [pc, #396]	; (80164b4 <report_realtime_status+0xac4>)
 8016326:	4a64      	ldr	r2, [pc, #400]	; (80164b8 <report_realtime_status+0xac8>)
 8016328:	601a      	str	r2, [r3, #0]

            if (spindle_0_state.on)
 801632a:	7d3b      	ldrb	r3, [r7, #20]
 801632c:	f003 0301 	and.w	r3, r3, #1
 8016330:	b2db      	uxtb	r3, r3
 8016332:	2b00      	cmp	r3, #0
 8016334:	d00d      	beq.n	8016352 <report_realtime_status+0x962>

                *append++ = spindle_0_state.ccw ? 'C' : 'S';
 8016336:	7d3b      	ldrb	r3, [r7, #20]
 8016338:	f003 0302 	and.w	r3, r3, #2
 801633c:	b2db      	uxtb	r3, r3
 801633e:	2b00      	cmp	r3, #0
 8016340:	d001      	beq.n	8016346 <report_realtime_status+0x956>
 8016342:	2143      	movs	r1, #67	; 0x43
 8016344:	e000      	b.n	8016348 <report_realtime_status+0x958>
 8016346:	2153      	movs	r1, #83	; 0x53
 8016348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801634a:	1c5a      	adds	r2, r3, #1
 801634c:	64fa      	str	r2, [r7, #76]	; 0x4c
 801634e:	460a      	mov	r2, r1
 8016350:	701a      	strb	r2, [r3, #0]

#if COMPATIBILITY_LEVEL == 0
            if(spindle_0_state.encoder_error && hal.driver_cap.spindle_sync)
 8016352:	7d3b      	ldrb	r3, [r7, #20]
 8016354:	f003 0320 	and.w	r3, r3, #32
 8016358:	b2db      	uxtb	r3, r3
 801635a:	2b00      	cmp	r3, #0
 801635c:	d00c      	beq.n	8016378 <report_realtime_status+0x988>
 801635e:	4b4d      	ldr	r3, [pc, #308]	; (8016494 <report_realtime_status+0xaa4>)
 8016360:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 8016364:	f003 0301 	and.w	r3, r3, #1
 8016368:	b2db      	uxtb	r3, r3
 801636a:	2b00      	cmp	r3, #0
 801636c:	d004      	beq.n	8016378 <report_realtime_status+0x988>
                *append++ = 'E';
 801636e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016370:	1c5a      	adds	r2, r3, #1
 8016372:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016374:	2245      	movs	r2, #69	; 0x45
 8016376:	701a      	strb	r2, [r3, #0]
#endif

            if (cl_state.flood)
 8016378:	7a3b      	ldrb	r3, [r7, #8]
 801637a:	f003 0301 	and.w	r3, r3, #1
 801637e:	b2db      	uxtb	r3, r3
 8016380:	2b00      	cmp	r3, #0
 8016382:	d004      	beq.n	801638e <report_realtime_status+0x99e>
                *append++ = 'F';
 8016384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016386:	1c5a      	adds	r2, r3, #1
 8016388:	64fa      	str	r2, [r7, #76]	; 0x4c
 801638a:	2246      	movs	r2, #70	; 0x46
 801638c:	701a      	strb	r2, [r3, #0]

            if (cl_state.mist)
 801638e:	7a3b      	ldrb	r3, [r7, #8]
 8016390:	f003 0302 	and.w	r3, r3, #2
 8016394:	b2db      	uxtb	r3, r3
 8016396:	2b00      	cmp	r3, #0
 8016398:	d004      	beq.n	80163a4 <report_realtime_status+0x9b4>
                *append++ = 'M';
 801639a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801639c:	1c5a      	adds	r2, r3, #1
 801639e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80163a0:	224d      	movs	r2, #77	; 0x4d
 80163a2:	701a      	strb	r2, [r3, #0]

            if(gc_state.tool_change && !report.tool)
 80163a4:	4b3a      	ldr	r3, [pc, #232]	; (8016490 <report_realtime_status+0xaa0>)
 80163a6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d00b      	beq.n	80163c6 <report_realtime_status+0x9d6>
 80163ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80163b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80163b6:	b2db      	uxtb	r3, r3
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d104      	bne.n	80163c6 <report_realtime_status+0x9d6>
                *append++ = 'T';
 80163bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163be:	1c5a      	adds	r2, r3, #1
 80163c0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80163c2:	2254      	movs	r2, #84	; 0x54
 80163c4:	701a      	strb	r2, [r3, #0]

            *append = '\0';
 80163c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163c8:	2200      	movs	r2, #0
 80163ca:	701a      	strb	r2, [r3, #0]
            hal.stream.write_all(buf);
 80163cc:	4b31      	ldr	r3, [pc, #196]	; (8016494 <report_realtime_status+0xaa4>)
 80163ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80163d2:	4838      	ldr	r0, [pc, #224]	; (80164b4 <report_realtime_status+0xac4>)
 80163d4:	4798      	blx	r3
        }

        if(report.scaling) {
 80163d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80163da:	f003 0302 	and.w	r3, r3, #2
 80163de:	b2db      	uxtb	r3, r3
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d010      	beq.n	8016406 <report_realtime_status+0xa16>
            axis_signals_tostring(buf, gc_get_g51_state());
 80163e4:	f7ef f874 	bl	80054d0 <gc_get_g51_state>
 80163e8:	4603      	mov	r3, r0
 80163ea:	4619      	mov	r1, r3
 80163ec:	4831      	ldr	r0, [pc, #196]	; (80164b4 <report_realtime_status+0xac4>)
 80163ee:	f7fd fc89 	bl	8013d04 <axis_signals_tostring>
            hal.stream.write_all("|Sc:");
 80163f2:	4b28      	ldr	r3, [pc, #160]	; (8016494 <report_realtime_status+0xaa4>)
 80163f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80163f8:	4830      	ldr	r0, [pc, #192]	; (80164bc <report_realtime_status+0xacc>)
 80163fa:	4798      	blx	r3
            hal.stream.write_all(buf);
 80163fc:	4b25      	ldr	r3, [pc, #148]	; (8016494 <report_realtime_status+0xaa4>)
 80163fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016402:	482c      	ldr	r0, [pc, #176]	; (80164b4 <report_realtime_status+0xac4>)
 8016404:	4798      	blx	r3
        }

#if COMPATIBILITY_LEVEL <= 1
        if((report.all || report.mpg_mode) && settings.report_interval) {
 8016406:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801640a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801640e:	b2db      	uxtb	r3, r3
 8016410:	2b00      	cmp	r3, #0
 8016412:	d106      	bne.n	8016422 <report_realtime_status+0xa32>
 8016414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016418:	f003 0301 	and.w	r3, r3, #1
 801641c:	b2db      	uxtb	r3, r3
 801641e:	2b00      	cmp	r3, #0
 8016420:	d024      	beq.n	801646c <report_realtime_status+0xa7c>
 8016422:	4b27      	ldr	r3, [pc, #156]	; (80164c0 <report_realtime_status+0xad0>)
 8016424:	8a9b      	ldrh	r3, [r3, #20]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d020      	beq.n	801646c <report_realtime_status+0xa7c>
            hal.stream.write_all(sys.flags.auto_reporting ? "|AR:" : "|AR");
 801642a:	4b1a      	ldr	r3, [pc, #104]	; (8016494 <report_realtime_status+0xaa4>)
 801642c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016430:	4a1c      	ldr	r2, [pc, #112]	; (80164a4 <report_realtime_status+0xab4>)
 8016432:	7dd2      	ldrb	r2, [r2, #23]
 8016434:	f002 0202 	and.w	r2, r2, #2
 8016438:	b2d2      	uxtb	r2, r2
 801643a:	2a00      	cmp	r2, #0
 801643c:	d001      	beq.n	8016442 <report_realtime_status+0xa52>
 801643e:	4a21      	ldr	r2, [pc, #132]	; (80164c4 <report_realtime_status+0xad4>)
 8016440:	e000      	b.n	8016444 <report_realtime_status+0xa54>
 8016442:	4a21      	ldr	r2, [pc, #132]	; (80164c8 <report_realtime_status+0xad8>)
 8016444:	4610      	mov	r0, r2
 8016446:	4798      	blx	r3
            if(sys.flags.auto_reporting)
 8016448:	4b16      	ldr	r3, [pc, #88]	; (80164a4 <report_realtime_status+0xab4>)
 801644a:	7ddb      	ldrb	r3, [r3, #23]
 801644c:	f003 0302 	and.w	r3, r3, #2
 8016450:	b2db      	uxtb	r3, r3
 8016452:	2b00      	cmp	r3, #0
 8016454:	d00a      	beq.n	801646c <report_realtime_status+0xa7c>
                hal.stream.write_all(uitoa(settings.report_interval));
 8016456:	4b0f      	ldr	r3, [pc, #60]	; (8016494 <report_realtime_status+0xaa4>)
 8016458:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 801645c:	4b18      	ldr	r3, [pc, #96]	; (80164c0 <report_realtime_status+0xad0>)
 801645e:	8a9b      	ldrh	r3, [r3, #20]
 8016460:	4618      	mov	r0, r3
 8016462:	f7f9 fc5b 	bl	800fd1c <uitoa>
 8016466:	4603      	mov	r3, r0
 8016468:	4618      	mov	r0, r3
 801646a:	47a0      	blx	r4
        }
#endif

        if(report.mpg_mode)
 801646c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016470:	f003 0301 	and.w	r3, r3, #1
 8016474:	b2db      	uxtb	r3, r3
 8016476:	2b00      	cmp	r3, #0
 8016478:	d02d      	beq.n	80164d6 <report_realtime_status+0xae6>
            hal.stream.write_all(sys.mpg_mode ? "|MPG:1" : "|MPG:0");
 801647a:	4b06      	ldr	r3, [pc, #24]	; (8016494 <report_realtime_status+0xaa4>)
 801647c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016480:	4a08      	ldr	r2, [pc, #32]	; (80164a4 <report_realtime_status+0xab4>)
 8016482:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8016486:	2a00      	cmp	r2, #0
 8016488:	d022      	beq.n	80164d0 <report_realtime_status+0xae0>
 801648a:	4a10      	ldr	r2, [pc, #64]	; (80164cc <report_realtime_status+0xadc>)
 801648c:	e021      	b.n	80164d2 <report_realtime_status+0xae2>
 801648e:	bf00      	nop
 8016490:	2000137c 	.word	0x2000137c
 8016494:	200016a0 	.word	0x200016a0
 8016498:	0802d8d8 	.word	0x0802d8d8
 801649c:	20001ca8 	.word	0x20001ca8
 80164a0:	0802d8e0 	.word	0x0802d8e0
 80164a4:	20001520 	.word	0x20001520
 80164a8:	0802d8e8 	.word	0x0802d8e8
 80164ac:	0802d474 	.word	0x0802d474
 80164b0:	20001c7b 	.word	0x20001c7b
 80164b4:	20001c78 	.word	0x20001c78
 80164b8:	003a417c 	.word	0x003a417c
 80164bc:	0802d8f0 	.word	0x0802d8f0
 80164c0:	20001cf0 	.word	0x20001cf0
 80164c4:	0802d8f8 	.word	0x0802d8f8
 80164c8:	0802d900 	.word	0x0802d900
 80164cc:	0802d904 	.word	0x0802d904
 80164d0:	4a9a      	ldr	r2, [pc, #616]	; (801673c <report_realtime_status+0xd4c>)
 80164d2:	4610      	mov	r0, r2
 80164d4:	4798      	blx	r3

        if(report.homed && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)) {
 80164d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80164da:	f003 0304 	and.w	r3, r3, #4
 80164de:	b2db      	uxtb	r3, r3
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d04d      	beq.n	8016580 <report_realtime_status+0xb90>
 80164e4:	4b96      	ldr	r3, [pc, #600]	; (8016740 <report_realtime_status+0xd50>)
 80164e6:	7e9b      	ldrb	r3, [r3, #26]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d10f      	bne.n	801650c <report_realtime_status+0xb1c>
 80164ec:	4b95      	ldr	r3, [pc, #596]	; (8016744 <report_realtime_status+0xd54>)
 80164ee:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80164f2:	f003 0302 	and.w	r3, r3, #2
 80164f6:	b2db      	uxtb	r3, r3
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d107      	bne.n	801650c <report_realtime_status+0xb1c>
 80164fc:	4b91      	ldr	r3, [pc, #580]	; (8016744 <report_realtime_status+0xd54>)
 80164fe:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8016502:	f003 0310 	and.w	r3, r3, #16
 8016506:	b2db      	uxtb	r3, r3
 8016508:	2b00      	cmp	r3, #0
 801650a:	d039      	beq.n	8016580 <report_realtime_status+0xb90>
            axes_signals_t homing = {sys.homing.mask ? sys.homing.mask : AXES_BITMASK};
 801650c:	4b8c      	ldr	r3, [pc, #560]	; (8016740 <report_realtime_status+0xd50>)
 801650e:	7e9b      	ldrb	r3, [r3, #26]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d002      	beq.n	801651a <report_realtime_status+0xb2a>
 8016514:	4b8a      	ldr	r3, [pc, #552]	; (8016740 <report_realtime_status+0xd50>)
 8016516:	7e9b      	ldrb	r3, [r3, #26]
 8016518:	e000      	b.n	801651c <report_realtime_status+0xb2c>
 801651a:	2307      	movs	r3, #7
 801651c:	713b      	strb	r3, [r7, #4]
            hal.stream.write_all(appendbuf(2, "|H:", (homing.mask & sys.homed.mask) == homing.mask ? "1" : "0"));
 801651e:	4b8a      	ldr	r3, [pc, #552]	; (8016748 <report_realtime_status+0xd58>)
 8016520:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8016524:	793a      	ldrb	r2, [r7, #4]
 8016526:	4b86      	ldr	r3, [pc, #536]	; (8016740 <report_realtime_status+0xd50>)
 8016528:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801652c:	4013      	ands	r3, r2
 801652e:	b2da      	uxtb	r2, r3
 8016530:	793b      	ldrb	r3, [r7, #4]
 8016532:	429a      	cmp	r2, r3
 8016534:	d101      	bne.n	801653a <report_realtime_status+0xb4a>
 8016536:	4b85      	ldr	r3, [pc, #532]	; (801674c <report_realtime_status+0xd5c>)
 8016538:	e000      	b.n	801653c <report_realtime_status+0xb4c>
 801653a:	4b85      	ldr	r3, [pc, #532]	; (8016750 <report_realtime_status+0xd60>)
 801653c:	461a      	mov	r2, r3
 801653e:	4985      	ldr	r1, [pc, #532]	; (8016754 <report_realtime_status+0xd64>)
 8016540:	2002      	movs	r0, #2
 8016542:	f7fd fa69 	bl	8013a18 <appendbuf>
 8016546:	4603      	mov	r3, r0
 8016548:	4618      	mov	r0, r3
 801654a:	47a0      	blx	r4
            if(settings.homing.flags.single_axis_commands)
 801654c:	4b7d      	ldr	r3, [pc, #500]	; (8016744 <report_realtime_status+0xd54>)
 801654e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8016552:	f003 0302 	and.w	r3, r3, #2
 8016556:	b2db      	uxtb	r3, r3
 8016558:	2b00      	cmp	r3, #0
 801655a:	d011      	beq.n	8016580 <report_realtime_status+0xb90>
                hal.stream.write_all(appendbuf(2, ",", uitoa(sys.homed.mask)));
 801655c:	4b7a      	ldr	r3, [pc, #488]	; (8016748 <report_realtime_status+0xd58>)
 801655e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8016562:	4b77      	ldr	r3, [pc, #476]	; (8016740 <report_realtime_status+0xd50>)
 8016564:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8016568:	4618      	mov	r0, r3
 801656a:	f7f9 fbd7 	bl	800fd1c <uitoa>
 801656e:	4603      	mov	r3, r0
 8016570:	461a      	mov	r2, r3
 8016572:	4979      	ldr	r1, [pc, #484]	; (8016758 <report_realtime_status+0xd68>)
 8016574:	2002      	movs	r0, #2
 8016576:	f7fd fa4f 	bl	8013a18 <appendbuf>
 801657a:	4603      	mov	r3, r0
 801657c:	4618      	mov	r0, r3
 801657e:	47a0      	blx	r4
        }

        if(report.xmode && settings.mode == Mode_Lathe)
 8016580:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016584:	f003 0308 	and.w	r3, r3, #8
 8016588:	b2db      	uxtb	r3, r3
 801658a:	2b00      	cmp	r3, #0
 801658c:	d00f      	beq.n	80165ae <report_realtime_status+0xbbe>
 801658e:	4b6d      	ldr	r3, [pc, #436]	; (8016744 <report_realtime_status+0xd54>)
 8016590:	7e1b      	ldrb	r3, [r3, #24]
 8016592:	2b02      	cmp	r3, #2
 8016594:	d10b      	bne.n	80165ae <report_realtime_status+0xbbe>
            hal.stream.write_all(gc_state.modal.diameter_mode ? "|D:1" : "|D:0");
 8016596:	4b6c      	ldr	r3, [pc, #432]	; (8016748 <report_realtime_status+0xd58>)
 8016598:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801659c:	4a6f      	ldr	r2, [pc, #444]	; (801675c <report_realtime_status+0xd6c>)
 801659e:	7952      	ldrb	r2, [r2, #5]
 80165a0:	2a00      	cmp	r2, #0
 80165a2:	d001      	beq.n	80165a8 <report_realtime_status+0xbb8>
 80165a4:	4a6e      	ldr	r2, [pc, #440]	; (8016760 <report_realtime_status+0xd70>)
 80165a6:	e000      	b.n	80165aa <report_realtime_status+0xbba>
 80165a8:	4a6e      	ldr	r2, [pc, #440]	; (8016764 <report_realtime_status+0xd74>)
 80165aa:	4610      	mov	r0, r2
 80165ac:	4798      	blx	r3

        if(report.tool)
 80165ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80165b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80165b6:	b2db      	uxtb	r3, r3
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d012      	beq.n	80165e2 <report_realtime_status+0xbf2>
            hal.stream.write_all(appendbuf(2, "|T:", uitoa((uint32_t)gc_state.tool->tool_id)));
 80165bc:	4b62      	ldr	r3, [pc, #392]	; (8016748 <report_realtime_status+0xd58>)
 80165be:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 80165c2:	4b66      	ldr	r3, [pc, #408]	; (801675c <report_realtime_status+0xd6c>)
 80165c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80165c8:	691b      	ldr	r3, [r3, #16]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7f9 fba6 	bl	800fd1c <uitoa>
 80165d0:	4603      	mov	r3, r0
 80165d2:	461a      	mov	r2, r3
 80165d4:	4964      	ldr	r1, [pc, #400]	; (8016768 <report_realtime_status+0xd78>)
 80165d6:	2002      	movs	r0, #2
 80165d8:	f7fd fa1e 	bl	8013a18 <appendbuf>
 80165dc:	4603      	mov	r3, r0
 80165de:	4618      	mov	r0, r3
 80165e0:	47a0      	blx	r4

        if(report.tlo_reference)
 80165e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80165e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80165ea:	b2db      	uxtb	r3, r3
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d015      	beq.n	801661c <report_realtime_status+0xc2c>
            hal.stream.write_all(appendbuf(2, "|TLR:", uitoa(sys.tlo_reference_set.mask != 0)));
 80165f0:	4b55      	ldr	r3, [pc, #340]	; (8016748 <report_realtime_status+0xd58>)
 80165f2:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 80165f6:	4b52      	ldr	r3, [pc, #328]	; (8016740 <report_realtime_status+0xd50>)
 80165f8:	79db      	ldrb	r3, [r3, #7]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	bf14      	ite	ne
 80165fe:	2301      	movne	r3, #1
 8016600:	2300      	moveq	r3, #0
 8016602:	b2db      	uxtb	r3, r3
 8016604:	4618      	mov	r0, r3
 8016606:	f7f9 fb89 	bl	800fd1c <uitoa>
 801660a:	4603      	mov	r3, r0
 801660c:	461a      	mov	r2, r3
 801660e:	4957      	ldr	r1, [pc, #348]	; (801676c <report_realtime_status+0xd7c>)
 8016610:	2002      	movs	r0, #2
 8016612:	f7fd fa01 	bl	8013a18 <appendbuf>
 8016616:	4603      	mov	r3, r0
 8016618:	4618      	mov	r0, r3
 801661a:	47a0      	blx	r4

        if(report.m66result && sys.var5399 > -2) { // M66 result
 801661c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8016620:	f003 0308 	and.w	r3, r3, #8
 8016624:	b2db      	uxtb	r3, r3
 8016626:	2b00      	cmp	r3, #0
 8016628:	d01f      	beq.n	801666a <report_realtime_status+0xc7a>
 801662a:	4b45      	ldr	r3, [pc, #276]	; (8016740 <report_realtime_status+0xd50>)
 801662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016632:	db1a      	blt.n	801666a <report_realtime_status+0xc7a>
            if(sys.var5399 >= 0)
 8016634:	4b42      	ldr	r3, [pc, #264]	; (8016740 <report_realtime_status+0xd50>)
 8016636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016638:	2b00      	cmp	r3, #0
 801663a:	db11      	blt.n	8016660 <report_realtime_status+0xc70>
                hal.stream.write_all(appendbuf(2, "|In:", uitoa(sys.var5399)));
 801663c:	4b42      	ldr	r3, [pc, #264]	; (8016748 <report_realtime_status+0xd58>)
 801663e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8016642:	4b3f      	ldr	r3, [pc, #252]	; (8016740 <report_realtime_status+0xd50>)
 8016644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016646:	4618      	mov	r0, r3
 8016648:	f7f9 fb68 	bl	800fd1c <uitoa>
 801664c:	4603      	mov	r3, r0
 801664e:	461a      	mov	r2, r3
 8016650:	4947      	ldr	r1, [pc, #284]	; (8016770 <report_realtime_status+0xd80>)
 8016652:	2002      	movs	r0, #2
 8016654:	f7fd f9e0 	bl	8013a18 <appendbuf>
 8016658:	4603      	mov	r3, r0
 801665a:	4618      	mov	r0, r3
 801665c:	47a0      	blx	r4
 801665e:	e004      	b.n	801666a <report_realtime_status+0xc7a>
            else
                hal.stream.write_all("|In:-1");
 8016660:	4b39      	ldr	r3, [pc, #228]	; (8016748 <report_realtime_status+0xd58>)
 8016662:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016666:	4843      	ldr	r0, [pc, #268]	; (8016774 <report_realtime_status+0xd84>)
 8016668:	4798      	blx	r3
        }
    }

    if(grbl.on_realtime_report)
 801666a:	4b43      	ldr	r3, [pc, #268]	; (8016778 <report_realtime_status+0xd88>)
 801666c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801666e:	2b00      	cmp	r3, #0
 8016670:	d008      	beq.n	8016684 <report_realtime_status+0xc94>
        grbl.on_realtime_report(hal.stream.write_all, sys.report);
 8016672:	4b41      	ldr	r3, [pc, #260]	; (8016778 <report_realtime_status+0xd88>)
 8016674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016676:	4a34      	ldr	r2, [pc, #208]	; (8016748 <report_realtime_status+0xd58>)
 8016678:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 801667c:	4930      	ldr	r1, [pc, #192]	; (8016740 <report_realtime_status+0xd50>)
 801667e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8016680:	4610      	mov	r0, r2
 8016682:	4798      	blx	r3

#if COMPATIBILITY_LEVEL <= 1
    if(report.all) {
 8016684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016688:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801668c:	b2db      	uxtb	r3, r3
 801668e:	2b00      	cmp	r3, #0
 8016690:	d00f      	beq.n	80166b2 <report_realtime_status+0xcc2>
        hal.stream.write_all("|FW:grblHAL");
 8016692:	4b2d      	ldr	r3, [pc, #180]	; (8016748 <report_realtime_status+0xd58>)
 8016694:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016698:	4838      	ldr	r0, [pc, #224]	; (801677c <report_realtime_status+0xd8c>)
 801669a:	4798      	blx	r3
        if(sys.blocking_event)
 801669c:	4b28      	ldr	r3, [pc, #160]	; (8016740 <report_realtime_status+0xd50>)
 801669e:	795b      	ldrb	r3, [r3, #5]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	f000 80c3 	beq.w	801682c <report_realtime_status+0xe3c>
            hal.stream.write_all("|$C:1");
 80166a6:	4b28      	ldr	r3, [pc, #160]	; (8016748 <report_realtime_status+0xd58>)
 80166a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80166ac:	4834      	ldr	r0, [pc, #208]	; (8016780 <report_realtime_status+0xd90>)
 80166ae:	4798      	blx	r3
 80166b0:	e0bc      	b.n	801682c <report_realtime_status+0xe3c>
    } else
#endif

    if(settings.status_report.parser_state) {
 80166b2:	4b24      	ldr	r3, [pc, #144]	; (8016744 <report_realtime_status+0xd54>)
 80166b4:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80166b8:	f003 0302 	and.w	r3, r3, #2
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	2b00      	cmp	r3, #0
 80166c0:	f000 80b4 	beq.w	801682c <report_realtime_status+0xe3c>
        static tool_id_t tool_id;
        static float feed_rate, spindle_rpm;
        static gc_modal_t last_state;
        static bool g92_active;

        bool is_changed = feed_rate != gc_state.feed_rate || spindle_rpm != gc_state.spindle.rpm || tool_id != gc_state.tool->tool_id;
 80166c4:	4b25      	ldr	r3, [pc, #148]	; (801675c <report_realtime_status+0xd6c>)
 80166c6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80166ca:	4b2e      	ldr	r3, [pc, #184]	; (8016784 <report_realtime_status+0xd94>)
 80166cc:	edd3 7a00 	vldr	s15, [r3]
 80166d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80166d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d8:	d112      	bne.n	8016700 <report_realtime_status+0xd10>
 80166da:	4b20      	ldr	r3, [pc, #128]	; (801675c <report_realtime_status+0xd6c>)
 80166dc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80166e0:	4b29      	ldr	r3, [pc, #164]	; (8016788 <report_realtime_status+0xd98>)
 80166e2:	edd3 7a00 	vldr	s15, [r3]
 80166e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80166ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ee:	d107      	bne.n	8016700 <report_realtime_status+0xd10>
 80166f0:	4b1a      	ldr	r3, [pc, #104]	; (801675c <report_realtime_status+0xd6c>)
 80166f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80166f6:	691a      	ldr	r2, [r3, #16]
 80166f8:	4b24      	ldr	r3, [pc, #144]	; (801678c <report_realtime_status+0xd9c>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	429a      	cmp	r2, r3
 80166fe:	d001      	beq.n	8016704 <report_realtime_status+0xd14>
 8016700:	2301      	movs	r3, #1
 8016702:	e000      	b.n	8016706 <report_realtime_status+0xd16>
 8016704:	2300      	movs	r3, #0
 8016706:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801670a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801670e:	f003 0301 	and.w	r3, r3, #1
 8016712:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

        if(is_changed) {
 8016716:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801671a:	2b00      	cmp	r3, #0
 801671c:	d038      	beq.n	8016790 <report_realtime_status+0xda0>
            feed_rate = gc_state.feed_rate;
 801671e:	4b0f      	ldr	r3, [pc, #60]	; (801675c <report_realtime_status+0xd6c>)
 8016720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016722:	4a18      	ldr	r2, [pc, #96]	; (8016784 <report_realtime_status+0xd94>)
 8016724:	6013      	str	r3, [r2, #0]
            tool_id = gc_state.tool->tool_id;
 8016726:	4b0d      	ldr	r3, [pc, #52]	; (801675c <report_realtime_status+0xd6c>)
 8016728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801672c:	691b      	ldr	r3, [r3, #16]
 801672e:	4a17      	ldr	r2, [pc, #92]	; (801678c <report_realtime_status+0xd9c>)
 8016730:	6013      	str	r3, [r2, #0]
            spindle_rpm = gc_state.spindle.rpm;
 8016732:	4b0a      	ldr	r3, [pc, #40]	; (801675c <report_realtime_status+0xd6c>)
 8016734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016736:	4a14      	ldr	r2, [pc, #80]	; (8016788 <report_realtime_status+0xd98>)
 8016738:	6013      	str	r3, [r2, #0]
 801673a:	e060      	b.n	80167fe <report_realtime_status+0xe0e>
 801673c:	0802d90c 	.word	0x0802d90c
 8016740:	20001520 	.word	0x20001520
 8016744:	20001cf0 	.word	0x20001cf0
 8016748:	200016a0 	.word	0x200016a0
 801674c:	0802d914 	.word	0x0802d914
 8016750:	0802d6f8 	.word	0x0802d6f8
 8016754:	0802d918 	.word	0x0802d918
 8016758:	0802d474 	.word	0x0802d474
 801675c:	2000137c 	.word	0x2000137c
 8016760:	0802d91c 	.word	0x0802d91c
 8016764:	0802d924 	.word	0x0802d924
 8016768:	0802d92c 	.word	0x0802d92c
 801676c:	0802d930 	.word	0x0802d930
 8016770:	0802d938 	.word	0x0802d938
 8016774:	0802d940 	.word	0x0802d940
 8016778:	200015b8 	.word	0x200015b8
 801677c:	0802d948 	.word	0x0802d948
 8016780:	0802d954 	.word	0x0802d954
 8016784:	20001cb8 	.word	0x20001cb8
 8016788:	20001cbc 	.word	0x20001cbc
 801678c:	20001cc0 	.word	0x20001cc0
        } else if ((is_changed = g92_active != is_g92_active()))
 8016790:	f7fe f956 	bl	8014a40 <is_g92_active>
 8016794:	4603      	mov	r3, r0
 8016796:	461a      	mov	r2, r3
 8016798:	4b32      	ldr	r3, [pc, #200]	; (8016864 <report_realtime_status+0xe74>)
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	429a      	cmp	r2, r3
 801679e:	bf14      	ite	ne
 80167a0:	2301      	movne	r3, #1
 80167a2:	2300      	moveq	r3, #0
 80167a4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80167a8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d00f      	beq.n	80167d0 <report_realtime_status+0xde0>
            g92_active = !g92_active;
 80167b0:	4b2c      	ldr	r3, [pc, #176]	; (8016864 <report_realtime_status+0xe74>)
 80167b2:	781b      	ldrb	r3, [r3, #0]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	bf14      	ite	ne
 80167b8:	2301      	movne	r3, #1
 80167ba:	2300      	moveq	r3, #0
 80167bc:	b2db      	uxtb	r3, r3
 80167be:	f083 0301 	eor.w	r3, r3, #1
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	f003 0301 	and.w	r3, r3, #1
 80167c8:	b2da      	uxtb	r2, r3
 80167ca:	4b26      	ldr	r3, [pc, #152]	; (8016864 <report_realtime_status+0xe74>)
 80167cc:	701a      	strb	r2, [r3, #0]
 80167ce:	e016      	b.n	80167fe <report_realtime_status+0xe0e>
        else if(memcmp(&last_state, &gc_state.modal, sizeof(gc_modal_t))) {
 80167d0:	2228      	movs	r2, #40	; 0x28
 80167d2:	4925      	ldr	r1, [pc, #148]	; (8016868 <report_realtime_status+0xe78>)
 80167d4:	4825      	ldr	r0, [pc, #148]	; (801686c <report_realtime_status+0xe7c>)
 80167d6:	f00f fb22 	bl	8025e1e <memcmp>
 80167da:	4603      	mov	r3, r0
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d00e      	beq.n	80167fe <report_realtime_status+0xe0e>
            last_state = gc_state.modal;
 80167e0:	4a22      	ldr	r2, [pc, #136]	; (801686c <report_realtime_status+0xe7c>)
 80167e2:	4b21      	ldr	r3, [pc, #132]	; (8016868 <report_realtime_status+0xe78>)
 80167e4:	4614      	mov	r4, r2
 80167e6:	461d      	mov	r5, r3
 80167e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80167ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80167ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80167f4:	e884 0003 	stmia.w	r4, {r0, r1}
            is_changed = true;
 80167f8:	2301      	movs	r3, #1
 80167fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }

        if (is_changed)
 80167fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8016802:	2b00      	cmp	r3, #0
 8016804:	d005      	beq.n	8016812 <report_realtime_status+0xe22>
            system_set_exec_state_flag(EXEC_GCODE_REPORT);
 8016806:	4b1a      	ldr	r3, [pc, #104]	; (8016870 <report_realtime_status+0xe80>)
 8016808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801680a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801680e:	4819      	ldr	r0, [pc, #100]	; (8016874 <report_realtime_status+0xe84>)
 8016810:	4798      	blx	r3

        if(report.tool_offset)
 8016812:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8016816:	f003 0304 	and.w	r3, r3, #4
 801681a:	b2db      	uxtb	r3, r3
 801681c:	2b00      	cmp	r3, #0
 801681e:	d005      	beq.n	801682c <report_realtime_status+0xe3c>
            system_set_exec_state_flag(EXEC_TLO_REPORT);
 8016820:	4b13      	ldr	r3, [pc, #76]	; (8016870 <report_realtime_status+0xe80>)
 8016822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8016828:	4812      	ldr	r0, [pc, #72]	; (8016874 <report_realtime_status+0xe84>)
 801682a:	4798      	blx	r3
    }

    hal.stream.write_all(">" ASCII_EOL);
 801682c:	4b10      	ldr	r3, [pc, #64]	; (8016870 <report_realtime_status+0xe80>)
 801682e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016832:	4811      	ldr	r0, [pc, #68]	; (8016878 <report_realtime_status+0xe88>)
 8016834:	4798      	blx	r3

    system_add_rt_report(Report_ClearAll);
 8016836:	2000      	movs	r0, #0
 8016838:	f00a fec6 	bl	80215c8 <system_add_rt_report>
    if(settings.status_report.work_coord_offset && wco_counter == 0)
 801683c:	4b0f      	ldr	r3, [pc, #60]	; (801687c <report_realtime_status+0xe8c>)
 801683e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8016842:	f003 0320 	and.w	r3, r3, #32
 8016846:	b2db      	uxtb	r3, r3
 8016848:	2b00      	cmp	r3, #0
 801684a:	d007      	beq.n	801685c <report_realtime_status+0xe6c>
 801684c:	4b0c      	ldr	r3, [pc, #48]	; (8016880 <report_realtime_status+0xe90>)
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d103      	bne.n	801685c <report_realtime_status+0xe6c>
        system_add_rt_report(Report_WCO); // Set to report on next request
 8016854:	f44f 7080 	mov.w	r0, #256	; 0x100
 8016858:	f00a feb6 	bl	80215c8 <system_add_rt_report>
}
 801685c:	bf00      	nop
 801685e:	3758      	adds	r7, #88	; 0x58
 8016860:	46bd      	mov	sp, r7
 8016862:	bdb0      	pop	{r4, r5, r7, pc}
 8016864:	20001cc4 	.word	0x20001cc4
 8016868:	2000137c 	.word	0x2000137c
 801686c:	20001cc8 	.word	0x20001cc8
 8016870:	200016a0 	.word	0x200016a0
 8016874:	20001568 	.word	0x20001568
 8016878:	0802d95c 	.word	0x0802d95c
 801687c:	20001cf0 	.word	0x20001cf0
 8016880:	20001cb5 	.word	0x20001cb5

08016884 <report_bitfield>:

static void report_bitfield (const char *format, bool bitmap)
{
 8016884:	b590      	push	{r4, r7, lr}
 8016886:	b087      	sub	sp, #28
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
 801688c:	460b      	mov	r3, r1
 801688e:	70fb      	strb	r3, [r7, #3]
    char *s;
    uint_fast8_t bit = 0;
 8016890:	2300      	movs	r3, #0
 8016892:	617b      	str	r3, [r7, #20]
    uint_fast16_t val = 1;
 8016894:	2301      	movs	r3, #1
 8016896:	613b      	str	r3, [r7, #16]

    // Copy string from Flash to RAM, strtok cannot be used unless doing so.
    if((s = (char *)malloc(strlen(format) + 1))) {
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f7e9 fcf7 	bl	800028c <strlen>
 801689e:	4603      	mov	r3, r0
 80168a0:	3301      	adds	r3, #1
 80168a2:	4618      	mov	r0, r3
 80168a4:	f00e ff68 	bl	8025778 <malloc>
 80168a8:	4603      	mov	r3, r0
 80168aa:	60bb      	str	r3, [r7, #8]
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d058      	beq.n	8016964 <report_bitfield+0xe0>

        strcpy(s, format);
 80168b2:	6879      	ldr	r1, [r7, #4]
 80168b4:	68b8      	ldr	r0, [r7, #8]
 80168b6:	f00f fc17 	bl	80260e8 <strcpy>
        char *element = strtok(s, ",");
 80168ba:	492c      	ldr	r1, [pc, #176]	; (801696c <report_bitfield+0xe8>)
 80168bc:	68b8      	ldr	r0, [r7, #8]
 80168be:	f00f fb1f 	bl	8025f00 <strtok>
 80168c2:	60f8      	str	r0, [r7, #12]

        while(element) {
 80168c4:	e048      	b.n	8016958 <report_bitfield+0xd4>
            if(strcmp(element, "N/A")) {
 80168c6:	492a      	ldr	r1, [pc, #168]	; (8016970 <report_bitfield+0xec>)
 80168c8:	68f8      	ldr	r0, [r7, #12]
 80168ca:	f7e9 fcd5 	bl	8000278 <strcmp>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d036      	beq.n	8016942 <report_bitfield+0xbe>
                hal.stream.write(ASCII_EOL);
 80168d4:	4b27      	ldr	r3, [pc, #156]	; (8016974 <report_bitfield+0xf0>)
 80168d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80168da:	4827      	ldr	r0, [pc, #156]	; (8016978 <report_bitfield+0xf4>)
 80168dc:	4798      	blx	r3
                hal.stream.write("    ");
 80168de:	4b25      	ldr	r3, [pc, #148]	; (8016974 <report_bitfield+0xf0>)
 80168e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80168e4:	4825      	ldr	r0, [pc, #148]	; (801697c <report_bitfield+0xf8>)
 80168e6:	4798      	blx	r3
                hal.stream.write(uitoa(bit));
 80168e8:	4b22      	ldr	r3, [pc, #136]	; (8016974 <report_bitfield+0xf0>)
 80168ea:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80168ee:	6978      	ldr	r0, [r7, #20]
 80168f0:	f7f9 fa14 	bl	800fd1c <uitoa>
 80168f4:	4603      	mov	r3, r0
 80168f6:	4618      	mov	r0, r3
 80168f8:	47a0      	blx	r4
                hal.stream.write(" - ");
 80168fa:	4b1e      	ldr	r3, [pc, #120]	; (8016974 <report_bitfield+0xf0>)
 80168fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016900:	481f      	ldr	r0, [pc, #124]	; (8016980 <report_bitfield+0xfc>)
 8016902:	4798      	blx	r3
                if(*element)
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d004      	beq.n	8016916 <report_bitfield+0x92>
                hal.stream.write(element);
 801690c:	4b19      	ldr	r3, [pc, #100]	; (8016974 <report_bitfield+0xf0>)
 801690e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016912:	68f8      	ldr	r0, [r7, #12]
 8016914:	4798      	blx	r3
                if(bitmap) {
 8016916:	78fb      	ldrb	r3, [r7, #3]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d012      	beq.n	8016942 <report_bitfield+0xbe>
                    hal.stream.write(" (");
 801691c:	4b15      	ldr	r3, [pc, #84]	; (8016974 <report_bitfield+0xf0>)
 801691e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016922:	4818      	ldr	r0, [pc, #96]	; (8016984 <report_bitfield+0x100>)
 8016924:	4798      	blx	r3
                    hal.stream.write(uitoa(val));
 8016926:	4b13      	ldr	r3, [pc, #76]	; (8016974 <report_bitfield+0xf0>)
 8016928:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801692c:	6938      	ldr	r0, [r7, #16]
 801692e:	f7f9 f9f5 	bl	800fd1c <uitoa>
 8016932:	4603      	mov	r3, r0
 8016934:	4618      	mov	r0, r3
 8016936:	47a0      	blx	r4
                    hal.stream.write(")");
 8016938:	4b0e      	ldr	r3, [pc, #56]	; (8016974 <report_bitfield+0xf0>)
 801693a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801693e:	4812      	ldr	r0, [pc, #72]	; (8016988 <report_bitfield+0x104>)
 8016940:	4798      	blx	r3
                }
            }
            bit++;
 8016942:	697b      	ldr	r3, [r7, #20]
 8016944:	3301      	adds	r3, #1
 8016946:	617b      	str	r3, [r7, #20]
            val <<= 1;
 8016948:	693b      	ldr	r3, [r7, #16]
 801694a:	005b      	lsls	r3, r3, #1
 801694c:	613b      	str	r3, [r7, #16]
            element = strtok(NULL, ",");
 801694e:	4907      	ldr	r1, [pc, #28]	; (801696c <report_bitfield+0xe8>)
 8016950:	2000      	movs	r0, #0
 8016952:	f00f fad5 	bl	8025f00 <strtok>
 8016956:	60f8      	str	r0, [r7, #12]
        while(element) {
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d1b3      	bne.n	80168c6 <report_bitfield+0x42>
        }

        free(s);
 801695e:	68b8      	ldr	r0, [r7, #8]
 8016960:	f00e ff12 	bl	8025788 <free>
    }
}
 8016964:	bf00      	nop
 8016966:	371c      	adds	r7, #28
 8016968:	46bd      	mov	sp, r7
 801696a:	bd90      	pop	{r4, r7, pc}
 801696c:	0802d474 	.word	0x0802d474
 8016970:	0802d960 	.word	0x0802d960
 8016974:	200016a0 	.word	0x200016a0
 8016978:	0802d480 	.word	0x0802d480
 801697c:	0802d964 	.word	0x0802d964
 8016980:	0802d96c 	.word	0x0802d96c
 8016984:	0802d970 	.word	0x0802d970
 8016988:	0802d974 	.word	0x0802d974

0801698c <write_quoted>:

static void write_quoted (const char *s, const char *sep)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	6039      	str	r1, [r7, #0]
    hal.stream.write("\"");
 8016996:	4b0d      	ldr	r3, [pc, #52]	; (80169cc <write_quoted+0x40>)
 8016998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801699c:	480c      	ldr	r0, [pc, #48]	; (80169d0 <write_quoted+0x44>)
 801699e:	4798      	blx	r3
    hal.stream.write(s); // TODO: escape double quoutes
 80169a0:	4b0a      	ldr	r3, [pc, #40]	; (80169cc <write_quoted+0x40>)
 80169a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	4798      	blx	r3
    hal.stream.write("\"");
 80169aa:	4b08      	ldr	r3, [pc, #32]	; (80169cc <write_quoted+0x40>)
 80169ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80169b0:	4807      	ldr	r0, [pc, #28]	; (80169d0 <write_quoted+0x44>)
 80169b2:	4798      	blx	r3
    if(sep)
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d004      	beq.n	80169c4 <write_quoted+0x38>
        hal.stream.write(sep);
 80169ba:	4b04      	ldr	r3, [pc, #16]	; (80169cc <write_quoted+0x40>)
 80169bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80169c0:	6838      	ldr	r0, [r7, #0]
 80169c2:	4798      	blx	r3
}
 80169c4:	bf00      	nop
 80169c6:	3708      	adds	r7, #8
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	200016a0 	.word	0x200016a0
 80169d0:	0802d978 	.word	0x0802d978

080169d4 <write_name>:

static void write_name (const char *s, uint_fast8_t offset)
{
 80169d4:	b590      	push	{r4, r7, lr}
 80169d6:	b085      	sub	sp, #20
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	6039      	str	r1, [r7, #0]
    char *q = hal.stream.write_n ? strchr(s, '?') : NULL;
 80169de:	4b1d      	ldr	r3, [pc, #116]	; (8016a54 <write_name+0x80>)
 80169e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d005      	beq.n	80169f4 <write_name+0x20>
 80169e8:	213f      	movs	r1, #63	; 0x3f
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f00f fa3e 	bl	8025e6c <strchr>
 80169f0:	4603      	mov	r3, r0
 80169f2:	e000      	b.n	80169f6 <write_name+0x22>
 80169f4:	2300      	movs	r3, #0
 80169f6:	60fb      	str	r3, [r7, #12]

    if(q) {
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d020      	beq.n	8016a40 <write_name+0x6c>
        if(q != s)
 80169fe:	68fa      	ldr	r2, [r7, #12]
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d009      	beq.n	8016a1a <write_name+0x46>
            hal.stream.write_n(s, q - s);
 8016a06:	4b13      	ldr	r3, [pc, #76]	; (8016a54 <write_name+0x80>)
 8016a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a0c:	68f9      	ldr	r1, [r7, #12]
 8016a0e:	687a      	ldr	r2, [r7, #4]
 8016a10:	1a8a      	subs	r2, r1, r2
 8016a12:	b292      	uxth	r2, r2
 8016a14:	4611      	mov	r1, r2
 8016a16:	6878      	ldr	r0, [r7, #4]
 8016a18:	4798      	blx	r3
        hal.stream.write(uitoa(offset + 1));
 8016a1a:	4b0e      	ldr	r3, [pc, #56]	; (8016a54 <write_name+0x80>)
 8016a1c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8016a20:	683b      	ldr	r3, [r7, #0]
 8016a22:	3301      	adds	r3, #1
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7f9 f979 	bl	800fd1c <uitoa>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	47a0      	blx	r4
        hal.stream.write(q + 1);
 8016a30:	4b08      	ldr	r3, [pc, #32]	; (8016a54 <write_name+0x80>)
 8016a32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016a36:	68fa      	ldr	r2, [r7, #12]
 8016a38:	3201      	adds	r2, #1
 8016a3a:	4610      	mov	r0, r2
 8016a3c:	4798      	blx	r3
    } else
        hal.stream.write(s);
}
 8016a3e:	e004      	b.n	8016a4a <write_name+0x76>
        hal.stream.write(s);
 8016a40:	4b04      	ldr	r3, [pc, #16]	; (8016a54 <write_name+0x80>)
 8016a42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	4798      	blx	r3
}
 8016a4a:	bf00      	nop
 8016a4c:	3714      	adds	r7, #20
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd90      	pop	{r4, r7, pc}
 8016a52:	bf00      	nop
 8016a54:	200016a0 	.word	0x200016a0

08016a58 <report_settings_detail>:

static void report_settings_detail (settings_format_t format, const setting_detail_t *setting, uint_fast8_t offset)
{
 8016a58:	b590      	push	{r4, r7, lr}
 8016a5a:	b08b      	sub	sp, #44	; 0x2c
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	4603      	mov	r3, r0
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	607a      	str	r2, [r7, #4]
 8016a64:	73fb      	strb	r3, [r7, #15]
    uint_fast8_t suboffset = setting->flags.subgroups ? offset / setting->flags.increment : offset;
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016a6c:	f003 0304 	and.w	r3, r3, #4
 8016a70:	b2db      	uxtb	r3, r3
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00a      	beq.n	8016a8c <report_settings_detail+0x34>
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016a7c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8016a80:	b2db      	uxtb	r3, r3
 8016a82:	461a      	mov	r2, r3
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a8a:	e000      	b.n	8016a8e <report_settings_detail+0x36>
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	61fb      	str	r3, [r7, #28]

    switch(format)
 8016a90:	7bfb      	ldrb	r3, [r7, #15]
 8016a92:	2b03      	cmp	r3, #3
 8016a94:	f200 8428 	bhi.w	80172e8 <report_settings_detail+0x890>
 8016a98:	a201      	add	r2, pc, #4	; (adr r2, 8016aa0 <report_settings_detail+0x48>)
 8016a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a9e:	bf00      	nop
 8016aa0:	08016d9d 	.word	0x08016d9d
 8016aa4:	08016ab1 	.word	0x08016ab1
 8016aa8:	08016f69 	.word	0x08016f69
 8016aac:	08017005 	.word	0x08017005
    {
        case SettingsFormat_HumanReadable:
            hal.stream.write(ASCII_EOL "$");
 8016ab0:	4b86      	ldr	r3, [pc, #536]	; (8016ccc <report_settings_detail+0x274>)
 8016ab2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016ab6:	4886      	ldr	r0, [pc, #536]	; (8016cd0 <report_settings_detail+0x278>)
 8016ab8:	4798      	blx	r3
            hal.stream.write(uitoa(setting->id + offset));
 8016aba:	4b84      	ldr	r3, [pc, #528]	; (8016ccc <report_settings_detail+0x274>)
 8016abc:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	881b      	ldrh	r3, [r3, #0]
 8016ac4:	461a      	mov	r2, r3
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	4413      	add	r3, r2
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7f9 f926 	bl	800fd1c <uitoa>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	47a0      	blx	r4
            hal.stream.write(": ");
 8016ad6:	4b7d      	ldr	r3, [pc, #500]	; (8016ccc <report_settings_detail+0x274>)
 8016ad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016adc:	487d      	ldr	r0, [pc, #500]	; (8016cd4 <report_settings_detail+0x27c>)
 8016ade:	4798      	blx	r3
            if(setting->group == Group_Axis0)
 8016ae0:	68bb      	ldr	r3, [r7, #8]
 8016ae2:	789b      	ldrb	r3, [r3, #2]
 8016ae4:	2b2b      	cmp	r3, #43	; 0x2b
 8016ae6:	d108      	bne.n	8016afa <report_settings_detail+0xa2>
                hal.stream.write(axis_letter[offset]);
 8016ae8:	4b78      	ldr	r3, [pc, #480]	; (8016ccc <report_settings_detail+0x274>)
 8016aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016aee:	497a      	ldr	r1, [pc, #488]	; (8016cd8 <report_settings_detail+0x280>)
 8016af0:	687a      	ldr	r2, [r7, #4]
 8016af2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016af6:	4610      	mov	r0, r2
 8016af8:	4798      	blx	r3
            write_name(setting->name, suboffset);
 8016afa:	68bb      	ldr	r3, [r7, #8]
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	69f9      	ldr	r1, [r7, #28]
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7ff ff67 	bl	80169d4 <write_name>

            switch(setting_datatype_to_external(setting->datatype)) {
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	7b1b      	ldrb	r3, [r3, #12]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f004 f8a9 	bl	801ac62 <setting_datatype_to_external>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2b09      	cmp	r3, #9
 8016b14:	d84c      	bhi.n	8016bb0 <report_settings_detail+0x158>
 8016b16:	a201      	add	r2, pc, #4	; (adr r2, 8016b1c <report_settings_detail+0xc4>)
 8016b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b1c:	08016b51 	.word	0x08016b51
 8016b20:	08016b5d 	.word	0x08016b5d
 8016b24:	08016b75 	.word	0x08016b75
 8016b28:	08016b8d 	.word	0x08016b8d
 8016b2c:	08016b45 	.word	0x08016b45
 8016b30:	08016bb1 	.word	0x08016bb1
 8016b34:	08016bb1 	.word	0x08016bb1
 8016b38:	08016bb1 	.word	0x08016bb1
 8016b3c:	08016bb1 	.word	0x08016bb1
 8016b40:	08016ba5 	.word	0x08016ba5

                case Format_AxisMask:
                    hal.stream.write(" as axismask");
 8016b44:	4b61      	ldr	r3, [pc, #388]	; (8016ccc <report_settings_detail+0x274>)
 8016b46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016b4a:	4864      	ldr	r0, [pc, #400]	; (8016cdc <report_settings_detail+0x284>)
 8016b4c:	4798      	blx	r3
                    break;
 8016b4e:	e040      	b.n	8016bd2 <report_settings_detail+0x17a>

                case Format_Bool:
                    hal.stream.write(" as boolean");
 8016b50:	4b5e      	ldr	r3, [pc, #376]	; (8016ccc <report_settings_detail+0x274>)
 8016b52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016b56:	4862      	ldr	r0, [pc, #392]	; (8016ce0 <report_settings_detail+0x288>)
 8016b58:	4798      	blx	r3
                    break;
 8016b5a:	e03a      	b.n	8016bd2 <report_settings_detail+0x17a>

                case Format_Bitfield:
                    hal.stream.write(" as bitfield:");
 8016b5c:	4b5b      	ldr	r3, [pc, #364]	; (8016ccc <report_settings_detail+0x274>)
 8016b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016b62:	4860      	ldr	r0, [pc, #384]	; (8016ce4 <report_settings_detail+0x28c>)
 8016b64:	4798      	blx	r3
                    report_bitfield(setting->format, true);
 8016b66:	68bb      	ldr	r3, [r7, #8]
 8016b68:	691b      	ldr	r3, [r3, #16]
 8016b6a:	2101      	movs	r1, #1
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7ff fe89 	bl	8016884 <report_bitfield>
                    break;
 8016b72:	e02e      	b.n	8016bd2 <report_settings_detail+0x17a>

                case Format_XBitfield:
                    hal.stream.write(" as bitfield where setting bit 0 enables the rest:");
 8016b74:	4b55      	ldr	r3, [pc, #340]	; (8016ccc <report_settings_detail+0x274>)
 8016b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016b7a:	485b      	ldr	r0, [pc, #364]	; (8016ce8 <report_settings_detail+0x290>)
 8016b7c:	4798      	blx	r3
                    report_bitfield(setting->format, true);
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	691b      	ldr	r3, [r3, #16]
 8016b82:	2101      	movs	r1, #1
 8016b84:	4618      	mov	r0, r3
 8016b86:	f7ff fe7d 	bl	8016884 <report_bitfield>
                    break;
 8016b8a:	e022      	b.n	8016bd2 <report_settings_detail+0x17a>

                case Format_RadioButtons:
                    hal.stream.write(":");
 8016b8c:	4b4f      	ldr	r3, [pc, #316]	; (8016ccc <report_settings_detail+0x274>)
 8016b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016b92:	4856      	ldr	r0, [pc, #344]	; (8016cec <report_settings_detail+0x294>)
 8016b94:	4798      	blx	r3
                    report_bitfield(setting->format, false);
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	691b      	ldr	r3, [r3, #16]
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f7ff fe71 	bl	8016884 <report_bitfield>
                    break;
 8016ba2:	e016      	b.n	8016bd2 <report_settings_detail+0x17a>

                case Format_IPv4:
                    hal.stream.write(" as IP address");
 8016ba4:	4b49      	ldr	r3, [pc, #292]	; (8016ccc <report_settings_detail+0x274>)
 8016ba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016baa:	4851      	ldr	r0, [pc, #324]	; (8016cf0 <report_settings_detail+0x298>)
 8016bac:	4798      	blx	r3
                    break;
 8016bae:	e010      	b.n	8016bd2 <report_settings_detail+0x17a>

                default:
                    if(setting->unit) {
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	689b      	ldr	r3, [r3, #8]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d00b      	beq.n	8016bd0 <report_settings_detail+0x178>
                        hal.stream.write(" in ");
 8016bb8:	4b44      	ldr	r3, [pc, #272]	; (8016ccc <report_settings_detail+0x274>)
 8016bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016bbe:	484d      	ldr	r0, [pc, #308]	; (8016cf4 <report_settings_detail+0x29c>)
 8016bc0:	4798      	blx	r3
                        hal.stream.write(setting->unit);
 8016bc2:	4b42      	ldr	r3, [pc, #264]	; (8016ccc <report_settings_detail+0x274>)
 8016bc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016bc8:	68ba      	ldr	r2, [r7, #8]
 8016bca:	6892      	ldr	r2, [r2, #8]
 8016bcc:	4610      	mov	r0, r2
 8016bce:	4798      	blx	r3
                    }
                    break;
 8016bd0:	bf00      	nop
            }

            if(setting->min_value && setting->max_value) {
 8016bd2:	68bb      	ldr	r3, [r7, #8]
 8016bd4:	695b      	ldr	r3, [r3, #20]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d01c      	beq.n	8016c14 <report_settings_detail+0x1bc>
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	699b      	ldr	r3, [r3, #24]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d018      	beq.n	8016c14 <report_settings_detail+0x1bc>
                hal.stream.write(", range: ");
 8016be2:	4b3a      	ldr	r3, [pc, #232]	; (8016ccc <report_settings_detail+0x274>)
 8016be4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016be8:	4843      	ldr	r0, [pc, #268]	; (8016cf8 <report_settings_detail+0x2a0>)
 8016bea:	4798      	blx	r3
                hal.stream.write(setting->min_value);
 8016bec:	4b37      	ldr	r3, [pc, #220]	; (8016ccc <report_settings_detail+0x274>)
 8016bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016bf2:	68ba      	ldr	r2, [r7, #8]
 8016bf4:	6952      	ldr	r2, [r2, #20]
 8016bf6:	4610      	mov	r0, r2
 8016bf8:	4798      	blx	r3
                hal.stream.write(" - ");
 8016bfa:	4b34      	ldr	r3, [pc, #208]	; (8016ccc <report_settings_detail+0x274>)
 8016bfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016c00:	483e      	ldr	r0, [pc, #248]	; (8016cfc <report_settings_detail+0x2a4>)
 8016c02:	4798      	blx	r3
                hal.stream.write(setting->max_value);
 8016c04:	4b31      	ldr	r3, [pc, #196]	; (8016ccc <report_settings_detail+0x274>)
 8016c06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016c0a:	68ba      	ldr	r2, [r7, #8]
 8016c0c:	6992      	ldr	r2, [r2, #24]
 8016c0e:	4610      	mov	r0, r2
 8016c10:	4798      	blx	r3
 8016c12:	e028      	b.n	8016c66 <report_settings_detail+0x20e>
            } else if(!setting_is_list(setting)) {
 8016c14:	68b8      	ldr	r0, [r7, #8]
 8016c16:	f004 f838 	bl	801ac8a <setting_is_list>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	f083 0301 	eor.w	r3, r3, #1
 8016c20:	b2db      	uxtb	r3, r3
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d01f      	beq.n	8016c66 <report_settings_detail+0x20e>
                if(setting->min_value) {
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	695b      	ldr	r3, [r3, #20]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d00b      	beq.n	8016c46 <report_settings_detail+0x1ee>
                    hal.stream.write(", min: ");
 8016c2e:	4b27      	ldr	r3, [pc, #156]	; (8016ccc <report_settings_detail+0x274>)
 8016c30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016c34:	4832      	ldr	r0, [pc, #200]	; (8016d00 <report_settings_detail+0x2a8>)
 8016c36:	4798      	blx	r3
                    hal.stream.write(setting->min_value);
 8016c38:	4b24      	ldr	r3, [pc, #144]	; (8016ccc <report_settings_detail+0x274>)
 8016c3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016c3e:	68ba      	ldr	r2, [r7, #8]
 8016c40:	6952      	ldr	r2, [r2, #20]
 8016c42:	4610      	mov	r0, r2
 8016c44:	4798      	blx	r3
                }
                if(setting->max_value) {
 8016c46:	68bb      	ldr	r3, [r7, #8]
 8016c48:	699b      	ldr	r3, [r3, #24]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d00b      	beq.n	8016c66 <report_settings_detail+0x20e>
                    hal.stream.write(", max: ");
 8016c4e:	4b1f      	ldr	r3, [pc, #124]	; (8016ccc <report_settings_detail+0x274>)
 8016c50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016c54:	482b      	ldr	r0, [pc, #172]	; (8016d04 <report_settings_detail+0x2ac>)
 8016c56:	4798      	blx	r3
                    hal.stream.write(setting->max_value);
 8016c58:	4b1c      	ldr	r3, [pc, #112]	; (8016ccc <report_settings_detail+0x274>)
 8016c5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016c5e:	68ba      	ldr	r2, [r7, #8]
 8016c60:	6992      	ldr	r2, [r2, #24]
 8016c62:	4610      	mov	r0, r2
 8016c64:	4798      	blx	r3
                }
            }

            if(setting->flags.reboot_required)
 8016c66:	68bb      	ldr	r3, [r7, #8]
 8016c68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016c6c:	f003 0301 	and.w	r3, r3, #1
 8016c70:	b2db      	uxtb	r3, r3
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d004      	beq.n	8016c80 <report_settings_detail+0x228>
                hal.stream.write(", reboot required");
 8016c76:	4b15      	ldr	r3, [pc, #84]	; (8016ccc <report_settings_detail+0x274>)
 8016c78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016c7c:	4822      	ldr	r0, [pc, #136]	; (8016d08 <report_settings_detail+0x2b0>)
 8016c7e:	4798      	blx	r3

#ifndef NO_SETTINGS_DESCRIPTIONS
            // Add description if driver is capable of outputting it...
            if(hal.stream.write_n) {
 8016c80:	4b12      	ldr	r3, [pc, #72]	; (8016ccc <report_settings_detail+0x274>)
 8016c82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	f000 832d 	beq.w	80172e6 <report_settings_detail+0x88e>
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8016c8c:	68bb      	ldr	r3, [r7, #8]
 8016c8e:	881a      	ldrh	r2, [r3, #0]
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	4413      	add	r3, r2
 8016c96:	b29b      	uxth	r3, r3
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f003 fe73 	bl	801a984 <setting_get_description>
 8016c9e:	6278      	str	r0, [r7, #36]	; 0x24
                if(description && *description != '\0') {
 8016ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d05e      	beq.n	8016d64 <report_settings_detail+0x30c>
 8016ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca8:	781b      	ldrb	r3, [r3, #0]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d05a      	beq.n	8016d64 <report_settings_detail+0x30c>
                    char *lf;
                    hal.stream.write(ASCII_EOL);
 8016cae:	4b07      	ldr	r3, [pc, #28]	; (8016ccc <report_settings_detail+0x274>)
 8016cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016cb4:	4815      	ldr	r0, [pc, #84]	; (8016d0c <report_settings_detail+0x2b4>)
 8016cb6:	4798      	blx	r3
                    if((lf = strstr(description, "\\n"))) while(lf) {
 8016cb8:	4915      	ldr	r1, [pc, #84]	; (8016d10 <report_settings_detail+0x2b8>)
 8016cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016cbc:	f00f f97c 	bl	8025fb8 <strstr>
 8016cc0:	6238      	str	r0, [r7, #32]
 8016cc2:	6a3b      	ldr	r3, [r7, #32]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d03f      	beq.n	8016d48 <report_settings_detail+0x2f0>
 8016cc8:	e03b      	b.n	8016d42 <report_settings_detail+0x2ea>
 8016cca:	bf00      	nop
 8016ccc:	200016a0 	.word	0x200016a0
 8016cd0:	0802d97c 	.word	0x0802d97c
 8016cd4:	0802d980 	.word	0x0802d980
 8016cd8:	08032d48 	.word	0x08032d48
 8016cdc:	0802d984 	.word	0x0802d984
 8016ce0:	0802d994 	.word	0x0802d994
 8016ce4:	0802d9a0 	.word	0x0802d9a0
 8016ce8:	0802d9b0 	.word	0x0802d9b0
 8016cec:	0802d5b4 	.word	0x0802d5b4
 8016cf0:	0802d9e4 	.word	0x0802d9e4
 8016cf4:	0802d9f4 	.word	0x0802d9f4
 8016cf8:	0802d9fc 	.word	0x0802d9fc
 8016cfc:	0802d96c 	.word	0x0802d96c
 8016d00:	0802da08 	.word	0x0802da08
 8016d04:	0802da10 	.word	0x0802da10
 8016d08:	0802da18 	.word	0x0802da18
 8016d0c:	0802d480 	.word	0x0802d480
 8016d10:	0802da2c 	.word	0x0802da2c
                        hal.stream.write(ASCII_EOL);
 8016d14:	4b8b      	ldr	r3, [pc, #556]	; (8016f44 <report_settings_detail+0x4ec>)
 8016d16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016d1a:	488b      	ldr	r0, [pc, #556]	; (8016f48 <report_settings_detail+0x4f0>)
 8016d1c:	4798      	blx	r3
                        hal.stream.write_n(description, lf - description);
 8016d1e:	4b89      	ldr	r3, [pc, #548]	; (8016f44 <report_settings_detail+0x4ec>)
 8016d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016d24:	6a39      	ldr	r1, [r7, #32]
 8016d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d28:	1a8a      	subs	r2, r1, r2
 8016d2a:	b292      	uxth	r2, r2
 8016d2c:	4611      	mov	r1, r2
 8016d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d30:	4798      	blx	r3
                        description = lf + 2;
 8016d32:	6a3b      	ldr	r3, [r7, #32]
 8016d34:	3302      	adds	r3, #2
 8016d36:	627b      	str	r3, [r7, #36]	; 0x24
                        lf = strstr(description, "\\n");
 8016d38:	4984      	ldr	r1, [pc, #528]	; (8016f4c <report_settings_detail+0x4f4>)
 8016d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d3c:	f00f f93c 	bl	8025fb8 <strstr>
 8016d40:	6238      	str	r0, [r7, #32]
                    if((lf = strstr(description, "\\n"))) while(lf) {
 8016d42:	6a3b      	ldr	r3, [r7, #32]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d1e5      	bne.n	8016d14 <report_settings_detail+0x2bc>
                    }
                    if(*description != '\0') {
 8016d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4a:	781b      	ldrb	r3, [r3, #0]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d009      	beq.n	8016d64 <report_settings_detail+0x30c>
                        hal.stream.write(ASCII_EOL);
 8016d50:	4b7c      	ldr	r3, [pc, #496]	; (8016f44 <report_settings_detail+0x4ec>)
 8016d52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016d56:	487c      	ldr	r0, [pc, #496]	; (8016f48 <report_settings_detail+0x4f0>)
 8016d58:	4798      	blx	r3
                        hal.stream.write(description);
 8016d5a:	4b7a      	ldr	r3, [pc, #488]	; (8016f44 <report_settings_detail+0x4ec>)
 8016d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d62:	4798      	blx	r3
                    }
                }
                if(setting->flags.reboot_required) {
 8016d64:	68bb      	ldr	r3, [r7, #8]
 8016d66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016d6a:	f003 0301 	and.w	r3, r3, #1
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	f000 82b8 	beq.w	80172e6 <report_settings_detail+0x88e>
                    if(description && *description != '\0')
 8016d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d008      	beq.n	8016d8e <report_settings_detail+0x336>
 8016d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7e:	781b      	ldrb	r3, [r3, #0]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d004      	beq.n	8016d8e <report_settings_detail+0x336>
                        hal.stream.write(ASCII_EOL ASCII_EOL);
 8016d84:	4b6f      	ldr	r3, [pc, #444]	; (8016f44 <report_settings_detail+0x4ec>)
 8016d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016d8a:	4871      	ldr	r0, [pc, #452]	; (8016f50 <report_settings_detail+0x4f8>)
 8016d8c:	4798      	blx	r3
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + 4);
 8016d8e:	4b6d      	ldr	r3, [pc, #436]	; (8016f44 <report_settings_detail+0x4ec>)
 8016d90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016d94:	4a6f      	ldr	r2, [pc, #444]	; (8016f54 <report_settings_detail+0x4fc>)
 8016d96:	4610      	mov	r0, r2
 8016d98:	4798      	blx	r3
                }
            }
#endif
            break;
 8016d9a:	e2a4      	b.n	80172e6 <report_settings_detail+0x88e>

        case SettingsFormat_MachineReadable:
            hal.stream.write("[SETTING:");
 8016d9c:	4b69      	ldr	r3, [pc, #420]	; (8016f44 <report_settings_detail+0x4ec>)
 8016d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016da2:	486d      	ldr	r0, [pc, #436]	; (8016f58 <report_settings_detail+0x500>)
 8016da4:	4798      	blx	r3
            hal.stream.write(uitoa(setting->id + offset));
 8016da6:	4b67      	ldr	r3, [pc, #412]	; (8016f44 <report_settings_detail+0x4ec>)
 8016da8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8016dac:	68bb      	ldr	r3, [r7, #8]
 8016dae:	881b      	ldrh	r3, [r3, #0]
 8016db0:	461a      	mov	r2, r3
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	4413      	add	r3, r2
 8016db6:	4618      	mov	r0, r3
 8016db8:	f7f8 ffb0 	bl	800fd1c <uitoa>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	47a0      	blx	r4
            hal.stream.write(vbar);
 8016dc2:	4b60      	ldr	r3, [pc, #384]	; (8016f44 <report_settings_detail+0x4ec>)
 8016dc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016dc8:	4864      	ldr	r0, [pc, #400]	; (8016f5c <report_settings_detail+0x504>)
 8016dca:	4798      	blx	r3
            hal.stream.write(uitoa(setting->group + (setting->flags.subgroups ? suboffset : 0)));
 8016dcc:	4b5d      	ldr	r3, [pc, #372]	; (8016f44 <report_settings_detail+0x4ec>)
 8016dce:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8016dd2:	68bb      	ldr	r3, [r7, #8]
 8016dd4:	789b      	ldrb	r3, [r3, #2]
 8016dd6:	461a      	mov	r2, r3
 8016dd8:	68bb      	ldr	r3, [r7, #8]
 8016dda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016dde:	f003 0304 	and.w	r3, r3, #4
 8016de2:	b2db      	uxtb	r3, r3
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d001      	beq.n	8016dec <report_settings_detail+0x394>
 8016de8:	69fb      	ldr	r3, [r7, #28]
 8016dea:	e000      	b.n	8016dee <report_settings_detail+0x396>
 8016dec:	2300      	movs	r3, #0
 8016dee:	4413      	add	r3, r2
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7f8 ff93 	bl	800fd1c <uitoa>
 8016df6:	4603      	mov	r3, r0
 8016df8:	4618      	mov	r0, r3
 8016dfa:	47a0      	blx	r4
            hal.stream.write(vbar);
 8016dfc:	4b51      	ldr	r3, [pc, #324]	; (8016f44 <report_settings_detail+0x4ec>)
 8016dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e02:	4856      	ldr	r0, [pc, #344]	; (8016f5c <report_settings_detail+0x504>)
 8016e04:	4798      	blx	r3
            if(setting->group == Group_Axis0)
 8016e06:	68bb      	ldr	r3, [r7, #8]
 8016e08:	789b      	ldrb	r3, [r3, #2]
 8016e0a:	2b2b      	cmp	r3, #43	; 0x2b
 8016e0c:	d108      	bne.n	8016e20 <report_settings_detail+0x3c8>
                hal.stream.write(axis_letter[offset]);
 8016e0e:	4b4d      	ldr	r3, [pc, #308]	; (8016f44 <report_settings_detail+0x4ec>)
 8016e10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e14:	4952      	ldr	r1, [pc, #328]	; (8016f60 <report_settings_detail+0x508>)
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016e1c:	4610      	mov	r0, r2
 8016e1e:	4798      	blx	r3
            write_name(setting->name, suboffset);
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	69f9      	ldr	r1, [r7, #28]
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7ff fdd4 	bl	80169d4 <write_name>
            hal.stream.write(vbar);
 8016e2c:	4b45      	ldr	r3, [pc, #276]	; (8016f44 <report_settings_detail+0x4ec>)
 8016e2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e32:	484a      	ldr	r0, [pc, #296]	; (8016f5c <report_settings_detail+0x504>)
 8016e34:	4798      	blx	r3
            if(setting->unit)
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	689b      	ldr	r3, [r3, #8]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d006      	beq.n	8016e4c <report_settings_detail+0x3f4>
                hal.stream.write(setting->unit);
 8016e3e:	4b41      	ldr	r3, [pc, #260]	; (8016f44 <report_settings_detail+0x4ec>)
 8016e40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e44:	68ba      	ldr	r2, [r7, #8]
 8016e46:	6892      	ldr	r2, [r2, #8]
 8016e48:	4610      	mov	r0, r2
 8016e4a:	4798      	blx	r3
            hal.stream.write(vbar);
 8016e4c:	4b3d      	ldr	r3, [pc, #244]	; (8016f44 <report_settings_detail+0x4ec>)
 8016e4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e52:	4842      	ldr	r0, [pc, #264]	; (8016f5c <report_settings_detail+0x504>)
 8016e54:	4798      	blx	r3
            hal.stream.write(uitoa(setting_datatype_to_external(setting->datatype)));
 8016e56:	4b3b      	ldr	r3, [pc, #236]	; (8016f44 <report_settings_detail+0x4ec>)
 8016e58:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8016e5c:	68bb      	ldr	r3, [r7, #8]
 8016e5e:	7b1b      	ldrb	r3, [r3, #12]
 8016e60:	4618      	mov	r0, r3
 8016e62:	f003 fefe 	bl	801ac62 <setting_datatype_to_external>
 8016e66:	4603      	mov	r3, r0
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7f8 ff57 	bl	800fd1c <uitoa>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	4618      	mov	r0, r3
 8016e72:	47a0      	blx	r4
            hal.stream.write(vbar);
 8016e74:	4b33      	ldr	r3, [pc, #204]	; (8016f44 <report_settings_detail+0x4ec>)
 8016e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e7a:	4838      	ldr	r0, [pc, #224]	; (8016f5c <report_settings_detail+0x504>)
 8016e7c:	4798      	blx	r3
            if(setting->format)
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	691b      	ldr	r3, [r3, #16]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d006      	beq.n	8016e94 <report_settings_detail+0x43c>
                hal.stream.write(setting->format);
 8016e86:	4b2f      	ldr	r3, [pc, #188]	; (8016f44 <report_settings_detail+0x4ec>)
 8016e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e8c:	68ba      	ldr	r2, [r7, #8]
 8016e8e:	6912      	ldr	r2, [r2, #16]
 8016e90:	4610      	mov	r0, r2
 8016e92:	4798      	blx	r3
            hal.stream.write(vbar);
 8016e94:	4b2b      	ldr	r3, [pc, #172]	; (8016f44 <report_settings_detail+0x4ec>)
 8016e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016e9a:	4830      	ldr	r0, [pc, #192]	; (8016f5c <report_settings_detail+0x504>)
 8016e9c:	4798      	blx	r3
            if(setting->min_value && !setting_is_list(setting))
 8016e9e:	68bb      	ldr	r3, [r7, #8]
 8016ea0:	695b      	ldr	r3, [r3, #20]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d00f      	beq.n	8016ec6 <report_settings_detail+0x46e>
 8016ea6:	68b8      	ldr	r0, [r7, #8]
 8016ea8:	f003 feef 	bl	801ac8a <setting_is_list>
 8016eac:	4603      	mov	r3, r0
 8016eae:	f083 0301 	eor.w	r3, r3, #1
 8016eb2:	b2db      	uxtb	r3, r3
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d006      	beq.n	8016ec6 <report_settings_detail+0x46e>
                hal.stream.write(setting->min_value);
 8016eb8:	4b22      	ldr	r3, [pc, #136]	; (8016f44 <report_settings_detail+0x4ec>)
 8016eba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016ebe:	68ba      	ldr	r2, [r7, #8]
 8016ec0:	6952      	ldr	r2, [r2, #20]
 8016ec2:	4610      	mov	r0, r2
 8016ec4:	4798      	blx	r3
            hal.stream.write(vbar);
 8016ec6:	4b1f      	ldr	r3, [pc, #124]	; (8016f44 <report_settings_detail+0x4ec>)
 8016ec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016ecc:	4823      	ldr	r0, [pc, #140]	; (8016f5c <report_settings_detail+0x504>)
 8016ece:	4798      	blx	r3
            if(setting->max_value)
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	699b      	ldr	r3, [r3, #24]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d006      	beq.n	8016ee6 <report_settings_detail+0x48e>
                hal.stream.write(setting->max_value);
 8016ed8:	4b1a      	ldr	r3, [pc, #104]	; (8016f44 <report_settings_detail+0x4ec>)
 8016eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016ede:	68ba      	ldr	r2, [r7, #8]
 8016ee0:	6992      	ldr	r2, [r2, #24]
 8016ee2:	4610      	mov	r0, r2
 8016ee4:	4798      	blx	r3
            hal.stream.write(vbar);
 8016ee6:	4b17      	ldr	r3, [pc, #92]	; (8016f44 <report_settings_detail+0x4ec>)
 8016ee8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016eec:	481b      	ldr	r0, [pc, #108]	; (8016f5c <report_settings_detail+0x504>)
 8016eee:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.reboot_required));
 8016ef0:	4b14      	ldr	r3, [pc, #80]	; (8016f44 <report_settings_detail+0x4ec>)
 8016ef2:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8016ef6:	68bb      	ldr	r3, [r7, #8]
 8016ef8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016efc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016f00:	b2db      	uxtb	r3, r3
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7f8 ff0a 	bl	800fd1c <uitoa>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	47a0      	blx	r4
            hal.stream.write(vbar);
 8016f0e:	4b0d      	ldr	r3, [pc, #52]	; (8016f44 <report_settings_detail+0x4ec>)
 8016f10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016f14:	4811      	ldr	r0, [pc, #68]	; (8016f5c <report_settings_detail+0x504>)
 8016f16:	4798      	blx	r3
            hal.stream.write(uitoa(setting->flags.allow_null));
 8016f18:	4b0a      	ldr	r3, [pc, #40]	; (8016f44 <report_settings_detail+0x4ec>)
 8016f1a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016f24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8016f28:	b2db      	uxtb	r3, r3
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f7f8 fef6 	bl	800fd1c <uitoa>
 8016f30:	4603      	mov	r3, r0
 8016f32:	4618      	mov	r0, r3
 8016f34:	47a0      	blx	r4
            hal.stream.write("]");
 8016f36:	4b03      	ldr	r3, [pc, #12]	; (8016f44 <report_settings_detail+0x4ec>)
 8016f38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016f3c:	4809      	ldr	r0, [pc, #36]	; (8016f64 <report_settings_detail+0x50c>)
 8016f3e:	4798      	blx	r3
            break;
 8016f40:	e1d2      	b.n	80172e8 <report_settings_detail+0x890>
 8016f42:	bf00      	nop
 8016f44:	200016a0 	.word	0x200016a0
 8016f48:	0802d480 	.word	0x0802d480
 8016f4c:	0802da2c 	.word	0x0802da2c
 8016f50:	0802da30 	.word	0x0802da30
 8016f54:	0802da3c 	.word	0x0802da3c
 8016f58:	0802da8c 	.word	0x0802da8c
 8016f5c:	0803314c 	.word	0x0803314c
 8016f60:	08032d48 	.word	0x08032d48
 8016f64:	0802da98 	.word	0x0802da98

        case SettingsFormat_Grbl:
            {
                write_quoted(uitoa(setting->id + offset), ",");
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	881b      	ldrh	r3, [r3, #0]
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	4413      	add	r3, r2
 8016f72:	4618      	mov	r0, r3
 8016f74:	f7f8 fed2 	bl	800fd1c <uitoa>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	4996      	ldr	r1, [pc, #600]	; (80171d4 <report_settings_detail+0x77c>)
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f7ff fd05 	bl	801698c <write_quoted>
                hal.stream.write("\"");
 8016f82:	4b95      	ldr	r3, [pc, #596]	; (80171d8 <report_settings_detail+0x780>)
 8016f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016f88:	4894      	ldr	r0, [pc, #592]	; (80171dc <report_settings_detail+0x784>)
 8016f8a:	4798      	blx	r3
                if(setting->group == Group_Axis0)
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	789b      	ldrb	r3, [r3, #2]
 8016f90:	2b2b      	cmp	r3, #43	; 0x2b
 8016f92:	d108      	bne.n	8016fa6 <report_settings_detail+0x54e>
                    hal.stream.write(axis_letter[offset]);
 8016f94:	4b90      	ldr	r3, [pc, #576]	; (80171d8 <report_settings_detail+0x780>)
 8016f96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016f9a:	4991      	ldr	r1, [pc, #580]	; (80171e0 <report_settings_detail+0x788>)
 8016f9c:	687a      	ldr	r2, [r7, #4]
 8016f9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016fa2:	4610      	mov	r0, r2
 8016fa4:	4798      	blx	r3
                write_name(setting->name, suboffset);
 8016fa6:	68bb      	ldr	r3, [r7, #8]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	69f9      	ldr	r1, [r7, #28]
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7ff fd11 	bl	80169d4 <write_name>
                hal.stream.write("\",");
 8016fb2:	4b89      	ldr	r3, [pc, #548]	; (80171d8 <report_settings_detail+0x780>)
 8016fb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016fb8:	488a      	ldr	r0, [pc, #552]	; (80171e4 <report_settings_detail+0x78c>)
 8016fba:	4798      	blx	r3
                if(setting->unit) {
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	689b      	ldr	r3, [r3, #8]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d006      	beq.n	8016fd2 <report_settings_detail+0x57a>
                    write_quoted(setting->unit, ",");
 8016fc4:	68bb      	ldr	r3, [r7, #8]
 8016fc6:	689b      	ldr	r3, [r3, #8]
 8016fc8:	4982      	ldr	r1, [pc, #520]	; (80171d4 <report_settings_detail+0x77c>)
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7ff fcde 	bl	801698c <write_quoted>
 8016fd0:	e003      	b.n	8016fda <report_settings_detail+0x582>
                } else // TODO: output sensible unit from datatype
                    write_quoted("", ",");
 8016fd2:	4980      	ldr	r1, [pc, #512]	; (80171d4 <report_settings_detail+0x77c>)
 8016fd4:	4884      	ldr	r0, [pc, #528]	; (80171e8 <report_settings_detail+0x790>)
 8016fd6:	f7ff fcd9 	bl	801698c <write_quoted>

    #ifndef NO_SETTINGS_DESCRIPTIONS
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	881a      	ldrh	r2, [r3, #0]
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	b29b      	uxth	r3, r3
 8016fe2:	4413      	add	r3, r2
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f003 fccc 	bl	801a984 <setting_get_description>
 8016fec:	6178      	str	r0, [r7, #20]
                write_quoted(description ? description : "", ",");
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d001      	beq.n	8016ff8 <report_settings_detail+0x5a0>
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	e000      	b.n	8016ffa <report_settings_detail+0x5a2>
 8016ff8:	4b7b      	ldr	r3, [pc, #492]	; (80171e8 <report_settings_detail+0x790>)
 8016ffa:	4976      	ldr	r1, [pc, #472]	; (80171d4 <report_settings_detail+0x77c>)
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7ff fcc5 	bl	801698c <write_quoted>
    #else
                write_quoted("", NULL);
    #endif
            }
            break;
 8017002:	e171      	b.n	80172e8 <report_settings_detail+0x890>

        case SettingsFormat_grblHAL:
            {
                hal.stream.write(uitoa(setting->id + offset));
 8017004:	4b74      	ldr	r3, [pc, #464]	; (80171d8 <report_settings_detail+0x780>)
 8017006:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	881b      	ldrh	r3, [r3, #0]
 801700e:	461a      	mov	r2, r3
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	4413      	add	r3, r2
 8017014:	4618      	mov	r0, r3
 8017016:	f7f8 fe81 	bl	800fd1c <uitoa>
 801701a:	4603      	mov	r3, r0
 801701c:	4618      	mov	r0, r3
 801701e:	47a0      	blx	r4

                hal.stream.write("\t");
 8017020:	4b6d      	ldr	r3, [pc, #436]	; (80171d8 <report_settings_detail+0x780>)
 8017022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017026:	4871      	ldr	r0, [pc, #452]	; (80171ec <report_settings_detail+0x794>)
 8017028:	4798      	blx	r3

                if(setting->group == Group_Axis0)
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	789b      	ldrb	r3, [r3, #2]
 801702e:	2b2b      	cmp	r3, #43	; 0x2b
 8017030:	d108      	bne.n	8017044 <report_settings_detail+0x5ec>
                    hal.stream.write(axis_letter[offset]);
 8017032:	4b69      	ldr	r3, [pc, #420]	; (80171d8 <report_settings_detail+0x780>)
 8017034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017038:	4969      	ldr	r1, [pc, #420]	; (80171e0 <report_settings_detail+0x788>)
 801703a:	687a      	ldr	r2, [r7, #4]
 801703c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8017040:	4610      	mov	r0, r2
 8017042:	4798      	blx	r3
                write_name(setting->name, suboffset);
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	69f9      	ldr	r1, [r7, #28]
 801704a:	4618      	mov	r0, r3
 801704c:	f7ff fcc2 	bl	80169d4 <write_name>

                hal.stream.write("\t");
 8017050:	4b61      	ldr	r3, [pc, #388]	; (80171d8 <report_settings_detail+0x780>)
 8017052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017056:	4865      	ldr	r0, [pc, #404]	; (80171ec <report_settings_detail+0x794>)
 8017058:	4798      	blx	r3

                if(setting->unit)
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	689b      	ldr	r3, [r3, #8]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d007      	beq.n	8017072 <report_settings_detail+0x61a>
                    hal.stream.write(setting->unit);
 8017062:	4b5d      	ldr	r3, [pc, #372]	; (80171d8 <report_settings_detail+0x780>)
 8017064:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017068:	68ba      	ldr	r2, [r7, #8]
 801706a:	6892      	ldr	r2, [r2, #8]
 801706c:	4610      	mov	r0, r2
 801706e:	4798      	blx	r3
 8017070:	e024      	b.n	80170bc <report_settings_detail+0x664>
                else if(setting->datatype == Format_AxisMask || setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield)
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	7b1b      	ldrb	r3, [r3, #12]
 8017076:	2b04      	cmp	r3, #4
 8017078:	d007      	beq.n	801708a <report_settings_detail+0x632>
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	7b1b      	ldrb	r3, [r3, #12]
 801707e:	2b01      	cmp	r3, #1
 8017080:	d003      	beq.n	801708a <report_settings_detail+0x632>
 8017082:	68bb      	ldr	r3, [r7, #8]
 8017084:	7b1b      	ldrb	r3, [r3, #12]
 8017086:	2b02      	cmp	r3, #2
 8017088:	d105      	bne.n	8017096 <report_settings_detail+0x63e>
                    hal.stream.write("mask");
 801708a:	4b53      	ldr	r3, [pc, #332]	; (80171d8 <report_settings_detail+0x780>)
 801708c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017090:	4857      	ldr	r0, [pc, #348]	; (80171f0 <report_settings_detail+0x798>)
 8017092:	4798      	blx	r3
 8017094:	e012      	b.n	80170bc <report_settings_detail+0x664>
                else if(setting->datatype == Format_Bool)
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	7b1b      	ldrb	r3, [r3, #12]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d105      	bne.n	80170aa <report_settings_detail+0x652>
                    hal.stream.write("boolean");
 801709e:	4b4e      	ldr	r3, [pc, #312]	; (80171d8 <report_settings_detail+0x780>)
 80170a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80170a4:	4853      	ldr	r0, [pc, #332]	; (80171f4 <report_settings_detail+0x79c>)
 80170a6:	4798      	blx	r3
 80170a8:	e008      	b.n	80170bc <report_settings_detail+0x664>
                else if(setting->datatype == Format_RadioButtons)
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	7b1b      	ldrb	r3, [r3, #12]
 80170ae:	2b03      	cmp	r3, #3
 80170b0:	d104      	bne.n	80170bc <report_settings_detail+0x664>
                    hal.stream.write("integer");
 80170b2:	4b49      	ldr	r3, [pc, #292]	; (80171d8 <report_settings_detail+0x780>)
 80170b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80170b8:	484f      	ldr	r0, [pc, #316]	; (80171f8 <report_settings_detail+0x7a0>)
 80170ba:	4798      	blx	r3

                hal.stream.write("\t");
 80170bc:	4b46      	ldr	r3, [pc, #280]	; (80171d8 <report_settings_detail+0x780>)
 80170be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80170c2:	484a      	ldr	r0, [pc, #296]	; (80171ec <report_settings_detail+0x794>)
 80170c4:	4798      	blx	r3
                Format_IPv4,
                // For internal use only
                Format_Int8,
                Format_Int16,
    */
                switch(setting_datatype_to_external(setting->datatype)) {
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	7b1b      	ldrb	r3, [r3, #12]
 80170ca:	4618      	mov	r0, r3
 80170cc:	f003 fdc9 	bl	801ac62 <setting_datatype_to_external>
 80170d0:	4603      	mov	r3, r0
 80170d2:	2b09      	cmp	r3, #9
 80170d4:	d84c      	bhi.n	8017170 <report_settings_detail+0x718>
 80170d6:	a201      	add	r2, pc, #4	; (adr r2, 80170dc <report_settings_detail+0x684>)
 80170d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170dc:	0801711d 	.word	0x0801711d
 80170e0:	08017129 	.word	0x08017129
 80170e4:	08017135 	.word	0x08017135
 80170e8:	08017141 	.word	0x08017141
 80170ec:	08017129 	.word	0x08017129
 80170f0:	08017105 	.word	0x08017105
 80170f4:	08017111 	.word	0x08017111
 80170f8:	08017159 	.word	0x08017159
 80170fc:	08017165 	.word	0x08017165
 8017100:	0801714d 	.word	0x0801714d

                    case Format_Integer:
                        hal.stream.write("integer");
 8017104:	4b34      	ldr	r3, [pc, #208]	; (80171d8 <report_settings_detail+0x780>)
 8017106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801710a:	483b      	ldr	r0, [pc, #236]	; (80171f8 <report_settings_detail+0x7a0>)
 801710c:	4798      	blx	r3
                        break;
 801710e:	e030      	b.n	8017172 <report_settings_detail+0x71a>

                    case Format_Decimal:
                        hal.stream.write("float");
 8017110:	4b31      	ldr	r3, [pc, #196]	; (80171d8 <report_settings_detail+0x780>)
 8017112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017116:	4839      	ldr	r0, [pc, #228]	; (80171fc <report_settings_detail+0x7a4>)
 8017118:	4798      	blx	r3
                        break;
 801711a:	e02a      	b.n	8017172 <report_settings_detail+0x71a>

                    case Format_Bool:
                        hal.stream.write("bool");
 801711c:	4b2e      	ldr	r3, [pc, #184]	; (80171d8 <report_settings_detail+0x780>)
 801711e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017122:	4837      	ldr	r0, [pc, #220]	; (8017200 <report_settings_detail+0x7a8>)
 8017124:	4798      	blx	r3
                        break;
 8017126:	e024      	b.n	8017172 <report_settings_detail+0x71a>

                    case Format_AxisMask:
                    case Format_Bitfield:
                        hal.stream.write("bitfield");
 8017128:	4b2b      	ldr	r3, [pc, #172]	; (80171d8 <report_settings_detail+0x780>)
 801712a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801712e:	4835      	ldr	r0, [pc, #212]	; (8017204 <report_settings_detail+0x7ac>)
 8017130:	4798      	blx	r3
                        break;
 8017132:	e01e      	b.n	8017172 <report_settings_detail+0x71a>

                    case Format_XBitfield:
                        hal.stream.write("xbitfield");
 8017134:	4b28      	ldr	r3, [pc, #160]	; (80171d8 <report_settings_detail+0x780>)
 8017136:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801713a:	4833      	ldr	r0, [pc, #204]	; (8017208 <report_settings_detail+0x7b0>)
 801713c:	4798      	blx	r3
                        break;
 801713e:	e018      	b.n	8017172 <report_settings_detail+0x71a>

                    case Format_RadioButtons:
                        hal.stream.write("radiobuttons");
 8017140:	4b25      	ldr	r3, [pc, #148]	; (80171d8 <report_settings_detail+0x780>)
 8017142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017146:	4831      	ldr	r0, [pc, #196]	; (801720c <report_settings_detail+0x7b4>)
 8017148:	4798      	blx	r3
                        break;
 801714a:	e012      	b.n	8017172 <report_settings_detail+0x71a>

                    case Format_IPv4:
                        hal.stream.write("ipv4");
 801714c:	4b22      	ldr	r3, [pc, #136]	; (80171d8 <report_settings_detail+0x780>)
 801714e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017152:	482f      	ldr	r0, [pc, #188]	; (8017210 <report_settings_detail+0x7b8>)
 8017154:	4798      	blx	r3
                        break;
 8017156:	e00c      	b.n	8017172 <report_settings_detail+0x71a>

                    case Format_String:
                        hal.stream.write("string");
 8017158:	4b1f      	ldr	r3, [pc, #124]	; (80171d8 <report_settings_detail+0x780>)
 801715a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801715e:	482d      	ldr	r0, [pc, #180]	; (8017214 <report_settings_detail+0x7bc>)
 8017160:	4798      	blx	r3
                        break;
 8017162:	e006      	b.n	8017172 <report_settings_detail+0x71a>

                    case Format_Password:
                        hal.stream.write("password");
 8017164:	4b1c      	ldr	r3, [pc, #112]	; (80171d8 <report_settings_detail+0x780>)
 8017166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801716a:	482b      	ldr	r0, [pc, #172]	; (8017218 <report_settings_detail+0x7c0>)
 801716c:	4798      	blx	r3
                        break;
 801716e:	e000      	b.n	8017172 <report_settings_detail+0x71a>

                    default:
                        break;
 8017170:	bf00      	nop
                }

                hal.stream.write("\t");
 8017172:	4b19      	ldr	r3, [pc, #100]	; (80171d8 <report_settings_detail+0x780>)
 8017174:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017178:	481c      	ldr	r0, [pc, #112]	; (80171ec <report_settings_detail+0x794>)
 801717a:	4798      	blx	r3

                if(setting->format)
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	691b      	ldr	r3, [r3, #16]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d007      	beq.n	8017194 <report_settings_detail+0x73c>
                    hal.stream.write(setting->format);
 8017184:	4b14      	ldr	r3, [pc, #80]	; (80171d8 <report_settings_detail+0x780>)
 8017186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801718a:	68ba      	ldr	r2, [r7, #8]
 801718c:	6912      	ldr	r2, [r2, #16]
 801718e:	4610      	mov	r0, r2
 8017190:	4798      	blx	r3
 8017192:	e008      	b.n	80171a6 <report_settings_detail+0x74e>
                else if (setting->datatype == Format_AxisMask)
 8017194:	68bb      	ldr	r3, [r7, #8]
 8017196:	7b1b      	ldrb	r3, [r3, #12]
 8017198:	2b04      	cmp	r3, #4
 801719a:	d104      	bne.n	80171a6 <report_settings_detail+0x74e>
                    hal.stream.write("axes");
 801719c:	4b0e      	ldr	r3, [pc, #56]	; (80171d8 <report_settings_detail+0x780>)
 801719e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80171a2:	481e      	ldr	r0, [pc, #120]	; (801721c <report_settings_detail+0x7c4>)
 80171a4:	4798      	blx	r3

                hal.stream.write("\t");
 80171a6:	4b0c      	ldr	r3, [pc, #48]	; (80171d8 <report_settings_detail+0x780>)
 80171a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80171ac:	480f      	ldr	r0, [pc, #60]	; (80171ec <report_settings_detail+0x794>)
 80171ae:	4798      	blx	r3

    #ifndef NO_SETTINGS_DESCRIPTIONS
                const char *description = setting_get_description((setting_id_t)(setting->id + offset));
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	881a      	ldrh	r2, [r3, #0]
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	b29b      	uxth	r3, r3
 80171b8:	4413      	add	r3, r2
 80171ba:	b29b      	uxth	r3, r3
 80171bc:	4618      	mov	r0, r3
 80171be:	f003 fbe1 	bl	801a984 <setting_get_description>
 80171c2:	61b8      	str	r0, [r7, #24]
                hal.stream.write(description ? description : "");
 80171c4:	4b04      	ldr	r3, [pc, #16]	; (80171d8 <report_settings_detail+0x780>)
 80171c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80171ca:	69bb      	ldr	r3, [r7, #24]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d027      	beq.n	8017220 <report_settings_detail+0x7c8>
 80171d0:	69bb      	ldr	r3, [r7, #24]
 80171d2:	e026      	b.n	8017222 <report_settings_detail+0x7ca>
 80171d4:	0802d474 	.word	0x0802d474
 80171d8:	200016a0 	.word	0x200016a0
 80171dc:	0802d978 	.word	0x0802d978
 80171e0:	08032d48 	.word	0x08032d48
 80171e4:	0802da9c 	.word	0x0802da9c
 80171e8:	0802d4b4 	.word	0x0802d4b4
 80171ec:	0802daa0 	.word	0x0802daa0
 80171f0:	0802daa4 	.word	0x0802daa4
 80171f4:	0802daac 	.word	0x0802daac
 80171f8:	0802dab4 	.word	0x0802dab4
 80171fc:	0802dabc 	.word	0x0802dabc
 8017200:	0802dac4 	.word	0x0802dac4
 8017204:	0802dacc 	.word	0x0802dacc
 8017208:	0802dad8 	.word	0x0802dad8
 801720c:	0802dae4 	.word	0x0802dae4
 8017210:	0802daf4 	.word	0x0802daf4
 8017214:	0802dafc 	.word	0x0802dafc
 8017218:	0802db04 	.word	0x0802db04
 801721c:	0802db10 	.word	0x0802db10
 8017220:	4b36      	ldr	r3, [pc, #216]	; (80172fc <report_settings_detail+0x8a4>)
 8017222:	4618      	mov	r0, r3
 8017224:	4790      	blx	r2
                if(setting->flags.reboot_required)
 8017226:	68bb      	ldr	r3, [r7, #8]
 8017228:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801722c:	f003 0301 	and.w	r3, r3, #1
 8017230:	b2db      	uxtb	r3, r3
 8017232:	2b00      	cmp	r3, #0
 8017234:	d00e      	beq.n	8017254 <report_settings_detail+0x7fc>
                    hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8017236:	4b32      	ldr	r3, [pc, #200]	; (8017300 <report_settings_detail+0x8a8>)
 8017238:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801723c:	69ba      	ldr	r2, [r7, #24]
 801723e:	2a00      	cmp	r2, #0
 8017240:	d005      	beq.n	801724e <report_settings_detail+0x7f6>
 8017242:	69ba      	ldr	r2, [r7, #24]
 8017244:	7812      	ldrb	r2, [r2, #0]
 8017246:	2a00      	cmp	r2, #0
 8017248:	d001      	beq.n	801724e <report_settings_detail+0x7f6>
 801724a:	4a2e      	ldr	r2, [pc, #184]	; (8017304 <report_settings_detail+0x8ac>)
 801724c:	e000      	b.n	8017250 <report_settings_detail+0x7f8>
 801724e:	4a2e      	ldr	r2, [pc, #184]	; (8017308 <report_settings_detail+0x8b0>)
 8017250:	4610      	mov	r0, r2
 8017252:	4798      	blx	r3
    #endif
                hal.stream.write("\t");
 8017254:	4b2a      	ldr	r3, [pc, #168]	; (8017300 <report_settings_detail+0x8a8>)
 8017256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801725a:	482c      	ldr	r0, [pc, #176]	; (801730c <report_settings_detail+0x8b4>)
 801725c:	4798      	blx	r3

                if(setting->min_value)
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	695b      	ldr	r3, [r3, #20]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d006      	beq.n	8017274 <report_settings_detail+0x81c>
                    hal.stream.write(setting->min_value);
 8017266:	4b26      	ldr	r3, [pc, #152]	; (8017300 <report_settings_detail+0x8a8>)
 8017268:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801726c:	68ba      	ldr	r2, [r7, #8]
 801726e:	6952      	ldr	r2, [r2, #20]
 8017270:	4610      	mov	r0, r2
 8017272:	4798      	blx	r3

                hal.stream.write("\t");
 8017274:	4b22      	ldr	r3, [pc, #136]	; (8017300 <report_settings_detail+0x8a8>)
 8017276:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801727a:	4824      	ldr	r0, [pc, #144]	; (801730c <report_settings_detail+0x8b4>)
 801727c:	4798      	blx	r3

                if(setting->max_value)
 801727e:	68bb      	ldr	r3, [r7, #8]
 8017280:	699b      	ldr	r3, [r3, #24]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d006      	beq.n	8017294 <report_settings_detail+0x83c>
                    hal.stream.write(setting->max_value);
 8017286:	4b1e      	ldr	r3, [pc, #120]	; (8017300 <report_settings_detail+0x8a8>)
 8017288:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801728c:	68ba      	ldr	r2, [r7, #8]
 801728e:	6992      	ldr	r2, [r2, #24]
 8017290:	4610      	mov	r0, r2
 8017292:	4798      	blx	r3

                hal.stream.write("\t");
 8017294:	4b1a      	ldr	r3, [pc, #104]	; (8017300 <report_settings_detail+0x8a8>)
 8017296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801729a:	481c      	ldr	r0, [pc, #112]	; (801730c <report_settings_detail+0x8b4>)
 801729c:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.reboot_required));
 801729e:	4b18      	ldr	r3, [pc, #96]	; (8017300 <report_settings_detail+0x8a8>)
 80172a0:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80172a4:	68bb      	ldr	r3, [r7, #8]
 80172a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80172aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80172ae:	b2db      	uxtb	r3, r3
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7f8 fd33 	bl	800fd1c <uitoa>
 80172b6:	4603      	mov	r3, r0
 80172b8:	4618      	mov	r0, r3
 80172ba:	47a0      	blx	r4
                hal.stream.write("\t");
 80172bc:	4b10      	ldr	r3, [pc, #64]	; (8017300 <report_settings_detail+0x8a8>)
 80172be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80172c2:	4812      	ldr	r0, [pc, #72]	; (801730c <report_settings_detail+0x8b4>)
 80172c4:	4798      	blx	r3
                hal.stream.write(uitoa(setting->flags.allow_null));
 80172c6:	4b0e      	ldr	r3, [pc, #56]	; (8017300 <report_settings_detail+0x8a8>)
 80172c8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80172d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80172d6:	b2db      	uxtb	r3, r3
 80172d8:	4618      	mov	r0, r3
 80172da:	f7f8 fd1f 	bl	800fd1c <uitoa>
 80172de:	4603      	mov	r3, r0
 80172e0:	4618      	mov	r0, r3
 80172e2:	47a0      	blx	r4
            }
            break;
 80172e4:	e000      	b.n	80172e8 <report_settings_detail+0x890>
            break;
 80172e6:	bf00      	nop
    }

    hal.stream.write(ASCII_EOL);
 80172e8:	4b05      	ldr	r3, [pc, #20]	; (8017300 <report_settings_detail+0x8a8>)
 80172ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80172ee:	4808      	ldr	r0, [pc, #32]	; (8017310 <report_settings_detail+0x8b8>)
 80172f0:	4798      	blx	r3
}
 80172f2:	bf00      	nop
 80172f4:	372c      	adds	r7, #44	; 0x2c
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd90      	pop	{r4, r7, pc}
 80172fa:	bf00      	nop
 80172fc:	0802d4b4 	.word	0x0802d4b4
 8017300:	200016a0 	.word	0x200016a0
 8017304:	0802da38 	.word	0x0802da38
 8017308:	0802da3c 	.word	0x0802da3c
 801730c:	0802daa0 	.word	0x0802daa0
 8017310:	0802d480 	.word	0x0802d480

08017314 <print_sorted>:
    setting_group_t group;
    uint_fast16_t offset;
} report_args_t;

static bool print_sorted (const setting_detail_t *setting, uint_fast16_t offset, void *args)
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b084      	sub	sp, #16
 8017318:	af00      	add	r7, sp, #0
 801731a:	60f8      	str	r0, [r7, #12]
 801731c:	60b9      	str	r1, [r7, #8]
 801731e:	607a      	str	r2, [r7, #4]
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset))
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	785a      	ldrb	r2, [r3, #1]
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	789b      	ldrb	r3, [r3, #2]
 8017328:	429a      	cmp	r2, r3
 801732a:	d104      	bne.n	8017336 <print_sorted+0x22>
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	685b      	ldr	r3, [r3, #4]
 8017330:	68ba      	ldr	r2, [r7, #8]
 8017332:	429a      	cmp	r2, r3
 8017334:	d106      	bne.n	8017344 <print_sorted+0x30>
        report_settings_detail (((report_args_t *)args)->format, setting, offset);
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	68ba      	ldr	r2, [r7, #8]
 801733c:	68f9      	ldr	r1, [r7, #12]
 801733e:	4618      	mov	r0, r3
 8017340:	f7ff fb8a 	bl	8016a58 <report_settings_detail>

    return true;
 8017344:	2301      	movs	r3, #1
}
 8017346:	4618      	mov	r0, r3
 8017348:	3710      	adds	r7, #16
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}

0801734e <print_unsorted>:

static bool print_unsorted (const setting_detail_t *setting, uint_fast16_t offset, void *args)
{
 801734e:	b580      	push	{r7, lr}
 8017350:	b084      	sub	sp, #16
 8017352:	af00      	add	r7, sp, #0
 8017354:	60f8      	str	r0, [r7, #12]
 8017356:	60b9      	str	r1, [r7, #8]
 8017358:	607a      	str	r2, [r7, #4]
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	785a      	ldrb	r2, [r3, #1]
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	789b      	ldrb	r3, [r3, #2]
 8017362:	429a      	cmp	r2, r3
 8017364:	d104      	bne.n	8017370 <print_unsorted+0x22>
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	685b      	ldr	r3, [r3, #4]
 801736a:	68ba      	ldr	r2, [r7, #8]
 801736c:	429a      	cmp	r2, r3
 801736e:	d111      	bne.n	8017394 <print_unsorted+0x46>
       (setting->is_available == NULL ||setting->is_available(setting)))
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if(!(((report_args_t *)args)->group == setting->group && ((report_args_t *)args)->offset != offset) &&
 8017374:	2b00      	cmp	r3, #0
 8017376:	d006      	beq.n	8017386 <print_unsorted+0x38>
       (setting->is_available == NULL ||setting->is_available(setting)))
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801737c:	68f8      	ldr	r0, [r7, #12]
 801737e:	4798      	blx	r3
 8017380:	4603      	mov	r3, r0
 8017382:	2b00      	cmp	r3, #0
 8017384:	d006      	beq.n	8017394 <print_unsorted+0x46>
        report_settings_detail(((report_args_t *)args)->format, setting, offset);
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	68ba      	ldr	r2, [r7, #8]
 801738c:	68f9      	ldr	r1, [r7, #12]
 801738e:	4618      	mov	r0, r3
 8017390:	f7ff fb62 	bl	8016a58 <report_settings_detail>

    return true;
 8017394:	2301      	movs	r3, #1
}
 8017396:	4618      	mov	r0, r3
 8017398:	3710      	adds	r7, #16
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
	...

080173a0 <print_settings_details>:

static status_code_t print_settings_details (settings_format_t format, setting_group_t group)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b08c      	sub	sp, #48	; 0x30
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	4603      	mov	r3, r0
 80173a8:	460a      	mov	r2, r1
 80173aa:	71fb      	strb	r3, [r7, #7]
 80173ac:	4613      	mov	r3, r2
 80173ae:	71bb      	strb	r3, [r7, #6]
    uint_fast16_t idx, n_settings = 0;
 80173b0:	2300      	movs	r3, #0
 80173b2:	62bb      	str	r3, [r7, #40]	; 0x28
    bool reported = group == Group_All;
 80173b4:	79bb      	ldrb	r3, [r7, #6]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	bf0c      	ite	eq
 80173ba:	2301      	moveq	r3, #1
 80173bc:	2300      	movne	r3, #0
 80173be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const setting_detail_t *setting;
    report_args_t args;
    setting_detail_t **all_settings, **psetting;
    setting_details_t *details = settings_get_details();
 80173c2:	f001 f819 	bl	80183f8 <settings_get_details>
 80173c6:	61f8      	str	r0, [r7, #28]

    args.group = settings_normalize_group(group);
 80173c8:	79bb      	ldrb	r3, [r7, #6]
 80173ca:	4618      	mov	r0, r3
 80173cc:	f003 f9c0 	bl	801a750 <settings_normalize_group>
 80173d0:	4603      	mov	r3, r0
 80173d2:	737b      	strb	r3, [r7, #13]
    args.offset = group - args.group;
 80173d4:	79bb      	ldrb	r3, [r7, #6]
 80173d6:	7b7a      	ldrb	r2, [r7, #13]
 80173d8:	1a9b      	subs	r3, r3, r2
 80173da:	613b      	str	r3, [r7, #16]
    args.format = format;
 80173dc:	79fb      	ldrb	r3, [r7, #7]
 80173de:	733b      	strb	r3, [r7, #12]

    do {
        n_settings += details->n_settings;
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	891b      	ldrh	r3, [r3, #8]
 80173e4:	461a      	mov	r2, r3
 80173e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e8:	4413      	add	r3, r2
 80173ea:	62bb      	str	r3, [r7, #40]	; 0x28
    } while((details = details->next));
 80173ec:	69fb      	ldr	r3, [r7, #28]
 80173ee:	699b      	ldr	r3, [r3, #24]
 80173f0:	61fb      	str	r3, [r7, #28]
 80173f2:	69fb      	ldr	r3, [r7, #28]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d1f3      	bne.n	80173e0 <print_settings_details+0x40>

    if(format == SettingsFormat_Grbl)
 80173f8:	79fb      	ldrb	r3, [r7, #7]
 80173fa:	2b02      	cmp	r3, #2
 80173fc:	d105      	bne.n	801740a <print_settings_details+0x6a>
        hal.stream.write("\"$-Code\",\" Setting\",\" Units\",\" Setting Description\"" ASCII_EOL);
 80173fe:	4b5a      	ldr	r3, [pc, #360]	; (8017568 <print_settings_details+0x1c8>)
 8017400:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017404:	4859      	ldr	r0, [pc, #356]	; (801756c <print_settings_details+0x1cc>)
 8017406:	4798      	blx	r3
 8017408:	e007      	b.n	801741a <print_settings_details+0x7a>
    else if(format == SettingsFormat_grblHAL)
 801740a:	79fb      	ldrb	r3, [r7, #7]
 801740c:	2b03      	cmp	r3, #3
 801740e:	d104      	bne.n	801741a <print_settings_details+0x7a>
        hal.stream.write("$-Code\tSetting\tUnits\tDatatype\tData format\tSetting Description\tMin\tMax" ASCII_EOL);
 8017410:	4b55      	ldr	r3, [pc, #340]	; (8017568 <print_settings_details+0x1c8>)
 8017412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017416:	4856      	ldr	r0, [pc, #344]	; (8017570 <print_settings_details+0x1d0>)
 8017418:	4798      	blx	r3

    details = settings_get_details();
 801741a:	f000 ffed 	bl	80183f8 <settings_get_details>
 801741e:	61f8      	str	r0, [r7, #28]

    if((all_settings = psetting = calloc(n_settings, sizeof(setting_detail_t *)))) {
 8017420:	2104      	movs	r1, #4
 8017422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017424:	f00e f98a 	bl	802573c <calloc>
 8017428:	4603      	mov	r3, r0
 801742a:	623b      	str	r3, [r7, #32]
 801742c:	6a3b      	ldr	r3, [r7, #32]
 801742e:	61bb      	str	r3, [r7, #24]
 8017430:	69bb      	ldr	r3, [r7, #24]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d05c      	beq.n	80174f0 <print_settings_details+0x150>

        n_settings = 0;
 8017436:	2300      	movs	r3, #0
 8017438:	62bb      	str	r3, [r7, #40]	; 0x28

        do {
            for(idx = 0; idx < details->n_settings; idx++) {
 801743a:	2300      	movs	r3, #0
 801743c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801743e:	e026      	b.n	801748e <print_settings_details+0xee>
                setting = &details->settings[idx];
 8017440:	69fb      	ldr	r3, [r7, #28]
 8017442:	68d9      	ldr	r1, [r3, #12]
 8017444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017446:	4613      	mov	r3, r2
 8017448:	005b      	lsls	r3, r3, #1
 801744a:	4413      	add	r3, r2
 801744c:	011b      	lsls	r3, r3, #4
 801744e:	440b      	add	r3, r1
 8017450:	617b      	str	r3, [r7, #20]
                if((group == Group_All || setting->group == args.group) && (setting->is_available == NULL || setting->is_available(setting))) {
 8017452:	79bb      	ldrb	r3, [r7, #6]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d004      	beq.n	8017462 <print_settings_details+0xc2>
 8017458:	697b      	ldr	r3, [r7, #20]
 801745a:	789a      	ldrb	r2, [r3, #2]
 801745c:	7b7b      	ldrb	r3, [r7, #13]
 801745e:	429a      	cmp	r2, r3
 8017460:	d112      	bne.n	8017488 <print_settings_details+0xe8>
 8017462:	697b      	ldr	r3, [r7, #20]
 8017464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017466:	2b00      	cmp	r3, #0
 8017468:	d006      	beq.n	8017478 <print_settings_details+0xd8>
 801746a:	697b      	ldr	r3, [r7, #20]
 801746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801746e:	6978      	ldr	r0, [r7, #20]
 8017470:	4798      	blx	r3
 8017472:	4603      	mov	r3, r0
 8017474:	2b00      	cmp	r3, #0
 8017476:	d007      	beq.n	8017488 <print_settings_details+0xe8>
                    *psetting++ = (setting_detail_t *)setting;
 8017478:	6a3b      	ldr	r3, [r7, #32]
 801747a:	1d1a      	adds	r2, r3, #4
 801747c:	623a      	str	r2, [r7, #32]
 801747e:	697a      	ldr	r2, [r7, #20]
 8017480:	601a      	str	r2, [r3, #0]
                    n_settings++;
 8017482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017484:	3301      	adds	r3, #1
 8017486:	62bb      	str	r3, [r7, #40]	; 0x28
            for(idx = 0; idx < details->n_settings; idx++) {
 8017488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801748a:	3301      	adds	r3, #1
 801748c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801748e:	69fb      	ldr	r3, [r7, #28]
 8017490:	891b      	ldrh	r3, [r3, #8]
 8017492:	461a      	mov	r2, r3
 8017494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017496:	4293      	cmp	r3, r2
 8017498:	d3d2      	bcc.n	8017440 <print_settings_details+0xa0>
                }
            }
        } while((details = details->next));
 801749a:	69fb      	ldr	r3, [r7, #28]
 801749c:	699b      	ldr	r3, [r3, #24]
 801749e:	61fb      	str	r3, [r7, #28]
 80174a0:	69fb      	ldr	r3, [r7, #28]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d1c9      	bne.n	801743a <print_settings_details+0x9a>

        qsort(all_settings, n_settings, sizeof(setting_detail_t *), cmp_settings);
 80174a6:	4b33      	ldr	r3, [pc, #204]	; (8017574 <print_settings_details+0x1d4>)
 80174a8:	2204      	movs	r2, #4
 80174aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80174ac:	69b8      	ldr	r0, [r7, #24]
 80174ae:	f00e fa61 	bl	8025974 <qsort>

        for(idx = 0; idx < n_settings; idx++) {
 80174b2:	2300      	movs	r3, #0
 80174b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174b6:	e013      	b.n	80174e0 <print_settings_details+0x140>
            if(settings_iterator(all_settings[idx], print_sorted, &args))
 80174b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ba:	009b      	lsls	r3, r3, #2
 80174bc:	69ba      	ldr	r2, [r7, #24]
 80174be:	4413      	add	r3, r2
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	f107 020c 	add.w	r2, r7, #12
 80174c6:	492c      	ldr	r1, [pc, #176]	; (8017578 <print_settings_details+0x1d8>)
 80174c8:	4618      	mov	r0, r3
 80174ca:	f003 f955 	bl	801a778 <settings_iterator>
 80174ce:	4603      	mov	r3, r0
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d002      	beq.n	80174da <print_settings_details+0x13a>
                reported = true;
 80174d4:	2301      	movs	r3, #1
 80174d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for(idx = 0; idx < n_settings; idx++) {
 80174da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174dc:	3301      	adds	r3, #1
 80174de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d3e7      	bcc.n	80174b8 <print_settings_details+0x118>
        }

        free(all_settings);
 80174e8:	69b8      	ldr	r0, [r7, #24]
 80174ea:	f00e f94d 	bl	8025788 <free>
 80174ee:	e02f      	b.n	8017550 <print_settings_details+0x1b0>

    } else do {
        for(idx = 0; idx < details->n_settings; idx++) {
 80174f0:	2300      	movs	r3, #0
 80174f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174f4:	e020      	b.n	8017538 <print_settings_details+0x198>

            setting = &details->settings[idx];
 80174f6:	69fb      	ldr	r3, [r7, #28]
 80174f8:	68d9      	ldr	r1, [r3, #12]
 80174fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174fc:	4613      	mov	r3, r2
 80174fe:	005b      	lsls	r3, r3, #1
 8017500:	4413      	add	r3, r2
 8017502:	011b      	lsls	r3, r3, #4
 8017504:	440b      	add	r3, r1
 8017506:	617b      	str	r3, [r7, #20]

            if(group == Group_All || setting->group == args.group) {
 8017508:	79bb      	ldrb	r3, [r7, #6]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d004      	beq.n	8017518 <print_settings_details+0x178>
 801750e:	697b      	ldr	r3, [r7, #20]
 8017510:	789a      	ldrb	r2, [r3, #2]
 8017512:	7b7b      	ldrb	r3, [r7, #13]
 8017514:	429a      	cmp	r2, r3
 8017516:	d10c      	bne.n	8017532 <print_settings_details+0x192>
                if(settings_iterator(setting, print_unsorted, &args))
 8017518:	f107 030c 	add.w	r3, r7, #12
 801751c:	461a      	mov	r2, r3
 801751e:	4917      	ldr	r1, [pc, #92]	; (801757c <print_settings_details+0x1dc>)
 8017520:	6978      	ldr	r0, [r7, #20]
 8017522:	f003 f929 	bl	801a778 <settings_iterator>
 8017526:	4603      	mov	r3, r0
 8017528:	2b00      	cmp	r3, #0
 801752a:	d002      	beq.n	8017532 <print_settings_details+0x192>
                    reported = true;
 801752c:	2301      	movs	r3, #1
 801752e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for(idx = 0; idx < details->n_settings; idx++) {
 8017532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017534:	3301      	adds	r3, #1
 8017536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017538:	69fb      	ldr	r3, [r7, #28]
 801753a:	891b      	ldrh	r3, [r3, #8]
 801753c:	461a      	mov	r2, r3
 801753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017540:	4293      	cmp	r3, r2
 8017542:	d3d8      	bcc.n	80174f6 <print_settings_details+0x156>
            }
        }
    } while((details = details->next));
 8017544:	69fb      	ldr	r3, [r7, #28]
 8017546:	699b      	ldr	r3, [r3, #24]
 8017548:	61fb      	str	r3, [r7, #28]
 801754a:	69fb      	ldr	r3, [r7, #28]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d1cf      	bne.n	80174f0 <print_settings_details+0x150>

    return reported ? Status_OK : Status_SettingDisabled;
 8017550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017554:	2b00      	cmp	r3, #0
 8017556:	d001      	beq.n	801755c <print_settings_details+0x1bc>
 8017558:	2300      	movs	r3, #0
 801755a:	e000      	b.n	801755e <print_settings_details+0x1be>
 801755c:	2335      	movs	r3, #53	; 0x35
}
 801755e:	4618      	mov	r0, r3
 8017560:	3730      	adds	r7, #48	; 0x30
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}
 8017566:	bf00      	nop
 8017568:	200016a0 	.word	0x200016a0
 801756c:	0802db18 	.word	0x0802db18
 8017570:	0802db50 	.word	0x0802db50
 8017574:	08014301 	.word	0x08014301
 8017578:	08017315 	.word	0x08017315
 801757c:	0801734f 	.word	0x0801734f

08017580 <report_settings_details>:

status_code_t report_settings_details (settings_format_t format, setting_id_t id, setting_group_t group)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b084      	sub	sp, #16
 8017584:	af00      	add	r7, sp, #0
 8017586:	4603      	mov	r3, r0
 8017588:	71fb      	strb	r3, [r7, #7]
 801758a:	460b      	mov	r3, r1
 801758c:	80bb      	strh	r3, [r7, #4]
 801758e:	4613      	mov	r3, r2
 8017590:	71bb      	strb	r3, [r7, #6]
    if(id != Setting_SettingsAll) {
 8017592:	88bb      	ldrh	r3, [r7, #4]
 8017594:	f240 228a 	movw	r2, #650	; 0x28a
 8017598:	4293      	cmp	r3, r2
 801759a:	d019      	beq.n	80175d0 <report_settings_details+0x50>
        status_code_t status = Status_OK;
 801759c:	2300      	movs	r3, #0
 801759e:	73fb      	strb	r3, [r7, #15]

        const setting_detail_t *setting = setting_get_details(id, NULL);
 80175a0:	88bb      	ldrh	r3, [r7, #4]
 80175a2:	2100      	movs	r1, #0
 80175a4:	4618      	mov	r0, r3
 80175a6:	f003 f947 	bl	801a838 <setting_get_details>
 80175aa:	60b8      	str	r0, [r7, #8]

        if(setting)
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d00a      	beq.n	80175c8 <report_settings_details+0x48>
            report_settings_detail(format, setting, id - setting->id);
 80175b2:	88bb      	ldrh	r3, [r7, #4]
 80175b4:	68ba      	ldr	r2, [r7, #8]
 80175b6:	8812      	ldrh	r2, [r2, #0]
 80175b8:	1a9b      	subs	r3, r3, r2
 80175ba:	461a      	mov	r2, r3
 80175bc:	79fb      	ldrb	r3, [r7, #7]
 80175be:	68b9      	ldr	r1, [r7, #8]
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7ff fa49 	bl	8016a58 <report_settings_detail>
 80175c6:	e001      	b.n	80175cc <report_settings_details+0x4c>
        else
            status = Status_SettingDisabled;
 80175c8:	2335      	movs	r3, #53	; 0x35
 80175ca:	73fb      	strb	r3, [r7, #15]

        return status;
 80175cc:	7bfb      	ldrb	r3, [r7, #15]
 80175ce:	e006      	b.n	80175de <report_settings_details+0x5e>
    }

    return print_settings_details(format, group);
 80175d0:	79ba      	ldrb	r2, [r7, #6]
 80175d2:	79fb      	ldrb	r3, [r7, #7]
 80175d4:	4611      	mov	r1, r2
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7ff fee2 	bl	80173a0 <print_settings_details>
 80175dc:	4603      	mov	r3, r0
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3710      	adds	r7, #16
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}
	...

080175e8 <report_setting_description>:

#ifndef NO_SETTINGS_DESCRIPTIONS

status_code_t report_setting_description (settings_format_t format, setting_id_t id)
{
 80175e8:	b590      	push	{r4, r7, lr}
 80175ea:	b085      	sub	sp, #20
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	4603      	mov	r3, r0
 80175f0:	460a      	mov	r2, r1
 80175f2:	71fb      	strb	r3, [r7, #7]
 80175f4:	4613      	mov	r3, r2
 80175f6:	80bb      	strh	r3, [r7, #4]
    const setting_detail_t *setting = setting_get_details(id, NULL);
 80175f8:	88bb      	ldrh	r3, [r7, #4]
 80175fa:	2100      	movs	r1, #0
 80175fc:	4618      	mov	r0, r3
 80175fe:	f003 f91b 	bl	801a838 <setting_get_details>
 8017602:	60f8      	str	r0, [r7, #12]
    const char *description = setting_get_description(id);
 8017604:	88bb      	ldrh	r3, [r7, #4]
 8017606:	4618      	mov	r0, r3
 8017608:	f003 f9bc 	bl	801a984 <setting_get_description>
 801760c:	60b8      	str	r0, [r7, #8]

    if(format == SettingsFormat_MachineReadable) {
 801760e:	79fb      	ldrb	r3, [r7, #7]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d113      	bne.n	801763c <report_setting_description+0x54>
        hal.stream.write("[SETTINGDESCR:");
 8017614:	4b25      	ldr	r3, [pc, #148]	; (80176ac <report_setting_description+0xc4>)
 8017616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801761a:	4825      	ldr	r0, [pc, #148]	; (80176b0 <report_setting_description+0xc8>)
 801761c:	4798      	blx	r3
        hal.stream.write(uitoa(id));
 801761e:	4b23      	ldr	r3, [pc, #140]	; (80176ac <report_setting_description+0xc4>)
 8017620:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8017624:	88bb      	ldrh	r3, [r7, #4]
 8017626:	4618      	mov	r0, r3
 8017628:	f7f8 fb78 	bl	800fd1c <uitoa>
 801762c:	4603      	mov	r3, r0
 801762e:	4618      	mov	r0, r3
 8017630:	47a0      	blx	r4
        hal.stream.write(vbar);
 8017632:	4b1e      	ldr	r3, [pc, #120]	; (80176ac <report_setting_description+0xc4>)
 8017634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017638:	481e      	ldr	r0, [pc, #120]	; (80176b4 <report_setting_description+0xcc>)
 801763a:	4798      	blx	r3
    }
//    hal.stream.write(description == NULL ? (is_setting_available(setting_get_details(id, NULL)) ? "" : "N/A") : description); // TODO?
    hal.stream.write(description ? description : (setting ? "" : "N/A"));
 801763c:	4b1b      	ldr	r3, [pc, #108]	; (80176ac <report_setting_description+0xc4>)
 801763e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d106      	bne.n	8017656 <report_setting_description+0x6e>
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d001      	beq.n	8017652 <report_setting_description+0x6a>
 801764e:	4b1a      	ldr	r3, [pc, #104]	; (80176b8 <report_setting_description+0xd0>)
 8017650:	e002      	b.n	8017658 <report_setting_description+0x70>
 8017652:	4b1a      	ldr	r3, [pc, #104]	; (80176bc <report_setting_description+0xd4>)
 8017654:	e000      	b.n	8017658 <report_setting_description+0x70>
 8017656:	68bb      	ldr	r3, [r7, #8]
 8017658:	4618      	mov	r0, r3
 801765a:	4790      	blx	r2
    if(setting && setting->flags.reboot_required)
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d016      	beq.n	8017690 <report_setting_description+0xa8>
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017668:	f003 0301 	and.w	r3, r3, #1
 801766c:	b2db      	uxtb	r3, r3
 801766e:	2b00      	cmp	r3, #0
 8017670:	d00e      	beq.n	8017690 <report_setting_description+0xa8>
        hal.stream.write(SETTINGS_HARD_RESET_REQUIRED + (description && *description != '\0' ? 0 : 4));
 8017672:	4b0e      	ldr	r3, [pc, #56]	; (80176ac <report_setting_description+0xc4>)
 8017674:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017678:	68ba      	ldr	r2, [r7, #8]
 801767a:	2a00      	cmp	r2, #0
 801767c:	d005      	beq.n	801768a <report_setting_description+0xa2>
 801767e:	68ba      	ldr	r2, [r7, #8]
 8017680:	7812      	ldrb	r2, [r2, #0]
 8017682:	2a00      	cmp	r2, #0
 8017684:	d001      	beq.n	801768a <report_setting_description+0xa2>
 8017686:	4a0e      	ldr	r2, [pc, #56]	; (80176c0 <report_setting_description+0xd8>)
 8017688:	e000      	b.n	801768c <report_setting_description+0xa4>
 801768a:	4a0e      	ldr	r2, [pc, #56]	; (80176c4 <report_setting_description+0xdc>)
 801768c:	4610      	mov	r0, r2
 801768e:	4798      	blx	r3

    if(format == SettingsFormat_MachineReadable)
 8017690:	79fb      	ldrb	r3, [r7, #7]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d104      	bne.n	80176a0 <report_setting_description+0xb8>
        hal.stream.write("]" ASCII_EOL);
 8017696:	4b05      	ldr	r3, [pc, #20]	; (80176ac <report_setting_description+0xc4>)
 8017698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801769c:	480a      	ldr	r0, [pc, #40]	; (80176c8 <report_setting_description+0xe0>)
 801769e:	4798      	blx	r3

    return Status_OK;
 80176a0:	2300      	movs	r3, #0
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	3714      	adds	r7, #20
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd90      	pop	{r4, r7, pc}
 80176aa:	bf00      	nop
 80176ac:	200016a0 	.word	0x200016a0
 80176b0:	0802db98 	.word	0x0802db98
 80176b4:	0803314c 	.word	0x0803314c
 80176b8:	0802d4b4 	.word	0x0802d4b4
 80176bc:	0802d960 	.word	0x0802d960
 80176c0:	0802da38 	.word	0x0802da38
 80176c4:	0802da3c 	.word	0x0802da3c
 80176c8:	0802d4b0 	.word	0x0802d4b0

080176cc <cmp_alarms>:

#endif

static int cmp_alarms (const void *a, const void *b)
{
 80176cc:	b480      	push	{r7}
 80176ce:	b083      	sub	sp, #12
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
 80176d4:	6039      	str	r1, [r7, #0]
  return (*(alarm_detail_t **)(a))->id - (*(alarm_detail_t **)(b))->id;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	461a      	mov	r2, r3
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	1ad3      	subs	r3, r2, r3
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	370c      	adds	r7, #12
 80176ea:	46bd      	mov	sp, r7
 80176ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f0:	4770      	bx	lr
	...

080176f4 <print_alarm>:

static void print_alarm (const alarm_detail_t *alarm, bool grbl_format)
{
 80176f4:	b590      	push	{r4, r7, lr}
 80176f6:	b083      	sub	sp, #12
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	460b      	mov	r3, r1
 80176fe:	70fb      	strb	r3, [r7, #3]
    if(grbl_format) {
 8017700:	78fb      	ldrb	r3, [r7, #3]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d01f      	beq.n	8017746 <print_alarm+0x52>
        write_quoted(uitoa(alarm->id), ",");
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	4618      	mov	r0, r3
 801770c:	f7f8 fb06 	bl	800fd1c <uitoa>
 8017710:	4603      	mov	r3, r0
 8017712:	4924      	ldr	r1, [pc, #144]	; (80177a4 <print_alarm+0xb0>)
 8017714:	4618      	mov	r0, r3
 8017716:	f7ff f939 	bl	801698c <write_quoted>
        write_quoted("N/A", ",");
 801771a:	4922      	ldr	r1, [pc, #136]	; (80177a4 <print_alarm+0xb0>)
 801771c:	4822      	ldr	r0, [pc, #136]	; (80177a8 <print_alarm+0xb4>)
 801771e:	f7ff f935 	bl	801698c <write_quoted>
        write_quoted(alarm->description ? alarm->description : "", NULL);
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	685b      	ldr	r3, [r3, #4]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d002      	beq.n	8017730 <print_alarm+0x3c>
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	685b      	ldr	r3, [r3, #4]
 801772e:	e000      	b.n	8017732 <print_alarm+0x3e>
 8017730:	4b1e      	ldr	r3, [pc, #120]	; (80177ac <print_alarm+0xb8>)
 8017732:	2100      	movs	r1, #0
 8017734:	4618      	mov	r0, r3
 8017736:	f7ff f929 	bl	801698c <write_quoted>
        hal.stream.write(ASCII_EOL);
 801773a:	4b1d      	ldr	r3, [pc, #116]	; (80177b0 <print_alarm+0xbc>)
 801773c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017740:	481c      	ldr	r0, [pc, #112]	; (80177b4 <print_alarm+0xc0>)
 8017742:	4798      	blx	r3
        hal.stream.write(vbar);
        if(alarm->description)
            hal.stream.write(alarm->description);
        hal.stream.write("]" ASCII_EOL);
    }
}
 8017744:	e029      	b.n	801779a <print_alarm+0xa6>
        hal.stream.write("[ALARMCODE:");
 8017746:	4b1a      	ldr	r3, [pc, #104]	; (80177b0 <print_alarm+0xbc>)
 8017748:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801774c:	481a      	ldr	r0, [pc, #104]	; (80177b8 <print_alarm+0xc4>)
 801774e:	4798      	blx	r3
        hal.stream.write(uitoa(alarm->id));
 8017750:	4b17      	ldr	r3, [pc, #92]	; (80177b0 <print_alarm+0xbc>)
 8017752:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	781b      	ldrb	r3, [r3, #0]
 801775a:	4618      	mov	r0, r3
 801775c:	f7f8 fade 	bl	800fd1c <uitoa>
 8017760:	4603      	mov	r3, r0
 8017762:	4618      	mov	r0, r3
 8017764:	47a0      	blx	r4
        hal.stream.write(vbar);
 8017766:	4b12      	ldr	r3, [pc, #72]	; (80177b0 <print_alarm+0xbc>)
 8017768:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801776c:	4813      	ldr	r0, [pc, #76]	; (80177bc <print_alarm+0xc8>)
 801776e:	4798      	blx	r3
        hal.stream.write(vbar);
 8017770:	4b0f      	ldr	r3, [pc, #60]	; (80177b0 <print_alarm+0xbc>)
 8017772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017776:	4811      	ldr	r0, [pc, #68]	; (80177bc <print_alarm+0xc8>)
 8017778:	4798      	blx	r3
        if(alarm->description)
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	685b      	ldr	r3, [r3, #4]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d006      	beq.n	8017790 <print_alarm+0x9c>
            hal.stream.write(alarm->description);
 8017782:	4b0b      	ldr	r3, [pc, #44]	; (80177b0 <print_alarm+0xbc>)
 8017784:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017788:	687a      	ldr	r2, [r7, #4]
 801778a:	6852      	ldr	r2, [r2, #4]
 801778c:	4610      	mov	r0, r2
 801778e:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 8017790:	4b07      	ldr	r3, [pc, #28]	; (80177b0 <print_alarm+0xbc>)
 8017792:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017796:	480a      	ldr	r0, [pc, #40]	; (80177c0 <print_alarm+0xcc>)
 8017798:	4798      	blx	r3
}
 801779a:	bf00      	nop
 801779c:	370c      	adds	r7, #12
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd90      	pop	{r4, r7, pc}
 80177a2:	bf00      	nop
 80177a4:	0802d474 	.word	0x0802d474
 80177a8:	0802d960 	.word	0x0802d960
 80177ac:	0802d4b4 	.word	0x0802d4b4
 80177b0:	200016a0 	.word	0x200016a0
 80177b4:	0802d480 	.word	0x0802d480
 80177b8:	0802dba8 	.word	0x0802dba8
 80177bc:	0803314c 	.word	0x0803314c
 80177c0:	0802d4b0 	.word	0x0802d4b0

080177c4 <report_alarm_details>:

status_code_t report_alarm_details (bool grbl_format)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b088      	sub	sp, #32
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	4603      	mov	r3, r0
 80177cc:	71fb      	strb	r3, [r7, #7]
    uint_fast16_t idx, n_alarms = 0;
 80177ce:	2300      	movs	r3, #0
 80177d0:	61bb      	str	r3, [r7, #24]
    alarm_details_t *details = grbl.on_get_alarms();
 80177d2:	4b40      	ldr	r3, [pc, #256]	; (80178d4 <report_alarm_details+0x110>)
 80177d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80177d6:	4798      	blx	r3
 80177d8:	6178      	str	r0, [r7, #20]
    alarm_detail_t **all_alarms, **palarm;

    if(grbl_format)
 80177da:	79fb      	ldrb	r3, [r7, #7]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d004      	beq.n	80177ea <report_alarm_details+0x26>
        hal.stream.write("\"Alarm Code in v1.1+\",\" Alarm Message in v1.0-\",\" Alarm Description\"" ASCII_EOL);
 80177e0:	4b3d      	ldr	r3, [pc, #244]	; (80178d8 <report_alarm_details+0x114>)
 80177e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80177e6:	483d      	ldr	r0, [pc, #244]	; (80178dc <report_alarm_details+0x118>)
 80177e8:	4798      	blx	r3

    do {
        n_alarms += details->n_alarms;
 80177ea:	697b      	ldr	r3, [r7, #20]
 80177ec:	881b      	ldrh	r3, [r3, #0]
 80177ee:	461a      	mov	r2, r3
 80177f0:	69bb      	ldr	r3, [r7, #24]
 80177f2:	4413      	add	r3, r2
 80177f4:	61bb      	str	r3, [r7, #24]
    } while((details = details->next));
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	689b      	ldr	r3, [r3, #8]
 80177fa:	617b      	str	r3, [r7, #20]
 80177fc:	697b      	ldr	r3, [r7, #20]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d1f3      	bne.n	80177ea <report_alarm_details+0x26>

    details = grbl.on_get_alarms();
 8017802:	4b34      	ldr	r3, [pc, #208]	; (80178d4 <report_alarm_details+0x110>)
 8017804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017806:	4798      	blx	r3
 8017808:	6178      	str	r0, [r7, #20]

    if((all_alarms = palarm = calloc(n_alarms, sizeof(alarm_detail_t *)))) {
 801780a:	2104      	movs	r1, #4
 801780c:	69b8      	ldr	r0, [r7, #24]
 801780e:	f00d ff95 	bl	802573c <calloc>
 8017812:	4603      	mov	r3, r0
 8017814:	613b      	str	r3, [r7, #16]
 8017816:	693b      	ldr	r3, [r7, #16]
 8017818:	60fb      	str	r3, [r7, #12]
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d038      	beq.n	8017892 <report_alarm_details+0xce>

        do {
            for(idx = 0; idx < details->n_alarms; idx++)
 8017820:	2300      	movs	r3, #0
 8017822:	61fb      	str	r3, [r7, #28]
 8017824:	e00b      	b.n	801783e <report_alarm_details+0x7a>
                *palarm++ = (alarm_detail_t *)&(details->alarms[idx]);
 8017826:	697b      	ldr	r3, [r7, #20]
 8017828:	6859      	ldr	r1, [r3, #4]
 801782a:	69fb      	ldr	r3, [r7, #28]
 801782c:	00da      	lsls	r2, r3, #3
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	1d18      	adds	r0, r3, #4
 8017832:	6138      	str	r0, [r7, #16]
 8017834:	440a      	add	r2, r1
 8017836:	601a      	str	r2, [r3, #0]
            for(idx = 0; idx < details->n_alarms; idx++)
 8017838:	69fb      	ldr	r3, [r7, #28]
 801783a:	3301      	adds	r3, #1
 801783c:	61fb      	str	r3, [r7, #28]
 801783e:	697b      	ldr	r3, [r7, #20]
 8017840:	881b      	ldrh	r3, [r3, #0]
 8017842:	461a      	mov	r2, r3
 8017844:	69fb      	ldr	r3, [r7, #28]
 8017846:	4293      	cmp	r3, r2
 8017848:	d3ed      	bcc.n	8017826 <report_alarm_details+0x62>
        } while((details = details->next));
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	689b      	ldr	r3, [r3, #8]
 801784e:	617b      	str	r3, [r7, #20]
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d1e4      	bne.n	8017820 <report_alarm_details+0x5c>

        qsort(all_alarms, n_alarms, sizeof(alarm_detail_t *), cmp_alarms);
 8017856:	4b22      	ldr	r3, [pc, #136]	; (80178e0 <report_alarm_details+0x11c>)
 8017858:	2204      	movs	r2, #4
 801785a:	69b9      	ldr	r1, [r7, #24]
 801785c:	68f8      	ldr	r0, [r7, #12]
 801785e:	f00e f889 	bl	8025974 <qsort>

        for(idx = 0; idx < n_alarms; idx++)
 8017862:	2300      	movs	r3, #0
 8017864:	61fb      	str	r3, [r7, #28]
 8017866:	e00c      	b.n	8017882 <report_alarm_details+0xbe>
            print_alarm(all_alarms[idx], grbl_format);
 8017868:	69fb      	ldr	r3, [r7, #28]
 801786a:	009b      	lsls	r3, r3, #2
 801786c:	68fa      	ldr	r2, [r7, #12]
 801786e:	4413      	add	r3, r2
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	79fa      	ldrb	r2, [r7, #7]
 8017874:	4611      	mov	r1, r2
 8017876:	4618      	mov	r0, r3
 8017878:	f7ff ff3c 	bl	80176f4 <print_alarm>
        for(idx = 0; idx < n_alarms; idx++)
 801787c:	69fb      	ldr	r3, [r7, #28]
 801787e:	3301      	adds	r3, #1
 8017880:	61fb      	str	r3, [r7, #28]
 8017882:	69fa      	ldr	r2, [r7, #28]
 8017884:	69bb      	ldr	r3, [r7, #24]
 8017886:	429a      	cmp	r2, r3
 8017888:	d3ee      	bcc.n	8017868 <report_alarm_details+0xa4>

        free(all_alarms);
 801788a:	68f8      	ldr	r0, [r7, #12]
 801788c:	f00d ff7c 	bl	8025788 <free>
 8017890:	e01b      	b.n	80178ca <report_alarm_details+0x106>

    } else do {
        for(idx = 0; idx < details->n_alarms; idx++)
 8017892:	2300      	movs	r3, #0
 8017894:	61fb      	str	r3, [r7, #28]
 8017896:	e00c      	b.n	80178b2 <report_alarm_details+0xee>
            print_alarm(&details->alarms[idx], grbl_format);
 8017898:	697b      	ldr	r3, [r7, #20]
 801789a:	685a      	ldr	r2, [r3, #4]
 801789c:	69fb      	ldr	r3, [r7, #28]
 801789e:	00db      	lsls	r3, r3, #3
 80178a0:	4413      	add	r3, r2
 80178a2:	79fa      	ldrb	r2, [r7, #7]
 80178a4:	4611      	mov	r1, r2
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7ff ff24 	bl	80176f4 <print_alarm>
        for(idx = 0; idx < details->n_alarms; idx++)
 80178ac:	69fb      	ldr	r3, [r7, #28]
 80178ae:	3301      	adds	r3, #1
 80178b0:	61fb      	str	r3, [r7, #28]
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	881b      	ldrh	r3, [r3, #0]
 80178b6:	461a      	mov	r2, r3
 80178b8:	69fb      	ldr	r3, [r7, #28]
 80178ba:	4293      	cmp	r3, r2
 80178bc:	d3ec      	bcc.n	8017898 <report_alarm_details+0xd4>
    } while((details = details->next));
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	689b      	ldr	r3, [r3, #8]
 80178c2:	617b      	str	r3, [r7, #20]
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d1e3      	bne.n	8017892 <report_alarm_details+0xce>

    return Status_OK;
 80178ca:	2300      	movs	r3, #0
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	3720      	adds	r7, #32
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	200015b8 	.word	0x200015b8
 80178d8:	200016a0 	.word	0x200016a0
 80178dc:	0802dbb4 	.word	0x0802dbb4
 80178e0:	080176cd 	.word	0x080176cd

080178e4 <cmp_errors>:

static int cmp_errors (const void *a, const void *b)
{
 80178e4:	b480      	push	{r7}
 80178e6:	b083      	sub	sp, #12
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	6039      	str	r1, [r7, #0]
  return (*(status_detail_t **)(a))->id - (*(status_detail_t **)(b))->id;
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	781b      	ldrb	r3, [r3, #0]
 80178f4:	461a      	mov	r2, r3
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	781b      	ldrb	r3, [r3, #0]
 80178fc:	1ad3      	subs	r3, r2, r3
}
 80178fe:	4618      	mov	r0, r3
 8017900:	370c      	adds	r7, #12
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr
	...

0801790c <print_error>:

static void print_error (const status_detail_t *error, bool grbl_format)
{
 801790c:	b590      	push	{r4, r7, lr}
 801790e:	b083      	sub	sp, #12
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
 8017914:	460b      	mov	r3, r1
 8017916:	70fb      	strb	r3, [r7, #3]
    if(grbl_format) {
 8017918:	78fb      	ldrb	r3, [r7, #3]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d01f      	beq.n	801795e <print_error+0x52>
        write_quoted(uitoa(error->id), ",");
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	781b      	ldrb	r3, [r3, #0]
 8017922:	4618      	mov	r0, r3
 8017924:	f7f8 f9fa 	bl	800fd1c <uitoa>
 8017928:	4603      	mov	r3, r0
 801792a:	4924      	ldr	r1, [pc, #144]	; (80179bc <print_error+0xb0>)
 801792c:	4618      	mov	r0, r3
 801792e:	f7ff f82d 	bl	801698c <write_quoted>
        write_quoted("N/A", ",");
 8017932:	4922      	ldr	r1, [pc, #136]	; (80179bc <print_error+0xb0>)
 8017934:	4822      	ldr	r0, [pc, #136]	; (80179c0 <print_error+0xb4>)
 8017936:	f7ff f829 	bl	801698c <write_quoted>
        write_quoted(error->description ? error->description : "", NULL);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	685b      	ldr	r3, [r3, #4]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d002      	beq.n	8017948 <print_error+0x3c>
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	685b      	ldr	r3, [r3, #4]
 8017946:	e000      	b.n	801794a <print_error+0x3e>
 8017948:	4b1e      	ldr	r3, [pc, #120]	; (80179c4 <print_error+0xb8>)
 801794a:	2100      	movs	r1, #0
 801794c:	4618      	mov	r0, r3
 801794e:	f7ff f81d 	bl	801698c <write_quoted>
        hal.stream.write(ASCII_EOL);
 8017952:	4b1d      	ldr	r3, [pc, #116]	; (80179c8 <print_error+0xbc>)
 8017954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017958:	481c      	ldr	r0, [pc, #112]	; (80179cc <print_error+0xc0>)
 801795a:	4798      	blx	r3
        hal.stream.write(vbar);
        if(error->description)
            hal.stream.write(error->description);
        hal.stream.write("]" ASCII_EOL);
    }
}
 801795c:	e029      	b.n	80179b2 <print_error+0xa6>
        hal.stream.write("[ERRORCODE:");
 801795e:	4b1a      	ldr	r3, [pc, #104]	; (80179c8 <print_error+0xbc>)
 8017960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017964:	481a      	ldr	r0, [pc, #104]	; (80179d0 <print_error+0xc4>)
 8017966:	4798      	blx	r3
        hal.stream.write(uitoa(error->id));
 8017968:	4b17      	ldr	r3, [pc, #92]	; (80179c8 <print_error+0xbc>)
 801796a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	781b      	ldrb	r3, [r3, #0]
 8017972:	4618      	mov	r0, r3
 8017974:	f7f8 f9d2 	bl	800fd1c <uitoa>
 8017978:	4603      	mov	r3, r0
 801797a:	4618      	mov	r0, r3
 801797c:	47a0      	blx	r4
        hal.stream.write(vbar);
 801797e:	4b12      	ldr	r3, [pc, #72]	; (80179c8 <print_error+0xbc>)
 8017980:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017984:	4813      	ldr	r0, [pc, #76]	; (80179d4 <print_error+0xc8>)
 8017986:	4798      	blx	r3
        hal.stream.write(vbar);
 8017988:	4b0f      	ldr	r3, [pc, #60]	; (80179c8 <print_error+0xbc>)
 801798a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801798e:	4811      	ldr	r0, [pc, #68]	; (80179d4 <print_error+0xc8>)
 8017990:	4798      	blx	r3
        if(error->description)
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	685b      	ldr	r3, [r3, #4]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d006      	beq.n	80179a8 <print_error+0x9c>
            hal.stream.write(error->description);
 801799a:	4b0b      	ldr	r3, [pc, #44]	; (80179c8 <print_error+0xbc>)
 801799c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80179a0:	687a      	ldr	r2, [r7, #4]
 80179a2:	6852      	ldr	r2, [r2, #4]
 80179a4:	4610      	mov	r0, r2
 80179a6:	4798      	blx	r3
        hal.stream.write("]" ASCII_EOL);
 80179a8:	4b07      	ldr	r3, [pc, #28]	; (80179c8 <print_error+0xbc>)
 80179aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80179ae:	480a      	ldr	r0, [pc, #40]	; (80179d8 <print_error+0xcc>)
 80179b0:	4798      	blx	r3
}
 80179b2:	bf00      	nop
 80179b4:	370c      	adds	r7, #12
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd90      	pop	{r4, r7, pc}
 80179ba:	bf00      	nop
 80179bc:	0802d474 	.word	0x0802d474
 80179c0:	0802d960 	.word	0x0802d960
 80179c4:	0802d4b4 	.word	0x0802d4b4
 80179c8:	200016a0 	.word	0x200016a0
 80179cc:	0802d480 	.word	0x0802d480
 80179d0:	0802dbfc 	.word	0x0802dbfc
 80179d4:	0803314c 	.word	0x0803314c
 80179d8:	0802d4b0 	.word	0x0802d4b0

080179dc <report_error_details>:

status_code_t report_error_details (bool grbl_format)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b088      	sub	sp, #32
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	4603      	mov	r3, r0
 80179e4:	71fb      	strb	r3, [r7, #7]
    uint_fast16_t idx, n_errors = 0;
 80179e6:	2300      	movs	r3, #0
 80179e8:	61bb      	str	r3, [r7, #24]
    error_details_t *details = grbl.on_get_errors();
 80179ea:	4b40      	ldr	r3, [pc, #256]	; (8017aec <report_error_details+0x110>)
 80179ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80179ee:	4798      	blx	r3
 80179f0:	6178      	str	r0, [r7, #20]
    status_detail_t **all_errors, **perror;

    if(grbl_format)
 80179f2:	79fb      	ldrb	r3, [r7, #7]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d004      	beq.n	8017a02 <report_error_details+0x26>
        hal.stream.write("\"Error Code in v1.1+\",\"Error Message in v1.0-\",\"Error Description\"" ASCII_EOL);
 80179f8:	4b3d      	ldr	r3, [pc, #244]	; (8017af0 <report_error_details+0x114>)
 80179fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80179fe:	483d      	ldr	r0, [pc, #244]	; (8017af4 <report_error_details+0x118>)
 8017a00:	4798      	blx	r3

    do {
        n_errors += details->n_errors;
 8017a02:	697b      	ldr	r3, [r7, #20]
 8017a04:	881b      	ldrh	r3, [r3, #0]
 8017a06:	461a      	mov	r2, r3
 8017a08:	69bb      	ldr	r3, [r7, #24]
 8017a0a:	4413      	add	r3, r2
 8017a0c:	61bb      	str	r3, [r7, #24]
    } while((details = details->next));
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	689b      	ldr	r3, [r3, #8]
 8017a12:	617b      	str	r3, [r7, #20]
 8017a14:	697b      	ldr	r3, [r7, #20]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d1f3      	bne.n	8017a02 <report_error_details+0x26>

    details = grbl.on_get_errors();
 8017a1a:	4b34      	ldr	r3, [pc, #208]	; (8017aec <report_error_details+0x110>)
 8017a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a1e:	4798      	blx	r3
 8017a20:	6178      	str	r0, [r7, #20]

    if((all_errors = perror = calloc(n_errors, sizeof(status_detail_t *)))) {
 8017a22:	2104      	movs	r1, #4
 8017a24:	69b8      	ldr	r0, [r7, #24]
 8017a26:	f00d fe89 	bl	802573c <calloc>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	613b      	str	r3, [r7, #16]
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	60fb      	str	r3, [r7, #12]
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d038      	beq.n	8017aaa <report_error_details+0xce>

        do {
            for(idx = 0; idx < details->n_errors; idx++)
 8017a38:	2300      	movs	r3, #0
 8017a3a:	61fb      	str	r3, [r7, #28]
 8017a3c:	e00b      	b.n	8017a56 <report_error_details+0x7a>
                *perror++ = (status_detail_t *)&(details->errors[idx]);
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	6859      	ldr	r1, [r3, #4]
 8017a42:	69fb      	ldr	r3, [r7, #28]
 8017a44:	00da      	lsls	r2, r3, #3
 8017a46:	693b      	ldr	r3, [r7, #16]
 8017a48:	1d18      	adds	r0, r3, #4
 8017a4a:	6138      	str	r0, [r7, #16]
 8017a4c:	440a      	add	r2, r1
 8017a4e:	601a      	str	r2, [r3, #0]
            for(idx = 0; idx < details->n_errors; idx++)
 8017a50:	69fb      	ldr	r3, [r7, #28]
 8017a52:	3301      	adds	r3, #1
 8017a54:	61fb      	str	r3, [r7, #28]
 8017a56:	697b      	ldr	r3, [r7, #20]
 8017a58:	881b      	ldrh	r3, [r3, #0]
 8017a5a:	461a      	mov	r2, r3
 8017a5c:	69fb      	ldr	r3, [r7, #28]
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	d3ed      	bcc.n	8017a3e <report_error_details+0x62>
        } while((details = details->next));
 8017a62:	697b      	ldr	r3, [r7, #20]
 8017a64:	689b      	ldr	r3, [r3, #8]
 8017a66:	617b      	str	r3, [r7, #20]
 8017a68:	697b      	ldr	r3, [r7, #20]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d1e4      	bne.n	8017a38 <report_error_details+0x5c>

        qsort(all_errors, n_errors, sizeof(status_detail_t *), cmp_errors);
 8017a6e:	4b22      	ldr	r3, [pc, #136]	; (8017af8 <report_error_details+0x11c>)
 8017a70:	2204      	movs	r2, #4
 8017a72:	69b9      	ldr	r1, [r7, #24]
 8017a74:	68f8      	ldr	r0, [r7, #12]
 8017a76:	f00d ff7d 	bl	8025974 <qsort>

        for(idx = 0; idx < n_errors; idx++)
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	61fb      	str	r3, [r7, #28]
 8017a7e:	e00c      	b.n	8017a9a <report_error_details+0xbe>
            print_error(all_errors[idx], grbl_format);
 8017a80:	69fb      	ldr	r3, [r7, #28]
 8017a82:	009b      	lsls	r3, r3, #2
 8017a84:	68fa      	ldr	r2, [r7, #12]
 8017a86:	4413      	add	r3, r2
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	79fa      	ldrb	r2, [r7, #7]
 8017a8c:	4611      	mov	r1, r2
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f7ff ff3c 	bl	801790c <print_error>
        for(idx = 0; idx < n_errors; idx++)
 8017a94:	69fb      	ldr	r3, [r7, #28]
 8017a96:	3301      	adds	r3, #1
 8017a98:	61fb      	str	r3, [r7, #28]
 8017a9a:	69fa      	ldr	r2, [r7, #28]
 8017a9c:	69bb      	ldr	r3, [r7, #24]
 8017a9e:	429a      	cmp	r2, r3
 8017aa0:	d3ee      	bcc.n	8017a80 <report_error_details+0xa4>

        free(all_errors);
 8017aa2:	68f8      	ldr	r0, [r7, #12]
 8017aa4:	f00d fe70 	bl	8025788 <free>
 8017aa8:	e01b      	b.n	8017ae2 <report_error_details+0x106>

    } else do {
        for(idx = 0; idx < details->n_errors; idx++)
 8017aaa:	2300      	movs	r3, #0
 8017aac:	61fb      	str	r3, [r7, #28]
 8017aae:	e00c      	b.n	8017aca <report_error_details+0xee>
            print_error(&details->errors[idx], grbl_format);
 8017ab0:	697b      	ldr	r3, [r7, #20]
 8017ab2:	685a      	ldr	r2, [r3, #4]
 8017ab4:	69fb      	ldr	r3, [r7, #28]
 8017ab6:	00db      	lsls	r3, r3, #3
 8017ab8:	4413      	add	r3, r2
 8017aba:	79fa      	ldrb	r2, [r7, #7]
 8017abc:	4611      	mov	r1, r2
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7ff ff24 	bl	801790c <print_error>
        for(idx = 0; idx < details->n_errors; idx++)
 8017ac4:	69fb      	ldr	r3, [r7, #28]
 8017ac6:	3301      	adds	r3, #1
 8017ac8:	61fb      	str	r3, [r7, #28]
 8017aca:	697b      	ldr	r3, [r7, #20]
 8017acc:	881b      	ldrh	r3, [r3, #0]
 8017ace:	461a      	mov	r2, r3
 8017ad0:	69fb      	ldr	r3, [r7, #28]
 8017ad2:	4293      	cmp	r3, r2
 8017ad4:	d3ec      	bcc.n	8017ab0 <report_error_details+0xd4>
    } while((details = details->next));
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	689b      	ldr	r3, [r3, #8]
 8017ada:	617b      	str	r3, [r7, #20]
 8017adc:	697b      	ldr	r3, [r7, #20]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d1e3      	bne.n	8017aaa <report_error_details+0xce>

    return Status_OK;
 8017ae2:	2300      	movs	r3, #0
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	3720      	adds	r7, #32
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	bd80      	pop	{r7, pc}
 8017aec:	200015b8 	.word	0x200015b8
 8017af0:	200016a0 	.word	0x200016a0
 8017af4:	0802dc08 	.word	0x0802dc08
 8017af8:	080178e5 	.word	0x080178e5

08017afc <print_setting_group>:

static void print_setting_group (const setting_group_detail_t *group, char *prefix)
{
 8017afc:	b590      	push	{r4, r7, lr}
 8017afe:	b083      	sub	sp, #12
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
    if(settings_is_group_available(group->id)) {
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	785b      	ldrb	r3, [r3, #1]
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f002 fd56 	bl	801a5bc <settings_is_group_available>
 8017b10:	4603      	mov	r3, r0
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d049      	beq.n	8017baa <print_setting_group+0xae>
        if(!prefix) {
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d131      	bne.n	8017b80 <print_setting_group+0x84>
            hal.stream.write("[SETTINGGROUP:");
 8017b1c:	4b25      	ldr	r3, [pc, #148]	; (8017bb4 <print_setting_group+0xb8>)
 8017b1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017b22:	4825      	ldr	r0, [pc, #148]	; (8017bb8 <print_setting_group+0xbc>)
 8017b24:	4798      	blx	r3
            hal.stream.write(uitoa(group->id));
 8017b26:	4b23      	ldr	r3, [pc, #140]	; (8017bb4 <print_setting_group+0xb8>)
 8017b28:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	785b      	ldrb	r3, [r3, #1]
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7f8 f8f3 	bl	800fd1c <uitoa>
 8017b36:	4603      	mov	r3, r0
 8017b38:	4618      	mov	r0, r3
 8017b3a:	47a0      	blx	r4
            hal.stream.write(vbar);
 8017b3c:	4b1d      	ldr	r3, [pc, #116]	; (8017bb4 <print_setting_group+0xb8>)
 8017b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017b42:	481e      	ldr	r0, [pc, #120]	; (8017bbc <print_setting_group+0xc0>)
 8017b44:	4798      	blx	r3
            hal.stream.write(uitoa(group->parent));
 8017b46:	4b1b      	ldr	r3, [pc, #108]	; (8017bb4 <print_setting_group+0xb8>)
 8017b48:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	781b      	ldrb	r3, [r3, #0]
 8017b50:	4618      	mov	r0, r3
 8017b52:	f7f8 f8e3 	bl	800fd1c <uitoa>
 8017b56:	4603      	mov	r3, r0
 8017b58:	4618      	mov	r0, r3
 8017b5a:	47a0      	blx	r4
            hal.stream.write(vbar);
 8017b5c:	4b15      	ldr	r3, [pc, #84]	; (8017bb4 <print_setting_group+0xb8>)
 8017b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017b62:	4816      	ldr	r0, [pc, #88]	; (8017bbc <print_setting_group+0xc0>)
 8017b64:	4798      	blx	r3
            hal.stream.write(group->name);
 8017b66:	4b13      	ldr	r3, [pc, #76]	; (8017bb4 <print_setting_group+0xb8>)
 8017b68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	6852      	ldr	r2, [r2, #4]
 8017b70:	4610      	mov	r0, r2
 8017b72:	4798      	blx	r3
            hal.stream.write("]" ASCII_EOL);
 8017b74:	4b0f      	ldr	r3, [pc, #60]	; (8017bb4 <print_setting_group+0xb8>)
 8017b76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017b7a:	4811      	ldr	r0, [pc, #68]	; (8017bc0 <print_setting_group+0xc4>)
 8017b7c:	4798      	blx	r3
            hal.stream.write(prefix);
            hal.stream.write(group->name);
            hal.stream.write(ASCII_EOL);
        }
    }
}
 8017b7e:	e014      	b.n	8017baa <print_setting_group+0xae>
        } else if(group->id != Group_Root) {
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	785b      	ldrb	r3, [r3, #1]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d010      	beq.n	8017baa <print_setting_group+0xae>
            hal.stream.write(prefix);
 8017b88:	4b0a      	ldr	r3, [pc, #40]	; (8017bb4 <print_setting_group+0xb8>)
 8017b8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017b8e:	6838      	ldr	r0, [r7, #0]
 8017b90:	4798      	blx	r3
            hal.stream.write(group->name);
 8017b92:	4b08      	ldr	r3, [pc, #32]	; (8017bb4 <print_setting_group+0xb8>)
 8017b94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017b98:	687a      	ldr	r2, [r7, #4]
 8017b9a:	6852      	ldr	r2, [r2, #4]
 8017b9c:	4610      	mov	r0, r2
 8017b9e:	4798      	blx	r3
            hal.stream.write(ASCII_EOL);
 8017ba0:	4b04      	ldr	r3, [pc, #16]	; (8017bb4 <print_setting_group+0xb8>)
 8017ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017ba6:	4807      	ldr	r0, [pc, #28]	; (8017bc4 <print_setting_group+0xc8>)
 8017ba8:	4798      	blx	r3
}
 8017baa:	bf00      	nop
 8017bac:	370c      	adds	r7, #12
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd90      	pop	{r4, r7, pc}
 8017bb2:	bf00      	nop
 8017bb4:	200016a0 	.word	0x200016a0
 8017bb8:	0802dc50 	.word	0x0802dc50
 8017bbc:	0803314c 	.word	0x0803314c
 8017bc0:	0802d4b0 	.word	0x0802d4b0
 8017bc4:	0802d480 	.word	0x0802d480

08017bc8 <cmp_setting_group_id>:

static int cmp_setting_group_id (const void *a, const void *b)
{
 8017bc8:	b480      	push	{r7}
 8017bca:	b083      	sub	sp, #12
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	6039      	str	r1, [r7, #0]
    return (*(setting_group_detail_t **)(a))->id - (*(setting_group_detail_t **)(b))->id;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	785b      	ldrb	r3, [r3, #1]
 8017bd8:	461a      	mov	r2, r3
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	785b      	ldrb	r3, [r3, #1]
 8017be0:	1ad3      	subs	r3, r2, r3
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	370c      	adds	r7, #12
 8017be6:	46bd      	mov	sp, r7
 8017be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bec:	4770      	bx	lr

08017bee <cmp_setting_group_name>:

static int cmp_setting_group_name (const void *a, const void *b)
{
 8017bee:	b580      	push	{r7, lr}
 8017bf0:	b082      	sub	sp, #8
 8017bf2:	af00      	add	r7, sp, #0
 8017bf4:	6078      	str	r0, [r7, #4]
 8017bf6:	6039      	str	r1, [r7, #0]
    return strcmp((*(setting_group_detail_t **)(a))->name, (*(setting_group_detail_t **)(b))->name);
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	685a      	ldr	r2, [r3, #4]
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	685b      	ldr	r3, [r3, #4]
 8017c04:	4619      	mov	r1, r3
 8017c06:	4610      	mov	r0, r2
 8017c08:	f7e8 fb36 	bl	8000278 <strcmp>
 8017c0c:	4603      	mov	r3, r0
}
 8017c0e:	4618      	mov	r0, r3
 8017c10:	3708      	adds	r7, #8
 8017c12:	46bd      	mov	sp, r7
 8017c14:	bd80      	pop	{r7, pc}

08017c16 <group_is_dup>:

static bool group_is_dup (setting_group_detail_t **groups, setting_group_t group)
{
 8017c16:	b480      	push	{r7}
 8017c18:	b083      	sub	sp, #12
 8017c1a:	af00      	add	r7, sp, #0
 8017c1c:	6078      	str	r0, [r7, #4]
 8017c1e:	460b      	mov	r3, r1
 8017c20:	70fb      	strb	r3, [r7, #3]
    while(*groups) {
 8017c22:	e00a      	b.n	8017c3a <group_is_dup+0x24>
        if((*groups)->id == group)
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	785b      	ldrb	r3, [r3, #1]
 8017c2a:	78fa      	ldrb	r2, [r7, #3]
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	d101      	bne.n	8017c34 <group_is_dup+0x1e>
            return true;
 8017c30:	2301      	movs	r3, #1
 8017c32:	e007      	b.n	8017c44 <group_is_dup+0x2e>
        groups++;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	3304      	adds	r3, #4
 8017c38:	607b      	str	r3, [r7, #4]
    while(*groups) {
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d1f0      	bne.n	8017c24 <group_is_dup+0xe>
    }

    return false;
 8017c42:	2300      	movs	r3, #0
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	370c      	adds	r7, #12
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4e:	4770      	bx	lr

08017c50 <report_setting_group_details>:

status_code_t report_setting_group_details (bool by_id, char *prefix)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b088      	sub	sp, #32
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	4603      	mov	r3, r0
 8017c58:	6039      	str	r1, [r7, #0]
 8017c5a:	71fb      	strb	r3, [r7, #7]
    uint_fast16_t idx, n_groups = 0;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	61bb      	str	r3, [r7, #24]
    setting_details_t *details = settings_get_details();
 8017c60:	f000 fbca 	bl	80183f8 <settings_get_details>
 8017c64:	6178      	str	r0, [r7, #20]
    setting_group_detail_t **all_groups, **group;

    do {
        n_groups += details->n_groups;
 8017c66:	697b      	ldr	r3, [r7, #20]
 8017c68:	781b      	ldrb	r3, [r3, #0]
 8017c6a:	461a      	mov	r2, r3
 8017c6c:	69bb      	ldr	r3, [r7, #24]
 8017c6e:	4413      	add	r3, r2
 8017c70:	61bb      	str	r3, [r7, #24]
    } while((details = details->next));
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	699b      	ldr	r3, [r3, #24]
 8017c76:	617b      	str	r3, [r7, #20]
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d1f3      	bne.n	8017c66 <report_setting_group_details+0x16>

    details = settings_get_details();
 8017c7e:	f000 fbbb 	bl	80183f8 <settings_get_details>
 8017c82:	6178      	str	r0, [r7, #20]

    if((all_groups = group = calloc(n_groups, sizeof(setting_group_detail_t *)))) {
 8017c84:	2104      	movs	r1, #4
 8017c86:	69b8      	ldr	r0, [r7, #24]
 8017c88:	f00d fd58 	bl	802573c <calloc>
 8017c8c:	4603      	mov	r3, r0
 8017c8e:	613b      	str	r3, [r7, #16]
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	60bb      	str	r3, [r7, #8]
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d053      	beq.n	8017d42 <report_setting_group_details+0xf2>

        uint_fast16_t idx;

        do {
            for(idx = 0; idx < details->n_groups; idx++) {
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	60fb      	str	r3, [r7, #12]
 8017c9e:	e022      	b.n	8017ce6 <report_setting_group_details+0x96>
                if(!group_is_dup(all_groups, details->groups[idx].id))
 8017ca0:	697b      	ldr	r3, [r7, #20]
 8017ca2:	6859      	ldr	r1, [r3, #4]
 8017ca4:	68fa      	ldr	r2, [r7, #12]
 8017ca6:	4613      	mov	r3, r2
 8017ca8:	005b      	lsls	r3, r3, #1
 8017caa:	4413      	add	r3, r2
 8017cac:	009b      	lsls	r3, r3, #2
 8017cae:	440b      	add	r3, r1
 8017cb0:	785b      	ldrb	r3, [r3, #1]
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	68b8      	ldr	r0, [r7, #8]
 8017cb6:	f7ff ffae 	bl	8017c16 <group_is_dup>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	f083 0301 	eor.w	r3, r3, #1
 8017cc0:	b2db      	uxtb	r3, r3
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d00c      	beq.n	8017ce0 <report_setting_group_details+0x90>
                    *group++ = (setting_group_detail_t *)&details->groups[idx];
 8017cc6:	697b      	ldr	r3, [r7, #20]
 8017cc8:	6859      	ldr	r1, [r3, #4]
 8017cca:	68fa      	ldr	r2, [r7, #12]
 8017ccc:	4613      	mov	r3, r2
 8017cce:	005b      	lsls	r3, r3, #1
 8017cd0:	4413      	add	r3, r2
 8017cd2:	009b      	lsls	r3, r3, #2
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	693b      	ldr	r3, [r7, #16]
 8017cd8:	1d1a      	adds	r2, r3, #4
 8017cda:	613a      	str	r2, [r7, #16]
 8017cdc:	180a      	adds	r2, r1, r0
 8017cde:	601a      	str	r2, [r3, #0]
            for(idx = 0; idx < details->n_groups; idx++) {
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	3301      	adds	r3, #1
 8017ce4:	60fb      	str	r3, [r7, #12]
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	781b      	ldrb	r3, [r3, #0]
 8017cea:	461a      	mov	r2, r3
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	d3d6      	bcc.n	8017ca0 <report_setting_group_details+0x50>
            }
        } while((details = details->next));
 8017cf2:	697b      	ldr	r3, [r7, #20]
 8017cf4:	699b      	ldr	r3, [r3, #24]
 8017cf6:	617b      	str	r3, [r7, #20]
 8017cf8:	697b      	ldr	r3, [r7, #20]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d1cd      	bne.n	8017c9a <report_setting_group_details+0x4a>

        qsort(all_groups, n_groups, sizeof(setting_group_detail_t *), by_id ? cmp_setting_group_id : cmp_setting_group_name);
 8017cfe:	79fb      	ldrb	r3, [r7, #7]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d001      	beq.n	8017d08 <report_setting_group_details+0xb8>
 8017d04:	4b20      	ldr	r3, [pc, #128]	; (8017d88 <report_setting_group_details+0x138>)
 8017d06:	e000      	b.n	8017d0a <report_setting_group_details+0xba>
 8017d08:	4b20      	ldr	r3, [pc, #128]	; (8017d8c <report_setting_group_details+0x13c>)
 8017d0a:	2204      	movs	r2, #4
 8017d0c:	69b9      	ldr	r1, [r7, #24]
 8017d0e:	68b8      	ldr	r0, [r7, #8]
 8017d10:	f00d fe30 	bl	8025974 <qsort>

        for(idx = 0; idx < n_groups; idx++)
 8017d14:	2300      	movs	r3, #0
 8017d16:	60fb      	str	r3, [r7, #12]
 8017d18:	e00b      	b.n	8017d32 <report_setting_group_details+0xe2>
            print_setting_group(all_groups[idx], prefix);
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	009b      	lsls	r3, r3, #2
 8017d1e:	68ba      	ldr	r2, [r7, #8]
 8017d20:	4413      	add	r3, r2
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	6839      	ldr	r1, [r7, #0]
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7ff fee8 	bl	8017afc <print_setting_group>
        for(idx = 0; idx < n_groups; idx++)
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	3301      	adds	r3, #1
 8017d30:	60fb      	str	r3, [r7, #12]
 8017d32:	68fa      	ldr	r2, [r7, #12]
 8017d34:	69bb      	ldr	r3, [r7, #24]
 8017d36:	429a      	cmp	r2, r3
 8017d38:	d3ef      	bcc.n	8017d1a <report_setting_group_details+0xca>

        free(all_groups);
 8017d3a:	68b8      	ldr	r0, [r7, #8]
 8017d3c:	f00d fd24 	bl	8025788 <free>
 8017d40:	e01d      	b.n	8017d7e <report_setting_group_details+0x12e>

    } else do {
        for(idx = 0; idx < details->n_groups; idx++)
 8017d42:	2300      	movs	r3, #0
 8017d44:	61fb      	str	r3, [r7, #28]
 8017d46:	e00e      	b.n	8017d66 <report_setting_group_details+0x116>
            print_setting_group(&details->groups[idx], prefix);
 8017d48:	697b      	ldr	r3, [r7, #20]
 8017d4a:	6859      	ldr	r1, [r3, #4]
 8017d4c:	69fa      	ldr	r2, [r7, #28]
 8017d4e:	4613      	mov	r3, r2
 8017d50:	005b      	lsls	r3, r3, #1
 8017d52:	4413      	add	r3, r2
 8017d54:	009b      	lsls	r3, r3, #2
 8017d56:	440b      	add	r3, r1
 8017d58:	6839      	ldr	r1, [r7, #0]
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7ff fece 	bl	8017afc <print_setting_group>
        for(idx = 0; idx < details->n_groups; idx++)
 8017d60:	69fb      	ldr	r3, [r7, #28]
 8017d62:	3301      	adds	r3, #1
 8017d64:	61fb      	str	r3, [r7, #28]
 8017d66:	697b      	ldr	r3, [r7, #20]
 8017d68:	781b      	ldrb	r3, [r3, #0]
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	69fb      	ldr	r3, [r7, #28]
 8017d6e:	4293      	cmp	r3, r2
 8017d70:	d3ea      	bcc.n	8017d48 <report_setting_group_details+0xf8>
    } while((details = details->next));
 8017d72:	697b      	ldr	r3, [r7, #20]
 8017d74:	699b      	ldr	r3, [r3, #24]
 8017d76:	617b      	str	r3, [r7, #20]
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d1e1      	bne.n	8017d42 <report_setting_group_details+0xf2>

    return Status_OK;
 8017d7e:	2300      	movs	r3, #0
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3720      	adds	r7, #32
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}
 8017d88:	08017bc9 	.word	0x08017bc9
 8017d8c:	08017bef 	.word	0x08017bef

08017d90 <add_limits>:

static char *add_limits (char *buf, limit_signals_t limits)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b082      	sub	sp, #8
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
 8017d98:	6039      	str	r1, [r7, #0]
    buf = axis_signals_tostring(buf, limits.min);
 8017d9a:	7839      	ldrb	r1, [r7, #0]
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f7fb ffb1 	bl	8013d04 <axis_signals_tostring>
 8017da2:	6078      	str	r0, [r7, #4]
    *buf++ = ',';
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	1c5a      	adds	r2, r3, #1
 8017da8:	607a      	str	r2, [r7, #4]
 8017daa:	222c      	movs	r2, #44	; 0x2c
 8017dac:	701a      	strb	r2, [r3, #0]
    buf = axis_signals_tostring(buf, limits.max);
 8017dae:	7879      	ldrb	r1, [r7, #1]
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f7fb ffa7 	bl	8013d04 <axis_signals_tostring>
 8017db6:	6078      	str	r0, [r7, #4]
    *buf++ = ',';
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	1c5a      	adds	r2, r3, #1
 8017dbc:	607a      	str	r2, [r7, #4]
 8017dbe:	222c      	movs	r2, #44	; 0x2c
 8017dc0:	701a      	strb	r2, [r3, #0]
    buf = axis_signals_tostring(buf, limits.min2);
 8017dc2:	78b9      	ldrb	r1, [r7, #2]
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f7fb ff9d 	bl	8013d04 <axis_signals_tostring>
 8017dca:	6078      	str	r0, [r7, #4]
    *buf++ = ',';
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	1c5a      	adds	r2, r3, #1
 8017dd0:	607a      	str	r2, [r7, #4]
 8017dd2:	222c      	movs	r2, #44	; 0x2c
 8017dd4:	701a      	strb	r2, [r3, #0]
    buf = axis_signals_tostring(buf, limits.max2);
 8017dd6:	78f9      	ldrb	r1, [r7, #3]
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f7fb ff93 	bl	8013d04 <axis_signals_tostring>
 8017dde:	6078      	str	r0, [r7, #4]

    return buf;
 8017de0:	687b      	ldr	r3, [r7, #4]
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	3708      	adds	r7, #8
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}
	...

08017dec <report_last_signals_event>:

status_code_t report_last_signals_event (sys_state_t state, char *args)
{
 8017dec:	b590      	push	{r4, r7, lr}
 8017dee:	b085      	sub	sp, #20
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
 8017df4:	6039      	str	r1, [r7, #0]
    char *append = &buf[12];
 8017df6:	4b16      	ldr	r3, [pc, #88]	; (8017e50 <report_last_signals_event+0x64>)
 8017df8:	60fb      	str	r3, [r7, #12]

    strcpy(buf, "[LASTEVENTS:");
 8017dfa:	4a16      	ldr	r2, [pc, #88]	; (8017e54 <report_last_signals_event+0x68>)
 8017dfc:	4b16      	ldr	r3, [pc, #88]	; (8017e58 <report_last_signals_event+0x6c>)
 8017dfe:	4614      	mov	r4, r2
 8017e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e02:	c407      	stmia	r4!, {r0, r1, r2}
 8017e04:	7023      	strb	r3, [r4, #0]

    append = control_signals_tostring(append, sys.last_event.control);
 8017e06:	4b15      	ldr	r3, [pc, #84]	; (8017e5c <report_last_signals_event+0x70>)
 8017e08:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
 8017e0c:	68f8      	ldr	r0, [r7, #12]
 8017e0e:	f7fb ffab 	bl	8013d68 <control_signals_tostring>
 8017e12:	60f8      	str	r0, [r7, #12]
    *append++ = ',';
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	1c5a      	adds	r2, r3, #1
 8017e18:	60fa      	str	r2, [r7, #12]
 8017e1a:	222c      	movs	r2, #44	; 0x2c
 8017e1c:	701a      	strb	r2, [r3, #0]
    append = add_limits(append, sys.last_event.limits);
 8017e1e:	4b0f      	ldr	r3, [pc, #60]	; (8017e5c <report_last_signals_event+0x70>)
 8017e20:	f8d3 2082 	ldr.w	r2, [r3, #130]	; 0x82
 8017e24:	4613      	mov	r3, r2
 8017e26:	4619      	mov	r1, r3
 8017e28:	68f8      	ldr	r0, [r7, #12]
 8017e2a:	f7ff ffb1 	bl	8017d90 <add_limits>
 8017e2e:	60f8      	str	r0, [r7, #12]

    hal.stream.write(buf);
 8017e30:	4b0b      	ldr	r3, [pc, #44]	; (8017e60 <report_last_signals_event+0x74>)
 8017e32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017e36:	4807      	ldr	r0, [pc, #28]	; (8017e54 <report_last_signals_event+0x68>)
 8017e38:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8017e3a:	4b09      	ldr	r3, [pc, #36]	; (8017e60 <report_last_signals_event+0x74>)
 8017e3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017e40:	4808      	ldr	r0, [pc, #32]	; (8017e64 <report_last_signals_event+0x78>)
 8017e42:	4798      	blx	r3

    return Status_OK;
 8017e44:	2300      	movs	r3, #0
}
 8017e46:	4618      	mov	r0, r3
 8017e48:	3714      	adds	r7, #20
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd90      	pop	{r4, r7, pc}
 8017e4e:	bf00      	nop
 8017e50:	20001c84 	.word	0x20001c84
 8017e54:	20001c78 	.word	0x20001c78
 8017e58:	0802dc60 	.word	0x0802dc60
 8017e5c:	20001520 	.word	0x20001520
 8017e60:	200016a0 	.word	0x200016a0
 8017e64:	0802d4b0 	.word	0x0802d4b0

08017e68 <report_current_limit_state>:

status_code_t report_current_limit_state (sys_state_t state, char *args)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b084      	sub	sp, #16
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
 8017e70:	6039      	str	r1, [r7, #0]
    char *append = &buf[8];
 8017e72:	4b10      	ldr	r3, [pc, #64]	; (8017eb4 <report_current_limit_state+0x4c>)
 8017e74:	60fb      	str	r3, [r7, #12]

    strcpy(buf, "[LIMITS:");
 8017e76:	4b10      	ldr	r3, [pc, #64]	; (8017eb8 <report_current_limit_state+0x50>)
 8017e78:	4a10      	ldr	r2, [pc, #64]	; (8017ebc <report_current_limit_state+0x54>)
 8017e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8017e7c:	c303      	stmia	r3!, {r0, r1}
 8017e7e:	701a      	strb	r2, [r3, #0]

    append = add_limits(append, hal.limits.get_state());
 8017e80:	4b0f      	ldr	r3, [pc, #60]	; (8017ec0 <report_current_limit_state+0x58>)
 8017e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e84:	4798      	blx	r3
 8017e86:	4603      	mov	r3, r0
 8017e88:	60bb      	str	r3, [r7, #8]
 8017e8a:	68b9      	ldr	r1, [r7, #8]
 8017e8c:	68f8      	ldr	r0, [r7, #12]
 8017e8e:	f7ff ff7f 	bl	8017d90 <add_limits>
 8017e92:	60f8      	str	r0, [r7, #12]

    hal.stream.write(buf);
 8017e94:	4b0a      	ldr	r3, [pc, #40]	; (8017ec0 <report_current_limit_state+0x58>)
 8017e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017e9a:	4807      	ldr	r0, [pc, #28]	; (8017eb8 <report_current_limit_state+0x50>)
 8017e9c:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8017e9e:	4b08      	ldr	r3, [pc, #32]	; (8017ec0 <report_current_limit_state+0x58>)
 8017ea0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017ea4:	4807      	ldr	r0, [pc, #28]	; (8017ec4 <report_current_limit_state+0x5c>)
 8017ea6:	4798      	blx	r3

    return Status_OK;
 8017ea8:	2300      	movs	r3, #0
}
 8017eaa:	4618      	mov	r0, r3
 8017eac:	3710      	adds	r7, #16
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bd80      	pop	{r7, pc}
 8017eb2:	bf00      	nop
 8017eb4:	20001c80 	.word	0x20001c80
 8017eb8:	20001c78 	.word	0x20001c78
 8017ebc:	0802dc70 	.word	0x0802dc70
 8017ec0:	200016a0 	.word	0x200016a0
 8017ec4:	0802d4b0 	.word	0x0802d4b0

08017ec8 <report_current_home_signal_state>:

status_code_t report_current_home_signal_state (sys_state_t state, char *args)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b084      	sub	sp, #16
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
 8017ed0:	6039      	str	r1, [r7, #0]
    char *append = &buf[7];
 8017ed2:	4b1b      	ldr	r3, [pc, #108]	; (8017f40 <report_current_home_signal_state+0x78>)
 8017ed4:	60fb      	str	r3, [r7, #12]
    home_signals_t home = hal.homing.get_state();
 8017ed6:	4b1b      	ldr	r3, [pc, #108]	; (8017f44 <report_current_home_signal_state+0x7c>)
 8017ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017eda:	4798      	blx	r3
 8017edc:	4603      	mov	r3, r0
 8017ede:	813b      	strh	r3, [r7, #8]

    strcpy(buf, "[HOMES:");
 8017ee0:	4b19      	ldr	r3, [pc, #100]	; (8017f48 <report_current_home_signal_state+0x80>)
 8017ee2:	4a1a      	ldr	r2, [pc, #104]	; (8017f4c <report_current_home_signal_state+0x84>)
 8017ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ee8:	e883 0003 	stmia.w	r3, {r0, r1}

    append = axis_signals_tostring(append, home.a);
 8017eec:	7a39      	ldrb	r1, [r7, #8]
 8017eee:	68f8      	ldr	r0, [r7, #12]
 8017ef0:	f7fb ff08 	bl	8013d04 <axis_signals_tostring>
 8017ef4:	60f8      	str	r0, [r7, #12]
    *append++ = ',';
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	1c5a      	adds	r2, r3, #1
 8017efa:	60fa      	str	r2, [r7, #12]
 8017efc:	222c      	movs	r2, #44	; 0x2c
 8017efe:	701a      	strb	r2, [r3, #0]
    append = axis_signals_tostring(append, home.b);
 8017f00:	7a79      	ldrb	r1, [r7, #9]
 8017f02:	68f8      	ldr	r0, [r7, #12]
 8017f04:	f7fb fefe 	bl	8013d04 <axis_signals_tostring>
 8017f08:	60f8      	str	r0, [r7, #12]

    strcat(append, hal.home_cap.a.mask ? ":H" : ":L");
 8017f0a:	4b0e      	ldr	r3, [pc, #56]	; (8017f44 <report_current_home_signal_state+0x7c>)
 8017f0c:	f893 31b2 	ldrb.w	r3, [r3, #434]	; 0x1b2
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d001      	beq.n	8017f18 <report_current_home_signal_state+0x50>
 8017f14:	4b0e      	ldr	r3, [pc, #56]	; (8017f50 <report_current_home_signal_state+0x88>)
 8017f16:	e000      	b.n	8017f1a <report_current_home_signal_state+0x52>
 8017f18:	4b0e      	ldr	r3, [pc, #56]	; (8017f54 <report_current_home_signal_state+0x8c>)
 8017f1a:	4619      	mov	r1, r3
 8017f1c:	68f8      	ldr	r0, [r7, #12]
 8017f1e:	f00d ff96 	bl	8025e4e <strcat>

    hal.stream.write(buf);
 8017f22:	4b08      	ldr	r3, [pc, #32]	; (8017f44 <report_current_home_signal_state+0x7c>)
 8017f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017f28:	4807      	ldr	r0, [pc, #28]	; (8017f48 <report_current_home_signal_state+0x80>)
 8017f2a:	4798      	blx	r3
    hal.stream.write("]" ASCII_EOL);
 8017f2c:	4b05      	ldr	r3, [pc, #20]	; (8017f44 <report_current_home_signal_state+0x7c>)
 8017f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017f32:	4809      	ldr	r0, [pc, #36]	; (8017f58 <report_current_home_signal_state+0x90>)
 8017f34:	4798      	blx	r3

    return Status_OK;
 8017f36:	2300      	movs	r3, #0
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3710      	adds	r7, #16
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}
 8017f40:	20001c7f 	.word	0x20001c7f
 8017f44:	200016a0 	.word	0x200016a0
 8017f48:	20001c78 	.word	0x20001c78
 8017f4c:	0802dc7c 	.word	0x0802dc7c
 8017f50:	0802dc84 	.word	0x0802dc84
 8017f54:	0802dc88 	.word	0x0802dc88
 8017f58:	0802d4b0 	.word	0x0802d4b0

08017f5c <report_spindle_data>:

// Prints spindle data (encoder pulse and index count, angular position).
status_code_t report_spindle_data (sys_state_t state, char *args)
{
 8017f5c:	b590      	push	{r4, r7, lr}
 8017f5e:	b087      	sub	sp, #28
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
 8017f64:	6039      	str	r1, [r7, #0]
    spindle_ptrs_t *spindle = gc_spindle_get();
 8017f66:	f7ed fcdb 	bl	8005920 <gc_spindle_get>
 8017f6a:	6178      	str	r0, [r7, #20]

    if(spindle->get_data) {
 8017f6c:	697b      	ldr	r3, [r7, #20]
 8017f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d050      	beq.n	8018016 <report_spindle_data+0xba>

        float apos = spindle->get_data(SpindleData_AngularPosition)->angular_position;
 8017f74:	697b      	ldr	r3, [r7, #20]
 8017f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f78:	2002      	movs	r0, #2
 8017f7a:	4798      	blx	r3
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	613b      	str	r3, [r7, #16]
        spindle_data_t *data = spindle->get_data(SpindleData_Counters);
 8017f82:	697b      	ldr	r3, [r7, #20]
 8017f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f86:	2000      	movs	r0, #0
 8017f88:	4798      	blx	r3
 8017f8a:	60f8      	str	r0, [r7, #12]

        hal.stream.write("[SPINDLE:");
 8017f8c:	4b27      	ldr	r3, [pc, #156]	; (801802c <report_spindle_data+0xd0>)
 8017f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017f92:	4827      	ldr	r0, [pc, #156]	; (8018030 <report_spindle_data+0xd4>)
 8017f94:	4798      	blx	r3
        hal.stream.write(uitoa(data->index_count));
 8017f96:	4b25      	ldr	r3, [pc, #148]	; (801802c <report_spindle_data+0xd0>)
 8017f98:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	695b      	ldr	r3, [r3, #20]
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f7 febb 	bl	800fd1c <uitoa>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	4618      	mov	r0, r3
 8017faa:	47a0      	blx	r4
        hal.stream.write(",");
 8017fac:	4b1f      	ldr	r3, [pc, #124]	; (801802c <report_spindle_data+0xd0>)
 8017fae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017fb2:	4820      	ldr	r0, [pc, #128]	; (8018034 <report_spindle_data+0xd8>)
 8017fb4:	4798      	blx	r3
        hal.stream.write(uitoa(data->pulse_count));
 8017fb6:	4b1d      	ldr	r3, [pc, #116]	; (801802c <report_spindle_data+0xd0>)
 8017fb8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	699b      	ldr	r3, [r3, #24]
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7f7 feab 	bl	800fd1c <uitoa>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	4618      	mov	r0, r3
 8017fca:	47a0      	blx	r4
        hal.stream.write(",");
 8017fcc:	4b17      	ldr	r3, [pc, #92]	; (801802c <report_spindle_data+0xd0>)
 8017fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017fd2:	4818      	ldr	r0, [pc, #96]	; (8018034 <report_spindle_data+0xd8>)
 8017fd4:	4798      	blx	r3
        hal.stream.write(uitoa(data->error_count));
 8017fd6:	4b15      	ldr	r3, [pc, #84]	; (801802c <report_spindle_data+0xd0>)
 8017fd8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	69db      	ldr	r3, [r3, #28]
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7f7 fe9b 	bl	800fd1c <uitoa>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	4618      	mov	r0, r3
 8017fea:	47a0      	blx	r4
        hal.stream.write(",");
 8017fec:	4b0f      	ldr	r3, [pc, #60]	; (801802c <report_spindle_data+0xd0>)
 8017fee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017ff2:	4810      	ldr	r0, [pc, #64]	; (8018034 <report_spindle_data+0xd8>)
 8017ff4:	4798      	blx	r3
        hal.stream.write(ftoa(apos, 3));
 8017ff6:	4b0d      	ldr	r3, [pc, #52]	; (801802c <report_spindle_data+0xd0>)
 8017ff8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8017ffc:	2003      	movs	r0, #3
 8017ffe:	ed97 0a04 	vldr	s0, [r7, #16]
 8018002:	f7f7 fec7 	bl	800fd94 <ftoa>
 8018006:	4603      	mov	r3, r0
 8018008:	4618      	mov	r0, r3
 801800a:	47a0      	blx	r4
        hal.stream.write("]" ASCII_EOL);
 801800c:	4b07      	ldr	r3, [pc, #28]	; (801802c <report_spindle_data+0xd0>)
 801800e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018012:	4809      	ldr	r0, [pc, #36]	; (8018038 <report_spindle_data+0xdc>)
 8018014:	4798      	blx	r3
    }

    return spindle->get_data ? Status_OK : Status_InvalidStatement;
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801801a:	2b00      	cmp	r3, #0
 801801c:	d001      	beq.n	8018022 <report_spindle_data+0xc6>
 801801e:	2300      	movs	r3, #0
 8018020:	e000      	b.n	8018024 <report_spindle_data+0xc8>
 8018022:	2303      	movs	r3, #3
}
 8018024:	4618      	mov	r0, r3
 8018026:	371c      	adds	r7, #28
 8018028:	46bd      	mov	sp, r7
 801802a:	bd90      	pop	{r4, r7, pc}
 801802c:	200016a0 	.word	0x200016a0
 8018030:	0802dc8c 	.word	0x0802dc8c
 8018034:	0802d474 	.word	0x0802d474
 8018038:	0802d4b0 	.word	0x0802d4b0

0801803c <get_pinname>:

static const char *get_pinname (pin_function_t function)
{
 801803c:	b480      	push	{r7}
 801803e:	b085      	sub	sp, #20
 8018040:	af00      	add	r7, sp, #0
 8018042:	4603      	mov	r3, r0
 8018044:	71fb      	strb	r3, [r7, #7]
    const char *name = NULL;
 8018046:	2300      	movs	r3, #0
 8018048:	60fb      	str	r3, [r7, #12]
    uint_fast8_t idx = sizeof(pin_names) / sizeof(pin_name_t);
 801804a:	2375      	movs	r3, #117	; 0x75
 801804c:	60bb      	str	r3, [r7, #8]

    do {
        if(pin_names[--idx].function == function)
 801804e:	68bb      	ldr	r3, [r7, #8]
 8018050:	3b01      	subs	r3, #1
 8018052:	60bb      	str	r3, [r7, #8]
 8018054:	4a0f      	ldr	r2, [pc, #60]	; (8018094 <get_pinname+0x58>)
 8018056:	68bb      	ldr	r3, [r7, #8]
 8018058:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801805c:	79fa      	ldrb	r2, [r7, #7]
 801805e:	429a      	cmp	r2, r3
 8018060:	d105      	bne.n	801806e <get_pinname+0x32>
            name = pin_names[idx].name;
 8018062:	4a0c      	ldr	r2, [pc, #48]	; (8018094 <get_pinname+0x58>)
 8018064:	68bb      	ldr	r3, [r7, #8]
 8018066:	00db      	lsls	r3, r3, #3
 8018068:	4413      	add	r3, r2
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	60fb      	str	r3, [r7, #12]
    } while(idx && !name);
 801806e:	68bb      	ldr	r3, [r7, #8]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d002      	beq.n	801807a <get_pinname+0x3e>
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d0e9      	beq.n	801804e <get_pinname+0x12>

    return name ? name : "N/A";
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d001      	beq.n	8018084 <get_pinname+0x48>
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	e000      	b.n	8018086 <get_pinname+0x4a>
 8018084:	4b04      	ldr	r3, [pc, #16]	; (8018098 <get_pinname+0x5c>)
}
 8018086:	4618      	mov	r0, r3
 8018088:	3714      	adds	r7, #20
 801808a:	46bd      	mov	sp, r7
 801808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018090:	4770      	bx	lr
 8018092:	bf00      	nop
 8018094:	08032da4 	.word	0x08032da4
 8018098:	0802d960 	.word	0x0802d960

0801809c <report_pin>:

static void report_pin (xbar_t *pin, void *data)
{
 801809c:	b590      	push	{r4, r7, lr}
 801809e:	b083      	sub	sp, #12
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
 80180a4:	6039      	str	r1, [r7, #0]
    hal.stream.write("[PIN:");
 80180a6:	4b22      	ldr	r3, [pc, #136]	; (8018130 <report_pin+0x94>)
 80180a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80180ac:	4821      	ldr	r0, [pc, #132]	; (8018134 <report_pin+0x98>)
 80180ae:	4798      	blx	r3
    if(pin->port)
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	689b      	ldr	r3, [r3, #8]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d006      	beq.n	80180c6 <report_pin+0x2a>
        hal.stream.write((char *)pin->port);
 80180b8:	4b1d      	ldr	r3, [pc, #116]	; (8018130 <report_pin+0x94>)
 80180ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80180be:	687a      	ldr	r2, [r7, #4]
 80180c0:	6892      	ldr	r2, [r2, #8]
 80180c2:	4610      	mov	r0, r2
 80180c4:	4798      	blx	r3
    hal.stream.write(uitoa(pin->pin));
 80180c6:	4b1a      	ldr	r3, [pc, #104]	; (8018130 <report_pin+0x94>)
 80180c8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	691b      	ldr	r3, [r3, #16]
 80180d0:	4618      	mov	r0, r3
 80180d2:	f7f7 fe23 	bl	800fd1c <uitoa>
 80180d6:	4603      	mov	r3, r0
 80180d8:	4618      	mov	r0, r3
 80180da:	47a0      	blx	r4
    hal.stream.write(",");
 80180dc:	4b14      	ldr	r3, [pc, #80]	; (8018130 <report_pin+0x94>)
 80180de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80180e2:	4815      	ldr	r0, [pc, #84]	; (8018138 <report_pin+0x9c>)
 80180e4:	4798      	blx	r3
    hal.stream.write(get_pinname(pin->function));
 80180e6:	4b12      	ldr	r3, [pc, #72]	; (8018130 <report_pin+0x94>)
 80180e8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7ff ffa3 	bl	801803c <get_pinname>
 80180f6:	4603      	mov	r3, r0
 80180f8:	4618      	mov	r0, r3
 80180fa:	47a0      	blx	r4
    if(pin->description) {
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	68db      	ldr	r3, [r3, #12]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d00b      	beq.n	801811c <report_pin+0x80>
        hal.stream.write(",");
 8018104:	4b0a      	ldr	r3, [pc, #40]	; (8018130 <report_pin+0x94>)
 8018106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801810a:	480b      	ldr	r0, [pc, #44]	; (8018138 <report_pin+0x9c>)
 801810c:	4798      	blx	r3
        hal.stream.write(pin->description);
 801810e:	4b08      	ldr	r3, [pc, #32]	; (8018130 <report_pin+0x94>)
 8018110:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018114:	687a      	ldr	r2, [r7, #4]
 8018116:	68d2      	ldr	r2, [r2, #12]
 8018118:	4610      	mov	r0, r2
 801811a:	4798      	blx	r3
    }
    hal.stream.write("]" ASCII_EOL);
 801811c:	4b04      	ldr	r3, [pc, #16]	; (8018130 <report_pin+0x94>)
 801811e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018122:	4806      	ldr	r0, [pc, #24]	; (801813c <report_pin+0xa0>)
 8018124:	4798      	blx	r3
}
 8018126:	bf00      	nop
 8018128:	370c      	adds	r7, #12
 801812a:	46bd      	mov	sp, r7
 801812c:	bd90      	pop	{r4, r7, pc}
 801812e:	bf00      	nop
 8018130:	200016a0 	.word	0x200016a0
 8018134:	0802dc98 	.word	0x0802dc98
 8018138:	0802d474 	.word	0x0802d474
 801813c:	0802d4b0 	.word	0x0802d4b0

08018140 <report_pins>:

status_code_t report_pins (sys_state_t state, char *args)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b082      	sub	sp, #8
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
 8018148:	6039      	str	r1, [r7, #0]
    if(hal.enumerate_pins)
 801814a:	4b08      	ldr	r3, [pc, #32]	; (801816c <report_pins+0x2c>)
 801814c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8018150:	2b00      	cmp	r3, #0
 8018152:	d006      	beq.n	8018162 <report_pins+0x22>
        hal.enumerate_pins(false, report_pin, NULL);
 8018154:	4b05      	ldr	r3, [pc, #20]	; (801816c <report_pins+0x2c>)
 8018156:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 801815a:	2200      	movs	r2, #0
 801815c:	4904      	ldr	r1, [pc, #16]	; (8018170 <report_pins+0x30>)
 801815e:	2000      	movs	r0, #0
 8018160:	4798      	blx	r3

    return Status_OK;
 8018162:	2300      	movs	r3, #0
}
 8018164:	4618      	mov	r0, r3
 8018166:	3708      	adds	r7, #8
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}
 801816c:	200016a0 	.word	0x200016a0
 8018170:	0801809d 	.word	0x0801809d

08018174 <print_uito2a>:

static void print_uito2a (char *prefix, uint32_t v)
{
 8018174:	b590      	push	{r4, r7, lr}
 8018176:	b083      	sub	sp, #12
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	6039      	str	r1, [r7, #0]
    hal.stream.write(prefix);
 801817e:	4b0d      	ldr	r3, [pc, #52]	; (80181b4 <print_uito2a+0x40>)
 8018180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018184:	6878      	ldr	r0, [r7, #4]
 8018186:	4798      	blx	r3
    if(v < 10)
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	2b09      	cmp	r3, #9
 801818c:	d804      	bhi.n	8018198 <print_uito2a+0x24>
        hal.stream.write("0");
 801818e:	4b09      	ldr	r3, [pc, #36]	; (80181b4 <print_uito2a+0x40>)
 8018190:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018194:	4808      	ldr	r0, [pc, #32]	; (80181b8 <print_uito2a+0x44>)
 8018196:	4798      	blx	r3
    hal.stream.write(uitoa(v));
 8018198:	4b06      	ldr	r3, [pc, #24]	; (80181b4 <print_uito2a+0x40>)
 801819a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801819e:	6838      	ldr	r0, [r7, #0]
 80181a0:	f7f7 fdbc 	bl	800fd1c <uitoa>
 80181a4:	4603      	mov	r3, r0
 80181a6:	4618      	mov	r0, r3
 80181a8:	47a0      	blx	r4
}
 80181aa:	bf00      	nop
 80181ac:	370c      	adds	r7, #12
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd90      	pop	{r4, r7, pc}
 80181b2:	bf00      	nop
 80181b4:	200016a0 	.word	0x200016a0
 80181b8:	0802d6f8 	.word	0x0802d6f8

080181bc <report_time>:

status_code_t report_time (void)
{
 80181bc:	b590      	push	{r4, r7, lr}
 80181be:	b08b      	sub	sp, #44	; 0x2c
 80181c0:	af00      	add	r7, sp, #0
    bool ok = false;
 80181c2:	2300      	movs	r3, #0
 80181c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(hal.rtc.get_datetime) {
 80181c8:	4b26      	ldr	r3, [pc, #152]	; (8018264 <report_time+0xa8>)
 80181ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d03c      	beq.n	801824c <report_time+0x90>
        struct tm time;
        if((ok = !!hal.rtc.get_datetime(&time))) {
 80181d2:	4b24      	ldr	r3, [pc, #144]	; (8018264 <report_time+0xa8>)
 80181d4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80181d8:	463a      	mov	r2, r7
 80181da:	4610      	mov	r0, r2
 80181dc:	4798      	blx	r3
 80181de:	4603      	mov	r3, r0
 80181e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80181e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d02f      	beq.n	801824c <report_time+0x90>
            hal.stream.write("[RTC:");
 80181ec:	4b1d      	ldr	r3, [pc, #116]	; (8018264 <report_time+0xa8>)
 80181ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80181f2:	481d      	ldr	r0, [pc, #116]	; (8018268 <report_time+0xac>)
 80181f4:	4798      	blx	r3
            hal.stream.write(uitoa(time.tm_year + 1900));
 80181f6:	4b1b      	ldr	r3, [pc, #108]	; (8018264 <report_time+0xa8>)
 80181f8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80181fc:	697b      	ldr	r3, [r7, #20]
 80181fe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8018202:	4618      	mov	r0, r3
 8018204:	f7f7 fd8a 	bl	800fd1c <uitoa>
 8018208:	4603      	mov	r3, r0
 801820a:	4618      	mov	r0, r3
 801820c:	47a0      	blx	r4
            print_uito2a("-", time.tm_mon + 1);
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	3301      	adds	r3, #1
 8018212:	4619      	mov	r1, r3
 8018214:	4815      	ldr	r0, [pc, #84]	; (801826c <report_time+0xb0>)
 8018216:	f7ff ffad 	bl	8018174 <print_uito2a>
            print_uito2a("-", time.tm_mday);
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	4619      	mov	r1, r3
 801821e:	4813      	ldr	r0, [pc, #76]	; (801826c <report_time+0xb0>)
 8018220:	f7ff ffa8 	bl	8018174 <print_uito2a>
            print_uito2a("T", time.tm_hour);
 8018224:	68bb      	ldr	r3, [r7, #8]
 8018226:	4619      	mov	r1, r3
 8018228:	4811      	ldr	r0, [pc, #68]	; (8018270 <report_time+0xb4>)
 801822a:	f7ff ffa3 	bl	8018174 <print_uito2a>
            print_uito2a(":", time.tm_min);
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	4619      	mov	r1, r3
 8018232:	4810      	ldr	r0, [pc, #64]	; (8018274 <report_time+0xb8>)
 8018234:	f7ff ff9e 	bl	8018174 <print_uito2a>
            print_uito2a(":", time.tm_sec);
 8018238:	683b      	ldr	r3, [r7, #0]
 801823a:	4619      	mov	r1, r3
 801823c:	480d      	ldr	r0, [pc, #52]	; (8018274 <report_time+0xb8>)
 801823e:	f7ff ff99 	bl	8018174 <print_uito2a>
            hal.stream.write("]" ASCII_EOL);
 8018242:	4b08      	ldr	r3, [pc, #32]	; (8018264 <report_time+0xa8>)
 8018244:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018248:	480b      	ldr	r0, [pc, #44]	; (8018278 <report_time+0xbc>)
 801824a:	4798      	blx	r3
        }
    }

    return ok ? Status_OK : Status_InvalidStatement;
 801824c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018250:	2b00      	cmp	r3, #0
 8018252:	d001      	beq.n	8018258 <report_time+0x9c>
 8018254:	2300      	movs	r3, #0
 8018256:	e000      	b.n	801825a <report_time+0x9e>
 8018258:	2303      	movs	r3, #3
}
 801825a:	4618      	mov	r0, r3
 801825c:	372c      	adds	r7, #44	; 0x2c
 801825e:	46bd      	mov	sp, r7
 8018260:	bd90      	pop	{r4, r7, pc}
 8018262:	bf00      	nop
 8018264:	200016a0 	.word	0x200016a0
 8018268:	0802dca0 	.word	0x0802dca0
 801826c:	0802dca8 	.word	0x0802dca8
 8018270:	0802dcac 	.word	0x0802dcac
 8018274:	0802d5b4 	.word	0x0802d5b4
 8018278:	0802d4b0 	.word	0x0802d4b0

0801827c <report_spindle>:

static void report_spindle (spindle_info_t *spindle, void *data)
{
 801827c:	b590      	push	{r4, r7, lr}
 801827e:	b083      	sub	sp, #12
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
 8018284:	6039      	str	r1, [r7, #0]
    hal.stream.write(uitoa(spindle->id));
 8018286:	4b15      	ldr	r3, [pc, #84]	; (80182dc <report_spindle+0x60>)
 8018288:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f993 3000 	ldrsb.w	r3, [r3]
 8018292:	4618      	mov	r0, r3
 8018294:	f7f7 fd42 	bl	800fd1c <uitoa>
 8018298:	4603      	mov	r3, r0
 801829a:	4618      	mov	r0, r3
 801829c:	47a0      	blx	r4
    hal.stream.write(" - ");
 801829e:	4b0f      	ldr	r3, [pc, #60]	; (80182dc <report_spindle+0x60>)
 80182a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80182a4:	480e      	ldr	r0, [pc, #56]	; (80182e0 <report_spindle+0x64>)
 80182a6:	4798      	blx	r3
    hal.stream.write(spindle->name);
 80182a8:	4b0c      	ldr	r3, [pc, #48]	; (80182dc <report_spindle+0x60>)
 80182aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80182ae:	687a      	ldr	r2, [r7, #4]
 80182b0:	6852      	ldr	r2, [r2, #4]
 80182b2:	4610      	mov	r0, r2
 80182b4:	4798      	blx	r3
    if(spindle->enabled) {
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	7a1b      	ldrb	r3, [r3, #8]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d004      	beq.n	80182c8 <report_spindle+0x4c>
#if N_SPINDLE > 1
        hal.stream.write(", enabled as spindle ");
        hal.stream.write(uitoa(spindle->num));
#else
        hal.stream.write(", active");
 80182be:	4b07      	ldr	r3, [pc, #28]	; (80182dc <report_spindle+0x60>)
 80182c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80182c4:	4807      	ldr	r0, [pc, #28]	; (80182e4 <report_spindle+0x68>)
 80182c6:	4798      	blx	r3
#endif
    }
    hal.stream.write(ASCII_EOL);
 80182c8:	4b04      	ldr	r3, [pc, #16]	; (80182dc <report_spindle+0x60>)
 80182ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80182ce:	4806      	ldr	r0, [pc, #24]	; (80182e8 <report_spindle+0x6c>)
 80182d0:	4798      	blx	r3
}
 80182d2:	bf00      	nop
 80182d4:	370c      	adds	r7, #12
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd90      	pop	{r4, r7, pc}
 80182da:	bf00      	nop
 80182dc:	200016a0 	.word	0x200016a0
 80182e0:	0802d96c 	.word	0x0802d96c
 80182e4:	0802dcb0 	.word	0x0802dcb0
 80182e8:	0802d480 	.word	0x0802d480

080182ec <report_spindles>:

status_code_t report_spindles (void)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	af00      	add	r7, sp, #0
    if(!spindle_enumerate_spindles(report_spindle, NULL))
 80182f0:	2100      	movs	r1, #0
 80182f2:	4808      	ldr	r0, [pc, #32]	; (8018314 <report_spindles+0x28>)
 80182f4:	f003 fde0 	bl	801beb8 <spindle_enumerate_spindles>
 80182f8:	4603      	mov	r3, r0
 80182fa:	f083 0301 	eor.w	r3, r3, #1
 80182fe:	b2db      	uxtb	r3, r3
 8018300:	2b00      	cmp	r3, #0
 8018302:	d004      	beq.n	801830e <report_spindles+0x22>
        hal.stream.write("No spindles registered." ASCII_EOL);
 8018304:	4b04      	ldr	r3, [pc, #16]	; (8018318 <report_spindles+0x2c>)
 8018306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801830a:	4804      	ldr	r0, [pc, #16]	; (801831c <report_spindles+0x30>)
 801830c:	4798      	blx	r3

    return Status_OK;
 801830e:	2300      	movs	r3, #0
}
 8018310:	4618      	mov	r0, r3
 8018312:	bd80      	pop	{r7, pc}
 8018314:	0801827d 	.word	0x0801827d
 8018318:	200016a0 	.word	0x200016a0
 801831c:	0802dcbc 	.word	0x0802dcbc

08018320 <report_pid_log>:

void report_pid_log (void)
{
 8018320:	b580      	push	{r7, lr}
 8018322:	af00      	add	r7, sp, #0
    } while(idx != sys.pid_log.idx);

    hal.stream.write("]" ASCII_EOL);
    grbl.report.status_message(Status_OK);
#else
    grbl.report.status_message(Status_GcodeUnsupportedCommand);
 8018324:	4b02      	ldr	r3, [pc, #8]	; (8018330 <report_pid_log+0x10>)
 8018326:	689b      	ldr	r3, [r3, #8]
 8018328:	2014      	movs	r0, #20
 801832a:	4798      	blx	r3
#endif
}
 801832c:	bf00      	nop
 801832e:	bd80      	pop	{r7, pc}
 8018330:	200015b8 	.word	0x200015b8

08018334 <report_init_fns>:
    .alarm_message = report_alarm_message,
    .setting = report_setting
};

void report_init_fns (void)
{
 8018334:	b5b0      	push	{r4, r5, r7, lr}
 8018336:	af00      	add	r7, sp, #0
    memcpy(&grbl.report, &report_fns, sizeof(report_t));
 8018338:	4a09      	ldr	r2, [pc, #36]	; (8018360 <report_init_fns+0x2c>)
 801833a:	4b0a      	ldr	r3, [pc, #40]	; (8018364 <report_init_fns+0x30>)
 801833c:	4614      	mov	r4, r2
 801833e:	461d      	mov	r5, r3
 8018340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018344:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018348:	e884 0003 	stmia.w	r4, {r0, r1}

    if(grbl.on_report_handlers_init)
 801834c:	4b04      	ldr	r3, [pc, #16]	; (8018360 <report_init_fns+0x2c>)
 801834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018350:	2b00      	cmp	r3, #0
 8018352:	d002      	beq.n	801835a <report_init_fns+0x26>
        grbl.on_report_handlers_init();
 8018354:	4b02      	ldr	r3, [pc, #8]	; (8018360 <report_init_fns+0x2c>)
 8018356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018358:	4798      	blx	r3
}
 801835a:	bf00      	nop
 801835c:	bdb0      	pop	{r4, r5, r7, pc}
 801835e:	bf00      	nop
 8018360:	200015b8 	.word	0x200015b8
 8018364:	08033150 	.word	0x08033150

08018368 <group_is_available>:
    .safety_door.spindle_on_delay = DEFAULT_SAFETY_DOOR_SPINDLE_DELAY,
    .safety_door.coolant_on_delay = DEFAULT_SAFETY_DOOR_COOLANT_DELAY
};

static bool group_is_available (const setting_group_detail_t *group)
{
 8018368:	b480      	push	{r7}
 801836a:	b083      	sub	sp, #12
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
    return true;
 8018370:	2301      	movs	r3, #1
}
 8018372:	4618      	mov	r0, r3
 8018374:	370c      	adds	r7, #12
 8018376:	46bd      	mov	sp, r7
 8018378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837c:	4770      	bx	lr
	...

08018380 <restore_override_backup>:

    override_backup.valid = true;
}

static void restore_override_backup (void)
{
 8018380:	b480      	push	{r7}
 8018382:	b083      	sub	sp, #12
 8018384:	af00      	add	r7, sp, #0
    uint_fast8_t idx = N_AXIS;
 8018386:	2303      	movs	r3, #3
 8018388:	607b      	str	r3, [r7, #4]

    if(override_backup.valid) do {
 801838a:	4b0f      	ldr	r3, [pc, #60]	; (80183c8 <restore_override_backup+0x48>)
 801838c:	781b      	ldrb	r3, [r3, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d014      	beq.n	80183bc <restore_override_backup+0x3c>
        idx--;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	3b01      	subs	r3, #1
 8018396:	607b      	str	r3, [r7, #4]
        settings.axis[idx].acceleration = override_backup.acceleration[idx];
 8018398:	4a0b      	ldr	r2, [pc, #44]	; (80183c8 <restore_override_backup+0x48>)
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	009b      	lsls	r3, r3, #2
 801839e:	4413      	add	r3, r2
 80183a0:	3304      	adds	r3, #4
 80183a2:	6819      	ldr	r1, [r3, #0]
 80183a4:	4809      	ldr	r0, [pc, #36]	; (80183cc <restore_override_backup+0x4c>)
 80183a6:	687a      	ldr	r2, [r7, #4]
 80183a8:	4613      	mov	r3, r2
 80183aa:	009b      	lsls	r3, r3, #2
 80183ac:	4413      	add	r3, r2
 80183ae:	009b      	lsls	r3, r3, #2
 80183b0:	4403      	add	r3, r0
 80183b2:	3338      	adds	r3, #56	; 0x38
 80183b4:	6019      	str	r1, [r3, #0]
    } while(idx);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d1ea      	bne.n	8018392 <restore_override_backup+0x12>
}
 80183bc:	bf00      	nop
 80183be:	370c      	adds	r7, #12
 80183c0:	46bd      	mov	sp, r7
 80183c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c6:	4770      	bx	lr
 80183c8:	20001ec4 	.word	0x20001ec4
 80183cc:	20001cf0 	.word	0x20001cf0

080183d0 <settings_register>:
// ---

static setting_details_t *settingsd = &setting_details;

void settings_register (setting_details_t *details)
{
 80183d0:	b480      	push	{r7}
 80183d2:	b083      	sub	sp, #12
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
    settingsd->next = details;
 80183d8:	4b06      	ldr	r3, [pc, #24]	; (80183f4 <settings_register+0x24>)
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	687a      	ldr	r2, [r7, #4]
 80183de:	619a      	str	r2, [r3, #24]
    settingsd = details;
 80183e0:	4a04      	ldr	r2, [pc, #16]	; (80183f4 <settings_register+0x24>)
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6013      	str	r3, [r2, #0]
}
 80183e6:	bf00      	nop
 80183e8:	370c      	adds	r7, #12
 80183ea:	46bd      	mov	sp, r7
 80183ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f0:	4770      	bx	lr
 80183f2:	bf00      	nop
 80183f4:	200004f8 	.word	0x200004f8

080183f8 <settings_get_details>:

setting_details_t *settings_get_details (void)
{
 80183f8:	b480      	push	{r7}
 80183fa:	af00      	add	r7, sp, #0
    return &setting_details;
 80183fc:	4b02      	ldr	r3, [pc, #8]	; (8018408 <settings_get_details+0x10>)
}
 80183fe:	4618      	mov	r0, r3
 8018400:	46bd      	mov	sp, r7
 8018402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018406:	4770      	bx	lr
 8018408:	200004c8 	.word	0x200004c8

0801840c <set_probe_invert>:
}

#endif

static status_code_t set_probe_invert (setting_id_t id, uint_fast16_t int_value)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b082      	sub	sp, #8
 8018410:	af00      	add	r7, sp, #0
 8018412:	4603      	mov	r3, r0
 8018414:	6039      	str	r1, [r7, #0]
 8018416:	80fb      	strh	r3, [r7, #6]
    if(!hal.probe.configure)
 8018418:	4b0f      	ldr	r3, [pc, #60]	; (8018458 <set_probe_invert+0x4c>)
 801841a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801841e:	2b00      	cmp	r3, #0
 8018420:	d101      	bne.n	8018426 <set_probe_invert+0x1a>
        return Status_SettingDisabled;
 8018422:	2335      	movs	r3, #53	; 0x35
 8018424:	e013      	b.n	801844e <set_probe_invert+0x42>

    settings.probe.invert_probe_pin = int_value != 0;
 8018426:	683b      	ldr	r3, [r7, #0]
 8018428:	2b00      	cmp	r3, #0
 801842a:	bf14      	ite	ne
 801842c:	2301      	movne	r3, #1
 801842e:	2300      	moveq	r3, #0
 8018430:	b2d9      	uxtb	r1, r3
 8018432:	4a0a      	ldr	r2, [pc, #40]	; (801845c <set_probe_invert+0x50>)
 8018434:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
 8018438:	f361 0300 	bfi	r3, r1, #0, #1
 801843c:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    hal.probe.configure(false, false);
 8018440:	4b05      	ldr	r3, [pc, #20]	; (8018458 <set_probe_invert+0x4c>)
 8018442:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8018446:	2100      	movs	r1, #0
 8018448:	2000      	movs	r0, #0
 801844a:	4798      	blx	r3

    return Status_OK;
 801844c:	2300      	movs	r3, #0
}
 801844e:	4618      	mov	r0, r3
 8018450:	3708      	adds	r7, #8
 8018452:	46bd      	mov	sp, r7
 8018454:	bd80      	pop	{r7, pc}
 8018456:	bf00      	nop
 8018458:	200016a0 	.word	0x200016a0
 801845c:	20001cf0 	.word	0x20001cf0

08018460 <set_ganged_dir_invert>:

static status_code_t set_ganged_dir_invert (setting_id_t id, uint_fast16_t int_value)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b082      	sub	sp, #8
 8018464:	af00      	add	r7, sp, #0
 8018466:	4603      	mov	r3, r0
 8018468:	6039      	str	r1, [r7, #0]
 801846a:	80fb      	strh	r3, [r7, #6]
    if(!hal.stepper.get_ganged)
 801846c:	4b0c      	ldr	r3, [pc, #48]	; (80184a0 <set_ganged_dir_invert+0x40>)
 801846e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018472:	2b00      	cmp	r3, #0
 8018474:	d101      	bne.n	801847a <set_ganged_dir_invert+0x1a>
        return Status_SettingDisabled;
 8018476:	2335      	movs	r3, #53	; 0x35
 8018478:	e00e      	b.n	8018498 <set_ganged_dir_invert+0x38>

    settings.steppers.ganged_dir_invert.mask = int_value & hal.stepper.get_ganged(false).mask;
 801847a:	4b09      	ldr	r3, [pc, #36]	; (80184a0 <set_ganged_dir_invert+0x40>)
 801847c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018480:	2000      	movs	r0, #0
 8018482:	4798      	blx	r3
 8018484:	4603      	mov	r3, r0
 8018486:	b2da      	uxtb	r2, r3
 8018488:	683b      	ldr	r3, [r7, #0]
 801848a:	b2db      	uxtb	r3, r3
 801848c:	4013      	ands	r3, r2
 801848e:	b2da      	uxtb	r2, r3
 8018490:	4b04      	ldr	r3, [pc, #16]	; (80184a4 <set_ganged_dir_invert+0x44>)
 8018492:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea

    return Status_OK;
 8018496:	2300      	movs	r3, #0
}
 8018498:	4618      	mov	r0, r3
 801849a:	3708      	adds	r7, #8
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}
 80184a0:	200016a0 	.word	0x200016a0
 80184a4:	20001cf0 	.word	0x20001cf0

080184a8 <set_stepper_deenergize_mask>:

static status_code_t set_stepper_deenergize_mask (setting_id_t id, uint_fast16_t int_value)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b082      	sub	sp, #8
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	4603      	mov	r3, r0
 80184b0:	6039      	str	r1, [r7, #0]
 80184b2:	80fb      	strh	r3, [r7, #6]
    settings.steppers.deenergize.mask = int_value;
 80184b4:	683b      	ldr	r3, [r7, #0]
 80184b6:	b2da      	uxtb	r2, r3
 80184b8:	4b07      	ldr	r3, [pc, #28]	; (80184d8 <set_stepper_deenergize_mask+0x30>)
 80184ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

    hal.stepper.enable(settings.steppers.deenergize);
 80184be:	4b07      	ldr	r3, [pc, #28]	; (80184dc <set_stepper_deenergize_mask+0x34>)
 80184c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80184c4:	4a04      	ldr	r2, [pc, #16]	; (80184d8 <set_stepper_deenergize_mask+0x30>)
 80184c6:	f892 00ec 	ldrb.w	r0, [r2, #236]	; 0xec
 80184ca:	4798      	blx	r3

    return Status_OK;
 80184cc:	2300      	movs	r3, #0
}
 80184ce:	4618      	mov	r0, r3
 80184d0:	3708      	adds	r7, #8
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
 80184d6:	bf00      	nop
 80184d8:	20001cf0 	.word	0x20001cf0
 80184dc:	200016a0 	.word	0x200016a0

080184e0 <set_report_interval>:

static status_code_t set_report_interval (setting_id_t setting, uint_fast16_t int_value)
{
 80184e0:	b480      	push	{r7}
 80184e2:	b083      	sub	sp, #12
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	4603      	mov	r3, r0
 80184e8:	6039      	str	r1, [r7, #0]
 80184ea:	80fb      	strh	r3, [r7, #6]
    if((settings.report_interval = int_value) == 0)
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	b29a      	uxth	r2, r3
 80184f0:	4b08      	ldr	r3, [pc, #32]	; (8018514 <set_report_interval+0x34>)
 80184f2:	829a      	strh	r2, [r3, #20]
 80184f4:	4b07      	ldr	r3, [pc, #28]	; (8018514 <set_report_interval+0x34>)
 80184f6:	8a9b      	ldrh	r3, [r3, #20]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d104      	bne.n	8018506 <set_report_interval+0x26>
        sys.flags.auto_reporting = Off;
 80184fc:	4a06      	ldr	r2, [pc, #24]	; (8018518 <set_report_interval+0x38>)
 80184fe:	7dd3      	ldrb	r3, [r2, #23]
 8018500:	f36f 0341 	bfc	r3, #1, #1
 8018504:	75d3      	strb	r3, [r2, #23]

    return Status_OK;
 8018506:	2300      	movs	r3, #0
}
 8018508:	4618      	mov	r0, r3
 801850a:	370c      	adds	r7, #12
 801850c:	46bd      	mov	sp, r7
 801850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018512:	4770      	bx	lr
 8018514:	20001cf0 	.word	0x20001cf0
 8018518:	20001520 	.word	0x20001520

0801851c <set_report_mask>:

static status_code_t set_report_mask (setting_id_t id, uint_fast16_t int_value)
{
 801851c:	b480      	push	{r7}
 801851e:	b083      	sub	sp, #12
 8018520:	af00      	add	r7, sp, #0
 8018522:	4603      	mov	r3, r0
 8018524:	6039      	str	r1, [r7, #0]
 8018526:	80fb      	strh	r3, [r7, #6]
#if COMPATIBILITY_LEVEL <= 1
    settings.status_report.mask = int_value;
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	b29a      	uxth	r2, r3
 801852c:	4b04      	ldr	r3, [pc, #16]	; (8018540 <set_report_mask+0x24>)
 801852e:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
#else
    int_value &= 0b11;
    settings.status_report.mask = (settings.status_report.mask & ~0b11) | int_value;
#endif

    return Status_OK;
 8018532:	2300      	movs	r3, #0
}
 8018534:	4618      	mov	r0, r3
 8018536:	370c      	adds	r7, #12
 8018538:	46bd      	mov	sp, r7
 801853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853e:	4770      	bx	lr
 8018540:	20001cf0 	.word	0x20001cf0

08018544 <set_report_inches>:

static status_code_t set_report_inches (setting_id_t id, uint_fast16_t int_value)
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b082      	sub	sp, #8
 8018548:	af00      	add	r7, sp, #0
 801854a:	4603      	mov	r3, r0
 801854c:	6039      	str	r1, [r7, #0]
 801854e:	80fb      	strh	r3, [r7, #6]
    settings.flags.report_inches = int_value != 0;
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	2b00      	cmp	r3, #0
 8018554:	bf14      	ite	ne
 8018556:	2301      	movne	r3, #1
 8018558:	2300      	moveq	r3, #0
 801855a:	b2d9      	uxtb	r1, r3
 801855c:	4a07      	ldr	r2, [pc, #28]	; (801857c <set_report_inches+0x38>)
 801855e:	f892 30fe 	ldrb.w	r3, [r2, #254]	; 0xfe
 8018562:	f361 0300 	bfi	r3, r1, #0, #1
 8018566:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe
    report_init();
 801856a:	f7fb fc6f 	bl	8013e4c <report_init>
    system_flag_wco_change(); // Make sure WCO is immediately updated.
 801856e:	f008 ff25 	bl	80213bc <system_flag_wco_change>

    return Status_OK;
 8018572:	2300      	movs	r3, #0
}
 8018574:	4618      	mov	r0, r3
 8018576:	3708      	adds	r7, #8
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}
 801857c:	20001cf0 	.word	0x20001cf0

08018580 <set_control_invert>:
}

#endif

static status_code_t set_control_invert (setting_id_t id, uint_fast16_t int_value)
{
 8018580:	b480      	push	{r7}
 8018582:	b083      	sub	sp, #12
 8018584:	af00      	add	r7, sp, #0
 8018586:	4603      	mov	r3, r0
 8018588:	6039      	str	r1, [r7, #0]
 801858a:	80fb      	strh	r3, [r7, #6]
    settings.control_invert.mask = int_value & hal.signals_cap.mask;
 801858c:	4b08      	ldr	r3, [pc, #32]	; (80185b0 <set_control_invert+0x30>)
 801858e:	f8b3 21ac 	ldrh.w	r2, [r3, #428]	; 0x1ac
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	b29b      	uxth	r3, r3
 8018596:	4013      	ands	r3, r2
 8018598:	b29a      	uxth	r2, r3
 801859a:	4b06      	ldr	r3, [pc, #24]	; (80185b4 <set_control_invert+0x34>)
 801859c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

    return Status_OK;
 80185a0:	2300      	movs	r3, #0
}
 80185a2:	4618      	mov	r0, r3
 80185a4:	370c      	adds	r7, #12
 80185a6:	46bd      	mov	sp, r7
 80185a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ac:	4770      	bx	lr
 80185ae:	bf00      	nop
 80185b0:	200016a0 	.word	0x200016a0
 80185b4:	20001cf0 	.word	0x20001cf0

080185b8 <set_pwm_mode>:

static status_code_t set_pwm_mode (setting_id_t id, uint_fast16_t int_value)
{
 80185b8:	b480      	push	{r7}
 80185ba:	b083      	sub	sp, #12
 80185bc:	af00      	add	r7, sp, #0
 80185be:	4603      	mov	r3, r0
 80185c0:	6039      	str	r1, [r7, #0]
 80185c2:	80fb      	strh	r3, [r7, #6]
    settings.spindle.flags.enable_rpm_controlled = int_value != 0;
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	bf14      	ite	ne
 80185ca:	2301      	movne	r3, #1
 80185cc:	2300      	moveq	r3, #0
 80185ce:	b2d9      	uxtb	r1, r3
 80185d0:	4a06      	ldr	r2, [pc, #24]	; (80185ec <set_pwm_mode+0x34>)
 80185d2:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
 80185d6:	f361 0300 	bfi	r3, r1, #0, #1
 80185da:	f882 30e7 	strb.w	r3, [r2, #231]	; 0xe7

    return Status_OK;
 80185de:	2300      	movs	r3, #0
}
 80185e0:	4618      	mov	r0, r3
 80185e2:	370c      	adds	r7, #12
 80185e4:	46bd      	mov	sp, r7
 80185e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ea:	4770      	bx	lr
 80185ec:	20001cf0 	.word	0x20001cf0

080185f0 <set_pwm_options>:

static status_code_t set_pwm_options (setting_id_t id, uint_fast16_t int_value)
{
 80185f0:	b480      	push	{r7}
 80185f2:	b083      	sub	sp, #12
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	4603      	mov	r3, r0
 80185f8:	6039      	str	r1, [r7, #0]
 80185fa:	80fb      	strh	r3, [r7, #6]
    if(int_value & 0x01) {
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	f003 0301 	and.w	r3, r3, #1
 8018602:	2b00      	cmp	r3, #0
 8018604:	d018      	beq.n	8018638 <set_pwm_options+0x48>
        if(int_value > 0b11)
 8018606:	683b      	ldr	r3, [r7, #0]
 8018608:	2b03      	cmp	r3, #3
 801860a:	d901      	bls.n	8018610 <set_pwm_options+0x20>
            return Status_SettingValueOutOfRange;
 801860c:	2334      	movs	r3, #52	; 0x34
 801860e:	e022      	b.n	8018656 <set_pwm_options+0x66>
        settings.spindle.flags.pwm_disable = Off;
 8018610:	4a14      	ldr	r2, [pc, #80]	; (8018664 <set_pwm_options+0x74>)
 8018612:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
 8018616:	f36f 13c7 	bfc	r3, #7, #1
 801861a:	f882 30e7 	strb.w	r3, [r2, #231]	; 0xe7
        settings.spindle.flags.enable_rpm_controlled = (int_value & 0b10) >> 1;
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	085b      	lsrs	r3, r3, #1
 8018622:	f003 0301 	and.w	r3, r3, #1
 8018626:	b2d9      	uxtb	r1, r3
 8018628:	4a0e      	ldr	r2, [pc, #56]	; (8018664 <set_pwm_options+0x74>)
 801862a:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
 801862e:	f361 0300 	bfi	r3, r1, #0, #1
 8018632:	f882 30e7 	strb.w	r3, [r2, #231]	; 0xe7
 8018636:	e00d      	b.n	8018654 <set_pwm_options+0x64>
    } else {
        settings.spindle.flags.pwm_disable = On;
 8018638:	4a0a      	ldr	r2, [pc, #40]	; (8018664 <set_pwm_options+0x74>)
 801863a:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
 801863e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018642:	f882 30e7 	strb.w	r3, [r2, #231]	; 0xe7
        settings.spindle.flags.enable_rpm_controlled = Off;
 8018646:	4a07      	ldr	r2, [pc, #28]	; (8018664 <set_pwm_options+0x74>)
 8018648:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
 801864c:	f36f 0300 	bfc	r3, #0, #1
 8018650:	f882 30e7 	strb.w	r3, [r2, #231]	; 0xe7
    }

    return Status_OK;
 8018654:	2300      	movs	r3, #0
}
 8018656:	4618      	mov	r0, r3
 8018658:	370c      	adds	r7, #12
 801865a:	46bd      	mov	sp, r7
 801865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018660:	4770      	bx	lr
 8018662:	bf00      	nop
 8018664:	20001cf0 	.word	0x20001cf0

08018668 <set_spindle_type>:

static status_code_t set_spindle_type (setting_id_t id, uint_fast16_t int_value)
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b082      	sub	sp, #8
 801866c:	af00      	add	r7, sp, #0
 801866e:	4603      	mov	r3, r0
 8018670:	6039      	str	r1, [r7, #0]
 8018672:	80fb      	strh	r3, [r7, #6]
    if(spindle_get_count() < 2)
 8018674:	f003 fbd8 	bl	801be28 <spindle_get_count>
 8018678:	4603      	mov	r3, r0
 801867a:	2b01      	cmp	r3, #1
 801867c:	d801      	bhi.n	8018682 <set_spindle_type+0x1a>
        return Status_SettingDisabled;
 801867e:	2335      	movs	r3, #53	; 0x35
 8018680:	e01e      	b.n	80186c0 <set_spindle_type+0x58>
    else if(int_value >= spindle_get_count())
 8018682:	f003 fbd1 	bl	801be28 <spindle_get_count>
 8018686:	4603      	mov	r3, r0
 8018688:	461a      	mov	r2, r3
 801868a:	683b      	ldr	r3, [r7, #0]
 801868c:	4293      	cmp	r3, r2
 801868e:	d301      	bcc.n	8018694 <set_spindle_type+0x2c>
        return Status_SettingValueOutOfRange;
 8018690:	2334      	movs	r3, #52	; 0x34
 8018692:	e015      	b.n	80186c0 <set_spindle_type+0x58>

    settings.spindle.flags.type = int_value;
 8018694:	683b      	ldr	r3, [r7, #0]
 8018696:	f003 031f 	and.w	r3, r3, #31
 801869a:	b2d9      	uxtb	r1, r3
 801869c:	4a0a      	ldr	r2, [pc, #40]	; (80186c8 <set_spindle_type+0x60>)
 801869e:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
 80186a2:	f361 0386 	bfi	r3, r1, #2, #5
 80186a6:	f882 30e7 	strb.w	r3, [r2, #231]	; 0xe7

    spindle_select(settings.spindle.flags.type);
 80186aa:	4b07      	ldr	r3, [pc, #28]	; (80186c8 <set_spindle_type+0x60>)
 80186ac:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 80186b0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80186b4:	b2db      	uxtb	r3, r3
 80186b6:	b25b      	sxtb	r3, r3
 80186b8:	4618      	mov	r0, r3
 80186ba:	f003 fa41 	bl	801bb40 <spindle_select>

    return Status_OK;
 80186be:	2300      	movs	r3, #0
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	3708      	adds	r7, #8
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	20001cf0 	.word	0x20001cf0

080186cc <set_spindle_invert>:

static status_code_t set_spindle_invert (setting_id_t id, uint_fast16_t int_value)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b082      	sub	sp, #8
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	4603      	mov	r3, r0
 80186d4:	6039      	str	r1, [r7, #0]
 80186d6:	80fb      	strh	r3, [r7, #6]
    settings.spindle.invert.mask = int_value;
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	b2da      	uxtb	r2, r3
 80186dc:	4b11      	ldr	r3, [pc, #68]	; (8018724 <set_spindle_invert+0x58>)
 80186de:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
    if(settings.spindle.invert.pwm && !spindle_get_caps(false).pwm_invert) {
 80186e2:	4b10      	ldr	r3, [pc, #64]	; (8018724 <set_spindle_invert+0x58>)
 80186e4:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 80186e8:	f003 0304 	and.w	r3, r3, #4
 80186ec:	b2db      	uxtb	r3, r3
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d012      	beq.n	8018718 <set_spindle_invert+0x4c>
 80186f2:	2000      	movs	r0, #0
 80186f4:	f003 fade 	bl	801bcb4 <spindle_get_caps>
 80186f8:	4603      	mov	r3, r0
 80186fa:	b2db      	uxtb	r3, r3
 80186fc:	f003 0310 	and.w	r3, r3, #16
 8018700:	b2db      	uxtb	r3, r3
 8018702:	2b00      	cmp	r3, #0
 8018704:	d108      	bne.n	8018718 <set_spindle_invert+0x4c>
        settings.spindle.invert.pwm = Off;
 8018706:	4a07      	ldr	r2, [pc, #28]	; (8018724 <set_spindle_invert+0x58>)
 8018708:	f892 30e6 	ldrb.w	r3, [r2, #230]	; 0xe6
 801870c:	f36f 0382 	bfc	r3, #2, #1
 8018710:	f882 30e6 	strb.w	r3, [r2, #230]	; 0xe6
        return Status_SettingDisabled;
 8018714:	2335      	movs	r3, #53	; 0x35
 8018716:	e000      	b.n	801871a <set_spindle_invert+0x4e>
    }

    return Status_OK;
 8018718:	2300      	movs	r3, #0
}
 801871a:	4618      	mov	r0, r3
 801871c:	3708      	adds	r7, #8
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}
 8018722:	bf00      	nop
 8018724:	20001cf0 	.word	0x20001cf0

08018728 <set_control_disable_pullup>:

static status_code_t set_control_disable_pullup (setting_id_t id, uint_fast16_t int_value)
{
 8018728:	b480      	push	{r7}
 801872a:	b083      	sub	sp, #12
 801872c:	af00      	add	r7, sp, #0
 801872e:	4603      	mov	r3, r0
 8018730:	6039      	str	r1, [r7, #0]
 8018732:	80fb      	strh	r3, [r7, #6]
    settings.control_disable_pullup.mask = int_value & hal.signals_cap.mask;
 8018734:	4b08      	ldr	r3, [pc, #32]	; (8018758 <set_control_disable_pullup+0x30>)
 8018736:	f8b3 21ac 	ldrh.w	r2, [r3, #428]	; 0x1ac
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	b29b      	uxth	r3, r3
 801873e:	4013      	ands	r3, r2
 8018740:	b29a      	uxth	r2, r3
 8018742:	4b06      	ldr	r3, [pc, #24]	; (801875c <set_control_disable_pullup+0x34>)
 8018744:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    return Status_OK;
 8018748:	2300      	movs	r3, #0
}
 801874a:	4618      	mov	r0, r3
 801874c:	370c      	adds	r7, #12
 801874e:	46bd      	mov	sp, r7
 8018750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018754:	4770      	bx	lr
 8018756:	bf00      	nop
 8018758:	200016a0 	.word	0x200016a0
 801875c:	20001cf0 	.word	0x20001cf0

08018760 <set_probe_disable_pullup>:

static status_code_t set_probe_disable_pullup (setting_id_t id, uint_fast16_t int_value)
{
 8018760:	b480      	push	{r7}
 8018762:	b083      	sub	sp, #12
 8018764:	af00      	add	r7, sp, #0
 8018766:	4603      	mov	r3, r0
 8018768:	6039      	str	r1, [r7, #0]
 801876a:	80fb      	strh	r3, [r7, #6]
    if(!hal.probe.configure)
 801876c:	4b0d      	ldr	r3, [pc, #52]	; (80187a4 <set_probe_disable_pullup+0x44>)
 801876e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8018772:	2b00      	cmp	r3, #0
 8018774:	d101      	bne.n	801877a <set_probe_disable_pullup+0x1a>
        return Status_SettingDisabled;
 8018776:	2335      	movs	r3, #53	; 0x35
 8018778:	e00d      	b.n	8018796 <set_probe_disable_pullup+0x36>

    settings.probe.disable_probe_pullup = int_value != 0;
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	2b00      	cmp	r3, #0
 801877e:	bf14      	ite	ne
 8018780:	2301      	movne	r3, #1
 8018782:	2300      	moveq	r3, #0
 8018784:	b2d9      	uxtb	r1, r3
 8018786:	4a08      	ldr	r2, [pc, #32]	; (80187a8 <set_probe_disable_pullup+0x48>)
 8018788:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
 801878c:	f361 0341 	bfi	r3, r1, #1, #1
 8018790:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100

    return Status_OK;
 8018794:	2300      	movs	r3, #0
}
 8018796:	4618      	mov	r0, r3
 8018798:	370c      	adds	r7, #12
 801879a:	46bd      	mov	sp, r7
 801879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a0:	4770      	bx	lr
 80187a2:	bf00      	nop
 80187a4:	200016a0 	.word	0x200016a0
 80187a8:	20001cf0 	.word	0x20001cf0

080187ac <tmp_set_soft_limits>:

static void tmp_set_soft_limits (void)
{
 80187ac:	b480      	push	{r7}
 80187ae:	b083      	sub	sp, #12
 80187b0:	af00      	add	r7, sp, #0
    sys.soft_limits.mask = 0;
 80187b2:	4b1b      	ldr	r3, [pc, #108]	; (8018820 <tmp_set_soft_limits+0x74>)
 80187b4:	2200      	movs	r2, #0
 80187b6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

    if(settings.limits.flags.soft_enabled) {
 80187ba:	4b1a      	ldr	r3, [pc, #104]	; (8018824 <tmp_set_soft_limits+0x78>)
 80187bc:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80187c0:	f003 0302 	and.w	r3, r3, #2
 80187c4:	b2db      	uxtb	r3, r3
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d023      	beq.n	8018812 <tmp_set_soft_limits+0x66>
        uint_fast8_t idx = N_AXIS;
 80187ca:	2303      	movs	r3, #3
 80187cc:	607b      	str	r3, [r7, #4]
        do {
            if(settings.axis[--idx].max_travel < -0.0f)
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	3b01      	subs	r3, #1
 80187d2:	607b      	str	r3, [r7, #4]
 80187d4:	4913      	ldr	r1, [pc, #76]	; (8018824 <tmp_set_soft_limits+0x78>)
 80187d6:	687a      	ldr	r2, [r7, #4]
 80187d8:	4613      	mov	r3, r2
 80187da:	009b      	lsls	r3, r3, #2
 80187dc:	4413      	add	r3, r2
 80187de:	009b      	lsls	r3, r3, #2
 80187e0:	440b      	add	r3, r1
 80187e2:	333c      	adds	r3, #60	; 0x3c
 80187e4:	edd3 7a00 	vldr	s15, [r3]
 80187e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80187ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f0:	d50c      	bpl.n	801880c <tmp_set_soft_limits+0x60>
                bit_true(sys.soft_limits.mask, bit(idx));
 80187f2:	4b0b      	ldr	r3, [pc, #44]	; (8018820 <tmp_set_soft_limits+0x74>)
 80187f4:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
 80187f8:	2101      	movs	r1, #1
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	fa01 f303 	lsl.w	r3, r1, r3
 8018800:	b2db      	uxtb	r3, r3
 8018802:	4313      	orrs	r3, r2
 8018804:	b2da      	uxtb	r2, r3
 8018806:	4b06      	ldr	r3, [pc, #24]	; (8018820 <tmp_set_soft_limits+0x74>)
 8018808:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        } while(idx);
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d1dd      	bne.n	80187ce <tmp_set_soft_limits+0x22>
    }
}
 8018812:	bf00      	nop
 8018814:	370c      	adds	r7, #12
 8018816:	46bd      	mov	sp, r7
 8018818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881c:	4770      	bx	lr
 801881e:	bf00      	nop
 8018820:	20001520 	.word	0x20001520
 8018824:	20001cf0 	.word	0x20001cf0

08018828 <set_soft_limits_enable>:

static status_code_t set_soft_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b082      	sub	sp, #8
 801882c:	af00      	add	r7, sp, #0
 801882e:	4603      	mov	r3, r0
 8018830:	6039      	str	r1, [r7, #0]
 8018832:	80fb      	strh	r3, [r7, #6]
    if(int_value && !settings.homing.flags.enabled)
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d009      	beq.n	801884e <set_soft_limits_enable+0x26>
 801883a:	4b0f      	ldr	r3, [pc, #60]	; (8018878 <set_soft_limits_enable+0x50>)
 801883c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8018840:	f003 0301 	and.w	r3, r3, #1
 8018844:	b2db      	uxtb	r3, r3
 8018846:	2b00      	cmp	r3, #0
 8018848:	d101      	bne.n	801884e <set_soft_limits_enable+0x26>
        return Status_SoftLimitError;
 801884a:	230a      	movs	r3, #10
 801884c:	e00f      	b.n	801886e <set_soft_limits_enable+0x46>

    settings.limits.flags.soft_enabled = int_value != 0;
 801884e:	683b      	ldr	r3, [r7, #0]
 8018850:	2b00      	cmp	r3, #0
 8018852:	bf14      	ite	ne
 8018854:	2301      	movne	r3, #1
 8018856:	2300      	moveq	r3, #0
 8018858:	b2d9      	uxtb	r1, r3
 801885a:	4a07      	ldr	r2, [pc, #28]	; (8018878 <set_soft_limits_enable+0x50>)
 801885c:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 8018860:	f361 0341 	bfi	r3, r1, #1, #1
 8018864:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124

    tmp_set_soft_limits();
 8018868:	f7ff ffa0 	bl	80187ac <tmp_set_soft_limits>

    return Status_OK;
 801886c:	2300      	movs	r3, #0
}
 801886e:	4618      	mov	r0, r3
 8018870:	3708      	adds	r7, #8
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
 8018876:	bf00      	nop
 8018878:	20001cf0 	.word	0x20001cf0

0801887c <set_estop_unlock>:

static status_code_t set_estop_unlock (setting_id_t id, uint_fast16_t int_value)
{
 801887c:	b480      	push	{r7}
 801887e:	b083      	sub	sp, #12
 8018880:	af00      	add	r7, sp, #0
 8018882:	4603      	mov	r3, r0
 8018884:	6039      	str	r1, [r7, #0]
 8018886:	80fb      	strh	r3, [r7, #6]
    if(!hal.signals_cap.e_stop)
 8018888:	4b0e      	ldr	r3, [pc, #56]	; (80188c4 <set_estop_unlock+0x48>)
 801888a:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 801888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018892:	b2db      	uxtb	r3, r3
 8018894:	2b00      	cmp	r3, #0
 8018896:	d101      	bne.n	801889c <set_estop_unlock+0x20>
        return Status_SettingDisabled;
 8018898:	2335      	movs	r3, #53	; 0x35
 801889a:	e00d      	b.n	80188b8 <set_estop_unlock+0x3c>

    settings.flags.no_unlock_after_estop = int_value != 0;
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	bf14      	ite	ne
 80188a2:	2301      	movne	r3, #1
 80188a4:	2300      	moveq	r3, #0
 80188a6:	b2d9      	uxtb	r1, r3
 80188a8:	4a07      	ldr	r2, [pc, #28]	; (80188c8 <set_estop_unlock+0x4c>)
 80188aa:	f892 30ff 	ldrb.w	r3, [r2, #255]	; 0xff
 80188ae:	f361 13c7 	bfi	r3, r1, #7, #1
 80188b2:	f882 30ff 	strb.w	r3, [r2, #255]	; 0xff

    return Status_OK;
 80188b6:	2300      	movs	r3, #0
}
 80188b8:	4618      	mov	r0, r3
 80188ba:	370c      	adds	r7, #12
 80188bc:	46bd      	mov	sp, r7
 80188be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c2:	4770      	bx	lr
 80188c4:	200016a0 	.word	0x200016a0
 80188c8:	20001cf0 	.word	0x20001cf0

080188cc <set_offset_lock>:

static status_code_t set_offset_lock (setting_id_t id, uint_fast16_t int_value)
{
 80188cc:	b480      	push	{r7}
 80188ce:	b083      	sub	sp, #12
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	4603      	mov	r3, r0
 80188d4:	6039      	str	r1, [r7, #0]
 80188d6:	80fb      	strh	r3, [r7, #6]
    settings.parking.flags.offset_lock = int_value & 0x07;
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	f003 0307 	and.w	r3, r3, #7
 80188de:	b2d9      	uxtb	r1, r3
 80188e0:	4a06      	ldr	r2, [pc, #24]	; (80188fc <set_offset_lock+0x30>)
 80188e2:	f892 3128 	ldrb.w	r3, [r2, #296]	; 0x128
 80188e6:	f361 1347 	bfi	r3, r1, #5, #3
 80188ea:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128

    return Status_OK;
 80188ee:	2300      	movs	r3, #0
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	370c      	adds	r7, #12
 80188f4:	46bd      	mov	sp, r7
 80188f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fa:	4770      	bx	lr
 80188fc:	20001cf0 	.word	0x20001cf0

08018900 <tmp_set_hard_limits>:

static inline void tmp_set_hard_limits (void)
{
 8018900:	b480      	push	{r7}
 8018902:	af00      	add	r7, sp, #0
    sys.hard_limits.mask = settings.limits.flags.hard_enabled ? AXES_BITMASK : 0;
 8018904:	4b09      	ldr	r3, [pc, #36]	; (801892c <tmp_set_hard_limits+0x2c>)
 8018906:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 801890a:	f003 0301 	and.w	r3, r3, #1
 801890e:	b2db      	uxtb	r3, r3
 8018910:	2b00      	cmp	r3, #0
 8018912:	d001      	beq.n	8018918 <tmp_set_hard_limits+0x18>
 8018914:	2207      	movs	r2, #7
 8018916:	e000      	b.n	801891a <tmp_set_hard_limits+0x1a>
 8018918:	2200      	movs	r2, #0
 801891a:	4b05      	ldr	r3, [pc, #20]	; (8018930 <tmp_set_hard_limits+0x30>)
 801891c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  #if N_AXIS > 3
    if(settings.limits.flags.hard_disabled_rotary)
        sys.hard_limits.mask &= ~settings.steppers.is_rotational.mask;
  #endif
}
 8018920:	bf00      	nop
 8018922:	46bd      	mov	sp, r7
 8018924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018928:	4770      	bx	lr
 801892a:	bf00      	nop
 801892c:	20001cf0 	.word	0x20001cf0
 8018930:	20001520 	.word	0x20001520

08018934 <set_hard_limits_enable>:

static status_code_t set_hard_limits_enable (setting_id_t id, uint_fast16_t int_value)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b082      	sub	sp, #8
 8018938:	af00      	add	r7, sp, #0
 801893a:	4603      	mov	r3, r0
 801893c:	6039      	str	r1, [r7, #0]
 801893e:	80fb      	strh	r3, [r7, #6]
    if((settings.limits.flags.hard_enabled = bit_istrue(int_value, bit(0)))) {
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	f003 0301 	and.w	r3, r3, #1
 8018946:	2b00      	cmp	r3, #0
 8018948:	bf14      	ite	ne
 801894a:	2301      	movne	r3, #1
 801894c:	2300      	moveq	r3, #0
 801894e:	b2d9      	uxtb	r1, r3
 8018950:	4a24      	ldr	r2, [pc, #144]	; (80189e4 <set_hard_limits_enable+0xb0>)
 8018952:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 8018956:	f361 0300 	bfi	r3, r1, #0, #1
 801895a:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124
 801895e:	4b21      	ldr	r3, [pc, #132]	; (80189e4 <set_hard_limits_enable+0xb0>)
 8018960:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8018964:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018968:	b2db      	uxtb	r3, r3
 801896a:	2b00      	cmp	r3, #0
 801896c:	d00f      	beq.n	801898e <set_hard_limits_enable+0x5a>
#if COMPATIBILITY_LEVEL <= 1
        settings.limits.flags.check_at_init = bit_istrue(int_value, bit(1));
 801896e:	683b      	ldr	r3, [r7, #0]
 8018970:	f003 0302 	and.w	r3, r3, #2
 8018974:	2b00      	cmp	r3, #0
 8018976:	bf14      	ite	ne
 8018978:	2301      	movne	r3, #1
 801897a:	2300      	moveq	r3, #0
 801897c:	b2d9      	uxtb	r1, r3
 801897e:	4a19      	ldr	r2, [pc, #100]	; (80189e4 <set_hard_limits_enable+0xb0>)
 8018980:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 8018984:	f361 0382 	bfi	r3, r1, #2, #1
 8018988:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124
 801898c:	e013      	b.n	80189b6 <set_hard_limits_enable+0x82>
  #if N_AXIS > 3
        settings.limits.flags.hard_disabled_rotary = bit_istrue(int_value, bit(2));
  #endif
#endif
    } else
        settings.limits.flags.check_at_init = settings.limits.flags.hard_disabled_rotary = Off;
 801898e:	4a15      	ldr	r2, [pc, #84]	; (80189e4 <set_hard_limits_enable+0xb0>)
 8018990:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 8018994:	f36f 1345 	bfc	r3, #5, #1
 8018998:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124
 801899c:	4b11      	ldr	r3, [pc, #68]	; (80189e4 <set_hard_limits_enable+0xb0>)
 801899e:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80189a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80189a6:	b2d9      	uxtb	r1, r3
 80189a8:	4a0e      	ldr	r2, [pc, #56]	; (80189e4 <set_hard_limits_enable+0xb0>)
 80189aa:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 80189ae:	f361 0382 	bfi	r3, r1, #2, #1
 80189b2:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124

    tmp_set_hard_limits();
 80189b6:	f7ff ffa3 	bl	8018900 <tmp_set_hard_limits>
    hal.limits.enable(settings.limits.flags.hard_enabled, (axes_signals_t){0}); // Change immediately. NOTE: Nice to have but could be problematic later.
 80189ba:	4b0b      	ldr	r3, [pc, #44]	; (80189e8 <set_hard_limits_enable+0xb4>)
 80189bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80189be:	4a09      	ldr	r2, [pc, #36]	; (80189e4 <set_hard_limits_enable+0xb0>)
 80189c0:	f892 2124 	ldrb.w	r2, [r2, #292]	; 0x124
 80189c4:	f3c2 0200 	ubfx	r2, r2, #0, #1
 80189c8:	b2d2      	uxtb	r2, r2
 80189ca:	2a00      	cmp	r2, #0
 80189cc:	bf14      	ite	ne
 80189ce:	2201      	movne	r2, #1
 80189d0:	2200      	moveq	r2, #0
 80189d2:	b2d2      	uxtb	r2, r2
 80189d4:	2100      	movs	r1, #0
 80189d6:	4610      	mov	r0, r2
 80189d8:	4798      	blx	r3

    return Status_OK;
 80189da:	2300      	movs	r3, #0
}
 80189dc:	4618      	mov	r0, r3
 80189de:	3708      	adds	r7, #8
 80189e0:	46bd      	mov	sp, r7
 80189e2:	bd80      	pop	{r7, pc}
 80189e4:	20001cf0 	.word	0x20001cf0
 80189e8:	200016a0 	.word	0x200016a0

080189ec <set_jog_soft_limited>:

static status_code_t set_jog_soft_limited (setting_id_t id, uint_fast16_t int_value)
{
 80189ec:	b480      	push	{r7}
 80189ee:	b083      	sub	sp, #12
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	4603      	mov	r3, r0
 80189f4:	6039      	str	r1, [r7, #0]
 80189f6:	80fb      	strh	r3, [r7, #6]
    if (int_value && !settings.homing.flags.enabled)
 80189f8:	683b      	ldr	r3, [r7, #0]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d009      	beq.n	8018a12 <set_jog_soft_limited+0x26>
 80189fe:	4b0f      	ldr	r3, [pc, #60]	; (8018a3c <set_jog_soft_limited+0x50>)
 8018a00:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8018a04:	f003 0301 	and.w	r3, r3, #1
 8018a08:	b2db      	uxtb	r3, r3
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d101      	bne.n	8018a12 <set_jog_soft_limited+0x26>
        return Status_SoftLimitError;
 8018a0e:	230a      	movs	r3, #10
 8018a10:	e00d      	b.n	8018a2e <set_jog_soft_limited+0x42>

    settings.limits.flags.jog_soft_limited = int_value != 0;
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	bf14      	ite	ne
 8018a18:	2301      	movne	r3, #1
 8018a1a:	2300      	moveq	r3, #0
 8018a1c:	b2d9      	uxtb	r1, r3
 8018a1e:	4a07      	ldr	r2, [pc, #28]	; (8018a3c <set_jog_soft_limited+0x50>)
 8018a20:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 8018a24:	f361 03c3 	bfi	r3, r1, #3, #1
 8018a28:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124

    return Status_OK;
 8018a2c:	2300      	movs	r3, #0
}
 8018a2e:	4618      	mov	r0, r3
 8018a30:	370c      	adds	r7, #12
 8018a32:	46bd      	mov	sp, r7
 8018a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a38:	4770      	bx	lr
 8018a3a:	bf00      	nop
 8018a3c:	20001cf0 	.word	0x20001cf0

08018a40 <set_homing_enable>:

static status_code_t set_homing_enable (setting_id_t id, uint_fast16_t int_value)
{
 8018a40:	b480      	push	{r7}
 8018a42:	b083      	sub	sp, #12
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	4603      	mov	r3, r0
 8018a48:	6039      	str	r1, [r7, #0]
 8018a4a:	80fb      	strh	r3, [r7, #6]
    if (bit_istrue(int_value, bit(0))) {
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	f003 0301 	and.w	r3, r3, #1
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d044      	beq.n	8018ae0 <set_homing_enable+0xa0>
        settings.homing.flags.manual = DEFAULT_HOMING_ALLOW_MANUAL;
        settings.homing.flags.override_locks = DEFAULT_HOMING_OVERRIDE_LOCKS;
        settings.homing.flags.keep_on_reset = DEFAULT_HOMING_KEEP_STATUS_ON_RESET;
        settings.limits.flags.two_switches = DEFAULT_LIMITS_TWO_SWITCHES_ON_AXES;
#else
        settings.homing.flags.value = int_value & 0x0F;
 8018a56:	683b      	ldr	r3, [r7, #0]
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	f003 030f 	and.w	r3, r3, #15
 8018a5e:	b2da      	uxtb	r2, r3
 8018a60:	4b2c      	ldr	r3, [pc, #176]	; (8018b14 <set_homing_enable+0xd4>)
 8018a62:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        settings.limits.flags.two_switches = bit_istrue(int_value, bit(4));
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	f003 0310 	and.w	r3, r3, #16
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	bf14      	ite	ne
 8018a70:	2301      	movne	r3, #1
 8018a72:	2300      	moveq	r3, #0
 8018a74:	b2d9      	uxtb	r1, r3
 8018a76:	4a27      	ldr	r2, [pc, #156]	; (8018b14 <set_homing_enable+0xd4>)
 8018a78:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 8018a7c:	f361 1304 	bfi	r3, r1, #4, #1
 8018a80:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124
        settings.homing.flags.manual = bit_istrue(int_value, bit(5));
 8018a84:	683b      	ldr	r3, [r7, #0]
 8018a86:	f003 0320 	and.w	r3, r3, #32
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	bf14      	ite	ne
 8018a8e:	2301      	movne	r3, #1
 8018a90:	2300      	moveq	r3, #0
 8018a92:	b2d9      	uxtb	r1, r3
 8018a94:	4a1f      	ldr	r2, [pc, #124]	; (8018b14 <set_homing_enable+0xd4>)
 8018a96:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 8018a9a:	f361 1304 	bfi	r3, r1, #4, #1
 8018a9e:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
        settings.homing.flags.override_locks = bit_istrue(int_value, bit(6));
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	bf14      	ite	ne
 8018aac:	2301      	movne	r3, #1
 8018aae:	2300      	moveq	r3, #0
 8018ab0:	b2d9      	uxtb	r1, r3
 8018ab2:	4a18      	ldr	r2, [pc, #96]	; (8018b14 <set_homing_enable+0xd4>)
 8018ab4:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 8018ab8:	f361 1345 	bfi	r3, r1, #5, #1
 8018abc:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
        settings.homing.flags.keep_on_reset = bit_istrue(int_value, bit(7));
 8018ac0:	683b      	ldr	r3, [r7, #0]
 8018ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	bf14      	ite	ne
 8018aca:	2301      	movne	r3, #1
 8018acc:	2300      	moveq	r3, #0
 8018ace:	b2d9      	uxtb	r1, r3
 8018ad0:	4a10      	ldr	r2, [pc, #64]	; (8018b14 <set_homing_enable+0xd4>)
 8018ad2:	f892 3114 	ldrb.w	r3, [r2, #276]	; 0x114
 8018ad6:	f361 1386 	bfi	r3, r1, #6, #1
 8018ada:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
 8018ade:	e011      	b.n	8018b04 <set_homing_enable+0xc4>
#endif
    } else {
        settings.homing.flags.value = 0;
 8018ae0:	4b0c      	ldr	r3, [pc, #48]	; (8018b14 <set_homing_enable+0xd4>)
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        settings.limits.flags.soft_enabled = Off; // Force disable soft-limits.
 8018ae8:	4a0a      	ldr	r2, [pc, #40]	; (8018b14 <set_homing_enable+0xd4>)
 8018aea:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 8018aee:	f36f 0341 	bfc	r3, #1, #1
 8018af2:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124
        settings.limits.flags.jog_soft_limited = Off;
 8018af6:	4a07      	ldr	r2, [pc, #28]	; (8018b14 <set_homing_enable+0xd4>)
 8018af8:	f892 3124 	ldrb.w	r3, [r2, #292]	; 0x124
 8018afc:	f36f 03c3 	bfc	r3, #3, #1
 8018b00:	f882 3124 	strb.w	r3, [r2, #292]	; 0x124
    }

    return Status_OK;
 8018b04:	2300      	movs	r3, #0
}
 8018b06:	4618      	mov	r0, r3
 8018b08:	370c      	adds	r7, #12
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b10:	4770      	bx	lr
 8018b12:	bf00      	nop
 8018b14:	20001cf0 	.word	0x20001cf0

08018b18 <set_enable_legacy_rt_commands>:

static status_code_t set_enable_legacy_rt_commands (setting_id_t id, uint_fast16_t int_value)
{
 8018b18:	b480      	push	{r7}
 8018b1a:	b083      	sub	sp, #12
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	4603      	mov	r3, r0
 8018b20:	6039      	str	r1, [r7, #0]
 8018b22:	80fb      	strh	r3, [r7, #6]
    settings.flags.legacy_rt_commands = int_value != 0;
 8018b24:	683b      	ldr	r3, [r7, #0]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	bf14      	ite	ne
 8018b2a:	2301      	movne	r3, #1
 8018b2c:	2300      	moveq	r3, #0
 8018b2e:	b2d9      	uxtb	r1, r3
 8018b30:	4a06      	ldr	r2, [pc, #24]	; (8018b4c <set_enable_legacy_rt_commands+0x34>)
 8018b32:	f892 30fe 	ldrb.w	r3, [r2, #254]	; 0xfe
 8018b36:	f361 1386 	bfi	r3, r1, #6, #1
 8018b3a:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe

    return Status_OK;
 8018b3e:	2300      	movs	r3, #0
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	370c      	adds	r7, #12
 8018b44:	46bd      	mov	sp, r7
 8018b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4a:	4770      	bx	lr
 8018b4c:	20001cf0 	.word	0x20001cf0

08018b50 <set_homing_cycle>:

static status_code_t set_homing_cycle (setting_id_t id, uint_fast16_t int_value)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	4603      	mov	r3, r0
 8018b58:	6039      	str	r1, [r7, #0]
 8018b5a:	80fb      	strh	r3, [r7, #6]
    settings.homing.cycle[id - Setting_HomingCycle_1].mask = int_value;
 8018b5c:	88fb      	ldrh	r3, [r7, #6]
 8018b5e:	3b2c      	subs	r3, #44	; 0x2c
 8018b60:	683a      	ldr	r2, [r7, #0]
 8018b62:	b2d1      	uxtb	r1, r2
 8018b64:	4a05      	ldr	r2, [pc, #20]	; (8018b7c <set_homing_cycle+0x2c>)
 8018b66:	4413      	add	r3, r2
 8018b68:	460a      	mov	r2, r1
 8018b6a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    limits_set_homing_axes();
 8018b6e:	f7f3 fdf9 	bl	800c764 <limits_set_homing_axes>

    return Status_OK;
 8018b72:	2300      	movs	r3, #0
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	3708      	adds	r7, #8
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	20001cf0 	.word	0x20001cf0

08018b80 <set_mode>:

static status_code_t set_mode (setting_id_t id, uint_fast16_t int_value)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b082      	sub	sp, #8
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	4603      	mov	r3, r0
 8018b88:	6039      	str	r1, [r7, #0]
 8018b8a:	80fb      	strh	r3, [r7, #6]
    switch((machine_mode_t)int_value) {
 8018b8c:	683b      	ldr	r3, [r7, #0]
 8018b8e:	b2db      	uxtb	r3, r3
 8018b90:	2b02      	cmp	r3, #2
 8018b92:	d01c      	beq.n	8018bce <set_mode+0x4e>
 8018b94:	2b02      	cmp	r3, #2
 8018b96:	dc18      	bgt.n	8018bca <set_mode+0x4a>
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d002      	beq.n	8018ba2 <set_mode+0x22>
 8018b9c:	2b01      	cmp	r3, #1
 8018b9e:	d004      	beq.n	8018baa <set_mode+0x2a>
 8018ba0:	e013      	b.n	8018bca <set_mode+0x4a>

        case Mode_Standard:
           gc_state.modal.diameter_mode = false;
 8018ba2:	4b11      	ldr	r3, [pc, #68]	; (8018be8 <set_mode+0x68>)
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	715a      	strb	r2, [r3, #5]
           break;
 8018ba8:	e012      	b.n	8018bd0 <set_mode+0x50>

        case Mode_Laser:
            if(!spindle_get_caps(false).laser)
 8018baa:	2000      	movs	r0, #0
 8018bac:	f003 f882 	bl	801bcb4 <spindle_get_caps>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	b2db      	uxtb	r3, r3
 8018bb4:	f003 0308 	and.w	r3, r3, #8
 8018bb8:	b2db      	uxtb	r3, r3
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d101      	bne.n	8018bc2 <set_mode+0x42>
                return Status_SettingDisabledLaser;
 8018bbe:	2311      	movs	r3, #17
 8018bc0:	e00e      	b.n	8018be0 <set_mode+0x60>
            gc_state.modal.diameter_mode = false;
 8018bc2:	4b09      	ldr	r3, [pc, #36]	; (8018be8 <set_mode+0x68>)
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	715a      	strb	r2, [r3, #5]
            break;
 8018bc8:	e002      	b.n	8018bd0 <set_mode+0x50>

         case Mode_Lathe:
            break;

         default: // Mode_Standard
            return Status_InvalidStatement;
 8018bca:	2303      	movs	r3, #3
 8018bcc:	e008      	b.n	8018be0 <set_mode+0x60>
            break;
 8018bce:	bf00      	nop
    }

    machine_mode_changed = true;
 8018bd0:	4b06      	ldr	r3, [pc, #24]	; (8018bec <set_mode+0x6c>)
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	701a      	strb	r2, [r3, #0]
    settings.mode = (machine_mode_t)int_value;
 8018bd6:	683b      	ldr	r3, [r7, #0]
 8018bd8:	b2da      	uxtb	r2, r3
 8018bda:	4b05      	ldr	r3, [pc, #20]	; (8018bf0 <set_mode+0x70>)
 8018bdc:	761a      	strb	r2, [r3, #24]

    return Status_OK;
 8018bde:	2300      	movs	r3, #0
}
 8018be0:	4618      	mov	r0, r3
 8018be2:	3708      	adds	r7, #8
 8018be4:	46bd      	mov	sp, r7
 8018be6:	bd80      	pop	{r7, pc}
 8018be8:	2000137c 	.word	0x2000137c
 8018bec:	20001e5c 	.word	0x20001e5c
 8018bf0:	20001cf0 	.word	0x20001cf0

08018bf4 <set_parking_enable>:

#ifndef NO_SAFETY_DOOR_SUPPORT

static status_code_t set_parking_enable (setting_id_t id, uint_fast16_t int_value)
{
 8018bf4:	b480      	push	{r7}
 8018bf6:	b083      	sub	sp, #12
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	6039      	str	r1, [r7, #0]
 8018bfe:	80fb      	strh	r3, [r7, #6]
    settings.parking.flags.value = bit_istrue(int_value, bit(0)) ? (int_value & 0x07) : 0;
 8018c00:	683b      	ldr	r3, [r7, #0]
 8018c02:	f003 0301 	and.w	r3, r3, #1
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d005      	beq.n	8018c16 <set_parking_enable+0x22>
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	f003 0307 	and.w	r3, r3, #7
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	e000      	b.n	8018c18 <set_parking_enable+0x24>
 8018c16:	2300      	movs	r3, #0
 8018c18:	4a04      	ldr	r2, [pc, #16]	; (8018c2c <set_parking_enable+0x38>)
 8018c1a:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128

    return Status_OK;
 8018c1e:	2300      	movs	r3, #0
}
 8018c20:	4618      	mov	r0, r3
 8018c22:	370c      	adds	r7, #12
 8018c24:	46bd      	mov	sp, r7
 8018c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2a:	4770      	bx	lr
 8018c2c:	20001cf0 	.word	0x20001cf0

08018c30 <set_restore_overrides>:

static status_code_t set_restore_overrides (setting_id_t id, uint_fast16_t int_value)
{
 8018c30:	b480      	push	{r7}
 8018c32:	b083      	sub	sp, #12
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	4603      	mov	r3, r0
 8018c38:	6039      	str	r1, [r7, #0]
 8018c3a:	80fb      	strh	r3, [r7, #6]
    settings.flags.restore_overrides = int_value != 0;
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	bf14      	ite	ne
 8018c42:	2301      	movne	r3, #1
 8018c44:	2300      	moveq	r3, #0
 8018c46:	b2d9      	uxtb	r1, r3
 8018c48:	4a06      	ldr	r2, [pc, #24]	; (8018c64 <set_restore_overrides+0x34>)
 8018c4a:	f892 30fe 	ldrb.w	r3, [r2, #254]	; 0xfe
 8018c4e:	f361 0341 	bfi	r3, r1, #1, #1
 8018c52:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe

    return Status_OK;
 8018c56:	2300      	movs	r3, #0
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	370c      	adds	r7, #12
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c62:	4770      	bx	lr
 8018c64:	20001cf0 	.word	0x20001cf0

08018c68 <set_sleep_enable>:

#endif

static status_code_t set_sleep_enable (setting_id_t id, uint_fast16_t int_value)
{
 8018c68:	b480      	push	{r7}
 8018c6a:	b083      	sub	sp, #12
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	4603      	mov	r3, r0
 8018c70:	6039      	str	r1, [r7, #0]
 8018c72:	80fb      	strh	r3, [r7, #6]
    settings.flags.sleep_enable = int_value != 0;
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	bf14      	ite	ne
 8018c7a:	2301      	movne	r3, #1
 8018c7c:	2300      	moveq	r3, #0
 8018c7e:	b2d9      	uxtb	r1, r3
 8018c80:	4a06      	ldr	r2, [pc, #24]	; (8018c9c <set_sleep_enable+0x34>)
 8018c82:	f892 30fe 	ldrb.w	r3, [r2, #254]	; 0xfe
 8018c86:	f361 03c3 	bfi	r3, r1, #3, #1
 8018c8a:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe

    return Status_OK;
 8018c8e:	2300      	movs	r3, #0
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	370c      	adds	r7, #12
 8018c94:	46bd      	mov	sp, r7
 8018c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9a:	4770      	bx	lr
 8018c9c:	20001cf0 	.word	0x20001cf0

08018ca0 <set_hold_actions>:

static status_code_t set_hold_actions (setting_id_t id, uint_fast16_t int_value)
{
 8018ca0:	b480      	push	{r7}
 8018ca2:	b083      	sub	sp, #12
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	6039      	str	r1, [r7, #0]
 8018caa:	80fb      	strh	r3, [r7, #6]
    settings.flags.disable_laser_during_hold = bit_istrue(int_value, bit(0));
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	f003 0301 	and.w	r3, r3, #1
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	bf14      	ite	ne
 8018cb6:	2301      	movne	r3, #1
 8018cb8:	2300      	moveq	r3, #0
 8018cba:	b2d9      	uxtb	r1, r3
 8018cbc:	4a0e      	ldr	r2, [pc, #56]	; (8018cf8 <set_hold_actions+0x58>)
 8018cbe:	f892 30fe 	ldrb.w	r3, [r2, #254]	; 0xfe
 8018cc2:	f361 1304 	bfi	r3, r1, #4, #1
 8018cc6:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe
    settings.flags.restore_after_feed_hold = bit_istrue(int_value, bit(1));
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	f003 0302 	and.w	r3, r3, #2
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	bf14      	ite	ne
 8018cd4:	2301      	movne	r3, #1
 8018cd6:	2300      	moveq	r3, #0
 8018cd8:	b2d9      	uxtb	r1, r3
 8018cda:	4a07      	ldr	r2, [pc, #28]	; (8018cf8 <set_hold_actions+0x58>)
 8018cdc:	f892 30fe 	ldrb.w	r3, [r2, #254]	; 0xfe
 8018ce0:	f361 13c7 	bfi	r3, r1, #7, #1
 8018ce4:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe

    return Status_OK;
 8018ce8:	2300      	movs	r3, #0
}
 8018cea:	4618      	mov	r0, r3
 8018cec:	370c      	adds	r7, #12
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop
 8018cf8:	20001cf0 	.word	0x20001cf0

08018cfc <set_g92_disable_persistence>:

#if COMPATIBILITY_LEVEL <= 1
static status_code_t set_g92_disable_persistence (setting_id_t id, uint_fast16_t int_value)
{
 8018cfc:	b480      	push	{r7}
 8018cfe:	b083      	sub	sp, #12
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	4603      	mov	r3, r0
 8018d04:	6039      	str	r1, [r7, #0]
 8018d06:	80fb      	strh	r3, [r7, #6]
    settings.flags.g92_is_volatile = int_value != 0;
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	bf14      	ite	ne
 8018d0e:	2301      	movne	r3, #1
 8018d10:	2300      	moveq	r3, #0
 8018d12:	b2d9      	uxtb	r1, r3
 8018d14:	4a06      	ldr	r2, [pc, #24]	; (8018d30 <set_g92_disable_persistence+0x34>)
 8018d16:	f892 30ff 	ldrb.w	r3, [r2, #255]	; 0xff
 8018d1a:	f361 0341 	bfi	r3, r1, #1, #1
 8018d1e:	f882 30ff 	strb.w	r3, [r2, #255]	; 0xff

    return Status_OK;
 8018d22:	2300      	movs	r3, #0
}
 8018d24:	4618      	mov	r0, r3
 8018d26:	370c      	adds	r7, #12
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2e:	4770      	bx	lr
 8018d30:	20001cf0 	.word	0x20001cf0

08018d34 <set_force_initialization_alarm>:
#endif

static status_code_t set_force_initialization_alarm (setting_id_t id, uint_fast16_t int_value)
{
 8018d34:	b480      	push	{r7}
 8018d36:	b083      	sub	sp, #12
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	4603      	mov	r3, r0
 8018d3c:	6039      	str	r1, [r7, #0]
 8018d3e:	80fb      	strh	r3, [r7, #6]
    settings.flags.force_initialization_alarm = int_value != 0;
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	bf14      	ite	ne
 8018d46:	2301      	movne	r3, #1
 8018d48:	2300      	moveq	r3, #0
 8018d4a:	b2d9      	uxtb	r1, r3
 8018d4c:	4a06      	ldr	r2, [pc, #24]	; (8018d68 <set_force_initialization_alarm+0x34>)
 8018d4e:	f892 30fe 	ldrb.w	r3, [r2, #254]	; 0xfe
 8018d52:	f361 1345 	bfi	r3, r1, #5, #1
 8018d56:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe

    return Status_OK;
 8018d5a:	2300      	movs	r3, #0
}
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	370c      	adds	r7, #12
 8018d60:	46bd      	mov	sp, r7
 8018d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d66:	4770      	bx	lr
 8018d68:	20001cf0 	.word	0x20001cf0

08018d6c <set_probe_allow_feed_override>:

static status_code_t set_probe_allow_feed_override (setting_id_t id, uint_fast16_t int_value)
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	b083      	sub	sp, #12
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	4603      	mov	r3, r0
 8018d74:	6039      	str	r1, [r7, #0]
 8018d76:	80fb      	strh	r3, [r7, #6]
    settings.probe.allow_feed_override = int_value != 0;
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	bf14      	ite	ne
 8018d7e:	2301      	movne	r3, #1
 8018d80:	2300      	moveq	r3, #0
 8018d82:	b2d9      	uxtb	r1, r3
 8018d84:	4a06      	ldr	r2, [pc, #24]	; (8018da0 <set_probe_allow_feed_override+0x34>)
 8018d86:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
 8018d8a:	f361 1304 	bfi	r3, r1, #4, #1
 8018d8e:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100

    return Status_OK;
 8018d92:	2300      	movs	r3, #0
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	370c      	adds	r7, #12
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9e:	4770      	bx	lr
 8018da0:	20001cf0 	.word	0x20001cf0

08018da4 <set_tool_change_mode>:

static status_code_t set_tool_change_mode (setting_id_t id, uint_fast16_t int_value)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	4603      	mov	r3, r0
 8018dac:	6039      	str	r1, [r7, #0]
 8018dae:	80fb      	strh	r3, [r7, #6]
    if(!hal.driver_cap.atc && hal.stream.suspend_read && int_value <= ToolChange_Ignore) {
 8018db0:	4b0e      	ldr	r3, [pc, #56]	; (8018dec <set_tool_change_mode+0x48>)
 8018db2:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8018db6:	f003 0301 	and.w	r3, r3, #1
 8018dba:	b2db      	uxtb	r3, r3
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d110      	bne.n	8018de2 <set_tool_change_mode+0x3e>
 8018dc0:	4b0a      	ldr	r3, [pc, #40]	; (8018dec <set_tool_change_mode+0x48>)
 8018dc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d00b      	beq.n	8018de2 <set_tool_change_mode+0x3e>
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	2b04      	cmp	r3, #4
 8018dce:	d808      	bhi.n	8018de2 <set_tool_change_mode+0x3e>
#if COMPATIBILITY_LEVEL > 1
        if((toolchange_mode_t)int_value == ToolChange_Manual_G59_3 || (toolchange_mode_t)int_value == ToolChange_SemiAutomatic)
            return Status_InvalidStatement;
#endif
        settings.tool_change.mode = (toolchange_mode_t)int_value;
 8018dd0:	683b      	ldr	r3, [r7, #0]
 8018dd2:	b2da      	uxtb	r2, r3
 8018dd4:	4b06      	ldr	r3, [pc, #24]	; (8018df0 <set_tool_change_mode+0x4c>)
 8018dd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        tc_init();
 8018dda:	f009 f94d 	bl	8022078 <tc_init>
    } else
        return Status_InvalidStatement;

    return Status_OK;
 8018dde:	2300      	movs	r3, #0
 8018de0:	e000      	b.n	8018de4 <set_tool_change_mode+0x40>
        return Status_InvalidStatement;
 8018de2:	2303      	movs	r3, #3
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	3708      	adds	r7, #8
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	200016a0 	.word	0x200016a0
 8018df0:	20001cf0 	.word	0x20001cf0

08018df4 <set_tool_change_probing_distance>:

static status_code_t set_tool_change_probing_distance (setting_id_t id, float value)
{
 8018df4:	b480      	push	{r7}
 8018df6:	b083      	sub	sp, #12
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	ed87 0a00 	vstr	s0, [r7]
 8018e00:	80fb      	strh	r3, [r7, #6]
    if(hal.driver_cap.atc)
 8018e02:	4b0a      	ldr	r3, [pc, #40]	; (8018e2c <set_tool_change_probing_distance+0x38>)
 8018e04:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8018e08:	f003 0301 	and.w	r3, r3, #1
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d001      	beq.n	8018e16 <set_tool_change_probing_distance+0x22>
        return Status_InvalidStatement;
 8018e12:	2303      	movs	r3, #3
 8018e14:	e003      	b.n	8018e1e <set_tool_change_probing_distance+0x2a>

    settings.tool_change.probing_distance = value;
 8018e16:	4a06      	ldr	r2, [pc, #24]	; (8018e30 <set_tool_change_probing_distance+0x3c>)
 8018e18:	683b      	ldr	r3, [r7, #0]
 8018e1a:	6293      	str	r3, [r2, #40]	; 0x28

    return Status_OK;
 8018e1c:	2300      	movs	r3, #0
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	370c      	adds	r7, #12
 8018e22:	46bd      	mov	sp, r7
 8018e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e28:	4770      	bx	lr
 8018e2a:	bf00      	nop
 8018e2c:	200016a0 	.word	0x200016a0
 8018e30:	20001cf0 	.word	0x20001cf0

08018e34 <set_tool_restore_pos>:

static status_code_t set_tool_restore_pos (setting_id_t id, uint_fast16_t int_value)
{
 8018e34:	b480      	push	{r7}
 8018e36:	b083      	sub	sp, #12
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	6039      	str	r1, [r7, #0]
 8018e3e:	80fb      	strh	r3, [r7, #6]
    if(hal.driver_cap.atc)
 8018e40:	4b0e      	ldr	r3, [pc, #56]	; (8018e7c <set_tool_restore_pos+0x48>)
 8018e42:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8018e46:	f003 0301 	and.w	r3, r3, #1
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d001      	beq.n	8018e54 <set_tool_restore_pos+0x20>
        return Status_InvalidStatement;
 8018e50:	2303      	movs	r3, #3
 8018e52:	e00d      	b.n	8018e70 <set_tool_restore_pos+0x3c>

    settings.flags.no_restore_position_after_M6 = int_value == 0;
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	bf0c      	ite	eq
 8018e5a:	2301      	moveq	r3, #1
 8018e5c:	2300      	movne	r3, #0
 8018e5e:	b2d9      	uxtb	r1, r3
 8018e60:	4a07      	ldr	r2, [pc, #28]	; (8018e80 <set_tool_restore_pos+0x4c>)
 8018e62:	f892 30ff 	ldrb.w	r3, [r2, #255]	; 0xff
 8018e66:	f361 1386 	bfi	r3, r1, #6, #1
 8018e6a:	f882 30ff 	strb.w	r3, [r2, #255]	; 0xff

    return Status_OK;
 8018e6e:	2300      	movs	r3, #0
}
 8018e70:	4618      	mov	r0, r3
 8018e72:	370c      	adds	r7, #12
 8018e74:	46bd      	mov	sp, r7
 8018e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7a:	4770      	bx	lr
 8018e7c:	200016a0 	.word	0x200016a0
 8018e80:	20001cf0 	.word	0x20001cf0

08018e84 <set_axis_unit>:

static inline void set_axis_unit (const setting_detail_t *setting, const char *unit)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	6039      	str	r1, [r7, #0]
    // TODO: add length check
    if(unit)
 8018e8e:	683b      	ldr	r3, [r7, #0]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d005      	beq.n	8018ea0 <set_axis_unit+0x1c>
        strcpy((char *)setting->unit, unit);
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	689b      	ldr	r3, [r3, #8]
 8018e98:	6839      	ldr	r1, [r7, #0]
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f00d f924 	bl	80260e8 <strcpy>
}
 8018ea0:	bf00      	nop
 8018ea2:	3708      	adds	r7, #8
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	bd80      	pop	{r7, pc}

08018ea8 <normalize_id>:
}

#endif

inline static setting_id_t normalize_id (setting_id_t id)
{
 8018ea8:	b480      	push	{r7}
 8018eaa:	b083      	sub	sp, #12
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	4603      	mov	r3, r0
 8018eb0:	80fb      	strh	r3, [r7, #6]
    if((id > Setting_AxisSettingsBase && id <= Setting_AxisSettingsMax) ||
 8018eb2:	88fb      	ldrh	r3, [r7, #6]
 8018eb4:	2b64      	cmp	r3, #100	; 0x64
 8018eb6:	d902      	bls.n	8018ebe <normalize_id+0x16>
 8018eb8:	88fb      	ldrh	r3, [r7, #6]
 8018eba:	2bc1      	cmp	r3, #193	; 0xc1
 8018ebc:	d906      	bls.n	8018ecc <normalize_id+0x24>
 8018ebe:	88fb      	ldrh	r3, [r7, #6]
 8018ec0:	2bc8      	cmp	r3, #200	; 0xc8
 8018ec2:	d912      	bls.n	8018eea <normalize_id+0x42>
       (id > Setting_AxisSettingsBase2 && id <= Setting_AxisSettingsMax2))
 8018ec4:	88fb      	ldrh	r3, [r7, #6]
 8018ec6:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8018eca:	d20e      	bcs.n	8018eea <normalize_id+0x42>
        id -= id % AXIS_SETTINGS_INCREMENT;
 8018ecc:	88fa      	ldrh	r2, [r7, #6]
 8018ece:	4b20      	ldr	r3, [pc, #128]	; (8018f50 <normalize_id+0xa8>)
 8018ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8018ed4:	08d9      	lsrs	r1, r3, #3
 8018ed6:	460b      	mov	r3, r1
 8018ed8:	009b      	lsls	r3, r3, #2
 8018eda:	440b      	add	r3, r1
 8018edc:	005b      	lsls	r3, r3, #1
 8018ede:	1ad3      	subs	r3, r2, r3
 8018ee0:	b29b      	uxth	r3, r3
 8018ee2:	88fa      	ldrh	r2, [r7, #6]
 8018ee4:	1ad3      	subs	r3, r2, r3
 8018ee6:	80fb      	strh	r3, [r7, #6]
 8018ee8:	e02b      	b.n	8018f42 <normalize_id+0x9a>
    else if(id > Setting_EncoderSettingsBase && id <= Setting_EncoderSettingsMax)
 8018eea:	88fb      	ldrh	r3, [r7, #6]
 8018eec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8018ef0:	d912      	bls.n	8018f18 <normalize_id+0x70>
 8018ef2:	88fb      	ldrh	r3, [r7, #6]
 8018ef4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8018ef8:	d20e      	bcs.n	8018f18 <normalize_id+0x70>
        id = (setting_id_t)(Setting_EncoderSettingsBase + (id % ENCODER_SETTINGS_INCREMENT));
 8018efa:	88fa      	ldrh	r2, [r7, #6]
 8018efc:	4b14      	ldr	r3, [pc, #80]	; (8018f50 <normalize_id+0xa8>)
 8018efe:	fba3 1302 	umull	r1, r3, r3, r2
 8018f02:	08d9      	lsrs	r1, r3, #3
 8018f04:	460b      	mov	r3, r1
 8018f06:	009b      	lsls	r3, r3, #2
 8018f08:	440b      	add	r3, r1
 8018f0a:	005b      	lsls	r3, r3, #1
 8018f0c:	1ad3      	subs	r3, r2, r3
 8018f0e:	b29b      	uxth	r3, r3
 8018f10:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8018f14:	80fb      	strh	r3, [r7, #6]
 8018f16:	e014      	b.n	8018f42 <normalize_id+0x9a>
    else if(id > Setting_ModbusTCPBase && id <= Setting_ModbusTCPMax)
 8018f18:	88fb      	ldrh	r3, [r7, #6]
 8018f1a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8018f1e:	d910      	bls.n	8018f42 <normalize_id+0x9a>
 8018f20:	88fb      	ldrh	r3, [r7, #6]
 8018f22:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018f26:	d20c      	bcs.n	8018f42 <normalize_id+0x9a>
        id = (setting_id_t)(Setting_ModbusTCPBase + (id % MODBUS_TCP_SETTINGS_INCREMENT));
 8018f28:	88fa      	ldrh	r2, [r7, #6]
 8018f2a:	4b09      	ldr	r3, [pc, #36]	; (8018f50 <normalize_id+0xa8>)
 8018f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8018f30:	0899      	lsrs	r1, r3, #2
 8018f32:	460b      	mov	r3, r1
 8018f34:	009b      	lsls	r3, r3, #2
 8018f36:	440b      	add	r3, r1
 8018f38:	1ad3      	subs	r3, r2, r3
 8018f3a:	b29b      	uxth	r3, r3
 8018f3c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8018f40:	80fb      	strh	r3, [r7, #6]

    return id;
 8018f42:	88fb      	ldrh	r3, [r7, #6]
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	370c      	adds	r7, #12
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4e:	4770      	bx	lr
 8018f50:	cccccccd 	.word	0xcccccccd

08018f54 <settings_get_axis_base>:

setting_id_t settings_get_axis_base (setting_id_t id, uint_fast8_t *idx)
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b084      	sub	sp, #16
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	6039      	str	r1, [r7, #0]
 8018f5e:	80fb      	strh	r3, [r7, #6]
    setting_id_t base = normalize_id(id);
 8018f60:	88fb      	ldrh	r3, [r7, #6]
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7ff ffa0 	bl	8018ea8 <normalize_id>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	81fb      	strh	r3, [r7, #14]
    *idx = id - base;
 8018f6c:	88fa      	ldrh	r2, [r7, #6]
 8018f6e:	89fb      	ldrh	r3, [r7, #14]
 8018f70:	1ad3      	subs	r3, r2, r3
 8018f72:	461a      	mov	r2, r3
 8018f74:	683b      	ldr	r3, [r7, #0]
 8018f76:	601a      	str	r2, [r3, #0]

    return *idx < N_AXIS ? base : Setting_SettingsMax;
 8018f78:	683b      	ldr	r3, [r7, #0]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	2b02      	cmp	r3, #2
 8018f7e:	d801      	bhi.n	8018f84 <settings_get_axis_base+0x30>
 8018f80:	89fb      	ldrh	r3, [r7, #14]
 8018f82:	e001      	b.n	8018f88 <settings_get_axis_base+0x34>
 8018f84:	f240 238a 	movw	r3, #650	; 0x28a
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	3710      	adds	r7, #16
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}

08018f90 <set_axis_setting>:

static status_code_t set_axis_setting (setting_id_t setting, float value)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b086      	sub	sp, #24
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	4603      	mov	r3, r0
 8018f98:	ed87 0a00 	vstr	s0, [r7]
 8018f9c:	80fb      	strh	r3, [r7, #6]
    uint_fast8_t idx;
    status_code_t status = Status_OK;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	75fb      	strb	r3, [r7, #23]

    switch(settings_get_axis_base(setting, &idx)) {
 8018fa2:	f107 020c 	add.w	r2, r7, #12
 8018fa6:	88fb      	ldrh	r3, [r7, #6]
 8018fa8:	4611      	mov	r1, r2
 8018faa:	4618      	mov	r0, r3
 8018fac:	f7ff ffd2 	bl	8018f54 <settings_get_axis_base>
 8018fb0:	4603      	mov	r3, r0
 8018fb2:	2baa      	cmp	r3, #170	; 0xaa
 8018fb4:	f000 81ad 	beq.w	8019312 <set_axis_setting+0x382>
 8018fb8:	2baa      	cmp	r3, #170	; 0xaa
 8018fba:	f300 81cc 	bgt.w	8019356 <set_axis_setting+0x3c6>
 8018fbe:	2b82      	cmp	r3, #130	; 0x82
 8018fc0:	dc48      	bgt.n	8019054 <set_axis_setting+0xc4>
 8018fc2:	2b64      	cmp	r3, #100	; 0x64
 8018fc4:	f2c0 81c7 	blt.w	8019356 <set_axis_setting+0x3c6>
 8018fc8:	3b64      	subs	r3, #100	; 0x64
 8018fca:	2b1e      	cmp	r3, #30
 8018fcc:	f200 81c3 	bhi.w	8019356 <set_axis_setting+0x3c6>
 8018fd0:	a201      	add	r2, pc, #4	; (adr r2, 8018fd8 <set_axis_setting+0x48>)
 8018fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fd6:	bf00      	nop
 8018fd8:	0801905d 	.word	0x0801905d
 8018fdc:	08019357 	.word	0x08019357
 8018fe0:	08019357 	.word	0x08019357
 8018fe4:	08019357 	.word	0x08019357
 8018fe8:	08019357 	.word	0x08019357
 8018fec:	08019357 	.word	0x08019357
 8018ff0:	08019357 	.word	0x08019357
 8018ff4:	08019357 	.word	0x08019357
 8018ff8:	08019357 	.word	0x08019357
 8018ffc:	08019357 	.word	0x08019357
 8019000:	080191cf 	.word	0x080191cf
 8019004:	08019357 	.word	0x08019357
 8019008:	08019357 	.word	0x08019357
 801900c:	08019357 	.word	0x08019357
 8019010:	08019357 	.word	0x08019357
 8019014:	08019357 	.word	0x08019357
 8019018:	08019357 	.word	0x08019357
 801901c:	08019357 	.word	0x08019357
 8019020:	08019357 	.word	0x08019357
 8019024:	08019357 	.word	0x08019357
 8019028:	0801922d 	.word	0x0801922d
 801902c:	08019357 	.word	0x08019357
 8019030:	08019357 	.word	0x08019357
 8019034:	08019357 	.word	0x08019357
 8019038:	08019357 	.word	0x08019357
 801903c:	08019357 	.word	0x08019357
 8019040:	08019357 	.word	0x08019357
 8019044:	08019357 	.word	0x08019357
 8019048:	08019357 	.word	0x08019357
 801904c:	08019357 	.word	0x08019357
 8019050:	0801926d 	.word	0x0801926d
 8019054:	2ba0      	cmp	r3, #160	; 0xa0
 8019056:	f000 8159 	beq.w	801930c <set_axis_setting+0x37c>
 801905a:	e17c      	b.n	8019356 <set_axis_setting+0x3c6>

        case Setting_AxisStepsPerMM:
            if (hal.max_step_rate && value * settings.axis[idx].max_rate > (float)hal.max_step_rate * 60.0f)
 801905c:	4bc2      	ldr	r3, [pc, #776]	; (8019368 <set_axis_setting+0x3d8>)
 801905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019060:	2b00      	cmp	r3, #0
 8019062:	d01f      	beq.n	80190a4 <set_axis_setting+0x114>
 8019064:	68fa      	ldr	r2, [r7, #12]
 8019066:	49c1      	ldr	r1, [pc, #772]	; (801936c <set_axis_setting+0x3dc>)
 8019068:	4613      	mov	r3, r2
 801906a:	009b      	lsls	r3, r3, #2
 801906c:	4413      	add	r3, r2
 801906e:	009b      	lsls	r3, r3, #2
 8019070:	440b      	add	r3, r1
 8019072:	3334      	adds	r3, #52	; 0x34
 8019074:	ed93 7a00 	vldr	s14, [r3]
 8019078:	edd7 7a00 	vldr	s15, [r7]
 801907c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019080:	4bb9      	ldr	r3, [pc, #740]	; (8019368 <set_axis_setting+0x3d8>)
 8019082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019084:	ee07 3a90 	vmov	s15, r3
 8019088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801908c:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8019370 <set_axis_setting+0x3e0>
 8019090:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801909c:	dd02      	ble.n	80190a4 <set_axis_setting+0x114>
                status = Status_MaxStepRateExceeded;
 801909e:	230c      	movs	r3, #12
 80190a0:	75fb      	strb	r3, [r7, #23]
                    sys.tlo_reference[idx] *= comp;
                    sync_position();
                }
                settings.axis[idx].steps_per_mm = value;
            }
            break;
 80190a2:	e15b      	b.n	801935c <set_axis_setting+0x3cc>
                if(settings.axis[idx].steps_per_mm > 0.0f && settings.axis[idx].steps_per_mm != value) {
 80190a4:	68fa      	ldr	r2, [r7, #12]
 80190a6:	49b1      	ldr	r1, [pc, #708]	; (801936c <set_axis_setting+0x3dc>)
 80190a8:	4613      	mov	r3, r2
 80190aa:	009b      	lsls	r3, r3, #2
 80190ac:	4413      	add	r3, r2
 80190ae:	009b      	lsls	r3, r3, #2
 80190b0:	440b      	add	r3, r1
 80190b2:	3330      	adds	r3, #48	; 0x30
 80190b4:	edd3 7a00 	vldr	s15, [r3]
 80190b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80190bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190c0:	dd7a      	ble.n	80191b8 <set_axis_setting+0x228>
 80190c2:	68fa      	ldr	r2, [r7, #12]
 80190c4:	49a9      	ldr	r1, [pc, #676]	; (801936c <set_axis_setting+0x3dc>)
 80190c6:	4613      	mov	r3, r2
 80190c8:	009b      	lsls	r3, r3, #2
 80190ca:	4413      	add	r3, r2
 80190cc:	009b      	lsls	r3, r3, #2
 80190ce:	440b      	add	r3, r1
 80190d0:	3330      	adds	r3, #48	; 0x30
 80190d2:	edd3 7a00 	vldr	s15, [r3]
 80190d6:	ed97 7a00 	vldr	s14, [r7]
 80190da:	eeb4 7a67 	vcmp.f32	s14, s15
 80190de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190e2:	d069      	beq.n	80191b8 <set_axis_setting+0x228>
                    float comp = value / settings.axis[idx].steps_per_mm;
 80190e4:	68fa      	ldr	r2, [r7, #12]
 80190e6:	49a1      	ldr	r1, [pc, #644]	; (801936c <set_axis_setting+0x3dc>)
 80190e8:	4613      	mov	r3, r2
 80190ea:	009b      	lsls	r3, r3, #2
 80190ec:	4413      	add	r3, r2
 80190ee:	009b      	lsls	r3, r3, #2
 80190f0:	440b      	add	r3, r1
 80190f2:	3330      	adds	r3, #48	; 0x30
 80190f4:	ed93 7a00 	vldr	s14, [r3]
 80190f8:	edd7 6a00 	vldr	s13, [r7]
 80190fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019100:	edc7 7a04 	vstr	s15, [r7, #16]
                    sys.position[idx] *= comp;
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	4a9b      	ldr	r2, [pc, #620]	; (8019374 <set_axis_setting+0x3e4>)
 8019108:	3322      	adds	r3, #34	; 0x22
 801910a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801910e:	ee07 3a90 	vmov	s15, r3
 8019112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019116:	edd7 7a04 	vldr	s15, [r7, #16]
 801911a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019124:	ee17 1a90 	vmov	r1, s15
 8019128:	4a92      	ldr	r2, [pc, #584]	; (8019374 <set_axis_setting+0x3e4>)
 801912a:	3322      	adds	r3, #34	; 0x22
 801912c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    sys.home_position[idx] *= comp;
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	4a90      	ldr	r2, [pc, #576]	; (8019374 <set_axis_setting+0x3e4>)
 8019134:	3316      	adds	r3, #22
 8019136:	009b      	lsls	r3, r3, #2
 8019138:	4413      	add	r3, r2
 801913a:	ed93 7a00 	vldr	s14, [r3]
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	edd7 7a04 	vldr	s15, [r7, #16]
 8019144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019148:	4a8a      	ldr	r2, [pc, #552]	; (8019374 <set_axis_setting+0x3e4>)
 801914a:	3316      	adds	r3, #22
 801914c:	009b      	lsls	r3, r3, #2
 801914e:	4413      	add	r3, r2
 8019150:	edc3 7a00 	vstr	s15, [r3]
                    sys.probe_position[idx] *= comp;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	4a87      	ldr	r2, [pc, #540]	; (8019374 <set_axis_setting+0x3e4>)
 8019158:	330e      	adds	r3, #14
 801915a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801915e:	ee07 3a90 	vmov	s15, r3
 8019162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019166:	edd7 7a04 	vldr	s15, [r7, #16]
 801916a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019174:	ee17 1a90 	vmov	r1, s15
 8019178:	4a7e      	ldr	r2, [pc, #504]	; (8019374 <set_axis_setting+0x3e4>)
 801917a:	330e      	adds	r3, #14
 801917c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    sys.tlo_reference[idx] *= comp;
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	4a7c      	ldr	r2, [pc, #496]	; (8019374 <set_axis_setting+0x3e4>)
 8019184:	3302      	adds	r3, #2
 8019186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801918a:	ee07 3a90 	vmov	s15, r3
 801918e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019192:	edd7 7a04 	vldr	s15, [r7, #16]
 8019196:	ee67 7a27 	vmul.f32	s15, s14, s15
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80191a0:	ee17 1a90 	vmov	r1, s15
 80191a4:	4a73      	ldr	r2, [pc, #460]	; (8019374 <set_axis_setting+0x3e4>)
 80191a6:	3302      	adds	r3, #2
 80191a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    sync_position();
 80191ac:	f7f8 fd5e 	bl	8011c6c <plan_sync_position>
 80191b0:	4971      	ldr	r1, [pc, #452]	; (8019378 <set_axis_setting+0x3e8>)
 80191b2:	4872      	ldr	r0, [pc, #456]	; (801937c <set_axis_setting+0x3ec>)
 80191b4:	f008 f920 	bl	80213f8 <system_convert_array_steps_to_mpos>
                settings.axis[idx].steps_per_mm = value;
 80191b8:	68fa      	ldr	r2, [r7, #12]
 80191ba:	496c      	ldr	r1, [pc, #432]	; (801936c <set_axis_setting+0x3dc>)
 80191bc:	4613      	mov	r3, r2
 80191be:	009b      	lsls	r3, r3, #2
 80191c0:	4413      	add	r3, r2
 80191c2:	009b      	lsls	r3, r3, #2
 80191c4:	440b      	add	r3, r1
 80191c6:	3330      	adds	r3, #48	; 0x30
 80191c8:	683a      	ldr	r2, [r7, #0]
 80191ca:	601a      	str	r2, [r3, #0]
            break;
 80191cc:	e0c6      	b.n	801935c <set_axis_setting+0x3cc>

        case Setting_AxisMaxRate:
            if (hal.max_step_rate && value * settings.axis[idx].steps_per_mm > (float)hal.max_step_rate * 60.0f)
 80191ce:	4b66      	ldr	r3, [pc, #408]	; (8019368 <set_axis_setting+0x3d8>)
 80191d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d01f      	beq.n	8019216 <set_axis_setting+0x286>
 80191d6:	68fa      	ldr	r2, [r7, #12]
 80191d8:	4964      	ldr	r1, [pc, #400]	; (801936c <set_axis_setting+0x3dc>)
 80191da:	4613      	mov	r3, r2
 80191dc:	009b      	lsls	r3, r3, #2
 80191de:	4413      	add	r3, r2
 80191e0:	009b      	lsls	r3, r3, #2
 80191e2:	440b      	add	r3, r1
 80191e4:	3330      	adds	r3, #48	; 0x30
 80191e6:	ed93 7a00 	vldr	s14, [r3]
 80191ea:	edd7 7a00 	vldr	s15, [r7]
 80191ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80191f2:	4b5d      	ldr	r3, [pc, #372]	; (8019368 <set_axis_setting+0x3d8>)
 80191f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191f6:	ee07 3a90 	vmov	s15, r3
 80191fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80191fe:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8019370 <set_axis_setting+0x3e0>
 8019202:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801920e:	dd02      	ble.n	8019216 <set_axis_setting+0x286>
                status = Status_MaxStepRateExceeded;
 8019210:	230c      	movs	r3, #12
 8019212:	75fb      	strb	r3, [r7, #23]
            else
                settings.axis[idx].max_rate = value;
            break;
 8019214:	e0a2      	b.n	801935c <set_axis_setting+0x3cc>
                settings.axis[idx].max_rate = value;
 8019216:	68fa      	ldr	r2, [r7, #12]
 8019218:	4954      	ldr	r1, [pc, #336]	; (801936c <set_axis_setting+0x3dc>)
 801921a:	4613      	mov	r3, r2
 801921c:	009b      	lsls	r3, r3, #2
 801921e:	4413      	add	r3, r2
 8019220:	009b      	lsls	r3, r3, #2
 8019222:	440b      	add	r3, r1
 8019224:	3334      	adds	r3, #52	; 0x34
 8019226:	683a      	ldr	r2, [r7, #0]
 8019228:	601a      	str	r2, [r3, #0]
            break;
 801922a:	e097      	b.n	801935c <set_axis_setting+0x3cc>

        case Setting_AxisAcceleration:
            settings.axis[idx].acceleration = override_backup.acceleration[idx] = value * 60.0f * 60.0f; // Convert to mm/min^2 for grbl internal use.
 801922c:	edd7 7a00 	vldr	s15, [r7]
 8019230:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8019370 <set_axis_setting+0x3e0>
 8019234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8019370 <set_axis_setting+0x3e0>
 801923e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019242:	494f      	ldr	r1, [pc, #316]	; (8019380 <set_axis_setting+0x3f0>)
 8019244:	009a      	lsls	r2, r3, #2
 8019246:	440a      	add	r2, r1
 8019248:	3204      	adds	r2, #4
 801924a:	edc2 7a00 	vstr	s15, [r2]
 801924e:	68fa      	ldr	r2, [r7, #12]
 8019250:	494b      	ldr	r1, [pc, #300]	; (8019380 <set_axis_setting+0x3f0>)
 8019252:	009b      	lsls	r3, r3, #2
 8019254:	440b      	add	r3, r1
 8019256:	3304      	adds	r3, #4
 8019258:	6819      	ldr	r1, [r3, #0]
 801925a:	4844      	ldr	r0, [pc, #272]	; (801936c <set_axis_setting+0x3dc>)
 801925c:	4613      	mov	r3, r2
 801925e:	009b      	lsls	r3, r3, #2
 8019260:	4413      	add	r3, r2
 8019262:	009b      	lsls	r3, r3, #2
 8019264:	4403      	add	r3, r0
 8019266:	3338      	adds	r3, #56	; 0x38
 8019268:	6019      	str	r1, [r3, #0]
            break;
 801926a:	e077      	b.n	801935c <set_axis_setting+0x3cc>

        case Setting_AxisMaxTravel:
            if(settings.axis[idx].max_travel != -value) {
 801926c:	68fa      	ldr	r2, [r7, #12]
 801926e:	493f      	ldr	r1, [pc, #252]	; (801936c <set_axis_setting+0x3dc>)
 8019270:	4613      	mov	r3, r2
 8019272:	009b      	lsls	r3, r3, #2
 8019274:	4413      	add	r3, r2
 8019276:	009b      	lsls	r3, r3, #2
 8019278:	440b      	add	r3, r1
 801927a:	333c      	adds	r3, #60	; 0x3c
 801927c:	ed93 7a00 	vldr	s14, [r3]
 8019280:	edd7 7a00 	vldr	s15, [r7]
 8019284:	eef1 7a67 	vneg.f32	s15, s15
 8019288:	eeb4 7a67 	vcmp.f32	s14, s15
 801928c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019290:	d011      	beq.n	80192b6 <set_axis_setting+0x326>
                bit_false(sys.homed.mask, bit(idx));
 8019292:	4b38      	ldr	r3, [pc, #224]	; (8019374 <set_axis_setting+0x3e4>)
 8019294:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	2101      	movs	r1, #1
 801929c:	fa01 f303 	lsl.w	r3, r1, r3
 80192a0:	b2db      	uxtb	r3, r3
 80192a2:	43db      	mvns	r3, r3
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	4013      	ands	r3, r2
 80192a8:	b2da      	uxtb	r2, r3
 80192aa:	4b32      	ldr	r3, [pc, #200]	; (8019374 <set_axis_setting+0x3e4>)
 80192ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
                system_add_rt_report(Report_Homed);
 80192b0:	2004      	movs	r0, #4
 80192b2:	f008 f989 	bl	80215c8 <system_add_rt_report>
            }
            settings.axis[idx].max_travel = -value; // Store as negative for grbl internal use.
 80192b6:	68fa      	ldr	r2, [r7, #12]
 80192b8:	edd7 7a00 	vldr	s15, [r7]
 80192bc:	eef1 7a67 	vneg.f32	s15, s15
 80192c0:	492a      	ldr	r1, [pc, #168]	; (801936c <set_axis_setting+0x3dc>)
 80192c2:	4613      	mov	r3, r2
 80192c4:	009b      	lsls	r3, r3, #2
 80192c6:	4413      	add	r3, r2
 80192c8:	009b      	lsls	r3, r3, #2
 80192ca:	440b      	add	r3, r1
 80192cc:	333c      	adds	r3, #60	; 0x3c
 80192ce:	edc3 7a00 	vstr	s15, [r3]
            if(settings.homing.flags.init_lock && (sys.homing.mask & sys.homed.mask) != sys.homing.mask) {
 80192d2:	4b26      	ldr	r3, [pc, #152]	; (801936c <set_axis_setting+0x3dc>)
 80192d4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80192d8:	f003 0304 	and.w	r3, r3, #4
 80192dc:	b2db      	uxtb	r3, r3
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d011      	beq.n	8019306 <set_axis_setting+0x376>
 80192e2:	4b24      	ldr	r3, [pc, #144]	; (8019374 <set_axis_setting+0x3e4>)
 80192e4:	7e9a      	ldrb	r2, [r3, #26]
 80192e6:	4b23      	ldr	r3, [pc, #140]	; (8019374 <set_axis_setting+0x3e4>)
 80192e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80192ec:	4013      	ands	r3, r2
 80192ee:	b2da      	uxtb	r2, r3
 80192f0:	4b20      	ldr	r3, [pc, #128]	; (8019374 <set_axis_setting+0x3e4>)
 80192f2:	7e9b      	ldrb	r3, [r3, #26]
 80192f4:	429a      	cmp	r2, r3
 80192f6:	d006      	beq.n	8019306 <set_axis_setting+0x376>
                system_raise_alarm(Alarm_HomingRequired);
 80192f8:	200b      	movs	r0, #11
 80192fa:	f008 f8f7 	bl	80214ec <system_raise_alarm>
                grbl.report.feedback_message(Message_HomingCycleRequired);
 80192fe:	4b21      	ldr	r3, [pc, #132]	; (8019384 <set_axis_setting+0x3f4>)
 8019300:	68db      	ldr	r3, [r3, #12]
 8019302:	200d      	movs	r0, #13
 8019304:	4798      	blx	r3
            }
            tmp_set_soft_limits();
 8019306:	f7ff fa51 	bl	80187ac <tmp_set_soft_limits>
            break;
 801930a:	e027      	b.n	801935c <set_axis_setting+0x3cc>
                axes.mask = bit(idx);
                settings.axis[idx].backlash = value;
                mc_backlash_init(axes);
            }
#else
            status = Status_SettingDisabled;
 801930c:	2335      	movs	r3, #53	; 0x35
 801930e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8019310:	e024      	b.n	801935c <set_axis_setting+0x3cc>

        case Setting_AxisAutoSquareOffset:
            if(hal.stepper.get_ganged && bit_istrue(hal.stepper.get_ganged(true).mask, bit(idx)))
 8019312:	4b15      	ldr	r3, [pc, #84]	; (8019368 <set_axis_setting+0x3d8>)
 8019314:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019318:	2b00      	cmp	r3, #0
 801931a:	d019      	beq.n	8019350 <set_axis_setting+0x3c0>
 801931c:	4b12      	ldr	r3, [pc, #72]	; (8019368 <set_axis_setting+0x3d8>)
 801931e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019322:	2001      	movs	r0, #1
 8019324:	4798      	blx	r3
 8019326:	4603      	mov	r3, r0
 8019328:	b2db      	uxtb	r3, r3
 801932a:	461a      	mov	r2, r3
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	fa22 f303 	lsr.w	r3, r2, r3
 8019332:	f003 0301 	and.w	r3, r3, #1
 8019336:	2b00      	cmp	r3, #0
 8019338:	d00a      	beq.n	8019350 <set_axis_setting+0x3c0>
                settings.axis[idx].dual_axis_offset = value;
 801933a:	68fa      	ldr	r2, [r7, #12]
 801933c:	490b      	ldr	r1, [pc, #44]	; (801936c <set_axis_setting+0x3dc>)
 801933e:	4613      	mov	r3, r2
 8019340:	009b      	lsls	r3, r3, #2
 8019342:	4413      	add	r3, r2
 8019344:	009b      	lsls	r3, r3, #2
 8019346:	440b      	add	r3, r1
 8019348:	3340      	adds	r3, #64	; 0x40
 801934a:	683a      	ldr	r2, [r7, #0]
 801934c:	601a      	str	r2, [r3, #0]
            else
                status = Status_SettingDisabled;
            break;
 801934e:	e005      	b.n	801935c <set_axis_setting+0x3cc>
                status = Status_SettingDisabled;
 8019350:	2335      	movs	r3, #53	; 0x35
 8019352:	75fb      	strb	r3, [r7, #23]
            break;
 8019354:	e002      	b.n	801935c <set_axis_setting+0x3cc>

        default:
            status = Status_SettingDisabled;
 8019356:	2335      	movs	r3, #53	; 0x35
 8019358:	75fb      	strb	r3, [r7, #23]
            break;
 801935a:	bf00      	nop
    }

    return status;
 801935c:	7dfb      	ldrb	r3, [r7, #23]
}
 801935e:	4618      	mov	r0, r3
 8019360:	3718      	adds	r7, #24
 8019362:	46bd      	mov	sp, r7
 8019364:	bd80      	pop	{r7, pc}
 8019366:	bf00      	nop
 8019368:	200016a0 	.word	0x200016a0
 801936c:	20001cf0 	.word	0x20001cf0
 8019370:	42700000 	.word	0x42700000
 8019374:	20001520 	.word	0x20001520
 8019378:	200015a8 	.word	0x200015a8
 801937c:	200013dc 	.word	0x200013dc
 8019380:	20001ec4 	.word	0x20001ec4
 8019384:	200015b8 	.word	0x200015b8

08019388 <get_float>:

static float get_float (setting_id_t setting)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b084      	sub	sp, #16
 801938c:	af00      	add	r7, sp, #0
 801938e:	4603      	mov	r3, r0
 8019390:	80fb      	strh	r3, [r7, #6]
    float value = 0.0f;
 8019392:	f04f 0300 	mov.w	r3, #0
 8019396:	60fb      	str	r3, [r7, #12]

    if (setting >= Setting_AxisSettingsBase && setting <= Setting_AxisSettingsMax) {
 8019398:	88fb      	ldrh	r3, [r7, #6]
 801939a:	2b63      	cmp	r3, #99	; 0x63
 801939c:	f240 809c 	bls.w	80194d8 <get_float+0x150>
 80193a0:	88fb      	ldrh	r3, [r7, #6]
 80193a2:	2bc1      	cmp	r3, #193	; 0xc1
 80193a4:	f200 8098 	bhi.w	80194d8 <get_float+0x150>

        uint_fast8_t idx;

        switch(settings_get_axis_base(setting, &idx)) {
 80193a8:	f107 0208 	add.w	r2, r7, #8
 80193ac:	88fb      	ldrh	r3, [r7, #6]
 80193ae:	4611      	mov	r1, r2
 80193b0:	4618      	mov	r0, r3
 80193b2:	f7ff fdcf 	bl	8018f54 <settings_get_axis_base>
 80193b6:	4603      	mov	r3, r0
 80193b8:	2b82      	cmp	r3, #130	; 0x82
 80193ba:	dc47      	bgt.n	801944c <get_float+0xc4>
 80193bc:	2b64      	cmp	r3, #100	; 0x64
 80193be:	f2c0 8089 	blt.w	80194d4 <get_float+0x14c>
 80193c2:	3b64      	subs	r3, #100	; 0x64
 80193c4:	2b1e      	cmp	r3, #30
 80193c6:	f200 8085 	bhi.w	80194d4 <get_float+0x14c>
 80193ca:	a201      	add	r2, pc, #4	; (adr r2, 80193d0 <get_float+0x48>)
 80193cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193d0:	08019453 	.word	0x08019453
 80193d4:	080194d5 	.word	0x080194d5
 80193d8:	080194d5 	.word	0x080194d5
 80193dc:	080194d5 	.word	0x080194d5
 80193e0:	080194d5 	.word	0x080194d5
 80193e4:	080194d5 	.word	0x080194d5
 80193e8:	080194d5 	.word	0x080194d5
 80193ec:	080194d5 	.word	0x080194d5
 80193f0:	080194d5 	.word	0x080194d5
 80193f4:	080194d5 	.word	0x080194d5
 80193f8:	08019469 	.word	0x08019469
 80193fc:	080194d5 	.word	0x080194d5
 8019400:	080194d5 	.word	0x080194d5
 8019404:	080194d5 	.word	0x080194d5
 8019408:	080194d5 	.word	0x080194d5
 801940c:	080194d5 	.word	0x080194d5
 8019410:	080194d5 	.word	0x080194d5
 8019414:	080194d5 	.word	0x080194d5
 8019418:	080194d5 	.word	0x080194d5
 801941c:	080194d5 	.word	0x080194d5
 8019420:	0801947f 	.word	0x0801947f
 8019424:	080194d5 	.word	0x080194d5
 8019428:	080194d5 	.word	0x080194d5
 801942c:	080194d5 	.word	0x080194d5
 8019430:	080194d5 	.word	0x080194d5
 8019434:	080194d5 	.word	0x080194d5
 8019438:	080194d5 	.word	0x080194d5
 801943c:	080194d5 	.word	0x080194d5
 8019440:	080194d5 	.word	0x080194d5
 8019444:	080194d5 	.word	0x080194d5
 8019448:	080194a1 	.word	0x080194a1
 801944c:	2baa      	cmp	r3, #170	; 0xaa
 801944e:	d036      	beq.n	80194be <get_float+0x136>
            case Setting_AxisAutoSquareOffset:
                value = settings.axis[idx].dual_axis_offset;
                break;

            default: // for stopping compiler warning
                break;
 8019450:	e040      	b.n	80194d4 <get_float+0x14c>
                value = settings.axis[idx].steps_per_mm;
 8019452:	68ba      	ldr	r2, [r7, #8]
 8019454:	4929      	ldr	r1, [pc, #164]	; (80194fc <get_float+0x174>)
 8019456:	4613      	mov	r3, r2
 8019458:	009b      	lsls	r3, r3, #2
 801945a:	4413      	add	r3, r2
 801945c:	009b      	lsls	r3, r3, #2
 801945e:	440b      	add	r3, r1
 8019460:	3330      	adds	r3, #48	; 0x30
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	60fb      	str	r3, [r7, #12]
                break;
 8019466:	e036      	b.n	80194d6 <get_float+0x14e>
                value = settings.axis[idx].max_rate;
 8019468:	68ba      	ldr	r2, [r7, #8]
 801946a:	4924      	ldr	r1, [pc, #144]	; (80194fc <get_float+0x174>)
 801946c:	4613      	mov	r3, r2
 801946e:	009b      	lsls	r3, r3, #2
 8019470:	4413      	add	r3, r2
 8019472:	009b      	lsls	r3, r3, #2
 8019474:	440b      	add	r3, r1
 8019476:	3334      	adds	r3, #52	; 0x34
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	60fb      	str	r3, [r7, #12]
                break;
 801947c:	e02b      	b.n	80194d6 <get_float+0x14e>
                value = settings.axis[idx].acceleration / (60.0f * 60.0f); // Convert from mm/min^2 to mm/sec^2.
 801947e:	68ba      	ldr	r2, [r7, #8]
 8019480:	491e      	ldr	r1, [pc, #120]	; (80194fc <get_float+0x174>)
 8019482:	4613      	mov	r3, r2
 8019484:	009b      	lsls	r3, r3, #2
 8019486:	4413      	add	r3, r2
 8019488:	009b      	lsls	r3, r3, #2
 801948a:	440b      	add	r3, r1
 801948c:	3338      	adds	r3, #56	; 0x38
 801948e:	ed93 7a00 	vldr	s14, [r3]
 8019492:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8019500 <get_float+0x178>
 8019496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801949a:	edc7 7a03 	vstr	s15, [r7, #12]
                break;
 801949e:	e01a      	b.n	80194d6 <get_float+0x14e>
                value = -settings.axis[idx].max_travel; // Store as negative for grbl internal use.
 80194a0:	68ba      	ldr	r2, [r7, #8]
 80194a2:	4916      	ldr	r1, [pc, #88]	; (80194fc <get_float+0x174>)
 80194a4:	4613      	mov	r3, r2
 80194a6:	009b      	lsls	r3, r3, #2
 80194a8:	4413      	add	r3, r2
 80194aa:	009b      	lsls	r3, r3, #2
 80194ac:	440b      	add	r3, r1
 80194ae:	333c      	adds	r3, #60	; 0x3c
 80194b0:	edd3 7a00 	vldr	s15, [r3]
 80194b4:	eef1 7a67 	vneg.f32	s15, s15
 80194b8:	edc7 7a03 	vstr	s15, [r7, #12]
                break;
 80194bc:	e00b      	b.n	80194d6 <get_float+0x14e>
                value = settings.axis[idx].dual_axis_offset;
 80194be:	68ba      	ldr	r2, [r7, #8]
 80194c0:	490e      	ldr	r1, [pc, #56]	; (80194fc <get_float+0x174>)
 80194c2:	4613      	mov	r3, r2
 80194c4:	009b      	lsls	r3, r3, #2
 80194c6:	4413      	add	r3, r2
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	440b      	add	r3, r1
 80194cc:	3340      	adds	r3, #64	; 0x40
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	60fb      	str	r3, [r7, #12]
                break;
 80194d2:	e000      	b.n	80194d6 <get_float+0x14e>
                break;
 80194d4:	bf00      	nop
    if (setting >= Setting_AxisSettingsBase && setting <= Setting_AxisSettingsMax) {
 80194d6:	e008      	b.n	80194ea <get_float+0x162>
        }
    } else switch(setting) {
 80194d8:	88fb      	ldrh	r3, [r7, #6]
 80194da:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80194de:	d103      	bne.n	80194e8 <get_float+0x160>

        case Setting_ToolChangeProbingDistance:
            value = settings.tool_change.probing_distance;
 80194e0:	4b06      	ldr	r3, [pc, #24]	; (80194fc <get_float+0x174>)
 80194e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194e4:	60fb      	str	r3, [r7, #12]
            break;
 80194e6:	e000      	b.n	80194ea <get_float+0x162>

        default:
            break;
 80194e8:	bf00      	nop
    }

    return value;
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	ee07 3a90 	vmov	s15, r3
}
 80194f0:	eeb0 0a67 	vmov.f32	s0, s15
 80194f4:	3710      	adds	r7, #16
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
 80194fa:	bf00      	nop
 80194fc:	20001cf0 	.word	0x20001cf0
 8019500:	45610000 	.word	0x45610000

08019504 <get_int>:

static uint32_t get_int (setting_id_t id)
{
 8019504:	b480      	push	{r7}
 8019506:	b085      	sub	sp, #20
 8019508:	af00      	add	r7, sp, #0
 801950a:	4603      	mov	r3, r0
 801950c:	80fb      	strh	r3, [r7, #6]
    uint32_t value = 0;
 801950e:	2300      	movs	r3, #0
 8019510:	60fb      	str	r3, [r7, #12]

    switch(id) {
 8019512:	88fb      	ldrh	r3, [r7, #6]
 8019514:	f5b3 7ff3 	cmp.w	r3, #486	; 0x1e6
 8019518:	f000 81da 	beq.w	80198d0 <get_int+0x3cc>
 801951c:	f5b3 7ff3 	cmp.w	r3, #486	; 0x1e6
 8019520:	f300 81de 	bgt.w	80198e0 <get_int+0x3dc>
 8019524:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8019528:	f000 81c8 	beq.w	80198bc <get_int+0x3b8>
 801952c:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8019530:	f300 81d6 	bgt.w	80198e0 <get_int+0x3dc>
 8019534:	f240 12e1 	movw	r2, #481	; 0x1e1
 8019538:	4293      	cmp	r3, r2
 801953a:	f000 81bb 	beq.w	80198b4 <get_int+0x3b0>
 801953e:	f5b3 7ff1 	cmp.w	r3, #482	; 0x1e2
 8019542:	f280 81cd 	bge.w	80198e0 <get_int+0x3dc>
 8019546:	f240 128b 	movw	r2, #395	; 0x18b
 801954a:	4293      	cmp	r3, r2
 801954c:	f000 81aa 	beq.w	80198a4 <get_int+0x3a0>
 8019550:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8019554:	f280 81c4 	bge.w	80198e0 <get_int+0x3dc>
 8019558:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 801955c:	f000 819a 	beq.w	8019894 <get_int+0x390>
 8019560:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8019564:	f300 81bc 	bgt.w	80198e0 <get_int+0x3dc>
 8019568:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 801956c:	f000 8185 	beq.w	801987a <get_int+0x376>
 8019570:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8019574:	f300 81b4 	bgt.w	80198e0 <get_int+0x3dc>
 8019578:	2b41      	cmp	r3, #65	; 0x41
 801957a:	f300 8083 	bgt.w	8019684 <get_int+0x180>
 801957e:	2b06      	cmp	r3, #6
 8019580:	f2c0 81ae 	blt.w	80198e0 <get_int+0x3dc>
 8019584:	3b06      	subs	r3, #6
 8019586:	2b3b      	cmp	r3, #59	; 0x3b
 8019588:	f200 81aa 	bhi.w	80198e0 <get_int+0x3dc>
 801958c:	a201      	add	r2, pc, #4	; (adr r2, 8019594 <get_int+0x90>)
 801958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019592:	bf00      	nop
 8019594:	080196c7 	.word	0x080196c7
 8019598:	080198e1 	.word	0x080198e1
 801959c:	080196d7 	.word	0x080196d7
 80195a0:	08019691 	.word	0x08019691
 80195a4:	080196e1 	.word	0x080196e1
 80195a8:	080198e1 	.word	0x080198e1
 80195ac:	080198e1 	.word	0x080198e1
 80195b0:	080196eb 	.word	0x080196eb
 80195b4:	080196fb 	.word	0x080196fb
 80195b8:	080198e1 	.word	0x080198e1
 80195bc:	0801970f 	.word	0x0801970f
 80195c0:	08019719 	.word	0x08019719
 80195c4:	080198e1 	.word	0x080198e1
 80195c8:	0801972d 	.word	0x0801972d
 80195cc:	0801973d 	.word	0x0801973d
 80195d0:	0801974d 	.word	0x0801974d
 80195d4:	08019797 	.word	0x08019797
 80195d8:	080198e1 	.word	0x080198e1
 80195dc:	080198e1 	.word	0x080198e1
 80195e0:	080198e1 	.word	0x080198e1
 80195e4:	080198e1 	.word	0x080198e1
 80195e8:	080198e1 	.word	0x080198e1
 80195ec:	080198e1 	.word	0x080198e1
 80195f0:	080198e1 	.word	0x080198e1
 80195f4:	080198e1 	.word	0x080198e1
 80195f8:	080198e1 	.word	0x080198e1
 80195fc:	080196bf 	.word	0x080196bf
 8019600:	080198e1 	.word	0x080198e1
 8019604:	080198e1 	.word	0x080198e1
 8019608:	080198e1 	.word	0x080198e1
 801960c:	080198e1 	.word	0x080198e1
 8019610:	080197db 	.word	0x080197db
 8019614:	080198e1 	.word	0x080198e1
 8019618:	080197e5 	.word	0x080197e5
 801961c:	08019787 	.word	0x08019787
 8019620:	080197f5 	.word	0x080197f5
 8019624:	080198e1 	.word	0x080198e1
 8019628:	080198e1 	.word	0x080198e1
 801962c:	080197ff 	.word	0x080197ff
 8019630:	080197ff 	.word	0x080197ff
 8019634:	080197ff 	.word	0x080197ff
 8019638:	080197ff 	.word	0x080197ff
 801963c:	080197ff 	.word	0x080197ff
 8019640:	080197ff 	.word	0x080197ff
 8019644:	080198e1 	.word	0x080198e1
 8019648:	080198e1 	.word	0x080198e1
 801964c:	080198e1 	.word	0x080198e1
 8019650:	080198e1 	.word	0x080198e1
 8019654:	080198e1 	.word	0x080198e1
 8019658:	080198e1 	.word	0x080198e1
 801965c:	080198e1 	.word	0x080198e1
 8019660:	080198e1 	.word	0x080198e1
 8019664:	080198e1 	.word	0x080198e1
 8019668:	080198e1 	.word	0x080198e1
 801966c:	0801980f 	.word	0x0801980f
 8019670:	080198e1 	.word	0x080198e1
 8019674:	0801981f 	.word	0x0801981f
 8019678:	0801982f 	.word	0x0801982f
 801967c:	08019851 	.word	0x08019851
 8019680:	08019861 	.word	0x08019861
 8019684:	f240 1255 	movw	r2, #341	; 0x155
 8019688:	4293      	cmp	r3, r2
 801968a:	f000 80f1 	beq.w	8019870 <get_int+0x36c>
            value = settings.flags.ngc_debug_out;
            break;
#endif

        default:
            break;
 801968e:	e127      	b.n	80198e0 <get_int+0x3dc>
            value = settings.spindle.flags.pwm_disable ? 0 : (settings.spindle.flags.enable_rpm_controlled ? 0b11 : 0b01);
 8019690:	4b97      	ldr	r3, [pc, #604]	; (80198f0 <get_int+0x3ec>)
 8019692:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 8019696:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801969a:	b2db      	uxtb	r3, r3
 801969c:	2b00      	cmp	r3, #0
 801969e:	d10b      	bne.n	80196b8 <get_int+0x1b4>
 80196a0:	4b93      	ldr	r3, [pc, #588]	; (80198f0 <get_int+0x3ec>)
 80196a2:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 80196a6:	f003 0301 	and.w	r3, r3, #1
 80196aa:	b2db      	uxtb	r3, r3
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d001      	beq.n	80196b4 <get_int+0x1b0>
 80196b0:	2303      	movs	r3, #3
 80196b2:	e002      	b.n	80196ba <get_int+0x1b6>
 80196b4:	2301      	movs	r3, #1
 80196b6:	e000      	b.n	80196ba <get_int+0x1b6>
 80196b8:	2300      	movs	r3, #0
 80196ba:	60fb      	str	r3, [r7, #12]
            break;
 80196bc:	e111      	b.n	80198e2 <get_int+0x3de>
            value = settings.mode;
 80196be:	4b8c      	ldr	r3, [pc, #560]	; (80198f0 <get_int+0x3ec>)
 80196c0:	7e1b      	ldrb	r3, [r3, #24]
 80196c2:	60fb      	str	r3, [r7, #12]
            break;
 80196c4:	e10d      	b.n	80198e2 <get_int+0x3de>
            value = settings.probe.invert_probe_pin;
 80196c6:	4b8a      	ldr	r3, [pc, #552]	; (80198f0 <get_int+0x3ec>)
 80196c8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80196cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80196d0:	b2db      	uxtb	r3, r3
 80196d2:	60fb      	str	r3, [r7, #12]
            break;
 80196d4:	e105      	b.n	80198e2 <get_int+0x3de>
            value = settings.steppers.ganged_dir_invert.mask;
 80196d6:	4b86      	ldr	r3, [pc, #536]	; (80198f0 <get_int+0x3ec>)
 80196d8:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80196dc:	60fb      	str	r3, [r7, #12]
            break;
 80196de:	e100      	b.n	80198e2 <get_int+0x3de>
            value = settings.status_report.mask;
 80196e0:	4b83      	ldr	r3, [pc, #524]	; (80198f0 <get_int+0x3ec>)
 80196e2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80196e6:	60fb      	str	r3, [r7, #12]
            break;
 80196e8:	e0fb      	b.n	80198e2 <get_int+0x3de>
            value = settings.flags.report_inches;
 80196ea:	4b81      	ldr	r3, [pc, #516]	; (80198f0 <get_int+0x3ec>)
 80196ec:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80196f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80196f4:	b2db      	uxtb	r3, r3
 80196f6:	60fb      	str	r3, [r7, #12]
            break;
 80196f8:	e0f3      	b.n	80198e2 <get_int+0x3de>
            value = settings.control_invert.mask & hal.signals_cap.mask;
 80196fa:	4b7d      	ldr	r3, [pc, #500]	; (80198f0 <get_int+0x3ec>)
 80196fc:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 8019700:	4b7c      	ldr	r3, [pc, #496]	; (80198f4 <get_int+0x3f0>)
 8019702:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8019706:	4013      	ands	r3, r2
 8019708:	b29b      	uxth	r3, r3
 801970a:	60fb      	str	r3, [r7, #12]
            break;
 801970c:	e0e9      	b.n	80198e2 <get_int+0x3de>
            value = settings.spindle.invert.mask;
 801970e:	4b78      	ldr	r3, [pc, #480]	; (80198f0 <get_int+0x3ec>)
 8019710:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8019714:	60fb      	str	r3, [r7, #12]
            break;
 8019716:	e0e4      	b.n	80198e2 <get_int+0x3de>
            value = settings.control_disable_pullup.mask & hal.signals_cap.mask;
 8019718:	4b75      	ldr	r3, [pc, #468]	; (80198f0 <get_int+0x3ec>)
 801971a:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 801971e:	4b75      	ldr	r3, [pc, #468]	; (80198f4 <get_int+0x3f0>)
 8019720:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8019724:	4013      	ands	r3, r2
 8019726:	b29b      	uxth	r3, r3
 8019728:	60fb      	str	r3, [r7, #12]
            break;
 801972a:	e0da      	b.n	80198e2 <get_int+0x3de>
            value = settings.probe.disable_probe_pullup;
 801972c:	4b70      	ldr	r3, [pc, #448]	; (80198f0 <get_int+0x3ec>)
 801972e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8019732:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019736:	b2db      	uxtb	r3, r3
 8019738:	60fb      	str	r3, [r7, #12]
            break;
 801973a:	e0d2      	b.n	80198e2 <get_int+0x3de>
            value = settings.limits.flags.soft_enabled;
 801973c:	4b6c      	ldr	r3, [pc, #432]	; (80198f0 <get_int+0x3ec>)
 801973e:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8019742:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019746:	b2db      	uxtb	r3, r3
 8019748:	60fb      	str	r3, [r7, #12]
            break;
 801974a:	e0ca      	b.n	80198e2 <get_int+0x3de>
            value = ((settings.limits.flags.hard_enabled & bit(0)) ? bit(0) |
 801974c:	4b68      	ldr	r3, [pc, #416]	; (80198f0 <get_int+0x3ec>)
 801974e:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8019752:	f003 0301 	and.w	r3, r3, #1
 8019756:	b2db      	uxtb	r3, r3
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 8019758:	2b00      	cmp	r3, #0
 801975a:	d011      	beq.n	8019780 <get_int+0x27c>
                     (settings.limits.flags.check_at_init ? bit(1) : 0) |
 801975c:	4b64      	ldr	r3, [pc, #400]	; (80198f0 <get_int+0x3ec>)
 801975e:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8019762:	085b      	lsrs	r3, r3, #1
 8019764:	b2db      	uxtb	r3, r3
 8019766:	f003 0202 	and.w	r2, r3, #2
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801976a:	4b61      	ldr	r3, [pc, #388]	; (80198f0 <get_int+0x3ec>)
 801976c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8019770:	08db      	lsrs	r3, r3, #3
 8019772:	b2db      	uxtb	r3, r3
 8019774:	f003 0304 	and.w	r3, r3, #4
                     (settings.limits.flags.check_at_init ? bit(1) : 0) |
 8019778:	4313      	orrs	r3, r2
                      (settings.limits.flags.hard_disabled_rotary ? bit(2) : 0) : 0);
 801977a:	f043 0301 	orr.w	r3, r3, #1
 801977e:	e000      	b.n	8019782 <get_int+0x27e>
 8019780:	2300      	movs	r3, #0
            value = ((settings.limits.flags.hard_enabled & bit(0)) ? bit(0) |
 8019782:	60fb      	str	r3, [r7, #12]
            break;
 8019784:	e0ad      	b.n	80198e2 <get_int+0x3de>
            value = settings.limits.flags.jog_soft_limited;
 8019786:	4b5a      	ldr	r3, [pc, #360]	; (80198f0 <get_int+0x3ec>)
 8019788:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 801978c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019790:	b2db      	uxtb	r3, r3
 8019792:	60fb      	str	r3, [r7, #12]
            break;
 8019794:	e0a5      	b.n	80198e2 <get_int+0x3de>
            value = (settings.homing.flags.value & 0x0F) |
 8019796:	4b56      	ldr	r3, [pc, #344]	; (80198f0 <get_int+0x3ec>)
 8019798:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 801979c:	f003 020f 	and.w	r2, r3, #15
                     (settings.limits.flags.two_switches ? bit(4) : 0) |
 80197a0:	4b53      	ldr	r3, [pc, #332]	; (80198f0 <get_int+0x3ec>)
 80197a2:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80197a6:	f003 0310 	and.w	r3, r3, #16
            value = (settings.homing.flags.value & 0x0F) |
 80197aa:	431a      	orrs	r2, r3
                      (settings.homing.flags.manual ? bit(5) : 0) |
 80197ac:	4b50      	ldr	r3, [pc, #320]	; (80198f0 <get_int+0x3ec>)
 80197ae:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80197b2:	005b      	lsls	r3, r3, #1
 80197b4:	f003 0320 	and.w	r3, r3, #32
                     (settings.limits.flags.two_switches ? bit(4) : 0) |
 80197b8:	431a      	orrs	r2, r3
                       (settings.homing.flags.override_locks ? bit(6) : 0) |
 80197ba:	4b4d      	ldr	r3, [pc, #308]	; (80198f0 <get_int+0x3ec>)
 80197bc:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80197c0:	005b      	lsls	r3, r3, #1
 80197c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
                      (settings.homing.flags.manual ? bit(5) : 0) |
 80197c6:	431a      	orrs	r2, r3
                        (settings.homing.flags.keep_on_reset ? bit(7) : 0);
 80197c8:	4b49      	ldr	r3, [pc, #292]	; (80198f0 <get_int+0x3ec>)
 80197ca:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80197ce:	005b      	lsls	r3, r3, #1
 80197d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
            value = (settings.homing.flags.value & 0x0F) |
 80197d4:	4313      	orrs	r3, r2
 80197d6:	60fb      	str	r3, [r7, #12]
            break;
 80197d8:	e083      	b.n	80198e2 <get_int+0x3de>
            value = settings.steppers.deenergize.mask;
 80197da:	4b45      	ldr	r3, [pc, #276]	; (80198f0 <get_int+0x3ec>)
 80197dc:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80197e0:	60fb      	str	r3, [r7, #12]
            break;
 80197e2:	e07e      	b.n	80198e2 <get_int+0x3de>
            value = settings.flags.legacy_rt_commands;
 80197e4:	4b42      	ldr	r3, [pc, #264]	; (80198f0 <get_int+0x3ec>)
 80197e6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80197ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80197ee:	b2db      	uxtb	r3, r3
 80197f0:	60fb      	str	r3, [r7, #12]
            break;
 80197f2:	e076      	b.n	80198e2 <get_int+0x3de>
            value = settings.parking.flags.value;
 80197f4:	4b3e      	ldr	r3, [pc, #248]	; (80198f0 <get_int+0x3ec>)
 80197f6:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80197fa:	60fb      	str	r3, [r7, #12]
            break;
 80197fc:	e071      	b.n	80198e2 <get_int+0x3de>
            value = settings.homing.cycle[id - Setting_HomingCycle_1].mask;
 80197fe:	88fb      	ldrh	r3, [r7, #6]
 8019800:	3b2c      	subs	r3, #44	; 0x2c
 8019802:	4a3b      	ldr	r2, [pc, #236]	; (80198f0 <get_int+0x3ec>)
 8019804:	4413      	add	r3, r2
 8019806:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 801980a:	60fb      	str	r3, [r7, #12]
            break;
 801980c:	e069      	b.n	80198e2 <get_int+0x3de>
            value = settings.flags.restore_overrides;
 801980e:	4b38      	ldr	r3, [pc, #224]	; (80198f0 <get_int+0x3ec>)
 8019810:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8019814:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019818:	b2db      	uxtb	r3, r3
 801981a:	60fb      	str	r3, [r7, #12]
            break;
 801981c:	e061      	b.n	80198e2 <get_int+0x3de>
            value = settings.flags.sleep_enable;
 801981e:	4b34      	ldr	r3, [pc, #208]	; (80198f0 <get_int+0x3ec>)
 8019820:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8019824:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019828:	b2db      	uxtb	r3, r3
 801982a:	60fb      	str	r3, [r7, #12]
            break;
 801982c:	e059      	b.n	80198e2 <get_int+0x3de>
            value = (settings.flags.disable_laser_during_hold ? bit(0) : 0) | (settings.flags.restore_after_feed_hold ? bit(1) : 0);
 801982e:	4b30      	ldr	r3, [pc, #192]	; (80198f0 <get_int+0x3ec>)
 8019830:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8019834:	091b      	lsrs	r3, r3, #4
 8019836:	b2db      	uxtb	r3, r3
 8019838:	f003 0201 	and.w	r2, r3, #1
 801983c:	4b2c      	ldr	r3, [pc, #176]	; (80198f0 <get_int+0x3ec>)
 801983e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8019842:	099b      	lsrs	r3, r3, #6
 8019844:	b2db      	uxtb	r3, r3
 8019846:	f003 0302 	and.w	r3, r3, #2
 801984a:	4313      	orrs	r3, r2
 801984c:	60fb      	str	r3, [r7, #12]
            break;
 801984e:	e048      	b.n	80198e2 <get_int+0x3de>
            value = settings.flags.force_initialization_alarm;
 8019850:	4b27      	ldr	r3, [pc, #156]	; (80198f0 <get_int+0x3ec>)
 8019852:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8019856:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801985a:	b2db      	uxtb	r3, r3
 801985c:	60fb      	str	r3, [r7, #12]
            break;
 801985e:	e040      	b.n	80198e2 <get_int+0x3de>
            value = settings.probe.allow_feed_override;
 8019860:	4b23      	ldr	r3, [pc, #140]	; (80198f0 <get_int+0x3ec>)
 8019862:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8019866:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801986a:	b2db      	uxtb	r3, r3
 801986c:	60fb      	str	r3, [r7, #12]
            break;
 801986e:	e038      	b.n	80198e2 <get_int+0x3de>
            value = settings.tool_change.mode;
 8019870:	4b1f      	ldr	r3, [pc, #124]	; (80198f0 <get_int+0x3ec>)
 8019872:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019876:	60fb      	str	r3, [r7, #12]
            break;
 8019878:	e033      	b.n	80198e2 <get_int+0x3de>
            value = settings.flags.no_restore_position_after_M6 ? 0 : 1;
 801987a:	4b1d      	ldr	r3, [pc, #116]	; (80198f0 <get_int+0x3ec>)
 801987c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8019880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019884:	b2db      	uxtb	r3, r3
 8019886:	2b00      	cmp	r3, #0
 8019888:	bf0c      	ite	eq
 801988a:	2301      	moveq	r3, #1
 801988c:	2300      	movne	r3, #0
 801988e:	b2db      	uxtb	r3, r3
 8019890:	60fb      	str	r3, [r7, #12]
            break;
 8019892:	e026      	b.n	80198e2 <get_int+0x3de>
            value = settings.flags.g92_is_volatile;
 8019894:	4b16      	ldr	r3, [pc, #88]	; (80198f0 <get_int+0x3ec>)
 8019896:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 801989a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801989e:	b2db      	uxtb	r3, r3
 80198a0:	60fb      	str	r3, [r7, #12]
            break;
 80198a2:	e01e      	b.n	80198e2 <get_int+0x3de>
            value = settings.spindle.flags.type;
 80198a4:	4b12      	ldr	r3, [pc, #72]	; (80198f0 <get_int+0x3ec>)
 80198a6:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 80198aa:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80198ae:	b2db      	uxtb	r3, r3
 80198b0:	60fb      	str	r3, [r7, #12]
            break;
 80198b2:	e016      	b.n	80198e2 <get_int+0x3de>
            value = settings.report_interval;
 80198b4:	4b0e      	ldr	r3, [pc, #56]	; (80198f0 <get_int+0x3ec>)
 80198b6:	8a9b      	ldrh	r3, [r3, #20]
 80198b8:	60fb      	str	r3, [r7, #12]
            break;
 80198ba:	e012      	b.n	80198e2 <get_int+0x3de>
            value = settings.flags.no_unlock_after_estop ? 0 : 1;
 80198bc:	4b0c      	ldr	r3, [pc, #48]	; (80198f0 <get_int+0x3ec>)
 80198be:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80198c2:	b25b      	sxtb	r3, r3
 80198c4:	43db      	mvns	r3, r3
 80198c6:	b2db      	uxtb	r3, r3
 80198c8:	09db      	lsrs	r3, r3, #7
 80198ca:	b2db      	uxtb	r3, r3
 80198cc:	60fb      	str	r3, [r7, #12]
            break;
 80198ce:	e008      	b.n	80198e2 <get_int+0x3de>
            value = settings.parking.flags.offset_lock;
 80198d0:	4b07      	ldr	r3, [pc, #28]	; (80198f0 <get_int+0x3ec>)
 80198d2:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80198d6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	60fb      	str	r3, [r7, #12]
            break;
 80198de:	e000      	b.n	80198e2 <get_int+0x3de>
            break;
 80198e0:	bf00      	nop
    }

    return value;
 80198e2:	68fb      	ldr	r3, [r7, #12]
}
 80198e4:	4618      	mov	r0, r3
 80198e6:	3714      	adds	r7, #20
 80198e8:	46bd      	mov	sp, r7
 80198ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ee:	4770      	bx	lr
 80198f0:	20001cf0 	.word	0x20001cf0
 80198f4:	200016a0 	.word	0x200016a0

080198f8 <get_decimal_places>:

inline static uint8_t get_decimal_places (const char *format)
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b084      	sub	sp, #16
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
    char *dp = format == NULL ? NULL : strchr(format, '.');
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d005      	beq.n	8019912 <get_decimal_places+0x1a>
 8019906:	212e      	movs	r1, #46	; 0x2e
 8019908:	6878      	ldr	r0, [r7, #4]
 801990a:	f00c faaf 	bl	8025e6c <strchr>
 801990e:	4603      	mov	r3, r0
 8019910:	e000      	b.n	8019914 <get_decimal_places+0x1c>
 8019912:	2300      	movs	r3, #0
 8019914:	60fb      	str	r3, [r7, #12]

    return dp ? strchr(format, '\0') - dp - 1 : 1;
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d00c      	beq.n	8019936 <get_decimal_places+0x3e>
 801991c:	6878      	ldr	r0, [r7, #4]
 801991e:	f7e6 fcb5 	bl	800028c <strlen>
 8019922:	4603      	mov	r3, r0
 8019924:	461a      	mov	r2, r3
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	441a      	add	r2, r3
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	1ad3      	subs	r3, r2, r3
 801992e:	b2db      	uxtb	r3, r3
 8019930:	3b01      	subs	r3, #1
 8019932:	b2db      	uxtb	r3, r3
 8019934:	e000      	b.n	8019938 <get_decimal_places+0x40>
 8019936:	2301      	movs	r3, #1
}
 8019938:	4618      	mov	r0, r3
 801993a:	3710      	adds	r7, #16
 801993c:	46bd      	mov	sp, r7
 801993e:	bd80      	pop	{r7, pc}

08019940 <setting_get_value>:

char *setting_get_value (const setting_detail_t *setting, uint_fast16_t offset)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	ed2d 8b02 	vpush	{d8}
 8019946:	b084      	sub	sp, #16
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
 801994c:	6039      	str	r1, [r7, #0]
    char *value = NULL;
 801994e:	2300      	movs	r3, #0
 8019950:	60fb      	str	r3, [r7, #12]

    if(setting == NULL)
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d101      	bne.n	801995c <setting_get_value+0x1c>
        return NULL;
 8019958:	2300      	movs	r3, #0
 801995a:	e0d1      	b.n	8019b00 <setting_get_value+0x1c0>

    switch(setting->type) {
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	7f1b      	ldrb	r3, [r3, #28]
 8019960:	2b07      	cmp	r3, #7
 8019962:	bf8c      	ite	hi
 8019964:	2201      	movhi	r2, #1
 8019966:	2200      	movls	r2, #0
 8019968:	b2d2      	uxtb	r2, r2
 801996a:	2a00      	cmp	r2, #0
 801996c:	f040 80c7 	bne.w	8019afe <setting_get_value+0x1be>
 8019970:	2201      	movs	r2, #1
 8019972:	fa02 f303 	lsl.w	r3, r2, r3
 8019976:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 801997a:	2a00      	cmp	r2, #0
 801997c:	bf14      	ite	ne
 801997e:	2201      	movne	r2, #1
 8019980:	2200      	moveq	r2, #0
 8019982:	b2d2      	uxtb	r2, r2
 8019984:	2a00      	cmp	r2, #0
 8019986:	d166      	bne.n	8019a56 <setting_get_value+0x116>
 8019988:	f003 0355 	and.w	r3, r3, #85	; 0x55
 801998c:	2b00      	cmp	r3, #0
 801998e:	bf14      	ite	ne
 8019990:	2301      	movne	r3, #1
 8019992:	2300      	moveq	r3, #0
 8019994:	b2db      	uxtb	r3, r3
 8019996:	2b00      	cmp	r3, #0
 8019998:	f000 80b1 	beq.w	8019afe <setting_get_value+0x1be>

        case Setting_NonCore:
        case Setting_IsExtended:
        case Setting_IsLegacy:
        case Setting_IsExpanded:
            switch(setting->datatype) {
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	7b1b      	ldrb	r3, [r3, #12]
 80199a0:	2b0b      	cmp	r3, #11
 80199a2:	d856      	bhi.n	8019a52 <setting_get_value+0x112>
 80199a4:	a201      	add	r2, pc, #4	; (adr r2, 80199ac <setting_get_value+0x6c>)
 80199a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199aa:	bf00      	nop
 80199ac:	080199ff 	.word	0x080199ff
 80199b0:	080199ff 	.word	0x080199ff
 80199b4:	080199ff 	.word	0x080199ff
 80199b8:	080199ff 	.word	0x080199ff
 80199bc:	080199ff 	.word	0x080199ff
 80199c0:	08019a1f 	.word	0x08019a1f
 80199c4:	080199dd 	.word	0x080199dd
 80199c8:	08019a4b 	.word	0x08019a4b
 80199cc:	08019a2f 	.word	0x08019a2f
 80199d0:	08019a4b 	.word	0x08019a4b
 80199d4:	080199ff 	.word	0x080199ff
 80199d8:	08019a0f 	.word	0x08019a0f

                case Format_Decimal:
                    value = ftoa(*((float *)(setting->value)), get_decimal_places(setting->format));
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	6a1b      	ldr	r3, [r3, #32]
 80199e0:	ed93 8a00 	vldr	s16, [r3]
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	691b      	ldr	r3, [r3, #16]
 80199e8:	4618      	mov	r0, r3
 80199ea:	f7ff ff85 	bl	80198f8 <get_decimal_places>
 80199ee:	4603      	mov	r3, r0
 80199f0:	4618      	mov	r0, r3
 80199f2:	eeb0 0a48 	vmov.f32	s0, s16
 80199f6:	f7f6 f9cd 	bl	800fd94 <ftoa>
 80199fa:	60f8      	str	r0, [r7, #12]
                    break;
 80199fc:	e02a      	b.n	8019a54 <setting_get_value+0x114>
                case Format_Bool:
                case Format_Bitfield:
                case Format_XBitfield:
                case Format_AxisMask:
                case Format_RadioButtons:
                    value = uitoa(*((uint8_t *)(setting->value)));
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	6a1b      	ldr	r3, [r3, #32]
 8019a02:	781b      	ldrb	r3, [r3, #0]
 8019a04:	4618      	mov	r0, r3
 8019a06:	f7f6 f989 	bl	800fd1c <uitoa>
 8019a0a:	60f8      	str	r0, [r7, #12]
                    break;
 8019a0c:	e022      	b.n	8019a54 <setting_get_value+0x114>

                case Format_Int16:
                    value = uitoa(*((uint16_t *)(setting->value)));
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	6a1b      	ldr	r3, [r3, #32]
 8019a12:	881b      	ldrh	r3, [r3, #0]
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7f6 f981 	bl	800fd1c <uitoa>
 8019a1a:	60f8      	str	r0, [r7, #12]
                    break;
 8019a1c:	e01a      	b.n	8019a54 <setting_get_value+0x114>

                case Format_Integer:
                    value = uitoa(*((uint32_t *)(setting->value)));
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	6a1b      	ldr	r3, [r3, #32]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	4618      	mov	r0, r3
 8019a26:	f7f6 f979 	bl	800fd1c <uitoa>
 8019a2a:	60f8      	str	r0, [r7, #12]
                    break;
 8019a2c:	e012      	b.n	8019a54 <setting_get_value+0x114>

                case Format_Password:
                    value = hal.stream.state.webui_connected ? PASSWORD_MASK : ((char *)(setting->value));
 8019a2e:	4b37      	ldr	r3, [pc, #220]	; (8019b0c <setting_get_value+0x1cc>)
 8019a30:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8019a34:	f003 0302 	and.w	r3, r3, #2
 8019a38:	b2db      	uxtb	r3, r3
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d102      	bne.n	8019a44 <setting_get_value+0x104>
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	6a1b      	ldr	r3, [r3, #32]
 8019a42:	e000      	b.n	8019a46 <setting_get_value+0x106>
 8019a44:	4b32      	ldr	r3, [pc, #200]	; (8019b10 <setting_get_value+0x1d0>)
 8019a46:	60fb      	str	r3, [r7, #12]
                    break;
 8019a48:	e004      	b.n	8019a54 <setting_get_value+0x114>

                case Format_String:
                case Format_IPv4:
                    value = ((char *)(setting->value));
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	6a1b      	ldr	r3, [r3, #32]
 8019a4e:	60fb      	str	r3, [r7, #12]
                    break;
 8019a50:	e000      	b.n	8019a54 <setting_get_value+0x114>

                default:
                    break;
 8019a52:	bf00      	nop
            }
            break;
 8019a54:	e053      	b.n	8019afe <setting_get_value+0x1be>
        case Setting_NonCoreFn:
        case Setting_IsExtendedFn:
        case Setting_IsLegacyFn:
        case Setting_IsExpandedFn:;

            setting_id_t id = (setting_id_t)(setting->id + offset);
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	881a      	ldrh	r2, [r3, #0]
 8019a5a:	683b      	ldr	r3, [r7, #0]
 8019a5c:	b29b      	uxth	r3, r3
 8019a5e:	4413      	add	r3, r2
 8019a60:	817b      	strh	r3, [r7, #10]

            switch(setting->datatype) {
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	7b1b      	ldrb	r3, [r3, #12]
 8019a66:	3b06      	subs	r3, #6
 8019a68:	2b03      	cmp	r3, #3
 8019a6a:	d83b      	bhi.n	8019ae4 <setting_get_value+0x1a4>
 8019a6c:	a201      	add	r2, pc, #4	; (adr r2, 8019a74 <setting_get_value+0x134>)
 8019a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a72:	bf00      	nop
 8019a74:	08019a85 	.word	0x08019a85
 8019a78:	08019ad5 	.word	0x08019ad5
 8019a7c:	08019aaf 	.word	0x08019aaf
 8019a80:	08019ad5 	.word	0x08019ad5

                case Format_Decimal:
                    value = ftoa(((setting_get_float_ptr)(setting->get_value))(id), get_decimal_places(setting->format));
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a88:	461a      	mov	r2, r3
 8019a8a:	897b      	ldrh	r3, [r7, #10]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	4790      	blx	r2
 8019a90:	eeb0 8a40 	vmov.f32	s16, s0
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	691b      	ldr	r3, [r3, #16]
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f7ff ff2d 	bl	80198f8 <get_decimal_places>
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8019aa6:	f7f6 f975 	bl	800fd94 <ftoa>
 8019aaa:	60f8      	str	r0, [r7, #12]
                    break;
 8019aac:	e026      	b.n	8019afc <setting_get_value+0x1bc>

                case Format_Password:
                    value = hal.stream.state.webui_connected ? "********" : ((setting_get_string_ptr)(setting->get_value))(id);
 8019aae:	4b17      	ldr	r3, [pc, #92]	; (8019b0c <setting_get_value+0x1cc>)
 8019ab0:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8019ab4:	f003 0302 	and.w	r3, r3, #2
 8019ab8:	b2db      	uxtb	r3, r3
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d107      	bne.n	8019ace <setting_get_value+0x18e>
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ac2:	461a      	mov	r2, r3
 8019ac4:	897b      	ldrh	r3, [r7, #10]
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	4790      	blx	r2
 8019aca:	4603      	mov	r3, r0
 8019acc:	e000      	b.n	8019ad0 <setting_get_value+0x190>
 8019ace:	4b10      	ldr	r3, [pc, #64]	; (8019b10 <setting_get_value+0x1d0>)
 8019ad0:	60fb      	str	r3, [r7, #12]
                    break;
 8019ad2:	e013      	b.n	8019afc <setting_get_value+0x1bc>

                case Format_String:
                case Format_IPv4:
                    value = ((setting_get_string_ptr)(setting->get_value))(id);
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ad8:	461a      	mov	r2, r3
 8019ada:	897b      	ldrh	r3, [r7, #10]
 8019adc:	4618      	mov	r0, r3
 8019ade:	4790      	blx	r2
 8019ae0:	60f8      	str	r0, [r7, #12]
                    break;
 8019ae2:	e00b      	b.n	8019afc <setting_get_value+0x1bc>

                default:
                    value = uitoa(((setting_get_int_ptr)(setting->get_value))(id));
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ae8:	461a      	mov	r2, r3
 8019aea:	897b      	ldrh	r3, [r7, #10]
 8019aec:	4618      	mov	r0, r3
 8019aee:	4790      	blx	r2
 8019af0:	4603      	mov	r3, r0
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7f6 f912 	bl	800fd1c <uitoa>
 8019af8:	60f8      	str	r0, [r7, #12]
                    break;
 8019afa:	bf00      	nop
            }
            break;
 8019afc:	bf00      	nop
    }

    return value;
 8019afe:	68fb      	ldr	r3, [r7, #12]
}
 8019b00:	4618      	mov	r0, r3
 8019b02:	3710      	adds	r7, #16
 8019b04:	46bd      	mov	sp, r7
 8019b06:	ecbd 8b02 	vpop	{d8}
 8019b0a:	bd80      	pop	{r7, pc}
 8019b0c:	200016a0 	.word	0x200016a0
 8019b10:	08030c2c 	.word	0x08030c2c

08019b14 <setting_get_int_value>:

uint32_t setting_get_int_value (const setting_detail_t *setting, uint_fast16_t offset)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b084      	sub	sp, #16
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
 8019b1c:	6039      	str	r1, [r7, #0]
    uint32_t value = 0;
 8019b1e:	2300      	movs	r3, #0
 8019b20:	60fb      	str	r3, [r7, #12]

    if(setting) switch(setting->type) {
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d062      	beq.n	8019bee <setting_get_int_value+0xda>
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	7f1b      	ldrb	r3, [r3, #28]
 8019b2c:	2b07      	cmp	r3, #7
 8019b2e:	bf8c      	ite	hi
 8019b30:	2201      	movhi	r2, #1
 8019b32:	2200      	movls	r2, #0
 8019b34:	b2d2      	uxtb	r2, r2
 8019b36:	2a00      	cmp	r2, #0
 8019b38:	d159      	bne.n	8019bee <setting_get_int_value+0xda>
 8019b3a:	2201      	movs	r2, #1
 8019b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8019b40:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 8019b44:	2a00      	cmp	r2, #0
 8019b46:	bf14      	ite	ne
 8019b48:	2201      	movne	r2, #1
 8019b4a:	2200      	moveq	r2, #0
 8019b4c:	b2d2      	uxtb	r2, r2
 8019b4e:	2a00      	cmp	r2, #0
 8019b50:	d139      	bne.n	8019bc6 <setting_get_int_value+0xb2>
 8019b52:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	bf14      	ite	ne
 8019b5a:	2301      	movne	r3, #1
 8019b5c:	2300      	moveq	r3, #0
 8019b5e:	b2db      	uxtb	r3, r3
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d044      	beq.n	8019bee <setting_get_int_value+0xda>

        case Setting_NonCore:
        case Setting_IsExtended:
        case Setting_IsLegacy:
        case Setting_IsExpanded:
            switch(setting->datatype) {
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	7b1b      	ldrb	r3, [r3, #12]
 8019b68:	2b0b      	cmp	r3, #11
 8019b6a:	d82a      	bhi.n	8019bc2 <setting_get_int_value+0xae>
 8019b6c:	a201      	add	r2, pc, #4	; (adr r2, 8019b74 <setting_get_int_value+0x60>)
 8019b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b72:	bf00      	nop
 8019b74:	08019ba5 	.word	0x08019ba5
 8019b78:	08019ba5 	.word	0x08019ba5
 8019b7c:	08019ba5 	.word	0x08019ba5
 8019b80:	08019ba5 	.word	0x08019ba5
 8019b84:	08019ba5 	.word	0x08019ba5
 8019b88:	08019bb9 	.word	0x08019bb9
 8019b8c:	08019bc3 	.word	0x08019bc3
 8019b90:	08019bc3 	.word	0x08019bc3
 8019b94:	08019bc3 	.word	0x08019bc3
 8019b98:	08019bc3 	.word	0x08019bc3
 8019b9c:	08019ba5 	.word	0x08019ba5
 8019ba0:	08019baf 	.word	0x08019baf
                case Format_Bool:
                case Format_Bitfield:
                case Format_XBitfield:
                case Format_AxisMask:
                case Format_RadioButtons:
                    value = *((uint8_t *)(setting->value));
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	6a1b      	ldr	r3, [r3, #32]
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	60fb      	str	r3, [r7, #12]
                    break;
 8019bac:	e00a      	b.n	8019bc4 <setting_get_int_value+0xb0>

                case Format_Int16:
                    value = *((uint16_t *)(setting->value));
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	6a1b      	ldr	r3, [r3, #32]
 8019bb2:	881b      	ldrh	r3, [r3, #0]
 8019bb4:	60fb      	str	r3, [r7, #12]
                    break;
 8019bb6:	e005      	b.n	8019bc4 <setting_get_int_value+0xb0>

                case Format_Integer:
                    value = *((uint32_t *)(setting->value));
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	6a1b      	ldr	r3, [r3, #32]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	60fb      	str	r3, [r7, #12]
                    break;
 8019bc0:	e000      	b.n	8019bc4 <setting_get_int_value+0xb0>

                default:
                    break;
 8019bc2:	bf00      	nop
            }
            break;
 8019bc4:	e013      	b.n	8019bee <setting_get_int_value+0xda>

        case Setting_NonCoreFn:
        case Setting_IsExtendedFn:
        case Setting_IsLegacyFn:
        case Setting_IsExpandedFn:
            switch(setting->datatype) {
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	7b1b      	ldrb	r3, [r3, #12]
 8019bca:	3b06      	subs	r3, #6
 8019bcc:	2b03      	cmp	r3, #3
 8019bce:	d90c      	bls.n	8019bea <setting_get_int_value+0xd6>
                case Format_Password:
                case Format_IPv4:
                    break;

                default:
                    value = ((setting_get_int_ptr)(setting->get_value))((setting_id_t)(setting->id + offset));
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bd4:	4619      	mov	r1, r3
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	881a      	ldrh	r2, [r3, #0]
 8019bda:	683b      	ldr	r3, [r7, #0]
 8019bdc:	b29b      	uxth	r3, r3
 8019bde:	4413      	add	r3, r2
 8019be0:	b29b      	uxth	r3, r3
 8019be2:	4618      	mov	r0, r3
 8019be4:	4788      	blx	r1
 8019be6:	60f8      	str	r0, [r7, #12]
                    break;
 8019be8:	e000      	b.n	8019bec <setting_get_int_value+0xd8>
                    break;
 8019bea:	bf00      	nop
            }
            break;
 8019bec:	bf00      	nop
    }

    return value;
 8019bee:	68fb      	ldr	r3, [r7, #12]
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	3710      	adds	r7, #16
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	bd80      	pop	{r7, pc}

08019bf8 <is_setting_available>:

    return value;
}

static bool is_setting_available (const setting_detail_t *setting)
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b084      	sub	sp, #16
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
    bool available = false;
 8019c00:	2300      	movs	r3, #0
 8019c02:	73fb      	strb	r3, [r7, #15]

    if(setting) switch(normalize_id(setting->id)) {
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	f000 8218 	beq.w	801a03c <is_setting_available+0x444>
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	881b      	ldrh	r3, [r3, #0]
 8019c10:	4618      	mov	r0, r3
 8019c12:	f7ff f949 	bl	8018ea8 <normalize_id>
 8019c16:	4603      	mov	r3, r0
 8019c18:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8019c1c:	f000 8201 	beq.w	801a022 <is_setting_available+0x42a>
 8019c20:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8019c24:	f300 8209 	bgt.w	801a03a <is_setting_available+0x442>
 8019c28:	f5b3 7ff1 	cmp.w	r3, #482	; 0x1e2
 8019c2c:	f000 81f0 	beq.w	801a010 <is_setting_available+0x418>
 8019c30:	f5b3 7ff1 	cmp.w	r3, #482	; 0x1e2
 8019c34:	f300 8201 	bgt.w	801a03a <is_setting_available+0x442>
 8019c38:	f240 12e1 	movw	r2, #481	; 0x1e1
 8019c3c:	4293      	cmp	r3, r2
 8019c3e:	f000 81de 	beq.w	8019ffe <is_setting_available+0x406>
 8019c42:	f5b3 7ff1 	cmp.w	r3, #482	; 0x1e2
 8019c46:	f280 81f8 	bge.w	801a03a <is_setting_available+0x442>
 8019c4a:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8019c4e:	f280 81f4 	bge.w	801a03a <is_setting_available+0x442>
 8019c52:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8019c56:	da05      	bge.n	8019c64 <is_setting_available+0x6c>
 8019c58:	2b41      	cmp	r3, #65	; 0x41
 8019c5a:	f300 80fb 	bgt.w	8019e54 <is_setting_available+0x25c>
 8019c5e:	2b06      	cmp	r3, #6
 8019c60:	da78      	bge.n	8019d54 <is_setting_available+0x15c>
        case Setting_UnlockAfterEStop:
            available = hal.signals_cap.e_stop;
            break;

        default:
            break;
 8019c62:	e1ea      	b.n	801a03a <is_setting_available+0x442>
    if(setting) switch(normalize_id(setting->id)) {
 8019c64:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8019c68:	2b37      	cmp	r3, #55	; 0x37
 8019c6a:	f200 81e6 	bhi.w	801a03a <is_setting_available+0x442>
 8019c6e:	a201      	add	r2, pc, #4	; (adr r2, 8019c74 <is_setting_available+0x7c>)
 8019c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c74:	08019f93 	.word	0x08019f93
 8019c78:	0801a03b 	.word	0x0801a03b
 8019c7c:	0801a03b 	.word	0x0801a03b
 8019c80:	0801a03b 	.word	0x0801a03b
 8019c84:	0801a03b 	.word	0x0801a03b
 8019c88:	0801a03b 	.word	0x0801a03b
 8019c8c:	0801a03b 	.word	0x0801a03b
 8019c90:	08019f4d 	.word	0x08019f4d
 8019c94:	08019f4d 	.word	0x08019f4d
 8019c98:	08019f4d 	.word	0x08019f4d
 8019c9c:	0801a03b 	.word	0x0801a03b
 8019ca0:	0801a03b 	.word	0x0801a03b
 8019ca4:	0801a03b 	.word	0x0801a03b
 8019ca8:	0801a03b 	.word	0x0801a03b
 8019cac:	0801a03b 	.word	0x0801a03b
 8019cb0:	0801a03b 	.word	0x0801a03b
 8019cb4:	0801a03b 	.word	0x0801a03b
 8019cb8:	0801a03b 	.word	0x0801a03b
 8019cbc:	0801a03b 	.word	0x0801a03b
 8019cc0:	0801a03b 	.word	0x0801a03b
 8019cc4:	0801a03b 	.word	0x0801a03b
 8019cc8:	0801a03b 	.word	0x0801a03b
 8019ccc:	0801a03b 	.word	0x0801a03b
 8019cd0:	0801a03b 	.word	0x0801a03b
 8019cd4:	0801a03b 	.word	0x0801a03b
 8019cd8:	0801a03b 	.word	0x0801a03b
 8019cdc:	0801a03b 	.word	0x0801a03b
 8019ce0:	0801a03b 	.word	0x0801a03b
 8019ce4:	0801a03b 	.word	0x0801a03b
 8019ce8:	0801a03b 	.word	0x0801a03b
 8019cec:	0801a03b 	.word	0x0801a03b
 8019cf0:	0801a03b 	.word	0x0801a03b
 8019cf4:	0801a03b 	.word	0x0801a03b
 8019cf8:	0801a03b 	.word	0x0801a03b
 8019cfc:	0801a03b 	.word	0x0801a03b
 8019d00:	0801a03b 	.word	0x0801a03b
 8019d04:	0801a03b 	.word	0x0801a03b
 8019d08:	0801a03b 	.word	0x0801a03b
 8019d0c:	0801a03b 	.word	0x0801a03b
 8019d10:	0801a03b 	.word	0x0801a03b
 8019d14:	0801a03b 	.word	0x0801a03b
 8019d18:	0801a03b 	.word	0x0801a03b
 8019d1c:	0801a03b 	.word	0x0801a03b
 8019d20:	0801a03b 	.word	0x0801a03b
 8019d24:	0801a03b 	.word	0x0801a03b
 8019d28:	0801a03b 	.word	0x0801a03b
 8019d2c:	0801a03b 	.word	0x0801a03b
 8019d30:	0801a03b 	.word	0x0801a03b
 8019d34:	0801a03b 	.word	0x0801a03b
 8019d38:	0801a03b 	.word	0x0801a03b
 8019d3c:	0801a03b 	.word	0x0801a03b
 8019d40:	0801a03b 	.word	0x0801a03b
 8019d44:	08019f7b 	.word	0x08019f7b
 8019d48:	08019f7b 	.word	0x08019f7b
 8019d4c:	08019fc9 	.word	0x08019fc9
 8019d50:	08019eef 	.word	0x08019eef
 8019d54:	3b06      	subs	r3, #6
 8019d56:	2b3b      	cmp	r3, #59	; 0x3b
 8019d58:	f200 816f 	bhi.w	801a03a <is_setting_available+0x442>
 8019d5c:	a201      	add	r2, pc, #4	; (adr r2, 8019d64 <is_setting_available+0x16c>)
 8019d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d62:	bf00      	nop
 8019d64:	08019e89 	.word	0x08019e89
 8019d68:	08019e9b 	.word	0x08019e9b
 8019d6c:	08019e5b 	.word	0x08019e5b
 8019d70:	08019ea1 	.word	0x08019ea1
 8019d74:	0801a03b 	.word	0x0801a03b
 8019d78:	0801a03b 	.word	0x0801a03b
 8019d7c:	0801a03b 	.word	0x0801a03b
 8019d80:	0801a03b 	.word	0x0801a03b
 8019d84:	0801a03b 	.word	0x0801a03b
 8019d88:	0801a03b 	.word	0x0801a03b
 8019d8c:	0801a03b 	.word	0x0801a03b
 8019d90:	0801a03b 	.word	0x0801a03b
 8019d94:	0801a03b 	.word	0x0801a03b
 8019d98:	08019e89 	.word	0x08019e89
 8019d9c:	0801a03b 	.word	0x0801a03b
 8019da0:	0801a03b 	.word	0x0801a03b
 8019da4:	0801a03b 	.word	0x0801a03b
 8019da8:	0801a03b 	.word	0x0801a03b
 8019dac:	0801a03b 	.word	0x0801a03b
 8019db0:	0801a03b 	.word	0x0801a03b
 8019db4:	0801a03b 	.word	0x0801a03b
 8019db8:	0801a03b 	.word	0x0801a03b
 8019dbc:	0801a03b 	.word	0x0801a03b
 8019dc0:	0801a03b 	.word	0x0801a03b
 8019dc4:	08019f33 	.word	0x08019f33
 8019dc8:	08019f33 	.word	0x08019f33
 8019dcc:	0801a03b 	.word	0x0801a03b
 8019dd0:	08019ed7 	.word	0x08019ed7
 8019dd4:	08019ed7 	.word	0x08019ed7
 8019dd8:	08019ed7 	.word	0x08019ed7
 8019ddc:	08019ed7 	.word	0x08019ed7
 8019de0:	0801a03b 	.word	0x0801a03b
 8019de4:	08019f01 	.word	0x08019f01
 8019de8:	0801a03b 	.word	0x0801a03b
 8019dec:	0801a03b 	.word	0x0801a03b
 8019df0:	08019f7b 	.word	0x08019f7b
 8019df4:	08019f7b 	.word	0x08019f7b
 8019df8:	0801a03b 	.word	0x0801a03b
 8019dfc:	0801a03b 	.word	0x0801a03b
 8019e00:	0801a03b 	.word	0x0801a03b
 8019e04:	0801a03b 	.word	0x0801a03b
 8019e08:	0801a03b 	.word	0x0801a03b
 8019e0c:	0801a03b 	.word	0x0801a03b
 8019e10:	0801a03b 	.word	0x0801a03b
 8019e14:	0801a03b 	.word	0x0801a03b
 8019e18:	0801a03b 	.word	0x0801a03b
 8019e1c:	0801a03b 	.word	0x0801a03b
 8019e20:	0801a03b 	.word	0x0801a03b
 8019e24:	0801a03b 	.word	0x0801a03b
 8019e28:	0801a03b 	.word	0x0801a03b
 8019e2c:	08019f7b 	.word	0x08019f7b
 8019e30:	08019f7b 	.word	0x08019f7b
 8019e34:	08019f7b 	.word	0x08019f7b
 8019e38:	08019f7b 	.word	0x08019f7b
 8019e3c:	08019f7b 	.word	0x08019f7b
 8019e40:	08019f7b 	.word	0x08019f7b
 8019e44:	0801a03b 	.word	0x0801a03b
 8019e48:	0801a03b 	.word	0x0801a03b
 8019e4c:	0801a03b 	.word	0x0801a03b
 8019e50:	08019e89 	.word	0x08019e89
 8019e54:	2baa      	cmp	r3, #170	; 0xaa
 8019e56:	d079      	beq.n	8019f4c <is_setting_available+0x354>
            break;
 8019e58:	e0ef      	b.n	801a03a <is_setting_available+0x442>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(false).mask != 0;
 8019e5a:	4b7b      	ldr	r3, [pc, #492]	; (801a048 <is_setting_available+0x450>)
 8019e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d00a      	beq.n	8019e7a <is_setting_available+0x282>
 8019e64:	4b78      	ldr	r3, [pc, #480]	; (801a048 <is_setting_available+0x450>)
 8019e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e6a:	2000      	movs	r0, #0
 8019e6c:	4798      	blx	r3
 8019e6e:	4603      	mov	r3, r0
 8019e70:	b2db      	uxtb	r3, r3
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d001      	beq.n	8019e7a <is_setting_available+0x282>
 8019e76:	2301      	movs	r3, #1
 8019e78:	e000      	b.n	8019e7c <is_setting_available+0x284>
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	73fb      	strb	r3, [r7, #15]
 8019e7e:	7bfb      	ldrb	r3, [r7, #15]
 8019e80:	f003 0301 	and.w	r3, r3, #1
 8019e84:	73fb      	strb	r3, [r7, #15]
            break;
 8019e86:	e0d9      	b.n	801a03c <is_setting_available+0x444>
            available = hal.probe.get_state != NULL;
 8019e88:	4b6f      	ldr	r3, [pc, #444]	; (801a048 <is_setting_available+0x450>)
 8019e8a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	bf14      	ite	ne
 8019e92:	2301      	movne	r3, #1
 8019e94:	2300      	moveq	r3, #0
 8019e96:	73fb      	strb	r3, [r7, #15]
            break;
 8019e98:	e0d0      	b.n	801a03c <is_setting_available+0x444>
            available = false;
 8019e9a:	2300      	movs	r3, #0
 8019e9c:	73fb      	strb	r3, [r7, #15]
            break;
 8019e9e:	e0cd      	b.n	801a03c <is_setting_available+0x444>
            available = hal.driver_cap.pwm_spindle && spindle_get_caps(false).laser;
 8019ea0:	4b69      	ldr	r3, [pc, #420]	; (801a048 <is_setting_available+0x450>)
 8019ea2:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8019ea6:	f003 0308 	and.w	r3, r3, #8
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d00b      	beq.n	8019ec8 <is_setting_available+0x2d0>
 8019eb0:	2000      	movs	r0, #0
 8019eb2:	f001 feff 	bl	801bcb4 <spindle_get_caps>
 8019eb6:	4603      	mov	r3, r0
 8019eb8:	b2db      	uxtb	r3, r3
 8019eba:	f003 0308 	and.w	r3, r3, #8
 8019ebe:	b2db      	uxtb	r3, r3
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d001      	beq.n	8019ec8 <is_setting_available+0x2d0>
 8019ec4:	2301      	movs	r3, #1
 8019ec6:	e000      	b.n	8019eca <is_setting_available+0x2d2>
 8019ec8:	2300      	movs	r3, #0
 8019eca:	73fb      	strb	r3, [r7, #15]
 8019ecc:	7bfb      	ldrb	r3, [r7, #15]
 8019ece:	f003 0301 	and.w	r3, r3, #1
 8019ed2:	73fb      	strb	r3, [r7, #15]
            break;
 8019ed4:	e0b2      	b.n	801a03c <is_setting_available+0x444>
            available = hal.driver_cap.pwm_spindle;
 8019ed6:	4b5c      	ldr	r3, [pc, #368]	; (801a048 <is_setting_available+0x450>)
 8019ed8:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8019edc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019ee0:	b2db      	uxtb	r3, r3
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	bf14      	ite	ne
 8019ee6:	2301      	movne	r3, #1
 8019ee8:	2300      	moveq	r3, #0
 8019eea:	73fb      	strb	r3, [r7, #15]
            break;
 8019eec:	e0a6      	b.n	801a03c <is_setting_available+0x444>
            available = spindle_get_count() > 1;
 8019eee:	f001 ff9b 	bl	801be28 <spindle_get_count>
 8019ef2:	4603      	mov	r3, r0
 8019ef4:	2b01      	cmp	r3, #1
 8019ef6:	bf8c      	ite	hi
 8019ef8:	2301      	movhi	r3, #1
 8019efa:	2300      	movls	r3, #0
 8019efc:	73fb      	strb	r3, [r7, #15]
            break;
 8019efe:	e09d      	b.n	801a03c <is_setting_available+0x444>
            available = hal.driver_cap.spindle_sync || hal.driver_cap.spindle_pid;
 8019f00:	4b51      	ldr	r3, [pc, #324]	; (801a048 <is_setting_available+0x450>)
 8019f02:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 8019f06:	f003 0301 	and.w	r3, r3, #1
 8019f0a:	b2db      	uxtb	r3, r3
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d107      	bne.n	8019f20 <is_setting_available+0x328>
 8019f10:	4b4d      	ldr	r3, [pc, #308]	; (801a048 <is_setting_available+0x450>)
 8019f12:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 8019f16:	f003 0320 	and.w	r3, r3, #32
 8019f1a:	b2db      	uxtb	r3, r3
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d001      	beq.n	8019f24 <is_setting_available+0x32c>
 8019f20:	2301      	movs	r3, #1
 8019f22:	e000      	b.n	8019f26 <is_setting_available+0x32e>
 8019f24:	2300      	movs	r3, #0
 8019f26:	73fb      	strb	r3, [r7, #15]
 8019f28:	7bfb      	ldrb	r3, [r7, #15]
 8019f2a:	f003 0301 	and.w	r3, r3, #1
 8019f2e:	73fb      	strb	r3, [r7, #15]
            break;
 8019f30:	e084      	b.n	801a03c <is_setting_available+0x444>
            available = spindle_get_caps(false).variable;
 8019f32:	2000      	movs	r0, #0
 8019f34:	f001 febe 	bl	801bcb4 <spindle_get_caps>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019f3e:	b2db      	uxtb	r3, r3
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	bf14      	ite	ne
 8019f44:	2301      	movne	r3, #1
 8019f46:	2300      	moveq	r3, #0
 8019f48:	73fb      	strb	r3, [r7, #15]
            break;
 8019f4a:	e077      	b.n	801a03c <is_setting_available+0x444>
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 8019f4c:	4b3e      	ldr	r3, [pc, #248]	; (801a048 <is_setting_available+0x450>)
 8019f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d00a      	beq.n	8019f6c <is_setting_available+0x374>
 8019f56:	4b3c      	ldr	r3, [pc, #240]	; (801a048 <is_setting_available+0x450>)
 8019f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019f5c:	2001      	movs	r0, #1
 8019f5e:	4798      	blx	r3
 8019f60:	4603      	mov	r3, r0
 8019f62:	b2db      	uxtb	r3, r3
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d001      	beq.n	8019f6c <is_setting_available+0x374>
 8019f68:	2301      	movs	r3, #1
 8019f6a:	e000      	b.n	8019f6e <is_setting_available+0x376>
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	73fb      	strb	r3, [r7, #15]
 8019f70:	7bfb      	ldrb	r3, [r7, #15]
 8019f72:	f003 0301 	and.w	r3, r3, #1
 8019f76:	73fb      	strb	r3, [r7, #15]
            break;
 8019f78:	e060      	b.n	801a03c <is_setting_available+0x444>
            available = hal.signals_cap.safety_door_ajar;
 8019f7a:	4b33      	ldr	r3, [pc, #204]	; (801a048 <is_setting_available+0x450>)
 8019f7c:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8019f80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019f84:	b2db      	uxtb	r3, r3
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	bf14      	ite	ne
 8019f8a:	2301      	movne	r3, #1
 8019f8c:	2300      	moveq	r3, #0
 8019f8e:	73fb      	strb	r3, [r7, #15]
            break;
 8019f90:	e054      	b.n	801a03c <is_setting_available+0x444>
            available = spindle_get_caps(true).at_speed || hal.driver_cap.spindle_sync;
 8019f92:	2001      	movs	r0, #1
 8019f94:	f001 fe8e 	bl	801bcb4 <spindle_get_caps>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	b2db      	uxtb	r3, r3
 8019f9c:	f003 0304 	and.w	r3, r3, #4
 8019fa0:	b2db      	uxtb	r3, r3
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d107      	bne.n	8019fb6 <is_setting_available+0x3be>
 8019fa6:	4b28      	ldr	r3, [pc, #160]	; (801a048 <is_setting_available+0x450>)
 8019fa8:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 8019fac:	f003 0301 	and.w	r3, r3, #1
 8019fb0:	b2db      	uxtb	r3, r3
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d001      	beq.n	8019fba <is_setting_available+0x3c2>
 8019fb6:	2301      	movs	r3, #1
 8019fb8:	e000      	b.n	8019fbc <is_setting_available+0x3c4>
 8019fba:	2300      	movs	r3, #0
 8019fbc:	73fb      	strb	r3, [r7, #15]
 8019fbe:	7bfb      	ldrb	r3, [r7, #15]
 8019fc0:	f003 0301 	and.w	r3, r3, #1
 8019fc4:	73fb      	strb	r3, [r7, #15]
            break;
 8019fc6:	e039      	b.n	801a03c <is_setting_available+0x444>
            available = !hal.signals_cap.safety_door_ajar && spindle_get_caps(true).at_speed;
 8019fc8:	4b1f      	ldr	r3, [pc, #124]	; (801a048 <is_setting_available+0x450>)
 8019fca:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8019fce:	f003 0308 	and.w	r3, r3, #8
 8019fd2:	b2db      	uxtb	r3, r3
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d10b      	bne.n	8019ff0 <is_setting_available+0x3f8>
 8019fd8:	2001      	movs	r0, #1
 8019fda:	f001 fe6b 	bl	801bcb4 <spindle_get_caps>
 8019fde:	4603      	mov	r3, r0
 8019fe0:	b2db      	uxtb	r3, r3
 8019fe2:	f003 0304 	and.w	r3, r3, #4
 8019fe6:	b2db      	uxtb	r3, r3
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d001      	beq.n	8019ff0 <is_setting_available+0x3f8>
 8019fec:	2301      	movs	r3, #1
 8019fee:	e000      	b.n	8019ff2 <is_setting_available+0x3fa>
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	73fb      	strb	r3, [r7, #15]
 8019ff4:	7bfb      	ldrb	r3, [r7, #15]
 8019ff6:	f003 0301 	and.w	r3, r3, #1
 8019ffa:	73fb      	strb	r3, [r7, #15]
            break;
 8019ffc:	e01e      	b.n	801a03c <is_setting_available+0x444>
            available = hal.get_elapsed_ticks != NULL;
 8019ffe:	4b12      	ldr	r3, [pc, #72]	; (801a048 <is_setting_available+0x450>)
 801a000:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801a004:	2b00      	cmp	r3, #0
 801a006:	bf14      	ite	ne
 801a008:	2301      	movne	r3, #1
 801a00a:	2300      	moveq	r3, #0
 801a00c:	73fb      	strb	r3, [r7, #15]
            break;
 801a00e:	e015      	b.n	801a03c <is_setting_available+0x444>
            available = hal.rtc.set_datetime != NULL;
 801a010:	4b0d      	ldr	r3, [pc, #52]	; (801a048 <is_setting_available+0x450>)
 801a012:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801a016:	2b00      	cmp	r3, #0
 801a018:	bf14      	ite	ne
 801a01a:	2301      	movne	r3, #1
 801a01c:	2300      	moveq	r3, #0
 801a01e:	73fb      	strb	r3, [r7, #15]
            break;
 801a020:	e00c      	b.n	801a03c <is_setting_available+0x444>
            available = hal.signals_cap.e_stop;
 801a022:	4b09      	ldr	r3, [pc, #36]	; (801a048 <is_setting_available+0x450>)
 801a024:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 801a028:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a02c:	b2db      	uxtb	r3, r3
 801a02e:	2b00      	cmp	r3, #0
 801a030:	bf14      	ite	ne
 801a032:	2301      	movne	r3, #1
 801a034:	2300      	moveq	r3, #0
 801a036:	73fb      	strb	r3, [r7, #15]
            break;
 801a038:	e000      	b.n	801a03c <is_setting_available+0x444>
            break;
 801a03a:	bf00      	nop
    }

    return available;
 801a03c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a03e:	4618      	mov	r0, r3
 801a040:	3710      	adds	r7, #16
 801a042:	46bd      	mov	sp, r7
 801a044:	bd80      	pop	{r7, pc}
 801a046:	bf00      	nop
 801a048:	200016a0 	.word	0x200016a0

0801a04c <settings_write_build_info>:

// Write build info to persistent storage
void settings_write_build_info (char *line)
{
 801a04c:	b590      	push	{r4, r7, lr}
 801a04e:	b083      	sub	sp, #12
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
    if(hal.nvs.type != NVS_None)
 801a054:	4b08      	ldr	r3, [pc, #32]	; (801a078 <settings_write_build_info+0x2c>)
 801a056:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d008      	beq.n	801a070 <settings_write_build_info+0x24>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_BUILD_INFO, (uint8_t *)line, sizeof(stored_line_t), true);
 801a05e:	4b06      	ldr	r3, [pc, #24]	; (801a078 <settings_write_build_info+0x2c>)
 801a060:	f8d3 4160 	ldr.w	r4, [r3, #352]	; 0x160
 801a064:	2301      	movs	r3, #1
 801a066:	2246      	movs	r2, #70	; 0x46
 801a068:	6879      	ldr	r1, [r7, #4]
 801a06a:	f240 30ae 	movw	r0, #942	; 0x3ae
 801a06e:	47a0      	blx	r4
}
 801a070:	bf00      	nop
 801a072:	370c      	adds	r7, #12
 801a074:	46bd      	mov	sp, r7
 801a076:	bd90      	pop	{r4, r7, pc}
 801a078:	200016a0 	.word	0x200016a0

0801a07c <settings_read_build_info>:

// Read build info from persistent storage.
bool settings_read_build_info(char *line)
{
 801a07c:	b590      	push	{r4, r7, lr}
 801a07e:	b083      	sub	sp, #12
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_BUILD_INFO, sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801a084:	4b0e      	ldr	r3, [pc, #56]	; (801a0c0 <settings_read_build_info+0x44>)
 801a086:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d00b      	beq.n	801a0a6 <settings_read_build_info+0x2a>
 801a08e:	4b0c      	ldr	r3, [pc, #48]	; (801a0c0 <settings_read_build_info+0x44>)
 801a090:	f8d3 4164 	ldr.w	r4, [r3, #356]	; 0x164
 801a094:	2301      	movs	r3, #1
 801a096:	2246      	movs	r2, #70	; 0x46
 801a098:	f240 31ae 	movw	r1, #942	; 0x3ae
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	47a0      	blx	r4
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	2b02      	cmp	r3, #2
 801a0a4:	d007      	beq.n	801a0b6 <settings_read_build_info+0x3a>
        // Reset line with default value
        line[0] = 0; // Empty line
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	701a      	strb	r2, [r3, #0]
        settings_write_build_info(line);
 801a0ac:	6878      	ldr	r0, [r7, #4]
 801a0ae:	f7ff ffcd 	bl	801a04c <settings_write_build_info>
        return false;
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	e000      	b.n	801a0b8 <settings_read_build_info+0x3c>
    }
    return true;
 801a0b6:	2301      	movs	r3, #1
}
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	370c      	adds	r7, #12
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bd90      	pop	{r4, r7, pc}
 801a0c0:	200016a0 	.word	0x200016a0

0801a0c4 <settings_write_startup_line>:

// Write startup line to persistent storage
void settings_write_startup_line (uint8_t idx, char *line)
{
 801a0c4:	b590      	push	{r4, r7, lr}
 801a0c6:	b083      	sub	sp, #12
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	4603      	mov	r3, r0
 801a0cc:	6039      	str	r1, [r7, #0]
 801a0ce:	71fb      	strb	r3, [r7, #7]
    assert(idx < N_STARTUP_LINE);
 801a0d0:	79fb      	ldrb	r3, [r7, #7]
 801a0d2:	2b01      	cmp	r3, #1
 801a0d4:	d906      	bls.n	801a0e4 <settings_write_startup_line+0x20>
 801a0d6:	4b0f      	ldr	r3, [pc, #60]	; (801a114 <settings_write_startup_line+0x50>)
 801a0d8:	4a0f      	ldr	r2, [pc, #60]	; (801a118 <settings_write_startup_line+0x54>)
 801a0da:	f240 71b5 	movw	r1, #1973	; 0x7b5
 801a0de:	480f      	ldr	r0, [pc, #60]	; (801a11c <settings_write_startup_line+0x58>)
 801a0e0:	f00b fb0e 	bl	8025700 <__assert_func>

#ifdef FORCE_BUFFER_SYNC_DURING_NVS_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing.
#endif

    if(hal.nvs.type != NVS_None)
 801a0e4:	4b0e      	ldr	r3, [pc, #56]	; (801a120 <settings_write_startup_line+0x5c>)
 801a0e6:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d00e      	beq.n	801a10c <settings_write_startup_line+0x48>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), (uint8_t *)line, sizeof(stored_line_t), true);
 801a0ee:	4b0c      	ldr	r3, [pc, #48]	; (801a120 <settings_write_startup_line+0x5c>)
 801a0f0:	f8d3 4160 	ldr.w	r4, [r3, #352]	; 0x160
 801a0f4:	79fa      	ldrb	r2, [r7, #7]
 801a0f6:	4613      	mov	r3, r2
 801a0f8:	00db      	lsls	r3, r3, #3
 801a0fa:	4413      	add	r3, r2
 801a0fc:	00db      	lsls	r3, r3, #3
 801a0fe:	1a9b      	subs	r3, r3, r2
 801a100:	f203 301f 	addw	r0, r3, #799	; 0x31f
 801a104:	2301      	movs	r3, #1
 801a106:	2246      	movs	r2, #70	; 0x46
 801a108:	6839      	ldr	r1, [r7, #0]
 801a10a:	47a0      	blx	r4
}
 801a10c:	bf00      	nop
 801a10e:	370c      	adds	r7, #12
 801a110:	46bd      	mov	sp, r7
 801a112:	bd90      	pop	{r4, r7, pc}
 801a114:	08030c38 	.word	0x08030c38
 801a118:	080347b0 	.word	0x080347b0
 801a11c:	08030c50 	.word	0x08030c50
 801a120:	200016a0 	.word	0x200016a0

0801a124 <settings_read_startup_line>:

// Read startup line to persistent storage.
bool settings_read_startup_line (uint8_t idx, char *line)
{
 801a124:	b590      	push	{r4, r7, lr}
 801a126:	b083      	sub	sp, #12
 801a128:	af00      	add	r7, sp, #0
 801a12a:	4603      	mov	r3, r0
 801a12c:	6039      	str	r1, [r7, #0]
 801a12e:	71fb      	strb	r3, [r7, #7]
    assert(idx < N_STARTUP_LINE);
 801a130:	79fb      	ldrb	r3, [r7, #7]
 801a132:	2b01      	cmp	r3, #1
 801a134:	d906      	bls.n	801a144 <settings_read_startup_line+0x20>
 801a136:	4b16      	ldr	r3, [pc, #88]	; (801a190 <settings_read_startup_line+0x6c>)
 801a138:	4a16      	ldr	r2, [pc, #88]	; (801a194 <settings_read_startup_line+0x70>)
 801a13a:	f240 71c2 	movw	r1, #1986	; 0x7c2
 801a13e:	4816      	ldr	r0, [pc, #88]	; (801a198 <settings_read_startup_line+0x74>)
 801a140:	f00b fade 	bl	8025700 <__assert_func>

    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)line, NVS_ADDR_STARTUP_BLOCK + idx * (sizeof(stored_line_t) + NVS_CRC_BYTES), sizeof(stored_line_t), true) == NVS_TransferResult_OK)) {
 801a144:	4b15      	ldr	r3, [pc, #84]	; (801a19c <settings_read_startup_line+0x78>)
 801a146:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d011      	beq.n	801a172 <settings_read_startup_line+0x4e>
 801a14e:	4b13      	ldr	r3, [pc, #76]	; (801a19c <settings_read_startup_line+0x78>)
 801a150:	f8d3 4164 	ldr.w	r4, [r3, #356]	; 0x164
 801a154:	79fa      	ldrb	r2, [r7, #7]
 801a156:	4613      	mov	r3, r2
 801a158:	00db      	lsls	r3, r3, #3
 801a15a:	4413      	add	r3, r2
 801a15c:	00db      	lsls	r3, r3, #3
 801a15e:	1a9b      	subs	r3, r3, r2
 801a160:	f203 311f 	addw	r1, r3, #799	; 0x31f
 801a164:	2301      	movs	r3, #1
 801a166:	2246      	movs	r2, #70	; 0x46
 801a168:	6838      	ldr	r0, [r7, #0]
 801a16a:	47a0      	blx	r4
 801a16c:	4603      	mov	r3, r0
 801a16e:	2b02      	cmp	r3, #2
 801a170:	d009      	beq.n	801a186 <settings_read_startup_line+0x62>
        // Reset line with default value
        *line = '\0'; // Empty line
 801a172:	683b      	ldr	r3, [r7, #0]
 801a174:	2200      	movs	r2, #0
 801a176:	701a      	strb	r2, [r3, #0]
        settings_write_startup_line(idx, line);
 801a178:	79fb      	ldrb	r3, [r7, #7]
 801a17a:	6839      	ldr	r1, [r7, #0]
 801a17c:	4618      	mov	r0, r3
 801a17e:	f7ff ffa1 	bl	801a0c4 <settings_write_startup_line>
        return false;
 801a182:	2300      	movs	r3, #0
 801a184:	e000      	b.n	801a188 <settings_read_startup_line+0x64>
    }
    return true;
 801a186:	2301      	movs	r3, #1
}
 801a188:	4618      	mov	r0, r3
 801a18a:	370c      	adds	r7, #12
 801a18c:	46bd      	mov	sp, r7
 801a18e:	bd90      	pop	{r4, r7, pc}
 801a190:	08030c38 	.word	0x08030c38
 801a194:	080347cc 	.word	0x080347cc
 801a198:	08030c50 	.word	0x08030c50
 801a19c:	200016a0 	.word	0x200016a0

0801a1a0 <settings_write_coord_data>:

// Write selected coordinate data to persistent storage.
void settings_write_coord_data (coord_system_id_t id, float (*coord_data)[N_AXIS])
{
 801a1a0:	b590      	push	{r4, r7, lr}
 801a1a2:	b083      	sub	sp, #12
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	4603      	mov	r3, r0
 801a1a8:	6039      	str	r1, [r7, #0]
 801a1aa:	71fb      	strb	r3, [r7, #7]
    assert(id <= N_CoordinateSystems);
 801a1ac:	79fb      	ldrb	r3, [r7, #7]
 801a1ae:	2b0c      	cmp	r3, #12
 801a1b0:	d906      	bls.n	801a1c0 <settings_write_coord_data+0x20>
 801a1b2:	4b0f      	ldr	r3, [pc, #60]	; (801a1f0 <settings_write_coord_data+0x50>)
 801a1b4:	4a0f      	ldr	r2, [pc, #60]	; (801a1f4 <settings_write_coord_data+0x54>)
 801a1b6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 801a1ba:	480f      	ldr	r0, [pc, #60]	; (801a1f8 <settings_write_coord_data+0x58>)
 801a1bc:	f00b faa0 	bl	8025700 <__assert_func>

#ifdef FORCE_BUFFER_SYNC_DURING_NVS_WRITE
    protocol_buffer_synchronize();
#endif

    if(hal.nvs.type != NVS_None)
 801a1c0:	4b0e      	ldr	r3, [pc, #56]	; (801a1fc <settings_write_coord_data+0x5c>)
 801a1c2:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d00e      	beq.n	801a1e8 <settings_write_coord_data+0x48>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), (uint8_t *)coord_data, sizeof(coord_data_t), true);
 801a1ca:	4b0c      	ldr	r3, [pc, #48]	; (801a1fc <settings_write_coord_data+0x5c>)
 801a1cc:	f8d3 4160 	ldr.w	r4, [r3, #352]	; 0x160
 801a1d0:	79fa      	ldrb	r2, [r7, #7]
 801a1d2:	4613      	mov	r3, r2
 801a1d4:	005b      	lsls	r3, r3, #1
 801a1d6:	4413      	add	r3, r2
 801a1d8:	009b      	lsls	r3, r3, #2
 801a1da:	4413      	add	r3, r2
 801a1dc:	f503 7000 	add.w	r0, r3, #512	; 0x200
 801a1e0:	2301      	movs	r3, #1
 801a1e2:	220c      	movs	r2, #12
 801a1e4:	6839      	ldr	r1, [r7, #0]
 801a1e6:	47a0      	blx	r4
}
 801a1e8:	bf00      	nop
 801a1ea:	370c      	adds	r7, #12
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd90      	pop	{r4, r7, pc}
 801a1f0:	08030c68 	.word	0x08030c68
 801a1f4:	080347e8 	.word	0x080347e8
 801a1f8:	08030c50 	.word	0x08030c50
 801a1fc:	200016a0 	.word	0x200016a0

0801a200 <settings_read_coord_data>:

// Read selected coordinate data from persistent storage.
bool settings_read_coord_data (coord_system_id_t id, float (*coord_data)[N_AXIS])
{
 801a200:	b590      	push	{r4, r7, lr}
 801a202:	b083      	sub	sp, #12
 801a204:	af00      	add	r7, sp, #0
 801a206:	4603      	mov	r3, r0
 801a208:	6039      	str	r1, [r7, #0]
 801a20a:	71fb      	strb	r3, [r7, #7]
    assert(id <= N_CoordinateSystems);
 801a20c:	79fb      	ldrb	r3, [r7, #7]
 801a20e:	2b0c      	cmp	r3, #12
 801a210:	d906      	bls.n	801a220 <settings_read_coord_data+0x20>
 801a212:	4b17      	ldr	r3, [pc, #92]	; (801a270 <settings_read_coord_data+0x70>)
 801a214:	4a17      	ldr	r2, [pc, #92]	; (801a274 <settings_read_coord_data+0x74>)
 801a216:	f240 71dd 	movw	r1, #2013	; 0x7dd
 801a21a:	4817      	ldr	r0, [pc, #92]	; (801a278 <settings_read_coord_data+0x78>)
 801a21c:	f00b fa70 	bl	8025700 <__assert_func>

    if (!(hal.nvs.type != NVS_None && hal.nvs.memcpy_from_nvs((uint8_t *)coord_data, NVS_ADDR_PARAMETERS + id * (sizeof(coord_data_t) + NVS_CRC_BYTES), sizeof(coord_data_t), true) == NVS_TransferResult_OK)) {
 801a220:	4b16      	ldr	r3, [pc, #88]	; (801a27c <settings_read_coord_data+0x7c>)
 801a222:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801a226:	2b00      	cmp	r3, #0
 801a228:	d011      	beq.n	801a24e <settings_read_coord_data+0x4e>
 801a22a:	4b14      	ldr	r3, [pc, #80]	; (801a27c <settings_read_coord_data+0x7c>)
 801a22c:	f8d3 4164 	ldr.w	r4, [r3, #356]	; 0x164
 801a230:	79fa      	ldrb	r2, [r7, #7]
 801a232:	4613      	mov	r3, r2
 801a234:	005b      	lsls	r3, r3, #1
 801a236:	4413      	add	r3, r2
 801a238:	009b      	lsls	r3, r3, #2
 801a23a:	4413      	add	r3, r2
 801a23c:	f503 7100 	add.w	r1, r3, #512	; 0x200
 801a240:	2301      	movs	r3, #1
 801a242:	220c      	movs	r2, #12
 801a244:	6838      	ldr	r0, [r7, #0]
 801a246:	47a0      	blx	r4
 801a248:	4603      	mov	r3, r0
 801a24a:	2b02      	cmp	r3, #2
 801a24c:	d00b      	beq.n	801a266 <settings_read_coord_data+0x66>
        // Reset with default zero vector
        memset(coord_data, 0, sizeof(coord_data_t));
 801a24e:	220c      	movs	r2, #12
 801a250:	2100      	movs	r1, #0
 801a252:	6838      	ldr	r0, [r7, #0]
 801a254:	f00b fdf3 	bl	8025e3e <memset>
        settings_write_coord_data(id, coord_data);
 801a258:	79fb      	ldrb	r3, [r7, #7]
 801a25a:	6839      	ldr	r1, [r7, #0]
 801a25c:	4618      	mov	r0, r3
 801a25e:	f7ff ff9f 	bl	801a1a0 <settings_write_coord_data>
        return false;
 801a262:	2300      	movs	r3, #0
 801a264:	e000      	b.n	801a268 <settings_read_coord_data+0x68>
    }
    return true;
 801a266:	2301      	movs	r3, #1
}
 801a268:	4618      	mov	r0, r3
 801a26a:	370c      	adds	r7, #12
 801a26c:	46bd      	mov	sp, r7
 801a26e:	bd90      	pop	{r4, r7, pc}
 801a270:	08030c68 	.word	0x08030c68
 801a274:	08034804 	.word	0x08034804
 801a278:	08030c50 	.word	0x08030c50
 801a27c:	200016a0 	.word	0x200016a0

0801a280 <read_global_settings>:
}

// Read global settings from persistent storage.
// Checks version-byte of non-volatile storage and global settings copy.
bool read_global_settings ()
{
 801a280:	b590      	push	{r4, r7, lr}
 801a282:	b083      	sub	sp, #12
 801a284:	af00      	add	r7, sp, #0
    bool ok = hal.nvs.type != NVS_None && SETTINGS_VERSION == hal.nvs.get_byte(0) && hal.nvs.memcpy_from_nvs((uint8_t *)&settings, NVS_ADDR_GLOBAL, sizeof(settings_t), true) == NVS_TransferResult_OK;
 801a286:	4b3b      	ldr	r3, [pc, #236]	; (801a374 <read_global_settings+0xf4>)
 801a288:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d015      	beq.n	801a2bc <read_global_settings+0x3c>
 801a290:	4b38      	ldr	r3, [pc, #224]	; (801a374 <read_global_settings+0xf4>)
 801a292:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 801a296:	2000      	movs	r0, #0
 801a298:	4798      	blx	r3
 801a29a:	4603      	mov	r3, r0
 801a29c:	2b16      	cmp	r3, #22
 801a29e:	d10d      	bne.n	801a2bc <read_global_settings+0x3c>
 801a2a0:	4b34      	ldr	r3, [pc, #208]	; (801a374 <read_global_settings+0xf4>)
 801a2a2:	f8d3 4164 	ldr.w	r4, [r3, #356]	; 0x164
 801a2a6:	2301      	movs	r3, #1
 801a2a8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801a2ac:	2101      	movs	r1, #1
 801a2ae:	4832      	ldr	r0, [pc, #200]	; (801a378 <read_global_settings+0xf8>)
 801a2b0:	47a0      	blx	r4
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	2b02      	cmp	r3, #2
 801a2b6:	d101      	bne.n	801a2bc <read_global_settings+0x3c>
 801a2b8:	2301      	movs	r3, #1
 801a2ba:	e000      	b.n	801a2be <read_global_settings+0x3e>
 801a2bc:	2300      	movs	r3, #0
 801a2be:	71fb      	strb	r3, [r7, #7]
 801a2c0:	79fb      	ldrb	r3, [r7, #7]
 801a2c2:	f003 0301 	and.w	r3, r3, #1
 801a2c6:	71fb      	strb	r3, [r7, #7]

    // Sanity check of settings, board map could have been changed...
    if(settings.mode == Mode_Laser && !spindle_get_caps(false).laser)
 801a2c8:	4b2b      	ldr	r3, [pc, #172]	; (801a378 <read_global_settings+0xf8>)
 801a2ca:	7e1b      	ldrb	r3, [r3, #24]
 801a2cc:	2b01      	cmp	r3, #1
 801a2ce:	d10c      	bne.n	801a2ea <read_global_settings+0x6a>
 801a2d0:	2000      	movs	r0, #0
 801a2d2:	f001 fcef 	bl	801bcb4 <spindle_get_caps>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	b2db      	uxtb	r3, r3
 801a2da:	f003 0308 	and.w	r3, r3, #8
 801a2de:	b2db      	uxtb	r3, r3
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d102      	bne.n	801a2ea <read_global_settings+0x6a>
        settings.mode = Mode_Standard;
 801a2e4:	4b24      	ldr	r3, [pc, #144]	; (801a378 <read_global_settings+0xf8>)
 801a2e6:	2200      	movs	r2, #0
 801a2e8:	761a      	strb	r2, [r3, #24]

    if(settings.spindle.flags.type >= spindle_get_count())
 801a2ea:	4b23      	ldr	r3, [pc, #140]	; (801a378 <read_global_settings+0xf8>)
 801a2ec:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
 801a2f0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 801a2f4:	b2db      	uxtb	r3, r3
 801a2f6:	461c      	mov	r4, r3
 801a2f8:	f001 fd96 	bl	801be28 <spindle_get_count>
 801a2fc:	4603      	mov	r3, r0
 801a2fe:	429c      	cmp	r4, r3
 801a300:	db06      	blt.n	801a310 <read_global_settings+0x90>
        settings.spindle.flags.type = 0;
 801a302:	4a1d      	ldr	r2, [pc, #116]	; (801a378 <read_global_settings+0xf8>)
 801a304:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
 801a308:	f36f 0386 	bfc	r3, #2, #5
 801a30c:	f882 30e7 	strb.w	r3, [r2, #231]	; 0xe7

    if(settings.planner_buffer_blocks < 30 || settings.planner_buffer_blocks > 1000)
 801a310:	4b19      	ldr	r3, [pc, #100]	; (801a378 <read_global_settings+0xf8>)
 801a312:	8adb      	ldrh	r3, [r3, #22]
 801a314:	2b1d      	cmp	r3, #29
 801a316:	d904      	bls.n	801a322 <read_global_settings+0xa2>
 801a318:	4b17      	ldr	r3, [pc, #92]	; (801a378 <read_global_settings+0xf8>)
 801a31a:	8adb      	ldrh	r3, [r3, #22]
 801a31c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a320:	d902      	bls.n	801a328 <read_global_settings+0xa8>
        settings.planner_buffer_blocks = 35;
 801a322:	4b15      	ldr	r3, [pc, #84]	; (801a378 <read_global_settings+0xf8>)
 801a324:	2223      	movs	r2, #35	; 0x23
 801a326:	82da      	strh	r2, [r3, #22]

    if(!(hal.driver_cap.spindle_sync || hal.driver_cap.spindle_pid))
 801a328:	4b12      	ldr	r3, [pc, #72]	; (801a374 <read_global_settings+0xf4>)
 801a32a:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 801a32e:	f003 0301 	and.w	r3, r3, #1
 801a332:	b2db      	uxtb	r3, r3
 801a334:	2b00      	cmp	r3, #0
 801a336:	d10b      	bne.n	801a350 <read_global_settings+0xd0>
 801a338:	4b0e      	ldr	r3, [pc, #56]	; (801a374 <read_global_settings+0xf4>)
 801a33a:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 801a33e:	f003 0320 	and.w	r3, r3, #32
 801a342:	b2db      	uxtb	r3, r3
 801a344:	2b00      	cmp	r3, #0
 801a346:	d103      	bne.n	801a350 <read_global_settings+0xd0>
        settings.spindle.ppr = 0;
 801a348:	4b0b      	ldr	r3, [pc, #44]	; (801a378 <read_global_settings+0xf8>)
 801a34a:	2200      	movs	r2, #0
 801a34c:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
#if COMPATIBILITY_LEVEL > 2
    if(settings.steppers.enable_invert.mask)
        settings.steppers.enable_invert.mask = AXES_BITMASK;
#endif

    return ok && settings.version == SETTINGS_VERSION;
 801a350:	79fb      	ldrb	r3, [r7, #7]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d005      	beq.n	801a362 <read_global_settings+0xe2>
 801a356:	4b08      	ldr	r3, [pc, #32]	; (801a378 <read_global_settings+0xf8>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	2b16      	cmp	r3, #22
 801a35c:	d101      	bne.n	801a362 <read_global_settings+0xe2>
 801a35e:	2301      	movs	r3, #1
 801a360:	e000      	b.n	801a364 <read_global_settings+0xe4>
 801a362:	2300      	movs	r3, #0
 801a364:	f003 0301 	and.w	r3, r3, #1
 801a368:	b2db      	uxtb	r3, r3
}
 801a36a:	4618      	mov	r0, r3
 801a36c:	370c      	adds	r7, #12
 801a36e:	46bd      	mov	sp, r7
 801a370:	bd90      	pop	{r4, r7, pc}
 801a372:	bf00      	nop
 801a374:	200016a0 	.word	0x200016a0
 801a378:	20001cf0 	.word	0x20001cf0

0801a37c <settings_write_global>:


// Write global settings to persistent storage
void settings_write_global (void)
{
 801a37c:	b598      	push	{r3, r4, r7, lr}
 801a37e:	af00      	add	r7, sp, #0
    if(override_backup.valid)
 801a380:	4b0e      	ldr	r3, [pc, #56]	; (801a3bc <settings_write_global+0x40>)
 801a382:	781b      	ldrb	r3, [r3, #0]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d001      	beq.n	801a38c <settings_write_global+0x10>
        restore_override_backup();
 801a388:	f7fd fffa 	bl	8018380 <restore_override_backup>

    settings.flags.compatibility_level = COMPATIBILITY_LEVEL;
 801a38c:	4a0c      	ldr	r2, [pc, #48]	; (801a3c0 <settings_write_global+0x44>)
 801a38e:	f892 30ff 	ldrb.w	r3, [r2, #255]	; 0xff
 801a392:	f36f 0385 	bfc	r3, #2, #4
 801a396:	f882 30ff 	strb.w	r3, [r2, #255]	; 0xff

    if(hal.nvs.type != NVS_None)
 801a39a:	4b0a      	ldr	r3, [pc, #40]	; (801a3c4 <settings_write_global+0x48>)
 801a39c:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d008      	beq.n	801a3b6 <settings_write_global+0x3a>
        hal.nvs.memcpy_to_nvs(NVS_ADDR_GLOBAL, (uint8_t *)&settings, sizeof(settings_t), true);
 801a3a4:	4b07      	ldr	r3, [pc, #28]	; (801a3c4 <settings_write_global+0x48>)
 801a3a6:	f8d3 4160 	ldr.w	r4, [r3, #352]	; 0x160
 801a3aa:	2301      	movs	r3, #1
 801a3ac:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801a3b0:	4903      	ldr	r1, [pc, #12]	; (801a3c0 <settings_write_global+0x44>)
 801a3b2:	2001      	movs	r0, #1
 801a3b4:	47a0      	blx	r4
}
 801a3b6:	bf00      	nop
 801a3b8:	bd98      	pop	{r3, r4, r7, pc}
 801a3ba:	bf00      	nop
 801a3bc:	20001ec4 	.word	0x20001ec4
 801a3c0:	20001cf0 	.word	0x20001cf0
 801a3c4:	200016a0 	.word	0x200016a0

0801a3c8 <settings_restore>:


// Restore global settings to defaults and write to persistent storage
void settings_restore (settings_restore_t restore)
{
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b09a      	sub	sp, #104	; 0x68
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	7138      	strb	r0, [r7, #4]
    uint_fast8_t idx;
    stored_line_t empty_line;

    memset(empty_line, 0xFF, sizeof(stored_line_t));
 801a3d0:	f107 0318 	add.w	r3, r7, #24
 801a3d4:	2246      	movs	r2, #70	; 0x46
 801a3d6:	21ff      	movs	r1, #255	; 0xff
 801a3d8:	4618      	mov	r0, r3
 801a3da:	f00b fd30 	bl	8025e3e <memset>
    *empty_line = '\0';
 801a3de:	2300      	movs	r3, #0
 801a3e0:	763b      	strb	r3, [r7, #24]

    hal.nvs.put_byte(0, SETTINGS_VERSION); // Forces write to physical storage
 801a3e2:	4b5d      	ldr	r3, [pc, #372]	; (801a558 <settings_restore+0x190>)
 801a3e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 801a3e8:	2116      	movs	r1, #22
 801a3ea:	2000      	movs	r0, #0
 801a3ec:	4798      	blx	r3

    if (restore.defaults) {
 801a3ee:	793b      	ldrb	r3, [r7, #4]
 801a3f0:	f003 0301 	and.w	r3, r3, #1
 801a3f4:	b2db      	uxtb	r3, r3
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d04b      	beq.n	801a492 <settings_restore+0xca>

        memcpy(&settings, &defaults, sizeof(settings_t));
 801a3fa:	4a58      	ldr	r2, [pc, #352]	; (801a55c <settings_restore+0x194>)
 801a3fc:	4b58      	ldr	r3, [pc, #352]	; (801a560 <settings_restore+0x198>)
 801a3fe:	4610      	mov	r0, r2
 801a400:	4619      	mov	r1, r3
 801a402:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801a406:	461a      	mov	r2, r3
 801a408:	f00b fe76 	bl	80260f8 <memcpy>

        settings.control_invert.mask &= hal.signals_cap.mask;
 801a40c:	4b53      	ldr	r3, [pc, #332]	; (801a55c <settings_restore+0x194>)
 801a40e:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 801a412:	4b51      	ldr	r3, [pc, #324]	; (801a558 <settings_restore+0x190>)
 801a414:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 801a418:	4013      	ands	r3, r2
 801a41a:	b29a      	uxth	r2, r3
 801a41c:	4b4f      	ldr	r3, [pc, #316]	; (801a55c <settings_restore+0x194>)
 801a41e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        settings.spindle.invert.ccw &= spindle_get_caps(false).direction;
 801a422:	2000      	movs	r0, #0
 801a424:	f001 fc46 	bl	801bcb4 <spindle_get_caps>
 801a428:	4603      	mov	r3, r0
 801a42a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a42e:	b2d9      	uxtb	r1, r3
 801a430:	4b4a      	ldr	r3, [pc, #296]	; (801a55c <settings_restore+0x194>)
 801a432:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 801a436:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a43a:	b2db      	uxtb	r3, r3
 801a43c:	461a      	mov	r2, r3
 801a43e:	460b      	mov	r3, r1
 801a440:	4013      	ands	r3, r2
 801a442:	b2db      	uxtb	r3, r3
 801a444:	f003 0301 	and.w	r3, r3, #1
 801a448:	b2d9      	uxtb	r1, r3
 801a44a:	4a44      	ldr	r2, [pc, #272]	; (801a55c <settings_restore+0x194>)
 801a44c:	f892 30e6 	ldrb.w	r3, [r2, #230]	; 0xe6
 801a450:	f361 0341 	bfi	r3, r1, #1, #1
 801a454:	f882 30e6 	strb.w	r3, [r2, #230]	; 0xe6
        settings.spindle.invert.pwm &= spindle_get_caps(false).pwm_invert;
 801a458:	2000      	movs	r0, #0
 801a45a:	f001 fc2b 	bl	801bcb4 <spindle_get_caps>
 801a45e:	4603      	mov	r3, r0
 801a460:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a464:	b2d9      	uxtb	r1, r3
 801a466:	4b3d      	ldr	r3, [pc, #244]	; (801a55c <settings_restore+0x194>)
 801a468:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 801a46c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a470:	b2db      	uxtb	r3, r3
 801a472:	461a      	mov	r2, r3
 801a474:	460b      	mov	r3, r1
 801a476:	4013      	ands	r3, r2
 801a478:	b2db      	uxtb	r3, r3
 801a47a:	f003 0301 	and.w	r3, r3, #1
 801a47e:	b2d9      	uxtb	r1, r3
 801a480:	4a36      	ldr	r2, [pc, #216]	; (801a55c <settings_restore+0x194>)
 801a482:	f892 30e6 	ldrb.w	r3, [r2, #230]	; 0xe6
 801a486:	f361 0382 	bfi	r3, r1, #2, #1
 801a48a:	f882 30e6 	strb.w	r3, [r2, #230]	; 0xe6
#if ENABLE_BACKLASH_COMPENSATION
        if(sys.driver_started)
            mc_backlash_init((axes_signals_t){AXES_BITMASK});
#endif
        settings_write_global();
 801a48e:	f7ff ff75 	bl	801a37c <settings_write_global>
    }

    if (restore.parameters) {
 801a492:	793b      	ldrb	r3, [r7, #4]
 801a494:	f003 0302 	and.w	r3, r3, #2
 801a498:	b2db      	uxtb	r3, r3
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d01d      	beq.n	801a4da <settings_restore+0x112>
        float coord_data[N_AXIS];

        memset(coord_data, 0, sizeof(coord_data));
 801a49e:	f107 030c 	add.w	r3, r7, #12
 801a4a2:	220c      	movs	r2, #12
 801a4a4:	2100      	movs	r1, #0
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	f00b fcc9 	bl	8025e3e <memset>
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	667b      	str	r3, [r7, #100]	; 0x64
 801a4b0:	e00a      	b.n	801a4c8 <settings_restore+0x100>
            settings_write_coord_data((coord_system_id_t)idx, &coord_data);
 801a4b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a4b4:	b2db      	uxtb	r3, r3
 801a4b6:	f107 020c 	add.w	r2, r7, #12
 801a4ba:	4611      	mov	r1, r2
 801a4bc:	4618      	mov	r0, r3
 801a4be:	f7ff fe6f 	bl	801a1a0 <settings_write_coord_data>
        for (idx = 0; idx <= N_WorkCoordinateSystems; idx++)
 801a4c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a4c4:	3301      	adds	r3, #1
 801a4c6:	667b      	str	r3, [r7, #100]	; 0x64
 801a4c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a4ca:	2b09      	cmp	r3, #9
 801a4cc:	d9f1      	bls.n	801a4b2 <settings_restore+0xea>

        settings_write_coord_data(CoordinateSystem_G92, &coord_data); // Clear G92 offsets
 801a4ce:	f107 030c 	add.w	r3, r7, #12
 801a4d2:	4619      	mov	r1, r3
 801a4d4:	200b      	movs	r0, #11
 801a4d6:	f7ff fe63 	bl	801a1a0 <settings_write_coord_data>
            settings_write_tool_data(&tool_data);
        }
#endif
    }

    if (restore.startup_lines) {
 801a4da:	793b      	ldrb	r3, [r7, #4]
 801a4dc:	f003 0304 	and.w	r3, r3, #4
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d010      	beq.n	801a508 <settings_restore+0x140>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	667b      	str	r3, [r7, #100]	; 0x64
 801a4ea:	e00a      	b.n	801a502 <settings_restore+0x13a>
            settings_write_startup_line(idx, empty_line);
 801a4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a4ee:	b2db      	uxtb	r3, r3
 801a4f0:	f107 0218 	add.w	r2, r7, #24
 801a4f4:	4611      	mov	r1, r2
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f7ff fde4 	bl	801a0c4 <settings_write_startup_line>
        for (idx = 0; idx < N_STARTUP_LINE; idx++)
 801a4fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a4fe:	3301      	adds	r3, #1
 801a500:	667b      	str	r3, [r7, #100]	; 0x64
 801a502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a504:	2b01      	cmp	r3, #1
 801a506:	d9f1      	bls.n	801a4ec <settings_restore+0x124>
    }

    if (restore.build_info) {
 801a508:	793b      	ldrb	r3, [r7, #4]
 801a50a:	f003 0308 	and.w	r3, r3, #8
 801a50e:	b2db      	uxtb	r3, r3
 801a510:	2b00      	cmp	r3, #0
 801a512:	d007      	beq.n	801a524 <settings_restore+0x15c>
        settings_write_build_info(empty_line);
 801a514:	f107 0318 	add.w	r3, r7, #24
 801a518:	4618      	mov	r0, r3
 801a51a:	f7ff fd97 	bl	801a04c <settings_write_build_info>
        settings_write_build_info(BUILD_INFO);
 801a51e:	4811      	ldr	r0, [pc, #68]	; (801a564 <settings_restore+0x19c>)
 801a520:	f7ff fd94 	bl	801a04c <settings_write_build_info>
    }

    setting_details_t *details = setting_details.next;
 801a524:	4b10      	ldr	r3, [pc, #64]	; (801a568 <settings_restore+0x1a0>)
 801a526:	699b      	ldr	r3, [r3, #24]
 801a528:	663b      	str	r3, [r7, #96]	; 0x60

    if(details) do {
 801a52a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d00c      	beq.n	801a54a <settings_restore+0x182>
        if(details->restore)
 801a530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a534:	2b00      	cmp	r3, #0
 801a536:	d002      	beq.n	801a53e <settings_restore+0x176>
            details->restore();
 801a538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a53c:	4798      	blx	r3
    } while((details = details->next));
 801a53e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a540:	699b      	ldr	r3, [r3, #24]
 801a542:	663b      	str	r3, [r7, #96]	; 0x60
 801a544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a546:	2b00      	cmp	r3, #0
 801a548:	d1f2      	bne.n	801a530 <settings_restore+0x168>

    nvs_buffer_sync_physical();
 801a54a:	f7f6 fabd 	bl	8010ac8 <nvs_buffer_sync_physical>
}
 801a54e:	bf00      	nop
 801a550:	3768      	adds	r7, #104	; 0x68
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	200016a0 	.word	0x200016a0
 801a55c:	20001cf0 	.word	0x20001cf0
 801a560:	08033180 	.word	0x08033180
 801a564:	0803031c 	.word	0x0803031c
 801a568:	200004c8 	.word	0x200004c8

0801a56c <is_available>:

inline static bool is_available (const setting_detail_t *setting)
{
 801a56c:	b580      	push	{r7, lr}
 801a56e:	b082      	sub	sp, #8
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
    return setting->is_available == NULL || setting->is_available(setting);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d006      	beq.n	801a58a <is_available+0x1e>
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a580:	6878      	ldr	r0, [r7, #4]
 801a582:	4798      	blx	r3
 801a584:	4603      	mov	r3, r0
 801a586:	2b00      	cmp	r3, #0
 801a588:	d001      	beq.n	801a58e <is_available+0x22>
 801a58a:	2301      	movs	r3, #1
 801a58c:	e000      	b.n	801a590 <is_available+0x24>
 801a58e:	2300      	movs	r3, #0
 801a590:	f003 0301 	and.w	r3, r3, #1
 801a594:	b2db      	uxtb	r3, r3
}
 801a596:	4618      	mov	r0, r3
 801a598:	3708      	adds	r7, #8
 801a59a:	46bd      	mov	sp, r7
 801a59c:	bd80      	pop	{r7, pc}

0801a59e <is_group_available>:

static bool is_group_available (const setting_detail_t *setting)
{
 801a59e:	b580      	push	{r7, lr}
 801a5a0:	b082      	sub	sp, #8
 801a5a2:	af00      	add	r7, sp, #0
 801a5a4:	6078      	str	r0, [r7, #4]
    return settings_is_group_available(setting->group);
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	789b      	ldrb	r3, [r3, #2]
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	f000 f806 	bl	801a5bc <settings_is_group_available>
 801a5b0:	4603      	mov	r3, r0
}
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	3708      	adds	r7, #8
 801a5b6:	46bd      	mov	sp, r7
 801a5b8:	bd80      	pop	{r7, pc}
	...

0801a5bc <settings_is_group_available>:

bool settings_is_group_available (setting_group_t id)
{
 801a5bc:	b580      	push	{r7, lr}
 801a5be:	b086      	sub	sp, #24
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	71fb      	strb	r3, [r7, #7]
    const setting_group_detail_t *group = setting_get_group_details(id);
 801a5c6:	79fb      	ldrb	r3, [r7, #7]
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f000 fa2d 	bl	801aa28 <setting_get_group_details>
 801a5ce:	60b8      	str	r0, [r7, #8]

    if(!group)
 801a5d0:	68bb      	ldr	r3, [r7, #8]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d101      	bne.n	801a5da <settings_is_group_available+0x1e>
        return false;
 801a5d6:	2300      	movs	r3, #0
 801a5d8:	e0b1      	b.n	801a73e <settings_is_group_available+0x182>

    bool available = group->is_available ? group->is_available(group) : false;
 801a5da:	68bb      	ldr	r3, [r7, #8]
 801a5dc:	689b      	ldr	r3, [r3, #8]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d008      	beq.n	801a5f4 <settings_is_group_available+0x38>
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	689b      	ldr	r3, [r3, #8]
 801a5e6:	68b8      	ldr	r0, [r7, #8]
 801a5e8:	4798      	blx	r3
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d001      	beq.n	801a5f4 <settings_is_group_available+0x38>
 801a5f0:	2301      	movs	r3, #1
 801a5f2:	e000      	b.n	801a5f6 <settings_is_group_available+0x3a>
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	75fb      	strb	r3, [r7, #23]

    if(!available) switch(group->id) {
 801a5f8:	7dfb      	ldrb	r3, [r7, #23]
 801a5fa:	f083 0301 	eor.w	r3, r3, #1
 801a5fe:	b2db      	uxtb	r3, r3
 801a600:	2b00      	cmp	r3, #0
 801a602:	f000 809b 	beq.w	801a73c <settings_is_group_available+0x180>
 801a606:	68bb      	ldr	r3, [r7, #8]
 801a608:	785b      	ldrb	r3, [r3, #1]
 801a60a:	3b02      	subs	r3, #2
 801a60c:	2b0c      	cmp	r3, #12
 801a60e:	d858      	bhi.n	801a6c2 <settings_is_group_available+0x106>
 801a610:	a201      	add	r2, pc, #4	; (adr r2, 801a618 <settings_is_group_available+0x5c>)
 801a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a616:	bf00      	nop
 801a618:	0801a6bd 	.word	0x0801a6bd
 801a61c:	0801a6bd 	.word	0x0801a6bd
 801a620:	0801a68f 	.word	0x0801a68f
 801a624:	0801a6c3 	.word	0x0801a6c3
 801a628:	0801a6bd 	.word	0x0801a6bd
 801a62c:	0801a65f 	.word	0x0801a65f
 801a630:	0801a677 	.word	0x0801a677
 801a634:	0801a6c3 	.word	0x0801a6c3
 801a638:	0801a6c3 	.word	0x0801a6c3
 801a63c:	0801a6bd 	.word	0x0801a6bd
 801a640:	0801a64d 	.word	0x0801a64d
 801a644:	0801a6c3 	.word	0x0801a6c3
 801a648:	0801a6bd 	.word	0x0801a6bd

        case Group_Probing:
            available = hal.probe.get_state != NULL;
 801a64c:	4b3e      	ldr	r3, [pc, #248]	; (801a748 <settings_is_group_available+0x18c>)
 801a64e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801a652:	2b00      	cmp	r3, #0
 801a654:	bf14      	ite	ne
 801a656:	2301      	movne	r3, #1
 801a658:	2300      	moveq	r3, #0
 801a65a:	75fb      	strb	r3, [r7, #23]
            break;
 801a65c:	e06e      	b.n	801a73c <settings_is_group_available+0x180>

        case Group_Spindle_Sync:
            available = hal.driver_cap.spindle_sync;
 801a65e:	4b3a      	ldr	r3, [pc, #232]	; (801a748 <settings_is_group_available+0x18c>)
 801a660:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 801a664:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a668:	b2db      	uxtb	r3, r3
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	bf14      	ite	ne
 801a66e:	2301      	movne	r3, #1
 801a670:	2300      	moveq	r3, #0
 801a672:	75fb      	strb	r3, [r7, #23]
            break;
 801a674:	e062      	b.n	801a73c <settings_is_group_available+0x180>

        case Group_Spindle_ClosedLoop:
            available = hal.driver_cap.spindle_pid;
 801a676:	4b34      	ldr	r3, [pc, #208]	; (801a748 <settings_is_group_available+0x18c>)
 801a678:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 801a67c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a680:	b2db      	uxtb	r3, r3
 801a682:	2b00      	cmp	r3, #0
 801a684:	bf14      	ite	ne
 801a686:	2301      	movne	r3, #1
 801a688:	2300      	moveq	r3, #0
 801a68a:	75fb      	strb	r3, [r7, #23]
            break;
 801a68c:	e056      	b.n	801a73c <settings_is_group_available+0x180>

        case Group_Limits_DualAxis:
            available = hal.stepper.get_ganged && hal.stepper.get_ganged(true).mask != 0;
 801a68e:	4b2e      	ldr	r3, [pc, #184]	; (801a748 <settings_is_group_available+0x18c>)
 801a690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a694:	2b00      	cmp	r3, #0
 801a696:	d00a      	beq.n	801a6ae <settings_is_group_available+0xf2>
 801a698:	4b2b      	ldr	r3, [pc, #172]	; (801a748 <settings_is_group_available+0x18c>)
 801a69a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a69e:	2001      	movs	r0, #1
 801a6a0:	4798      	blx	r3
 801a6a2:	4603      	mov	r3, r0
 801a6a4:	b2db      	uxtb	r3, r3
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d001      	beq.n	801a6ae <settings_is_group_available+0xf2>
 801a6aa:	2301      	movs	r3, #1
 801a6ac:	e000      	b.n	801a6b0 <settings_is_group_available+0xf4>
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	75fb      	strb	r3, [r7, #23]
 801a6b2:	7dfb      	ldrb	r3, [r7, #23]
 801a6b4:	f003 0301 	and.w	r3, r3, #1
 801a6b8:	75fb      	strb	r3, [r7, #23]
            break;
 801a6ba:	e03f      	b.n	801a73c <settings_is_group_available+0x180>
        case Group_Homing:
        case Group_Jogging:
        case Group_Limits:
        case Group_ControlSignals:
        case Group_Spindle:
            available = true;
 801a6bc:	2301      	movs	r3, #1
 801a6be:	75fb      	strb	r3, [r7, #23]
            break;
 801a6c0:	e03c      	b.n	801a73c <settings_is_group_available+0x180>

        default:
            {
                uint_fast16_t idx;
                setting_details_t *details = &setting_details;
 801a6c2:	4b22      	ldr	r3, [pc, #136]	; (801a74c <settings_is_group_available+0x190>)
 801a6c4:	60fb      	str	r3, [r7, #12]

                do {
                    if(details->settings) {
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	68db      	ldr	r3, [r3, #12]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d029      	beq.n	801a722 <settings_is_group_available+0x166>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	613b      	str	r3, [r7, #16]
 801a6d2:	e01e      	b.n	801a712 <settings_is_group_available+0x156>
                            if(details->settings[idx].group == id && (available = is_available(&details->settings[idx])))
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	68d9      	ldr	r1, [r3, #12]
 801a6d8:	693a      	ldr	r2, [r7, #16]
 801a6da:	4613      	mov	r3, r2
 801a6dc:	005b      	lsls	r3, r3, #1
 801a6de:	4413      	add	r3, r2
 801a6e0:	011b      	lsls	r3, r3, #4
 801a6e2:	440b      	add	r3, r1
 801a6e4:	789b      	ldrb	r3, [r3, #2]
 801a6e6:	79fa      	ldrb	r2, [r7, #7]
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d10f      	bne.n	801a70c <settings_is_group_available+0x150>
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	68d9      	ldr	r1, [r3, #12]
 801a6f0:	693a      	ldr	r2, [r7, #16]
 801a6f2:	4613      	mov	r3, r2
 801a6f4:	005b      	lsls	r3, r3, #1
 801a6f6:	4413      	add	r3, r2
 801a6f8:	011b      	lsls	r3, r3, #4
 801a6fa:	440b      	add	r3, r1
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f7ff ff35 	bl	801a56c <is_available>
 801a702:	4603      	mov	r3, r0
 801a704:	75fb      	strb	r3, [r7, #23]
 801a706:	7dfb      	ldrb	r3, [r7, #23]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d109      	bne.n	801a720 <settings_is_group_available+0x164>
                        for(idx = 0; idx < details->n_settings; idx++) {
 801a70c:	693b      	ldr	r3, [r7, #16]
 801a70e:	3301      	adds	r3, #1
 801a710:	613b      	str	r3, [r7, #16]
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	891b      	ldrh	r3, [r3, #8]
 801a716:	461a      	mov	r2, r3
 801a718:	693b      	ldr	r3, [r7, #16]
 801a71a:	4293      	cmp	r3, r2
 801a71c:	d3da      	bcc.n	801a6d4 <settings_is_group_available+0x118>
 801a71e:	e000      	b.n	801a722 <settings_is_group_available+0x166>
                                break;
 801a720:	bf00      	nop
                        }
                    }
                } while(!available && (details = details->next));
 801a722:	7dfb      	ldrb	r3, [r7, #23]
 801a724:	f083 0301 	eor.w	r3, r3, #1
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d005      	beq.n	801a73a <settings_is_group_available+0x17e>
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	699b      	ldr	r3, [r3, #24]
 801a732:	60fb      	str	r3, [r7, #12]
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	2b00      	cmp	r3, #0
 801a738:	d1c5      	bne.n	801a6c6 <settings_is_group_available+0x10a>
            }
            break;
 801a73a:	bf00      	nop
    }

    return available;
 801a73c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a73e:	4618      	mov	r0, r3
 801a740:	3718      	adds	r7, #24
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}
 801a746:	bf00      	nop
 801a748:	200016a0 	.word	0x200016a0
 801a74c:	200004c8 	.word	0x200004c8

0801a750 <settings_normalize_group>:

setting_group_t settings_normalize_group (setting_group_t group)
{
 801a750:	b480      	push	{r7}
 801a752:	b083      	sub	sp, #12
 801a754:	af00      	add	r7, sp, #0
 801a756:	4603      	mov	r3, r0
 801a758:	71fb      	strb	r3, [r7, #7]
    return (group > Group_Axis0 && group < Group_Axis0 + N_AXIS) ? Group_Axis0 : group;
 801a75a:	79fb      	ldrb	r3, [r7, #7]
 801a75c:	2b2b      	cmp	r3, #43	; 0x2b
 801a75e:	d902      	bls.n	801a766 <settings_normalize_group+0x16>
 801a760:	79fb      	ldrb	r3, [r7, #7]
 801a762:	2b2d      	cmp	r3, #45	; 0x2d
 801a764:	d901      	bls.n	801a76a <settings_normalize_group+0x1a>
 801a766:	79fb      	ldrb	r3, [r7, #7]
 801a768:	e000      	b.n	801a76c <settings_normalize_group+0x1c>
 801a76a:	232b      	movs	r3, #43	; 0x2b
}
 801a76c:	4618      	mov	r0, r3
 801a76e:	370c      	adds	r7, #12
 801a770:	46bd      	mov	sp, r7
 801a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a776:	4770      	bx	lr

0801a778 <settings_iterator>:

bool settings_iterator (const setting_detail_t *setting, setting_output_ptr callback, void *data)
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	b088      	sub	sp, #32
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	60f8      	str	r0, [r7, #12]
 801a780:	60b9      	str	r1, [r7, #8]
 801a782:	607a      	str	r2, [r7, #4]
    bool ok = false;
 801a784:	2300      	movs	r3, #0
 801a786:	77fb      	strb	r3, [r7, #31]

    if(setting->group == Group_Axis0) {
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	789b      	ldrb	r3, [r3, #2]
 801a78c:	2b2b      	cmp	r3, #43	; 0x2b
 801a78e:	d127      	bne.n	801a7e0 <settings_iterator+0x68>

        uint_fast8_t axis_idx = 0;
 801a790:	2300      	movs	r3, #0
 801a792:	61bb      	str	r3, [r7, #24]

        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801a794:	2300      	movs	r3, #0
 801a796:	61bb      	str	r3, [r7, #24]
 801a798:	e01e      	b.n	801a7d8 <settings_iterator+0x60>

            if(grbl.on_set_axis_setting_unit)
 801a79a:	4b26      	ldr	r3, [pc, #152]	; (801a834 <settings_iterator+0xbc>)
 801a79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d00c      	beq.n	801a7be <settings_iterator+0x46>
                set_axis_unit(setting, grbl.on_set_axis_setting_unit(setting->id, axis_idx));
 801a7a4:	4b23      	ldr	r3, [pc, #140]	; (801a834 <settings_iterator+0xbc>)
 801a7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a7aa:	68fa      	ldr	r2, [r7, #12]
 801a7ac:	8812      	ldrh	r2, [r2, #0]
 801a7ae:	69b9      	ldr	r1, [r7, #24]
 801a7b0:	4610      	mov	r0, r2
 801a7b2:	4798      	blx	r3
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	4619      	mov	r1, r3
 801a7b8:	68f8      	ldr	r0, [r7, #12]
 801a7ba:	f7fe fb63 	bl	8018e84 <set_axis_unit>

            if(callback(setting, axis_idx, data))
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	687a      	ldr	r2, [r7, #4]
 801a7c2:	69b9      	ldr	r1, [r7, #24]
 801a7c4:	68f8      	ldr	r0, [r7, #12]
 801a7c6:	4798      	blx	r3
 801a7c8:	4603      	mov	r3, r0
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d001      	beq.n	801a7d2 <settings_iterator+0x5a>
                ok = true;
 801a7ce:	2301      	movs	r3, #1
 801a7d0:	77fb      	strb	r3, [r7, #31]
        for(axis_idx = 0; axis_idx < N_AXIS; axis_idx++) {
 801a7d2:	69bb      	ldr	r3, [r7, #24]
 801a7d4:	3301      	adds	r3, #1
 801a7d6:	61bb      	str	r3, [r7, #24]
 801a7d8:	69bb      	ldr	r3, [r7, #24]
 801a7da:	2b02      	cmp	r3, #2
 801a7dc:	d9dd      	bls.n	801a79a <settings_iterator+0x22>
 801a7de:	e024      	b.n	801a82a <settings_iterator+0xb2>
        }
    } else if(setting->flags.increment) {
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a7e6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 801a7ea:	b2db      	uxtb	r3, r3
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d015      	beq.n	801a81c <settings_iterator+0xa4>
        setting_details_t *set;
        setting = setting_get_details(setting->id, &set);
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	881b      	ldrh	r3, [r3, #0]
 801a7f4:	f107 0214 	add.w	r2, r7, #20
 801a7f8:	4611      	mov	r1, r2
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	f000 f81c 	bl	801a838 <setting_get_details>
 801a800:	60f8      	str	r0, [r7, #12]
        if(set->iterator)
 801a802:	697b      	ldr	r3, [r7, #20]
 801a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a806:	2b00      	cmp	r3, #0
 801a808:	d00f      	beq.n	801a82a <settings_iterator+0xb2>
            ok = set->iterator(setting, callback, data);
 801a80a:	697b      	ldr	r3, [r7, #20]
 801a80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a80e:	687a      	ldr	r2, [r7, #4]
 801a810:	68b9      	ldr	r1, [r7, #8]
 801a812:	68f8      	ldr	r0, [r7, #12]
 801a814:	4798      	blx	r3
 801a816:	4603      	mov	r3, r0
 801a818:	77fb      	strb	r3, [r7, #31]
 801a81a:	e006      	b.n	801a82a <settings_iterator+0xb2>
    } else
        ok = callback(setting, 0, data);
 801a81c:	68bb      	ldr	r3, [r7, #8]
 801a81e:	687a      	ldr	r2, [r7, #4]
 801a820:	2100      	movs	r1, #0
 801a822:	68f8      	ldr	r0, [r7, #12]
 801a824:	4798      	blx	r3
 801a826:	4603      	mov	r3, r0
 801a828:	77fb      	strb	r3, [r7, #31]

    return ok;
 801a82a:	7ffb      	ldrb	r3, [r7, #31]
}
 801a82c:	4618      	mov	r0, r3
 801a82e:	3720      	adds	r7, #32
 801a830:	46bd      	mov	sp, r7
 801a832:	bd80      	pop	{r7, pc}
 801a834:	200015b8 	.word	0x200015b8

0801a838 <setting_get_details>:

const setting_detail_t *setting_get_details (setting_id_t id, setting_details_t **set)
{
 801a838:	b5b0      	push	{r4, r5, r7, lr}
 801a83a:	b086      	sub	sp, #24
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	4603      	mov	r3, r0
 801a840:	6039      	str	r1, [r7, #0]
 801a842:	80fb      	strh	r3, [r7, #6]
    uint_fast16_t idx, offset = id - normalize_id(id);
 801a844:	88fc      	ldrh	r4, [r7, #6]
 801a846:	88fb      	ldrh	r3, [r7, #6]
 801a848:	4618      	mov	r0, r3
 801a84a:	f7fe fb2d 	bl	8018ea8 <normalize_id>
 801a84e:	4603      	mov	r3, r0
 801a850:	1ae3      	subs	r3, r4, r3
 801a852:	60fb      	str	r3, [r7, #12]
    setting_details_t *details = settings_get_details();
 801a854:	f7fd fdd0 	bl	80183f8 <settings_get_details>
 801a858:	6138      	str	r0, [r7, #16]

    id -= offset;
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	88fa      	ldrh	r2, [r7, #6]
 801a860:	1ad3      	subs	r3, r2, r3
 801a862:	80fb      	strh	r3, [r7, #6]

    do {
        for(idx = 0; idx < details->n_settings; idx++) {
 801a864:	2300      	movs	r3, #0
 801a866:	617b      	str	r3, [r7, #20]
 801a868:	e076      	b.n	801a958 <setting_get_details+0x120>
            if(details->settings[idx].id == id && is_available(&details->settings[idx])) {
 801a86a:	693b      	ldr	r3, [r7, #16]
 801a86c:	68d9      	ldr	r1, [r3, #12]
 801a86e:	697a      	ldr	r2, [r7, #20]
 801a870:	4613      	mov	r3, r2
 801a872:	005b      	lsls	r3, r3, #1
 801a874:	4413      	add	r3, r2
 801a876:	011b      	lsls	r3, r3, #4
 801a878:	440b      	add	r3, r1
 801a87a:	881b      	ldrh	r3, [r3, #0]
 801a87c:	88fa      	ldrh	r2, [r7, #6]
 801a87e:	429a      	cmp	r2, r3
 801a880:	d167      	bne.n	801a952 <setting_get_details+0x11a>
 801a882:	693b      	ldr	r3, [r7, #16]
 801a884:	68d9      	ldr	r1, [r3, #12]
 801a886:	697a      	ldr	r2, [r7, #20]
 801a888:	4613      	mov	r3, r2
 801a88a:	005b      	lsls	r3, r3, #1
 801a88c:	4413      	add	r3, r2
 801a88e:	011b      	lsls	r3, r3, #4
 801a890:	440b      	add	r3, r1
 801a892:	4618      	mov	r0, r3
 801a894:	f7ff fe6a 	bl	801a56c <is_available>
 801a898:	4603      	mov	r3, r0
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d059      	beq.n	801a952 <setting_get_details+0x11a>

                if(details->settings[idx].group == Group_Axis0 && grbl.on_set_axis_setting_unit)
 801a89e:	693b      	ldr	r3, [r7, #16]
 801a8a0:	68d9      	ldr	r1, [r3, #12]
 801a8a2:	697a      	ldr	r2, [r7, #20]
 801a8a4:	4613      	mov	r3, r2
 801a8a6:	005b      	lsls	r3, r3, #1
 801a8a8:	4413      	add	r3, r2
 801a8aa:	011b      	lsls	r3, r3, #4
 801a8ac:	440b      	add	r3, r1
 801a8ae:	789b      	ldrb	r3, [r3, #2]
 801a8b0:	2b2b      	cmp	r3, #43	; 0x2b
 801a8b2:	d120      	bne.n	801a8f6 <setting_get_details+0xbe>
 801a8b4:	4b31      	ldr	r3, [pc, #196]	; (801a97c <setting_get_details+0x144>)
 801a8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d01b      	beq.n	801a8f6 <setting_get_details+0xbe>
                    set_axis_unit(&details->settings[idx], grbl.on_set_axis_setting_unit(details->settings[idx].id, offset));
 801a8be:	693b      	ldr	r3, [r7, #16]
 801a8c0:	68d9      	ldr	r1, [r3, #12]
 801a8c2:	697a      	ldr	r2, [r7, #20]
 801a8c4:	4613      	mov	r3, r2
 801a8c6:	005b      	lsls	r3, r3, #1
 801a8c8:	4413      	add	r3, r2
 801a8ca:	011b      	lsls	r3, r3, #4
 801a8cc:	18cd      	adds	r5, r1, r3
 801a8ce:	4b2b      	ldr	r3, [pc, #172]	; (801a97c <setting_get_details+0x144>)
 801a8d0:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 801a8d4:	693b      	ldr	r3, [r7, #16]
 801a8d6:	68d9      	ldr	r1, [r3, #12]
 801a8d8:	697a      	ldr	r2, [r7, #20]
 801a8da:	4613      	mov	r3, r2
 801a8dc:	005b      	lsls	r3, r3, #1
 801a8de:	4413      	add	r3, r2
 801a8e0:	011b      	lsls	r3, r3, #4
 801a8e2:	440b      	add	r3, r1
 801a8e4:	881b      	ldrh	r3, [r3, #0]
 801a8e6:	68f9      	ldr	r1, [r7, #12]
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	47a0      	blx	r4
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	4619      	mov	r1, r3
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	f7fe fac7 	bl	8018e84 <set_axis_unit>

                if(offset && details->iterator == NULL && offset >= (details->settings[idx].group == Group_Encoder0 ? hal.encoder.get_n_encoders() : N_AXIS))
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d01b      	beq.n	801a934 <setting_get_details+0xfc>
 801a8fc:	693b      	ldr	r3, [r7, #16]
 801a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a900:	2b00      	cmp	r3, #0
 801a902:	d117      	bne.n	801a934 <setting_get_details+0xfc>
 801a904:	693b      	ldr	r3, [r7, #16]
 801a906:	68d9      	ldr	r1, [r3, #12]
 801a908:	697a      	ldr	r2, [r7, #20]
 801a90a:	4613      	mov	r3, r2
 801a90c:	005b      	lsls	r3, r3, #1
 801a90e:	4413      	add	r3, r2
 801a910:	011b      	lsls	r3, r3, #4
 801a912:	440b      	add	r3, r1
 801a914:	789b      	ldrb	r3, [r3, #2]
 801a916:	2b1d      	cmp	r3, #29
 801a918:	d106      	bne.n	801a928 <setting_get_details+0xf0>
 801a91a:	4b19      	ldr	r3, [pc, #100]	; (801a980 <setting_get_details+0x148>)
 801a91c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801a920:	4798      	blx	r3
 801a922:	4603      	mov	r3, r0
 801a924:	461a      	mov	r2, r3
 801a926:	e000      	b.n	801a92a <setting_get_details+0xf2>
 801a928:	2203      	movs	r2, #3
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	429a      	cmp	r2, r3
 801a92e:	d801      	bhi.n	801a934 <setting_get_details+0xfc>
                    return NULL;
 801a930:	2300      	movs	r3, #0
 801a932:	e01f      	b.n	801a974 <setting_get_details+0x13c>

                if(set)
 801a934:	683b      	ldr	r3, [r7, #0]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d002      	beq.n	801a940 <setting_get_details+0x108>
                    *set = details;
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	693a      	ldr	r2, [r7, #16]
 801a93e:	601a      	str	r2, [r3, #0]

                return &details->settings[idx];
 801a940:	693b      	ldr	r3, [r7, #16]
 801a942:	68d9      	ldr	r1, [r3, #12]
 801a944:	697a      	ldr	r2, [r7, #20]
 801a946:	4613      	mov	r3, r2
 801a948:	005b      	lsls	r3, r3, #1
 801a94a:	4413      	add	r3, r2
 801a94c:	011b      	lsls	r3, r3, #4
 801a94e:	440b      	add	r3, r1
 801a950:	e010      	b.n	801a974 <setting_get_details+0x13c>
        for(idx = 0; idx < details->n_settings; idx++) {
 801a952:	697b      	ldr	r3, [r7, #20]
 801a954:	3301      	adds	r3, #1
 801a956:	617b      	str	r3, [r7, #20]
 801a958:	693b      	ldr	r3, [r7, #16]
 801a95a:	891b      	ldrh	r3, [r3, #8]
 801a95c:	461a      	mov	r2, r3
 801a95e:	697b      	ldr	r3, [r7, #20]
 801a960:	4293      	cmp	r3, r2
 801a962:	d382      	bcc.n	801a86a <setting_get_details+0x32>
            }
        }
    } while((details = details->next));
 801a964:	693b      	ldr	r3, [r7, #16]
 801a966:	699b      	ldr	r3, [r3, #24]
 801a968:	613b      	str	r3, [r7, #16]
 801a96a:	693b      	ldr	r3, [r7, #16]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	f47f af79 	bne.w	801a864 <setting_get_details+0x2c>

    return NULL;
 801a972:	2300      	movs	r3, #0
}
 801a974:	4618      	mov	r0, r3
 801a976:	3718      	adds	r7, #24
 801a978:	46bd      	mov	sp, r7
 801a97a:	bdb0      	pop	{r4, r5, r7, pc}
 801a97c:	200015b8 	.word	0x200015b8
 801a980:	200016a0 	.word	0x200016a0

0801a984 <setting_get_description>:

const char *setting_get_description (setting_id_t id)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b086      	sub	sp, #24
 801a988:	af00      	add	r7, sp, #0
 801a98a:	4603      	mov	r3, r0
 801a98c:	80fb      	strh	r3, [r7, #6]
    const char *description = NULL;
 801a98e:	2300      	movs	r3, #0
 801a990:	617b      	str	r3, [r7, #20]

#ifndef NO_SETTINGS_DESCRIPTIONS

    if(grbl.on_setting_get_description == NULL || (description = grbl.on_setting_get_description(id)) == NULL) {
 801a992:	4b24      	ldr	r3, [pc, #144]	; (801aa24 <setting_get_description+0xa0>)
 801a994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a996:	2b00      	cmp	r3, #0
 801a998:	d008      	beq.n	801a9ac <setting_get_description+0x28>
 801a99a:	4b22      	ldr	r3, [pc, #136]	; (801aa24 <setting_get_description+0xa0>)
 801a99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a99e:	88fa      	ldrh	r2, [r7, #6]
 801a9a0:	4610      	mov	r0, r2
 801a9a2:	4798      	blx	r3
 801a9a4:	6178      	str	r0, [r7, #20]
 801a9a6:	697b      	ldr	r3, [r7, #20]
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d135      	bne.n	801aa18 <setting_get_description+0x94>

        uint_fast16_t idx;
        setting_details_t *settings = settings_get_details();
 801a9ac:	f7fd fd24 	bl	80183f8 <settings_get_details>
 801a9b0:	60f8      	str	r0, [r7, #12]
        const setting_detail_t *setting = setting_get_details(id, NULL);
 801a9b2:	88fb      	ldrh	r3, [r7, #6]
 801a9b4:	2100      	movs	r1, #0
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	f7ff ff3e 	bl	801a838 <setting_get_details>
 801a9bc:	60b8      	str	r0, [r7, #8]

        if(setting) do {
 801a9be:	68bb      	ldr	r3, [r7, #8]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d029      	beq.n	801aa18 <setting_get_description+0x94>
            if(settings->descriptions) {
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	695b      	ldr	r3, [r3, #20]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d01c      	beq.n	801aa06 <setting_get_description+0x82>
                idx = settings->n_descriptions;
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	8a1b      	ldrh	r3, [r3, #16]
 801a9d0:	613b      	str	r3, [r7, #16]
                do {
                    if(settings->descriptions[--idx].id == setting->id) {
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	695a      	ldr	r2, [r3, #20]
 801a9d6:	693b      	ldr	r3, [r7, #16]
 801a9d8:	3b01      	subs	r3, #1
 801a9da:	613b      	str	r3, [r7, #16]
 801a9dc:	693b      	ldr	r3, [r7, #16]
 801a9de:	00db      	lsls	r3, r3, #3
 801a9e0:	4413      	add	r3, r2
 801a9e2:	881a      	ldrh	r2, [r3, #0]
 801a9e4:	68bb      	ldr	r3, [r7, #8]
 801a9e6:	881b      	ldrh	r3, [r3, #0]
 801a9e8:	429a      	cmp	r2, r3
 801a9ea:	d106      	bne.n	801a9fa <setting_get_description+0x76>
  #if N_AXIS > 3
                        if(setting->id == Setting_AxisStepsPerMM && axis_is_rotary(id - setting->id))
                            idx++;
  #endif
                        description = settings->descriptions[idx].description;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	695a      	ldr	r2, [r3, #20]
 801a9f0:	693b      	ldr	r3, [r7, #16]
 801a9f2:	00db      	lsls	r3, r3, #3
 801a9f4:	4413      	add	r3, r2
 801a9f6:	685b      	ldr	r3, [r3, #4]
 801a9f8:	617b      	str	r3, [r7, #20]
                    }
                } while(idx && description == NULL);
 801a9fa:	693b      	ldr	r3, [r7, #16]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d002      	beq.n	801aa06 <setting_get_description+0x82>
 801aa00:	697b      	ldr	r3, [r7, #20]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d0e5      	beq.n	801a9d2 <setting_get_description+0x4e>
            }
        } while(description == NULL && (settings = settings->next));
 801aa06:	697b      	ldr	r3, [r7, #20]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d105      	bne.n	801aa18 <setting_get_description+0x94>
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	699b      	ldr	r3, [r3, #24]
 801aa10:	60fb      	str	r3, [r7, #12]
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d1d5      	bne.n	801a9c4 <setting_get_description+0x40>
    }

#endif

    return description;
 801aa18:	697b      	ldr	r3, [r7, #20]
}
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	3718      	adds	r7, #24
 801aa1e:	46bd      	mov	sp, r7
 801aa20:	bd80      	pop	{r7, pc}
 801aa22:	bf00      	nop
 801aa24:	200015b8 	.word	0x200015b8

0801aa28 <setting_get_group_details>:

const setting_group_detail_t *setting_get_group_details (setting_group_t id)
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b086      	sub	sp, #24
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	4603      	mov	r3, r0
 801aa30:	71fb      	strb	r3, [r7, #7]
    uint_fast16_t idx;
    setting_details_t *details = settings_get_details();
 801aa32:	f7fd fce1 	bl	80183f8 <settings_get_details>
 801aa36:	6138      	str	r0, [r7, #16]
    const setting_group_detail_t *detail = NULL;
 801aa38:	2300      	movs	r3, #0
 801aa3a:	60fb      	str	r3, [r7, #12]

    do {
        for(idx = 0; idx < details->n_groups; idx++) {
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	617b      	str	r3, [r7, #20]
 801aa40:	e017      	b.n	801aa72 <setting_get_group_details+0x4a>
            if(details->groups[idx].id == id)
 801aa42:	693b      	ldr	r3, [r7, #16]
 801aa44:	6859      	ldr	r1, [r3, #4]
 801aa46:	697a      	ldr	r2, [r7, #20]
 801aa48:	4613      	mov	r3, r2
 801aa4a:	005b      	lsls	r3, r3, #1
 801aa4c:	4413      	add	r3, r2
 801aa4e:	009b      	lsls	r3, r3, #2
 801aa50:	440b      	add	r3, r1
 801aa52:	785b      	ldrb	r3, [r3, #1]
 801aa54:	79fa      	ldrb	r2, [r7, #7]
 801aa56:	429a      	cmp	r2, r3
 801aa58:	d108      	bne.n	801aa6c <setting_get_group_details+0x44>
                detail = &details->groups[idx];
 801aa5a:	693b      	ldr	r3, [r7, #16]
 801aa5c:	6859      	ldr	r1, [r3, #4]
 801aa5e:	697a      	ldr	r2, [r7, #20]
 801aa60:	4613      	mov	r3, r2
 801aa62:	005b      	lsls	r3, r3, #1
 801aa64:	4413      	add	r3, r2
 801aa66:	009b      	lsls	r3, r3, #2
 801aa68:	440b      	add	r3, r1
 801aa6a:	60fb      	str	r3, [r7, #12]
        for(idx = 0; idx < details->n_groups; idx++) {
 801aa6c:	697b      	ldr	r3, [r7, #20]
 801aa6e:	3301      	adds	r3, #1
 801aa70:	617b      	str	r3, [r7, #20]
 801aa72:	693b      	ldr	r3, [r7, #16]
 801aa74:	781b      	ldrb	r3, [r3, #0]
 801aa76:	461a      	mov	r2, r3
 801aa78:	697b      	ldr	r3, [r7, #20]
 801aa7a:	4293      	cmp	r3, r2
 801aa7c:	d3e1      	bcc.n	801aa42 <setting_get_group_details+0x1a>
        }
    } while(detail == NULL && (details = details->next));
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d105      	bne.n	801aa90 <setting_get_group_details+0x68>
 801aa84:	693b      	ldr	r3, [r7, #16]
 801aa86:	699b      	ldr	r3, [r3, #24]
 801aa88:	613b      	str	r3, [r7, #16]
 801aa8a:	693b      	ldr	r3, [r7, #16]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d1d5      	bne.n	801aa3c <setting_get_group_details+0x14>

    return detail;
 801aa90:	68fb      	ldr	r3, [r7, #12]
}
 801aa92:	4618      	mov	r0, r3
 801aa94:	3718      	adds	r7, #24
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bd80      	pop	{r7, pc}

0801aa9a <validate_value>:
    return group ? group->parent : Group_Unknown;
}
*/

static status_code_t validate_value (const setting_detail_t *setting, float value)
{
 801aa9a:	b580      	push	{r7, lr}
 801aa9c:	b084      	sub	sp, #16
 801aa9e:	af00      	add	r7, sp, #0
 801aaa0:	6078      	str	r0, [r7, #4]
 801aaa2:	ed87 0a00 	vstr	s0, [r7]
    float val;
    uint_fast8_t set_idx = 0;
 801aaa6:	2300      	movs	r3, #0
 801aaa8:	60bb      	str	r3, [r7, #8]

    if(setting->min_value) {
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	695b      	ldr	r3, [r3, #20]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d032      	beq.n	801ab18 <validate_value+0x7e>
        if(!read_float((char *)setting->min_value, &set_idx, &val))
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	695b      	ldr	r3, [r3, #20]
 801aab6:	f107 020c 	add.w	r2, r7, #12
 801aaba:	f107 0108 	add.w	r1, r7, #8
 801aabe:	4618      	mov	r0, r3
 801aac0:	f7f5 face 	bl	8010060 <read_float>
 801aac4:	4603      	mov	r3, r0
 801aac6:	f083 0301 	eor.w	r3, r3, #1
 801aaca:	b2db      	uxtb	r3, r3
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d001      	beq.n	801aad4 <validate_value+0x3a>
            return Status_BadNumberFormat;
 801aad0:	2302      	movs	r3, #2
 801aad2:	e04d      	b.n	801ab70 <validate_value+0xd6>

        if(!(value >= val || (setting->flags.allow_null && value == 0.0f)))
 801aad4:	edd7 7a03 	vldr	s15, [r7, #12]
 801aad8:	ed97 7a00 	vldr	s14, [r7]
 801aadc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aae4:	bfac      	ite	ge
 801aae6:	2301      	movge	r3, #1
 801aae8:	2300      	movlt	r3, #0
 801aaea:	b2db      	uxtb	r3, r3
 801aaec:	f083 0301 	eor.w	r3, r3, #1
 801aaf0:	b2db      	uxtb	r3, r3
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d019      	beq.n	801ab2a <validate_value+0x90>
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aafc:	f003 0302 	and.w	r3, r3, #2
 801ab00:	b2db      	uxtb	r3, r3
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d006      	beq.n	801ab14 <validate_value+0x7a>
 801ab06:	edd7 7a00 	vldr	s15, [r7]
 801ab0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ab0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab12:	d00a      	beq.n	801ab2a <validate_value+0x90>
            return Status_SettingValueOutOfRange;
 801ab14:	2334      	movs	r3, #52	; 0x34
 801ab16:	e02b      	b.n	801ab70 <validate_value+0xd6>

    } else if(value < 0.0f)
 801ab18:	edd7 7a00 	vldr	s15, [r7]
 801ab1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ab20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab24:	d501      	bpl.n	801ab2a <validate_value+0x90>
        return Status_NegativeValue;
 801ab26:	2304      	movs	r3, #4
 801ab28:	e022      	b.n	801ab70 <validate_value+0xd6>

    if(setting->max_value) {
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	699b      	ldr	r3, [r3, #24]
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d01d      	beq.n	801ab6e <validate_value+0xd4>
        set_idx = 0;
 801ab32:	2300      	movs	r3, #0
 801ab34:	60bb      	str	r3, [r7, #8]

        if(!read_float((char *)setting->max_value, &set_idx, &val))
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	699b      	ldr	r3, [r3, #24]
 801ab3a:	f107 020c 	add.w	r2, r7, #12
 801ab3e:	f107 0108 	add.w	r1, r7, #8
 801ab42:	4618      	mov	r0, r3
 801ab44:	f7f5 fa8c 	bl	8010060 <read_float>
 801ab48:	4603      	mov	r3, r0
 801ab4a:	f083 0301 	eor.w	r3, r3, #1
 801ab4e:	b2db      	uxtb	r3, r3
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d001      	beq.n	801ab58 <validate_value+0xbe>
            return Status_BadNumberFormat;
 801ab54:	2302      	movs	r3, #2
 801ab56:	e00b      	b.n	801ab70 <validate_value+0xd6>

        if(value > val)
 801ab58:	edd7 7a03 	vldr	s15, [r7, #12]
 801ab5c:	ed97 7a00 	vldr	s14, [r7]
 801ab60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ab64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab68:	dd01      	ble.n	801ab6e <validate_value+0xd4>
            return Status_SettingValueOutOfRange;
 801ab6a:	2334      	movs	r3, #52	; 0x34
 801ab6c:	e000      	b.n	801ab70 <validate_value+0xd6>
    }

    return Status_OK;
 801ab6e:	2300      	movs	r3, #0
}
 801ab70:	4618      	mov	r0, r3
 801ab72:	3710      	adds	r7, #16
 801ab74:	46bd      	mov	sp, r7
 801ab76:	bd80      	pop	{r7, pc}

0801ab78 <validate_uint_value>:

static status_code_t validate_uint_value (const setting_detail_t *setting, uint32_t value)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b086      	sub	sp, #24
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
 801ab80:	6039      	str	r1, [r7, #0]
    uint32_t val;
    uint_fast8_t set_idx = 0;
 801ab82:	2300      	movs	r3, #0
 801ab84:	60fb      	str	r3, [r7, #12]
    status_code_t status;

    if(setting->min_value) {
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	695b      	ldr	r3, [r3, #20]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d020      	beq.n	801abd0 <validate_uint_value+0x58>
        if((status = read_uint((char *)setting->min_value, &set_idx, &val)) != Status_OK)
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	695b      	ldr	r3, [r3, #20]
 801ab92:	f107 0210 	add.w	r2, r7, #16
 801ab96:	f107 010c 	add.w	r1, r7, #12
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f7f5 f9cc 	bl	800ff38 <read_uint>
 801aba0:	4603      	mov	r3, r0
 801aba2:	75fb      	strb	r3, [r7, #23]
 801aba4:	7dfb      	ldrb	r3, [r7, #23]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d001      	beq.n	801abae <validate_uint_value+0x36>
            return status;
 801abaa:	7dfb      	ldrb	r3, [r7, #23]
 801abac:	e02d      	b.n	801ac0a <validate_uint_value+0x92>

        if(!(value >= val || (setting->flags.allow_null && value == 0)))
 801abae:	693b      	ldr	r3, [r7, #16]
 801abb0:	683a      	ldr	r2, [r7, #0]
 801abb2:	429a      	cmp	r2, r3
 801abb4:	d20c      	bcs.n	801abd0 <validate_uint_value+0x58>
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801abbc:	f003 0302 	and.w	r3, r3, #2
 801abc0:	b2db      	uxtb	r3, r3
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d002      	beq.n	801abcc <validate_uint_value+0x54>
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d001      	beq.n	801abd0 <validate_uint_value+0x58>
            return Status_SettingValueOutOfRange;
 801abcc:	2334      	movs	r3, #52	; 0x34
 801abce:	e01c      	b.n	801ac0a <validate_uint_value+0x92>

    } else if(value < 0.0f)
        return Status_NegativeValue;

    if(setting->max_value) {
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	699b      	ldr	r3, [r3, #24]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d017      	beq.n	801ac08 <validate_uint_value+0x90>
        set_idx = 0;
 801abd8:	2300      	movs	r3, #0
 801abda:	60fb      	str	r3, [r7, #12]

        if((status = read_uint((char *)setting->max_value, &set_idx, &val)) != Status_OK)
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	699b      	ldr	r3, [r3, #24]
 801abe0:	f107 0210 	add.w	r2, r7, #16
 801abe4:	f107 010c 	add.w	r1, r7, #12
 801abe8:	4618      	mov	r0, r3
 801abea:	f7f5 f9a5 	bl	800ff38 <read_uint>
 801abee:	4603      	mov	r3, r0
 801abf0:	75fb      	strb	r3, [r7, #23]
 801abf2:	7dfb      	ldrb	r3, [r7, #23]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d001      	beq.n	801abfc <validate_uint_value+0x84>
            return Status_BadNumberFormat;
 801abf8:	2302      	movs	r3, #2
 801abfa:	e006      	b.n	801ac0a <validate_uint_value+0x92>

        if(value > val)
 801abfc:	693b      	ldr	r3, [r7, #16]
 801abfe:	683a      	ldr	r2, [r7, #0]
 801ac00:	429a      	cmp	r2, r3
 801ac02:	d901      	bls.n	801ac08 <validate_uint_value+0x90>
            return Status_SettingValueOutOfRange;
 801ac04:	2334      	movs	r3, #52	; 0x34
 801ac06:	e000      	b.n	801ac0a <validate_uint_value+0x92>
    }

    return Status_OK;
 801ac08:	2300      	movs	r3, #0
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3718      	adds	r7, #24
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}

0801ac12 <strnumentries>:

static uint32_t strnumentries (const char *s, const char delimiter)
{
 801ac12:	b580      	push	{r7, lr}
 801ac14:	b084      	sub	sp, #16
 801ac16:	af00      	add	r7, sp, #0
 801ac18:	6078      	str	r0, [r7, #4]
 801ac1a:	460b      	mov	r3, r1
 801ac1c:	70fb      	strb	r3, [r7, #3]
    if(s == NULL || *s == '\0')
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d003      	beq.n	801ac2c <strnumentries+0x1a>
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	781b      	ldrb	r3, [r3, #0]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d101      	bne.n	801ac30 <strnumentries+0x1e>
        return 0;
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	e014      	b.n	801ac5a <strnumentries+0x48>

    char *p = (char *)s;
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	60fb      	str	r3, [r7, #12]
    uint32_t entries = 1;
 801ac34:	2301      	movs	r3, #1
 801ac36:	60bb      	str	r3, [r7, #8]

    while((p = strchr(p, delimiter))) {
 801ac38:	e005      	b.n	801ac46 <strnumentries+0x34>
        p++;
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	3301      	adds	r3, #1
 801ac3e:	60fb      	str	r3, [r7, #12]
        entries++;
 801ac40:	68bb      	ldr	r3, [r7, #8]
 801ac42:	3301      	adds	r3, #1
 801ac44:	60bb      	str	r3, [r7, #8]
    while((p = strchr(p, delimiter))) {
 801ac46:	78fb      	ldrb	r3, [r7, #3]
 801ac48:	4619      	mov	r1, r3
 801ac4a:	68f8      	ldr	r0, [r7, #12]
 801ac4c:	f00b f90e 	bl	8025e6c <strchr>
 801ac50:	60f8      	str	r0, [r7, #12]
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d1f0      	bne.n	801ac3a <strnumentries+0x28>
    }

    return entries;
 801ac58:	68bb      	ldr	r3, [r7, #8]
}
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	3710      	adds	r7, #16
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}

0801ac62 <setting_datatype_to_external>:

setting_datatype_t setting_datatype_to_external (setting_datatype_t datatype)
{
 801ac62:	b480      	push	{r7}
 801ac64:	b083      	sub	sp, #12
 801ac66:	af00      	add	r7, sp, #0
 801ac68:	4603      	mov	r3, r0
 801ac6a:	71fb      	strb	r3, [r7, #7]
    switch(datatype) {
 801ac6c:	79fb      	ldrb	r3, [r7, #7]
 801ac6e:	3b0a      	subs	r3, #10
 801ac70:	2b01      	cmp	r3, #1
 801ac72:	d802      	bhi.n	801ac7a <setting_datatype_to_external+0x18>

        case Format_Int8:
        case Format_Int16:
            datatype = Format_Integer;
 801ac74:	2305      	movs	r3, #5
 801ac76:	71fb      	strb	r3, [r7, #7]
            break;
 801ac78:	e000      	b.n	801ac7c <setting_datatype_to_external+0x1a>

        default:
            break;
 801ac7a:	bf00      	nop
    }

    return datatype;
 801ac7c:	79fb      	ldrb	r3, [r7, #7]
}
 801ac7e:	4618      	mov	r0, r3
 801ac80:	370c      	adds	r7, #12
 801ac82:	46bd      	mov	sp, r7
 801ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac88:	4770      	bx	lr

0801ac8a <setting_is_list>:

bool setting_is_list (const setting_detail_t *setting)
{
 801ac8a:	b480      	push	{r7}
 801ac8c:	b083      	sub	sp, #12
 801ac8e:	af00      	add	r7, sp, #0
 801ac90:	6078      	str	r0, [r7, #4]
    return setting->datatype == Format_Bitfield || setting->datatype == Format_XBitfield || setting->datatype == Format_RadioButtons;
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	7b1b      	ldrb	r3, [r3, #12]
 801ac96:	2b01      	cmp	r3, #1
 801ac98:	d007      	beq.n	801acaa <setting_is_list+0x20>
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	7b1b      	ldrb	r3, [r3, #12]
 801ac9e:	2b02      	cmp	r3, #2
 801aca0:	d003      	beq.n	801acaa <setting_is_list+0x20>
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	7b1b      	ldrb	r3, [r3, #12]
 801aca6:	2b03      	cmp	r3, #3
 801aca8:	d101      	bne.n	801acae <setting_is_list+0x24>
 801acaa:	2301      	movs	r3, #1
 801acac:	e000      	b.n	801acb0 <setting_is_list+0x26>
 801acae:	2300      	movs	r3, #0
 801acb0:	f003 0301 	and.w	r3, r3, #1
 801acb4:	b2db      	uxtb	r3, r3
}
 801acb6:	4618      	mov	r0, r3
 801acb8:	370c      	adds	r7, #12
 801acba:	46bd      	mov	sp, r7
 801acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc0:	4770      	bx	lr

0801acc2 <remove_element>:
{
    return setting->datatype == Format_Integer || setting->datatype == Format_Int8 || setting->datatype == Format_Int16;
}

static char *remove_element (char *s, uint_fast8_t entry)
{
 801acc2:	b480      	push	{r7}
 801acc4:	b085      	sub	sp, #20
 801acc6:	af00      	add	r7, sp, #0
 801acc8:	6078      	str	r0, [r7, #4]
 801acca:	6039      	str	r1, [r7, #0]
    while(entry && *s) {
 801accc:	e009      	b.n	801ace2 <remove_element+0x20>
        if(*s == ',')
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	781b      	ldrb	r3, [r3, #0]
 801acd2:	2b2c      	cmp	r3, #44	; 0x2c
 801acd4:	d102      	bne.n	801acdc <remove_element+0x1a>
            entry--;
 801acd6:	683b      	ldr	r3, [r7, #0]
 801acd8:	3b01      	subs	r3, #1
 801acda:	603b      	str	r3, [r7, #0]
        s++;
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	3301      	adds	r3, #1
 801ace0:	607b      	str	r3, [r7, #4]
    while(entry && *s) {
 801ace2:	683b      	ldr	r3, [r7, #0]
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d003      	beq.n	801acf0 <remove_element+0x2e>
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	781b      	ldrb	r3, [r3, #0]
 801acec:	2b00      	cmp	r3, #0
 801acee:	d1ee      	bne.n	801acce <remove_element+0xc>
    }

    if(entry == 0) {
 801acf0:	683b      	ldr	r3, [r7, #0]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d12c      	bne.n	801ad50 <remove_element+0x8e>
        *s++ = 'N';
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	1c5a      	adds	r2, r3, #1
 801acfa:	607a      	str	r2, [r7, #4]
 801acfc:	224e      	movs	r2, #78	; 0x4e
 801acfe:	701a      	strb	r2, [r3, #0]
        *s++ = '/';
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	1c5a      	adds	r2, r3, #1
 801ad04:	607a      	str	r2, [r7, #4]
 801ad06:	222f      	movs	r2, #47	; 0x2f
 801ad08:	701a      	strb	r2, [r3, #0]
        *s++ = 'A';
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	1c5a      	adds	r2, r3, #1
 801ad0e:	607a      	str	r2, [r7, #4]
 801ad10:	2241      	movs	r2, #65	; 0x41
 801ad12:	701a      	strb	r2, [r3, #0]
        char *s2 = s;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	60fb      	str	r3, [r7, #12]
        while(*s2 && *s2 != ',')
 801ad18:	e002      	b.n	801ad20 <remove_element+0x5e>
            s2++;
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	3301      	adds	r3, #1
 801ad1e:	60fb      	str	r3, [r7, #12]
        while(*s2 && *s2 != ',')
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	781b      	ldrb	r3, [r3, #0]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d00c      	beq.n	801ad42 <remove_element+0x80>
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	781b      	ldrb	r3, [r3, #0]
 801ad2c:	2b2c      	cmp	r3, #44	; 0x2c
 801ad2e:	d1f4      	bne.n	801ad1a <remove_element+0x58>
        while(*s2)
 801ad30:	e007      	b.n	801ad42 <remove_element+0x80>
            *s++ = *s2++;
 801ad32:	68fa      	ldr	r2, [r7, #12]
 801ad34:	1c53      	adds	r3, r2, #1
 801ad36:	60fb      	str	r3, [r7, #12]
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	1c59      	adds	r1, r3, #1
 801ad3c:	6079      	str	r1, [r7, #4]
 801ad3e:	7812      	ldrb	r2, [r2, #0]
 801ad40:	701a      	strb	r2, [r3, #0]
        while(*s2)
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d1f3      	bne.n	801ad32 <remove_element+0x70>
        *s = '\0';
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	2200      	movs	r2, #0
 801ad4e:	701a      	strb	r2, [r3, #0]
    }

    return s;
 801ad50:	687b      	ldr	r3, [r7, #4]
}
 801ad52:	4618      	mov	r0, r3
 801ad54:	3714      	adds	r7, #20
 801ad56:	46bd      	mov	sp, r7
 801ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad5c:	4770      	bx	lr

0801ad5e <setting_remove_element>:

static void setting_remove_element (setting_id_t id, uint_fast8_t pos)
{
 801ad5e:	b580      	push	{r7, lr}
 801ad60:	b084      	sub	sp, #16
 801ad62:	af00      	add	r7, sp, #0
 801ad64:	4603      	mov	r3, r0
 801ad66:	6039      	str	r1, [r7, #0]
 801ad68:	80fb      	strh	r3, [r7, #6]
    const setting_detail_t *setting = setting_get_details(id, NULL);
 801ad6a:	88fb      	ldrh	r3, [r7, #6]
 801ad6c:	2100      	movs	r1, #0
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f7ff fd62 	bl	801a838 <setting_get_details>
 801ad74:	60f8      	str	r0, [r7, #12]

    if(setting && setting_is_list(setting))
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d00b      	beq.n	801ad94 <setting_remove_element+0x36>
 801ad7c:	68f8      	ldr	r0, [r7, #12]
 801ad7e:	f7ff ff84 	bl	801ac8a <setting_is_list>
 801ad82:	4603      	mov	r3, r0
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d005      	beq.n	801ad94 <setting_remove_element+0x36>
        remove_element((char *)setting->format, pos);
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	691b      	ldr	r3, [r3, #16]
 801ad8c:	6839      	ldr	r1, [r7, #0]
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7ff ff97 	bl	801acc2 <remove_element>
}
 801ad94:	bf00      	nop
 801ad96:	3710      	adds	r7, #16
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	bd80      	pop	{r7, pc}

0801ad9c <setting_remove_elements>:

// Flag setting elements for bitfields as N/A according to a mask
// Note: setting format string has to reside in RAM.
void setting_remove_elements (setting_id_t id, uint32_t mask)
{
 801ad9c:	b580      	push	{r7, lr}
 801ad9e:	b086      	sub	sp, #24
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	4603      	mov	r3, r0
 801ada4:	6039      	str	r1, [r7, #0]
 801ada6:	80fb      	strh	r3, [r7, #6]
    char *format = (char *)setting_get_details(id, NULL)->format, *s;
 801ada8:	88fb      	ldrh	r3, [r7, #6]
 801adaa:	2100      	movs	r1, #0
 801adac:	4618      	mov	r0, r3
 801adae:	f7ff fd43 	bl	801a838 <setting_get_details>
 801adb2:	4603      	mov	r3, r0
 801adb4:	691b      	ldr	r3, [r3, #16]
 801adb6:	613b      	str	r3, [r7, #16]
    uint_fast8_t idx, entries = strnumentries(format, ',');
 801adb8:	212c      	movs	r1, #44	; 0x2c
 801adba:	6938      	ldr	r0, [r7, #16]
 801adbc:	f7ff ff29 	bl	801ac12 <strnumentries>
 801adc0:	60f8      	str	r0, [r7, #12]

    for(idx = 0; idx < entries; idx++ ) {
 801adc2:	2300      	movs	r3, #0
 801adc4:	617b      	str	r3, [r7, #20]
 801adc6:	e00f      	b.n	801ade8 <setting_remove_elements+0x4c>
        if(!(mask & 0x1))
 801adc8:	683b      	ldr	r3, [r7, #0]
 801adca:	f003 0301 	and.w	r3, r3, #1
 801adce:	2b00      	cmp	r3, #0
 801add0:	d104      	bne.n	801addc <setting_remove_elements+0x40>
            setting_remove_element(id, idx);
 801add2:	88fb      	ldrh	r3, [r7, #6]
 801add4:	6979      	ldr	r1, [r7, #20]
 801add6:	4618      	mov	r0, r3
 801add8:	f7ff ffc1 	bl	801ad5e <setting_remove_element>
        mask >>= 1;
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	085b      	lsrs	r3, r3, #1
 801ade0:	603b      	str	r3, [r7, #0]
    for(idx = 0; idx < entries; idx++ ) {
 801ade2:	697b      	ldr	r3, [r7, #20]
 801ade4:	3301      	adds	r3, #1
 801ade6:	617b      	str	r3, [r7, #20]
 801ade8:	697a      	ldr	r2, [r7, #20]
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	429a      	cmp	r2, r3
 801adee:	d3eb      	bcc.n	801adc8 <setting_remove_elements+0x2c>
    }

    // Strip trailing N/A's
    while((s = strrchr(format, ','))) {
 801adf0:	e00a      	b.n	801ae08 <setting_remove_elements+0x6c>
        if(strncmp(s, ",N/A", 4))
 801adf2:	2204      	movs	r2, #4
 801adf4:	490b      	ldr	r1, [pc, #44]	; (801ae24 <setting_remove_elements+0x88>)
 801adf6:	68b8      	ldr	r0, [r7, #8]
 801adf8:	f00b f845 	bl	8025e86 <strncmp>
 801adfc:	4603      	mov	r3, r0
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d10b      	bne.n	801ae1a <setting_remove_elements+0x7e>
            break;
        *s = '\0';
 801ae02:	68bb      	ldr	r3, [r7, #8]
 801ae04:	2200      	movs	r2, #0
 801ae06:	701a      	strb	r2, [r3, #0]
    while((s = strrchr(format, ','))) {
 801ae08:	212c      	movs	r1, #44	; 0x2c
 801ae0a:	6938      	ldr	r0, [r7, #16]
 801ae0c:	f00b f860 	bl	8025ed0 <strrchr>
 801ae10:	60b8      	str	r0, [r7, #8]
 801ae12:	68bb      	ldr	r3, [r7, #8]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d1ec      	bne.n	801adf2 <setting_remove_elements+0x56>
    }
}
 801ae18:	e000      	b.n	801ae1c <setting_remove_elements+0x80>
            break;
 801ae1a:	bf00      	nop
}
 801ae1c:	bf00      	nop
 801ae1e:	3718      	adds	r7, #24
 801ae20:	46bd      	mov	sp, r7
 801ae22:	bd80      	pop	{r7, pc}
 801ae24:	08030c84 	.word	0x08030c84

0801ae28 <setting_is_string>:

inline static bool setting_is_string (setting_datatype_t  datatype)
{
 801ae28:	b480      	push	{r7}
 801ae2a:	b083      	sub	sp, #12
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	4603      	mov	r3, r0
 801ae30:	71fb      	strb	r3, [r7, #7]
    return datatype == Format_String || datatype == Format_Password || datatype == Format_IPv4;
 801ae32:	79fb      	ldrb	r3, [r7, #7]
 801ae34:	2b07      	cmp	r3, #7
 801ae36:	d005      	beq.n	801ae44 <setting_is_string+0x1c>
 801ae38:	79fb      	ldrb	r3, [r7, #7]
 801ae3a:	2b08      	cmp	r3, #8
 801ae3c:	d002      	beq.n	801ae44 <setting_is_string+0x1c>
 801ae3e:	79fb      	ldrb	r3, [r7, #7]
 801ae40:	2b09      	cmp	r3, #9
 801ae42:	d101      	bne.n	801ae48 <setting_is_string+0x20>
 801ae44:	2301      	movs	r3, #1
 801ae46:	e000      	b.n	801ae4a <setting_is_string+0x22>
 801ae48:	2300      	movs	r3, #0
 801ae4a:	f003 0301 	and.w	r3, r3, #1
 801ae4e:	b2db      	uxtb	r3, r3
}
 801ae50:	4618      	mov	r0, r3
 801ae52:	370c      	adds	r7, #12
 801ae54:	46bd      	mov	sp, r7
 801ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5a:	4770      	bx	lr

0801ae5c <setting_is_core>:

inline static bool setting_is_core (setting_type_t type)
{
 801ae5c:	b480      	push	{r7}
 801ae5e:	b083      	sub	sp, #12
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	4603      	mov	r3, r0
 801ae64:	71fb      	strb	r3, [r7, #7]
    return !(type == Setting_NonCore || type == Setting_NonCoreFn);
 801ae66:	79fb      	ldrb	r3, [r7, #7]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d004      	beq.n	801ae76 <setting_is_core+0x1a>
 801ae6c:	79fb      	ldrb	r3, [r7, #7]
 801ae6e:	2b01      	cmp	r3, #1
 801ae70:	d001      	beq.n	801ae76 <setting_is_core+0x1a>
 801ae72:	2301      	movs	r3, #1
 801ae74:	e000      	b.n	801ae78 <setting_is_core+0x1c>
 801ae76:	2300      	movs	r3, #0
 801ae78:	f003 0301 	and.w	r3, r3, #1
 801ae7c:	b2db      	uxtb	r3, r3
}
 801ae7e:	4618      	mov	r0, r3
 801ae80:	370c      	adds	r7, #12
 801ae82:	46bd      	mov	sp, r7
 801ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae88:	4770      	bx	lr
	...

0801ae8c <setting_validate_me_uint>:

static status_code_t setting_validate_me_uint (const setting_detail_t *setting, char *svalue)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b086      	sub	sp, #24
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
 801ae94:	6039      	str	r1, [r7, #0]
    uint_fast8_t idx = 0;
 801ae96:	2300      	movs	r3, #0
 801ae98:	613b      	str	r3, [r7, #16]
    uint32_t value;
    status_code_t status;

    if((status = read_uint(svalue, &idx, &value)) != Status_OK)
 801ae9a:	f107 020c 	add.w	r2, r7, #12
 801ae9e:	f107 0310 	add.w	r3, r7, #16
 801aea2:	4619      	mov	r1, r3
 801aea4:	6838      	ldr	r0, [r7, #0]
 801aea6:	f7f5 f847 	bl	800ff38 <read_uint>
 801aeaa:	4603      	mov	r3, r0
 801aeac:	75fb      	strb	r3, [r7, #23]
 801aeae:	7dfb      	ldrb	r3, [r7, #23]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d001      	beq.n	801aeb8 <setting_validate_me_uint+0x2c>
        return status;
 801aeb4:	7dfb      	ldrb	r3, [r7, #23]
 801aeb6:	e05c      	b.n	801af72 <setting_validate_me_uint+0xe6>

    switch(setting->datatype) {
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	7b1b      	ldrb	r3, [r3, #12]
 801aebc:	2b0b      	cmp	r3, #11
 801aebe:	d84e      	bhi.n	801af5e <setting_validate_me_uint+0xd2>
 801aec0:	a201      	add	r2, pc, #4	; (adr r2, 801aec8 <setting_validate_me_uint+0x3c>)
 801aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aec6:	bf00      	nop
 801aec8:	0801aef9 	.word	0x0801aef9
 801aecc:	0801af0b 	.word	0x0801af0b
 801aed0:	0801af0b 	.word	0x0801af0b
 801aed4:	0801af29 	.word	0x0801af29
 801aed8:	0801af43 	.word	0x0801af43
 801aedc:	0801af4f 	.word	0x0801af4f
 801aee0:	0801af5f 	.word	0x0801af5f
 801aee4:	0801af5f 	.word	0x0801af5f
 801aee8:	0801af5f 	.word	0x0801af5f
 801aeec:	0801af5f 	.word	0x0801af5f
 801aef0:	0801af4f 	.word	0x0801af4f
 801aef4:	0801af4f 	.word	0x0801af4f

        case Format_Bool:
            if(!(value == 0 || value == 1))
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d031      	beq.n	801af62 <setting_validate_me_uint+0xd6>
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	2b01      	cmp	r3, #1
 801af02:	d02e      	beq.n	801af62 <setting_validate_me_uint+0xd6>
                status = Status_SettingValueOutOfRange;
 801af04:	2334      	movs	r3, #52	; 0x34
 801af06:	75fb      	strb	r3, [r7, #23]
            break;
 801af08:	e02b      	b.n	801af62 <setting_validate_me_uint+0xd6>

        case Format_Bitfield:
        case Format_XBitfield:;
            if(value >= (1UL << strnumentries(setting->format, ',')))
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	691b      	ldr	r3, [r3, #16]
 801af0e:	212c      	movs	r1, #44	; 0x2c
 801af10:	4618      	mov	r0, r3
 801af12:	f7ff fe7e 	bl	801ac12 <strnumentries>
 801af16:	4603      	mov	r3, r0
 801af18:	2201      	movs	r2, #1
 801af1a:	409a      	lsls	r2, r3
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	429a      	cmp	r2, r3
 801af20:	d821      	bhi.n	801af66 <setting_validate_me_uint+0xda>
                status = Status_SettingValueOutOfRange;
 801af22:	2334      	movs	r3, #52	; 0x34
 801af24:	75fb      	strb	r3, [r7, #23]
            break;
 801af26:	e01e      	b.n	801af66 <setting_validate_me_uint+0xda>

        case Format_RadioButtons:
            if(value >= strnumentries(setting->format, ','))
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	691b      	ldr	r3, [r3, #16]
 801af2c:	212c      	movs	r1, #44	; 0x2c
 801af2e:	4618      	mov	r0, r3
 801af30:	f7ff fe6f 	bl	801ac12 <strnumentries>
 801af34:	4602      	mov	r2, r0
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	429a      	cmp	r2, r3
 801af3a:	d816      	bhi.n	801af6a <setting_validate_me_uint+0xde>
                status = Status_SettingValueOutOfRange;
 801af3c:	2334      	movs	r3, #52	; 0x34
 801af3e:	75fb      	strb	r3, [r7, #23]
            break;
 801af40:	e013      	b.n	801af6a <setting_validate_me_uint+0xde>

        case Format_AxisMask:
            if(value >= (1 << N_AXIS))
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	2b07      	cmp	r3, #7
 801af46:	d912      	bls.n	801af6e <setting_validate_me_uint+0xe2>
                status = Status_SettingValueOutOfRange;
 801af48:	2334      	movs	r3, #52	; 0x34
 801af4a:	75fb      	strb	r3, [r7, #23]
            break;
 801af4c:	e00f      	b.n	801af6e <setting_validate_me_uint+0xe2>

        case Format_Int8:
        case Format_Int16:
        case Format_Integer:
            status = validate_uint_value(setting, value);
 801af4e:	68fb      	ldr	r3, [r7, #12]
 801af50:	4619      	mov	r1, r3
 801af52:	6878      	ldr	r0, [r7, #4]
 801af54:	f7ff fe10 	bl	801ab78 <validate_uint_value>
 801af58:	4603      	mov	r3, r0
 801af5a:	75fb      	strb	r3, [r7, #23]
            break;
 801af5c:	e008      	b.n	801af70 <setting_validate_me_uint+0xe4>

        default:
            break;
 801af5e:	bf00      	nop
 801af60:	e006      	b.n	801af70 <setting_validate_me_uint+0xe4>
            break;
 801af62:	bf00      	nop
 801af64:	e004      	b.n	801af70 <setting_validate_me_uint+0xe4>
            break;
 801af66:	bf00      	nop
 801af68:	e002      	b.n	801af70 <setting_validate_me_uint+0xe4>
            break;
 801af6a:	bf00      	nop
 801af6c:	e000      	b.n	801af70 <setting_validate_me_uint+0xe4>
            break;
 801af6e:	bf00      	nop
    }

    return status;
 801af70:	7dfb      	ldrb	r3, [r7, #23]
}
 801af72:	4618      	mov	r0, r3
 801af74:	3718      	adds	r7, #24
 801af76:	46bd      	mov	sp, r7
 801af78:	bd80      	pop	{r7, pc}
 801af7a:	bf00      	nop

0801af7c <setting_validate_me>:

status_code_t setting_validate_me (const setting_detail_t *setting, float value, char *svalue)
{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b088      	sub	sp, #32
 801af80:	af00      	add	r7, sp, #0
 801af82:	60f8      	str	r0, [r7, #12]
 801af84:	ed87 0a02 	vstr	s0, [r7, #8]
 801af88:	6079      	str	r1, [r7, #4]
    status_code_t status = Status_OK;
 801af8a:	2300      	movs	r3, #0
 801af8c:	77fb      	strb	r3, [r7, #31]

    switch(setting->datatype) {
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	7b1b      	ldrb	r3, [r3, #12]
 801af92:	2b0b      	cmp	r3, #11
 801af94:	d860      	bhi.n	801b058 <setting_validate_me+0xdc>
 801af96:	a201      	add	r2, pc, #4	; (adr r2, 801af9c <setting_validate_me+0x20>)
 801af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af9c:	0801afcd 	.word	0x0801afcd
 801afa0:	0801afcd 	.word	0x0801afcd
 801afa4:	0801afcd 	.word	0x0801afcd
 801afa8:	0801afcd 	.word	0x0801afcd
 801afac:	0801afcd 	.word	0x0801afcd
 801afb0:	0801afcd 	.word	0x0801afcd
 801afb4:	0801afdb 	.word	0x0801afdb
 801afb8:	0801b037 	.word	0x0801b037
 801afbc:	0801afeb 	.word	0x0801afeb
 801afc0:	0801b059 	.word	0x0801b059
 801afc4:	0801afcd 	.word	0x0801afcd
 801afc8:	0801afcd 	.word	0x0801afcd
        case Format_RadioButtons:
        case Format_AxisMask:
        case Format_Int8:
        case Format_Int16:
        case Format_Integer:
            status = setting_validate_me_uint(setting, svalue);
 801afcc:	6879      	ldr	r1, [r7, #4]
 801afce:	68f8      	ldr	r0, [r7, #12]
 801afd0:	f7ff ff5c 	bl	801ae8c <setting_validate_me_uint>
 801afd4:	4603      	mov	r3, r0
 801afd6:	77fb      	strb	r3, [r7, #31]
            break;
 801afd8:	e03e      	b.n	801b058 <setting_validate_me+0xdc>

        case Format_Decimal:
            status = validate_value(setting, value);
 801afda:	ed97 0a02 	vldr	s0, [r7, #8]
 801afde:	68f8      	ldr	r0, [r7, #12]
 801afe0:	f7ff fd5b 	bl	801aa9a <validate_value>
 801afe4:	4603      	mov	r3, r0
 801afe6:	77fb      	strb	r3, [r7, #31]
            break;
 801afe8:	e036      	b.n	801b058 <setting_validate_me+0xdc>

        case Format_Password:
            {
                uint_fast16_t len = strlen(svalue);
 801afea:	6878      	ldr	r0, [r7, #4]
 801afec:	f7e5 f94e 	bl	800028c <strlen>
 801aff0:	61b8      	str	r0, [r7, #24]
                if(hal.stream.state.webui_connected && len == strlen(PASSWORD_MASK) && !strcmp(PASSWORD_MASK, svalue))
 801aff2:	4b1c      	ldr	r3, [pc, #112]	; (801b064 <setting_validate_me+0xe8>)
 801aff4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 801aff8:	f003 0302 	and.w	r3, r3, #2
 801affc:	b2db      	uxtb	r3, r3
 801affe:	2b00      	cmp	r3, #0
 801b000:	d00c      	beq.n	801b01c <setting_validate_me+0xa0>
 801b002:	69bb      	ldr	r3, [r7, #24]
 801b004:	2b08      	cmp	r3, #8
 801b006:	d109      	bne.n	801b01c <setting_validate_me+0xa0>
 801b008:	6879      	ldr	r1, [r7, #4]
 801b00a:	4817      	ldr	r0, [pc, #92]	; (801b068 <setting_validate_me+0xec>)
 801b00c:	f7e5 f934 	bl	8000278 <strcmp>
 801b010:	4603      	mov	r3, r0
 801b012:	2b00      	cmp	r3, #0
 801b014:	d102      	bne.n	801b01c <setting_validate_me+0xa0>
                    status = Status_InvalidStatement;
 801b016:	2303      	movs	r3, #3
 801b018:	77fb      	strb	r3, [r7, #31]
                else
                    status = validate_value(setting, (float)len);
            }
            break;
 801b01a:	e01d      	b.n	801b058 <setting_validate_me+0xdc>
                    status = validate_value(setting, (float)len);
 801b01c:	69bb      	ldr	r3, [r7, #24]
 801b01e:	ee07 3a90 	vmov	s15, r3
 801b022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b026:	eeb0 0a67 	vmov.f32	s0, s15
 801b02a:	68f8      	ldr	r0, [r7, #12]
 801b02c:	f7ff fd35 	bl	801aa9a <validate_value>
 801b030:	4603      	mov	r3, r0
 801b032:	77fb      	strb	r3, [r7, #31]
            break;
 801b034:	e010      	b.n	801b058 <setting_validate_me+0xdc>

        case Format_String:
            {
                uint_fast16_t len = strlen(svalue);
 801b036:	6878      	ldr	r0, [r7, #4]
 801b038:	f7e5 f928 	bl	800028c <strlen>
 801b03c:	6178      	str	r0, [r7, #20]
                status = validate_value(setting, (float)len);
 801b03e:	697b      	ldr	r3, [r7, #20]
 801b040:	ee07 3a90 	vmov	s15, r3
 801b044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b048:	eeb0 0a67 	vmov.f32	s0, s15
 801b04c:	68f8      	ldr	r0, [r7, #12]
 801b04e:	f7ff fd24 	bl	801aa9a <validate_value>
 801b052:	4603      	mov	r3, r0
 801b054:	77fb      	strb	r3, [r7, #31]
            }
            break;
 801b056:	bf00      	nop
        case Format_IPv4:
            // handled by driver or plugin, dependent on network library
            break;
    }

    return status;
 801b058:	7ffb      	ldrb	r3, [r7, #31]
}
 801b05a:	4618      	mov	r0, r3
 801b05c:	3720      	adds	r7, #32
 801b05e:	46bd      	mov	sp, r7
 801b060:	bd80      	pop	{r7, pc}
 801b062:	bf00      	nop
 801b064:	200016a0 	.word	0x200016a0
 801b068:	08030c2c 	.word	0x08030c2c

0801b06c <settings_changed_spindle>:
    // If no details available setting could nevertheless be a valid setting id.
    return setting == NULL ? Status_OK : setting_validate_me(setting, value, svalue);
}

static bool settings_changed_spindle (void)
{
 801b06c:	b580      	push	{r7, lr}
 801b06e:	b082      	sub	sp, #8
 801b070:	af00      	add	r7, sp, #0
    static spindle_settings_t spindle_settings = {0};

    bool changed;

    if((changed = memcmp(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t))) != 0)
 801b072:	2274      	movs	r2, #116	; 0x74
 801b074:	490c      	ldr	r1, [pc, #48]	; (801b0a8 <settings_changed_spindle+0x3c>)
 801b076:	480d      	ldr	r0, [pc, #52]	; (801b0ac <settings_changed_spindle+0x40>)
 801b078:	f00a fed1 	bl	8025e1e <memcmp>
 801b07c:	4603      	mov	r3, r0
 801b07e:	2b00      	cmp	r3, #0
 801b080:	bf14      	ite	ne
 801b082:	2301      	movne	r3, #1
 801b084:	2300      	moveq	r3, #0
 801b086:	71fb      	strb	r3, [r7, #7]
 801b088:	79fb      	ldrb	r3, [r7, #7]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d007      	beq.n	801b09e <settings_changed_spindle+0x32>
        memcpy(&spindle_settings, &settings.spindle, sizeof(spindle_settings_t));
 801b08e:	4a07      	ldr	r2, [pc, #28]	; (801b0ac <settings_changed_spindle+0x40>)
 801b090:	4b07      	ldr	r3, [pc, #28]	; (801b0b0 <settings_changed_spindle+0x44>)
 801b092:	4610      	mov	r0, r2
 801b094:	3374      	adds	r3, #116	; 0x74
 801b096:	2274      	movs	r2, #116	; 0x74
 801b098:	4619      	mov	r1, r3
 801b09a:	f00b f82d 	bl	80260f8 <memcpy>

    return changed;
 801b09e:	79fb      	ldrb	r3, [r7, #7]
}
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	3708      	adds	r7, #8
 801b0a4:	46bd      	mov	sp, r7
 801b0a6:	bd80      	pop	{r7, pc}
 801b0a8:	20001d64 	.word	0x20001d64
 801b0ac:	20001ed4 	.word	0x20001ed4
 801b0b0:	20001cf0 	.word	0x20001cf0

0801b0b4 <settings_store_setting>:

// A helper method to set settings from command line
status_code_t settings_store_setting (setting_id_t id, char *svalue)
{
 801b0b4:	b590      	push	{r4, r7, lr}
 801b0b6:	b08b      	sub	sp, #44	; 0x2c
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	4603      	mov	r3, r0
 801b0bc:	6039      	str	r1, [r7, #0]
 801b0be:	80fb      	strh	r3, [r7, #6]
    uint_fast8_t set_idx = 0;
 801b0c0:	2300      	movs	r3, #0
 801b0c2:	61fb      	str	r3, [r7, #28]
    uint32_t int_value = 0;
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	61bb      	str	r3, [r7, #24]
    float value = NAN;
 801b0c8:	4ba3      	ldr	r3, [pc, #652]	; (801b358 <settings_store_setting+0x2a4>)
 801b0ca:	617b      	str	r3, [r7, #20]
    status_code_t status = Status_OK;
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    setting_details_t *set;
    const setting_detail_t *setting = setting_get_details(id, &set);
 801b0d2:	f107 0210 	add.w	r2, r7, #16
 801b0d6:	88fb      	ldrh	r3, [r7, #6]
 801b0d8:	4611      	mov	r1, r2
 801b0da:	4618      	mov	r0, r3
 801b0dc:	f7ff fbac 	bl	801a838 <setting_get_details>
 801b0e0:	6238      	str	r0, [r7, #32]

    if(setting == NULL) {
 801b0e2:	6a3b      	ldr	r3, [r7, #32]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d10c      	bne.n	801b102 <settings_store_setting+0x4e>
        if(id == Setting_SpindlePWMBehaviour) {
 801b0e8:	88fb      	ldrh	r3, [r7, #6]
 801b0ea:	2b07      	cmp	r3, #7
 801b0ec:	d104      	bne.n	801b0f8 <settings_store_setting+0x44>
            set = &setting_details;
 801b0ee:	4b9b      	ldr	r3, [pc, #620]	; (801b35c <settings_store_setting+0x2a8>)
 801b0f0:	613b      	str	r3, [r7, #16]
            setting = &setting_detail[Setting_SpindlePWMBehaviour];
 801b0f2:	4b9b      	ldr	r3, [pc, #620]	; (801b360 <settings_store_setting+0x2ac>)
 801b0f4:	623b      	str	r3, [r7, #32]
 801b0f6:	e004      	b.n	801b102 <settings_store_setting+0x4e>
        } else
            return Status_SettingDisabled;
 801b0f8:	2335      	movs	r3, #53	; 0x35
 801b0fa:	e128      	b.n	801b34e <settings_store_setting+0x29a>
    }

    // Trim leading spaces
    while(*svalue == ' ')
        svalue++;
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	3301      	adds	r3, #1
 801b100:	603b      	str	r3, [r7, #0]
    while(*svalue == ' ')
 801b102:	683b      	ldr	r3, [r7, #0]
 801b104:	781b      	ldrb	r3, [r3, #0]
 801b106:	2b20      	cmp	r3, #32
 801b108:	d0f8      	beq.n	801b0fc <settings_store_setting+0x48>

    if(setting->datatype == Format_Decimal)  {
 801b10a:	6a3b      	ldr	r3, [r7, #32]
 801b10c:	7b1b      	ldrb	r3, [r3, #12]
 801b10e:	2b06      	cmp	r3, #6
 801b110:	d117      	bne.n	801b142 <settings_store_setting+0x8e>
        if(!read_float(svalue, &set_idx, &value) && setting_is_core(setting->type))
 801b112:	f107 0214 	add.w	r2, r7, #20
 801b116:	f107 031c 	add.w	r3, r7, #28
 801b11a:	4619      	mov	r1, r3
 801b11c:	6838      	ldr	r0, [r7, #0]
 801b11e:	f7f4 ff9f 	bl	8010060 <read_float>
 801b122:	4603      	mov	r3, r0
 801b124:	f083 0301 	eor.w	r3, r3, #1
 801b128:	b2db      	uxtb	r3, r3
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d029      	beq.n	801b182 <settings_store_setting+0xce>
 801b12e:	6a3b      	ldr	r3, [r7, #32]
 801b130:	7f1b      	ldrb	r3, [r3, #28]
 801b132:	4618      	mov	r0, r3
 801b134:	f7ff fe92 	bl	801ae5c <setting_is_core>
 801b138:	4603      	mov	r3, r0
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d021      	beq.n	801b182 <settings_store_setting+0xce>
            return Status_BadNumberFormat;
 801b13e:	2302      	movs	r3, #2
 801b140:	e105      	b.n	801b34e <settings_store_setting+0x29a>
    } else if(!setting_is_string(setting->datatype) && read_uint(svalue, &set_idx, &int_value) != Status_OK && setting_is_core(setting->type))
 801b142:	6a3b      	ldr	r3, [r7, #32]
 801b144:	7b1b      	ldrb	r3, [r3, #12]
 801b146:	4618      	mov	r0, r3
 801b148:	f7ff fe6e 	bl	801ae28 <setting_is_string>
 801b14c:	4603      	mov	r3, r0
 801b14e:	f083 0301 	eor.w	r3, r3, #1
 801b152:	b2db      	uxtb	r3, r3
 801b154:	2b00      	cmp	r3, #0
 801b156:	d014      	beq.n	801b182 <settings_store_setting+0xce>
 801b158:	f107 0218 	add.w	r2, r7, #24
 801b15c:	f107 031c 	add.w	r3, r7, #28
 801b160:	4619      	mov	r1, r3
 801b162:	6838      	ldr	r0, [r7, #0]
 801b164:	f7f4 fee8 	bl	800ff38 <read_uint>
 801b168:	4603      	mov	r3, r0
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d009      	beq.n	801b182 <settings_store_setting+0xce>
 801b16e:	6a3b      	ldr	r3, [r7, #32]
 801b170:	7f1b      	ldrb	r3, [r3, #28]
 801b172:	4618      	mov	r0, r3
 801b174:	f7ff fe72 	bl	801ae5c <setting_is_core>
 801b178:	4603      	mov	r3, r0
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d001      	beq.n	801b182 <settings_store_setting+0xce>
        return Status_BadNumberFormat;
 801b17e:	2302      	movs	r3, #2
 801b180:	e0e5      	b.n	801b34e <settings_store_setting+0x29a>

    if((status = setting_validate_me(setting, value, svalue)) != Status_OK) {
 801b182:	edd7 7a05 	vldr	s15, [r7, #20]
 801b186:	6839      	ldr	r1, [r7, #0]
 801b188:	eeb0 0a67 	vmov.f32	s0, s15
 801b18c:	6a38      	ldr	r0, [r7, #32]
 801b18e:	f7ff fef5 	bl	801af7c <setting_validate_me>
 801b192:	4603      	mov	r3, r0
 801b194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d00c      	beq.n	801b1ba <settings_store_setting+0x106>
        if(setting == Setting_PulseMicroseconds && status == Status_SettingValueOutOfRange)
 801b1a0:	6a3b      	ldr	r3, [r7, #32]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d106      	bne.n	801b1b4 <settings_store_setting+0x100>
 801b1a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1aa:	2b34      	cmp	r3, #52	; 0x34
 801b1ac:	d102      	bne.n	801b1b4 <settings_store_setting+0x100>
            status =  Status_SettingStepPulseMin;
 801b1ae:	2306      	movs	r3, #6
 801b1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        return status;
 801b1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1b8:	e0c9      	b.n	801b34e <settings_store_setting+0x29a>
    }

    switch(setting->type) {
 801b1ba:	6a3b      	ldr	r3, [r7, #32]
 801b1bc:	7f1b      	ldrb	r3, [r3, #28]
 801b1be:	2b07      	cmp	r3, #7
 801b1c0:	bf8c      	ite	hi
 801b1c2:	2201      	movhi	r2, #1
 801b1c4:	2200      	movls	r2, #0
 801b1c6:	b2d2      	uxtb	r2, r2
 801b1c8:	2a00      	cmp	r2, #0
 801b1ca:	f040 8090 	bne.w	801b2ee <settings_store_setting+0x23a>
 801b1ce:	2201      	movs	r2, #1
 801b1d0:	fa02 f303 	lsl.w	r3, r2, r3
 801b1d4:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 801b1d8:	2a00      	cmp	r2, #0
 801b1da:	bf14      	ite	ne
 801b1dc:	2201      	movne	r2, #1
 801b1de:	2200      	moveq	r2, #0
 801b1e0:	b2d2      	uxtb	r2, r2
 801b1e2:	2a00      	cmp	r2, #0
 801b1e4:	d153      	bne.n	801b28e <settings_store_setting+0x1da>
 801b1e6:	f003 0355 	and.w	r3, r3, #85	; 0x55
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	bf14      	ite	ne
 801b1ee:	2301      	movne	r3, #1
 801b1f0:	2300      	moveq	r3, #0
 801b1f2:	b2db      	uxtb	r3, r3
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d07a      	beq.n	801b2ee <settings_store_setting+0x23a>

        case Setting_NonCore:
        case Setting_IsExtended:
        case Setting_IsLegacy:
        case Setting_IsExpanded:
            switch(setting->datatype) {
 801b1f8:	6a3b      	ldr	r3, [r7, #32]
 801b1fa:	7b1b      	ldrb	r3, [r3, #12]
 801b1fc:	2b0b      	cmp	r3, #11
 801b1fe:	d841      	bhi.n	801b284 <settings_store_setting+0x1d0>
 801b200:	a201      	add	r2, pc, #4	; (adr r2, 801b208 <settings_store_setting+0x154>)
 801b202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b206:	bf00      	nop
 801b208:	0801b263 	.word	0x0801b263
 801b20c:	0801b263 	.word	0x0801b263
 801b210:	0801b263 	.word	0x0801b263
 801b214:	0801b263 	.word	0x0801b263
 801b218:	0801b251 	.word	0x0801b251
 801b21c:	0801b27b 	.word	0x0801b27b
 801b220:	0801b239 	.word	0x0801b239
 801b224:	0801b243 	.word	0x0801b243
 801b228:	0801b243 	.word	0x0801b243
 801b22c:	0801b285 	.word	0x0801b285
 801b230:	0801b263 	.word	0x0801b263
 801b234:	0801b26f 	.word	0x0801b26f

                case Format_Decimal:
                    *((float *)(setting->value)) = value;
 801b238:	6a3b      	ldr	r3, [r7, #32]
 801b23a:	6a1b      	ldr	r3, [r3, #32]
 801b23c:	697a      	ldr	r2, [r7, #20]
 801b23e:	601a      	str	r2, [r3, #0]
                    break;
 801b240:	e024      	b.n	801b28c <settings_store_setting+0x1d8>

                case Format_String:
                case Format_Password:
                    strcpy(((char *)(setting->value)), svalue);
 801b242:	6a3b      	ldr	r3, [r7, #32]
 801b244:	6a1b      	ldr	r3, [r3, #32]
 801b246:	6839      	ldr	r1, [r7, #0]
 801b248:	4618      	mov	r0, r3
 801b24a:	f00a ff4d 	bl	80260e8 <strcpy>
                    break;
 801b24e:	e01d      	b.n	801b28c <settings_store_setting+0x1d8>

                case Format_AxisMask:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value & AXES_BITMASK;
 801b250:	69bb      	ldr	r3, [r7, #24]
 801b252:	b2da      	uxtb	r2, r3
 801b254:	6a3b      	ldr	r3, [r7, #32]
 801b256:	6a1b      	ldr	r3, [r3, #32]
 801b258:	f002 0207 	and.w	r2, r2, #7
 801b25c:	b2d2      	uxtb	r2, r2
 801b25e:	701a      	strb	r2, [r3, #0]
                    break;
 801b260:	e014      	b.n	801b28c <settings_store_setting+0x1d8>
                case Format_Bool:
                case Format_Bitfield:
                case Format_XBitfield:
                case Format_RadioButtons:
                case Format_Int8:
                    *((uint8_t *)(setting->value)) = (uint8_t)int_value;
 801b262:	69ba      	ldr	r2, [r7, #24]
 801b264:	6a3b      	ldr	r3, [r7, #32]
 801b266:	6a1b      	ldr	r3, [r3, #32]
 801b268:	b2d2      	uxtb	r2, r2
 801b26a:	701a      	strb	r2, [r3, #0]
                    break;
 801b26c:	e00e      	b.n	801b28c <settings_store_setting+0x1d8>

                case Format_Int16:
                    *((uint16_t *)(setting->value)) = (uint16_t)int_value;
 801b26e:	69ba      	ldr	r2, [r7, #24]
 801b270:	6a3b      	ldr	r3, [r7, #32]
 801b272:	6a1b      	ldr	r3, [r3, #32]
 801b274:	b292      	uxth	r2, r2
 801b276:	801a      	strh	r2, [r3, #0]
                    break;
 801b278:	e008      	b.n	801b28c <settings_store_setting+0x1d8>

                case Format_Integer:
                    *((uint32_t *)(setting->value)) = (uint32_t)int_value;
 801b27a:	6a3b      	ldr	r3, [r7, #32]
 801b27c:	6a1b      	ldr	r3, [r3, #32]
 801b27e:	69ba      	ldr	r2, [r7, #24]
 801b280:	601a      	str	r2, [r3, #0]
                    break;
 801b282:	e003      	b.n	801b28c <settings_store_setting+0x1d8>

                default:
                    status = Status_BadNumberFormat;
 801b284:	2302      	movs	r3, #2
 801b286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    break;
 801b28a:	bf00      	nop
            }
            break;
 801b28c:	e02f      	b.n	801b2ee <settings_store_setting+0x23a>

        case Setting_NonCoreFn:
        case Setting_IsExtendedFn:
        case Setting_IsLegacyFn:
        case Setting_IsExpandedFn:
            switch(setting->datatype) {
 801b28e:	6a3b      	ldr	r3, [r7, #32]
 801b290:	7b1b      	ldrb	r3, [r3, #12]
 801b292:	2b06      	cmp	r3, #6
 801b294:	d005      	beq.n	801b2a2 <settings_store_setting+0x1ee>
 801b296:	2b06      	cmp	r3, #6
 801b298:	db1c      	blt.n	801b2d4 <settings_store_setting+0x220>
 801b29a:	3b07      	subs	r3, #7
 801b29c:	2b02      	cmp	r3, #2
 801b29e:	d819      	bhi.n	801b2d4 <settings_store_setting+0x220>
 801b2a0:	e00d      	b.n	801b2be <settings_store_setting+0x20a>

                case Format_Decimal:
                    status = ((setting_set_float_ptr)(setting->value))(id, value);
 801b2a2:	6a3b      	ldr	r3, [r7, #32]
 801b2a4:	6a1b      	ldr	r3, [r3, #32]
 801b2a6:	461a      	mov	r2, r3
 801b2a8:	edd7 7a05 	vldr	s15, [r7, #20]
 801b2ac:	88fb      	ldrh	r3, [r7, #6]
 801b2ae:	eeb0 0a67 	vmov.f32	s0, s15
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	4790      	blx	r2
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    break;
 801b2bc:	e016      	b.n	801b2ec <settings_store_setting+0x238>

                case Format_String:
                case Format_Password:
                case Format_IPv4:
                    status = ((setting_set_string_ptr)(setting->value))(id, svalue);
 801b2be:	6a3b      	ldr	r3, [r7, #32]
 801b2c0:	6a1b      	ldr	r3, [r3, #32]
 801b2c2:	461a      	mov	r2, r3
 801b2c4:	88fb      	ldrh	r3, [r7, #6]
 801b2c6:	6839      	ldr	r1, [r7, #0]
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	4790      	blx	r2
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    break;
 801b2d2:	e00b      	b.n	801b2ec <settings_store_setting+0x238>

                default:
                    status = ((setting_set_int_ptr)(setting->value))(id, (uint_fast16_t)int_value);
 801b2d4:	6a3b      	ldr	r3, [r7, #32]
 801b2d6:	6a1b      	ldr	r3, [r3, #32]
 801b2d8:	461c      	mov	r4, r3
 801b2da:	69ba      	ldr	r2, [r7, #24]
 801b2dc:	88fb      	ldrh	r3, [r7, #6]
 801b2de:	4611      	mov	r1, r2
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	47a0      	blx	r4
 801b2e4:	4603      	mov	r3, r0
 801b2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    break;
 801b2ea:	bf00      	nop
            }
            break;
 801b2ec:	bf00      	nop
    }

    if(status == Status_OK) {
 801b2ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d129      	bne.n	801b34a <settings_store_setting+0x296>

        xbar_set_homing_source();
 801b2f6:	f7e9 ffb9 	bl	800526c <xbar_set_homing_source>

        if(set->save)
 801b2fa:	693b      	ldr	r3, [r7, #16]
 801b2fc:	6a1b      	ldr	r3, [r3, #32]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d002      	beq.n	801b308 <settings_store_setting+0x254>
            set->save();
 801b302:	693b      	ldr	r3, [r7, #16]
 801b304:	6a1b      	ldr	r3, [r3, #32]
 801b306:	4798      	blx	r3

        if(set->on_changed) {
 801b308:	693b      	ldr	r3, [r7, #16]
 801b30a:	69db      	ldr	r3, [r3, #28]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d01c      	beq.n	801b34a <settings_store_setting+0x296>

            settings_changed_flags_t changed = {0};
 801b310:	2300      	movs	r3, #0
 801b312:	733b      	strb	r3, [r7, #12]

            changed.spindle = settings_changed_spindle() || machine_mode_changed;
 801b314:	f7ff feaa 	bl	801b06c <settings_changed_spindle>
 801b318:	4603      	mov	r3, r0
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d103      	bne.n	801b326 <settings_store_setting+0x272>
 801b31e:	4b11      	ldr	r3, [pc, #68]	; (801b364 <settings_store_setting+0x2b0>)
 801b320:	781b      	ldrb	r3, [r3, #0]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d001      	beq.n	801b32a <settings_store_setting+0x276>
 801b326:	2301      	movs	r3, #1
 801b328:	e000      	b.n	801b32c <settings_store_setting+0x278>
 801b32a:	2300      	movs	r3, #0
 801b32c:	f003 0301 	and.w	r3, r3, #1
 801b330:	b2da      	uxtb	r2, r3
 801b332:	7b3b      	ldrb	r3, [r7, #12]
 801b334:	f362 0300 	bfi	r3, r2, #0, #1
 801b338:	733b      	strb	r3, [r7, #12]
            machine_mode_changed = false;
 801b33a:	4b0a      	ldr	r3, [pc, #40]	; (801b364 <settings_store_setting+0x2b0>)
 801b33c:	2200      	movs	r2, #0
 801b33e:	701a      	strb	r2, [r3, #0]

            set->on_changed(&settings, changed);
 801b340:	693b      	ldr	r3, [r7, #16]
 801b342:	69db      	ldr	r3, [r3, #28]
 801b344:	7b39      	ldrb	r1, [r7, #12]
 801b346:	4808      	ldr	r0, [pc, #32]	; (801b368 <settings_store_setting+0x2b4>)
 801b348:	4798      	blx	r3
        }
    }

    return status;
 801b34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801b34e:	4618      	mov	r0, r3
 801b350:	372c      	adds	r7, #44	; 0x2c
 801b352:	46bd      	mov	sp, r7
 801b354:	bd90      	pop	{r4, r7, pc}
 801b356:	bf00      	nop
 801b358:	7fc00000 	.word	0x7fc00000
 801b35c:	200004c8 	.word	0x200004c8
 801b360:	08033520 	.word	0x08033520
 801b364:	20001e5c 	.word	0x20001e5c
 801b368:	20001cf0 	.word	0x20001cf0

0801b36c <settings_add_spindle_type>:

bool settings_add_spindle_type (const char *type)
{
 801b36c:	b590      	push	{r4, r7, lr}
 801b36e:	b085      	sub	sp, #20
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
    bool ok;

    if((ok = strlen(spindle_types) + strlen(type) + 1 < sizeof(spindle_types))) {
 801b374:	4815      	ldr	r0, [pc, #84]	; (801b3cc <settings_add_spindle_type+0x60>)
 801b376:	f7e4 ff89 	bl	800028c <strlen>
 801b37a:	4604      	mov	r4, r0
 801b37c:	6878      	ldr	r0, [r7, #4]
 801b37e:	f7e4 ff85 	bl	800028c <strlen>
 801b382:	4603      	mov	r3, r0
 801b384:	4423      	add	r3, r4
 801b386:	3301      	adds	r3, #1
 801b388:	2b63      	cmp	r3, #99	; 0x63
 801b38a:	bf94      	ite	ls
 801b38c:	2301      	movls	r3, #1
 801b38e:	2300      	movhi	r3, #0
 801b390:	73fb      	strb	r3, [r7, #15]
 801b392:	7bfb      	ldrb	r3, [r7, #15]
 801b394:	2b00      	cmp	r3, #0
 801b396:	d013      	beq.n	801b3c0 <settings_add_spindle_type+0x54>
        if(*spindle_types != '\0')
 801b398:	4b0c      	ldr	r3, [pc, #48]	; (801b3cc <settings_add_spindle_type+0x60>)
 801b39a:	781b      	ldrb	r3, [r3, #0]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d00b      	beq.n	801b3b8 <settings_add_spindle_type+0x4c>
            strcat(spindle_types, ",");
 801b3a0:	480a      	ldr	r0, [pc, #40]	; (801b3cc <settings_add_spindle_type+0x60>)
 801b3a2:	f7e4 ff73 	bl	800028c <strlen>
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	461a      	mov	r2, r3
 801b3aa:	4b08      	ldr	r3, [pc, #32]	; (801b3cc <settings_add_spindle_type+0x60>)
 801b3ac:	4413      	add	r3, r2
 801b3ae:	4908      	ldr	r1, [pc, #32]	; (801b3d0 <settings_add_spindle_type+0x64>)
 801b3b0:	461a      	mov	r2, r3
 801b3b2:	460b      	mov	r3, r1
 801b3b4:	881b      	ldrh	r3, [r3, #0]
 801b3b6:	8013      	strh	r3, [r2, #0]
        strcat(spindle_types, type);
 801b3b8:	6879      	ldr	r1, [r7, #4]
 801b3ba:	4804      	ldr	r0, [pc, #16]	; (801b3cc <settings_add_spindle_type+0x60>)
 801b3bc:	f00a fd47 	bl	8025e4e <strcat>
    }

    return ok;
 801b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	3714      	adds	r7, #20
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd90      	pop	{r4, r7, pc}
 801b3ca:	bf00      	nop
 801b3cc:	20001e60 	.word	0x20001e60
 801b3d0:	08030c8c 	.word	0x08030c8c

0801b3d4 <settings_clear>:

// Clear settings chain
void settings_clear (void)
{
 801b3d4:	b480      	push	{r7}
 801b3d6:	af00      	add	r7, sp, #0
    setting_details.next = NULL;
 801b3d8:	4b05      	ldr	r3, [pc, #20]	; (801b3f0 <settings_clear+0x1c>)
 801b3da:	2200      	movs	r2, #0
 801b3dc:	619a      	str	r2, [r3, #24]
    settingsd = &setting_details;
 801b3de:	4b05      	ldr	r3, [pc, #20]	; (801b3f4 <settings_clear+0x20>)
 801b3e0:	4a03      	ldr	r2, [pc, #12]	; (801b3f0 <settings_clear+0x1c>)
 801b3e2:	601a      	str	r2, [r3, #0]
}
 801b3e4:	bf00      	nop
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ec:	4770      	bx	lr
 801b3ee:	bf00      	nop
 801b3f0:	200004c8 	.word	0x200004c8
 801b3f4:	200004f8 	.word	0x200004f8

0801b3f8 <settings_init>:

// Initialize the config subsystem
void settings_init (void)
{
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b084      	sub	sp, #16
 801b3fc:	af00      	add	r7, sp, #0
    settings_changed_flags_t changed = {0};
 801b3fe:	2300      	movs	r3, #0
 801b400:	723b      	strb	r3, [r7, #8]
#if N_AXIS > 3
    if(grbl.on_set_axis_setting_unit == NULL)
        grbl.on_set_axis_setting_unit = set_axis_setting_unit;
#endif

    if(!read_global_settings()) {
 801b402:	f7fe ff3d 	bl	801a280 <read_global_settings>
 801b406:	4603      	mov	r3, r0
 801b408:	f083 0301 	eor.w	r3, r3, #1
 801b40c:	b2db      	uxtb	r3, r3
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d034      	beq.n	801b47c <settings_init+0x84>

        settings_restore_t settings = settings_all;
 801b412:	2300      	movs	r3, #0
 801b414:	703b      	strb	r3, [r7, #0]
 801b416:	783b      	ldrb	r3, [r7, #0]
 801b418:	f043 0301 	orr.w	r3, r3, #1
 801b41c:	703b      	strb	r3, [r7, #0]
 801b41e:	783b      	ldrb	r3, [r7, #0]
 801b420:	f043 0302 	orr.w	r3, r3, #2
 801b424:	703b      	strb	r3, [r7, #0]
 801b426:	783b      	ldrb	r3, [r7, #0]
 801b428:	f043 0304 	orr.w	r3, r3, #4
 801b42c:	703b      	strb	r3, [r7, #0]
 801b42e:	783b      	ldrb	r3, [r7, #0]
 801b430:	f043 0308 	orr.w	r3, r3, #8
 801b434:	703b      	strb	r3, [r7, #0]
 801b436:	783b      	ldrb	r3, [r7, #0]
 801b438:	f043 0310 	orr.w	r3, r3, #16
 801b43c:	703b      	strb	r3, [r7, #0]
        settings.defaults = 1; // Ensure global settings get restored
 801b43e:	783b      	ldrb	r3, [r7, #0]
 801b440:	f043 0301 	orr.w	r3, r3, #1
 801b444:	703b      	strb	r3, [r7, #0]

        if(hal.nvs.type != NVS_None)
 801b446:	4b58      	ldr	r3, [pc, #352]	; (801b5a8 <settings_init+0x1b0>)
 801b448:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d003      	beq.n	801b458 <settings_init+0x60>
            grbl.report.status_message(Status_SettingReadFail);
 801b450:	4b56      	ldr	r3, [pc, #344]	; (801b5ac <settings_init+0x1b4>)
 801b452:	689b      	ldr	r3, [r3, #8]
 801b454:	2007      	movs	r0, #7
 801b456:	4798      	blx	r3

        settings_restore(settings); // Force restore all non-volatile storage data.
 801b458:	7838      	ldrb	r0, [r7, #0]
 801b45a:	f7fe ffb5 	bl	801a3c8 <settings_restore>
        report_init();
 801b45e:	f7f8 fcf5 	bl	8013e4c <report_init>
#if COMPATIBILITY_LEVEL <= 1
        report_grbl_settings(true, NULL);
 801b462:	2100      	movs	r1, #0
 801b464:	2001      	movs	r0, #1
 801b466:	f7f8 fff3 	bl	8014450 <report_grbl_settings>
#else
        report_grbl_settings(false, NULL);
#endif
        changed.spindle = settings_changed_spindle();
 801b46a:	f7ff fdff 	bl	801b06c <settings_changed_spindle>
 801b46e:	4603      	mov	r3, r0
 801b470:	461a      	mov	r2, r3
 801b472:	7a3b      	ldrb	r3, [r7, #8]
 801b474:	f362 0300 	bfi	r3, r2, #0, #1
 801b478:	723b      	strb	r3, [r7, #8]
 801b47a:	e01f      	b.n	801b4bc <settings_init+0xc4>
    } else {

        memset(&tool_table, 0, sizeof(tool_data_t)); // First entry is for tools not in tool table
 801b47c:	2214      	movs	r2, #20
 801b47e:	2100      	movs	r1, #0
 801b480:	484b      	ldr	r0, [pc, #300]	; (801b5b0 <settings_init+0x1b8>)
 801b482:	f00a fcdc 	bl	8025e3e <memset>
#if N_TOOLS
        uint_fast8_t idx;
        for (idx = 1; idx <= N_TOOLS; idx++)
            settings_read_tool_data(idx, &tool_table[idx]);
#endif
        report_init();
 801b486:	f7f8 fce1 	bl	8013e4c <report_init>

        changed.spindle = settings_changed_spindle();
 801b48a:	f7ff fdef 	bl	801b06c <settings_changed_spindle>
 801b48e:	4603      	mov	r3, r0
 801b490:	461a      	mov	r2, r3
 801b492:	7a3b      	ldrb	r3, [r7, #8]
 801b494:	f362 0300 	bfi	r3, r2, #0, #1
 801b498:	723b      	strb	r3, [r7, #8]

        hal.settings_changed(&settings, changed);
 801b49a:	4b43      	ldr	r3, [pc, #268]	; (801b5a8 <settings_init+0x1b0>)
 801b49c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b4a0:	7a39      	ldrb	r1, [r7, #8]
 801b4a2:	4844      	ldr	r0, [pc, #272]	; (801b5b4 <settings_init+0x1bc>)
 801b4a4:	4798      	blx	r3

        if(hal.probe.configure) // Initialize probe invert mask.
 801b4a6:	4b40      	ldr	r3, [pc, #256]	; (801b5a8 <settings_init+0x1b0>)
 801b4a8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d005      	beq.n	801b4bc <settings_init+0xc4>
            hal.probe.configure(false, false);
 801b4b0:	4b3d      	ldr	r3, [pc, #244]	; (801b5a8 <settings_init+0x1b0>)
 801b4b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b4b6:	2100      	movs	r1, #0
 801b4b8:	2000      	movs	r0, #0
 801b4ba:	4798      	blx	r3
    }

    xbar_set_homing_source();
 801b4bc:	f7e9 fed6 	bl	800526c <xbar_set_homing_source>

    tmp_set_soft_limits();
 801b4c0:	f7fd f974 	bl	80187ac <tmp_set_soft_limits>
    tmp_set_hard_limits();
 801b4c4:	f7fd fa1c 	bl	8018900 <tmp_set_hard_limits>

    if(spindle_get_count() == 0)
 801b4c8:	f000 fcae 	bl	801be28 <spindle_get_count>
 801b4cc:	4603      	mov	r3, r0
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d101      	bne.n	801b4d6 <settings_init+0xde>
        spindle_add_null();
 801b4d2:	f000 fde3 	bl	801c09c <spindle_add_null>

    spindle_state_t spindle_cap = {
 801b4d6:	2300      	movs	r3, #0
 801b4d8:	713b      	strb	r3, [r7, #4]
 801b4da:	793b      	ldrb	r3, [r7, #4]
 801b4dc:	f043 0301 	orr.w	r3, r3, #1
 801b4e0:	713b      	strb	r3, [r7, #4]
        .on = On,
    };

    spindle_cap.ccw = spindle_get_caps(false).direction;
 801b4e2:	2000      	movs	r0, #0
 801b4e4:	f000 fbe6 	bl	801bcb4 <spindle_get_caps>
 801b4e8:	4603      	mov	r3, r0
 801b4ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b4ee:	b2da      	uxtb	r2, r3
 801b4f0:	793b      	ldrb	r3, [r7, #4]
 801b4f2:	f362 0341 	bfi	r3, r2, #1, #1
 801b4f6:	713b      	strb	r3, [r7, #4]
    spindle_cap.pwm = spindle_get_caps(false).pwm_invert;
 801b4f8:	2000      	movs	r0, #0
 801b4fa:	f000 fbdb 	bl	801bcb4 <spindle_get_caps>
 801b4fe:	4603      	mov	r3, r0
 801b500:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b504:	b2da      	uxtb	r2, r3
 801b506:	793b      	ldrb	r3, [r7, #4]
 801b508:	f362 0382 	bfi	r3, r2, #2, #1
 801b50c:	713b      	strb	r3, [r7, #4]

    setting_remove_elements(Setting_SpindleInvertMask, spindle_cap.mask);
 801b50e:	793b      	ldrb	r3, [r7, #4]
 801b510:	4619      	mov	r1, r3
 801b512:	2010      	movs	r0, #16
 801b514:	f7ff fc42 	bl	801ad9c <setting_remove_elements>
    setting_remove_elements(Setting_ControlInvertMask, hal.signals_cap.mask);
 801b518:	4b23      	ldr	r3, [pc, #140]	; (801b5a8 <settings_init+0x1b0>)
 801b51a:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 801b51e:	4619      	mov	r1, r3
 801b520:	200e      	movs	r0, #14
 801b522:	f7ff fc3b 	bl	801ad9c <setting_remove_elements>

    if(hal.stepper.get_ganged)
 801b526:	4b20      	ldr	r3, [pc, #128]	; (801b5a8 <settings_init+0x1b0>)
 801b528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d00a      	beq.n	801b546 <settings_init+0x14e>
        setting_remove_elements(Setting_GangedDirInvertMask, hal.stepper.get_ganged(false).mask);
 801b530:	4b1d      	ldr	r3, [pc, #116]	; (801b5a8 <settings_init+0x1b0>)
 801b532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b536:	2000      	movs	r0, #0
 801b538:	4798      	blx	r3
 801b53a:	4603      	mov	r3, r0
 801b53c:	b2db      	uxtb	r3, r3
 801b53e:	4619      	mov	r1, r3
 801b540:	2008      	movs	r0, #8
 801b542:	f7ff fc2b 	bl	801ad9c <setting_remove_elements>

    if(!hal.driver_cap.mist_control)
 801b546:	4b18      	ldr	r3, [pc, #96]	; (801b5a8 <settings_init+0x1b0>)
 801b548:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 801b54c:	f003 0301 	and.w	r3, r3, #1
 801b550:	b2db      	uxtb	r3, r3
 801b552:	2b00      	cmp	r3, #0
 801b554:	d103      	bne.n	801b55e <settings_init+0x166>
        setting_remove_element(Setting_CoolantInvertMask, 1);
 801b556:	2101      	movs	r1, #1
 801b558:	200f      	movs	r0, #15
 801b55a:	f7ff fc00 	bl	801ad5e <setting_remove_element>

    setting_details_t *details = setting_details.next;
 801b55e:	4b16      	ldr	r3, [pc, #88]	; (801b5b8 <settings_init+0x1c0>)
 801b560:	699b      	ldr	r3, [r3, #24]
 801b562:	60fb      	str	r3, [r7, #12]

    if(details) do {
 801b564:	68fb      	ldr	r3, [r7, #12]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d015      	beq.n	801b596 <settings_init+0x19e>
        if(details->load)
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d002      	beq.n	801b578 <settings_init+0x180>
            details->load();
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b576:	4798      	blx	r3
        if(details->on_changed)
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	69db      	ldr	r3, [r3, #28]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d004      	beq.n	801b58a <settings_init+0x192>
            details->on_changed(&settings, changed);
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	69db      	ldr	r3, [r3, #28]
 801b584:	7a39      	ldrb	r1, [r7, #8]
 801b586:	480b      	ldr	r0, [pc, #44]	; (801b5b4 <settings_init+0x1bc>)
 801b588:	4798      	blx	r3
    } while((details = details->next));
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	699b      	ldr	r3, [r3, #24]
 801b58e:	60fb      	str	r3, [r7, #12]
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d1e9      	bne.n	801b56a <settings_init+0x172>

    setting_details.on_changed = hal.settings_changed;
 801b596:	4b04      	ldr	r3, [pc, #16]	; (801b5a8 <settings_init+0x1b0>)
 801b598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801b59c:	4a06      	ldr	r2, [pc, #24]	; (801b5b8 <settings_init+0x1c0>)
 801b59e:	61d3      	str	r3, [r2, #28]
}
 801b5a0:	bf00      	nop
 801b5a2:	3710      	adds	r7, #16
 801b5a4:	46bd      	mov	sp, r7
 801b5a6:	bd80      	pop	{r7, pc}
 801b5a8:	200016a0 	.word	0x200016a0
 801b5ac:	200015b8 	.word	0x200015b8
 801b5b0:	20001414 	.word	0x20001414
 801b5b4:	20001cf0 	.word	0x20001cf0
 801b5b8:	200004c8 	.word	0x200004c8

0801b5bc <fall_asleep>:
#include "state_machine.h"

static volatile bool slumber;

static void fall_asleep()
{
 801b5bc:	b480      	push	{r7}
 801b5be:	af00      	add	r7, sp, #0
    slumber = false;
 801b5c0:	4b03      	ldr	r3, [pc, #12]	; (801b5d0 <fall_asleep+0x14>)
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	701a      	strb	r2, [r3, #0]
}
 801b5c6:	bf00      	nop
 801b5c8:	46bd      	mov	sp, r7
 801b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ce:	4770      	bx	lr
 801b5d0:	20001f48 	.word	0x20001f48

0801b5d4 <sleep_execute>:

// Starts sleep timer if running conditions are satisfied. When elapsed, sleep mode is executed.
static void sleep_execute()
{
 801b5d4:	b590      	push	{r4, r7, lr}
 801b5d6:	b083      	sub	sp, #12
 801b5d8:	af00      	add	r7, sp, #0
    // Enable sleep timeout
    slumber = true;
 801b5da:	4b1d      	ldr	r3, [pc, #116]	; (801b650 <sleep_execute+0x7c>)
 801b5dc:	2201      	movs	r2, #1
 801b5de:	701a      	strb	r2, [r3, #0]
    hal.delay_ms((uint32_t)(SLEEP_DURATION * 1000.0f * 60.0f), fall_asleep);
 801b5e0:	4b1c      	ldr	r3, [pc, #112]	; (801b654 <sleep_execute+0x80>)
 801b5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5e4:	491c      	ldr	r1, [pc, #112]	; (801b658 <sleep_execute+0x84>)
 801b5e6:	481d      	ldr	r0, [pc, #116]	; (801b65c <sleep_execute+0x88>)
 801b5e8:	4798      	blx	r3

    // Fetch current number of buffered characters in input stream buffer.
    uint16_t rx_initial = hal.stream.get_rx_buffer_free();
 801b5ea:	4b1a      	ldr	r3, [pc, #104]	; (801b654 <sleep_execute+0x80>)
 801b5ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b5f0:	4798      	blx	r3
 801b5f2:	4603      	mov	r3, r0
 801b5f4:	80fb      	strh	r3, [r7, #6]

    do {
        grbl.on_execute_realtime(state_get());
 801b5f6:	4b1a      	ldr	r3, [pc, #104]	; (801b660 <sleep_execute+0x8c>)
 801b5f8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801b5fa:	f001 fb91 	bl	801cd20 <state_get>
 801b5fe:	4603      	mov	r3, r0
 801b600:	4618      	mov	r0, r3
 801b602:	47a0      	blx	r4
        // Monitor for any new input stream data or external events (queries, buttons, alarms) to exit.
        if ((hal.stream.get_rx_buffer_free() != rx_initial) || sys.rt_exec_state || sys.rt_exec_alarm ) {
 801b604:	4b13      	ldr	r3, [pc, #76]	; (801b654 <sleep_execute+0x80>)
 801b606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b60a:	4798      	blx	r3
 801b60c:	4603      	mov	r3, r0
 801b60e:	461a      	mov	r2, r3
 801b610:	88fb      	ldrh	r3, [r7, #6]
 801b612:	4293      	cmp	r3, r2
 801b614:	d107      	bne.n	801b626 <sleep_execute+0x52>
 801b616:	4b13      	ldr	r3, [pc, #76]	; (801b664 <sleep_execute+0x90>)
 801b618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d103      	bne.n	801b626 <sleep_execute+0x52>
 801b61e:	4b11      	ldr	r3, [pc, #68]	; (801b664 <sleep_execute+0x90>)
 801b620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b622:	2b00      	cmp	r3, #0
 801b624:	d005      	beq.n	801b632 <sleep_execute+0x5e>
            // Disable sleep timeout and return to normal operation.
            hal.delay_ms(0, NULL);
 801b626:	4b0b      	ldr	r3, [pc, #44]	; (801b654 <sleep_execute+0x80>)
 801b628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b62a:	2100      	movs	r1, #0
 801b62c:	2000      	movs	r0, #0
 801b62e:	4798      	blx	r3
            return;
 801b630:	e00a      	b.n	801b648 <sleep_execute+0x74>
        }
    } while(slumber);
 801b632:	4b07      	ldr	r3, [pc, #28]	; (801b650 <sleep_execute+0x7c>)
 801b634:	781b      	ldrb	r3, [r3, #0]
 801b636:	b2db      	uxtb	r3, r3
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d1dc      	bne.n	801b5f6 <sleep_execute+0x22>

    // If reached, sleep counter has expired. Execute sleep procedures.
    // Notify user that Grbl has timed out and will be parking.
    // To exit sleep, resume or reset. Either way, the job will not be recoverable.
    system_set_exec_state_flag(EXEC_SLEEP);
 801b63c:	4b05      	ldr	r3, [pc, #20]	; (801b654 <sleep_execute+0x80>)
 801b63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b640:	f44f 7180 	mov.w	r1, #256	; 0x100
 801b644:	4808      	ldr	r0, [pc, #32]	; (801b668 <sleep_execute+0x94>)
 801b646:	4798      	blx	r3
}
 801b648:	370c      	adds	r7, #12
 801b64a:	46bd      	mov	sp, r7
 801b64c:	bd90      	pop	{r4, r7, pc}
 801b64e:	bf00      	nop
 801b650:	20001f48 	.word	0x20001f48
 801b654:	200016a0 	.word	0x200016a0
 801b658:	0801b5bd 	.word	0x0801b5bd
 801b65c:	000493e0 	.word	0x000493e0
 801b660:	200015b8 	.word	0x200015b8
 801b664:	20001520 	.word	0x20001520
 801b668:	20001568 	.word	0x20001568

0801b66c <sleep_check>:
// Checks running conditions for sleep. If satisfied, enables sleep timeout and executes
// sleep mode upon elapse.
// NOTE: Sleep procedures can be blocking, since Grbl isn't receiving any commands, nor moving.
// Hence, make sure any valid running state that executes the sleep timer is not one that is moving.
void sleep_check()
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	af00      	add	r7, sp, #0
    // The sleep execution feature will continue only if the machine is in an IDLE or HOLD state and
    // has any powered components enabled.
    // NOTE: With overrides or in laser mode, modal spindle and coolant state are not guaranteed. Need
    // to directly monitor and record running state during parking to ensure proper function.
    if (!sys.steppers_deenergize && (gc_state.modal.spindle.state.value || gc_state.modal.coolant.value)) {
 801b670:	4b19      	ldr	r3, [pc, #100]	; (801b6d8 <sleep_check+0x6c>)
 801b672:	799b      	ldrb	r3, [r3, #6]
 801b674:	b2db      	uxtb	r3, r3
 801b676:	f083 0301 	eor.w	r3, r3, #1
 801b67a:	b2db      	uxtb	r3, r3
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d029      	beq.n	801b6d4 <sleep_check+0x68>
 801b680:	4b16      	ldr	r3, [pc, #88]	; (801b6dc <sleep_check+0x70>)
 801b682:	7e9b      	ldrb	r3, [r3, #26]
 801b684:	2b00      	cmp	r3, #0
 801b686:	d103      	bne.n	801b690 <sleep_check+0x24>
 801b688:	4b14      	ldr	r3, [pc, #80]	; (801b6dc <sleep_check+0x70>)
 801b68a:	7e5b      	ldrb	r3, [r3, #25]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d021      	beq.n	801b6d4 <sleep_check+0x68>
        switch(state_get()) {
 801b690:	f001 fb46 	bl	801cd20 <state_get>
 801b694:	4603      	mov	r3, r0
 801b696:	2b40      	cmp	r3, #64	; 0x40
 801b698:	d011      	beq.n	801b6be <sleep_check+0x52>
 801b69a:	2b40      	cmp	r3, #64	; 0x40
 801b69c:	d81a      	bhi.n	801b6d4 <sleep_check+0x68>
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d002      	beq.n	801b6a8 <sleep_check+0x3c>
 801b6a2:	2b10      	cmp	r3, #16
 801b6a4:	d003      	beq.n	801b6ae <sleep_check+0x42>
                if(sys.parking_state == Parking_DoorAjar)
                    sleep_execute();
                break;
        }
    }
}
 801b6a6:	e015      	b.n	801b6d4 <sleep_check+0x68>
                sleep_execute();
 801b6a8:	f7ff ff94 	bl	801b5d4 <sleep_execute>
                break;
 801b6ac:	e012      	b.n	801b6d4 <sleep_check+0x68>
                if(sys.holding_state == Hold_Complete)
 801b6ae:	4b0a      	ldr	r3, [pc, #40]	; (801b6d8 <sleep_check+0x6c>)
 801b6b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801b6b4:	2b01      	cmp	r3, #1
 801b6b6:	d10a      	bne.n	801b6ce <sleep_check+0x62>
                    sleep_execute();
 801b6b8:	f7ff ff8c 	bl	801b5d4 <sleep_execute>
                break;
 801b6bc:	e007      	b.n	801b6ce <sleep_check+0x62>
                if(sys.parking_state == Parking_DoorAjar)
 801b6be:	4b06      	ldr	r3, [pc, #24]	; (801b6d8 <sleep_check+0x6c>)
 801b6c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b6c4:	2b01      	cmp	r3, #1
 801b6c6:	d104      	bne.n	801b6d2 <sleep_check+0x66>
                    sleep_execute();
 801b6c8:	f7ff ff84 	bl	801b5d4 <sleep_execute>
                break;
 801b6cc:	e001      	b.n	801b6d2 <sleep_check+0x66>
                break;
 801b6ce:	bf00      	nop
 801b6d0:	e000      	b.n	801b6d4 <sleep_check+0x68>
                break;
 801b6d2:	bf00      	nop
}
 801b6d4:	bf00      	nop
 801b6d6:	bd80      	pop	{r7, pc}
 801b6d8:	20001520 	.word	0x20001520
 801b6dc:	2000137c 	.word	0x2000137c

0801b6e0 <spindle_activate>:
\param spindle_id spindle id of spindle to activate as a \ref spindle_id_t.
\param spindle_num spindle number to set as enabled as a \ref spindle_num_t.
\returns \a true if succsesful, \a false if not.
*/
static bool spindle_activate (spindle_id_t spindle_id, spindle_num_t spindle_num)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b094      	sub	sp, #80	; 0x50
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	460a      	mov	r2, r1
 801b6ea:	71fb      	strb	r3, [r7, #7]
 801b6ec:	4613      	mov	r3, r2
 801b6ee:	71bb      	strb	r3, [r7, #6]
    bool ok;
    spindle_reg_t *spindle;

    // Always configure PWM spindle on startup to ensure outputs are set correctly.
    if(pwm_spindle && pwm_spindle->cfg->config && pwm_spindle != &spindles[spindle_id]) {
 801b6f0:	4b65      	ldr	r3, [pc, #404]	; (801b888 <spindle_activate+0x1a8>)
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d049      	beq.n	801b78c <spindle_activate+0xac>
 801b6f8:	4b63      	ldr	r3, [pc, #396]	; (801b888 <spindle_activate+0x1a8>)
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	699b      	ldr	r3, [r3, #24]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d043      	beq.n	801b78c <spindle_activate+0xac>
 801b704:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801b708:	4613      	mov	r3, r2
 801b70a:	00db      	lsls	r3, r3, #3
 801b70c:	4413      	add	r3, r2
 801b70e:	00db      	lsls	r3, r3, #3
 801b710:	4a5e      	ldr	r2, [pc, #376]	; (801b88c <spindle_activate+0x1ac>)
 801b712:	441a      	add	r2, r3
 801b714:	4b5c      	ldr	r3, [pc, #368]	; (801b888 <spindle_activate+0x1a8>)
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	429a      	cmp	r2, r3
 801b71a:	d037      	beq.n	801b78c <spindle_activate+0xac>

        if(!pwm_spindle->hal.cap.rpm_range_locked) {
 801b71c:	4b5a      	ldr	r3, [pc, #360]	; (801b888 <spindle_activate+0x1a8>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	7b5b      	ldrb	r3, [r3, #13]
 801b722:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801b726:	b2db      	uxtb	r3, r3
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d109      	bne.n	801b740 <spindle_activate+0x60>
            pwm_spindle->hal.rpm_min = settings.spindle.rpm_min;
 801b72c:	4b56      	ldr	r3, [pc, #344]	; (801b888 <spindle_activate+0x1a8>)
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	4a57      	ldr	r2, [pc, #348]	; (801b890 <spindle_activate+0x1b0>)
 801b732:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801b734:	615a      	str	r2, [r3, #20]
            pwm_spindle->hal.rpm_max = settings.spindle.rpm_max;
 801b736:	4b54      	ldr	r3, [pc, #336]	; (801b888 <spindle_activate+0x1a8>)
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	4a55      	ldr	r2, [pc, #340]	; (801b890 <spindle_activate+0x1b0>)
 801b73c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801b73e:	619a      	str	r2, [r3, #24]
        }

        if((pwm_spindle->init_ok = pwm_spindle->hal.config == NULL || pwm_spindle->hal.config(&pwm_spindle->hal)))
 801b740:	4b51      	ldr	r3, [pc, #324]	; (801b888 <spindle_activate+0x1a8>)
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	69db      	ldr	r3, [r3, #28]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d00a      	beq.n	801b760 <spindle_activate+0x80>
 801b74a:	4b4f      	ldr	r3, [pc, #316]	; (801b888 <spindle_activate+0x1a8>)
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	69db      	ldr	r3, [r3, #28]
 801b750:	4a4d      	ldr	r2, [pc, #308]	; (801b888 <spindle_activate+0x1a8>)
 801b752:	6812      	ldr	r2, [r2, #0]
 801b754:	3204      	adds	r2, #4
 801b756:	4610      	mov	r0, r2
 801b758:	4798      	blx	r3
 801b75a:	4603      	mov	r3, r0
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d001      	beq.n	801b764 <spindle_activate+0x84>
 801b760:	2201      	movs	r2, #1
 801b762:	e000      	b.n	801b766 <spindle_activate+0x86>
 801b764:	2200      	movs	r2, #0
 801b766:	4b48      	ldr	r3, [pc, #288]	; (801b888 <spindle_activate+0x1a8>)
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	f002 0201 	and.w	r2, r2, #1
 801b76e:	b2d2      	uxtb	r2, r2
 801b770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d007      	beq.n	801b78c <spindle_activate+0xac>
            pwm_spindle->hal.set_state((spindle_state_t){0}, 0.0f);
 801b77c:	4b42      	ldr	r3, [pc, #264]	; (801b888 <spindle_activate+0x1a8>)
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	6a1b      	ldr	r3, [r3, #32]
 801b782:	2200      	movs	r2, #0
 801b784:	ed9f 0a43 	vldr	s0, [pc, #268]	; 801b894 <spindle_activate+0x1b4>
 801b788:	4610      	mov	r0, r2
 801b78a:	4798      	blx	r3
    }
    pwm_spindle = NULL;
 801b78c:	4b3e      	ldr	r3, [pc, #248]	; (801b888 <spindle_activate+0x1a8>)
 801b78e:	2200      	movs	r2, #0
 801b790:	601a      	str	r2, [r3, #0]

    if((ok = spindle_id >= 0 && spindle_id < n_spindle && !!spindles[spindle_id].cfg)) {
 801b792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b796:	2b00      	cmp	r3, #0
 801b798:	db12      	blt.n	801b7c0 <spindle_activate+0xe0>
 801b79a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b79e:	4a3e      	ldr	r2, [pc, #248]	; (801b898 <spindle_activate+0x1b8>)
 801b7a0:	7812      	ldrb	r2, [r2, #0]
 801b7a2:	4293      	cmp	r3, r2
 801b7a4:	da0c      	bge.n	801b7c0 <spindle_activate+0xe0>
 801b7a6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801b7aa:	4938      	ldr	r1, [pc, #224]	; (801b88c <spindle_activate+0x1ac>)
 801b7ac:	4613      	mov	r3, r2
 801b7ae:	00db      	lsls	r3, r3, #3
 801b7b0:	4413      	add	r3, r2
 801b7b2:	00db      	lsls	r3, r3, #3
 801b7b4:	440b      	add	r3, r1
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d001      	beq.n	801b7c0 <spindle_activate+0xe0>
 801b7bc:	2301      	movs	r3, #1
 801b7be:	e000      	b.n	801b7c2 <spindle_activate+0xe2>
 801b7c0:	2300      	movs	r3, #0
 801b7c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801b7c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b7ca:	f003 0301 	and.w	r3, r3, #1
 801b7ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801b7d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	f000 811c 	beq.w	801ba14 <spindle_activate+0x334>

        spindle = &spindles[spindle_id];
 801b7dc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801b7e0:	4613      	mov	r3, r2
 801b7e2:	00db      	lsls	r3, r3, #3
 801b7e4:	4413      	add	r3, r2
 801b7e6:	00db      	lsls	r3, r3, #3
 801b7e8:	4a28      	ldr	r2, [pc, #160]	; (801b88c <spindle_activate+0x1ac>)
 801b7ea:	4413      	add	r3, r2
 801b7ec:	64bb      	str	r3, [r7, #72]	; 0x48

        if(sys_spindle[spindle_num].enabled && sys_spindle[spindle_num].hal.id != spindle_id && sys_spindle[spindle_num].hal.set_state)
 801b7ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b7f2:	4a2a      	ldr	r2, [pc, #168]	; (801b89c <spindle_activate+0x1bc>)
 801b7f4:	216c      	movs	r1, #108	; 0x6c
 801b7f6:	fb01 f303 	mul.w	r3, r1, r3
 801b7fa:	4413      	add	r3, r2
 801b7fc:	3368      	adds	r3, #104	; 0x68
 801b7fe:	781b      	ldrb	r3, [r3, #0]
 801b800:	2b00      	cmp	r3, #0
 801b802:	d01a      	beq.n	801b83a <spindle_activate+0x15a>
 801b804:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b808:	4a24      	ldr	r2, [pc, #144]	; (801b89c <spindle_activate+0x1bc>)
 801b80a:	216c      	movs	r1, #108	; 0x6c
 801b80c:	fb01 f303 	mul.w	r3, r1, r3
 801b810:	4413      	add	r3, r2
 801b812:	332c      	adds	r3, #44	; 0x2c
 801b814:	f993 3000 	ldrsb.w	r3, [r3]
 801b818:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801b81c:	429a      	cmp	r2, r3
 801b81e:	d00c      	beq.n	801b83a <spindle_activate+0x15a>
 801b820:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b824:	4a1d      	ldr	r2, [pc, #116]	; (801b89c <spindle_activate+0x1bc>)
 801b826:	216c      	movs	r1, #108	; 0x6c
 801b828:	fb01 f303 	mul.w	r3, r1, r3
 801b82c:	4413      	add	r3, r2
 801b82e:	3348      	adds	r3, #72	; 0x48
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d001      	beq.n	801b83a <spindle_activate+0x15a>
            gc_spindle_off(); // TODO: switch off only the default spindle?
 801b836:	f7ea f84d 	bl	80058d4 <gc_spindle_off>

        if(!spindle->hal.cap.rpm_range_locked) {
 801b83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b83c:	7b5b      	ldrb	r3, [r3, #13]
 801b83e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801b842:	b2db      	uxtb	r3, r3
 801b844:	2b00      	cmp	r3, #0
 801b846:	d107      	bne.n	801b858 <spindle_activate+0x178>
            spindle->hal.rpm_min = settings.spindle.rpm_min;
 801b848:	4b11      	ldr	r3, [pc, #68]	; (801b890 <spindle_activate+0x1b0>)
 801b84a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801b84c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b84e:	615a      	str	r2, [r3, #20]
            spindle->hal.rpm_max = settings.spindle.rpm_max;
 801b850:	4b0f      	ldr	r3, [pc, #60]	; (801b890 <spindle_activate+0x1b0>)
 801b852:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801b854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b856:	619a      	str	r2, [r3, #24]
        }

        if(!spindle->init_ok)
 801b858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b85a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b85e:	f083 0301 	eor.w	r3, r3, #1
 801b862:	b2db      	uxtb	r3, r3
 801b864:	2b00      	cmp	r3, #0
 801b866:	d027      	beq.n	801b8b8 <spindle_activate+0x1d8>
            ok = spindle->init_ok = spindle->hal.config == NULL || spindle->hal.config(&spindle->hal);
 801b868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b86a:	69db      	ldr	r3, [r3, #28]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d008      	beq.n	801b882 <spindle_activate+0x1a2>
 801b870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b872:	69db      	ldr	r3, [r3, #28]
 801b874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b876:	3204      	adds	r2, #4
 801b878:	4610      	mov	r0, r2
 801b87a:	4798      	blx	r3
 801b87c:	4603      	mov	r3, r0
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d00e      	beq.n	801b8a0 <spindle_activate+0x1c0>
 801b882:	2301      	movs	r3, #1
 801b884:	e00d      	b.n	801b8a2 <spindle_activate+0x1c2>
 801b886:	bf00      	nop
 801b888:	20002000 	.word	0x20002000
 801b88c:	20001fb8 	.word	0x20001fb8
 801b890:	20001cf0 	.word	0x20001cf0
 801b894:	00000000 	.word	0x00000000
 801b898:	20001f49 	.word	0x20001f49
 801b89c:	20001f4c 	.word	0x20001f4c
 801b8a0:	2300      	movs	r3, #0
 801b8a2:	f003 0301 	and.w	r3, r3, #1
 801b8a6:	b2da      	uxtb	r2, r3
 801b8a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801b8b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ok) {
 801b8b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	f000 80a9 	beq.w	801ba14 <spindle_activate+0x334>

            spindle_ptrs_t spindle_hal;

            memcpy(&spindle_hal, &spindle->hal, sizeof(spindle_ptrs_t));
 801b8c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8c4:	1d19      	adds	r1, r3, #4
 801b8c6:	f107 030c 	add.w	r3, r7, #12
 801b8ca:	223c      	movs	r2, #60	; 0x3c
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	f00a fc13 	bl	80260f8 <memcpy>

            if(spindle->cfg->get_data == NULL) {
 801b8d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d117      	bne.n	801b90c <spindle_activate+0x22c>
                spindle_hal.get_data = hal.spindle_data.get;
 801b8dc:	4b50      	ldr	r3, [pc, #320]	; (801ba20 <spindle_activate+0x340>)
 801b8de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b8e0:	643b      	str	r3, [r7, #64]	; 0x40
                spindle_hal.reset_data = hal.spindle_data.reset;
 801b8e2:	4b4f      	ldr	r3, [pc, #316]	; (801ba20 <spindle_activate+0x340>)
 801b8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b8e6:	647b      	str	r3, [r7, #68]	; 0x44
                if(!spindle->cfg->cap.at_speed)
 801b8e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	7a5b      	ldrb	r3, [r3, #9]
 801b8ee:	f003 0304 	and.w	r3, r3, #4
 801b8f2:	b2db      	uxtb	r3, r3
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d109      	bne.n	801b90c <spindle_activate+0x22c>
                    spindle_hal.cap.at_speed = !!spindle_hal.get_data;
 801b8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	bf14      	ite	ne
 801b8fe:	2301      	movne	r3, #1
 801b900:	2300      	moveq	r3, #0
 801b902:	b2da      	uxtb	r2, r3
 801b904:	7d7b      	ldrb	r3, [r7, #21]
 801b906:	f362 0382 	bfi	r3, r2, #2, #1
 801b90a:	757b      	strb	r3, [r7, #21]
            }

            spindle_hal.cap.laser &= settings.mode == Mode_Laser;
 801b90c:	7d7b      	ldrb	r3, [r7, #21]
 801b90e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b912:	b2db      	uxtb	r3, r3
 801b914:	b25a      	sxtb	r2, r3
 801b916:	4b43      	ldr	r3, [pc, #268]	; (801ba24 <spindle_activate+0x344>)
 801b918:	7e1b      	ldrb	r3, [r3, #24]
 801b91a:	2b01      	cmp	r3, #1
 801b91c:	bf0c      	ite	eq
 801b91e:	2301      	moveq	r3, #1
 801b920:	2300      	movne	r3, #0
 801b922:	b2db      	uxtb	r3, r3
 801b924:	b25b      	sxtb	r3, r3
 801b926:	4013      	ands	r3, r2
 801b928:	b25b      	sxtb	r3, r3
 801b92a:	f003 0301 	and.w	r3, r3, #1
 801b92e:	b2da      	uxtb	r2, r3
 801b930:	7d7b      	ldrb	r3, [r7, #21]
 801b932:	f362 03c3 	bfi	r3, r2, #3, #1
 801b936:	757b      	strb	r3, [r7, #21]

            if(grbl.on_spindle_select)
 801b938:	4b3b      	ldr	r3, [pc, #236]	; (801ba28 <spindle_activate+0x348>)
 801b93a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d009      	beq.n	801b956 <spindle_activate+0x276>
                ok = grbl.on_spindle_select(&spindle_hal);
 801b942:	4b39      	ldr	r3, [pc, #228]	; (801ba28 <spindle_activate+0x348>)
 801b944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b948:	f107 020c 	add.w	r2, r7, #12
 801b94c:	4610      	mov	r0, r2
 801b94e:	4798      	blx	r3
 801b950:	4603      	mov	r3, r0
 801b952:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            if(ok) {
 801b956:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d05a      	beq.n	801ba14 <spindle_activate+0x334>
                sys_spindle[spindle_num].enabled = true;
 801b95e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b962:	4a32      	ldr	r2, [pc, #200]	; (801ba2c <spindle_activate+0x34c>)
 801b964:	216c      	movs	r1, #108	; 0x6c
 801b966:	fb01 f303 	mul.w	r3, r1, r3
 801b96a:	4413      	add	r3, r2
 801b96c:	3368      	adds	r3, #104	; 0x68
 801b96e:	2201      	movs	r2, #1
 801b970:	701a      	strb	r2, [r3, #0]
                sys_spindle[spindle_num].param.hal = &sys_spindle[spindle_num].hal;
 801b972:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b976:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b97a:	216c      	movs	r1, #108	; 0x6c
 801b97c:	fb01 f202 	mul.w	r2, r1, r2
 801b980:	3228      	adds	r2, #40	; 0x28
 801b982:	492a      	ldr	r1, [pc, #168]	; (801ba2c <spindle_activate+0x34c>)
 801b984:	440a      	add	r2, r1
 801b986:	3204      	adds	r2, #4
 801b988:	4928      	ldr	r1, [pc, #160]	; (801ba2c <spindle_activate+0x34c>)
 801b98a:	206c      	movs	r0, #108	; 0x6c
 801b98c:	fb00 f303 	mul.w	r3, r0, r3
 801b990:	440b      	add	r3, r1
 801b992:	3328      	adds	r3, #40	; 0x28
 801b994:	601a      	str	r2, [r3, #0]
                if(sys_spindle[spindle_num].param.override_pct == 0)
 801b996:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b99a:	4a24      	ldr	r2, [pc, #144]	; (801ba2c <spindle_activate+0x34c>)
 801b99c:	216c      	movs	r1, #108	; 0x6c
 801b99e:	fb01 f303 	mul.w	r3, r1, r3
 801b9a2:	4413      	add	r3, r2
 801b9a4:	330c      	adds	r3, #12
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d109      	bne.n	801b9c0 <spindle_activate+0x2e0>
                    sys_spindle[spindle_num].param.override_pct = DEFAULT_SPINDLE_RPM_OVERRIDE;
 801b9ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b9b0:	4a1e      	ldr	r2, [pc, #120]	; (801ba2c <spindle_activate+0x34c>)
 801b9b2:	216c      	movs	r1, #108	; 0x6c
 801b9b4:	fb01 f303 	mul.w	r3, r1, r3
 801b9b8:	4413      	add	r3, r2
 801b9ba:	330c      	adds	r3, #12
 801b9bc:	2264      	movs	r2, #100	; 0x64
 801b9be:	601a      	str	r2, [r3, #0]
                spindle_hal.param = &sys_spindle[spindle_num].param;
 801b9c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b9c4:	226c      	movs	r2, #108	; 0x6c
 801b9c6:	fb02 f303 	mul.w	r3, r2, r3
 801b9ca:	4a18      	ldr	r2, [pc, #96]	; (801ba2c <spindle_activate+0x34c>)
 801b9cc:	4413      	add	r3, r2
 801b9ce:	613b      	str	r3, [r7, #16]
                memcpy(&sys_spindle[spindle_num].hal, &spindle_hal, sizeof(spindle_ptrs_t));
 801b9d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b9d4:	226c      	movs	r2, #108	; 0x6c
 801b9d6:	fb02 f303 	mul.w	r3, r2, r3
 801b9da:	3328      	adds	r3, #40	; 0x28
 801b9dc:	4a13      	ldr	r2, [pc, #76]	; (801ba2c <spindle_activate+0x34c>)
 801b9de:	4413      	add	r3, r2
 801b9e0:	3304      	adds	r3, #4
 801b9e2:	f107 010c 	add.w	r1, r7, #12
 801b9e6:	223c      	movs	r2, #60	; 0x3c
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f00a fb85 	bl	80260f8 <memcpy>
                if(grbl.on_spindle_selected)
 801b9ee:	4b0e      	ldr	r3, [pc, #56]	; (801ba28 <spindle_activate+0x348>)
 801b9f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d00d      	beq.n	801ba14 <spindle_activate+0x334>
                    grbl.on_spindle_selected(&sys_spindle[spindle_num].hal);
 801b9f8:	4b0b      	ldr	r3, [pc, #44]	; (801ba28 <spindle_activate+0x348>)
 801b9fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b9fe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801ba02:	216c      	movs	r1, #108	; 0x6c
 801ba04:	fb01 f202 	mul.w	r2, r1, r2
 801ba08:	3228      	adds	r2, #40	; 0x28
 801ba0a:	4908      	ldr	r1, [pc, #32]	; (801ba2c <spindle_activate+0x34c>)
 801ba0c:	440a      	add	r2, r1
 801ba0e:	3204      	adds	r2, #4
 801ba10:	4610      	mov	r0, r2
 801ba12:	4798      	blx	r3
            }
        }
    }

    return ok;
 801ba14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 801ba18:	4618      	mov	r0, r3
 801ba1a:	3750      	adds	r7, #80	; 0x50
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	bd80      	pop	{r7, pc}
 801ba20:	200016a0 	.word	0x200016a0
 801ba24:	20001cf0 	.word	0x20001cf0
 801ba28:	200015b8 	.word	0x200015b8
 801ba2c:	20001f4c 	.word	0x20001f4c

0801ba30 <spindle_register>:

__NOTE:__ The first spindle registered will become the default active spindle.
__NOTE:__ up to \ref N_SPINDLE spindles can be registered at a time.
*/
spindle_id_t spindle_register (const spindle_ptrs_t *spindle, const char *name)
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b082      	sub	sp, #8
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	6078      	str	r0, [r7, #4]
 801ba38:	6039      	str	r1, [r7, #0]
    if(n_spindle < N_SPINDLE && settings_add_spindle_type(name)) {
 801ba3a:	4b3c      	ldr	r3, [pc, #240]	; (801bb2c <spindle_register+0xfc>)
 801ba3c:	781b      	ldrb	r3, [r3, #0]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d16e      	bne.n	801bb20 <spindle_register+0xf0>
 801ba42:	6838      	ldr	r0, [r7, #0]
 801ba44:	f7ff fc92 	bl	801b36c <settings_add_spindle_type>
 801ba48:	4603      	mov	r3, r0
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d068      	beq.n	801bb20 <spindle_register+0xf0>

        spindles[n_spindle].cfg = spindle;
 801ba4e:	4b37      	ldr	r3, [pc, #220]	; (801bb2c <spindle_register+0xfc>)
 801ba50:	781b      	ldrb	r3, [r3, #0]
 801ba52:	4619      	mov	r1, r3
 801ba54:	4a36      	ldr	r2, [pc, #216]	; (801bb30 <spindle_register+0x100>)
 801ba56:	460b      	mov	r3, r1
 801ba58:	00db      	lsls	r3, r3, #3
 801ba5a:	440b      	add	r3, r1
 801ba5c:	00db      	lsls	r3, r3, #3
 801ba5e:	4413      	add	r3, r2
 801ba60:	687a      	ldr	r2, [r7, #4]
 801ba62:	601a      	str	r2, [r3, #0]
        spindles[n_spindle].name = name;
 801ba64:	4b31      	ldr	r3, [pc, #196]	; (801bb2c <spindle_register+0xfc>)
 801ba66:	781b      	ldrb	r3, [r3, #0]
 801ba68:	4619      	mov	r1, r3
 801ba6a:	4a31      	ldr	r2, [pc, #196]	; (801bb30 <spindle_register+0x100>)
 801ba6c:	460b      	mov	r3, r1
 801ba6e:	00db      	lsls	r3, r3, #3
 801ba70:	440b      	add	r3, r1
 801ba72:	00db      	lsls	r3, r3, #3
 801ba74:	4413      	add	r3, r2
 801ba76:	3340      	adds	r3, #64	; 0x40
 801ba78:	683a      	ldr	r2, [r7, #0]
 801ba7a:	601a      	str	r2, [r3, #0]
        memcpy(&spindles[n_spindle].hal, spindles[n_spindle].cfg, sizeof(spindle_ptrs_t));
 801ba7c:	4b2b      	ldr	r3, [pc, #172]	; (801bb2c <spindle_register+0xfc>)
 801ba7e:	781b      	ldrb	r3, [r3, #0]
 801ba80:	461a      	mov	r2, r3
 801ba82:	4613      	mov	r3, r2
 801ba84:	00db      	lsls	r3, r3, #3
 801ba86:	4413      	add	r3, r2
 801ba88:	00db      	lsls	r3, r3, #3
 801ba8a:	4a29      	ldr	r2, [pc, #164]	; (801bb30 <spindle_register+0x100>)
 801ba8c:	4413      	add	r3, r2
 801ba8e:	1d18      	adds	r0, r3, #4
 801ba90:	4b26      	ldr	r3, [pc, #152]	; (801bb2c <spindle_register+0xfc>)
 801ba92:	781b      	ldrb	r3, [r3, #0]
 801ba94:	4619      	mov	r1, r3
 801ba96:	4a26      	ldr	r2, [pc, #152]	; (801bb30 <spindle_register+0x100>)
 801ba98:	460b      	mov	r3, r1
 801ba9a:	00db      	lsls	r3, r3, #3
 801ba9c:	440b      	add	r3, r1
 801ba9e:	00db      	lsls	r3, r3, #3
 801baa0:	4413      	add	r3, r2
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	223c      	movs	r2, #60	; 0x3c
 801baa6:	4619      	mov	r1, r3
 801baa8:	f00a fb26 	bl	80260f8 <memcpy>
        spindles[n_spindle].hal.id = n_spindle;
 801baac:	4b1f      	ldr	r3, [pc, #124]	; (801bb2c <spindle_register+0xfc>)
 801baae:	781a      	ldrb	r2, [r3, #0]
 801bab0:	4b1e      	ldr	r3, [pc, #120]	; (801bb2c <spindle_register+0xfc>)
 801bab2:	781b      	ldrb	r3, [r3, #0]
 801bab4:	4619      	mov	r1, r3
 801bab6:	b250      	sxtb	r0, r2
 801bab8:	4a1d      	ldr	r2, [pc, #116]	; (801bb30 <spindle_register+0x100>)
 801baba:	460b      	mov	r3, r1
 801babc:	00db      	lsls	r3, r3, #3
 801babe:	440b      	add	r3, r1
 801bac0:	00db      	lsls	r3, r3, #3
 801bac2:	4413      	add	r3, r2
 801bac4:	3304      	adds	r3, #4
 801bac6:	4602      	mov	r2, r0
 801bac8:	701a      	strb	r2, [r3, #0]

        if(spindle->type == SpindleType_PWM && pwm_spindle == NULL) {
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	7a1b      	ldrb	r3, [r3, #8]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d115      	bne.n	801bafe <spindle_register+0xce>
 801bad2:	4b18      	ldr	r3, [pc, #96]	; (801bb34 <spindle_register+0x104>)
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d111      	bne.n	801bafe <spindle_register+0xce>
            pwm_spindle = &spindles[n_spindle];
 801bada:	4b14      	ldr	r3, [pc, #80]	; (801bb2c <spindle_register+0xfc>)
 801badc:	781b      	ldrb	r3, [r3, #0]
 801bade:	461a      	mov	r2, r3
 801bae0:	4613      	mov	r3, r2
 801bae2:	00db      	lsls	r3, r3, #3
 801bae4:	4413      	add	r3, r2
 801bae6:	00db      	lsls	r3, r3, #3
 801bae8:	4a11      	ldr	r2, [pc, #68]	; (801bb30 <spindle_register+0x100>)
 801baea:	4413      	add	r3, r2
 801baec:	4a11      	ldr	r2, [pc, #68]	; (801bb34 <spindle_register+0x104>)
 801baee:	6013      	str	r3, [r2, #0]
            hal.driver_cap.pwm_spindle = On;
 801baf0:	4a11      	ldr	r2, [pc, #68]	; (801bb38 <spindle_register+0x108>)
 801baf2:	f892 31aa 	ldrb.w	r3, [r2, #426]	; 0x1aa
 801baf6:	f043 0308 	orr.w	r3, r3, #8
 801bafa:	f882 31aa 	strb.w	r3, [r2, #426]	; 0x1aa
        }

        if(n_spindle == 0)
 801bafe:	4b0b      	ldr	r3, [pc, #44]	; (801bb2c <spindle_register+0xfc>)
 801bb00:	781b      	ldrb	r3, [r3, #0]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d104      	bne.n	801bb10 <spindle_register+0xe0>
            memcpy(&sys_spindle[0].hal, spindle, sizeof(spindle_ptrs_t));
 801bb06:	223c      	movs	r2, #60	; 0x3c
 801bb08:	6879      	ldr	r1, [r7, #4]
 801bb0a:	480c      	ldr	r0, [pc, #48]	; (801bb3c <spindle_register+0x10c>)
 801bb0c:	f00a faf4 	bl	80260f8 <memcpy>

        return n_spindle++;
 801bb10:	4b06      	ldr	r3, [pc, #24]	; (801bb2c <spindle_register+0xfc>)
 801bb12:	781b      	ldrb	r3, [r3, #0]
 801bb14:	1c5a      	adds	r2, r3, #1
 801bb16:	b2d1      	uxtb	r1, r2
 801bb18:	4a04      	ldr	r2, [pc, #16]	; (801bb2c <spindle_register+0xfc>)
 801bb1a:	7011      	strb	r1, [r2, #0]
 801bb1c:	b25b      	sxtb	r3, r3
 801bb1e:	e001      	b.n	801bb24 <spindle_register+0xf4>
    }

    return -1;
 801bb20:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bb24:	4618      	mov	r0, r3
 801bb26:	3708      	adds	r7, #8
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}
 801bb2c:	20001f49 	.word	0x20001f49
 801bb30:	20001fb8 	.word	0x20001fb8
 801bb34:	20002000 	.word	0x20002000
 801bb38:	200016a0 	.word	0x200016a0
 801bb3c:	20001f78 	.word	0x20001f78

0801bb40 <spindle_select>:
/*! \brief Enables a spindle and sets it as default spindle (spindle number 0).
\param spindle_id spindle id as a \ref spindle_id_t.
\returns \a true if succsesful, \a false if not.
*/
bool spindle_select (spindle_id_t spindle_id)
{
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b082      	sub	sp, #8
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	4603      	mov	r3, r0
 801bb48:	71fb      	strb	r3, [r7, #7]
    if(n_spindle == 0 && spindle_id >= 0) {
 801bb4a:	4b15      	ldr	r3, [pc, #84]	; (801bba0 <spindle_select+0x60>)
 801bb4c:	781b      	ldrb	r3, [r3, #0]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d107      	bne.n	801bb62 <spindle_select+0x22>
 801bb52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	db03      	blt.n	801bb62 <spindle_select+0x22>
        spindle_id = 0;
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	71fb      	strb	r3, [r7, #7]
        spindle_add_null();
 801bb5e:	f000 fa9d 	bl	801c09c <spindle_add_null>
    }

    return (sys_spindle[0].enabled && sys_spindle[0].hal.id == spindle_id) || spindle_activate(spindle_id, 0);
 801bb62:	4b10      	ldr	r3, [pc, #64]	; (801bba4 <spindle_select+0x64>)
 801bb64:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d006      	beq.n	801bb7a <spindle_select+0x3a>
 801bb6c:	4b0d      	ldr	r3, [pc, #52]	; (801bba4 <spindle_select+0x64>)
 801bb6e:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 801bb72:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801bb76:	429a      	cmp	r2, r3
 801bb78:	d008      	beq.n	801bb8c <spindle_select+0x4c>
 801bb7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb7e:	2100      	movs	r1, #0
 801bb80:	4618      	mov	r0, r3
 801bb82:	f7ff fdad 	bl	801b6e0 <spindle_activate>
 801bb86:	4603      	mov	r3, r0
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d001      	beq.n	801bb90 <spindle_select+0x50>
 801bb8c:	2301      	movs	r3, #1
 801bb8e:	e000      	b.n	801bb92 <spindle_select+0x52>
 801bb90:	2300      	movs	r3, #0
 801bb92:	f003 0301 	and.w	r3, r3, #1
 801bb96:	b2db      	uxtb	r3, r3
}
 801bb98:	4618      	mov	r0, r3
 801bb9a:	3708      	adds	r7, #8
 801bb9c:	46bd      	mov	sp, r7
 801bb9e:	bd80      	pop	{r7, pc}
 801bba0:	20001f49 	.word	0x20001f49
 801bba4:	20001f4c 	.word	0x20001f4c

0801bba8 <spindle_get_hal>:
\returns pointer to a \ref spindle_ptrs_t structure if successful, \a NULL if not.

__NOTE:__ do not modify the returned structure!
*/
spindle_ptrs_t *spindle_get_hal (spindle_id_t spindle_id, spindle_hal_t hal)
{
 801bba8:	b480      	push	{r7}
 801bbaa:	b085      	sub	sp, #20
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	4603      	mov	r3, r0
 801bbb0:	460a      	mov	r2, r1
 801bbb2:	71fb      	strb	r3, [r7, #7]
 801bbb4:	4613      	mov	r3, r2
 801bbb6:	71bb      	strb	r3, [r7, #6]
    spindle_ptrs_t *spindle = NULL;
 801bbb8:	2300      	movs	r3, #0
 801bbba:	60fb      	str	r3, [r7, #12]

    if(hal == SpindleHAL_Active) {
 801bbbc:	79bb      	ldrb	r3, [r7, #6]
 801bbbe:	2b02      	cmp	r3, #2
 801bbc0:	d12b      	bne.n	801bc1a <spindle_get_hal+0x72>

        uint_fast8_t idx = N_SYS_SPINDLE;
 801bbc2:	2301      	movs	r3, #1
 801bbc4:	60bb      	str	r3, [r7, #8]

        do {
            idx--;
 801bbc6:	68bb      	ldr	r3, [r7, #8]
 801bbc8:	3b01      	subs	r3, #1
 801bbca:	60bb      	str	r3, [r7, #8]
            if(sys_spindle[idx].hal.id == spindle_id && sys_spindle[idx].enabled)
 801bbcc:	4a2c      	ldr	r2, [pc, #176]	; (801bc80 <spindle_get_hal+0xd8>)
 801bbce:	68bb      	ldr	r3, [r7, #8]
 801bbd0:	216c      	movs	r1, #108	; 0x6c
 801bbd2:	fb01 f303 	mul.w	r3, r1, r3
 801bbd6:	4413      	add	r3, r2
 801bbd8:	332c      	adds	r3, #44	; 0x2c
 801bbda:	f993 3000 	ldrsb.w	r3, [r3]
 801bbde:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801bbe2:	429a      	cmp	r2, r3
 801bbe4:	d112      	bne.n	801bc0c <spindle_get_hal+0x64>
 801bbe6:	4a26      	ldr	r2, [pc, #152]	; (801bc80 <spindle_get_hal+0xd8>)
 801bbe8:	68bb      	ldr	r3, [r7, #8]
 801bbea:	216c      	movs	r1, #108	; 0x6c
 801bbec:	fb01 f303 	mul.w	r3, r1, r3
 801bbf0:	4413      	add	r3, r2
 801bbf2:	3368      	adds	r3, #104	; 0x68
 801bbf4:	781b      	ldrb	r3, [r3, #0]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d008      	beq.n	801bc0c <spindle_get_hal+0x64>
                spindle = &sys_spindle[idx].hal;
 801bbfa:	68bb      	ldr	r3, [r7, #8]
 801bbfc:	226c      	movs	r2, #108	; 0x6c
 801bbfe:	fb02 f303 	mul.w	r3, r2, r3
 801bc02:	3328      	adds	r3, #40	; 0x28
 801bc04:	4a1e      	ldr	r2, [pc, #120]	; (801bc80 <spindle_get_hal+0xd8>)
 801bc06:	4413      	add	r3, r2
 801bc08:	3304      	adds	r3, #4
 801bc0a:	60fb      	str	r3, [r7, #12]
        } while(idx && spindle == NULL);
 801bc0c:	68bb      	ldr	r3, [r7, #8]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d02f      	beq.n	801bc72 <spindle_get_hal+0xca>
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d0d6      	beq.n	801bbc6 <spindle_get_hal+0x1e>
 801bc18:	e02b      	b.n	801bc72 <spindle_get_hal+0xca>

    } else if(spindle_id >= 0 && spindle_id < n_spindle && spindles[spindle_id].cfg)
 801bc1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	db27      	blt.n	801bc72 <spindle_get_hal+0xca>
 801bc22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bc26:	4a17      	ldr	r2, [pc, #92]	; (801bc84 <spindle_get_hal+0xdc>)
 801bc28:	7812      	ldrb	r2, [r2, #0]
 801bc2a:	4293      	cmp	r3, r2
 801bc2c:	da21      	bge.n	801bc72 <spindle_get_hal+0xca>
 801bc2e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801bc32:	4915      	ldr	r1, [pc, #84]	; (801bc88 <spindle_get_hal+0xe0>)
 801bc34:	4613      	mov	r3, r2
 801bc36:	00db      	lsls	r3, r3, #3
 801bc38:	4413      	add	r3, r2
 801bc3a:	00db      	lsls	r3, r3, #3
 801bc3c:	440b      	add	r3, r1
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d016      	beq.n	801bc72 <spindle_get_hal+0xca>
        spindle = hal == SpindleHAL_Raw ? (spindle_ptrs_t *)spindles[spindle_id].cfg : &spindles[spindle_id].hal;
 801bc44:	79bb      	ldrb	r3, [r7, #6]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d109      	bne.n	801bc5e <spindle_get_hal+0xb6>
 801bc4a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801bc4e:	490e      	ldr	r1, [pc, #56]	; (801bc88 <spindle_get_hal+0xe0>)
 801bc50:	4613      	mov	r3, r2
 801bc52:	00db      	lsls	r3, r3, #3
 801bc54:	4413      	add	r3, r2
 801bc56:	00db      	lsls	r3, r3, #3
 801bc58:	440b      	add	r3, r1
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	e008      	b.n	801bc70 <spindle_get_hal+0xc8>
 801bc5e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801bc62:	4613      	mov	r3, r2
 801bc64:	00db      	lsls	r3, r3, #3
 801bc66:	4413      	add	r3, r2
 801bc68:	00db      	lsls	r3, r3, #3
 801bc6a:	4a07      	ldr	r2, [pc, #28]	; (801bc88 <spindle_get_hal+0xe0>)
 801bc6c:	4413      	add	r3, r2
 801bc6e:	3304      	adds	r3, #4
 801bc70:	60fb      	str	r3, [r7, #12]

    return spindle;
 801bc72:	68fb      	ldr	r3, [r7, #12]
}
 801bc74:	4618      	mov	r0, r3
 801bc76:	3714      	adds	r7, #20
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7e:	4770      	bx	lr
 801bc80:	20001f4c 	.word	0x20001f4c
 801bc84:	20001f49 	.word	0x20001f49
 801bc88:	20001fb8 	.word	0x20001fb8

0801bc8c <spindle_get_default>:

/*! \brief Get the spindle id of the default spindle (spindle number 0).
\returns spindle id as a \ref spindle_id_t if successful, \a -2 if not (no spindle available).
*/
spindle_id_t spindle_get_default (void)
{
 801bc8c:	b480      	push	{r7}
 801bc8e:	af00      	add	r7, sp, #0
    return sys_spindle[0].enabled ? sys_spindle[0].hal.id : -2;
 801bc90:	4b07      	ldr	r3, [pc, #28]	; (801bcb0 <spindle_get_default+0x24>)
 801bc92:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d003      	beq.n	801bca2 <spindle_get_default+0x16>
 801bc9a:	4b05      	ldr	r3, [pc, #20]	; (801bcb0 <spindle_get_default+0x24>)
 801bc9c:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 801bca0:	e001      	b.n	801bca6 <spindle_get_default+0x1a>
 801bca2:	f06f 0301 	mvn.w	r3, #1
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcae:	4770      	bx	lr
 801bcb0:	20001f4c 	.word	0x20001f4c

0801bcb4 <spindle_get_caps>:
/*! \brief Get the merged spindle capabilities of all registered spindles.
\param active true to return active capabilities, false to return default capabilities.
\returns capabilities in a \ref spindle_cap_t structure.
*/
spindle_cap_t spindle_get_caps (bool active)
{
 801bcb4:	b480      	push	{r7}
 801bcb6:	b085      	sub	sp, #20
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	4603      	mov	r3, r0
 801bcbc:	71fb      	strb	r3, [r7, #7]
    spindle_cap_t caps = {0};
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	723b      	strb	r3, [r7, #8]
    uint_fast8_t idx = n_spindle;
 801bcc2:	4b17      	ldr	r3, [pc, #92]	; (801bd20 <spindle_get_caps+0x6c>)
 801bcc4:	781b      	ldrb	r3, [r3, #0]
 801bcc6:	60fb      	str	r3, [r7, #12]

    do {
        --idx;
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	3b01      	subs	r3, #1
 801bccc:	60fb      	str	r3, [r7, #12]
        caps.value |= (active ? spindles[idx].hal.cap.value : spindles[idx].cfg->cap.value);
 801bcce:	7a3b      	ldrb	r3, [r7, #8]
 801bcd0:	b259      	sxtb	r1, r3
 801bcd2:	79fb      	ldrb	r3, [r7, #7]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d00a      	beq.n	801bcee <spindle_get_caps+0x3a>
 801bcd8:	4812      	ldr	r0, [pc, #72]	; (801bd24 <spindle_get_caps+0x70>)
 801bcda:	68fa      	ldr	r2, [r7, #12]
 801bcdc:	4613      	mov	r3, r2
 801bcde:	00db      	lsls	r3, r3, #3
 801bce0:	4413      	add	r3, r2
 801bce2:	00db      	lsls	r3, r3, #3
 801bce4:	4403      	add	r3, r0
 801bce6:	330d      	adds	r3, #13
 801bce8:	781b      	ldrb	r3, [r3, #0]
 801bcea:	b25b      	sxtb	r3, r3
 801bcec:	e009      	b.n	801bd02 <spindle_get_caps+0x4e>
 801bcee:	480d      	ldr	r0, [pc, #52]	; (801bd24 <spindle_get_caps+0x70>)
 801bcf0:	68fa      	ldr	r2, [r7, #12]
 801bcf2:	4613      	mov	r3, r2
 801bcf4:	00db      	lsls	r3, r3, #3
 801bcf6:	4413      	add	r3, r2
 801bcf8:	00db      	lsls	r3, r3, #3
 801bcfa:	4403      	add	r3, r0
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	7a5b      	ldrb	r3, [r3, #9]
 801bd00:	b25b      	sxtb	r3, r3
 801bd02:	430b      	orrs	r3, r1
 801bd04:	b25b      	sxtb	r3, r3
 801bd06:	b2db      	uxtb	r3, r3
 801bd08:	723b      	strb	r3, [r7, #8]
    } while(idx);
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d1db      	bne.n	801bcc8 <spindle_get_caps+0x14>

    return caps;
 801bd10:	7a3b      	ldrb	r3, [r7, #8]
}
 801bd12:	4618      	mov	r0, r3
 801bd14:	3714      	adds	r7, #20
 801bd16:	46bd      	mov	sp, r7
 801bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd1c:	4770      	bx	lr
 801bd1e:	bf00      	nop
 801bd20:	20001f49 	.word	0x20001f49
 801bd24:	20001fb8 	.word	0x20001fb8

0801bd28 <spindle_update_caps>:
May be used by the driver on spindle initialization or when spindle settings has been changed.
\param spindle pointer to a \ref spindle_ptrs_t structure.
\param pwm_caps pointer to a \ref spindle_pwm_t structure.
*/
void spindle_update_caps (spindle_ptrs_t *spindle, spindle_pwm_t *pwm_caps)
{
 801bd28:	b480      	push	{r7}
 801bd2a:	b085      	sub	sp, #20
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
 801bd30:	6039      	str	r1, [r7, #0]
    uint_fast8_t idx = N_SYS_SPINDLE;
 801bd32:	2301      	movs	r3, #1
 801bd34:	60fb      	str	r3, [r7, #12]

    spindle->type = pwm_caps ? SpindleType_PWM : SpindleType_Basic;
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	bf0c      	ite	eq
 801bd3c:	2301      	moveq	r3, #1
 801bd3e:	2300      	movne	r3, #0
 801bd40:	b2db      	uxtb	r3, r3
 801bd42:	461a      	mov	r2, r3
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	721a      	strb	r2, [r3, #8]
    spindle->cap.laser = !!pwm_caps && !!spindle->update_pwm && settings.mode == Mode_Laser;
 801bd48:	683b      	ldr	r3, [r7, #0]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d009      	beq.n	801bd62 <spindle_update_caps+0x3a>
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d005      	beq.n	801bd62 <spindle_update_caps+0x3a>
 801bd56:	4b32      	ldr	r3, [pc, #200]	; (801be20 <spindle_update_caps+0xf8>)
 801bd58:	7e1b      	ldrb	r3, [r3, #24]
 801bd5a:	2b01      	cmp	r3, #1
 801bd5c:	d101      	bne.n	801bd62 <spindle_update_caps+0x3a>
 801bd5e:	2301      	movs	r3, #1
 801bd60:	e000      	b.n	801bd64 <spindle_update_caps+0x3c>
 801bd62:	2300      	movs	r3, #0
 801bd64:	f003 0301 	and.w	r3, r3, #1
 801bd68:	b2d9      	uxtb	r1, r3
 801bd6a:	687a      	ldr	r2, [r7, #4]
 801bd6c:	7a53      	ldrb	r3, [r2, #9]
 801bd6e:	f361 03c3 	bfi	r3, r1, #3, #1
 801bd72:	7253      	strb	r3, [r2, #9]
    spindle->pwm_off_value = pwm_caps ? pwm_caps->off_value : 0;
 801bd74:	683b      	ldr	r3, [r7, #0]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d002      	beq.n	801bd80 <spindle_update_caps+0x58>
 801bd7a:	683b      	ldr	r3, [r7, #0]
 801bd7c:	685b      	ldr	r3, [r3, #4]
 801bd7e:	e000      	b.n	801bd82 <spindle_update_caps+0x5a>
 801bd80:	2300      	movs	r3, #0
 801bd82:	687a      	ldr	r2, [r7, #4]
 801bd84:	60d3      	str	r3, [r2, #12]

    do {
        idx--;
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	3b01      	subs	r3, #1
 801bd8a:	60fb      	str	r3, [r7, #12]
        if(sys_spindle[idx].enabled && spindle->id == sys_spindle[idx].hal.id) {
 801bd8c:	4a25      	ldr	r2, [pc, #148]	; (801be24 <spindle_update_caps+0xfc>)
 801bd8e:	68fb      	ldr	r3, [r7, #12]
 801bd90:	216c      	movs	r1, #108	; 0x6c
 801bd92:	fb01 f303 	mul.w	r3, r1, r3
 801bd96:	4413      	add	r3, r2
 801bd98:	3368      	adds	r3, #104	; 0x68
 801bd9a:	781b      	ldrb	r3, [r3, #0]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d034      	beq.n	801be0a <spindle_update_caps+0xe2>
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	f993 2000 	ldrsb.w	r2, [r3]
 801bda6:	491f      	ldr	r1, [pc, #124]	; (801be24 <spindle_update_caps+0xfc>)
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	206c      	movs	r0, #108	; 0x6c
 801bdac:	fb00 f303 	mul.w	r3, r0, r3
 801bdb0:	440b      	add	r3, r1
 801bdb2:	332c      	adds	r3, #44	; 0x2c
 801bdb4:	f993 3000 	ldrsb.w	r3, [r3]
 801bdb8:	429a      	cmp	r2, r3
 801bdba:	d126      	bne.n	801be0a <spindle_update_caps+0xe2>
            sys_spindle[idx].hal.type = spindle->type;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	7a18      	ldrb	r0, [r3, #8]
 801bdc0:	4a18      	ldr	r2, [pc, #96]	; (801be24 <spindle_update_caps+0xfc>)
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	216c      	movs	r1, #108	; 0x6c
 801bdc6:	fb01 f303 	mul.w	r3, r1, r3
 801bdca:	4413      	add	r3, r2
 801bdcc:	3334      	adds	r3, #52	; 0x34
 801bdce:	4602      	mov	r2, r0
 801bdd0:	701a      	strb	r2, [r3, #0]
            sys_spindle[idx].hal.cap.laser = spindle->cap.laser;
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	7a5b      	ldrb	r3, [r3, #9]
 801bdd6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801bdda:	b2d9      	uxtb	r1, r3
 801bddc:	4a11      	ldr	r2, [pc, #68]	; (801be24 <spindle_update_caps+0xfc>)
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	206c      	movs	r0, #108	; 0x6c
 801bde2:	fb00 f303 	mul.w	r3, r0, r3
 801bde6:	4413      	add	r3, r2
 801bde8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801bdec:	7953      	ldrb	r3, [r2, #5]
 801bdee:	f361 03c3 	bfi	r3, r1, #3, #1
 801bdf2:	7153      	strb	r3, [r2, #5]
            sys_spindle[idx].hal.pwm_off_value =  spindle->pwm_off_value;
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	68da      	ldr	r2, [r3, #12]
 801bdf8:	490a      	ldr	r1, [pc, #40]	; (801be24 <spindle_update_caps+0xfc>)
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	206c      	movs	r0, #108	; 0x6c
 801bdfe:	fb00 f303 	mul.w	r3, r0, r3
 801be02:	440b      	add	r3, r1
 801be04:	3338      	adds	r3, #56	; 0x38
 801be06:	601a      	str	r2, [r3, #0]
            break;
 801be08:	e003      	b.n	801be12 <spindle_update_caps+0xea>
        }
    } while(idx);
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d1ba      	bne.n	801bd86 <spindle_update_caps+0x5e>
}
 801be10:	bf00      	nop
 801be12:	bf00      	nop
 801be14:	3714      	adds	r7, #20
 801be16:	46bd      	mov	sp, r7
 801be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be1c:	4770      	bx	lr
 801be1e:	bf00      	nop
 801be20:	20001cf0 	.word	0x20001cf0
 801be24:	20001f4c 	.word	0x20001f4c

0801be28 <spindle_get_count>:

/*! \brief Get number of registered spindles.
\returns number of registered spindles.
*/
uint8_t spindle_get_count (void)
{
 801be28:	b580      	push	{r7, lr}
 801be2a:	af00      	add	r7, sp, #0
    if(n_spindle == 0)
 801be2c:	4b05      	ldr	r3, [pc, #20]	; (801be44 <spindle_get_count+0x1c>)
 801be2e:	781b      	ldrb	r3, [r3, #0]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d102      	bne.n	801be3a <spindle_get_count+0x12>
        spindle_select(0);
 801be34:	2000      	movs	r0, #0
 801be36:	f7ff fe83 	bl	801bb40 <spindle_select>

    return n_spindle;
 801be3a:	4b02      	ldr	r3, [pc, #8]	; (801be44 <spindle_get_count+0x1c>)
 801be3c:	781b      	ldrb	r3, [r3, #0]
}
 801be3e:	4618      	mov	r0, r3
 801be40:	bd80      	pop	{r7, pc}
 801be42:	bf00      	nop
 801be44:	20001f49 	.word	0x20001f49

0801be48 <spindle_get_num>:

static spindle_num_t spindle_get_num (spindle_id_t spindle_id)
{
 801be48:	b580      	push	{r7, lr}
 801be4a:	b086      	sub	sp, #24
 801be4c:	af00      	add	r7, sp, #0
 801be4e:	4603      	mov	r3, r0
 801be50:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t idx = N_SPINDLE_SELECTABLE;
 801be52:	2301      	movs	r3, #1
 801be54:	617b      	str	r3, [r7, #20]
    spindle_num_t spindle_num = -1;
 801be56:	23ff      	movs	r3, #255	; 0xff
 801be58:	74fb      	strb	r3, [r7, #19]

    const setting_detail_t *setting;

    do {
        idx--;
 801be5a:	697b      	ldr	r3, [r7, #20]
 801be5c:	3b01      	subs	r3, #1
 801be5e:	617b      	str	r3, [r7, #20]
        if((setting = setting_get_details(idx == 0 ? Setting_SpindleType : (setting_id_t)(Setting_SpindleEnable0 + idx), NULL))) {
 801be60:	697b      	ldr	r3, [r7, #20]
 801be62:	2b00      	cmp	r3, #0
 801be64:	d005      	beq.n	801be72 <spindle_get_num+0x2a>
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	b29b      	uxth	r3, r3
 801be6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801be6e:	b29b      	uxth	r3, r3
 801be70:	e001      	b.n	801be76 <spindle_get_num+0x2e>
 801be72:	f240 138b 	movw	r3, #395	; 0x18b
 801be76:	2100      	movs	r1, #0
 801be78:	4618      	mov	r0, r3
 801be7a:	f7fe fcdd 	bl	801a838 <setting_get_details>
 801be7e:	60f8      	str	r0, [r7, #12]
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	2b00      	cmp	r3, #0
 801be84:	d00a      	beq.n	801be9c <spindle_get_num+0x54>
            if(setting_get_int_value(setting, 0) == spindle_id)
 801be86:	2100      	movs	r1, #0
 801be88:	68f8      	ldr	r0, [r7, #12]
 801be8a:	f7fd fe43 	bl	8019b14 <setting_get_int_value>
 801be8e:	4602      	mov	r2, r0
 801be90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be94:	429a      	cmp	r2, r3
 801be96:	d101      	bne.n	801be9c <spindle_get_num+0x54>
                spindle_num = idx;
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	74fb      	strb	r3, [r7, #19]
        }
    } while(idx && spindle_num == -1);
 801be9c:	697b      	ldr	r3, [r7, #20]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d004      	beq.n	801beac <spindle_get_num+0x64>
 801bea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801beaa:	d0d6      	beq.n	801be5a <spindle_get_num+0x12>

    return spindle_num;
 801beac:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801beb0:	4618      	mov	r0, r3
 801beb2:	3718      	adds	r7, #24
 801beb4:	46bd      	mov	sp, r7
 801beb6:	bd80      	pop	{r7, pc}

0801beb8 <spindle_enumerate_spindles>:
\param callback pointer to a \ref spindle_enumerate_callback_ptr type function.
\param data pointer to optional data to pass to the callback function.
\returns \a true if spindles are registered and a callback function was provided, \a false otherwise.
*/
bool spindle_enumerate_spindles (spindle_enumerate_callback_ptr callback, void *data)
{
 801beb8:	b580      	push	{r7, lr}
 801beba:	b088      	sub	sp, #32
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
 801bec0:	6039      	str	r1, [r7, #0]
    if(callback == NULL || n_spindle == 0)
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d003      	beq.n	801bed0 <spindle_enumerate_spindles+0x18>
 801bec8:	4b29      	ldr	r3, [pc, #164]	; (801bf70 <spindle_enumerate_spindles+0xb8>)
 801beca:	781b      	ldrb	r3, [r3, #0]
 801becc:	2b00      	cmp	r3, #0
 801bece:	d101      	bne.n	801bed4 <spindle_enumerate_spindles+0x1c>
        return false;
 801bed0:	2300      	movs	r3, #0
 801bed2:	e049      	b.n	801bf68 <spindle_enumerate_spindles+0xb0>

    uint_fast8_t idx;
    spindle_info_t spindle;

    for(idx = 0; idx < n_spindle; idx++) {
 801bed4:	2300      	movs	r3, #0
 801bed6:	61fb      	str	r3, [r7, #28]
 801bed8:	e03f      	b.n	801bf5a <spindle_enumerate_spindles+0xa2>

        spindle.id = idx;
 801beda:	69fb      	ldr	r3, [r7, #28]
 801bedc:	b25b      	sxtb	r3, r3
 801bede:	733b      	strb	r3, [r7, #12]
        spindle.name = spindles[idx].name;
 801bee0:	4924      	ldr	r1, [pc, #144]	; (801bf74 <spindle_enumerate_spindles+0xbc>)
 801bee2:	69fa      	ldr	r2, [r7, #28]
 801bee4:	4613      	mov	r3, r2
 801bee6:	00db      	lsls	r3, r3, #3
 801bee8:	4413      	add	r3, r2
 801beea:	00db      	lsls	r3, r3, #3
 801beec:	440b      	add	r3, r1
 801beee:	3340      	adds	r3, #64	; 0x40
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	613b      	str	r3, [r7, #16]
        spindle.hal = &spindles[idx].hal;
 801bef4:	69fa      	ldr	r2, [r7, #28]
 801bef6:	4613      	mov	r3, r2
 801bef8:	00db      	lsls	r3, r3, #3
 801befa:	4413      	add	r3, r2
 801befc:	00db      	lsls	r3, r3, #3
 801befe:	4a1d      	ldr	r2, [pc, #116]	; (801bf74 <spindle_enumerate_spindles+0xbc>)
 801bf00:	4413      	add	r3, r2
 801bf02:	3304      	adds	r3, #4
 801bf04:	61bb      	str	r3, [r7, #24]
        spindle.num = spindle_get_num(idx);
 801bf06:	69fb      	ldr	r3, [r7, #28]
 801bf08:	b25b      	sxtb	r3, r3
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	f7ff ff9c 	bl	801be48 <spindle_get_num>
 801bf10:	4603      	mov	r3, r0
 801bf12:	737b      	strb	r3, [r7, #13]
        spindle.enabled = spindle.num != -1;
 801bf14:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801bf18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf1c:	bf14      	ite	ne
 801bf1e:	2301      	movne	r3, #1
 801bf20:	2300      	moveq	r3, #0
 801bf22:	b2db      	uxtb	r3, r3
 801bf24:	753b      	strb	r3, [r7, #20]
        spindle.is_current = spindle.enabled && sys_spindle[0].hal.id == idx;
 801bf26:	7d3b      	ldrb	r3, [r7, #20]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d008      	beq.n	801bf3e <spindle_enumerate_spindles+0x86>
 801bf2c:	4b12      	ldr	r3, [pc, #72]	; (801bf78 <spindle_enumerate_spindles+0xc0>)
 801bf2e:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 801bf32:	461a      	mov	r2, r3
 801bf34:	69fb      	ldr	r3, [r7, #28]
 801bf36:	4293      	cmp	r3, r2
 801bf38:	d101      	bne.n	801bf3e <spindle_enumerate_spindles+0x86>
 801bf3a:	2301      	movs	r3, #1
 801bf3c:	e000      	b.n	801bf40 <spindle_enumerate_spindles+0x88>
 801bf3e:	2300      	movs	r3, #0
 801bf40:	f003 0301 	and.w	r3, r3, #1
 801bf44:	b2db      	uxtb	r3, r3
 801bf46:	757b      	strb	r3, [r7, #21]

        callback(&spindle, data);
 801bf48:	f107 020c 	add.w	r2, r7, #12
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	6839      	ldr	r1, [r7, #0]
 801bf50:	4610      	mov	r0, r2
 801bf52:	4798      	blx	r3
    for(idx = 0; idx < n_spindle; idx++) {
 801bf54:	69fb      	ldr	r3, [r7, #28]
 801bf56:	3301      	adds	r3, #1
 801bf58:	61fb      	str	r3, [r7, #28]
 801bf5a:	4b05      	ldr	r3, [pc, #20]	; (801bf70 <spindle_enumerate_spindles+0xb8>)
 801bf5c:	781b      	ldrb	r3, [r3, #0]
 801bf5e:	461a      	mov	r2, r3
 801bf60:	69fb      	ldr	r3, [r7, #28]
 801bf62:	4293      	cmp	r3, r2
 801bf64:	d3b9      	bcc.n	801beda <spindle_enumerate_spindles+0x22>
    }

    return true;
 801bf66:	2301      	movs	r3, #1
}
 801bf68:	4618      	mov	r0, r3
 801bf6a:	3720      	adds	r7, #32
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd80      	pop	{r7, pc}
 801bf70:	20001f49 	.word	0x20001f49
 801bf74:	20001fb8 	.word	0x20001fb8
 801bf78:	20001f4c 	.word	0x20001f4c

0801bf7c <spindle_is_enabled>:
/*! \brief Check if a spindle is enabled and available or not.
\param spindle_num spindle number as a \ref spindle_num_t.
\returns \a true if the spindle is enabled, \a false otherwise.
*/
bool spindle_is_enabled (spindle_num_t spindle_num)
{
 801bf7c:	b480      	push	{r7}
 801bf7e:	b083      	sub	sp, #12
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	4603      	mov	r3, r0
 801bf84:	71fb      	strb	r3, [r7, #7]
    if(spindle_num == -1)
 801bf86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf8e:	d101      	bne.n	801bf94 <spindle_is_enabled+0x18>
        spindle_num = 0;
 801bf90:	2300      	movs	r3, #0
 801bf92:	71fb      	strb	r3, [r7, #7]

    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled;
 801bf94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	db10      	blt.n	801bfbe <spindle_is_enabled+0x42>
 801bf9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	dc0c      	bgt.n	801bfbe <spindle_is_enabled+0x42>
 801bfa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bfa8:	4a0a      	ldr	r2, [pc, #40]	; (801bfd4 <spindle_is_enabled+0x58>)
 801bfaa:	216c      	movs	r1, #108	; 0x6c
 801bfac:	fb01 f303 	mul.w	r3, r1, r3
 801bfb0:	4413      	add	r3, r2
 801bfb2:	3368      	adds	r3, #104	; 0x68
 801bfb4:	781b      	ldrb	r3, [r3, #0]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d001      	beq.n	801bfbe <spindle_is_enabled+0x42>
 801bfba:	2301      	movs	r3, #1
 801bfbc:	e000      	b.n	801bfc0 <spindle_is_enabled+0x44>
 801bfbe:	2300      	movs	r3, #0
 801bfc0:	f003 0301 	and.w	r3, r3, #1
 801bfc4:	b2db      	uxtb	r3, r3
}
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	370c      	adds	r7, #12
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfd0:	4770      	bx	lr
 801bfd2:	bf00      	nop
 801bfd4:	20001f4c 	.word	0x20001f4c

0801bfd8 <spindle_get>:
\returns pointer to a \ref spindle_ptrs_t structure if successful, \a NULL if not.

__NOTE:__ do not modify the returned structure!
*/
spindle_ptrs_t *spindle_get (spindle_num_t spindle_num)
{
 801bfd8:	b480      	push	{r7}
 801bfda:	b083      	sub	sp, #12
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	4603      	mov	r3, r0
 801bfe0:	71fb      	strb	r3, [r7, #7]
    return spindle_num >= 0 && spindle_num < N_SYS_SPINDLE && sys_spindle[spindle_num].enabled ? &sys_spindle[spindle_num].hal : NULL;
 801bfe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	db18      	blt.n	801c01c <spindle_get+0x44>
 801bfea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	dc14      	bgt.n	801c01c <spindle_get+0x44>
 801bff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bff6:	4a0d      	ldr	r2, [pc, #52]	; (801c02c <spindle_get+0x54>)
 801bff8:	216c      	movs	r1, #108	; 0x6c
 801bffa:	fb01 f303 	mul.w	r3, r1, r3
 801bffe:	4413      	add	r3, r2
 801c000:	3368      	adds	r3, #104	; 0x68
 801c002:	781b      	ldrb	r3, [r3, #0]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d009      	beq.n	801c01c <spindle_get+0x44>
 801c008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c00c:	226c      	movs	r2, #108	; 0x6c
 801c00e:	fb02 f303 	mul.w	r3, r2, r3
 801c012:	3328      	adds	r3, #40	; 0x28
 801c014:	4a05      	ldr	r2, [pc, #20]	; (801c02c <spindle_get+0x54>)
 801c016:	4413      	add	r3, r2
 801c018:	3304      	adds	r3, #4
 801c01a:	e000      	b.n	801c01e <spindle_get+0x46>
 801c01c:	2300      	movs	r3, #0
}
 801c01e:	4618      	mov	r0, r3
 801c020:	370c      	adds	r7, #12
 801c022:	46bd      	mov	sp, r7
 801c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c028:	4770      	bx	lr
 801c02a:	bf00      	nop
 801c02c:	20001f4c 	.word	0x20001f4c

0801c030 <null_set_state>:
//
// Null (dummy) spindle, automatically installed if no spindles are registered.
//

static void null_set_state (spindle_state_t state, float rpm)
{
 801c030:	b480      	push	{r7}
 801c032:	b083      	sub	sp, #12
 801c034:	af00      	add	r7, sp, #0
 801c036:	7138      	strb	r0, [r7, #4]
 801c038:	ed87 0a00 	vstr	s0, [r7]
    UNUSED(state);
    UNUSED(rpm);
}
 801c03c:	bf00      	nop
 801c03e:	370c      	adds	r7, #12
 801c040:	46bd      	mov	sp, r7
 801c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c046:	4770      	bx	lr

0801c048 <null_get_state>:

static spindle_state_t null_get_state (void)
{
 801c048:	b480      	push	{r7}
 801c04a:	af00      	add	r7, sp, #0
    return (spindle_state_t){0};
 801c04c:	2300      	movs	r3, #0
}
 801c04e:	4618      	mov	r0, r3
 801c050:	46bd      	mov	sp, r7
 801c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c056:	4770      	bx	lr

0801c058 <null_update_pwm>:

// Sets spindle speed
static void null_update_pwm (uint_fast16_t pwm_value)
{
 801c058:	b480      	push	{r7}
 801c05a:	b083      	sub	sp, #12
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6078      	str	r0, [r7, #4]
    UNUSED(pwm_value);
}
 801c060:	bf00      	nop
 801c062:	370c      	adds	r7, #12
 801c064:	46bd      	mov	sp, r7
 801c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c06a:	4770      	bx	lr

0801c06c <null_get_pwm>:

static uint_fast16_t null_get_pwm (float rpm)
{
 801c06c:	b480      	push	{r7}
 801c06e:	b083      	sub	sp, #12
 801c070:	af00      	add	r7, sp, #0
 801c072:	ed87 0a01 	vstr	s0, [r7, #4]
    UNUSED(rpm);

    return 0;
 801c076:	2300      	movs	r3, #0
}
 801c078:	4618      	mov	r0, r3
 801c07a:	370c      	adds	r7, #12
 801c07c:	46bd      	mov	sp, r7
 801c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c082:	4770      	bx	lr

0801c084 <null_update_rpm>:

static void null_update_rpm (float rpm)
{
 801c084:	b480      	push	{r7}
 801c086:	b083      	sub	sp, #12
 801c088:	af00      	add	r7, sp, #0
 801c08a:	ed87 0a01 	vstr	s0, [r7, #4]
    UNUSED(rpm);
}
 801c08e:	bf00      	nop
 801c090:	370c      	adds	r7, #12
 801c092:	46bd      	mov	sp, r7
 801c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c098:	4770      	bx	lr
	...

0801c09c <spindle_add_null>:
/*! \brief Register a null spindle that has no connection to the outside world.
This is done automatically on startup if no spindle can be succesfully enabled.
\returns assigned spindle id as a \ref spindle_id_t if successful, \a -1 if not.
*/
spindle_id_t spindle_add_null (void)
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b082      	sub	sp, #8
 801c0a0:	af00      	add	r7, sp, #0
        .get_pwm = null_get_pwm,
        .update_pwm = null_update_pwm,
        .update_rpm = null_update_rpm
    };

    bool registered = false;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	71fb      	strb	r3, [r7, #7]
    uint_fast8_t idx = n_spindle;
 801c0a6:	4b18      	ldr	r3, [pc, #96]	; (801c108 <spindle_add_null+0x6c>)
 801c0a8:	781b      	ldrb	r3, [r3, #0]
 801c0aa:	603b      	str	r3, [r7, #0]

    if(idx) do {
 801c0ac:	683b      	ldr	r3, [r7, #0]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d018      	beq.n	801c0e4 <spindle_add_null+0x48>
        if((registered = spindles[--idx].hal.type == SpindleType_Null))
 801c0b2:	683b      	ldr	r3, [r7, #0]
 801c0b4:	3b01      	subs	r3, #1
 801c0b6:	603b      	str	r3, [r7, #0]
 801c0b8:	4914      	ldr	r1, [pc, #80]	; (801c10c <spindle_add_null+0x70>)
 801c0ba:	683a      	ldr	r2, [r7, #0]
 801c0bc:	4613      	mov	r3, r2
 801c0be:	00db      	lsls	r3, r3, #3
 801c0c0:	4413      	add	r3, r2
 801c0c2:	00db      	lsls	r3, r3, #3
 801c0c4:	440b      	add	r3, r1
 801c0c6:	330c      	adds	r3, #12
 801c0c8:	781b      	ldrb	r3, [r3, #0]
 801c0ca:	2b05      	cmp	r3, #5
 801c0cc:	bf0c      	ite	eq
 801c0ce:	2301      	moveq	r3, #1
 801c0d0:	2300      	movne	r3, #0
 801c0d2:	71fb      	strb	r3, [r7, #7]
 801c0d4:	79fb      	ldrb	r3, [r7, #7]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d103      	bne.n	801c0e2 <spindle_add_null+0x46>
            break;
    } while(idx);
 801c0da:	683b      	ldr	r3, [r7, #0]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d1e8      	bne.n	801c0b2 <spindle_add_null+0x16>
 801c0e0:	e000      	b.n	801c0e4 <spindle_add_null+0x48>
            break;
 801c0e2:	bf00      	nop

    if(!registered)
 801c0e4:	79fb      	ldrb	r3, [r7, #7]
 801c0e6:	f083 0301 	eor.w	r3, r3, #1
 801c0ea:	b2db      	uxtb	r3, r3
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d005      	beq.n	801c0fc <spindle_add_null+0x60>
        return spindle_register(&spindle, "NULL");
 801c0f0:	4907      	ldr	r1, [pc, #28]	; (801c110 <spindle_add_null+0x74>)
 801c0f2:	4808      	ldr	r0, [pc, #32]	; (801c114 <spindle_add_null+0x78>)
 801c0f4:	f7ff fc9c 	bl	801ba30 <spindle_register>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	e001      	b.n	801c100 <spindle_add_null+0x64>

    return idx;
 801c0fc:	683b      	ldr	r3, [r7, #0]
 801c0fe:	b25b      	sxtb	r3, r3
}
 801c100:	4618      	mov	r0, r3
 801c102:	3708      	adds	r7, #8
 801c104:	46bd      	mov	sp, r7
 801c106:	bd80      	pop	{r7, pc}
 801c108:	20001f49 	.word	0x20001f49
 801c10c:	20001fb8 	.word	0x20001fb8
 801c110:	0803122c 	.word	0x0803122c
 801c114:	08034820 	.word	0x08034820

0801c118 <spindle_set_override>:
\param speed_override override as a percentage of the programmed RPM.

__NOTE:__ Unlike motion overrides, spindle overrides do not require a planner reinitialization.
*/
void spindle_set_override (spindle_ptrs_t *spindle, override_t speed_override)
{
 801c118:	b590      	push	{r4, r7, lr}
 801c11a:	b083      	sub	sp, #12
 801c11c:	af00      	add	r7, sp, #0
 801c11e:	6078      	str	r0, [r7, #4]
 801c120:	6039      	str	r1, [r7, #0]
//    if(speed_override != 100 && sys.override.control.spindle_rpm_disable)
//        return;

    if(speed_override != 100 && spindle->param->state.override_disable)
 801c122:	683b      	ldr	r3, [r7, #0]
 801c124:	2b64      	cmp	r3, #100	; 0x64
 801c126:	d007      	beq.n	801c138 <spindle_set_override+0x20>
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	685b      	ldr	r3, [r3, #4]
 801c12c:	7a1b      	ldrb	r3, [r3, #8]
 801c12e:	f003 0310 	and.w	r3, r3, #16
 801c132:	b2db      	uxtb	r3, r3
 801c134:	2b00      	cmp	r3, #0
 801c136:	d150      	bne.n	801c1da <spindle_set_override+0xc2>
        return;

    speed_override = constrain(speed_override, MIN_SPINDLE_RPM_OVERRIDE, MAX_SPINDLE_RPM_OVERRIDE);
 801c138:	683b      	ldr	r3, [r7, #0]
 801c13a:	2b09      	cmp	r3, #9
 801c13c:	d904      	bls.n	801c148 <spindle_set_override+0x30>
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	2bc8      	cmp	r3, #200	; 0xc8
 801c142:	bf28      	it	cs
 801c144:	23c8      	movcs	r3, #200	; 0xc8
 801c146:	e000      	b.n	801c14a <spindle_set_override+0x32>
 801c148:	230a      	movs	r3, #10
 801c14a:	603b      	str	r3, [r7, #0]

    if ((uint8_t)speed_override != spindle->param->override_pct) {
 801c14c:	683b      	ldr	r3, [r7, #0]
 801c14e:	b2db      	uxtb	r3, r3
 801c150:	461a      	mov	r2, r3
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	685b      	ldr	r3, [r3, #4]
 801c156:	68db      	ldr	r3, [r3, #12]
 801c158:	429a      	cmp	r2, r3
 801c15a:	d03f      	beq.n	801c1dc <spindle_set_override+0xc4>

        spindle->param->override_pct = speed_override;
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	685b      	ldr	r3, [r3, #4]
 801c160:	683a      	ldr	r2, [r7, #0]
 801c162:	60da      	str	r2, [r3, #12]

        if(state_get() == STATE_IDLE)
 801c164:	f000 fddc 	bl	801cd20 <state_get>
 801c168:	4603      	mov	r3, r0
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d10a      	bne.n	801c184 <spindle_set_override+0x6c>
            spindle_set_state(spindle, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 801c16e:	4b1d      	ldr	r3, [pc, #116]	; (801c1e4 <spindle_set_override+0xcc>)
 801c170:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 801c174:	4b1b      	ldr	r3, [pc, #108]	; (801c1e4 <spindle_set_override+0xcc>)
 801c176:	eeb0 0a67 	vmov.f32	s0, s15
 801c17a:	7e99      	ldrb	r1, [r3, #26]
 801c17c:	6878      	ldr	r0, [r7, #4]
 801c17e:	f000 f8a5 	bl	801c2cc <spindle_set_state>
 801c182:	e004      	b.n	801c18e <spindle_set_override+0x76>
        else
            sys.step_control.update_spindle_rpm = On;
 801c184:	4a18      	ldr	r2, [pc, #96]	; (801c1e8 <spindle_set_override+0xd0>)
 801c186:	7e13      	ldrb	r3, [r2, #24]
 801c188:	f043 0308 	orr.w	r3, r3, #8
 801c18c:	7613      	strb	r3, [r2, #24]

        system_add_rt_report(Report_Overrides); // Set to report change immediately
 801c18e:	2040      	movs	r0, #64	; 0x40
 801c190:	f005 fa1a 	bl	80215c8 <system_add_rt_report>

       if(grbl.on_spindle_programmed)
 801c194:	4b15      	ldr	r3, [pc, #84]	; (801c1ec <spindle_set_override+0xd4>)
 801c196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d015      	beq.n	801c1c8 <spindle_set_override+0xb0>
           grbl.on_spindle_programmed(spindle, gc_state.modal.spindle.state, spindle_set_rpm(spindle, gc_state.spindle.rpm, speed_override), gc_state.modal.spindle.rpm_mode);
 801c19c:	4b13      	ldr	r3, [pc, #76]	; (801c1ec <spindle_set_override+0xd4>)
 801c19e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801c1a0:	4b10      	ldr	r3, [pc, #64]	; (801c1e4 <spindle_set_override+0xcc>)
 801c1a2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 801c1a6:	6839      	ldr	r1, [r7, #0]
 801c1a8:	eeb0 0a67 	vmov.f32	s0, s15
 801c1ac:	6878      	ldr	r0, [r7, #4]
 801c1ae:	f000 f9c3 	bl	801c538 <spindle_set_rpm>
 801c1b2:	eef0 7a40 	vmov.f32	s15, s0
 801c1b6:	4b0b      	ldr	r3, [pc, #44]	; (801c1e4 <spindle_set_override+0xcc>)
 801c1b8:	7edb      	ldrb	r3, [r3, #27]
 801c1ba:	490a      	ldr	r1, [pc, #40]	; (801c1e4 <spindle_set_override+0xcc>)
 801c1bc:	461a      	mov	r2, r3
 801c1be:	eeb0 0a67 	vmov.f32	s0, s15
 801c1c2:	7e89      	ldrb	r1, [r1, #26]
 801c1c4:	6878      	ldr	r0, [r7, #4]
 801c1c6:	47a0      	blx	r4

       if(grbl.on_override_changed)
 801c1c8:	4b08      	ldr	r3, [pc, #32]	; (801c1ec <spindle_set_override+0xd4>)
 801c1ca:	6a1b      	ldr	r3, [r3, #32]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d005      	beq.n	801c1dc <spindle_set_override+0xc4>
           grbl.on_override_changed(OverrideChanged_SpindleRPM);
 801c1d0:	4b06      	ldr	r3, [pc, #24]	; (801c1ec <spindle_set_override+0xd4>)
 801c1d2:	6a1b      	ldr	r3, [r3, #32]
 801c1d4:	2000      	movs	r0, #0
 801c1d6:	4798      	blx	r3
 801c1d8:	e000      	b.n	801c1dc <spindle_set_override+0xc4>
        return;
 801c1da:	bf00      	nop
    }
}
 801c1dc:	370c      	adds	r7, #12
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	bd90      	pop	{r4, r7, pc}
 801c1e2:	bf00      	nop
 801c1e4:	2000137c 	.word	0x2000137c
 801c1e8:	20001520 	.word	0x20001520
 801c1ec:	200015b8 	.word	0x200015b8

0801c1f0 <set_state>:
\param state a \ref spindle_state_t structure.
\param rpm the spindle RPM to set.
\returns \a true if successful, \a false if the current controller state is \ref ABORTED.
*/
static bool set_state (spindle_ptrs_t *spindle, spindle_state_t state, float rpm)
{
 801c1f0:	b590      	push	{r4, r7, lr}
 801c1f2:	b085      	sub	sp, #20
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	60f8      	str	r0, [r7, #12]
 801c1f8:	7239      	strb	r1, [r7, #8]
 801c1fa:	ed87 0a01 	vstr	s0, [r7, #4]
    if (!ABORTED) { // Block during abort.
 801c1fe:	4b31      	ldr	r3, [pc, #196]	; (801c2c4 <set_state+0xd4>)
 801c200:	781b      	ldrb	r3, [r3, #0]
 801c202:	f083 0301 	eor.w	r3, r3, #1
 801c206:	b2db      	uxtb	r3, r3
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d043      	beq.n	801c294 <set_state+0xa4>
 801c20c:	4b2d      	ldr	r3, [pc, #180]	; (801c2c4 <set_state+0xd4>)
 801c20e:	785b      	ldrb	r3, [r3, #1]
 801c210:	f083 0301 	eor.w	r3, r3, #1
 801c214:	b2db      	uxtb	r3, r3
 801c216:	2b00      	cmp	r3, #0
 801c218:	d03c      	beq.n	801c294 <set_state+0xa4>

        if (!state.on) { // Halt or set spindle direction and rpm.
 801c21a:	7a3b      	ldrb	r3, [r7, #8]
 801c21c:	f003 0301 	and.w	r3, r3, #1
 801c220:	b2db      	uxtb	r3, r3
 801c222:	2b00      	cmp	r3, #0
 801c224:	d10e      	bne.n	801c244 <set_state+0x54>
            spindle->param->rpm = rpm = 0.0f;
 801c226:	f04f 0300 	mov.w	r3, #0
 801c22a:	607b      	str	r3, [r7, #4]
 801c22c:	68fb      	ldr	r3, [r7, #12]
 801c22e:	685b      	ldr	r3, [r3, #4]
 801c230:	687a      	ldr	r2, [r7, #4]
 801c232:	601a      	str	r2, [r3, #0]
            spindle->set_state((spindle_state_t){0}, 0.0f);
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	69db      	ldr	r3, [r3, #28]
 801c238:	2200      	movs	r2, #0
 801c23a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 801c2c8 <set_state+0xd8>
 801c23e:	4610      	mov	r0, r2
 801c240:	4798      	blx	r3
 801c242:	e020      	b.n	801c286 <set_state+0x96>
        } else {
            // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
            // TODO: alarm/interlock if going from CW to CCW directly in non-laser mode?
            if (spindle->cap.laser && state.ccw)
 801c244:	68fb      	ldr	r3, [r7, #12]
 801c246:	7a5b      	ldrb	r3, [r3, #9]
 801c248:	f003 0308 	and.w	r3, r3, #8
 801c24c:	b2db      	uxtb	r3, r3
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d008      	beq.n	801c264 <set_state+0x74>
 801c252:	7a3b      	ldrb	r3, [r7, #8]
 801c254:	f003 0302 	and.w	r3, r3, #2
 801c258:	b2db      	uxtb	r3, r3
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d002      	beq.n	801c264 <set_state+0x74>
                rpm = 0.0f; // TODO: May need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE);
 801c25e:	f04f 0300 	mov.w	r3, #0
 801c262:	607b      	str	r3, [r7, #4]

            spindle->set_state(state, spindle_set_rpm(spindle, rpm, spindle->param->override_pct));
 801c264:	68fb      	ldr	r3, [r7, #12]
 801c266:	69dc      	ldr	r4, [r3, #28]
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	685b      	ldr	r3, [r3, #4]
 801c26c:	68db      	ldr	r3, [r3, #12]
 801c26e:	4619      	mov	r1, r3
 801c270:	ed97 0a01 	vldr	s0, [r7, #4]
 801c274:	68f8      	ldr	r0, [r7, #12]
 801c276:	f000 f95f 	bl	801c538 <spindle_set_rpm>
 801c27a:	eef0 7a40 	vmov.f32	s15, s0
 801c27e:	eeb0 0a67 	vmov.f32	s0, s15
 801c282:	7a38      	ldrb	r0, [r7, #8]
 801c284:	47a0      	blx	r4
        }

        system_add_rt_report(Report_Spindle); // Set to report change immediately
 801c286:	2010      	movs	r0, #16
 801c288:	f005 f99e 	bl	80215c8 <system_add_rt_report>

        st_rpm_changed(rpm);
 801c28c:	ed97 0a01 	vldr	s0, [r7, #4]
 801c290:	f002 f974 	bl	801e57c <st_rpm_changed>
    }

    return !ABORTED;
 801c294:	4b0b      	ldr	r3, [pc, #44]	; (801c2c4 <set_state+0xd4>)
 801c296:	781b      	ldrb	r3, [r3, #0]
 801c298:	f083 0301 	eor.w	r3, r3, #1
 801c29c:	b2db      	uxtb	r3, r3
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d008      	beq.n	801c2b4 <set_state+0xc4>
 801c2a2:	4b08      	ldr	r3, [pc, #32]	; (801c2c4 <set_state+0xd4>)
 801c2a4:	785b      	ldrb	r3, [r3, #1]
 801c2a6:	f083 0301 	eor.w	r3, r3, #1
 801c2aa:	b2db      	uxtb	r3, r3
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d001      	beq.n	801c2b4 <set_state+0xc4>
 801c2b0:	2301      	movs	r3, #1
 801c2b2:	e000      	b.n	801c2b6 <set_state+0xc6>
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	f003 0301 	and.w	r3, r3, #1
 801c2ba:	b2db      	uxtb	r3, r3
}
 801c2bc:	4618      	mov	r0, r3
 801c2be:	3714      	adds	r7, #20
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bd90      	pop	{r4, r7, pc}
 801c2c4:	20001520 	.word	0x20001520
 801c2c8:	00000000 	.word	0x00000000

0801c2cc <spindle_set_state>:
\param state a \ref spindle_state_t structure.
\param rpm the spindle RPM to set.
\returns \a true if successful, \a false if the current controller state is \ref ABORTED.
*/
bool spindle_set_state (spindle_ptrs_t *spindle, spindle_state_t state, float rpm)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b084      	sub	sp, #16
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	60f8      	str	r0, [r7, #12]
 801c2d4:	7239      	strb	r1, [r7, #8]
 801c2d6:	ed87 0a01 	vstr	s0, [r7, #4]
    return set_state(spindle, state, rpm);
 801c2da:	ed97 0a01 	vldr	s0, [r7, #4]
 801c2de:	7a39      	ldrb	r1, [r7, #8]
 801c2e0:	68f8      	ldr	r0, [r7, #12]
 801c2e2:	f7ff ff85 	bl	801c1f0 <set_state>
 801c2e6:	4603      	mov	r3, r0
}
 801c2e8:	4618      	mov	r0, r3
 801c2ea:	3710      	adds	r7, #16
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	bd80      	pop	{r7, pc}

0801c2f0 <spindle_sync>:
\param state a \ref spindle_state_t structure.
\param rpm the spindle RPM to set.
\returns \a true if successful, \a false if the current controller state is \ref ABORTED.
*/
bool spindle_sync (spindle_ptrs_t *spindle, spindle_state_t state, float rpm)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b086      	sub	sp, #24
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	60f8      	str	r0, [r7, #12]
 801c2f8:	7239      	strb	r1, [r7, #8]
 801c2fa:	ed87 0a01 	vstr	s0, [r7, #4]
    bool ok;

    if (!(ok = state_get() == STATE_CHECK_MODE)) {
 801c2fe:	f000 fd0f 	bl	801cd20 <state_get>
 801c302:	4603      	mov	r3, r0
 801c304:	2b02      	cmp	r3, #2
 801c306:	bf0c      	ite	eq
 801c308:	2301      	moveq	r3, #1
 801c30a:	2300      	movne	r3, #0
 801c30c:	75fb      	strb	r3, [r7, #23]
 801c30e:	7dfb      	ldrb	r3, [r7, #23]
 801c310:	f083 0301 	eor.w	r3, r3, #1
 801c314:	b2db      	uxtb	r3, r3
 801c316:	2b00      	cmp	r3, #0
 801c318:	d076      	beq.n	801c408 <spindle_sync+0x118>

        bool at_speed = !state.on || !spindle->cap.at_speed || settings.spindle.at_speed_tolerance <= 0.0f;
 801c31a:	7a3b      	ldrb	r3, [r7, #8]
 801c31c:	f003 0301 	and.w	r3, r3, #1
 801c320:	b2db      	uxtb	r3, r3
 801c322:	2b00      	cmp	r3, #0
 801c324:	d00e      	beq.n	801c344 <spindle_sync+0x54>
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	7a5b      	ldrb	r3, [r3, #9]
 801c32a:	f003 0304 	and.w	r3, r3, #4
 801c32e:	b2db      	uxtb	r3, r3
 801c330:	2b00      	cmp	r3, #0
 801c332:	d007      	beq.n	801c344 <spindle_sync+0x54>
 801c334:	4b37      	ldr	r3, [pc, #220]	; (801c414 <spindle_sync+0x124>)
 801c336:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 801c33a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c342:	d801      	bhi.n	801c348 <spindle_sync+0x58>
 801c344:	2301      	movs	r3, #1
 801c346:	e000      	b.n	801c34a <spindle_sync+0x5a>
 801c348:	2300      	movs	r3, #0
 801c34a:	75bb      	strb	r3, [r7, #22]
 801c34c:	7dbb      	ldrb	r3, [r7, #22]
 801c34e:	f003 0301 	and.w	r3, r3, #1
 801c352:	75bb      	strb	r3, [r7, #22]

        // Empty planner buffer to ensure spindle is set when programmed.
        if((ok = protocol_buffer_synchronize()) && set_state(spindle, state, rpm) && !at_speed) {
 801c354:	f7f6 fa16 	bl	8012784 <protocol_buffer_synchronize>
 801c358:	4603      	mov	r3, r0
 801c35a:	75fb      	strb	r3, [r7, #23]
 801c35c:	7dfb      	ldrb	r3, [r7, #23]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d04a      	beq.n	801c3f8 <spindle_sync+0x108>
 801c362:	ed97 0a01 	vldr	s0, [r7, #4]
 801c366:	7a39      	ldrb	r1, [r7, #8]
 801c368:	68f8      	ldr	r0, [r7, #12]
 801c36a:	f7ff ff41 	bl	801c1f0 <set_state>
 801c36e:	4603      	mov	r3, r0
 801c370:	2b00      	cmp	r3, #0
 801c372:	d041      	beq.n	801c3f8 <spindle_sync+0x108>
 801c374:	7dbb      	ldrb	r3, [r7, #22]
 801c376:	f083 0301 	eor.w	r3, r3, #1
 801c37a:	b2db      	uxtb	r3, r3
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d03b      	beq.n	801c3f8 <spindle_sync+0x108>
            float on_delay = 0.0f;
 801c380:	f04f 0300 	mov.w	r3, #0
 801c384:	613b      	str	r3, [r7, #16]
            while(!(at_speed = spindle->get_state().at_speed)) {
 801c386:	e025      	b.n	801c3d4 <spindle_sync+0xe4>
                delay_sec(0.2f, DelayMode_Dwell);
 801c388:	2000      	movs	r0, #0
 801c38a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 801c418 <spindle_sync+0x128>
 801c38e:	f7f3 ff59 	bl	8010244 <delay_sec>
                on_delay += 0.2f;
 801c392:	edd7 7a04 	vldr	s15, [r7, #16]
 801c396:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801c418 <spindle_sync+0x128>
 801c39a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c39e:	edc7 7a04 	vstr	s15, [r7, #16]
                if(ABORTED)
 801c3a2:	4b1e      	ldr	r3, [pc, #120]	; (801c41c <spindle_sync+0x12c>)
 801c3a4:	781b      	ldrb	r3, [r3, #0]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d126      	bne.n	801c3f8 <spindle_sync+0x108>
 801c3aa:	4b1c      	ldr	r3, [pc, #112]	; (801c41c <spindle_sync+0x12c>)
 801c3ac:	785b      	ldrb	r3, [r3, #1]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d122      	bne.n	801c3f8 <spindle_sync+0x108>
                    break;
                if(on_delay >= settings.safety_door.spindle_on_delay) {
 801c3b2:	4b18      	ldr	r3, [pc, #96]	; (801c414 <spindle_sync+0x124>)
 801c3b4:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 801c3b8:	ed97 7a04 	vldr	s14, [r7, #16]
 801c3bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3c4:	da00      	bge.n	801c3c8 <spindle_sync+0xd8>
 801c3c6:	e005      	b.n	801c3d4 <spindle_sync+0xe4>
                    gc_spindle_off();
 801c3c8:	f7e9 fa84 	bl	80058d4 <gc_spindle_off>
                    system_raise_alarm(Alarm_Spindle);
 801c3cc:	200e      	movs	r0, #14
 801c3ce:	f005 f88d 	bl	80214ec <system_raise_alarm>
                    break;
 801c3d2:	e011      	b.n	801c3f8 <spindle_sync+0x108>
            while(!(at_speed = spindle->get_state().at_speed)) {
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	6a1b      	ldr	r3, [r3, #32]
 801c3d8:	4798      	blx	r3
 801c3da:	4603      	mov	r3, r0
 801c3dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c3e0:	b2db      	uxtb	r3, r3
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	bf14      	ite	ne
 801c3e6:	2301      	movne	r3, #1
 801c3e8:	2300      	moveq	r3, #0
 801c3ea:	75bb      	strb	r3, [r7, #22]
 801c3ec:	7dbb      	ldrb	r3, [r7, #22]
 801c3ee:	f083 0301 	eor.w	r3, r3, #1
 801c3f2:	b2db      	uxtb	r3, r3
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d1c7      	bne.n	801c388 <spindle_sync+0x98>
                }
            }
        }

        ok &= at_speed;
 801c3f8:	7dfa      	ldrb	r2, [r7, #23]
 801c3fa:	7dbb      	ldrb	r3, [r7, #22]
 801c3fc:	4013      	ands	r3, r2
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	bf14      	ite	ne
 801c402:	2301      	movne	r3, #1
 801c404:	2300      	moveq	r3, #0
 801c406:	75fb      	strb	r3, [r7, #23]
    }

    return ok;
 801c408:	7dfb      	ldrb	r3, [r7, #23]
}
 801c40a:	4618      	mov	r0, r3
 801c40c:	3718      	adds	r7, #24
 801c40e:	46bd      	mov	sp, r7
 801c410:	bd80      	pop	{r7, pc}
 801c412:	bf00      	nop
 801c414:	20001cf0 	.word	0x20001cf0
 801c418:	3e4ccccd 	.word	0x3e4ccccd
 801c41c:	20001520 	.word	0x20001520

0801c420 <spindle_restore>:
\param state a \ref spindle_state_t structure.
\param rpm the spindle RPM to set.
\returns \a true if successful, \a false if the current controller state is \ref ABORTED.
*/
bool spindle_restore (spindle_ptrs_t *spindle, spindle_state_t state, float rpm)
{
 801c420:	b580      	push	{r7, lr}
 801c422:	b086      	sub	sp, #24
 801c424:	af00      	add	r7, sp, #0
 801c426:	60f8      	str	r0, [r7, #12]
 801c428:	7239      	strb	r1, [r7, #8]
 801c42a:	ed87 0a01 	vstr	s0, [r7, #4]
    bool ok = true;
 801c42e:	2301      	movs	r3, #1
 801c430:	75fb      	strb	r3, [r7, #23]

    if(spindle->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	7a5b      	ldrb	r3, [r3, #9]
 801c436:	f003 0308 	and.w	r3, r3, #8
 801c43a:	b2db      	uxtb	r3, r3
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d005      	beq.n	801c44c <spindle_restore+0x2c>
        sys.step_control.update_spindle_rpm = On;
 801c440:	4a3a      	ldr	r2, [pc, #232]	; (801c52c <spindle_restore+0x10c>)
 801c442:	7e13      	ldrb	r3, [r2, #24]
 801c444:	f043 0308 	orr.w	r3, r3, #8
 801c448:	7613      	strb	r3, [r2, #24]
 801c44a:	e069      	b.n	801c520 <spindle_restore+0x100>
    else { // TODO: add check for current spindle state matches restore state?
        spindle_set_state(spindle, state, rpm);
 801c44c:	ed97 0a01 	vldr	s0, [r7, #4]
 801c450:	7a39      	ldrb	r1, [r7, #8]
 801c452:	68f8      	ldr	r0, [r7, #12]
 801c454:	f7ff ff3a 	bl	801c2cc <spindle_set_state>
        if(state.on) {
 801c458:	7a3b      	ldrb	r3, [r7, #8]
 801c45a:	f003 0301 	and.w	r3, r3, #1
 801c45e:	b2db      	uxtb	r3, r3
 801c460:	2b00      	cmp	r3, #0
 801c462:	d05d      	beq.n	801c520 <spindle_restore+0x100>
            if((ok = !spindle->cap.at_speed))
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	7a5b      	ldrb	r3, [r3, #9]
 801c468:	f003 0304 	and.w	r3, r3, #4
 801c46c:	b2db      	uxtb	r3, r3
 801c46e:	2b00      	cmp	r3, #0
 801c470:	bf0c      	ite	eq
 801c472:	2301      	moveq	r3, #1
 801c474:	2300      	movne	r3, #0
 801c476:	75fb      	strb	r3, [r7, #23]
 801c478:	7dfb      	ldrb	r3, [r7, #23]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d008      	beq.n	801c490 <spindle_restore+0x70>
                delay_sec(settings.safety_door.spindle_on_delay, DelayMode_SysSuspend);
 801c47e:	4b2c      	ldr	r3, [pc, #176]	; (801c530 <spindle_restore+0x110>)
 801c480:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 801c484:	2001      	movs	r0, #1
 801c486:	eeb0 0a67 	vmov.f32	s0, s15
 801c48a:	f7f3 fedb 	bl	8010244 <delay_sec>
 801c48e:	e047      	b.n	801c520 <spindle_restore+0x100>
            else if((ok == (settings.spindle.at_speed_tolerance <= 0.0f))) {
 801c490:	7dfb      	ldrb	r3, [r7, #23]
 801c492:	4a27      	ldr	r2, [pc, #156]	; (801c530 <spindle_restore+0x110>)
 801c494:	edd2 7a24 	vldr	s15, [r2, #144]	; 0x90
 801c498:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4a0:	bf94      	ite	ls
 801c4a2:	2201      	movls	r2, #1
 801c4a4:	2200      	movhi	r2, #0
 801c4a6:	b2d2      	uxtb	r2, r2
 801c4a8:	4293      	cmp	r3, r2
 801c4aa:	d139      	bne.n	801c520 <spindle_restore+0x100>
                float delay = 0.0f;
 801c4ac:	f04f 0300 	mov.w	r3, #0
 801c4b0:	613b      	str	r3, [r7, #16]
                while(!(ok = spindle->get_state().at_speed)) {
 801c4b2:	e023      	b.n	801c4fc <spindle_restore+0xdc>
                    delay_sec(0.1f, DelayMode_SysSuspend);
 801c4b4:	2001      	movs	r0, #1
 801c4b6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 801c534 <spindle_restore+0x114>
 801c4ba:	f7f3 fec3 	bl	8010244 <delay_sec>
                    delay += 0.1f;
 801c4be:	edd7 7a04 	vldr	s15, [r7, #16]
 801c4c2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801c534 <spindle_restore+0x114>
 801c4c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c4ca:	edc7 7a04 	vstr	s15, [r7, #16]
                    if(ABORTED)
 801c4ce:	4b17      	ldr	r3, [pc, #92]	; (801c52c <spindle_restore+0x10c>)
 801c4d0:	781b      	ldrb	r3, [r3, #0]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d124      	bne.n	801c520 <spindle_restore+0x100>
 801c4d6:	4b15      	ldr	r3, [pc, #84]	; (801c52c <spindle_restore+0x10c>)
 801c4d8:	785b      	ldrb	r3, [r3, #1]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d120      	bne.n	801c520 <spindle_restore+0x100>
                        break;
                    if(delay >= settings.safety_door.spindle_on_delay) {
 801c4de:	4b14      	ldr	r3, [pc, #80]	; (801c530 <spindle_restore+0x110>)
 801c4e0:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 801c4e4:	ed97 7a04 	vldr	s14, [r7, #16]
 801c4e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4f0:	da00      	bge.n	801c4f4 <spindle_restore+0xd4>
 801c4f2:	e003      	b.n	801c4fc <spindle_restore+0xdc>
                        system_raise_alarm(Alarm_Spindle);
 801c4f4:	200e      	movs	r0, #14
 801c4f6:	f004 fff9 	bl	80214ec <system_raise_alarm>
                        break;
 801c4fa:	e011      	b.n	801c520 <spindle_restore+0x100>
                while(!(ok = spindle->get_state().at_speed)) {
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	6a1b      	ldr	r3, [r3, #32]
 801c500:	4798      	blx	r3
 801c502:	4603      	mov	r3, r0
 801c504:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c508:	b2db      	uxtb	r3, r3
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	bf14      	ite	ne
 801c50e:	2301      	movne	r3, #1
 801c510:	2300      	moveq	r3, #0
 801c512:	75fb      	strb	r3, [r7, #23]
 801c514:	7dfb      	ldrb	r3, [r7, #23]
 801c516:	f083 0301 	eor.w	r3, r3, #1
 801c51a:	b2db      	uxtb	r3, r3
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d1c9      	bne.n	801c4b4 <spindle_restore+0x94>
                }
            }
        }
    }

    return ok;
 801c520:	7dfb      	ldrb	r3, [r7, #23]
}
 801c522:	4618      	mov	r0, r3
 801c524:	3718      	adds	r7, #24
 801c526:	46bd      	mov	sp, r7
 801c528:	bd80      	pop	{r7, pc}
 801c52a:	bf00      	nop
 801c52c:	20001520 	.word	0x20001520
 801c530:	20001cf0 	.word	0x20001cf0
 801c534:	3dcccccd 	.word	0x3dcccccd

0801c538 <spindle_set_rpm>:
\param rpm the programmed RPM.
\param override_pct override value in percent.
\returns the calulated RPM.
*/
float spindle_set_rpm (spindle_ptrs_t *spindle, float rpm, override_t override_pct)
{
 801c538:	b480      	push	{r7}
 801c53a:	b085      	sub	sp, #20
 801c53c:	af00      	add	r7, sp, #0
 801c53e:	60f8      	str	r0, [r7, #12]
 801c540:	ed87 0a02 	vstr	s0, [r7, #8]
 801c544:	6079      	str	r1, [r7, #4]
    if(override_pct != 100)
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	2b64      	cmp	r3, #100	; 0x64
 801c54a:	d00e      	beq.n	801c56a <spindle_set_rpm+0x32>
        rpm *= 0.01f * (float)override_pct; // Scale RPM by override value.
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	ee07 3a90 	vmov	s15, r3
 801c552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c556:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801c5dc <spindle_set_rpm+0xa4>
 801c55a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c55e:	ed97 7a02 	vldr	s14, [r7, #8]
 801c562:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c566:	edc7 7a02 	vstr	s15, [r7, #8]

    // Apply RPM limits
    if (rpm <= 0.0f) // TODO: remove this test?
 801c56a:	edd7 7a02 	vldr	s15, [r7, #8]
 801c56e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c576:	d803      	bhi.n	801c580 <spindle_set_rpm+0x48>
        rpm = 0.0f;
 801c578:	f04f 0300 	mov.w	r3, #0
 801c57c:	60bb      	str	r3, [r7, #8]
 801c57e:	e01a      	b.n	801c5b6 <spindle_set_rpm+0x7e>
    else if (rpm > spindle->rpm_max)
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	edd3 7a05 	vldr	s15, [r3, #20]
 801c586:	ed97 7a02 	vldr	s14, [r7, #8]
 801c58a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c592:	dd03      	ble.n	801c59c <spindle_set_rpm+0x64>
        rpm = spindle->rpm_max;
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	695b      	ldr	r3, [r3, #20]
 801c598:	60bb      	str	r3, [r7, #8]
 801c59a:	e00c      	b.n	801c5b6 <spindle_set_rpm+0x7e>
    else if (rpm < spindle->rpm_min)
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	edd3 7a04 	vldr	s15, [r3, #16]
 801c5a2:	ed97 7a02 	vldr	s14, [r7, #8]
 801c5a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5ae:	d502      	bpl.n	801c5b6 <spindle_set_rpm+0x7e>
        rpm = spindle->rpm_min;
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	691b      	ldr	r3, [r3, #16]
 801c5b4:	60bb      	str	r3, [r7, #8]

    spindle->param->rpm_overridden = rpm;
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	685b      	ldr	r3, [r3, #4]
 801c5ba:	68ba      	ldr	r2, [r7, #8]
 801c5bc:	605a      	str	r2, [r3, #4]
    spindle->param->override_pct = override_pct;
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	685b      	ldr	r3, [r3, #4]
 801c5c2:	687a      	ldr	r2, [r7, #4]
 801c5c4:	60da      	str	r2, [r3, #12]

    return rpm;
 801c5c6:	68bb      	ldr	r3, [r7, #8]
 801c5c8:	ee07 3a90 	vmov	s15, r3
}
 801c5cc:	eeb0 0a67 	vmov.f32	s0, s15
 801c5d0:	3714      	adds	r7, #20
 801c5d2:	46bd      	mov	sp, r7
 801c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5d8:	4770      	bx	lr
 801c5da:	bf00      	nop
 801c5dc:	3c23d70a 	.word	0x3c23d70a

0801c5e0 <spindle_all_off>:

/*! \brief Turn off all enabled spindles.
*/
void spindle_all_off (void)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b082      	sub	sp, #8
 801c5e4:	af00      	add	r7, sp, #0
    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;
 801c5e6:	2301      	movs	r3, #1
 801c5e8:	607b      	str	r3, [r7, #4]
    do {
        if((spindle = spindle_get(--spindle_num))) {
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	3b01      	subs	r3, #1
 801c5ee:	607b      	str	r3, [r7, #4]
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	b25b      	sxtb	r3, r3
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	f7ff fcef 	bl	801bfd8 <spindle_get>
 801c5fa:	6038      	str	r0, [r7, #0]
 801c5fc:	683b      	ldr	r3, [r7, #0]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d013      	beq.n	801c62a <spindle_all_off+0x4a>
            spindle->param->rpm = spindle->param->rpm_overridden = 0.0f;
 801c602:	683b      	ldr	r3, [r7, #0]
 801c604:	685b      	ldr	r3, [r3, #4]
 801c606:	f04f 0200 	mov.w	r2, #0
 801c60a:	605a      	str	r2, [r3, #4]
 801c60c:	683a      	ldr	r2, [r7, #0]
 801c60e:	6852      	ldr	r2, [r2, #4]
 801c610:	685b      	ldr	r3, [r3, #4]
 801c612:	6013      	str	r3, [r2, #0]
            spindle->param->state.value = 0;
 801c614:	683b      	ldr	r3, [r7, #0]
 801c616:	685b      	ldr	r3, [r3, #4]
 801c618:	2200      	movs	r2, #0
 801c61a:	721a      	strb	r2, [r3, #8]
#ifdef GRBL_ESP32
            spindle->esp32_off();
#else
            spindle->set_state((spindle_state_t){0}, 0.0f);
 801c61c:	683b      	ldr	r3, [r7, #0]
 801c61e:	69db      	ldr	r3, [r3, #28]
 801c620:	2200      	movs	r2, #0
 801c622:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801c63c <spindle_all_off+0x5c>
 801c626:	4610      	mov	r0, r2
 801c628:	4798      	blx	r3
#endif
        }
    } while(spindle_num);
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d1dc      	bne.n	801c5ea <spindle_all_off+0xa>
}
 801c630:	bf00      	nop
 801c632:	bf00      	nop
 801c634:	3708      	adds	r7, #8
 801c636:	46bd      	mov	sp, r7
 801c638:	bd80      	pop	{r7, pc}
 801c63a:	bf00      	nop
 801c63c:	00000000 	.word	0x00000000

0801c640 <spindle_is_on>:

/*! \brief Check if any of the enabled spindles is running.
\returns \a true if a spindle is running, \a false otherwise.
*/
bool spindle_is_on (void)
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b084      	sub	sp, #16
 801c644:	af00      	add	r7, sp, #0
    bool on = false;
 801c646:	2300      	movs	r3, #0
 801c648:	73fb      	strb	r3, [r7, #15]

    spindle_ptrs_t *spindle;
    uint_fast8_t spindle_num = N_SYS_SPINDLE;
 801c64a:	2301      	movs	r3, #1
 801c64c:	60bb      	str	r3, [r7, #8]
    do {
        if((spindle = spindle_get(--spindle_num)))
 801c64e:	68bb      	ldr	r3, [r7, #8]
 801c650:	3b01      	subs	r3, #1
 801c652:	60bb      	str	r3, [r7, #8]
 801c654:	68bb      	ldr	r3, [r7, #8]
 801c656:	b25b      	sxtb	r3, r3
 801c658:	4618      	mov	r0, r3
 801c65a:	f7ff fcbd 	bl	801bfd8 <spindle_get>
 801c65e:	6078      	str	r0, [r7, #4]
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d00b      	beq.n	801c67e <spindle_is_on+0x3e>
            on = spindle->get_state().on;
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	6a1b      	ldr	r3, [r3, #32]
 801c66a:	4798      	blx	r3
 801c66c:	4603      	mov	r3, r0
 801c66e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c672:	b2db      	uxtb	r3, r3
 801c674:	2b00      	cmp	r3, #0
 801c676:	bf14      	ite	ne
 801c678:	2301      	movne	r3, #1
 801c67a:	2300      	moveq	r3, #0
 801c67c:	73fb      	strb	r3, [r7, #15]
    } while(spindle_num && !on);
 801c67e:	68bb      	ldr	r3, [r7, #8]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d005      	beq.n	801c690 <spindle_is_on+0x50>
 801c684:	7bfb      	ldrb	r3, [r7, #15]
 801c686:	f083 0301 	eor.w	r3, r3, #1
 801c68a:	b2db      	uxtb	r3, r3
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d1de      	bne.n	801c64e <spindle_is_on+0xe>

    return on;
 801c690:	7bfb      	ldrb	r3, [r7, #15]
}
 801c692:	4618      	mov	r0, r3
 801c694:	3710      	adds	r7, #16
 801c696:	46bd      	mov	sp, r7
 801c698:	bd80      	pop	{r7, pc}

0801c69a <invert_pwm>:
\param pwm_data pointer t a \a spindle_pwm_t structure.
\param pwm_value non inverted PWM value.
\returns the inverted PWM value to use.
*/
static inline uint_fast16_t invert_pwm (spindle_pwm_t *pwm_data, uint_fast16_t pwm_value)
{
 801c69a:	b480      	push	{r7}
 801c69c:	b083      	sub	sp, #12
 801c69e:	af00      	add	r7, sp, #0
 801c6a0:	6078      	str	r0, [r7, #4]
 801c6a2:	6039      	str	r1, [r7, #0]
    return pwm_data->invert_pwm ? pwm_data->period - pwm_value - 1 : pwm_value;
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	7e1b      	ldrb	r3, [r3, #24]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d005      	beq.n	801c6b8 <invert_pwm+0x1e>
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	681a      	ldr	r2, [r3, #0]
 801c6b0:	683b      	ldr	r3, [r7, #0]
 801c6b2:	1ad3      	subs	r3, r2, r3
 801c6b4:	3b01      	subs	r3, #1
 801c6b6:	e000      	b.n	801c6ba <invert_pwm+0x20>
 801c6b8:	683b      	ldr	r3, [r7, #0]
}
 801c6ba:	4618      	mov	r0, r3
 801c6bc:	370c      	adds	r7, #12
 801c6be:	46bd      	mov	sp, r7
 801c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6c4:	4770      	bx	lr
	...

0801c6c8 <spindle_precompute_pwm_values>:
\param pwm_data pointer to a \a spindle_pwm_t structure, to hold the precomputed values.
\param clock_hz timer clock frequency used for PWM generation.
\returns \a true if successful, \a false if no PWM range possible - driver should then revert to simple on/off spindle control.
*/
bool spindle_precompute_pwm_values (spindle_ptrs_t *spindle, spindle_pwm_t *pwm_data, uint32_t clock_hz)
{
 801c6c8:	b580      	push	{r7, lr}
 801c6ca:	b084      	sub	sp, #16
 801c6cc:	af00      	add	r7, sp, #0
 801c6ce:	60f8      	str	r0, [r7, #12]
 801c6d0:	60b9      	str	r1, [r7, #8]
 801c6d2:	607a      	str	r2, [r7, #4]
    if(spindle->rpm_max > spindle->rpm_min) {
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	ed93 7a05 	vldr	s14, [r3, #20]
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	edd3 7a04 	vldr	s15, [r3, #16]
 801c6e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6e8:	f340 8090 	ble.w	801c80c <spindle_precompute_pwm_values+0x144>
        pwm_data->rpm_min = spindle->rpm_min;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	691a      	ldr	r2, [r3, #16]
 801c6f0:	68bb      	ldr	r3, [r7, #8]
 801c6f2:	611a      	str	r2, [r3, #16]
        pwm_data->period = (uint_fast16_t)((float)clock_hz / settings.spindle.pwm_freq);
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	ee07 3a90 	vmov	s15, r3
 801c6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c6fe:	4b4c      	ldr	r3, [pc, #304]	; (801c830 <spindle_precompute_pwm_values+0x168>)
 801c700:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 801c704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c70c:	ee17 2a90 	vmov	r2, s15
 801c710:	68bb      	ldr	r3, [r7, #8]
 801c712:	601a      	str	r2, [r3, #0]
        if(settings.spindle.pwm_off_value == 0.0f)
 801c714:	4b46      	ldr	r3, [pc, #280]	; (801c830 <spindle_precompute_pwm_values+0x168>)
 801c716:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 801c71a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c722:	d10a      	bne.n	801c73a <spindle_precompute_pwm_values+0x72>
            pwm_data->off_value = pwm_data->invert_pwm ? pwm_data->period : 0;
 801c724:	68bb      	ldr	r3, [r7, #8]
 801c726:	7e1b      	ldrb	r3, [r3, #24]
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d002      	beq.n	801c732 <spindle_precompute_pwm_values+0x6a>
 801c72c:	68bb      	ldr	r3, [r7, #8]
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	e000      	b.n	801c734 <spindle_precompute_pwm_values+0x6c>
 801c732:	2300      	movs	r3, #0
 801c734:	68ba      	ldr	r2, [r7, #8]
 801c736:	6053      	str	r3, [r2, #4]
 801c738:	e018      	b.n	801c76c <spindle_precompute_pwm_values+0xa4>
        else
            pwm_data->off_value = invert_pwm(pwm_data, (uint_fast16_t)(pwm_data->period * settings.spindle.pwm_off_value / 100.0f));
 801c73a:	68bb      	ldr	r3, [r7, #8]
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	ee07 3a90 	vmov	s15, r3
 801c742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c746:	4b3a      	ldr	r3, [pc, #232]	; (801c830 <spindle_precompute_pwm_values+0x168>)
 801c748:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 801c74c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c750:	eddf 6a38 	vldr	s13, [pc, #224]	; 801c834 <spindle_precompute_pwm_values+0x16c>
 801c754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c75c:	ee17 1a90 	vmov	r1, s15
 801c760:	68b8      	ldr	r0, [r7, #8]
 801c762:	f7ff ff9a 	bl	801c69a <invert_pwm>
 801c766:	4602      	mov	r2, r0
 801c768:	68bb      	ldr	r3, [r7, #8]
 801c76a:	605a      	str	r2, [r3, #4]
        pwm_data->min_value = (uint_fast16_t)(pwm_data->period * settings.spindle.pwm_min_value / 100.0f);
 801c76c:	68bb      	ldr	r3, [r7, #8]
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	ee07 3a90 	vmov	s15, r3
 801c774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c778:	4b2d      	ldr	r3, [pc, #180]	; (801c830 <spindle_precompute_pwm_values+0x168>)
 801c77a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 801c77e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c782:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801c834 <spindle_precompute_pwm_values+0x16c>
 801c786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c78a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c78e:	ee17 2a90 	vmov	r2, s15
 801c792:	68bb      	ldr	r3, [r7, #8]
 801c794:	609a      	str	r2, [r3, #8]
        pwm_data->max_value = (uint_fast16_t)(pwm_data->period * settings.spindle.pwm_max_value / 100.0f) + pwm_data->offset;
 801c796:	68bb      	ldr	r3, [r7, #8]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	ee07 3a90 	vmov	s15, r3
 801c79e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c7a2:	4b23      	ldr	r3, [pc, #140]	; (801c830 <spindle_precompute_pwm_values+0x168>)
 801c7a4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 801c7a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c7ac:	eddf 6a21 	vldr	s13, [pc, #132]	; 801c834 <spindle_precompute_pwm_values+0x16c>
 801c7b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c7b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c7b8:	ee17 2a90 	vmov	r2, s15
 801c7bc:	68bb      	ldr	r3, [r7, #8]
 801c7be:	69db      	ldr	r3, [r3, #28]
 801c7c0:	441a      	add	r2, r3
 801c7c2:	68bb      	ldr	r3, [r7, #8]
 801c7c4:	60da      	str	r2, [r3, #12]
        pwm_data->pwm_gradient = (float)(pwm_data->max_value - pwm_data->min_value) / (spindle->rpm_max - spindle->rpm_min);
 801c7c6:	68bb      	ldr	r3, [r7, #8]
 801c7c8:	68da      	ldr	r2, [r3, #12]
 801c7ca:	68bb      	ldr	r3, [r7, #8]
 801c7cc:	689b      	ldr	r3, [r3, #8]
 801c7ce:	1ad3      	subs	r3, r2, r3
 801c7d0:	ee07 3a90 	vmov	s15, r3
 801c7d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	ed93 7a05 	vldr	s14, [r3, #20]
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	edd3 7a04 	vldr	s15, [r3, #16]
 801c7e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c7e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	edc3 7a05 	vstr	s15, [r3, #20]
        pwm_data->always_on = settings.spindle.pwm_off_value != 0.0f;
 801c7f2:	4b0f      	ldr	r3, [pc, #60]	; (801c830 <spindle_precompute_pwm_values+0x168>)
 801c7f4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 801c7f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c800:	bf14      	ite	ne
 801c802:	2301      	movne	r3, #1
 801c804:	2300      	moveq	r3, #0
 801c806:	b2da      	uxtb	r2, r3
 801c808:	68bb      	ldr	r3, [r7, #8]
 801c80a:	765a      	strb	r2, [r3, #25]
    }

    spindle->cap.pwm_linearization = pwm_data->n_pieces > 0;
#endif

    return spindle->rpm_max > spindle->rpm_min;
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	ed93 7a05 	vldr	s14, [r3, #20]
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	edd3 7a04 	vldr	s15, [r3, #16]
 801c818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c820:	bfcc      	ite	gt
 801c822:	2301      	movgt	r3, #1
 801c824:	2300      	movle	r3, #0
 801c826:	b2db      	uxtb	r3, r3
}
 801c828:	4618      	mov	r0, r3
 801c82a:	3710      	adds	r7, #16
 801c82c:	46bd      	mov	sp, r7
 801c82e:	bd80      	pop	{r7, pc}
 801c830:	20001cf0 	.word	0x20001cf0
 801c834:	42c80000 	.word	0x42c80000

0801c838 <spindle_compute_pwm_value>:

__NOTE:__ \a spindle_precompute_pwm_values() must be called to precompute values before this function is called.
Typically this is done by the spindle initialization code.
*/
uint_fast16_t spindle_compute_pwm_value (spindle_pwm_t *pwm_data, float rpm, bool pid_limit)
{
 801c838:	b580      	push	{r7, lr}
 801c83a:	b086      	sub	sp, #24
 801c83c:	af00      	add	r7, sp, #0
 801c83e:	60f8      	str	r0, [r7, #12]
 801c840:	ed87 0a02 	vstr	s0, [r7, #8]
 801c844:	460b      	mov	r3, r1
 801c846:	71fb      	strb	r3, [r7, #7]
    uint_fast16_t pwm_value;

    if(rpm > pwm_data->rpm_min) {
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	edd3 7a04 	vldr	s15, [r3, #16]
 801c84e:	ed97 7a02 	vldr	s14, [r7, #8]
 801c852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c85a:	dd3d      	ble.n	801c8d8 <spindle_compute_pwm_value+0xa0>
                }
            } while(idx);
        } else
      #endif
        // Compute intermediate PWM value with linear spindle speed model.
        pwm_value = (uint_fast16_t)floorf((rpm - pwm_data->rpm_min) * pwm_data->pwm_gradient) + pwm_data->min_value;
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	edd3 7a04 	vldr	s15, [r3, #16]
 801c862:	ed97 7a02 	vldr	s14, [r7, #8]
 801c866:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	edd3 7a05 	vldr	s15, [r3, #20]
 801c870:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c874:	eeb0 0a67 	vmov.f32	s0, s15
 801c878:	f00a fb2d 	bl	8026ed6 <floorf>
 801c87c:	eef0 7a40 	vmov.f32	s15, s0
 801c880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c884:	ee17 2a90 	vmov	r2, s15
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	689b      	ldr	r3, [r3, #8]
 801c88c:	4413      	add	r3, r2
 801c88e:	617b      	str	r3, [r7, #20]

        if(pwm_value >= (pid_limit ? pwm_data->period : pwm_data->max_value))
 801c890:	79fb      	ldrb	r3, [r7, #7]
 801c892:	2b00      	cmp	r3, #0
 801c894:	d002      	beq.n	801c89c <spindle_compute_pwm_value+0x64>
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	e001      	b.n	801c8a0 <spindle_compute_pwm_value+0x68>
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	68db      	ldr	r3, [r3, #12]
 801c8a0:	697a      	ldr	r2, [r7, #20]
 801c8a2:	4293      	cmp	r3, r2
 801c8a4:	d80a      	bhi.n	801c8bc <spindle_compute_pwm_value+0x84>
            pwm_value = pid_limit ? pwm_data->period - 1 : pwm_data->max_value;
 801c8a6:	79fb      	ldrb	r3, [r7, #7]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d003      	beq.n	801c8b4 <spindle_compute_pwm_value+0x7c>
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	3b01      	subs	r3, #1
 801c8b2:	e001      	b.n	801c8b8 <spindle_compute_pwm_value+0x80>
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	68db      	ldr	r3, [r3, #12]
 801c8b8:	617b      	str	r3, [r7, #20]
 801c8ba:	e007      	b.n	801c8cc <spindle_compute_pwm_value+0x94>
        else if(pwm_value < pwm_data->min_value)
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	689b      	ldr	r3, [r3, #8]
 801c8c0:	697a      	ldr	r2, [r7, #20]
 801c8c2:	429a      	cmp	r2, r3
 801c8c4:	d202      	bcs.n	801c8cc <spindle_compute_pwm_value+0x94>
            pwm_value = pwm_data->min_value;
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	689b      	ldr	r3, [r3, #8]
 801c8ca:	617b      	str	r3, [r7, #20]

        pwm_value = invert_pwm(pwm_data, pwm_value);
 801c8cc:	6979      	ldr	r1, [r7, #20]
 801c8ce:	68f8      	ldr	r0, [r7, #12]
 801c8d0:	f7ff fee3 	bl	801c69a <invert_pwm>
 801c8d4:	6178      	str	r0, [r7, #20]
 801c8d6:	e011      	b.n	801c8fc <spindle_compute_pwm_value+0xc4>
    } else
        pwm_value = rpm == 0.0f ? pwm_data->off_value : invert_pwm(pwm_data, pwm_data->min_value);
 801c8d8:	edd7 7a02 	vldr	s15, [r7, #8]
 801c8dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8e4:	d102      	bne.n	801c8ec <spindle_compute_pwm_value+0xb4>
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	685b      	ldr	r3, [r3, #4]
 801c8ea:	e006      	b.n	801c8fa <spindle_compute_pwm_value+0xc2>
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	689b      	ldr	r3, [r3, #8]
 801c8f0:	4619      	mov	r1, r3
 801c8f2:	68f8      	ldr	r0, [r7, #12]
 801c8f4:	f7ff fed1 	bl	801c69a <invert_pwm>
 801c8f8:	4603      	mov	r3, r0
 801c8fa:	617b      	str	r3, [r7, #20]

    return pwm_value;
 801c8fc:	697b      	ldr	r3, [r7, #20]
}
 801c8fe:	4618      	mov	r0, r3
 801c900:	3718      	adds	r7, #24
 801c902:	46bd      	mov	sp, r7
 801c904:	bd80      	pop	{r7, pc}

0801c906 <state_spindle_restore>:

// Declare and initialize parking local variables
static parking_data_t park = {0};

static void state_spindle_restore (spindle_t *spindle)
{
 801c906:	b580      	push	{r7, lr}
 801c908:	b082      	sub	sp, #8
 801c90a:	af00      	add	r7, sp, #0
 801c90c:	6078      	str	r0, [r7, #4]
    if(spindle->hal)
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	68db      	ldr	r3, [r3, #12]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d00b      	beq.n	801c92e <state_spindle_restore+0x28>
        spindle_restore(spindle->hal, spindle->state, spindle->rpm);
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	68da      	ldr	r2, [r3, #12]
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	edd3 7a00 	vldr	s15, [r3]
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	eeb0 0a67 	vmov.f32	s0, s15
 801c926:	7919      	ldrb	r1, [r3, #4]
 801c928:	4610      	mov	r0, r2
 801c92a:	f7ff fd79 	bl	801c420 <spindle_restore>
}
 801c92e:	bf00      	nop
 801c930:	3708      	adds	r7, #8
 801c932:	46bd      	mov	sp, r7
 801c934:	bd80      	pop	{r7, pc}

0801c936 <state_spindle_set_state>:

static void state_spindle_set_state (spindle_t *spindle)
{
 801c936:	b580      	push	{r7, lr}
 801c938:	b082      	sub	sp, #8
 801c93a:	af00      	add	r7, sp, #0
 801c93c:	6078      	str	r0, [r7, #4]
    if(spindle->hal)
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	68db      	ldr	r3, [r3, #12]
 801c942:	2b00      	cmp	r3, #0
 801c944:	d00b      	beq.n	801c95e <state_spindle_set_state+0x28>
        spindle_set_state(spindle->hal, spindle->state, spindle->rpm);
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	68da      	ldr	r2, [r3, #12]
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	edd3 7a00 	vldr	s15, [r3]
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	eeb0 0a67 	vmov.f32	s0, s15
 801c956:	7919      	ldrb	r1, [r3, #4]
 801c958:	4610      	mov	r0, r2
 801c95a:	f7ff fcb7 	bl	801c2cc <spindle_set_state>
}
 801c95e:	bf00      	nop
 801c960:	3708      	adds	r7, #8
 801c962:	46bd      	mov	sp, r7
 801c964:	bd80      	pop	{r7, pc}
	...

0801c968 <state_restore_conditions>:

static void state_restore_conditions (restore_condition_t *condition)
{
 801c968:	b590      	push	{r4, r7, lr}
 801c96a:	b085      	sub	sp, #20
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	6078      	str	r0, [r7, #4]
    if (!settings.parking.flags.enabled || !park.flags.restart) {
 801c970:	4b24      	ldr	r3, [pc, #144]	; (801ca04 <state_restore_conditions+0x9c>)
 801c972:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801c976:	f003 0301 	and.w	r3, r3, #1
 801c97a:	b2db      	uxtb	r3, r3
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d006      	beq.n	801c98e <state_restore_conditions+0x26>
 801c980:	4b21      	ldr	r3, [pc, #132]	; (801ca08 <state_restore_conditions+0xa0>)
 801c982:	7f1b      	ldrb	r3, [r3, #28]
 801c984:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c988:	b2db      	uxtb	r3, r3
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d135      	bne.n	801c9fa <state_restore_conditions+0x92>

        spindle_num_t spindle_num = N_SYS_SPINDLE;
 801c98e:	2301      	movs	r3, #1
 801c990:	73fb      	strb	r3, [r7, #15]

        park.flags.restoring = On; //
 801c992:	4a1d      	ldr	r2, [pc, #116]	; (801ca08 <state_restore_conditions+0xa0>)
 801c994:	7f13      	ldrb	r3, [r2, #28]
 801c996:	f043 0308 	orr.w	r3, r3, #8
 801c99a:	7713      	strb	r3, [r2, #28]

        do {
            state_spindle_restore(&condition->spindle[--spindle_num]);
 801c99c:	7bfb      	ldrb	r3, [r7, #15]
 801c99e:	3b01      	subs	r3, #1
 801c9a0:	b2db      	uxtb	r3, r3
 801c9a2:	73fb      	strb	r3, [r7, #15]
 801c9a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c9a8:	011b      	lsls	r3, r3, #4
 801c9aa:	687a      	ldr	r2, [r7, #4]
 801c9ac:	4413      	add	r3, r2
 801c9ae:	3304      	adds	r3, #4
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	f7ff ffa8 	bl	801c906 <state_spindle_restore>
        } while(spindle_num);
 801c9b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d1ee      	bne.n	801c99c <state_restore_conditions+0x34>

        // Block if safety door re-opened during prior restore actions.
        if (gc_state.modal.coolant.value != hal.coolant.get_state().value) {
 801c9be:	4b13      	ldr	r3, [pc, #76]	; (801ca0c <state_restore_conditions+0xa4>)
 801c9c0:	7e5c      	ldrb	r4, [r3, #25]
 801c9c2:	4b13      	ldr	r3, [pc, #76]	; (801ca10 <state_restore_conditions+0xa8>)
 801c9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c9c6:	4798      	blx	r3
 801c9c8:	4603      	mov	r3, r0
 801c9ca:	b2db      	uxtb	r3, r3
 801c9cc:	429c      	cmp	r4, r3
 801c9ce:	d00b      	beq.n	801c9e8 <state_restore_conditions+0x80>
            // NOTE: Laser mode will honor this delay. An exhaust system is often controlled by this signal.
            coolant_set_state(condition->coolant);
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	7818      	ldrb	r0, [r3, #0]
 801c9d4:	f7e8 fbe2 	bl	800519c <coolant_set_state>
            delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801c9d8:	4b0a      	ldr	r3, [pc, #40]	; (801ca04 <state_restore_conditions+0x9c>)
 801c9da:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801c9de:	2001      	movs	r0, #1
 801c9e0:	eeb0 0a67 	vmov.f32	s0, s15
 801c9e4:	f7f3 fc2e 	bl	8010244 <delay_sec>
        }

        park.flags.restoring = Off;
 801c9e8:	4a07      	ldr	r2, [pc, #28]	; (801ca08 <state_restore_conditions+0xa0>)
 801c9ea:	7f13      	ldrb	r3, [r2, #28]
 801c9ec:	f36f 03c3 	bfc	r3, #3, #1
 801c9f0:	7713      	strb	r3, [r2, #28]

        sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801c9f2:	4b08      	ldr	r3, [pc, #32]	; (801ca14 <state_restore_conditions+0xac>)
 801c9f4:	2200      	movs	r2, #0
 801c9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
}
 801c9fa:	bf00      	nop
 801c9fc:	3714      	adds	r7, #20
 801c9fe:	46bd      	mov	sp, r7
 801ca00:	bd90      	pop	{r4, r7, pc}
 801ca02:	bf00      	nop
 801ca04:	20001cf0 	.word	0x20001cf0
 801ca08:	20002020 	.word	0x20002020
 801ca0c:	2000137c 	.word	0x2000137c
 801ca10:	200016a0 	.word	0x200016a0
 801ca14:	20001520 	.word	0x20001520

0801ca18 <enter_sleep>:

static void enter_sleep (void)
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	af00      	add	r7, sp, #0
    st_go_idle();
 801ca1c:	f001 fa66 	bl	801deec <st_go_idle>
    spindle_all_off();
 801ca20:	f7ff fdde 	bl	801c5e0 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 801ca24:	4b06      	ldr	r3, [pc, #24]	; (801ca40 <enter_sleep+0x28>)
 801ca26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca28:	2200      	movs	r2, #0
 801ca2a:	4610      	mov	r0, r2
 801ca2c:	4798      	blx	r3
    grbl.report.feedback_message(Message_SleepMode);
 801ca2e:	4b05      	ldr	r3, [pc, #20]	; (801ca44 <enter_sleep+0x2c>)
 801ca30:	68db      	ldr	r3, [r3, #12]
 801ca32:	200b      	movs	r0, #11
 801ca34:	4798      	blx	r3
    stateHandler = state_noop;
 801ca36:	4b04      	ldr	r3, [pc, #16]	; (801ca48 <enter_sleep+0x30>)
 801ca38:	4a04      	ldr	r2, [pc, #16]	; (801ca4c <enter_sleep+0x34>)
 801ca3a:	601a      	str	r2, [r3, #0]
}
 801ca3c:	bf00      	nop
 801ca3e:	bd80      	pop	{r7, pc}
 801ca40:	200016a0 	.word	0x200016a0
 801ca44:	200015b8 	.word	0x200015b8
 801ca48:	200004fc 	.word	0x200004fc
 801ca4c:	0801d229 	.word	0x0801d229

0801ca50 <initiate_hold>:

static bool initiate_hold (uint_fast16_t new_state)
{
 801ca50:	b590      	push	{r4, r7, lr}
 801ca52:	b087      	sub	sp, #28
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
    spindle_ptrs_t *spindle;
    spindle_num_t spindle_num = N_SYS_SPINDLE;
 801ca58:	2301      	movs	r3, #1
 801ca5a:	75fb      	strb	r3, [r7, #23]

    if (settings.parking.flags.enabled) {
 801ca5c:	4b87      	ldr	r3, [pc, #540]	; (801cc7c <initiate_hold+0x22c>)
 801ca5e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801ca62:	f003 0301 	and.w	r3, r3, #1
 801ca66:	b2db      	uxtb	r3, r3
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d013      	beq.n	801ca94 <initiate_hold+0x44>
        plan_data_init(&park.plan_data);
 801ca6c:	4884      	ldr	r0, [pc, #528]	; (801cc80 <initiate_hold+0x230>)
 801ca6e:	f7f5 f9e5 	bl	8011e3c <plan_data_init>
        park.plan_data.condition.system_motion = On;
 801ca72:	4a84      	ldr	r2, [pc, #528]	; (801cc84 <initiate_hold+0x234>)
 801ca74:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801ca78:	f043 0302 	orr.w	r3, r3, #2
 801ca7c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        park.plan_data.condition.no_feed_override = On;
 801ca80:	4a80      	ldr	r2, [pc, #512]	; (801cc84 <initiate_hold+0x234>)
 801ca82:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 801ca86:	f043 0310 	orr.w	r3, r3, #16
 801ca8a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        park.plan_data.line_number = PARKING_MOTION_LINE_NUMBER;
 801ca8e:	4b7d      	ldr	r3, [pc, #500]	; (801cc84 <initiate_hold+0x234>)
 801ca90:	2200      	movs	r2, #0
 801ca92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    plan_block_t *block = plan_get_current_block();
 801ca94:	f7f4 fc7e 	bl	8011394 <plan_get_current_block>
 801ca98:	6138      	str	r0, [r7, #16]

    restore_condition.spindle_num = 0;
 801ca9a:	4b7b      	ldr	r3, [pc, #492]	; (801cc88 <initiate_hold+0x238>)
 801ca9c:	2200      	movs	r2, #0
 801ca9e:	705a      	strb	r2, [r3, #1]

    do {
        if((spindle = spindle_get(--spindle_num))) {
 801caa0:	7dfb      	ldrb	r3, [r7, #23]
 801caa2:	3b01      	subs	r3, #1
 801caa4:	b2db      	uxtb	r3, r3
 801caa6:	75fb      	strb	r3, [r7, #23]
 801caa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801caac:	4618      	mov	r0, r3
 801caae:	f7ff fa93 	bl	801bfd8 <spindle_get>
 801cab2:	60f8      	str	r0, [r7, #12]
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d068      	beq.n	801cb8c <initiate_hold+0x13c>
            if(block && block->spindle.hal == spindle) {
 801caba:	693b      	ldr	r3, [r7, #16]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d024      	beq.n	801cb0a <initiate_hold+0xba>
 801cac0:	693b      	ldr	r3, [r7, #16]
 801cac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cac4:	68fa      	ldr	r2, [r7, #12]
 801cac6:	429a      	cmp	r2, r3
 801cac8:	d11f      	bne.n	801cb0a <initiate_hold+0xba>
                restore_condition.spindle_num = spindle_num;
 801caca:	4a6f      	ldr	r2, [pc, #444]	; (801cc88 <initiate_hold+0x238>)
 801cacc:	7dfb      	ldrb	r3, [r7, #23]
 801cace:	7053      	strb	r3, [r2, #1]
                restore_condition.spindle[spindle_num].hal = block->spindle.hal;
 801cad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cad4:	693a      	ldr	r2, [r7, #16]
 801cad6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801cad8:	496b      	ldr	r1, [pc, #428]	; (801cc88 <initiate_hold+0x238>)
 801cada:	011b      	lsls	r3, r3, #4
 801cadc:	440b      	add	r3, r1
 801cade:	3310      	adds	r3, #16
 801cae0:	601a      	str	r2, [r3, #0]
                restore_condition.spindle[spindle_num].rpm = block->spindle.rpm;
 801cae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cae6:	693a      	ldr	r2, [r7, #16]
 801cae8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801caea:	4967      	ldr	r1, [pc, #412]	; (801cc88 <initiate_hold+0x238>)
 801caec:	011b      	lsls	r3, r3, #4
 801caee:	440b      	add	r3, r1
 801caf0:	3304      	adds	r3, #4
 801caf2:	601a      	str	r2, [r3, #0]
                restore_condition.spindle[spindle_num].state = block->spindle.state;
 801caf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801caf8:	4a63      	ldr	r2, [pc, #396]	; (801cc88 <initiate_hold+0x238>)
 801cafa:	011b      	lsls	r3, r3, #4
 801cafc:	4413      	add	r3, r2
 801cafe:	3308      	adds	r3, #8
 801cb00:	693a      	ldr	r2, [r7, #16]
 801cb02:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 801cb06:	701a      	strb	r2, [r3, #0]
 801cb08:	e048      	b.n	801cb9c <initiate_hold+0x14c>
            } else if(gc_state.spindle.hal == spindle) {
 801cb0a:	4b60      	ldr	r3, [pc, #384]	; (801cc8c <initiate_hold+0x23c>)
 801cb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb0e:	68fa      	ldr	r2, [r7, #12]
 801cb10:	429a      	cmp	r2, r3
 801cb12:	d11e      	bne.n	801cb52 <initiate_hold+0x102>
                restore_condition.spindle_num = spindle_num;
 801cb14:	4a5c      	ldr	r2, [pc, #368]	; (801cc88 <initiate_hold+0x238>)
 801cb16:	7dfb      	ldrb	r3, [r7, #23]
 801cb18:	7053      	strb	r3, [r2, #1]
                restore_condition.spindle[spindle_num].hal = gc_state.spindle.hal;
 801cb1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb1e:	4a5b      	ldr	r2, [pc, #364]	; (801cc8c <initiate_hold+0x23c>)
 801cb20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801cb22:	4959      	ldr	r1, [pc, #356]	; (801cc88 <initiate_hold+0x238>)
 801cb24:	011b      	lsls	r3, r3, #4
 801cb26:	440b      	add	r3, r1
 801cb28:	3310      	adds	r3, #16
 801cb2a:	601a      	str	r2, [r3, #0]
                restore_condition.spindle[spindle_num].rpm = gc_state.spindle.rpm;
 801cb2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb30:	4a56      	ldr	r2, [pc, #344]	; (801cc8c <initiate_hold+0x23c>)
 801cb32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801cb34:	4954      	ldr	r1, [pc, #336]	; (801cc88 <initiate_hold+0x238>)
 801cb36:	011b      	lsls	r3, r3, #4
 801cb38:	440b      	add	r3, r1
 801cb3a:	3304      	adds	r3, #4
 801cb3c:	601a      	str	r2, [r3, #0]
                restore_condition.spindle[spindle_num].state = gc_state.modal.spindle.state;
 801cb3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb42:	4a51      	ldr	r2, [pc, #324]	; (801cc88 <initiate_hold+0x238>)
 801cb44:	011b      	lsls	r3, r3, #4
 801cb46:	4413      	add	r3, r2
 801cb48:	3308      	adds	r3, #8
 801cb4a:	4a50      	ldr	r2, [pc, #320]	; (801cc8c <initiate_hold+0x23c>)
 801cb4c:	7e92      	ldrb	r2, [r2, #26]
 801cb4e:	701a      	strb	r2, [r3, #0]
 801cb50:	e024      	b.n	801cb9c <initiate_hold+0x14c>
            } else {
                restore_condition.spindle[spindle_num].hal = spindle;
 801cb52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb56:	4a4c      	ldr	r2, [pc, #304]	; (801cc88 <initiate_hold+0x238>)
 801cb58:	011b      	lsls	r3, r3, #4
 801cb5a:	4413      	add	r3, r2
 801cb5c:	3310      	adds	r3, #16
 801cb5e:	68fa      	ldr	r2, [r7, #12]
 801cb60:	601a      	str	r2, [r3, #0]
                restore_condition.spindle[spindle_num].rpm = spindle->param->rpm;
 801cb62:	68fb      	ldr	r3, [r7, #12]
 801cb64:	685a      	ldr	r2, [r3, #4]
 801cb66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb6a:	6812      	ldr	r2, [r2, #0]
 801cb6c:	4946      	ldr	r1, [pc, #280]	; (801cc88 <initiate_hold+0x238>)
 801cb6e:	011b      	lsls	r3, r3, #4
 801cb70:	440b      	add	r3, r1
 801cb72:	3304      	adds	r3, #4
 801cb74:	601a      	str	r2, [r3, #0]
                restore_condition.spindle[spindle_num].state = spindle->param->state;
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	685a      	ldr	r2, [r3, #4]
 801cb7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb7e:	4942      	ldr	r1, [pc, #264]	; (801cc88 <initiate_hold+0x238>)
 801cb80:	011b      	lsls	r3, r3, #4
 801cb82:	440b      	add	r3, r1
 801cb84:	3308      	adds	r3, #8
 801cb86:	7a12      	ldrb	r2, [r2, #8]
 801cb88:	701a      	strb	r2, [r3, #0]
 801cb8a:	e007      	b.n	801cb9c <initiate_hold+0x14c>
            }
        } else
            restore_condition.spindle[spindle_num].hal = NULL;
 801cb8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb90:	4a3d      	ldr	r2, [pc, #244]	; (801cc88 <initiate_hold+0x238>)
 801cb92:	011b      	lsls	r3, r3, #4
 801cb94:	4413      	add	r3, r2
 801cb96:	3310      	adds	r3, #16
 801cb98:	2200      	movs	r2, #0
 801cb9a:	601a      	str	r2, [r3, #0]
    } while(spindle_num);
 801cb9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	f47f af7d 	bne.w	801caa0 <initiate_hold+0x50>

    if (block)
 801cba6:	693b      	ldr	r3, [r7, #16]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d004      	beq.n	801cbb6 <initiate_hold+0x166>
        restore_condition.coolant.mask = block->condition.coolant.mask;
 801cbac:	693b      	ldr	r3, [r7, #16]
 801cbae:	7d9a      	ldrb	r2, [r3, #22]
 801cbb0:	4b35      	ldr	r3, [pc, #212]	; (801cc88 <initiate_hold+0x238>)
 801cbb2:	701a      	strb	r2, [r3, #0]
 801cbb4:	e00a      	b.n	801cbcc <initiate_hold+0x17c>
    else
        restore_condition.coolant.mask = gc_state.modal.coolant.mask | hal.coolant.get_state().mask;
 801cbb6:	4b35      	ldr	r3, [pc, #212]	; (801cc8c <initiate_hold+0x23c>)
 801cbb8:	7e5c      	ldrb	r4, [r3, #25]
 801cbba:	4b35      	ldr	r3, [pc, #212]	; (801cc90 <initiate_hold+0x240>)
 801cbbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cbbe:	4798      	blx	r3
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	b2db      	uxtb	r3, r3
 801cbc4:	4323      	orrs	r3, r4
 801cbc6:	b2da      	uxtb	r2, r3
 801cbc8:	4b2f      	ldr	r3, [pc, #188]	; (801cc88 <initiate_hold+0x238>)
 801cbca:	701a      	strb	r2, [r3, #0]

    if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser && settings.flags.disable_laser_during_hold)
 801cbcc:	4b2e      	ldr	r3, [pc, #184]	; (801cc88 <initiate_hold+0x238>)
 801cbce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801cbd2:	4a2d      	ldr	r2, [pc, #180]	; (801cc88 <initiate_hold+0x238>)
 801cbd4:	011b      	lsls	r3, r3, #4
 801cbd6:	4413      	add	r3, r2
 801cbd8:	3310      	adds	r3, #16
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	7a5b      	ldrb	r3, [r3, #9]
 801cbde:	f003 0308 	and.w	r3, r3, #8
 801cbe2:	b2db      	uxtb	r3, r3
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d00a      	beq.n	801cbfe <initiate_hold+0x1ae>
 801cbe8:	4b24      	ldr	r3, [pc, #144]	; (801cc7c <initiate_hold+0x22c>)
 801cbea:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801cbee:	f003 0310 	and.w	r3, r3, #16
 801cbf2:	b2db      	uxtb	r3, r3
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d002      	beq.n	801cbfe <initiate_hold+0x1ae>
        enqueue_spindle_override(CMD_OVERRIDE_SPINDLE_STOP);
 801cbf8:	209e      	movs	r0, #158	; 0x9e
 801cbfa:	f7f4 f8fb 	bl	8010df4 <enqueue_spindle_override>

    if (sys_state & (STATE_CYCLE|STATE_JOG)) {
 801cbfe:	4b25      	ldr	r3, [pc, #148]	; (801cc94 <initiate_hold+0x244>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d009      	beq.n	801cc1e <initiate_hold+0x1ce>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801cc0a:	f001 fcc7 	bl	801e59c <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801cc0e:	4a22      	ldr	r2, [pc, #136]	; (801cc98 <initiate_hold+0x248>)
 801cc10:	7e13      	ldrb	r3, [r2, #24]
 801cc12:	f043 0302 	orr.w	r3, r3, #2
 801cc16:	7613      	strb	r3, [r2, #24]
        stateHandler = state_await_hold;
 801cc18:	4b20      	ldr	r3, [pc, #128]	; (801cc9c <initiate_hold+0x24c>)
 801cc1a:	4a21      	ldr	r2, [pc, #132]	; (801cca0 <initiate_hold+0x250>)
 801cc1c:	601a      	str	r2, [r3, #0]
    }

    if (new_state == STATE_HOLD)
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	2b10      	cmp	r3, #16
 801cc22:	d104      	bne.n	801cc2e <initiate_hold+0x1de>
        sys.holding_state = Hold_Pending;
 801cc24:	4b1c      	ldr	r3, [pc, #112]	; (801cc98 <initiate_hold+0x248>)
 801cc26:	2202      	movs	r2, #2
 801cc28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 801cc2c:	e006      	b.n	801cc3c <initiate_hold+0x1ec>
    else {
        sys.parking_state = Parking_Retracting;
 801cc2e:	4b1a      	ldr	r3, [pc, #104]	; (801cc98 <initiate_hold+0x248>)
 801cc30:	2202      	movs	r2, #2
 801cc32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        park.flags.value = 0;
 801cc36:	4b13      	ldr	r3, [pc, #76]	; (801cc84 <initiate_hold+0x234>)
 801cc38:	2200      	movs	r2, #0
 801cc3a:	771a      	strb	r2, [r3, #28]
    }

    sys.suspend = !sys.flags.soft_limit;
 801cc3c:	4b16      	ldr	r3, [pc, #88]	; (801cc98 <initiate_hold+0x248>)
 801cc3e:	7d9b      	ldrb	r3, [r3, #22]
 801cc40:	f003 0304 	and.w	r3, r3, #4
 801cc44:	b2db      	uxtb	r3, r3
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	bf0c      	ite	eq
 801cc4a:	2301      	moveq	r3, #1
 801cc4c:	2300      	movne	r3, #0
 801cc4e:	b2da      	uxtb	r2, r3
 801cc50:	4b11      	ldr	r3, [pc, #68]	; (801cc98 <initiate_hold+0x248>)
 801cc52:	709a      	strb	r2, [r3, #2]
    pending_state = sys_state == STATE_JOG ? new_state : STATE_IDLE;
 801cc54:	4b0f      	ldr	r3, [pc, #60]	; (801cc94 <initiate_hold+0x244>)
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	2b20      	cmp	r3, #32
 801cc5a:	d101      	bne.n	801cc60 <initiate_hold+0x210>
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	e000      	b.n	801cc62 <initiate_hold+0x212>
 801cc60:	2300      	movs	r3, #0
 801cc62:	4a10      	ldr	r2, [pc, #64]	; (801cca4 <initiate_hold+0x254>)
 801cc64:	6013      	str	r3, [r2, #0]

    return sys_state == STATE_CYCLE;
 801cc66:	4b0b      	ldr	r3, [pc, #44]	; (801cc94 <initiate_hold+0x244>)
 801cc68:	681b      	ldr	r3, [r3, #0]
 801cc6a:	2b08      	cmp	r3, #8
 801cc6c:	bf0c      	ite	eq
 801cc6e:	2301      	moveq	r3, #1
 801cc70:	2300      	movne	r3, #0
 801cc72:	b2db      	uxtb	r3, r3
}
 801cc74:	4618      	mov	r0, r3
 801cc76:	371c      	adds	r7, #28
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	bd90      	pop	{r4, r7, pc}
 801cc7c:	20001cf0 	.word	0x20001cf0
 801cc80:	20002040 	.word	0x20002040
 801cc84:	20002020 	.word	0x20002020
 801cc88:	20002004 	.word	0x20002004
 801cc8c:	2000137c 	.word	0x2000137c
 801cc90:	200016a0 	.word	0x200016a0
 801cc94:	2000201c 	.word	0x2000201c
 801cc98:	20001520 	.word	0x20001520
 801cc9c:	200004fc 	.word	0x200004fc
 801cca0:	0801d44d 	.word	0x0801d44d
 801cca4:	20002018 	.word	0x20002018

0801cca8 <state_door_reopened>:

bool state_door_reopened (void)
{
 801cca8:	b480      	push	{r7}
 801ccaa:	af00      	add	r7, sp, #0
    return settings.parking.flags.enabled && park.flags.restart;
 801ccac:	4b0c      	ldr	r3, [pc, #48]	; (801cce0 <state_door_reopened+0x38>)
 801ccae:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801ccb2:	f003 0301 	and.w	r3, r3, #1
 801ccb6:	b2db      	uxtb	r3, r3
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d008      	beq.n	801ccce <state_door_reopened+0x26>
 801ccbc:	4b09      	ldr	r3, [pc, #36]	; (801cce4 <state_door_reopened+0x3c>)
 801ccbe:	7f1b      	ldrb	r3, [r3, #28]
 801ccc0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801ccc4:	b2db      	uxtb	r3, r3
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d001      	beq.n	801ccce <state_door_reopened+0x26>
 801ccca:	2301      	movs	r3, #1
 801cccc:	e000      	b.n	801ccd0 <state_door_reopened+0x28>
 801ccce:	2300      	movs	r3, #0
 801ccd0:	f003 0301 	and.w	r3, r3, #1
 801ccd4:	b2db      	uxtb	r3, r3
}
 801ccd6:	4618      	mov	r0, r3
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccde:	4770      	bx	lr
 801cce0:	20001cf0 	.word	0x20001cf0
 801cce4:	20002020 	.word	0x20002020

0801cce8 <state_update>:

void state_update (rt_exec_t rt_exec)
{
 801cce8:	b580      	push	{r7, lr}
 801ccea:	b082      	sub	sp, #8
 801ccec:	af00      	add	r7, sp, #0
 801ccee:	6078      	str	r0, [r7, #4]
    if((rt_exec & EXEC_SAFETY_DOOR) && sys_state != STATE_SAFETY_DOOR)
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d006      	beq.n	801cd08 <state_update+0x20>
 801ccfa:	4b07      	ldr	r3, [pc, #28]	; (801cd18 <state_update+0x30>)
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	2b40      	cmp	r3, #64	; 0x40
 801cd00:	d002      	beq.n	801cd08 <state_update+0x20>
        state_set(STATE_SAFETY_DOOR);
 801cd02:	2040      	movs	r0, #64	; 0x40
 801cd04:	f000 f818 	bl	801cd38 <state_set>

    stateHandler(rt_exec);
 801cd08:	4b04      	ldr	r3, [pc, #16]	; (801cd1c <state_update+0x34>)
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	6878      	ldr	r0, [r7, #4]
 801cd0e:	4798      	blx	r3
}
 801cd10:	bf00      	nop
 801cd12:	3708      	adds	r7, #8
 801cd14:	46bd      	mov	sp, r7
 801cd16:	bd80      	pop	{r7, pc}
 801cd18:	2000201c 	.word	0x2000201c
 801cd1c:	200004fc 	.word	0x200004fc

0801cd20 <state_get>:

ISR_CODE sys_state_t ISR_FUNC(state_get)(void)
{
 801cd20:	b480      	push	{r7}
 801cd22:	af00      	add	r7, sp, #0
    return sys_state;
 801cd24:	4b03      	ldr	r3, [pc, #12]	; (801cd34 <state_get+0x14>)
 801cd26:	681b      	ldr	r3, [r3, #0]
}
 801cd28:	4618      	mov	r0, r3
 801cd2a:	46bd      	mov	sp, r7
 801cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd30:	4770      	bx	lr
 801cd32:	bf00      	nop
 801cd34:	2000201c 	.word	0x2000201c

0801cd38 <state_set>:

    return substate;
}

void state_set (sys_state_t new_state)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b086      	sub	sp, #24
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	6078      	str	r0, [r7, #4]
    if(new_state != sys_state) {
 801cd40:	4ba2      	ldr	r3, [pc, #648]	; (801cfcc <state_set+0x294>)
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	687a      	ldr	r2, [r7, #4]
 801cd46:	429a      	cmp	r2, r3
 801cd48:	f000 81b4 	beq.w	801d0b4 <state_set+0x37c>

        sys_state_t org_state = sys_state;
 801cd4c:	4b9f      	ldr	r3, [pc, #636]	; (801cfcc <state_set+0x294>)
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	617b      	str	r3, [r7, #20]

        switch(new_state) {    // Set up new state and handler
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd58:	f000 80f4 	beq.w	801cf44 <state_set+0x20c>
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cd62:	f200 818b 	bhi.w	801d07c <state_set+0x344>
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cd6c:	f000 8177 	beq.w	801d05e <state_set+0x326>
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cd76:	f200 8181 	bhi.w	801d07c <state_set+0x344>
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	2b80      	cmp	r3, #128	; 0x80
 801cd7e:	f000 8146 	beq.w	801d00e <state_set+0x2d6>
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	2b80      	cmp	r3, #128	; 0x80
 801cd86:	f200 8179 	bhi.w	801d07c <state_set+0x344>
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	2b20      	cmp	r3, #32
 801cd8e:	d849      	bhi.n	801ce24 <state_set+0xec>
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	2b20      	cmp	r3, #32
 801cd94:	f200 8172 	bhi.w	801d07c <state_set+0x344>
 801cd98:	a201      	add	r2, pc, #4	; (adr r2, 801cda0 <state_set+0x68>)
 801cd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd9e:	bf00      	nop
 801cda0:	0801ce2f 	.word	0x0801ce2f
 801cda4:	0801d05f 	.word	0x0801d05f
 801cda8:	0801d05f 	.word	0x0801d05f
 801cdac:	0801d07d 	.word	0x0801d07d
 801cdb0:	0801d05f 	.word	0x0801d05f
 801cdb4:	0801d07d 	.word	0x0801d07d
 801cdb8:	0801d07d 	.word	0x0801d07d
 801cdbc:	0801d07d 	.word	0x0801d07d
 801cdc0:	0801ce67 	.word	0x0801ce67
 801cdc4:	0801d07d 	.word	0x0801d07d
 801cdc8:	0801d07d 	.word	0x0801d07d
 801cdcc:	0801d07d 	.word	0x0801d07d
 801cdd0:	0801d07d 	.word	0x0801d07d
 801cdd4:	0801d07d 	.word	0x0801d07d
 801cdd8:	0801d07d 	.word	0x0801d07d
 801cddc:	0801d07d 	.word	0x0801d07d
 801cde0:	0801cf53 	.word	0x0801cf53
 801cde4:	0801d07d 	.word	0x0801d07d
 801cde8:	0801d07d 	.word	0x0801d07d
 801cdec:	0801d07d 	.word	0x0801d07d
 801cdf0:	0801d07d 	.word	0x0801d07d
 801cdf4:	0801d07d 	.word	0x0801d07d
 801cdf8:	0801d07d 	.word	0x0801d07d
 801cdfc:	0801d07d 	.word	0x0801d07d
 801ce00:	0801d07d 	.word	0x0801d07d
 801ce04:	0801d07d 	.word	0x0801d07d
 801ce08:	0801d07d 	.word	0x0801d07d
 801ce0c:	0801d07d 	.word	0x0801d07d
 801ce10:	0801d07d 	.word	0x0801d07d
 801ce14:	0801d07d 	.word	0x0801d07d
 801ce18:	0801d07d 	.word	0x0801d07d
 801ce1c:	0801d07d 	.word	0x0801d07d
 801ce20:	0801cf25 	.word	0x0801cf25
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	2b40      	cmp	r3, #64	; 0x40
 801ce28:	f000 80e6 	beq.w	801cff8 <state_set+0x2c0>
 801ce2c:	e126      	b.n	801d07c <state_set+0x344>

            case STATE_IDLE:
                sys.suspend = false;        // Break suspend state.
 801ce2e:	4b68      	ldr	r3, [pc, #416]	; (801cfd0 <state_set+0x298>)
 801ce30:	2200      	movs	r2, #0
 801ce32:	709a      	strb	r2, [r3, #2]
                sys.step_control.flags = 0; // Restore step control to normal operation.
 801ce34:	4b66      	ldr	r3, [pc, #408]	; (801cfd0 <state_set+0x298>)
 801ce36:	2200      	movs	r2, #0
 801ce38:	761a      	strb	r2, [r3, #24]
                sys.parking_state = Parking_DoorClosed;
 801ce3a:	4b65      	ldr	r3, [pc, #404]	; (801cfd0 <state_set+0x298>)
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                sys.holding_state = Hold_NotHolding;
 801ce42:	4b63      	ldr	r3, [pc, #396]	; (801cfd0 <state_set+0x298>)
 801ce44:	2200      	movs	r2, #0
 801ce46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                sys_state = pending_state = new_state;
 801ce4a:	4a62      	ldr	r2, [pc, #392]	; (801cfd4 <state_set+0x29c>)
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	6013      	str	r3, [r2, #0]
 801ce50:	4b60      	ldr	r3, [pc, #384]	; (801cfd4 <state_set+0x29c>)
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	4a5d      	ldr	r2, [pc, #372]	; (801cfcc <state_set+0x294>)
 801ce56:	6013      	str	r3, [r2, #0]
                park.flags.value = 0;
 801ce58:	4b5f      	ldr	r3, [pc, #380]	; (801cfd8 <state_set+0x2a0>)
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	771a      	strb	r2, [r3, #28]
                stateHandler = state_idle;
 801ce5e:	4b5f      	ldr	r3, [pc, #380]	; (801cfdc <state_set+0x2a4>)
 801ce60:	4a5f      	ldr	r2, [pc, #380]	; (801cfe0 <state_set+0x2a8>)
 801ce62:	601a      	str	r2, [r3, #0]
                break;
 801ce64:	e10a      	b.n	801d07c <state_set+0x344>

            case STATE_CYCLE:
                if (sys_state == STATE_IDLE) {
 801ce66:	4b59      	ldr	r3, [pc, #356]	; (801cfcc <state_set+0x294>)
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	f040 8101 	bne.w	801d072 <state_set+0x33a>
                    // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
                    plan_block_t *block;
                    if ((block = plan_get_current_block())) {
 801ce70:	f7f4 fa90 	bl	8011394 <plan_get_current_block>
 801ce74:	6138      	str	r0, [r7, #16]
 801ce76:	693b      	ldr	r3, [r7, #16]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	f000 80fa 	beq.w	801d072 <state_set+0x33a>
                        sys_state = new_state;
 801ce7e:	4a53      	ldr	r2, [pc, #332]	; (801cfcc <state_set+0x294>)
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	6013      	str	r3, [r2, #0]
                        sys.steppers_deenergize = false;    // Cancel stepper deenergize if pending.
 801ce84:	4b52      	ldr	r3, [pc, #328]	; (801cfd0 <state_set+0x298>)
 801ce86:	2200      	movs	r2, #0
 801ce88:	719a      	strb	r2, [r3, #6]
                        st_prep_buffer();                   // Initialize step segment buffer before beginning cycle.
 801ce8a:	f001 fc37 	bl	801e6fc <st_prep_buffer>
                        if (block->spindle.state.synchronized) {
 801ce8e:	693b      	ldr	r3, [r7, #16]
 801ce90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ce94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801ce98:	b2db      	uxtb	r3, r3
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d03c      	beq.n	801cf18 <state_set+0x1e0>

                            uint32_t ms = hal.get_elapsed_ticks();
 801ce9e:	4b51      	ldr	r3, [pc, #324]	; (801cfe4 <state_set+0x2ac>)
 801cea0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801cea4:	4798      	blx	r3
 801cea6:	60f8      	str	r0, [r7, #12]

                            if (block->spindle.hal->reset_data)
 801cea8:	693b      	ldr	r3, [r7, #16]
 801ceaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ceac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d003      	beq.n	801ceba <state_set+0x182>
                                block->spindle.hal->reset_data();
 801ceb2:	693b      	ldr	r3, [r7, #16]
 801ceb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ceb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ceb8:	4798      	blx	r3

                            uint32_t index = block->spindle.hal->get_data(SpindleData_Counters)->index_count + 2;
 801ceba:	693b      	ldr	r3, [r7, #16]
 801cebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cec0:	2000      	movs	r0, #0
 801cec2:	4798      	blx	r3
 801cec4:	4603      	mov	r3, r0
 801cec6:	695b      	ldr	r3, [r3, #20]
 801cec8:	3302      	adds	r3, #2
 801ceca:	60bb      	str	r3, [r7, #8]

                            while(index != block->spindle.hal->get_data(SpindleData_Counters)->index_count) {
 801cecc:	e01a      	b.n	801cf04 <state_set+0x1cc>

                                if(hal.get_elapsed_ticks() - ms > 5000) {
 801cece:	4b45      	ldr	r3, [pc, #276]	; (801cfe4 <state_set+0x2ac>)
 801ced0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801ced4:	4798      	blx	r3
 801ced6:	4602      	mov	r2, r0
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	1ad3      	subs	r3, r2, r3
 801cedc:	f241 3288 	movw	r2, #5000	; 0x1388
 801cee0:	4293      	cmp	r3, r2
 801cee2:	d903      	bls.n	801ceec <state_set+0x1b4>
                                    system_raise_alarm(Alarm_Spindle);
 801cee4:	200e      	movs	r0, #14
 801cee6:	f004 fb01 	bl	80214ec <system_raise_alarm>
                                    return;
 801ceea:	e0e3      	b.n	801d0b4 <state_set+0x37c>
                                }

                                if(sys.rt_exec_state & (EXEC_RESET|EXEC_STOP)) {
 801ceec:	4b38      	ldr	r3, [pc, #224]	; (801cfd0 <state_set+0x298>)
 801ceee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cef0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d005      	beq.n	801cf04 <state_set+0x1cc>
                                    system_set_exec_state_flag(EXEC_RESET);
 801cef8:	4b3a      	ldr	r3, [pc, #232]	; (801cfe4 <state_set+0x2ac>)
 801cefa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cefc:	2120      	movs	r1, #32
 801cefe:	483a      	ldr	r0, [pc, #232]	; (801cfe8 <state_set+0x2b0>)
 801cf00:	4798      	blx	r3
                                    return;
 801cf02:	e0d7      	b.n	801d0b4 <state_set+0x37c>
                            while(index != block->spindle.hal->get_data(SpindleData_Counters)->index_count) {
 801cf04:	693b      	ldr	r3, [r7, #16]
 801cf06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cf0a:	2000      	movs	r0, #0
 801cf0c:	4798      	blx	r3
 801cf0e:	4603      	mov	r3, r0
 801cf10:	695b      	ldr	r3, [r3, #20]
 801cf12:	68ba      	ldr	r2, [r7, #8]
 801cf14:	429a      	cmp	r2, r3
 801cf16:	d1da      	bne.n	801cece <state_set+0x196>
                                }
                                // TODO: allow real time reporting?
                            }

                        }
                        st_wake_up();
 801cf18:	f000 ffd4 	bl	801dec4 <st_wake_up>
                        stateHandler = state_cycle;
 801cf1c:	4b2f      	ldr	r3, [pc, #188]	; (801cfdc <state_set+0x2a4>)
 801cf1e:	4a33      	ldr	r2, [pc, #204]	; (801cfec <state_set+0x2b4>)
 801cf20:	601a      	str	r2, [r3, #0]
                    }
                }
                break;
 801cf22:	e0a6      	b.n	801d072 <state_set+0x33a>

            case STATE_JOG:
                if (sys_state == STATE_TOOL_CHANGE)
 801cf24:	4b29      	ldr	r3, [pc, #164]	; (801cfcc <state_set+0x294>)
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf2c:	d103      	bne.n	801cf36 <state_set+0x1fe>
                    pending_state = STATE_TOOL_CHANGE;
 801cf2e:	4b29      	ldr	r3, [pc, #164]	; (801cfd4 <state_set+0x29c>)
 801cf30:	f44f 7200 	mov.w	r2, #512	; 0x200
 801cf34:	601a      	str	r2, [r3, #0]
                sys_state = new_state;
 801cf36:	4a25      	ldr	r2, [pc, #148]	; (801cfcc <state_set+0x294>)
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	6013      	str	r3, [r2, #0]
                stateHandler = state_cycle;
 801cf3c:	4b27      	ldr	r3, [pc, #156]	; (801cfdc <state_set+0x2a4>)
 801cf3e:	4a2b      	ldr	r2, [pc, #172]	; (801cfec <state_set+0x2b4>)
 801cf40:	601a      	str	r2, [r3, #0]
                break;
 801cf42:	e09b      	b.n	801d07c <state_set+0x344>

            case STATE_TOOL_CHANGE:
                sys_state = new_state;
 801cf44:	4a21      	ldr	r2, [pc, #132]	; (801cfcc <state_set+0x294>)
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	6013      	str	r3, [r2, #0]
                stateHandler = state_await_toolchanged;
 801cf4a:	4b24      	ldr	r3, [pc, #144]	; (801cfdc <state_set+0x2a4>)
 801cf4c:	4a28      	ldr	r2, [pc, #160]	; (801cff0 <state_set+0x2b8>)
 801cf4e:	601a      	str	r2, [r3, #0]
                break;
 801cf50:	e094      	b.n	801d07c <state_set+0x344>

            case STATE_HOLD:
                if (sys.override.control.sync && sys.override.control.feed_hold_disable)
 801cf52:	4b1f      	ldr	r3, [pc, #124]	; (801cfd0 <state_set+0x298>)
 801cf54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cf58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801cf5c:	b2db      	uxtb	r3, r3
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d00c      	beq.n	801cf7c <state_set+0x244>
 801cf62:	4b1b      	ldr	r3, [pc, #108]	; (801cfd0 <state_set+0x298>)
 801cf64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cf68:	f003 0302 	and.w	r3, r3, #2
 801cf6c:	b2db      	uxtb	r3, r3
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d004      	beq.n	801cf7c <state_set+0x244>
                    sys.flags.feed_hold_pending = On;
 801cf72:	4a17      	ldr	r2, [pc, #92]	; (801cfd0 <state_set+0x298>)
 801cf74:	7d93      	ldrb	r3, [r2, #22]
 801cf76:	f043 0320 	orr.w	r3, r3, #32
 801cf7a:	7593      	strb	r3, [r2, #22]
                if (!((sys_state & STATE_JOG) || sys.override.control.feed_hold_disable)) {
 801cf7c:	4b13      	ldr	r3, [pc, #76]	; (801cfcc <state_set+0x294>)
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	f003 0320 	and.w	r3, r3, #32
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	d176      	bne.n	801d076 <state_set+0x33e>
 801cf88:	4b11      	ldr	r3, [pc, #68]	; (801cfd0 <state_set+0x298>)
 801cf8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cf8e:	f003 0302 	and.w	r3, r3, #2
 801cf92:	b2db      	uxtb	r3, r3
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d16e      	bne.n	801d076 <state_set+0x33e>
                    if (!initiate_hold(new_state)) {
 801cf98:	6878      	ldr	r0, [r7, #4]
 801cf9a:	f7ff fd59 	bl	801ca50 <initiate_hold>
 801cf9e:	4603      	mov	r3, r0
 801cfa0:	f083 0301 	eor.w	r3, r3, #1
 801cfa4:	b2db      	uxtb	r3, r3
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d006      	beq.n	801cfb8 <state_set+0x280>
                        sys.holding_state = Hold_Complete;
 801cfaa:	4b09      	ldr	r3, [pc, #36]	; (801cfd0 <state_set+0x298>)
 801cfac:	2201      	movs	r2, #1
 801cfae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                        stateHandler = state_await_resume;
 801cfb2:	4b0a      	ldr	r3, [pc, #40]	; (801cfdc <state_set+0x2a4>)
 801cfb4:	4a0f      	ldr	r2, [pc, #60]	; (801cff4 <state_set+0x2bc>)
 801cfb6:	601a      	str	r2, [r3, #0]
                    }
                    sys_state = new_state;
 801cfb8:	4a04      	ldr	r2, [pc, #16]	; (801cfcc <state_set+0x294>)
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	6013      	str	r3, [r2, #0]
                    sys.flags.feed_hold_pending = Off;
 801cfbe:	4a04      	ldr	r2, [pc, #16]	; (801cfd0 <state_set+0x298>)
 801cfc0:	7d93      	ldrb	r3, [r2, #22]
 801cfc2:	f36f 1345 	bfc	r3, #5, #1
 801cfc6:	7593      	strb	r3, [r2, #22]
                }
                break;
 801cfc8:	e055      	b.n	801d076 <state_set+0x33e>
 801cfca:	bf00      	nop
 801cfcc:	2000201c 	.word	0x2000201c
 801cfd0:	20001520 	.word	0x20001520
 801cfd4:	20002018 	.word	0x20002018
 801cfd8:	20002020 	.word	0x20002020
 801cfdc:	200004fc 	.word	0x200004fc
 801cfe0:	0801d23d 	.word	0x0801d23d
 801cfe4:	200016a0 	.word	0x200016a0
 801cfe8:	20001568 	.word	0x20001568
 801cfec:	0801d29d 	.word	0x0801d29d
 801cff0:	0801d335 	.word	0x0801d335
 801cff4:	0801d7b5 	.word	0x0801d7b5

            case STATE_SAFETY_DOOR:
                if ((sys_state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE)))
 801cff8:	4b30      	ldr	r3, [pc, #192]	; (801d0bc <state_set+0x384>)
 801cffa:	681a      	ldr	r2, [r3, #0]
 801cffc:	f240 1383 	movw	r3, #387	; 0x183
 801d000:	4013      	ands	r3, r2
 801d002:	2b00      	cmp	r3, #0
 801d004:	d155      	bne.n	801d0b2 <state_set+0x37a>
                    return;
                grbl.report.feedback_message(Message_SafetyDoorAjar);
 801d006:	4b2e      	ldr	r3, [pc, #184]	; (801d0c0 <state_set+0x388>)
 801d008:	68db      	ldr	r3, [r3, #12]
 801d00a:	2006      	movs	r0, #6
 801d00c:	4798      	blx	r3
                // no break
            case STATE_SLEEP:
                sys.parking_state = Parking_Retracting;
 801d00e:	4b2d      	ldr	r3, [pc, #180]	; (801d0c4 <state_set+0x38c>)
 801d010:	2202      	movs	r2, #2
 801d012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                if (!initiate_hold(new_state)) {
 801d016:	6878      	ldr	r0, [r7, #4]
 801d018:	f7ff fd1a 	bl	801ca50 <initiate_hold>
 801d01c:	4603      	mov	r3, r0
 801d01e:	f083 0301 	eor.w	r3, r3, #1
 801d022:	b2db      	uxtb	r3, r3
 801d024:	2b00      	cmp	r3, #0
 801d026:	d00b      	beq.n	801d040 <state_set+0x308>
                    if (pending_state != new_state) {
 801d028:	4b27      	ldr	r3, [pc, #156]	; (801d0c8 <state_set+0x390>)
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	687a      	ldr	r2, [r7, #4]
 801d02e:	429a      	cmp	r2, r3
 801d030:	d009      	beq.n	801d046 <state_set+0x30e>
                        sys_state = new_state;
 801d032:	4a22      	ldr	r2, [pc, #136]	; (801d0bc <state_set+0x384>)
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	6013      	str	r3, [r2, #0]
                        state_await_hold(EXEC_CYCLE_COMPLETE); // "Simulate" a cycle stop
 801d038:	2004      	movs	r0, #4
 801d03a:	f000 fa07 	bl	801d44c <state_await_hold>
 801d03e:	e002      	b.n	801d046 <state_set+0x30e>
                    }
                } else
                    sys_state = new_state;
 801d040:	4a1e      	ldr	r2, [pc, #120]	; (801d0bc <state_set+0x384>)
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	6013      	str	r3, [r2, #0]
                if(sys_state == STATE_SLEEP && stateHandler != state_await_waypoint_retract)
 801d046:	4b1d      	ldr	r3, [pc, #116]	; (801d0bc <state_set+0x384>)
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	2b80      	cmp	r3, #128	; 0x80
 801d04c:	d115      	bne.n	801d07a <state_set+0x342>
 801d04e:	4b1f      	ldr	r3, [pc, #124]	; (801d0cc <state_set+0x394>)
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	4a1f      	ldr	r2, [pc, #124]	; (801d0d0 <state_set+0x398>)
 801d054:	4293      	cmp	r3, r2
 801d056:	d010      	beq.n	801d07a <state_set+0x342>
                    enter_sleep();
 801d058:	f7ff fcde 	bl	801ca18 <enter_sleep>
                break;
 801d05c:	e00d      	b.n	801d07a <state_set+0x342>

            case STATE_ALARM:
            case STATE_ESTOP:
            case STATE_HOMING:
            case STATE_CHECK_MODE:
                sys_state = new_state;
 801d05e:	4a17      	ldr	r2, [pc, #92]	; (801d0bc <state_set+0x384>)
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	6013      	str	r3, [r2, #0]
                sys.suspend = false;
 801d064:	4b17      	ldr	r3, [pc, #92]	; (801d0c4 <state_set+0x38c>)
 801d066:	2200      	movs	r2, #0
 801d068:	709a      	strb	r2, [r3, #2]
                stateHandler = state_noop;
 801d06a:	4b18      	ldr	r3, [pc, #96]	; (801d0cc <state_set+0x394>)
 801d06c:	4a19      	ldr	r2, [pc, #100]	; (801d0d4 <state_set+0x39c>)
 801d06e:	601a      	str	r2, [r3, #0]
                break;
 801d070:	e004      	b.n	801d07c <state_set+0x344>
                break;
 801d072:	bf00      	nop
 801d074:	e002      	b.n	801d07c <state_set+0x344>
                break;
 801d076:	bf00      	nop
 801d078:	e000      	b.n	801d07c <state_set+0x344>
                break;
 801d07a:	bf00      	nop
        }

        if(!(sys_state & (STATE_ALARM|STATE_ESTOP)))
 801d07c:	4b0f      	ldr	r3, [pc, #60]	; (801d0bc <state_set+0x384>)
 801d07e:	681a      	ldr	r2, [r3, #0]
 801d080:	f240 1301 	movw	r3, #257	; 0x101
 801d084:	4013      	ands	r3, r2
 801d086:	2b00      	cmp	r3, #0
 801d088:	d103      	bne.n	801d092 <state_set+0x35a>
            sys.alarm = Alarm_None;
 801d08a:	4b0e      	ldr	r3, [pc, #56]	; (801d0c4 <state_set+0x38c>)
 801d08c:	2200      	movs	r2, #0
 801d08e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        if(sys_state != org_state && grbl.on_state_change)
 801d092:	4b0a      	ldr	r3, [pc, #40]	; (801d0bc <state_set+0x384>)
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	697a      	ldr	r2, [r7, #20]
 801d098:	429a      	cmp	r2, r3
 801d09a:	d00b      	beq.n	801d0b4 <state_set+0x37c>
 801d09c:	4b08      	ldr	r3, [pc, #32]	; (801d0c0 <state_set+0x388>)
 801d09e:	69db      	ldr	r3, [r3, #28]
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d007      	beq.n	801d0b4 <state_set+0x37c>
            grbl.on_state_change(sys_state);
 801d0a4:	4b06      	ldr	r3, [pc, #24]	; (801d0c0 <state_set+0x388>)
 801d0a6:	69db      	ldr	r3, [r3, #28]
 801d0a8:	4a04      	ldr	r2, [pc, #16]	; (801d0bc <state_set+0x384>)
 801d0aa:	6812      	ldr	r2, [r2, #0]
 801d0ac:	4610      	mov	r0, r2
 801d0ae:	4798      	blx	r3
 801d0b0:	e000      	b.n	801d0b4 <state_set+0x37c>
                    return;
 801d0b2:	bf00      	nop
    }
}
 801d0b4:	3718      	adds	r7, #24
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	bd80      	pop	{r7, pc}
 801d0ba:	bf00      	nop
 801d0bc:	2000201c 	.word	0x2000201c
 801d0c0:	200015b8 	.word	0x200015b8
 801d0c4:	20001520 	.word	0x20001520
 801d0c8:	20002018 	.word	0x20002018
 801d0cc:	200004fc 	.word	0x200004fc
 801d0d0:	0801db85 	.word	0x0801db85
 801d0d4:	0801d229 	.word	0x0801d229

0801d0d8 <state_suspend_manager>:

// Suspend manager. Controls spindle overrides in hold states.
void state_suspend_manager (void)
{
 801d0d8:	b580      	push	{r7, lr}
 801d0da:	af00      	add	r7, sp, #0
    if (stateHandler != state_await_resume || !gc_state.modal.spindle.state.on)
 801d0dc:	4b4b      	ldr	r3, [pc, #300]	; (801d20c <state_suspend_manager+0x134>)
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	4a4b      	ldr	r2, [pc, #300]	; (801d210 <state_suspend_manager+0x138>)
 801d0e2:	4293      	cmp	r3, r2
 801d0e4:	f040 8090 	bne.w	801d208 <state_suspend_manager+0x130>
 801d0e8:	4b4a      	ldr	r3, [pc, #296]	; (801d214 <state_suspend_manager+0x13c>)
 801d0ea:	7e9b      	ldrb	r3, [r3, #26]
 801d0ec:	f003 0301 	and.w	r3, r3, #1
 801d0f0:	b2db      	uxtb	r3, r3
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	f000 8088 	beq.w	801d208 <state_suspend_manager+0x130>
        return;

    if (sys.override.spindle_stop.value) {
 801d0f8:	4b47      	ldr	r3, [pc, #284]	; (801d218 <state_suspend_manager+0x140>)
 801d0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d060      	beq.n	801d1c4 <state_suspend_manager+0xec>

        // Handles beginning of spindle stop
        if (sys.override.spindle_stop.initiate) {
 801d102:	4b45      	ldr	r3, [pc, #276]	; (801d218 <state_suspend_manager+0x140>)
 801d104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d108:	f003 0302 	and.w	r3, r3, #2
 801d10c:	b2db      	uxtb	r3, r3
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d021      	beq.n	801d156 <state_suspend_manager+0x7e>
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801d112:	4b41      	ldr	r3, [pc, #260]	; (801d218 <state_suspend_manager+0x140>)
 801d114:	2200      	movs	r2, #0
 801d116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            spindle_set_state(restore_condition.spindle[restore_condition.spindle_num].hal, (spindle_state_t){0}, 0.0f); // De-energize
 801d11a:	4b40      	ldr	r3, [pc, #256]	; (801d21c <state_suspend_manager+0x144>)
 801d11c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d120:	4a3e      	ldr	r2, [pc, #248]	; (801d21c <state_suspend_manager+0x144>)
 801d122:	011b      	lsls	r3, r3, #4
 801d124:	4413      	add	r3, r2
 801d126:	3310      	adds	r3, #16
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	2200      	movs	r2, #0
 801d12c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 801d220 <state_suspend_manager+0x148>
 801d130:	4611      	mov	r1, r2
 801d132:	4618      	mov	r0, r3
 801d134:	f7ff f8ca 	bl	801c2cc <spindle_set_state>
            sys.override.spindle_stop.enabled = On; // Set stop override state to enabled, if de-energized.
 801d138:	4a37      	ldr	r2, [pc, #220]	; (801d218 <state_suspend_manager+0x140>)
 801d13a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d13e:	f043 0301 	orr.w	r3, r3, #1
 801d142:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            if(grbl.on_override_changed)
 801d146:	4b37      	ldr	r3, [pc, #220]	; (801d224 <state_suspend_manager+0x14c>)
 801d148:	6a1b      	ldr	r3, [r3, #32]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d003      	beq.n	801d156 <state_suspend_manager+0x7e>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801d14e:	4b35      	ldr	r3, [pc, #212]	; (801d224 <state_suspend_manager+0x14c>)
 801d150:	6a1b      	ldr	r3, [r3, #32]
 801d152:	2000      	movs	r0, #0
 801d154:	4798      	blx	r3
        }

        // Handles restoring of spindle state
        if (sys.override.spindle_stop.restore) {
 801d156:	4b30      	ldr	r3, [pc, #192]	; (801d218 <state_suspend_manager+0x140>)
 801d158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d15c:	f003 0304 	and.w	r3, r3, #4
 801d160:	b2db      	uxtb	r3, r3
 801d162:	2b00      	cmp	r3, #0
 801d164:	d051      	beq.n	801d20a <state_suspend_manager+0x132>
            grbl.report.feedback_message(Message_SpindleRestore);
 801d166:	4b2f      	ldr	r3, [pc, #188]	; (801d224 <state_suspend_manager+0x14c>)
 801d168:	68db      	ldr	r3, [r3, #12]
 801d16a:	200a      	movs	r0, #10
 801d16c:	4798      	blx	r3
            if (restore_condition.spindle[restore_condition.spindle_num].hal->cap.laser) // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
 801d16e:	4b2b      	ldr	r3, [pc, #172]	; (801d21c <state_suspend_manager+0x144>)
 801d170:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d174:	4a29      	ldr	r2, [pc, #164]	; (801d21c <state_suspend_manager+0x144>)
 801d176:	011b      	lsls	r3, r3, #4
 801d178:	4413      	add	r3, r2
 801d17a:	3310      	adds	r3, #16
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	7a5b      	ldrb	r3, [r3, #9]
 801d180:	f003 0308 	and.w	r3, r3, #8
 801d184:	b2db      	uxtb	r3, r3
 801d186:	2b00      	cmp	r3, #0
 801d188:	d005      	beq.n	801d196 <state_suspend_manager+0xbe>
                sys.step_control.update_spindle_rpm = On;
 801d18a:	4a23      	ldr	r2, [pc, #140]	; (801d218 <state_suspend_manager+0x140>)
 801d18c:	7e13      	ldrb	r3, [r2, #24]
 801d18e:	f043 0308 	orr.w	r3, r3, #8
 801d192:	7613      	strb	r3, [r2, #24]
 801d194:	e009      	b.n	801d1aa <state_suspend_manager+0xd2>
            else
                state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801d196:	4b21      	ldr	r3, [pc, #132]	; (801d21c <state_suspend_manager+0x144>)
 801d198:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d19c:	011b      	lsls	r3, r3, #4
 801d19e:	4a1f      	ldr	r2, [pc, #124]	; (801d21c <state_suspend_manager+0x144>)
 801d1a0:	4413      	add	r3, r2
 801d1a2:	3304      	adds	r3, #4
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	f7ff fbc6 	bl	801c936 <state_spindle_set_state>
            sys.override.spindle_stop.value = 0; // Clear stop override state
 801d1aa:	4b1b      	ldr	r3, [pc, #108]	; (801d218 <state_suspend_manager+0x140>)
 801d1ac:	2200      	movs	r2, #0
 801d1ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            if(grbl.on_override_changed)
 801d1b2:	4b1c      	ldr	r3, [pc, #112]	; (801d224 <state_suspend_manager+0x14c>)
 801d1b4:	6a1b      	ldr	r3, [r3, #32]
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d027      	beq.n	801d20a <state_suspend_manager+0x132>
                grbl.on_override_changed(OverrideChanged_SpindleState);
 801d1ba:	4b1a      	ldr	r3, [pc, #104]	; (801d224 <state_suspend_manager+0x14c>)
 801d1bc:	6a1b      	ldr	r3, [r3, #32]
 801d1be:	2000      	movs	r0, #0
 801d1c0:	4798      	blx	r3
 801d1c2:	e022      	b.n	801d20a <state_suspend_manager+0x132>
        }

    } else if (sys.step_control.update_spindle_rpm && restore_condition.spindle[0].hal->get_state().on) {
 801d1c4:	4b14      	ldr	r3, [pc, #80]	; (801d218 <state_suspend_manager+0x140>)
 801d1c6:	7e1b      	ldrb	r3, [r3, #24]
 801d1c8:	f003 0308 	and.w	r3, r3, #8
 801d1cc:	b2db      	uxtb	r3, r3
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d01b      	beq.n	801d20a <state_suspend_manager+0x132>
 801d1d2:	4b12      	ldr	r3, [pc, #72]	; (801d21c <state_suspend_manager+0x144>)
 801d1d4:	691b      	ldr	r3, [r3, #16]
 801d1d6:	6a1b      	ldr	r3, [r3, #32]
 801d1d8:	4798      	blx	r3
 801d1da:	4603      	mov	r3, r0
 801d1dc:	b2db      	uxtb	r3, r3
 801d1de:	f003 0301 	and.w	r3, r3, #1
 801d1e2:	b2db      	uxtb	r3, r3
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d010      	beq.n	801d20a <state_suspend_manager+0x132>
        // Handles spindle state during hold. NOTE: Spindle speed overrides may be altered during hold state.
        state_spindle_set_state(&restore_condition.spindle[restore_condition.spindle_num]);
 801d1e8:	4b0c      	ldr	r3, [pc, #48]	; (801d21c <state_suspend_manager+0x144>)
 801d1ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d1ee:	011b      	lsls	r3, r3, #4
 801d1f0:	4a0a      	ldr	r2, [pc, #40]	; (801d21c <state_suspend_manager+0x144>)
 801d1f2:	4413      	add	r3, r2
 801d1f4:	3304      	adds	r3, #4
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f7ff fb9d 	bl	801c936 <state_spindle_set_state>
        sys.step_control.update_spindle_rpm = Off;
 801d1fc:	4a06      	ldr	r2, [pc, #24]	; (801d218 <state_suspend_manager+0x140>)
 801d1fe:	7e13      	ldrb	r3, [r2, #24]
 801d200:	f36f 03c3 	bfc	r3, #3, #1
 801d204:	7613      	strb	r3, [r2, #24]
 801d206:	e000      	b.n	801d20a <state_suspend_manager+0x132>
        return;
 801d208:	bf00      	nop
    }
}
 801d20a:	bd80      	pop	{r7, pc}
 801d20c:	200004fc 	.word	0x200004fc
 801d210:	0801d7b5 	.word	0x0801d7b5
 801d214:	2000137c 	.word	0x2000137c
 801d218:	20001520 	.word	0x20001520
 801d21c:	20002004 	.word	0x20002004
 801d220:	00000000 	.word	0x00000000
 801d224:	200015b8 	.word	0x200015b8

0801d228 <state_noop>:
// **************

/*! /brief No operation handler.
 */
static void state_noop (uint_fast16_t rt_exec)
{
 801d228:	b480      	push	{r7}
 801d22a:	b083      	sub	sp, #12
 801d22c:	af00      	add	r7, sp, #0
 801d22e:	6078      	str	r0, [r7, #4]
    // Do nothing - state change requests are handled elsewhere or ignored.
}
 801d230:	bf00      	nop
 801d232:	370c      	adds	r7, #12
 801d234:	46bd      	mov	sp, r7
 801d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d23a:	4770      	bx	lr

0801d23c <state_idle>:

/*! /brief Waits for idle actions and executes them by switching to the appropriate sys_state.
 */
static void state_idle (uint_fast16_t rt_exec)
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b082      	sub	sp, #8
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
    if ((rt_exec & EXEC_CYCLE_START))
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	f003 0302 	and.w	r3, r3, #2
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d002      	beq.n	801d254 <state_idle+0x18>
        state_set(STATE_CYCLE);
 801d24e:	2008      	movs	r0, #8
 801d250:	f7ff fd72 	bl	801cd38 <state_set>

    if (rt_exec & EXEC_FEED_HOLD)
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	f003 0308 	and.w	r3, r3, #8
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d002      	beq.n	801d264 <state_idle+0x28>
        state_set(STATE_HOLD);
 801d25e:	2010      	movs	r0, #16
 801d260:	f7ff fd6a 	bl	801cd38 <state_set>

    if ((rt_exec & EXEC_TOOL_CHANGE)) {
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d008      	beq.n	801d280 <state_idle+0x44>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801d26e:	4b0a      	ldr	r3, [pc, #40]	; (801d298 <state_idle+0x5c>)
 801d270:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801d274:	2001      	movs	r0, #1
 801d276:	4798      	blx	r3
        state_set(STATE_TOOL_CHANGE);
 801d278:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d27c:	f7ff fd5c 	bl	801cd38 <state_set>
    }

    if (rt_exec & EXEC_SLEEP)
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d286:	2b00      	cmp	r3, #0
 801d288:	d002      	beq.n	801d290 <state_idle+0x54>
        state_set(STATE_SLEEP);
 801d28a:	2080      	movs	r0, #128	; 0x80
 801d28c:	f7ff fd54 	bl	801cd38 <state_set>
}
 801d290:	bf00      	nop
 801d292:	3708      	adds	r7, #8
 801d294:	46bd      	mov	sp, r7
 801d296:	bd80      	pop	{r7, pc}
 801d298:	200016a0 	.word	0x200016a0

0801d29c <state_cycle>:

/*! /brief Waits for cycle actions and executes them by switching to the appropriate sys_state.
 */
static void state_cycle (uint_fast16_t rt_exec)
{
 801d29c:	b580      	push	{r7, lr}
 801d29e:	b082      	sub	sp, #8
 801d2a0:	af00      	add	r7, sp, #0
 801d2a2:	6078      	str	r0, [r7, #4]
    if (rt_exec == EXEC_CYCLE_START)
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	2b02      	cmp	r3, #2
 801d2a8:	d035      	beq.n	801d316 <state_cycle+0x7a>
        return; // no need to perform other tests...

    if ((rt_exec & EXEC_TOOL_CHANGE))
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d004      	beq.n	801d2be <state_cycle+0x22>
        hal.stream.suspend_read(true); // Block reading from input stream until tool change state is acknowledged
 801d2b4:	4b1a      	ldr	r3, [pc, #104]	; (801d320 <state_cycle+0x84>)
 801d2b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801d2ba:	2001      	movs	r0, #1
 801d2bc:	4798      	blx	r3

    if (rt_exec & EXEC_CYCLE_COMPLETE)
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	f003 0304 	and.w	r3, r3, #4
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d00b      	beq.n	801d2e0 <state_cycle+0x44>
        state_set(gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE);
 801d2c8:	4b16      	ldr	r3, [pc, #88]	; (801d324 <state_cycle+0x88>)
 801d2ca:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d002      	beq.n	801d2d8 <state_cycle+0x3c>
 801d2d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d2d6:	e000      	b.n	801d2da <state_cycle+0x3e>
 801d2d8:	2300      	movs	r3, #0
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7ff fd2c 	bl	801cd38 <state_set>

    if (rt_exec & EXEC_MOTION_CANCEL) {
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d00c      	beq.n	801d304 <state_cycle+0x68>
        st_update_plan_block_parameters();  // Notify stepper module to recompute for hold deceleration.
 801d2ea:	f001 f957 	bl	801e59c <st_update_plan_block_parameters>
        sys.suspend = true;
 801d2ee:	4b0e      	ldr	r3, [pc, #56]	; (801d328 <state_cycle+0x8c>)
 801d2f0:	2201      	movs	r2, #1
 801d2f2:	709a      	strb	r2, [r3, #2]
        sys.step_control.execute_hold = On; // Initiate suspend state with active flag.
 801d2f4:	4a0c      	ldr	r2, [pc, #48]	; (801d328 <state_cycle+0x8c>)
 801d2f6:	7e13      	ldrb	r3, [r2, #24]
 801d2f8:	f043 0302 	orr.w	r3, r3, #2
 801d2fc:	7613      	strb	r3, [r2, #24]
        stateHandler = state_await_motion_cancel;
 801d2fe:	4b0b      	ldr	r3, [pc, #44]	; (801d32c <state_cycle+0x90>)
 801d300:	4a0b      	ldr	r2, [pc, #44]	; (801d330 <state_cycle+0x94>)
 801d302:	601a      	str	r2, [r3, #0]
    }

    if ((rt_exec & EXEC_FEED_HOLD))
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	f003 0308 	and.w	r3, r3, #8
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d004      	beq.n	801d318 <state_cycle+0x7c>
        state_set(STATE_HOLD);
 801d30e:	2010      	movs	r0, #16
 801d310:	f7ff fd12 	bl	801cd38 <state_set>
 801d314:	e000      	b.n	801d318 <state_cycle+0x7c>
        return; // no need to perform other tests...
 801d316:	bf00      	nop
}
 801d318:	3708      	adds	r7, #8
 801d31a:	46bd      	mov	sp, r7
 801d31c:	bd80      	pop	{r7, pc}
 801d31e:	bf00      	nop
 801d320:	200016a0 	.word	0x200016a0
 801d324:	2000137c 	.word	0x2000137c
 801d328:	20001520 	.word	0x20001520
 801d32c:	200004fc 	.word	0x200004fc
 801d330:	0801d3d5 	.word	0x0801d3d5

0801d334 <state_await_toolchanged>:

/*! /brief Waits for tool change cycle to end then restarts the cycle.
 */
static void state_await_toolchanged (uint_fast16_t rt_exec)
{
 801d334:	b580      	push	{r7, lr}
 801d336:	b082      	sub	sp, #8
 801d338:	af00      	add	r7, sp, #0
 801d33a:	6078      	str	r0, [r7, #4]
    if (rt_exec & EXEC_CYCLE_START) {
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	f003 0302 	and.w	r3, r3, #2
 801d342:	2b00      	cmp	r3, #0
 801d344:	d037      	beq.n	801d3b6 <state_await_toolchanged+0x82>
        if (!gc_state.tool_change) {
 801d346:	4b1e      	ldr	r3, [pc, #120]	; (801d3c0 <state_await_toolchanged+0x8c>)
 801d348:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801d34c:	f083 0301 	eor.w	r3, r3, #1
 801d350:	b2db      	uxtb	r3, r3
 801d352:	2b00      	cmp	r3, #0
 801d354:	d019      	beq.n	801d38a <state_await_toolchanged+0x56>

            if (hal.stream.suspend_read)
 801d356:	4b1b      	ldr	r3, [pc, #108]	; (801d3c4 <state_await_toolchanged+0x90>)
 801d358:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d004      	beq.n	801d36a <state_await_toolchanged+0x36>
                hal.stream.suspend_read(false); // Tool change complete, restore "normal" stream input.
 801d360:	4b18      	ldr	r3, [pc, #96]	; (801d3c4 <state_await_toolchanged+0x90>)
 801d362:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801d366:	2000      	movs	r0, #0
 801d368:	4798      	blx	r3

            if(grbl.on_tool_changed)
 801d36a:	4b17      	ldr	r3, [pc, #92]	; (801d3c8 <state_await_toolchanged+0x94>)
 801d36c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d370:	2b00      	cmp	r3, #0
 801d372:	d007      	beq.n	801d384 <state_await_toolchanged+0x50>
                grbl.on_tool_changed(gc_state.tool);
 801d374:	4b14      	ldr	r3, [pc, #80]	; (801d3c8 <state_await_toolchanged+0x94>)
 801d376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d37a:	4a11      	ldr	r2, [pc, #68]	; (801d3c0 <state_await_toolchanged+0x8c>)
 801d37c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 801d380:	4610      	mov	r0, r2
 801d382:	4798      	blx	r3

            system_add_rt_report(Report_Tool);
 801d384:	2080      	movs	r0, #128	; 0x80
 801d386:	f004 f91f 	bl	80215c8 <system_add_rt_report>
        }
        pending_state = gc_state.tool_change ? STATE_TOOL_CHANGE : STATE_IDLE;
 801d38a:	4b0d      	ldr	r3, [pc, #52]	; (801d3c0 <state_await_toolchanged+0x8c>)
 801d38c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801d390:	2b00      	cmp	r3, #0
 801d392:	d002      	beq.n	801d39a <state_await_toolchanged+0x66>
 801d394:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d398:	e000      	b.n	801d39c <state_await_toolchanged+0x68>
 801d39a:	2300      	movs	r3, #0
 801d39c:	4a0b      	ldr	r2, [pc, #44]	; (801d3cc <state_await_toolchanged+0x98>)
 801d39e:	6013      	str	r3, [r2, #0]
        state_set(STATE_IDLE);
 801d3a0:	2000      	movs	r0, #0
 801d3a2:	f7ff fcc9 	bl	801cd38 <state_set>
        state_set(STATE_CYCLE);
 801d3a6:	2008      	movs	r0, #8
 801d3a8:	f7ff fcc6 	bl	801cd38 <state_set>
        // Force a status report to let the sender know tool change is completed.
        system_set_exec_state_flag(EXEC_STATUS_REPORT);
 801d3ac:	4b05      	ldr	r3, [pc, #20]	; (801d3c4 <state_await_toolchanged+0x90>)
 801d3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d3b0:	2101      	movs	r1, #1
 801d3b2:	4807      	ldr	r0, [pc, #28]	; (801d3d0 <state_await_toolchanged+0x9c>)
 801d3b4:	4798      	blx	r3
    }
}
 801d3b6:	bf00      	nop
 801d3b8:	3708      	adds	r7, #8
 801d3ba:	46bd      	mov	sp, r7
 801d3bc:	bd80      	pop	{r7, pc}
 801d3be:	bf00      	nop
 801d3c0:	2000137c 	.word	0x2000137c
 801d3c4:	200016a0 	.word	0x200016a0
 801d3c8:	200015b8 	.word	0x200015b8
 801d3cc:	20002018 	.word	0x20002018
 801d3d0:	20001568 	.word	0x20001568

0801d3d4 <state_await_motion_cancel>:

/*! /brief Waits for motion to end to complete then executes actions depending on the current sys_state.
 */
static void state_await_motion_cancel (uint_fast16_t rt_exec)
{
 801d3d4:	b580      	push	{r7, lr}
 801d3d6:	b082      	sub	sp, #8
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	6078      	str	r0, [r7, #4]
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	f003 0304 	and.w	r3, r3, #4
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d021      	beq.n	801d42a <state_await_motion_cancel+0x56>
        if (sys_state == STATE_JOG) {
 801d3e6:	4b13      	ldr	r3, [pc, #76]	; (801d434 <state_await_motion_cancel+0x60>)
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	2b20      	cmp	r3, #32
 801d3ec:	d10f      	bne.n	801d40e <state_await_motion_cancel+0x3a>
            sys.step_control.flags = 0;
 801d3ee:	4b12      	ldr	r3, [pc, #72]	; (801d438 <state_await_motion_cancel+0x64>)
 801d3f0:	2200      	movs	r2, #0
 801d3f2:	761a      	strb	r2, [r3, #24]
            plan_reset();
 801d3f4:	f7f3 feee 	bl	80111d4 <plan_reset>
            st_reset();
 801d3f8:	f000 ffe2 	bl	801e3c0 <st_reset>
            sync_position();
 801d3fc:	f7f4 fc36 	bl	8011c6c <plan_sync_position>
 801d400:	490e      	ldr	r1, [pc, #56]	; (801d43c <state_await_motion_cancel+0x68>)
 801d402:	480f      	ldr	r0, [pc, #60]	; (801d440 <state_await_motion_cancel+0x6c>)
 801d404:	f003 fff8 	bl	80213f8 <system_convert_array_steps_to_mpos>
            sys.suspend = false;
 801d408:	4b0b      	ldr	r3, [pc, #44]	; (801d438 <state_await_motion_cancel+0x64>)
 801d40a:	2200      	movs	r2, #0
 801d40c:	709a      	strb	r2, [r3, #2]
        }
        state_set(pending_state);
 801d40e:	4b0d      	ldr	r3, [pc, #52]	; (801d444 <state_await_motion_cancel+0x70>)
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	4618      	mov	r0, r3
 801d414:	f7ff fc90 	bl	801cd38 <state_set>
        if (gc_state.tool_change)
 801d418:	4b0b      	ldr	r3, [pc, #44]	; (801d448 <state_await_motion_cancel+0x74>)
 801d41a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d003      	beq.n	801d42a <state_await_motion_cancel+0x56>
            state_set(STATE_TOOL_CHANGE);
 801d422:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d426:	f7ff fc87 	bl	801cd38 <state_set>
    }
}
 801d42a:	bf00      	nop
 801d42c:	3708      	adds	r7, #8
 801d42e:	46bd      	mov	sp, r7
 801d430:	bd80      	pop	{r7, pc}
 801d432:	bf00      	nop
 801d434:	2000201c 	.word	0x2000201c
 801d438:	20001520 	.word	0x20001520
 801d43c:	200015a8 	.word	0x200015a8
 801d440:	200013dc 	.word	0x200013dc
 801d444:	20002018 	.word	0x20002018
 801d448:	2000137c 	.word	0x2000137c

0801d44c <state_await_hold>:

/*! /brief Waits for feed hold to complete then executes actions depending on the current sys_state.
 */
static void state_await_hold (uint_fast16_t rt_exec)
{
 801d44c:	b590      	push	{r4, r7, lr}
 801d44e:	b085      	sub	sp, #20
 801d450:	af00      	add	r7, sp, #0
 801d452:	6078      	str	r0, [r7, #4]
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	f003 0304 	and.w	r3, r3, #4
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	f000 8199 	beq.w	801d792 <state_await_hold+0x346>

        bool handler_changed = false;
 801d460:	2300      	movs	r3, #0
 801d462:	73fb      	strb	r3, [r7, #15]

        plan_cycle_reinitialize();
 801d464:	f7f4 fc40 	bl	8011ce8 <plan_cycle_reinitialize>
        sys.step_control.flags = 0;
 801d468:	4b9e      	ldr	r3, [pc, #632]	; (801d6e4 <state_await_hold+0x298>)
 801d46a:	2200      	movs	r2, #0
 801d46c:	761a      	strb	r2, [r3, #24]

        if (sys.alarm_pending) {
 801d46e:	4b9d      	ldr	r3, [pc, #628]	; (801d6e4 <state_await_hold+0x298>)
 801d470:	7d1b      	ldrb	r3, [r3, #20]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d009      	beq.n	801d48a <state_await_hold+0x3e>
            system_set_exec_alarm(sys.alarm_pending);
 801d476:	4b9c      	ldr	r3, [pc, #624]	; (801d6e8 <state_await_hold+0x29c>)
 801d478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d47a:	4a9a      	ldr	r2, [pc, #616]	; (801d6e4 <state_await_hold+0x298>)
 801d47c:	7d12      	ldrb	r2, [r2, #20]
 801d47e:	4611      	mov	r1, r2
 801d480:	489a      	ldr	r0, [pc, #616]	; (801d6ec <state_await_hold+0x2a0>)
 801d482:	4798      	blx	r3
            sys.alarm_pending = Alarm_None;
 801d484:	4b97      	ldr	r3, [pc, #604]	; (801d6e4 <state_await_hold+0x298>)
 801d486:	2200      	movs	r2, #0
 801d488:	751a      	strb	r2, [r3, #20]
        }

        switch (sys_state) {
 801d48a:	4b99      	ldr	r3, [pc, #612]	; (801d6f0 <state_await_hold+0x2a4>)
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d492:	d008      	beq.n	801d4a6 <state_await_hold+0x5a>
 801d494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d498:	f200 8162 	bhi.w	801d760 <state_await_hold+0x314>
 801d49c:	2b40      	cmp	r3, #64	; 0x40
 801d49e:	d00a      	beq.n	801d4b6 <state_await_hold+0x6a>
 801d4a0:	2b80      	cmp	r3, #128	; 0x80
 801d4a2:	d008      	beq.n	801d4b6 <state_await_hold+0x6a>
                    sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
                }
                break;

            default:
                break;
 801d4a4:	e15c      	b.n	801d760 <state_await_hold+0x314>
                spindle_all_off(); // De-energize
 801d4a6:	f7ff f89b 	bl	801c5e0 <spindle_all_off>
                hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801d4aa:	4b8f      	ldr	r3, [pc, #572]	; (801d6e8 <state_await_hold+0x29c>)
 801d4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	4610      	mov	r0, r2
 801d4b2:	4798      	blx	r3
                break;
 801d4b4:	e155      	b.n	801d762 <state_await_hold+0x316>
                sys.override.spindle_stop.value = 0;
 801d4b6:	4b8b      	ldr	r3, [pc, #556]	; (801d6e4 <state_await_hold+0x298>)
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                if (settings.parking.flags.enabled && !sys.override.control.parking_disable && settings.mode != Mode_Laser) {
 801d4be:	4b8d      	ldr	r3, [pc, #564]	; (801d6f4 <state_await_hold+0x2a8>)
 801d4c0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801d4c4:	f003 0301 	and.w	r3, r3, #1
 801d4c8:	b2db      	uxtb	r3, r3
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	f000 8122 	beq.w	801d714 <state_await_hold+0x2c8>
 801d4d0:	4b84      	ldr	r3, [pc, #528]	; (801d6e4 <state_await_hold+0x298>)
 801d4d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801d4d6:	f003 0308 	and.w	r3, r3, #8
 801d4da:	b2db      	uxtb	r3, r3
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	f040 8119 	bne.w	801d714 <state_await_hold+0x2c8>
 801d4e2:	4b84      	ldr	r3, [pc, #528]	; (801d6f4 <state_await_hold+0x2a8>)
 801d4e4:	7e1b      	ldrb	r3, [r3, #24]
 801d4e6:	2b01      	cmp	r3, #1
 801d4e8:	f000 8114 	beq.w	801d714 <state_await_hold+0x2c8>
                    if (!park.flags.active) {
 801d4ec:	4b82      	ldr	r3, [pc, #520]	; (801d6f8 <state_await_hold+0x2ac>)
 801d4ee:	7f1b      	ldrb	r3, [r3, #28]
 801d4f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d4f4:	b2db      	uxtb	r3, r3
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d108      	bne.n	801d50c <state_await_hold+0xc0>
                        park.flags.active = On;
 801d4fa:	4a7f      	ldr	r2, [pc, #508]	; (801d6f8 <state_await_hold+0x2ac>)
 801d4fc:	7f13      	ldrb	r3, [r2, #28]
 801d4fe:	f043 0301 	orr.w	r3, r3, #1
 801d502:	7713      	strb	r3, [r2, #28]
                        system_convert_array_steps_to_mpos(park.restore_target, sys.position);
 801d504:	497d      	ldr	r1, [pc, #500]	; (801d6fc <state_await_hold+0x2b0>)
 801d506:	487e      	ldr	r0, [pc, #504]	; (801d700 <state_await_hold+0x2b4>)
 801d508:	f003 ff76 	bl	80213f8 <system_convert_array_steps_to_mpos>
                    if (bit_istrue(sys.homed.mask, bit(settings.parking.axis)) && (park.restore_target[settings.parking.axis] < settings.parking.target)) {
 801d50c:	4b75      	ldr	r3, [pc, #468]	; (801d6e4 <state_await_hold+0x298>)
 801d50e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801d512:	461a      	mov	r2, r3
 801d514:	4b77      	ldr	r3, [pc, #476]	; (801d6f4 <state_await_hold+0x2a8>)
 801d516:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801d51a:	fa22 f303 	lsr.w	r3, r2, r3
 801d51e:	f003 0301 	and.w	r3, r3, #1
 801d522:	2b00      	cmp	r3, #0
 801d524:	f000 80b6 	beq.w	801d694 <state_await_hold+0x248>
 801d528:	4b72      	ldr	r3, [pc, #456]	; (801d6f4 <state_await_hold+0x2a8>)
 801d52a:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801d52e:	4a72      	ldr	r2, [pc, #456]	; (801d6f8 <state_await_hold+0x2ac>)
 801d530:	3302      	adds	r3, #2
 801d532:	009b      	lsls	r3, r3, #2
 801d534:	4413      	add	r3, r2
 801d536:	3304      	adds	r3, #4
 801d538:	ed93 7a00 	vldr	s14, [r3]
 801d53c:	4b6d      	ldr	r3, [pc, #436]	; (801d6f4 <state_await_hold+0x2a8>)
 801d53e:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 801d542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d54a:	f140 80a3 	bpl.w	801d694 <state_await_hold+0x248>
                        handler_changed = true;
 801d54e:	2301      	movs	r3, #1
 801d550:	73fb      	strb	r3, [r7, #15]
                        stateHandler = state_await_waypoint_retract;
 801d552:	4b6c      	ldr	r3, [pc, #432]	; (801d704 <state_await_hold+0x2b8>)
 801d554:	4a6c      	ldr	r2, [pc, #432]	; (801d708 <state_await_hold+0x2bc>)
 801d556:	601a      	str	r2, [r3, #0]
                        if(park.flags.restart)
 801d558:	4b67      	ldr	r3, [pc, #412]	; (801d6f8 <state_await_hold+0x2ac>)
 801d55a:	7f1b      	ldrb	r3, [r3, #28]
 801d55c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801d560:	b2db      	uxtb	r3, r3
 801d562:	2b00      	cmp	r3, #0
 801d564:	d004      	beq.n	801d570 <state_await_hold+0x124>
                            system_convert_array_steps_to_mpos(park.target, sys.position);
 801d566:	4965      	ldr	r1, [pc, #404]	; (801d6fc <state_await_hold+0x2b0>)
 801d568:	4863      	ldr	r0, [pc, #396]	; (801d6f8 <state_await_hold+0x2ac>)
 801d56a:	f003 ff45 	bl	80213f8 <system_convert_array_steps_to_mpos>
 801d56e:	e02a      	b.n	801d5c6 <state_await_hold+0x17a>
                            memcpy(park.target, park.restore_target, sizeof(park.target));
 801d570:	4a61      	ldr	r2, [pc, #388]	; (801d6f8 <state_await_hold+0x2ac>)
 801d572:	4b61      	ldr	r3, [pc, #388]	; (801d6f8 <state_await_hold+0x2ac>)
 801d574:	4614      	mov	r4, r2
 801d576:	330c      	adds	r3, #12
 801d578:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d57c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                            park.retract_waypoint = settings.parking.pullout_increment + park.target[settings.parking.axis];
 801d580:	4b5c      	ldr	r3, [pc, #368]	; (801d6f4 <state_await_hold+0x2a8>)
 801d582:	ed93 7a4e 	vldr	s14, [r3, #312]	; 0x138
 801d586:	4b5b      	ldr	r3, [pc, #364]	; (801d6f4 <state_await_hold+0x2a8>)
 801d588:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801d58c:	4a5a      	ldr	r2, [pc, #360]	; (801d6f8 <state_await_hold+0x2ac>)
 801d58e:	009b      	lsls	r3, r3, #2
 801d590:	4413      	add	r3, r2
 801d592:	edd3 7a00 	vldr	s15, [r3]
 801d596:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d59a:	4b57      	ldr	r3, [pc, #348]	; (801d6f8 <state_await_hold+0x2ac>)
 801d59c:	edc3 7a06 	vstr	s15, [r3, #24]
                            park.retract_waypoint = min(park.retract_waypoint, settings.parking.target);
 801d5a0:	4b55      	ldr	r3, [pc, #340]	; (801d6f8 <state_await_hold+0x2ac>)
 801d5a2:	ed93 7a06 	vldr	s14, [r3, #24]
 801d5a6:	4b53      	ldr	r3, [pc, #332]	; (801d6f4 <state_await_hold+0x2a8>)
 801d5a8:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 801d5ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5b4:	d502      	bpl.n	801d5bc <state_await_hold+0x170>
 801d5b6:	4b50      	ldr	r3, [pc, #320]	; (801d6f8 <state_await_hold+0x2ac>)
 801d5b8:	699b      	ldr	r3, [r3, #24]
 801d5ba:	e002      	b.n	801d5c2 <state_await_hold+0x176>
 801d5bc:	4b4d      	ldr	r3, [pc, #308]	; (801d6f4 <state_await_hold+0x2a8>)
 801d5be:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801d5c2:	4a4d      	ldr	r2, [pc, #308]	; (801d6f8 <state_await_hold+0x2ac>)
 801d5c4:	6193      	str	r3, [r2, #24]
                        if ((await_motion = park.target[settings.parking.axis] < park.retract_waypoint)) {
 801d5c6:	4b4b      	ldr	r3, [pc, #300]	; (801d6f4 <state_await_hold+0x2a8>)
 801d5c8:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801d5cc:	4a4a      	ldr	r2, [pc, #296]	; (801d6f8 <state_await_hold+0x2ac>)
 801d5ce:	009b      	lsls	r3, r3, #2
 801d5d0:	4413      	add	r3, r2
 801d5d2:	ed93 7a00 	vldr	s14, [r3]
 801d5d6:	4b48      	ldr	r3, [pc, #288]	; (801d6f8 <state_await_hold+0x2ac>)
 801d5d8:	edd3 7a06 	vldr	s15, [r3, #24]
 801d5dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5e4:	bf4c      	ite	mi
 801d5e6:	2301      	movmi	r3, #1
 801d5e8:	2300      	movpl	r3, #0
 801d5ea:	73bb      	strb	r3, [r7, #14]
 801d5ec:	7bbb      	ldrb	r3, [r7, #14]
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d038      	beq.n	801d664 <state_await_hold+0x218>
                            park.target[settings.parking.axis] = park.retract_waypoint;
 801d5f2:	4b40      	ldr	r3, [pc, #256]	; (801d6f4 <state_await_hold+0x2a8>)
 801d5f4:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801d5f8:	4618      	mov	r0, r3
 801d5fa:	4b3f      	ldr	r3, [pc, #252]	; (801d6f8 <state_await_hold+0x2ac>)
 801d5fc:	699a      	ldr	r2, [r3, #24]
 801d5fe:	493e      	ldr	r1, [pc, #248]	; (801d6f8 <state_await_hold+0x2ac>)
 801d600:	0083      	lsls	r3, r0, #2
 801d602:	440b      	add	r3, r1
 801d604:	601a      	str	r2, [r3, #0]
                            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801d606:	4b3b      	ldr	r3, [pc, #236]	; (801d6f4 <state_await_hold+0x2a8>)
 801d608:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801d60c:	4a3a      	ldr	r2, [pc, #232]	; (801d6f8 <state_await_hold+0x2ac>)
 801d60e:	6213      	str	r3, [r2, #32]
                            park.plan_data.condition.coolant = restore_condition.coolant; // Retain coolant state
 801d610:	4a39      	ldr	r2, [pc, #228]	; (801d6f8 <state_await_hold+0x2ac>)
 801d612:	4b3e      	ldr	r3, [pc, #248]	; (801d70c <state_await_hold+0x2c0>)
 801d614:	781b      	ldrb	r3, [r3, #0]
 801d616:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
                            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state; // Retain spindle state
 801d61a:	4b3c      	ldr	r3, [pc, #240]	; (801d70c <state_await_hold+0x2c0>)
 801d61c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d620:	4a35      	ldr	r2, [pc, #212]	; (801d6f8 <state_await_hold+0x2ac>)
 801d622:	493a      	ldr	r1, [pc, #232]	; (801d70c <state_await_hold+0x2c0>)
 801d624:	011b      	lsls	r3, r3, #4
 801d626:	440b      	add	r3, r1
 801d628:	3308      	adds	r3, #8
 801d62a:	781b      	ldrb	r3, [r3, #0]
 801d62c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                            park.plan_data.spindle.hal = restore_condition.spindle[restore_condition.spindle_num].hal;
 801d630:	4b36      	ldr	r3, [pc, #216]	; (801d70c <state_await_hold+0x2c0>)
 801d632:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d636:	4a35      	ldr	r2, [pc, #212]	; (801d70c <state_await_hold+0x2c0>)
 801d638:	011b      	lsls	r3, r3, #4
 801d63a:	4413      	add	r3, r2
 801d63c:	3310      	adds	r3, #16
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	4a2d      	ldr	r2, [pc, #180]	; (801d6f8 <state_await_hold+0x2ac>)
 801d642:	6313      	str	r3, [r2, #48]	; 0x30
                            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801d644:	4b31      	ldr	r3, [pc, #196]	; (801d70c <state_await_hold+0x2c0>)
 801d646:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d64a:	4a30      	ldr	r2, [pc, #192]	; (801d70c <state_await_hold+0x2c0>)
 801d64c:	011b      	lsls	r3, r3, #4
 801d64e:	4413      	add	r3, r2
 801d650:	3304      	adds	r3, #4
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	4a28      	ldr	r2, [pc, #160]	; (801d6f8 <state_await_hold+0x2ac>)
 801d656:	6253      	str	r3, [r2, #36]	; 0x24
                            await_motion = mc_parking_motion(park.target, &park.plan_data);
 801d658:	492d      	ldr	r1, [pc, #180]	; (801d710 <state_await_hold+0x2c4>)
 801d65a:	4827      	ldr	r0, [pc, #156]	; (801d6f8 <state_await_hold+0x2ac>)
 801d65c:	f7f1 fd04 	bl	800f068 <mc_parking_motion>
 801d660:	4603      	mov	r3, r0
 801d662:	73bb      	strb	r3, [r7, #14]
                        if(!park.flags.restart)
 801d664:	4b24      	ldr	r3, [pc, #144]	; (801d6f8 <state_await_hold+0x2ac>)
 801d666:	7f1b      	ldrb	r3, [r3, #28]
 801d668:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801d66c:	b2db      	uxtb	r3, r3
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d105      	bne.n	801d67e <state_await_hold+0x232>
                            park.flags.motion = await_motion;
 801d672:	4a21      	ldr	r2, [pc, #132]	; (801d6f8 <state_await_hold+0x2ac>)
 801d674:	7f13      	ldrb	r3, [r2, #28]
 801d676:	7bb9      	ldrb	r1, [r7, #14]
 801d678:	f361 0341 	bfi	r3, r1, #1, #1
 801d67c:	7713      	strb	r3, [r2, #28]
                        if (!await_motion)
 801d67e:	7bbb      	ldrb	r3, [r7, #14]
 801d680:	f083 0301 	eor.w	r3, r3, #1
 801d684:	b2db      	uxtb	r3, r3
 801d686:	2b00      	cmp	r3, #0
 801d688:	d029      	beq.n	801d6de <state_await_hold+0x292>
                            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801d68a:	4b1e      	ldr	r3, [pc, #120]	; (801d704 <state_await_hold+0x2b8>)
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	2004      	movs	r0, #4
 801d690:	4798      	blx	r3
                    if (bit_istrue(sys.homed.mask, bit(settings.parking.axis)) && (park.restore_target[settings.parking.axis] < settings.parking.target)) {
 801d692:	e024      	b.n	801d6de <state_await_hold+0x292>
                        spindle_all_off(); // De-energize
 801d694:	f7fe ffa4 	bl	801c5e0 <spindle_all_off>
                        if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801d698:	4b16      	ldr	r3, [pc, #88]	; (801d6f4 <state_await_hold+0x2a8>)
 801d69a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 801d69e:	f003 0302 	and.w	r3, r3, #2
 801d6a2:	b2db      	uxtb	r3, r3
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d003      	beq.n	801d6b0 <state_await_hold+0x264>
 801d6a8:	4b11      	ldr	r3, [pc, #68]	; (801d6f0 <state_await_hold+0x2a4>)
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	2b80      	cmp	r3, #128	; 0x80
 801d6ae:	d104      	bne.n	801d6ba <state_await_hold+0x26e>
                            hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801d6b0:	4b0d      	ldr	r3, [pc, #52]	; (801d6e8 <state_await_hold+0x29c>)
 801d6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d6b4:	2200      	movs	r2, #0
 801d6b6:	4610      	mov	r0, r2
 801d6b8:	4798      	blx	r3
                        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801d6ba:	4b0b      	ldr	r3, [pc, #44]	; (801d6e8 <state_await_hold+0x29c>)
 801d6bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d6be:	4798      	blx	r3
 801d6c0:	4603      	mov	r3, r0
 801d6c2:	b2db      	uxtb	r3, r3
 801d6c4:	f003 0308 	and.w	r3, r3, #8
 801d6c8:	b2db      	uxtb	r3, r3
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	bf14      	ite	ne
 801d6ce:	2301      	movne	r3, #1
 801d6d0:	2300      	moveq	r3, #0
 801d6d2:	b2db      	uxtb	r3, r3
 801d6d4:	461a      	mov	r2, r3
 801d6d6:	4b03      	ldr	r3, [pc, #12]	; (801d6e4 <state_await_hold+0x298>)
 801d6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                    if (bit_istrue(sys.homed.mask, bit(settings.parking.axis)) && (park.restore_target[settings.parking.axis] < settings.parking.target)) {
 801d6dc:	e03f      	b.n	801d75e <state_await_hold+0x312>
 801d6de:	bf00      	nop
 801d6e0:	e03d      	b.n	801d75e <state_await_hold+0x312>
 801d6e2:	bf00      	nop
 801d6e4:	20001520 	.word	0x20001520
 801d6e8:	200016a0 	.word	0x200016a0
 801d6ec:	2000156c 	.word	0x2000156c
 801d6f0:	2000201c 	.word	0x2000201c
 801d6f4:	20001cf0 	.word	0x20001cf0
 801d6f8:	20002020 	.word	0x20002020
 801d6fc:	200015a8 	.word	0x200015a8
 801d700:	2000202c 	.word	0x2000202c
 801d704:	200004fc 	.word	0x200004fc
 801d708:	0801db85 	.word	0x0801db85
 801d70c:	20002004 	.word	0x20002004
 801d710:	20002040 	.word	0x20002040
                    spindle_all_off(); // De-energize
 801d714:	f7fe ff64 	bl	801c5e0 <spindle_all_off>
                    if (!settings.safety_door.flags.keep_coolant_on || sys_state == STATE_SLEEP)
 801d718:	4b20      	ldr	r3, [pc, #128]	; (801d79c <state_await_hold+0x350>)
 801d71a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 801d71e:	f003 0302 	and.w	r3, r3, #2
 801d722:	b2db      	uxtb	r3, r3
 801d724:	2b00      	cmp	r3, #0
 801d726:	d003      	beq.n	801d730 <state_await_hold+0x2e4>
 801d728:	4b1d      	ldr	r3, [pc, #116]	; (801d7a0 <state_await_hold+0x354>)
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	2b80      	cmp	r3, #128	; 0x80
 801d72e:	d104      	bne.n	801d73a <state_await_hold+0x2ee>
                        hal.coolant.set_state((coolant_state_t){0}); // De-energize
 801d730:	4b1c      	ldr	r3, [pc, #112]	; (801d7a4 <state_await_hold+0x358>)
 801d732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d734:	2200      	movs	r2, #0
 801d736:	4610      	mov	r0, r2
 801d738:	4798      	blx	r3
                    sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801d73a:	4b1a      	ldr	r3, [pc, #104]	; (801d7a4 <state_await_hold+0x358>)
 801d73c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d73e:	4798      	blx	r3
 801d740:	4603      	mov	r3, r0
 801d742:	b2db      	uxtb	r3, r3
 801d744:	f003 0308 	and.w	r3, r3, #8
 801d748:	b2db      	uxtb	r3, r3
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	bf14      	ite	ne
 801d74e:	2301      	movne	r3, #1
 801d750:	2300      	moveq	r3, #0
 801d752:	b2db      	uxtb	r3, r3
 801d754:	461a      	mov	r2, r3
 801d756:	4b14      	ldr	r3, [pc, #80]	; (801d7a8 <state_await_hold+0x35c>)
 801d758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 801d75c:	e001      	b.n	801d762 <state_await_hold+0x316>
 801d75e:	e000      	b.n	801d762 <state_await_hold+0x316>
                break;
 801d760:	bf00      	nop
        }

        if (!handler_changed) {
 801d762:	7bfb      	ldrb	r3, [r7, #15]
 801d764:	f083 0301 	eor.w	r3, r3, #1
 801d768:	b2db      	uxtb	r3, r3
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d011      	beq.n	801d792 <state_await_hold+0x346>
            if(sys.flags.soft_limit)
 801d76e:	4b0e      	ldr	r3, [pc, #56]	; (801d7a8 <state_await_hold+0x35c>)
 801d770:	7d9b      	ldrb	r3, [r3, #22]
 801d772:	f003 0304 	and.w	r3, r3, #4
 801d776:	b2db      	uxtb	r3, r3
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d003      	beq.n	801d784 <state_await_hold+0x338>
                state_set(STATE_IDLE);
 801d77c:	2000      	movs	r0, #0
 801d77e:	f7ff fadb 	bl	801cd38 <state_set>
                sys.holding_state = Hold_Complete;
                stateHandler = state_await_resume;
            }
        }
    }
}
 801d782:	e006      	b.n	801d792 <state_await_hold+0x346>
                sys.holding_state = Hold_Complete;
 801d784:	4b08      	ldr	r3, [pc, #32]	; (801d7a8 <state_await_hold+0x35c>)
 801d786:	2201      	movs	r2, #1
 801d788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                stateHandler = state_await_resume;
 801d78c:	4b07      	ldr	r3, [pc, #28]	; (801d7ac <state_await_hold+0x360>)
 801d78e:	4a08      	ldr	r2, [pc, #32]	; (801d7b0 <state_await_hold+0x364>)
 801d790:	601a      	str	r2, [r3, #0]
}
 801d792:	bf00      	nop
 801d794:	3714      	adds	r7, #20
 801d796:	46bd      	mov	sp, r7
 801d798:	bd90      	pop	{r4, r7, pc}
 801d79a:	bf00      	nop
 801d79c:	20001cf0 	.word	0x20001cf0
 801d7a0:	2000201c 	.word	0x2000201c
 801d7a4:	200016a0 	.word	0x200016a0
 801d7a8:	20001520 	.word	0x20001520
 801d7ac:	200004fc 	.word	0x200004fc
 801d7b0:	0801d7b5 	.word	0x0801d7b5

0801d7b4 <state_await_resume>:

/*! /brief Waits for action to execute when in feed hold state.
 */
static void state_await_resume (uint_fast16_t rt_exec)
{
 801d7b4:	b590      	push	{r4, r7, lr}
 801d7b6:	b089      	sub	sp, #36	; 0x24
 801d7b8:	af00      	add	r7, sp, #0
 801d7ba:	6078      	str	r0, [r7, #4]
    if ((rt_exec & EXEC_CYCLE_COMPLETE) && settings.parking.flags.enabled) {
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	f003 0304 	and.w	r3, r3, #4
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d02d      	beq.n	801d822 <state_await_resume+0x6e>
 801d7c6:	4ba9      	ldr	r3, [pc, #676]	; (801da6c <state_await_resume+0x2b8>)
 801d7c8:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801d7cc:	f003 0301 	and.w	r3, r3, #1
 801d7d0:	b2db      	uxtb	r3, r3
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d025      	beq.n	801d822 <state_await_resume+0x6e>
        if (sys.step_control.execute_sys_motion) {
 801d7d6:	4ba6      	ldr	r3, [pc, #664]	; (801da70 <state_await_resume+0x2bc>)
 801d7d8:	7e1b      	ldrb	r3, [r3, #24]
 801d7da:	f003 0304 	and.w	r3, r3, #4
 801d7de:	b2db      	uxtb	r3, r3
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d006      	beq.n	801d7f2 <state_await_resume+0x3e>
            sys.step_control.execute_sys_motion = Off;
 801d7e4:	4aa2      	ldr	r2, [pc, #648]	; (801da70 <state_await_resume+0x2bc>)
 801d7e6:	7e13      	ldrb	r3, [r2, #24]
 801d7e8:	f36f 0382 	bfc	r3, #2, #1
 801d7ec:	7613      	strb	r3, [r2, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801d7ee:	f000 ff37 	bl	801e660 <st_parking_restore_buffer>
        }
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801d7f2:	4ba0      	ldr	r3, [pc, #640]	; (801da74 <state_await_resume+0x2c0>)
 801d7f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d7f6:	4798      	blx	r3
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	b2db      	uxtb	r3, r3
 801d7fc:	f003 0308 	and.w	r3, r3, #8
 801d800:	b2db      	uxtb	r3, r3
 801d802:	2b00      	cmp	r3, #0
 801d804:	bf14      	ite	ne
 801d806:	2301      	movne	r3, #1
 801d808:	2300      	moveq	r3, #0
 801d80a:	b2db      	uxtb	r3, r3
 801d80c:	461a      	mov	r2, r3
 801d80e:	4b98      	ldr	r3, [pc, #608]	; (801da70 <state_await_resume+0x2bc>)
 801d810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if(sys_state == STATE_SLEEP) {
 801d814:	4b98      	ldr	r3, [pc, #608]	; (801da78 <state_await_resume+0x2c4>)
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	2b80      	cmp	r3, #128	; 0x80
 801d81a:	d102      	bne.n	801d822 <state_await_resume+0x6e>
            enter_sleep();
 801d81c:	f7ff f8fc 	bl	801ca18 <enter_sleep>
            return;
 801d820:	e14b      	b.n	801daba <state_await_resume+0x306>
        }
    }

    if (rt_exec & EXEC_SLEEP)
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d828:	2b00      	cmp	r3, #0
 801d82a:	d002      	beq.n	801d832 <state_await_resume+0x7e>
        state_set(STATE_SLEEP);
 801d82c:	2080      	movs	r0, #128	; 0x80
 801d82e:	f7ff fa83 	bl	801cd38 <state_set>

    if (rt_exec & EXEC_SAFETY_DOOR)
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d011      	beq.n	801d860 <state_await_resume+0xac>
        sys.parking_state = hal.control.get_state().safety_door_ajar ? Parking_DoorAjar : Parking_DoorClosed;
 801d83c:	4b8d      	ldr	r3, [pc, #564]	; (801da74 <state_await_resume+0x2c0>)
 801d83e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d840:	4798      	blx	r3
 801d842:	4603      	mov	r3, r0
 801d844:	b2db      	uxtb	r3, r3
 801d846:	f003 0308 	and.w	r3, r3, #8
 801d84a:	b2db      	uxtb	r3, r3
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	bf14      	ite	ne
 801d850:	2301      	movne	r3, #1
 801d852:	2300      	moveq	r3, #0
 801d854:	b2db      	uxtb	r3, r3
 801d856:	461a      	mov	r2, r3
 801d858:	4b85      	ldr	r3, [pc, #532]	; (801da70 <state_await_resume+0x2bc>)
 801d85a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801d85e:	e12c      	b.n	801daba <state_await_resume+0x306>

    else if (rt_exec & EXEC_CYCLE_START) {
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	f003 0302 	and.w	r3, r3, #2
 801d866:	2b00      	cmp	r3, #0
 801d868:	f000 8114 	beq.w	801da94 <state_await_resume+0x2e0>

        if (sys_state == STATE_HOLD && !sys.override.spindle_stop.value)
 801d86c:	4b82      	ldr	r3, [pc, #520]	; (801da78 <state_await_resume+0x2c4>)
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	2b10      	cmp	r3, #16
 801d872:	d10b      	bne.n	801d88c <state_await_resume+0xd8>
 801d874:	4b7e      	ldr	r3, [pc, #504]	; (801da70 <state_await_resume+0x2bc>)
 801d876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d106      	bne.n	801d88c <state_await_resume+0xd8>
            sys.override.spindle_stop.restore_cycle = On;
 801d87e:	4a7c      	ldr	r2, [pc, #496]	; (801da70 <state_await_resume+0x2bc>)
 801d880:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 801d884:	f043 0308 	orr.w	r3, r3, #8
 801d888:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

        switch (sys_state) {
 801d88c:	4b7a      	ldr	r3, [pc, #488]	; (801da78 <state_await_resume+0x2c4>)
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d894:	f000 80d2 	beq.w	801da3c <state_await_resume+0x288>
 801d898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d89c:	d868      	bhi.n	801d970 <state_await_resume+0x1bc>
 801d89e:	2b40      	cmp	r3, #64	; 0x40
 801d8a0:	d003      	beq.n	801d8aa <state_await_resume+0xf6>
 801d8a2:	2b80      	cmp	r3, #128	; 0x80
 801d8a4:	f000 80cc 	beq.w	801da40 <state_await_resume+0x28c>
 801d8a8:	e062      	b.n	801d970 <state_await_resume+0x1bc>

            case STATE_SLEEP:
                break;

            case STATE_SAFETY_DOOR:
                if (park.flags.restart || !hal.control.get_state().safety_door_ajar) {
 801d8aa:	4b74      	ldr	r3, [pc, #464]	; (801da7c <state_await_resume+0x2c8>)
 801d8ac:	7f1b      	ldrb	r3, [r3, #28]
 801d8ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801d8b2:	b2db      	uxtb	r3, r3
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d10a      	bne.n	801d8ce <state_await_resume+0x11a>
 801d8b8:	4b6e      	ldr	r3, [pc, #440]	; (801da74 <state_await_resume+0x2c0>)
 801d8ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d8bc:	4798      	blx	r3
 801d8be:	4603      	mov	r3, r0
 801d8c0:	b2db      	uxtb	r3, r3
 801d8c2:	f003 0308 	and.w	r3, r3, #8
 801d8c6:	b2db      	uxtb	r3, r3
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	f040 80bb 	bne.w	801da44 <state_await_resume+0x290>

                    bool await_motion = false;
 801d8ce:	2300      	movs	r3, #0
 801d8d0:	77fb      	strb	r3, [r7, #31]
                    stateHandler = state_restore;
 801d8d2:	4b6b      	ldr	r3, [pc, #428]	; (801da80 <state_await_resume+0x2cc>)
 801d8d4:	4a6b      	ldr	r2, [pc, #428]	; (801da84 <state_await_resume+0x2d0>)
 801d8d6:	601a      	str	r2, [r3, #0]
                    sys.parking_state = Parking_Resuming;
 801d8d8:	4b65      	ldr	r3, [pc, #404]	; (801da70 <state_await_resume+0x2bc>)
 801d8da:	2204      	movs	r2, #4
 801d8dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                    // Resume door state when parking motion has retracted and door has been closed.
                    if (park.flags.motion) {
 801d8e0:	4b66      	ldr	r3, [pc, #408]	; (801da7c <state_await_resume+0x2c8>)
 801d8e2:	7f1b      	ldrb	r3, [r3, #28]
 801d8e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801d8e8:	b2db      	uxtb	r3, r3
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d035      	beq.n	801d95a <state_await_resume+0x1a6>

                        park.flags.restart = Off;
 801d8ee:	4a63      	ldr	r2, [pc, #396]	; (801da7c <state_await_resume+0x2c8>)
 801d8f0:	7f13      	ldrb	r3, [r2, #28]
 801d8f2:	f36f 0382 	bfc	r3, #2, #1
 801d8f6:	7713      	strb	r3, [r2, #28]

                        // Execute fast restore motion to the pull-out position.
                        // Check to ensure the motion doesn't move below pull-out position.
                        if (park.restore_target[settings.parking.axis] <= settings.parking.target) {
 801d8f8:	4b5c      	ldr	r3, [pc, #368]	; (801da6c <state_await_resume+0x2b8>)
 801d8fa:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801d8fe:	4a5f      	ldr	r2, [pc, #380]	; (801da7c <state_await_resume+0x2c8>)
 801d900:	3302      	adds	r3, #2
 801d902:	009b      	lsls	r3, r3, #2
 801d904:	4413      	add	r3, r2
 801d906:	3304      	adds	r3, #4
 801d908:	ed93 7a00 	vldr	s14, [r3]
 801d90c:	4b57      	ldr	r3, [pc, #348]	; (801da6c <state_await_resume+0x2b8>)
 801d90e:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 801d912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d91a:	d81e      	bhi.n	801d95a <state_await_resume+0x1a6>
                            float target[N_AXIS];
                            memcpy(target, park.restore_target, sizeof(target));
 801d91c:	4a57      	ldr	r2, [pc, #348]	; (801da7c <state_await_resume+0x2c8>)
 801d91e:	f107 0310 	add.w	r3, r7, #16
 801d922:	320c      	adds	r2, #12
 801d924:	ca07      	ldmia	r2, {r0, r1, r2}
 801d926:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                            target[settings.parking.axis] = park.retract_waypoint;
 801d92a:	4b50      	ldr	r3, [pc, #320]	; (801da6c <state_await_resume+0x2b8>)
 801d92c:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801d930:	4619      	mov	r1, r3
 801d932:	4b52      	ldr	r3, [pc, #328]	; (801da7c <state_await_resume+0x2c8>)
 801d934:	699a      	ldr	r2, [r3, #24]
 801d936:	008b      	lsls	r3, r1, #2
 801d938:	3320      	adds	r3, #32
 801d93a:	443b      	add	r3, r7
 801d93c:	3b10      	subs	r3, #16
 801d93e:	601a      	str	r2, [r3, #0]
                            park.plan_data.feed_rate = settings.parking.rate;
 801d940:	4b4a      	ldr	r3, [pc, #296]	; (801da6c <state_await_resume+0x2b8>)
 801d942:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801d946:	4a4d      	ldr	r2, [pc, #308]	; (801da7c <state_await_resume+0x2c8>)
 801d948:	6213      	str	r3, [r2, #32]
                            await_motion = mc_parking_motion(target, &park.plan_data);
 801d94a:	f107 0310 	add.w	r3, r7, #16
 801d94e:	494e      	ldr	r1, [pc, #312]	; (801da88 <state_await_resume+0x2d4>)
 801d950:	4618      	mov	r0, r3
 801d952:	f7f1 fb89 	bl	800f068 <mc_parking_motion>
 801d956:	4603      	mov	r3, r0
 801d958:	77fb      	strb	r3, [r7, #31]
                        }
                    }

                    if (!await_motion) // No motion, proceed to next step immediately.
 801d95a:	7ffb      	ldrb	r3, [r7, #31]
 801d95c:	f083 0301 	eor.w	r3, r3, #1
 801d960:	b2db      	uxtb	r3, r3
 801d962:	2b00      	cmp	r3, #0
 801d964:	d06e      	beq.n	801da44 <state_await_resume+0x290>
                        stateHandler(EXEC_CYCLE_COMPLETE);
 801d966:	4b46      	ldr	r3, [pc, #280]	; (801da80 <state_await_resume+0x2cc>)
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	2004      	movs	r0, #4
 801d96c:	4798      	blx	r3
                }
                break;
 801d96e:	e069      	b.n	801da44 <state_await_resume+0x290>

            default:
                if (!settings.flags.restore_after_feed_hold) {
 801d970:	4b3e      	ldr	r3, [pc, #248]	; (801da6c <state_await_resume+0x2b8>)
 801d972:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801d976:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d97a:	b2db      	uxtb	r3, r3
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d117      	bne.n	801d9b0 <state_await_resume+0x1fc>
                    if (!restore_condition.spindle[restore_condition.spindle_num].hal->get_state().on)
 801d980:	4b42      	ldr	r3, [pc, #264]	; (801da8c <state_await_resume+0x2d8>)
 801d982:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d986:	4a41      	ldr	r2, [pc, #260]	; (801da8c <state_await_resume+0x2d8>)
 801d988:	011b      	lsls	r3, r3, #4
 801d98a:	4413      	add	r3, r2
 801d98c:	3310      	adds	r3, #16
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	6a1b      	ldr	r3, [r3, #32]
 801d992:	4798      	blx	r3
 801d994:	4603      	mov	r3, r0
 801d996:	b2db      	uxtb	r3, r3
 801d998:	f003 0301 	and.w	r3, r3, #1
 801d99c:	b2db      	uxtb	r3, r3
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d101      	bne.n	801d9a6 <state_await_resume+0x1f2>
                        gc_spindle_off();
 801d9a2:	f7e7 ff97 	bl	80058d4 <gc_spindle_off>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801d9a6:	4b32      	ldr	r3, [pc, #200]	; (801da70 <state_await_resume+0x2bc>)
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states

                    grbl.report.feedback_message(Message_None);
                }
                break;
 801d9ae:	e04a      	b.n	801da46 <state_await_resume+0x292>
                    if (restore_condition.spindle[restore_condition.spindle_num].state.on != restore_condition.spindle[restore_condition.spindle_num].hal->get_state().on) {
 801d9b0:	4b36      	ldr	r3, [pc, #216]	; (801da8c <state_await_resume+0x2d8>)
 801d9b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d9b6:	4a35      	ldr	r2, [pc, #212]	; (801da8c <state_await_resume+0x2d8>)
 801d9b8:	011b      	lsls	r3, r3, #4
 801d9ba:	4413      	add	r3, r2
 801d9bc:	7a1b      	ldrb	r3, [r3, #8]
 801d9be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d9c2:	b2dc      	uxtb	r4, r3
 801d9c4:	4b31      	ldr	r3, [pc, #196]	; (801da8c <state_await_resume+0x2d8>)
 801d9c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d9ca:	4a30      	ldr	r2, [pc, #192]	; (801da8c <state_await_resume+0x2d8>)
 801d9cc:	011b      	lsls	r3, r3, #4
 801d9ce:	4413      	add	r3, r2
 801d9d0:	3310      	adds	r3, #16
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	6a1b      	ldr	r3, [r3, #32]
 801d9d6:	4798      	blx	r3
 801d9d8:	4603      	mov	r3, r0
 801d9da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d9de:	b2db      	uxtb	r3, r3
 801d9e0:	429c      	cmp	r4, r3
 801d9e2:	d00d      	beq.n	801da00 <state_await_resume+0x24c>
                        grbl.report.feedback_message(Message_SpindleRestore);
 801d9e4:	4b2a      	ldr	r3, [pc, #168]	; (801da90 <state_await_resume+0x2dc>)
 801d9e6:	68db      	ldr	r3, [r3, #12]
 801d9e8:	200a      	movs	r0, #10
 801d9ea:	4798      	blx	r3
                        state_spindle_restore(&restore_condition.spindle[restore_condition.spindle_num]);
 801d9ec:	4b27      	ldr	r3, [pc, #156]	; (801da8c <state_await_resume+0x2d8>)
 801d9ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d9f2:	011b      	lsls	r3, r3, #4
 801d9f4:	4a25      	ldr	r2, [pc, #148]	; (801da8c <state_await_resume+0x2d8>)
 801d9f6:	4413      	add	r3, r2
 801d9f8:	3304      	adds	r3, #4
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f7fe ff83 	bl	801c906 <state_spindle_restore>
                    if (restore_condition.coolant.value != hal.coolant.get_state().value) {
 801da00:	4b22      	ldr	r3, [pc, #136]	; (801da8c <state_await_resume+0x2d8>)
 801da02:	781c      	ldrb	r4, [r3, #0]
 801da04:	4b1b      	ldr	r3, [pc, #108]	; (801da74 <state_await_resume+0x2c0>)
 801da06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801da08:	4798      	blx	r3
 801da0a:	4603      	mov	r3, r0
 801da0c:	b2db      	uxtb	r3, r3
 801da0e:	429c      	cmp	r4, r3
 801da10:	d00b      	beq.n	801da2a <state_await_resume+0x276>
                        coolant_set_state(restore_condition.coolant);
 801da12:	4b1e      	ldr	r3, [pc, #120]	; (801da8c <state_await_resume+0x2d8>)
 801da14:	7818      	ldrb	r0, [r3, #0]
 801da16:	f7e7 fbc1 	bl	800519c <coolant_set_state>
                        delay_sec(settings.safety_door.coolant_on_delay, DelayMode_SysSuspend);
 801da1a:	4b14      	ldr	r3, [pc, #80]	; (801da6c <state_await_resume+0x2b8>)
 801da1c:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 801da20:	2001      	movs	r0, #1
 801da22:	eeb0 0a67 	vmov.f32	s0, s15
 801da26:	f7f2 fc0d 	bl	8010244 <delay_sec>
                    sys.override.spindle_stop.value = 0; // Clear spindle stop override states
 801da2a:	4b11      	ldr	r3, [pc, #68]	; (801da70 <state_await_resume+0x2bc>)
 801da2c:	2200      	movs	r2, #0
 801da2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    grbl.report.feedback_message(Message_None);
 801da32:	4b17      	ldr	r3, [pc, #92]	; (801da90 <state_await_resume+0x2dc>)
 801da34:	68db      	ldr	r3, [r3, #12]
 801da36:	2000      	movs	r0, #0
 801da38:	4798      	blx	r3
                break;
 801da3a:	e004      	b.n	801da46 <state_await_resume+0x292>
                break;
 801da3c:	bf00      	nop
 801da3e:	e002      	b.n	801da46 <state_await_resume+0x292>
                break;
 801da40:	bf00      	nop
 801da42:	e000      	b.n	801da46 <state_await_resume+0x292>
                break;
 801da44:	bf00      	nop
        }

        // Restart cycle
        if (!(sys_state & (STATE_SLEEP|STATE_SAFETY_DOOR))) {
 801da46:	4b0c      	ldr	r3, [pc, #48]	; (801da78 <state_await_resume+0x2c4>)
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d133      	bne.n	801daba <state_await_resume+0x306>
            step_control_t step_control = sys.step_control;
 801da52:	4b07      	ldr	r3, [pc, #28]	; (801da70 <state_await_resume+0x2bc>)
 801da54:	7e1b      	ldrb	r3, [r3, #24]
 801da56:	733b      	strb	r3, [r7, #12]
            state_set(STATE_IDLE);
 801da58:	2000      	movs	r0, #0
 801da5a:	f7ff f96d 	bl	801cd38 <state_set>
            sys.step_control = step_control;
 801da5e:	4a04      	ldr	r2, [pc, #16]	; (801da70 <state_await_resume+0x2bc>)
 801da60:	7b3b      	ldrb	r3, [r7, #12]
 801da62:	7613      	strb	r3, [r2, #24]
            state_set(STATE_CYCLE);
 801da64:	2008      	movs	r0, #8
 801da66:	f7ff f967 	bl	801cd38 <state_set>
 801da6a:	e026      	b.n	801daba <state_await_resume+0x306>
 801da6c:	20001cf0 	.word	0x20001cf0
 801da70:	20001520 	.word	0x20001520
 801da74:	200016a0 	.word	0x200016a0
 801da78:	2000201c 	.word	0x2000201c
 801da7c:	20002020 	.word	0x20002020
 801da80:	200004fc 	.word	0x200004fc
 801da84:	0801dcad 	.word	0x0801dcad
 801da88:	20002040 	.word	0x20002040
 801da8c:	20002004 	.word	0x20002004
 801da90:	200015b8 	.word	0x200015b8
        }

    } else if ((rt_exec & EXEC_DOOR_CLOSED) && !hal.control.get_state().safety_door_ajar)
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d00d      	beq.n	801daba <state_await_resume+0x306>
 801da9e:	4b08      	ldr	r3, [pc, #32]	; (801dac0 <state_await_resume+0x30c>)
 801daa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801daa2:	4798      	blx	r3
 801daa4:	4603      	mov	r3, r0
 801daa6:	b2db      	uxtb	r3, r3
 801daa8:	f003 0308 	and.w	r3, r3, #8
 801daac:	b2db      	uxtb	r3, r3
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d103      	bne.n	801daba <state_await_resume+0x306>
        sys.parking_state = Parking_DoorClosed;
 801dab2:	4b04      	ldr	r3, [pc, #16]	; (801dac4 <state_await_resume+0x310>)
 801dab4:	2200      	movs	r2, #0
 801dab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801daba:	3724      	adds	r7, #36	; 0x24
 801dabc:	46bd      	mov	sp, r7
 801dabe:	bd90      	pop	{r4, r7, pc}
 801dac0:	200016a0 	.word	0x200016a0
 801dac4:	20001520 	.word	0x20001520

0801dac8 <state_await_restart_retract>:

/*! /brief Waits until plunge motion abort is completed then calls state_await_hold() to restart retraction.
state_await_hold() is set to handle the cycle complete event.
 */
static void state_await_restart_retract (uint_fast16_t rt_exec)
{
 801dac8:	b580      	push	{r7, lr}
 801daca:	b082      	sub	sp, #8
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	f003 0304 	and.w	r3, r3, #4
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d014      	beq.n	801db04 <state_await_restart_retract+0x3c>

        if (sys.step_control.execute_sys_motion) {
 801dada:	4b0c      	ldr	r3, [pc, #48]	; (801db0c <state_await_restart_retract+0x44>)
 801dadc:	7e1b      	ldrb	r3, [r3, #24]
 801dade:	f003 0304 	and.w	r3, r3, #4
 801dae2:	b2db      	uxtb	r3, r3
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d006      	beq.n	801daf6 <state_await_restart_retract+0x2e>
            sys.step_control.execute_sys_motion = Off;
 801dae8:	4a08      	ldr	r2, [pc, #32]	; (801db0c <state_await_restart_retract+0x44>)
 801daea:	7e13      	ldrb	r3, [r2, #24]
 801daec:	f36f 0382 	bfc	r3, #2, #1
 801daf0:	7613      	strb	r3, [r2, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801daf2:	f000 fdb5 	bl	801e660 <st_parking_restore_buffer>
        }

        stateHandler = state_await_hold;
 801daf6:	4b06      	ldr	r3, [pc, #24]	; (801db10 <state_await_restart_retract+0x48>)
 801daf8:	4a06      	ldr	r2, [pc, #24]	; (801db14 <state_await_restart_retract+0x4c>)
 801dafa:	601a      	str	r2, [r3, #0]
        stateHandler(EXEC_CYCLE_COMPLETE);
 801dafc:	4b04      	ldr	r3, [pc, #16]	; (801db10 <state_await_restart_retract+0x48>)
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	2004      	movs	r0, #4
 801db02:	4798      	blx	r3
    }
}
 801db04:	bf00      	nop
 801db06:	3708      	adds	r7, #8
 801db08:	46bd      	mov	sp, r7
 801db0a:	bd80      	pop	{r7, pc}
 801db0c:	20001520 	.word	0x20001520
 801db10:	200004fc 	.word	0x200004fc
 801db14:	0801d44d 	.word	0x0801d44d

0801db18 <restart_retract>:

/*! /brief Sets up a feed hold to abort plunge motion.
state_await_restart_retract() is set to handle the cycle complete event.
 */
static void restart_retract (void)
{
 801db18:	b580      	push	{r7, lr}
 801db1a:	af00      	add	r7, sp, #0
    grbl.report.feedback_message(Message_SafetyDoorAjar);
 801db1c:	4b14      	ldr	r3, [pc, #80]	; (801db70 <restart_retract+0x58>)
 801db1e:	68db      	ldr	r3, [r3, #12]
 801db20:	2006      	movs	r0, #6
 801db22:	4798      	blx	r3

    stateHandler = state_await_restart_retract;
 801db24:	4b13      	ldr	r3, [pc, #76]	; (801db74 <restart_retract+0x5c>)
 801db26:	4a14      	ldr	r2, [pc, #80]	; (801db78 <restart_retract+0x60>)
 801db28:	601a      	str	r2, [r3, #0]

    park.flags.restart = On;
 801db2a:	4a14      	ldr	r2, [pc, #80]	; (801db7c <restart_retract+0x64>)
 801db2c:	7f13      	ldrb	r3, [r2, #28]
 801db2e:	f043 0304 	orr.w	r3, r3, #4
 801db32:	7713      	strb	r3, [r2, #28]
    sys.parking_state = Parking_Retracting;
 801db34:	4b12      	ldr	r3, [pc, #72]	; (801db80 <restart_retract+0x68>)
 801db36:	2202      	movs	r2, #2
 801db38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    if (sys.step_control.execute_sys_motion) {
 801db3c:	4b10      	ldr	r3, [pc, #64]	; (801db80 <restart_retract+0x68>)
 801db3e:	7e1b      	ldrb	r3, [r3, #24]
 801db40:	f003 0304 	and.w	r3, r3, #4
 801db44:	b2db      	uxtb	r3, r3
 801db46:	2b00      	cmp	r3, #0
 801db48:	d00c      	beq.n	801db64 <restart_retract+0x4c>
        st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 801db4a:	f000 fd27 	bl	801e59c <st_update_plan_block_parameters>
        sys.step_control.execute_hold = On;
 801db4e:	4a0c      	ldr	r2, [pc, #48]	; (801db80 <restart_retract+0x68>)
 801db50:	7e13      	ldrb	r3, [r2, #24]
 801db52:	f043 0302 	orr.w	r3, r3, #2
 801db56:	7613      	strb	r3, [r2, #24]
        sys.step_control.execute_sys_motion = On;
 801db58:	4a09      	ldr	r2, [pc, #36]	; (801db80 <restart_retract+0x68>)
 801db5a:	7e13      	ldrb	r3, [r2, #24]
 801db5c:	f043 0304 	orr.w	r3, r3, #4
 801db60:	7613      	strb	r3, [r2, #24]
    } else // else NO_MOTION is active.
        stateHandler(EXEC_CYCLE_COMPLETE);
}
 801db62:	e003      	b.n	801db6c <restart_retract+0x54>
        stateHandler(EXEC_CYCLE_COMPLETE);
 801db64:	4b03      	ldr	r3, [pc, #12]	; (801db74 <restart_retract+0x5c>)
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	2004      	movs	r0, #4
 801db6a:	4798      	blx	r3
}
 801db6c:	bf00      	nop
 801db6e:	bd80      	pop	{r7, pc}
 801db70:	200015b8 	.word	0x200015b8
 801db74:	200004fc 	.word	0x200004fc
 801db78:	0801dac9 	.word	0x0801dac9
 801db7c:	20002020 	.word	0x20002020
 801db80:	20001520 	.word	0x20001520

0801db84 <state_await_waypoint_retract>:

/*! /brief Waits until slow plunge motion is completed then deenergize spindle and coolant and execute fast retract motion.
state_await_resume() is set to handle the cycle complete event.
 */
static void state_await_waypoint_retract (uint_fast16_t rt_exec)
{
 801db84:	b580      	push	{r7, lr}
 801db86:	b086      	sub	sp, #24
 801db88:	af00      	add	r7, sp, #0
 801db8a:	6078      	str	r0, [r7, #4]
    if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	f003 0304 	and.w	r3, r3, #4
 801db92:	2b00      	cmp	r3, #0
 801db94:	d075      	beq.n	801dc82 <state_await_waypoint_retract+0xfe>

        bool await_motion = false;
 801db96:	2300      	movs	r3, #0
 801db98:	75fb      	strb	r3, [r7, #23]

        if (sys.step_control.execute_sys_motion) {
 801db9a:	4b3c      	ldr	r3, [pc, #240]	; (801dc8c <state_await_waypoint_retract+0x108>)
 801db9c:	7e1b      	ldrb	r3, [r3, #24]
 801db9e:	f003 0304 	and.w	r3, r3, #4
 801dba2:	b2db      	uxtb	r3, r3
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d006      	beq.n	801dbb6 <state_await_waypoint_retract+0x32>
            sys.step_control.execute_sys_motion = Off;
 801dba8:	4a38      	ldr	r2, [pc, #224]	; (801dc8c <state_await_waypoint_retract+0x108>)
 801dbaa:	7e13      	ldrb	r3, [r2, #24]
 801dbac:	f36f 0382 	bfc	r3, #2, #1
 801dbb0:	7613      	strb	r3, [r2, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801dbb2:	f000 fd55 	bl	801e660 <st_parking_restore_buffer>
        }

        // NOTE: Clear accessory state after retract and after an aborted restore motion.
        park.plan_data.spindle.state.value = 0;
 801dbb6:	4b36      	ldr	r3, [pc, #216]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dbb8:	2200      	movs	r2, #0
 801dbba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        park.plan_data.spindle.rpm = 0.0f;
 801dbbe:	4b34      	ldr	r3, [pc, #208]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dbc0:	f04f 0200 	mov.w	r2, #0
 801dbc4:	625a      	str	r2, [r3, #36]	; 0x24
        park.plan_data.spindle.hal->set_state(park.plan_data.spindle.state, 0.0f); // De-energize
 801dbc6:	4b32      	ldr	r3, [pc, #200]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dbc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dbca:	69db      	ldr	r3, [r3, #28]
 801dbcc:	4a30      	ldr	r2, [pc, #192]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dbce:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801dc94 <state_await_waypoint_retract+0x110>
 801dbd2:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 801dbd6:	4798      	blx	r3

        if (!settings.safety_door.flags.keep_coolant_on) {
 801dbd8:	4b2f      	ldr	r3, [pc, #188]	; (801dc98 <state_await_waypoint_retract+0x114>)
 801dbda:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 801dbde:	f003 0302 	and.w	r3, r3, #2
 801dbe2:	b2db      	uxtb	r3, r3
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d109      	bne.n	801dbfc <state_await_waypoint_retract+0x78>
            park.plan_data.condition.coolant.value = 0;
 801dbe8:	4b29      	ldr	r3, [pc, #164]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dbea:	2200      	movs	r2, #0
 801dbec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            hal.coolant.set_state(park.plan_data.condition.coolant); // De-energize
 801dbf0:	4b2a      	ldr	r3, [pc, #168]	; (801dc9c <state_await_waypoint_retract+0x118>)
 801dbf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dbf4:	4a26      	ldr	r2, [pc, #152]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dbf6:	f892 0036 	ldrb.w	r0, [r2, #54]	; 0x36
 801dbfa:	4798      	blx	r3
        }

        stateHandler = state_await_resume;
 801dbfc:	4b28      	ldr	r3, [pc, #160]	; (801dca0 <state_await_waypoint_retract+0x11c>)
 801dbfe:	4a29      	ldr	r2, [pc, #164]	; (801dca4 <state_await_waypoint_retract+0x120>)
 801dc00:	601a      	str	r2, [r3, #0]

        // Execute fast parking retract motion to parking target location.
        if (park.flags.motion && park.target[settings.parking.axis] < settings.parking.target) {
 801dc02:	4b23      	ldr	r3, [pc, #140]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dc04:	7f1b      	ldrb	r3, [r3, #28]
 801dc06:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dc0a:	b2db      	uxtb	r3, r3
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d02e      	beq.n	801dc6e <state_await_waypoint_retract+0xea>
 801dc10:	4b21      	ldr	r3, [pc, #132]	; (801dc98 <state_await_waypoint_retract+0x114>)
 801dc12:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801dc16:	4a1e      	ldr	r2, [pc, #120]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dc18:	009b      	lsls	r3, r3, #2
 801dc1a:	4413      	add	r3, r2
 801dc1c:	ed93 7a00 	vldr	s14, [r3]
 801dc20:	4b1d      	ldr	r3, [pc, #116]	; (801dc98 <state_await_waypoint_retract+0x114>)
 801dc22:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 801dc26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801dc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc2e:	d51e      	bpl.n	801dc6e <state_await_waypoint_retract+0xea>
            float target[N_AXIS];
            memcpy(target, park.target, sizeof(target));
 801dc30:	4a17      	ldr	r2, [pc, #92]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dc32:	f107 0308 	add.w	r3, r7, #8
 801dc36:	ca07      	ldmia	r2, {r0, r1, r2}
 801dc38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            target[settings.parking.axis] = settings.parking.target;
 801dc3c:	4b16      	ldr	r3, [pc, #88]	; (801dc98 <state_await_waypoint_retract+0x114>)
 801dc3e:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 801dc42:	4619      	mov	r1, r3
 801dc44:	4b14      	ldr	r3, [pc, #80]	; (801dc98 <state_await_waypoint_retract+0x114>)
 801dc46:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 801dc4a:	008b      	lsls	r3, r1, #2
 801dc4c:	3318      	adds	r3, #24
 801dc4e:	443b      	add	r3, r7
 801dc50:	3b10      	subs	r3, #16
 801dc52:	601a      	str	r2, [r3, #0]
            park.plan_data.feed_rate = settings.parking.rate;
 801dc54:	4b10      	ldr	r3, [pc, #64]	; (801dc98 <state_await_waypoint_retract+0x114>)
 801dc56:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801dc5a:	4a0d      	ldr	r2, [pc, #52]	; (801dc90 <state_await_waypoint_retract+0x10c>)
 801dc5c:	6213      	str	r3, [r2, #32]
            await_motion = mc_parking_motion(target, &park.plan_data);
 801dc5e:	f107 0308 	add.w	r3, r7, #8
 801dc62:	4911      	ldr	r1, [pc, #68]	; (801dca8 <state_await_waypoint_retract+0x124>)
 801dc64:	4618      	mov	r0, r3
 801dc66:	f7f1 f9ff 	bl	800f068 <mc_parking_motion>
 801dc6a:	4603      	mov	r3, r0
 801dc6c:	75fb      	strb	r3, [r7, #23]
        }

        if (!await_motion)
 801dc6e:	7dfb      	ldrb	r3, [r7, #23]
 801dc70:	f083 0301 	eor.w	r3, r3, #1
 801dc74:	b2db      	uxtb	r3, r3
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d003      	beq.n	801dc82 <state_await_waypoint_retract+0xfe>
            stateHandler(EXEC_CYCLE_COMPLETE);
 801dc7a:	4b09      	ldr	r3, [pc, #36]	; (801dca0 <state_await_waypoint_retract+0x11c>)
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	2004      	movs	r0, #4
 801dc80:	4798      	blx	r3
    }
}
 801dc82:	bf00      	nop
 801dc84:	3718      	adds	r7, #24
 801dc86:	46bd      	mov	sp, r7
 801dc88:	bd80      	pop	{r7, pc}
 801dc8a:	bf00      	nop
 801dc8c:	20001520 	.word	0x20001520
 801dc90:	20002020 	.word	0x20002020
 801dc94:	00000000 	.word	0x00000000
 801dc98:	20001cf0 	.word	0x20001cf0
 801dc9c:	200016a0 	.word	0x200016a0
 801dca0:	200004fc 	.word	0x200004fc
 801dca4:	0801d7b5 	.word	0x0801d7b5
 801dca8:	20002040 	.word	0x20002040

0801dcac <state_restore>:
/*! /brief Waits until fast plunge motion is completed then restore spindle and coolant and execute slow plunge motion.
state_await_resumed() is set to handle the cycle complete event.
Note: A safety door event during restoration or motion will halt it and restart the retract sequence.
 */
static void state_restore (uint_fast16_t rt_exec)
{
 801dcac:	b580      	push	{r7, lr}
 801dcae:	b084      	sub	sp, #16
 801dcb0:	af00      	add	r7, sp, #0
 801dcb2:	6078      	str	r0, [r7, #4]
    if (rt_exec & EXEC_SAFETY_DOOR) {
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d00f      	beq.n	801dcde <state_restore+0x32>
        if(park.flags.restoring)
 801dcbe:	4b3b      	ldr	r3, [pc, #236]	; (801ddac <state_restore+0x100>)
 801dcc0:	7f1b      	ldrb	r3, [r3, #28]
 801dcc2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dcc6:	b2db      	uxtb	r3, r3
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	d005      	beq.n	801dcd8 <state_restore+0x2c>
            park.flags.restart = On;
 801dccc:	4a37      	ldr	r2, [pc, #220]	; (801ddac <state_restore+0x100>)
 801dcce:	7f13      	ldrb	r3, [r2, #28]
 801dcd0:	f043 0304 	orr.w	r3, r3, #4
 801dcd4:	7713      	strb	r3, [r2, #28]
 801dcd6:	e066      	b.n	801dda6 <state_restore+0xfa>
        else
            restart_retract();
 801dcd8:	f7ff ff1e 	bl	801db18 <restart_retract>
 801dcdc:	e063      	b.n	801dda6 <state_restore+0xfa>
    }

    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	f003 0304 	and.w	r3, r3, #4
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d05e      	beq.n	801dda6 <state_restore+0xfa>

        bool await_motion = false;
 801dce8:	2300      	movs	r3, #0
 801dcea:	73fb      	strb	r3, [r7, #15]

        if (sys.step_control.execute_sys_motion) {
 801dcec:	4b30      	ldr	r3, [pc, #192]	; (801ddb0 <state_restore+0x104>)
 801dcee:	7e1b      	ldrb	r3, [r3, #24]
 801dcf0:	f003 0304 	and.w	r3, r3, #4
 801dcf4:	b2db      	uxtb	r3, r3
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d006      	beq.n	801dd08 <state_restore+0x5c>
            sys.step_control.execute_sys_motion = Off;
 801dcfa:	4a2d      	ldr	r2, [pc, #180]	; (801ddb0 <state_restore+0x104>)
 801dcfc:	7e13      	ldrb	r3, [r2, #24]
 801dcfe:	f36f 0382 	bfc	r3, #2, #1
 801dd02:	7613      	strb	r3, [r2, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801dd04:	f000 fcac 	bl	801e660 <st_parking_restore_buffer>
        }

        park.flags.restart = Off;
 801dd08:	4a28      	ldr	r2, [pc, #160]	; (801ddac <state_restore+0x100>)
 801dd0a:	7f13      	ldrb	r3, [r2, #28]
 801dd0c:	f36f 0382 	bfc	r3, #2, #1
 801dd10:	7713      	strb	r3, [r2, #28]
        stateHandler = state_await_resumed;
 801dd12:	4b28      	ldr	r3, [pc, #160]	; (801ddb4 <state_restore+0x108>)
 801dd14:	4a28      	ldr	r2, [pc, #160]	; (801ddb8 <state_restore+0x10c>)
 801dd16:	601a      	str	r2, [r3, #0]

        // Restart spindle and coolant, delay to power-up.
        state_restore_conditions(&restore_condition);
 801dd18:	4828      	ldr	r0, [pc, #160]	; (801ddbc <state_restore+0x110>)
 801dd1a:	f7fe fe25 	bl	801c968 <state_restore_conditions>

        if(park.flags.restart) {
 801dd1e:	4b23      	ldr	r3, [pc, #140]	; (801ddac <state_restore+0x100>)
 801dd20:	7f1b      	ldrb	r3, [r3, #28]
 801dd22:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801dd26:	b2db      	uxtb	r3, r3
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d002      	beq.n	801dd32 <state_restore+0x86>
            // Restart flag was set by a safety door event during
            // conditions restore so restart retract.
            restart_retract();
 801dd2c:	f7ff fef4 	bl	801db18 <restart_retract>
            return;
 801dd30:	e039      	b.n	801dda6 <state_restore+0xfa>
        }

        if (park.flags.motion) {
 801dd32:	4b1e      	ldr	r3, [pc, #120]	; (801ddac <state_restore+0x100>)
 801dd34:	7f1b      	ldrb	r3, [r3, #28]
 801dd36:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dd3a:	b2db      	uxtb	r3, r3
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d028      	beq.n	801dd92 <state_restore+0xe6>

            sys.parking_state = Parking_Resuming;
 801dd40:	4b1b      	ldr	r3, [pc, #108]	; (801ddb0 <state_restore+0x104>)
 801dd42:	2204      	movs	r2, #4
 801dd44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            // Execute slow plunge motion from pull-out position to resume position.

            // Regardless if the retract parking motion was a valid/safe motion or not, the
            // restore parking motion should logically be valid, either by returning to the
            // original position through valid machine space or by not moving at all.
            park.plan_data.feed_rate = settings.parking.pullout_rate;
 801dd48:	4b1d      	ldr	r3, [pc, #116]	; (801ddc0 <state_restore+0x114>)
 801dd4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801dd4e:	4a17      	ldr	r2, [pc, #92]	; (801ddac <state_restore+0x100>)
 801dd50:	6213      	str	r3, [r2, #32]
            park.plan_data.condition.coolant = restore_condition.coolant;
 801dd52:	4a16      	ldr	r2, [pc, #88]	; (801ddac <state_restore+0x100>)
 801dd54:	4b19      	ldr	r3, [pc, #100]	; (801ddbc <state_restore+0x110>)
 801dd56:	781b      	ldrb	r3, [r3, #0]
 801dd58:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
            park.plan_data.spindle.state = restore_condition.spindle[restore_condition.spindle_num].state;
 801dd5c:	4b17      	ldr	r3, [pc, #92]	; (801ddbc <state_restore+0x110>)
 801dd5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd62:	4a12      	ldr	r2, [pc, #72]	; (801ddac <state_restore+0x100>)
 801dd64:	4915      	ldr	r1, [pc, #84]	; (801ddbc <state_restore+0x110>)
 801dd66:	011b      	lsls	r3, r3, #4
 801dd68:	440b      	add	r3, r1
 801dd6a:	3308      	adds	r3, #8
 801dd6c:	781b      	ldrb	r3, [r3, #0]
 801dd6e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            park.plan_data.spindle.rpm = restore_condition.spindle[restore_condition.spindle_num].rpm;
 801dd72:	4b12      	ldr	r3, [pc, #72]	; (801ddbc <state_restore+0x110>)
 801dd74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd78:	4a10      	ldr	r2, [pc, #64]	; (801ddbc <state_restore+0x110>)
 801dd7a:	011b      	lsls	r3, r3, #4
 801dd7c:	4413      	add	r3, r2
 801dd7e:	3304      	adds	r3, #4
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	4a0a      	ldr	r2, [pc, #40]	; (801ddac <state_restore+0x100>)
 801dd84:	6253      	str	r3, [r2, #36]	; 0x24
            await_motion = mc_parking_motion(park.restore_target, &park.plan_data);
 801dd86:	490f      	ldr	r1, [pc, #60]	; (801ddc4 <state_restore+0x118>)
 801dd88:	480f      	ldr	r0, [pc, #60]	; (801ddc8 <state_restore+0x11c>)
 801dd8a:	f7f1 f96d 	bl	800f068 <mc_parking_motion>
 801dd8e:	4603      	mov	r3, r0
 801dd90:	73fb      	strb	r3, [r7, #15]
        }

        if (!await_motion)
 801dd92:	7bfb      	ldrb	r3, [r7, #15]
 801dd94:	f083 0301 	eor.w	r3, r3, #1
 801dd98:	b2db      	uxtb	r3, r3
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	d003      	beq.n	801dda6 <state_restore+0xfa>
            stateHandler(EXEC_CYCLE_COMPLETE); // No motion, proceed to next step immediately.
 801dd9e:	4b05      	ldr	r3, [pc, #20]	; (801ddb4 <state_restore+0x108>)
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	2004      	movs	r0, #4
 801dda4:	4798      	blx	r3
    }
}
 801dda6:	3710      	adds	r7, #16
 801dda8:	46bd      	mov	sp, r7
 801ddaa:	bd80      	pop	{r7, pc}
 801ddac:	20002020 	.word	0x20002020
 801ddb0:	20001520 	.word	0x20001520
 801ddb4:	200004fc 	.word	0x200004fc
 801ddb8:	0801ddcd 	.word	0x0801ddcd
 801ddbc:	20002004 	.word	0x20002004
 801ddc0:	20001cf0 	.word	0x20001cf0
 801ddc4:	20002040 	.word	0x20002040
 801ddc8:	2000202c 	.word	0x2000202c

0801ddcc <state_await_resumed>:

/*! /brief Waits until slow plunge motion is complete then restart the cycle.
Note: A safety door event during the motion will halt it and restart the retract sequence.
 */
static void state_await_resumed (uint_fast16_t rt_exec)
{
 801ddcc:	b580      	push	{r7, lr}
 801ddce:	b082      	sub	sp, #8
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	6078      	str	r0, [r7, #4]
    if (rt_exec & EXEC_SAFETY_DOOR)
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	d002      	beq.n	801dde4 <state_await_resumed+0x18>
        restart_retract();
 801ddde:	f7ff fe9b 	bl	801db18 <restart_retract>
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
        }
        state_set(STATE_IDLE);
        state_set(STATE_CYCLE);
    }
}
 801dde2:	e01d      	b.n	801de20 <state_await_resumed+0x54>
    else if (rt_exec & EXEC_CYCLE_COMPLETE) {
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	f003 0304 	and.w	r3, r3, #4
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d018      	beq.n	801de20 <state_await_resumed+0x54>
        sys.parking_state = Parking_DoorClosed;
 801ddee:	4b0e      	ldr	r3, [pc, #56]	; (801de28 <state_await_resumed+0x5c>)
 801ddf0:	2200      	movs	r2, #0
 801ddf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        park.flags.value = 0;
 801ddf6:	4b0d      	ldr	r3, [pc, #52]	; (801de2c <state_await_resumed+0x60>)
 801ddf8:	2200      	movs	r2, #0
 801ddfa:	771a      	strb	r2, [r3, #28]
        if (sys.step_control.execute_sys_motion) {
 801ddfc:	4b0a      	ldr	r3, [pc, #40]	; (801de28 <state_await_resumed+0x5c>)
 801ddfe:	7e1b      	ldrb	r3, [r3, #24]
 801de00:	f003 0304 	and.w	r3, r3, #4
 801de04:	b2db      	uxtb	r3, r3
 801de06:	2b00      	cmp	r3, #0
 801de08:	d004      	beq.n	801de14 <state_await_resumed+0x48>
            sys.step_control.flags = 0;
 801de0a:	4b07      	ldr	r3, [pc, #28]	; (801de28 <state_await_resumed+0x5c>)
 801de0c:	2200      	movs	r2, #0
 801de0e:	761a      	strb	r2, [r3, #24]
            st_parking_restore_buffer(); // Restore step segment buffer to normal run state.
 801de10:	f000 fc26 	bl	801e660 <st_parking_restore_buffer>
        state_set(STATE_IDLE);
 801de14:	2000      	movs	r0, #0
 801de16:	f7fe ff8f 	bl	801cd38 <state_set>
        state_set(STATE_CYCLE);
 801de1a:	2008      	movs	r0, #8
 801de1c:	f7fe ff8c 	bl	801cd38 <state_set>
}
 801de20:	bf00      	nop
 801de22:	3708      	adds	r7, #8
 801de24:	46bd      	mov	sp, r7
 801de26:	bd80      	pop	{r7, pc}
 801de28:	20001520 	.word	0x20001520
 801de2c:	20002020 	.word	0x20002020

0801de30 <output_message>:

//

// Output message in sync with motion, called by foreground process.
static void output_message (sys_state_t state)
{
 801de30:	b580      	push	{r7, lr}
 801de32:	b082      	sub	sp, #8
 801de34:	af00      	add	r7, sp, #0
 801de36:	6078      	str	r0, [r7, #4]
    if(message) {
 801de38:	4b13      	ldr	r3, [pc, #76]	; (801de88 <output_message+0x58>)
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d01e      	beq.n	801de7e <output_message+0x4e>

        if(grbl.on_gcode_message)
 801de40:	4b12      	ldr	r3, [pc, #72]	; (801de8c <output_message+0x5c>)
 801de42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801de46:	2b00      	cmp	r3, #0
 801de48:	d006      	beq.n	801de58 <output_message+0x28>
            grbl.on_gcode_message(message);
 801de4a:	4b10      	ldr	r3, [pc, #64]	; (801de8c <output_message+0x5c>)
 801de4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801de50:	4a0d      	ldr	r2, [pc, #52]	; (801de88 <output_message+0x58>)
 801de52:	6812      	ldr	r2, [r2, #0]
 801de54:	4610      	mov	r0, r2
 801de56:	4798      	blx	r3

        if(*message)
 801de58:	4b0b      	ldr	r3, [pc, #44]	; (801de88 <output_message+0x58>)
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	781b      	ldrb	r3, [r3, #0]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d005      	beq.n	801de6e <output_message+0x3e>
            report_message(message, Message_Plain);
 801de62:	4b09      	ldr	r3, [pc, #36]	; (801de88 <output_message+0x58>)
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	2100      	movs	r1, #0
 801de68:	4618      	mov	r0, r3
 801de6a:	f7f6 f883 	bl	8013f74 <report_message>

        free(message);
 801de6e:	4b06      	ldr	r3, [pc, #24]	; (801de88 <output_message+0x58>)
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	4618      	mov	r0, r3
 801de74:	f007 fc88 	bl	8025788 <free>
        message = NULL;
 801de78:	4b03      	ldr	r3, [pc, #12]	; (801de88 <output_message+0x58>)
 801de7a:	2200      	movs	r2, #0
 801de7c:	601a      	str	r2, [r3, #0]
    }
}
 801de7e:	bf00      	nop
 801de80:	3708      	adds	r7, #8
 801de82:	46bd      	mov	sp, r7
 801de84:	bd80      	pop	{r7, pc}
 801de86:	bf00      	nop
 801de88:	200024a4 	.word	0x200024a4
 801de8c:	200015b8 	.word	0x200015b8

0801de90 <st_deenergize>:

// Callback from delay to deenergize steppers after movement, might been cancelled
void st_deenergize (void)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	af00      	add	r7, sp, #0
    if(sys.steppers_deenergize) {
 801de94:	4b08      	ldr	r3, [pc, #32]	; (801deb8 <st_deenergize+0x28>)
 801de96:	799b      	ldrb	r3, [r3, #6]
 801de98:	b2db      	uxtb	r3, r3
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	d009      	beq.n	801deb2 <st_deenergize+0x22>
        hal.stepper.enable(settings.steppers.deenergize);
 801de9e:	4b07      	ldr	r3, [pc, #28]	; (801debc <st_deenergize+0x2c>)
 801dea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dea4:	4a06      	ldr	r2, [pc, #24]	; (801dec0 <st_deenergize+0x30>)
 801dea6:	f892 00ec 	ldrb.w	r0, [r2, #236]	; 0xec
 801deaa:	4798      	blx	r3
        sys.steppers_deenergize = false;
 801deac:	4b02      	ldr	r3, [pc, #8]	; (801deb8 <st_deenergize+0x28>)
 801deae:	2200      	movs	r2, #0
 801deb0:	719a      	strb	r2, [r3, #6]
    }
}
 801deb2:	bf00      	nop
 801deb4:	bd80      	pop	{r7, pc}
 801deb6:	bf00      	nop
 801deb8:	20001520 	.word	0x20001520
 801debc:	200016a0 	.word	0x200016a0
 801dec0:	20001cf0 	.word	0x20001cf0

0801dec4 <st_wake_up>:

// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up (void)
{
 801dec4:	b580      	push	{r7, lr}
 801dec6:	af00      	add	r7, sp, #0
    if(sys.steppers_deenergize) {
 801dec8:	4b06      	ldr	r3, [pc, #24]	; (801dee4 <st_wake_up+0x20>)
 801deca:	799b      	ldrb	r3, [r3, #6]
 801decc:	b2db      	uxtb	r3, r3
 801dece:	2b00      	cmp	r3, #0
 801ded0:	d002      	beq.n	801ded8 <st_wake_up+0x14>
        sys.steppers_deenergize = false;
 801ded2:	4b04      	ldr	r3, [pc, #16]	; (801dee4 <st_wake_up+0x20>)
 801ded4:	2200      	movs	r2, #0
 801ded6:	719a      	strb	r2, [r3, #6]

    // Initialize stepper data to ensure first ISR call does not step and
    // cancel any pending steppers deenergize
    //st.exec_block = NULL;

    hal.stepper.wake_up();
 801ded8:	4b03      	ldr	r3, [pc, #12]	; (801dee8 <st_wake_up+0x24>)
 801deda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801dede:	4798      	blx	r3
}
 801dee0:	bf00      	nop
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	20001520 	.word	0x20001520
 801dee8:	200016a0 	.word	0x200016a0

0801deec <st_go_idle>:

// Stepper shutdown
ISR_CODE void ISR_FUNC(st_go_idle)(void)
{
 801deec:	b580      	push	{r7, lr}
 801deee:	b082      	sub	sp, #8
 801def0:	af00      	add	r7, sp, #0
    // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.

    sys_state_t state = state_get();
 801def2:	f7fe ff15 	bl	801cd20 <state_get>
 801def6:	6078      	str	r0, [r7, #4]

    hal.stepper.go_idle(false);
 801def8:	4b1e      	ldr	r3, [pc, #120]	; (801df74 <st_go_idle+0x88>)
 801defa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801defe:	2000      	movs	r0, #0
 801df00:	4798      	blx	r3

    // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
    if (((settings.steppers.idle_lock_time != 255) || sys.rt_exec_alarm || state == STATE_SLEEP) && state != STATE_HOMING) {
 801df02:	4b1d      	ldr	r3, [pc, #116]	; (801df78 <st_go_idle+0x8c>)
 801df04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 801df08:	2bff      	cmp	r3, #255	; 0xff
 801df0a:	d106      	bne.n	801df1a <st_go_idle+0x2e>
 801df0c:	4b1b      	ldr	r3, [pc, #108]	; (801df7c <st_go_idle+0x90>)
 801df0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801df10:	2b00      	cmp	r3, #0
 801df12:	d102      	bne.n	801df1a <st_go_idle+0x2e>
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	2b80      	cmp	r3, #128	; 0x80
 801df18:	d118      	bne.n	801df4c <st_go_idle+0x60>
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	2b04      	cmp	r3, #4
 801df1e:	d015      	beq.n	801df4c <st_go_idle+0x60>
        if(state == STATE_SLEEP)
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	2b80      	cmp	r3, #128	; 0x80
 801df24:	d106      	bne.n	801df34 <st_go_idle+0x48>
            hal.stepper.enable((axes_signals_t){0});
 801df26:	4b13      	ldr	r3, [pc, #76]	; (801df74 <st_go_idle+0x88>)
 801df28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801df2c:	2200      	movs	r2, #0
 801df2e:	4610      	mov	r0, r2
 801df30:	4798      	blx	r3
        if(state == STATE_SLEEP)
 801df32:	e01b      	b.n	801df6c <st_go_idle+0x80>
        else {
            // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
            // stop and not drift from residual inertial forces at the end of the last movement.
            sys.steppers_deenergize = true;
 801df34:	4b11      	ldr	r3, [pc, #68]	; (801df7c <st_go_idle+0x90>)
 801df36:	2201      	movs	r2, #1
 801df38:	719a      	strb	r2, [r3, #6]
            hal.delay_ms(settings.steppers.idle_lock_time, st_deenergize);
 801df3a:	4b0e      	ldr	r3, [pc, #56]	; (801df74 <st_go_idle+0x88>)
 801df3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df3e:	4a0e      	ldr	r2, [pc, #56]	; (801df78 <st_go_idle+0x8c>)
 801df40:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 801df44:	490e      	ldr	r1, [pc, #56]	; (801df80 <st_go_idle+0x94>)
 801df46:	4610      	mov	r0, r2
 801df48:	4798      	blx	r3
        if(state == STATE_SLEEP)
 801df4a:	e00f      	b.n	801df6c <st_go_idle+0x80>
        }
    } else
        hal.stepper.enable(settings.steppers.idle_lock_time == 255 ? (axes_signals_t){AXES_BITMASK} : settings.steppers.deenergize);
 801df4c:	4b09      	ldr	r3, [pc, #36]	; (801df74 <st_go_idle+0x88>)
 801df4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801df52:	4a09      	ldr	r2, [pc, #36]	; (801df78 <st_go_idle+0x8c>)
 801df54:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 801df58:	2aff      	cmp	r2, #255	; 0xff
 801df5a:	d101      	bne.n	801df60 <st_go_idle+0x74>
 801df5c:	2207      	movs	r2, #7
 801df5e:	e002      	b.n	801df66 <st_go_idle+0x7a>
 801df60:	4a05      	ldr	r2, [pc, #20]	; (801df78 <st_go_idle+0x8c>)
 801df62:	f892 20ec 	ldrb.w	r2, [r2, #236]	; 0xec
 801df66:	4610      	mov	r0, r2
 801df68:	4798      	blx	r3
}
 801df6a:	bf00      	nop
 801df6c:	bf00      	nop
 801df6e:	3708      	adds	r7, #8
 801df70:	46bd      	mov	sp, r7
 801df72:	bd80      	pop	{r7, pc}
 801df74:	200016a0 	.word	0x200016a0
 801df78:	20001cf0 	.word	0x20001cf0
 801df7c:	20001520 	.word	0x20001520
 801df80:	0801de91 	.word	0x0801de91

0801df84 <stepper_driver_interrupt_handler>:
*/

//! \cond

ISR_CODE void ISR_FUNC(stepper_driver_interrupt_handler)(void)
{
 801df84:	b580      	push	{r7, lr}
 801df86:	b082      	sub	sp, #8
 801df88:	af00      	add	r7, sp, #0
#if ENABLE_BACKLASH_COMPENSATION
    static bool backlash_motion;
#endif

    // Start a step pulse when there is a block to execute.
    if(st.exec_block) {
 801df8a:	4b8b      	ldr	r3, [pc, #556]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801df8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d012      	beq.n	801dfb8 <stepper_driver_interrupt_handler+0x34>

        hal.stepper.pulse_start(&st);
 801df92:	4b8a      	ldr	r3, [pc, #552]	; (801e1bc <stepper_driver_interrupt_handler+0x238>)
 801df94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801df98:	4887      	ldr	r0, [pc, #540]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801df9a:	4798      	blx	r3

        st.new_block = st.dir_change = false;
 801df9c:	4b86      	ldr	r3, [pc, #536]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801df9e:	2200      	movs	r2, #0
 801dfa0:	735a      	strb	r2, [r3, #13]
 801dfa2:	4b85      	ldr	r3, [pc, #532]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dfa4:	7b5a      	ldrb	r2, [r3, #13]
 801dfa6:	4b84      	ldr	r3, [pc, #528]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dfa8:	731a      	strb	r2, [r3, #12]

        if (st.step_count == 0) // Segment is complete. Discard current segment.
 801dfaa:	4b83      	ldr	r3, [pc, #524]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dfac:	6a1b      	ldr	r3, [r3, #32]
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d102      	bne.n	801dfb8 <stepper_driver_interrupt_handler+0x34>
            st.exec_segment = NULL;
 801dfb2:	4b81      	ldr	r3, [pc, #516]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dfb4:	2200      	movs	r2, #0
 801dfb6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    // If there is no step segment, attempt to pop one from the stepper buffer
    if (st.exec_segment == NULL) {
 801dfb8:	4b7f      	ldr	r3, [pc, #508]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	f040 812d 	bne.w	801e21c <stepper_driver_interrupt_handler+0x298>
        // Anything in the buffer? If so, load and initialize next step segment.
        if (segment_buffer_tail != segment_buffer_head) {
 801dfc2:	4b7f      	ldr	r3, [pc, #508]	; (801e1c0 <stepper_driver_interrupt_handler+0x23c>)
 801dfc4:	681a      	ldr	r2, [r3, #0]
 801dfc6:	4b7f      	ldr	r3, [pc, #508]	; (801e1c4 <stepper_driver_interrupt_handler+0x240>)
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	429a      	cmp	r2, r3
 801dfcc:	f000 8102 	beq.w	801e1d4 <stepper_driver_interrupt_handler+0x250>

            // Initialize new step segment and load number of steps to execute
            st.exec_segment = (segment_t *)segment_buffer_tail;
 801dfd0:	4b7b      	ldr	r3, [pc, #492]	; (801e1c0 <stepper_driver_interrupt_handler+0x23c>)
 801dfd2:	681b      	ldr	r3, [r3, #0]
 801dfd4:	4a78      	ldr	r2, [pc, #480]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dfd6:	62d3      	str	r3, [r2, #44]	; 0x2c

            // Initialize step segment timing per step and load number of steps to execute.
            hal.stepper.cycles_per_tick(st.exec_segment->cycles_per_tick);
 801dfd8:	4b78      	ldr	r3, [pc, #480]	; (801e1bc <stepper_driver_interrupt_handler+0x238>)
 801dfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dfde:	4a76      	ldr	r2, [pc, #472]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dfe0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801dfe2:	68d2      	ldr	r2, [r2, #12]
 801dfe4:	4610      	mov	r0, r2
 801dfe6:	4798      	blx	r3
            st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 801dfe8:	4b73      	ldr	r3, [pc, #460]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfec:	699b      	ldr	r3, [r3, #24]
 801dfee:	4a72      	ldr	r2, [pc, #456]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dff0:	6213      	str	r3, [r2, #32]

            // If the new segment starts a new planner block, initialize stepper variables and counters.
            if (st.exec_block != st.exec_segment->exec_block) {
 801dff2:	4b71      	ldr	r3, [pc, #452]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dff6:	4b70      	ldr	r3, [pc, #448]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801dff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dffa:	689b      	ldr	r3, [r3, #8]
 801dffc:	429a      	cmp	r2, r3
 801dffe:	f000 809d 	beq.w	801e13c <stepper_driver_interrupt_handler+0x1b8>

                if((st.dir_change = st.exec_block == NULL || st.dir_outbits.value != st.exec_segment->exec_block->direction_bits.value))
 801e002:	4b6d      	ldr	r3, [pc, #436]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e006:	2b00      	cmp	r3, #0
 801e008:	d007      	beq.n	801e01a <stepper_driver_interrupt_handler+0x96>
 801e00a:	4b6b      	ldr	r3, [pc, #428]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e00c:	7bda      	ldrb	r2, [r3, #15]
 801e00e:	4b6a      	ldr	r3, [pc, #424]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e012:	689b      	ldr	r3, [r3, #8]
 801e014:	7e1b      	ldrb	r3, [r3, #24]
 801e016:	429a      	cmp	r2, r3
 801e018:	d001      	beq.n	801e01e <stepper_driver_interrupt_handler+0x9a>
 801e01a:	2301      	movs	r3, #1
 801e01c:	e000      	b.n	801e020 <stepper_driver_interrupt_handler+0x9c>
 801e01e:	2300      	movs	r3, #0
 801e020:	f003 0301 	and.w	r3, r3, #1
 801e024:	b2da      	uxtb	r2, r3
 801e026:	4b64      	ldr	r3, [pc, #400]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e028:	735a      	strb	r2, [r3, #13]
 801e02a:	4b63      	ldr	r3, [pc, #396]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e02c:	7b5b      	ldrb	r3, [r3, #13]
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d005      	beq.n	801e03e <stepper_driver_interrupt_handler+0xba>
                    st.dir_outbits = st.exec_segment->exec_block->direction_bits;
 801e032:	4b61      	ldr	r3, [pc, #388]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e036:	689b      	ldr	r3, [r3, #8]
 801e038:	4a5f      	ldr	r2, [pc, #380]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e03a:	7e1b      	ldrb	r3, [r3, #24]
 801e03c:	73d3      	strb	r3, [r2, #15]
                st.exec_block = st.exec_segment->exec_block;
 801e03e:	4b5e      	ldr	r3, [pc, #376]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e042:	689b      	ldr	r3, [r3, #8]
 801e044:	4a5c      	ldr	r2, [pc, #368]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e046:	6293      	str	r3, [r2, #40]	; 0x28
                st.step_event_count = st.exec_block->step_event_count;
 801e048:	4b5b      	ldr	r3, [pc, #364]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e04c:	695b      	ldr	r3, [r3, #20]
 801e04e:	4a5a      	ldr	r2, [pc, #360]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e050:	6253      	str	r3, [r2, #36]	; 0x24
                st.new_block = true;
 801e052:	4b59      	ldr	r3, [pc, #356]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e054:	2201      	movs	r2, #1
 801e056:	731a      	strb	r2, [r3, #12]
#if ENABLE_BACKLASH_COMPENSATION
                backlash_motion = st.exec_block->backlash_motion;
#endif

                if(st.exec_block->overrides.sync)
 801e058:	4b57      	ldr	r3, [pc, #348]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e05c:	7e5b      	ldrb	r3, [r3, #25]
 801e05e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801e062:	b2db      	uxtb	r3, r3
 801e064:	2b00      	cmp	r3, #0
 801e066:	d03b      	beq.n	801e0e0 <stepper_driver_interrupt_handler+0x15c>
                    sys.override.control = st.exec_block->overrides;
 801e068:	4b53      	ldr	r3, [pc, #332]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e06c:	4a56      	ldr	r2, [pc, #344]	; (801e1c8 <stepper_driver_interrupt_handler+0x244>)
 801e06e:	7e5b      	ldrb	r3, [r3, #25]
 801e070:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29

                // Execute output commands to be synchronized with motion
                while(st.exec_block->output_commands) {
 801e074:	e034      	b.n	801e0e0 <stepper_driver_interrupt_handler+0x15c>
                    output_command_t *cmd = st.exec_block->output_commands;
 801e076:	4b50      	ldr	r3, [pc, #320]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e07c:	607b      	str	r3, [r7, #4]
                    cmd->is_executed = true;
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	2201      	movs	r2, #1
 801e082:	705a      	strb	r2, [r3, #1]
                    if(cmd->is_digital)
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	781b      	ldrb	r3, [r3, #0]
 801e088:	2b00      	cmp	r3, #0
 801e08a:	d015      	beq.n	801e0b8 <stepper_driver_interrupt_handler+0x134>
                        hal.port.digital_out(cmd->port, cmd->value != 0.0f);
 801e08c:	4b4b      	ldr	r3, [pc, #300]	; (801e1bc <stepper_driver_interrupt_handler+0x238>)
 801e08e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801e092:	687a      	ldr	r2, [r7, #4]
 801e094:	7890      	ldrb	r0, [r2, #2]
 801e096:	687a      	ldr	r2, [r7, #4]
 801e098:	6852      	ldr	r2, [r2, #4]
 801e09a:	ee07 2a90 	vmov	s15, r2
 801e09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e0a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0aa:	bf14      	ite	ne
 801e0ac:	2201      	movne	r2, #1
 801e0ae:	2200      	moveq	r2, #0
 801e0b0:	b2d2      	uxtb	r2, r2
 801e0b2:	4611      	mov	r1, r2
 801e0b4:	4798      	blx	r3
 801e0b6:	e00e      	b.n	801e0d6 <stepper_driver_interrupt_handler+0x152>
                    else
                        hal.port.analog_out(cmd->port, cmd->value);
 801e0b8:	4b40      	ldr	r3, [pc, #256]	; (801e1bc <stepper_driver_interrupt_handler+0x238>)
 801e0ba:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801e0be:	687a      	ldr	r2, [r7, #4]
 801e0c0:	7891      	ldrb	r1, [r2, #2]
 801e0c2:	687a      	ldr	r2, [r7, #4]
 801e0c4:	6852      	ldr	r2, [r2, #4]
 801e0c6:	ee07 2a90 	vmov	s15, r2
 801e0ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e0ce:	eeb0 0a67 	vmov.f32	s0, s15
 801e0d2:	4608      	mov	r0, r1
 801e0d4:	4798      	blx	r3
                    st.exec_block->output_commands = cmd->next;
 801e0d6:	4b38      	ldr	r3, [pc, #224]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0da:	687a      	ldr	r2, [r7, #4]
 801e0dc:	6892      	ldr	r2, [r2, #8]
 801e0de:	62da      	str	r2, [r3, #44]	; 0x2c
                while(st.exec_block->output_commands) {
 801e0e0:	4b35      	ldr	r3, [pc, #212]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d1c5      	bne.n	801e076 <stepper_driver_interrupt_handler+0xf2>
                }

                // Enqueue any message to be printed (by foreground process)
                if(st.exec_block->message) {
 801e0ea:	4b33      	ldr	r3, [pc, #204]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d016      	beq.n	801e122 <stepper_driver_interrupt_handler+0x19e>
                    if(message == NULL) {
 801e0f4:	4b35      	ldr	r3, [pc, #212]	; (801e1cc <stepper_driver_interrupt_handler+0x248>)
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d108      	bne.n	801e10e <stepper_driver_interrupt_handler+0x18a>
                        message = st.exec_block->message;
 801e0fc:	4b2e      	ldr	r3, [pc, #184]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e102:	4a32      	ldr	r2, [pc, #200]	; (801e1cc <stepper_driver_interrupt_handler+0x248>)
 801e104:	6013      	str	r3, [r2, #0]
                        protocol_enqueue_rt_command(output_message);
 801e106:	4832      	ldr	r0, [pc, #200]	; (801e1d0 <stepper_driver_interrupt_handler+0x24c>)
 801e108:	f7f5 fba6 	bl	8013858 <protocol_enqueue_rt_command>
 801e10c:	e005      	b.n	801e11a <stepper_driver_interrupt_handler+0x196>
                    } else
                        free(st.exec_block->message); //
 801e10e:	4b2a      	ldr	r3, [pc, #168]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e114:	4618      	mov	r0, r3
 801e116:	f007 fb37 	bl	8025788 <free>
                    st.exec_block->message = NULL;
 801e11a:	4b27      	ldr	r3, [pc, #156]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e11e:	2200      	movs	r2, #0
 801e120:	629a      	str	r2, [r3, #40]	; 0x28
                  = st.counter_u
                #endif
                #ifdef V_AXIS
                  = st.counter_v
                #endif
                  = st.step_event_count >> 1;
 801e122:	4b25      	ldr	r3, [pc, #148]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e126:	085b      	lsrs	r3, r3, #1
 801e128:	4a23      	ldr	r2, [pc, #140]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e12a:	6093      	str	r3, [r2, #8]
                st.counter_x = st.counter_y = st.counter_z
 801e12c:	4b22      	ldr	r3, [pc, #136]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e12e:	689b      	ldr	r3, [r3, #8]
 801e130:	4a21      	ldr	r2, [pc, #132]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e132:	6053      	str	r3, [r2, #4]
 801e134:	4b20      	ldr	r3, [pc, #128]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e136:	685b      	ldr	r3, [r3, #4]
 801e138:	4a1f      	ldr	r2, [pc, #124]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e13a:	6013      	str	r3, [r2, #0]
              #endif
            }

          #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
            // With AMASS enabled, adjust Bresenham axis increment counters according to AMASS level.
            st.amass_level = st.exec_segment->amass_level;
 801e13c:	4b1e      	ldr	r3, [pc, #120]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e142:	4a1d      	ldr	r2, [pc, #116]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e144:	61d3      	str	r3, [r2, #28]
            st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.amass_level;
 801e146:	4b1c      	ldr	r3, [pc, #112]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e14a:	689a      	ldr	r2, [r3, #8]
 801e14c:	4b1a      	ldr	r3, [pc, #104]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e14e:	69db      	ldr	r3, [r3, #28]
 801e150:	fa22 f303 	lsr.w	r3, r2, r3
 801e154:	4a18      	ldr	r2, [pc, #96]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e156:	6113      	str	r3, [r2, #16]
            st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.amass_level;
 801e158:	4b17      	ldr	r3, [pc, #92]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e15c:	68da      	ldr	r2, [r3, #12]
 801e15e:	4b16      	ldr	r3, [pc, #88]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e160:	69db      	ldr	r3, [r3, #28]
 801e162:	fa22 f303 	lsr.w	r3, r2, r3
 801e166:	4a14      	ldr	r2, [pc, #80]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e168:	6153      	str	r3, [r2, #20]
            st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.amass_level;
 801e16a:	4b13      	ldr	r3, [pc, #76]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e16e:	691a      	ldr	r2, [r3, #16]
 801e170:	4b11      	ldr	r3, [pc, #68]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e172:	69db      	ldr	r3, [r3, #28]
 801e174:	fa22 f303 	lsr.w	r3, r2, r3
 801e178:	4a0f      	ldr	r2, [pc, #60]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e17a:	6193      	str	r3, [r2, #24]
           #ifdef V_AXIS
            st.steps[V_AXIS] = st.exec_block->steps[V_AXIS] >> st.amass_level;
           #endif
         #endif

            if(st.exec_segment->update_pwm)
 801e17c:	4b0e      	ldr	r3, [pc, #56]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e182:	2b00      	cmp	r3, #0
 801e184:	d008      	beq.n	801e198 <stepper_driver_interrupt_handler+0x214>
                st.exec_segment->update_pwm(st.exec_segment->spindle_pwm);
 801e186:	4b0c      	ldr	r3, [pc, #48]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e18c:	4a0a      	ldr	r2, [pc, #40]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e18e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801e190:	69d2      	ldr	r2, [r2, #28]
 801e192:	4610      	mov	r0, r2
 801e194:	4798      	blx	r3
 801e196:	e041      	b.n	801e21c <stepper_driver_interrupt_handler+0x298>
            else if(st.exec_segment->update_rpm)
 801e198:	4b07      	ldr	r3, [pc, #28]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	d03c      	beq.n	801e21c <stepper_driver_interrupt_handler+0x298>
                st.exec_segment->update_rpm(st.exec_segment->spindle_rpm);
 801e1a2:	4b05      	ldr	r3, [pc, #20]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1a8:	4a03      	ldr	r2, [pc, #12]	; (801e1b8 <stepper_driver_interrupt_handler+0x234>)
 801e1aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801e1ac:	edd2 7a08 	vldr	s15, [r2, #32]
 801e1b0:	eeb0 0a67 	vmov.f32	s0, s15
 801e1b4:	4798      	blx	r3
 801e1b6:	e031      	b.n	801e21c <stepper_driver_interrupt_handler+0x298>
 801e1b8:	20002468 	.word	0x20002468
 801e1bc:	200016a0 	.word	0x200016a0
 801e1c0:	200024b0 	.word	0x200024b0
 801e1c4:	200024b4 	.word	0x200024b4
 801e1c8:	20001520 	.word	0x20001520
 801e1cc:	200024a4 	.word	0x200024a4
 801e1d0:	0801de31 	.word	0x0801de31
        } else {
            // Segment buffer empty. Shutdown.
            st_go_idle();
 801e1d4:	f7ff fe8a 	bl	801deec <st_go_idle>

            // Ensure pwm is set properly upon completion of rate-controlled motion.
            if (st.exec_block->dynamic_rpm && st.exec_block->spindle->cap.laser)
 801e1d8:	4b74      	ldr	r3, [pc, #464]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d012      	beq.n	801e20a <stepper_driver_interrupt_handler+0x286>
 801e1e4:	4b71      	ldr	r3, [pc, #452]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e1ea:	7a5b      	ldrb	r3, [r3, #9]
 801e1ec:	f003 0308 	and.w	r3, r3, #8
 801e1f0:	b2db      	uxtb	r3, r3
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d009      	beq.n	801e20a <stepper_driver_interrupt_handler+0x286>
                st.exec_block->spindle->update_pwm(st.exec_block->spindle->pwm_off_value);
 801e1f6:	4b6d      	ldr	r3, [pc, #436]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1fe:	4a6b      	ldr	r2, [pc, #428]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e200:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801e202:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e204:	68d2      	ldr	r2, [r2, #12]
 801e206:	4610      	mov	r0, r2
 801e208:	4798      	blx	r3

            st.exec_block = NULL;
 801e20a:	4b68      	ldr	r3, [pc, #416]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e20c:	2200      	movs	r2, #0
 801e20e:	629a      	str	r2, [r3, #40]	; 0x28
            system_set_exec_state_flag(EXEC_CYCLE_COMPLETE); // Flag main program for cycle complete
 801e210:	4b67      	ldr	r3, [pc, #412]	; (801e3b0 <stepper_driver_interrupt_handler+0x42c>)
 801e212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e214:	2104      	movs	r1, #4
 801e216:	4867      	ldr	r0, [pc, #412]	; (801e3b4 <stepper_driver_interrupt_handler+0x430>)
 801e218:	4798      	blx	r3
 801e21a:	e0c3      	b.n	801e3a4 <stepper_driver_interrupt_handler+0x420>
    }

    // Check probing state.
    // Monitors probe pin state and records the system position when detected.
    // NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
    if (sys.probing_state == Probing_Active && hal.probe.get_state().triggered) {
 801e21c:	4b66      	ldr	r3, [pc, #408]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e21e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e222:	b2db      	uxtb	r3, r3
 801e224:	2b01      	cmp	r3, #1
 801e226:	d11b      	bne.n	801e260 <stepper_driver_interrupt_handler+0x2dc>
 801e228:	4b61      	ldr	r3, [pc, #388]	; (801e3b0 <stepper_driver_interrupt_handler+0x42c>)
 801e22a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801e22e:	4798      	blx	r3
 801e230:	4603      	mov	r3, r0
 801e232:	b2db      	uxtb	r3, r3
 801e234:	f003 0301 	and.w	r3, r3, #1
 801e238:	b2db      	uxtb	r3, r3
 801e23a:	2b00      	cmp	r3, #0
 801e23c:	d010      	beq.n	801e260 <stepper_driver_interrupt_handler+0x2dc>

        sys.probing_state = Probing_Off;
 801e23e:	4b5e      	ldr	r3, [pc, #376]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e240:	2200      	movs	r2, #0
 801e242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        memcpy(sys.probe_position, sys.position, sizeof(sys.position));
 801e246:	4b5c      	ldr	r3, [pc, #368]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e248:	4a5b      	ldr	r2, [pc, #364]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e24a:	3338      	adds	r3, #56	; 0x38
 801e24c:	3288      	adds	r2, #136	; 0x88
 801e24e:	ca07      	ldmia	r2, {r0, r1, r2}
 801e250:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        bit_true(sys.rt_exec_state, EXEC_MOTION_CANCEL);
 801e254:	4b58      	ldr	r3, [pc, #352]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e25c:	4a56      	ldr	r2, [pc, #344]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e25e:	6493      	str	r3, [r2, #72]	; 0x48
            segment_next_head = segment_next_head->next;
        }
#endif
    }

    register axes_signals_t step_outbits = (axes_signals_t){0};
 801e260:	2300      	movs	r3, #0
 801e262:	703b      	strb	r3, [r7, #0]

    // Execute step displacement profile by Bresenham line algorithm

    st.counter_x += st.steps[X_AXIS];
 801e264:	4b51      	ldr	r3, [pc, #324]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e266:	681a      	ldr	r2, [r3, #0]
 801e268:	4b50      	ldr	r3, [pc, #320]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e26a:	691b      	ldr	r3, [r3, #16]
 801e26c:	4413      	add	r3, r2
 801e26e:	4a4f      	ldr	r2, [pc, #316]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e270:	6013      	str	r3, [r2, #0]
    if (st.counter_x > st.step_event_count) {
 801e272:	4b4e      	ldr	r3, [pc, #312]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e274:	681a      	ldr	r2, [r3, #0]
 801e276:	4b4d      	ldr	r3, [pc, #308]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e27a:	429a      	cmp	r2, r3
 801e27c:	d91c      	bls.n	801e2b8 <stepper_driver_interrupt_handler+0x334>
        step_outbits.x = On;
 801e27e:	783b      	ldrb	r3, [r7, #0]
 801e280:	f043 0301 	orr.w	r3, r3, #1
 801e284:	703b      	strb	r3, [r7, #0]
        st.counter_x -= st.step_event_count;
 801e286:	4b49      	ldr	r3, [pc, #292]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e288:	681a      	ldr	r2, [r3, #0]
 801e28a:	4b48      	ldr	r3, [pc, #288]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e28e:	1ad3      	subs	r3, r2, r3
 801e290:	4a46      	ldr	r2, [pc, #280]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e292:	6013      	str	r3, [r2, #0]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[X_AXIS] = sys.position[X_AXIS] + (st.dir_outbits.x ? -1 : 1);
 801e294:	4b48      	ldr	r3, [pc, #288]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e29a:	4a44      	ldr	r2, [pc, #272]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e29c:	7bd2      	ldrb	r2, [r2, #15]
 801e29e:	f002 0201 	and.w	r2, r2, #1
 801e2a2:	b2d2      	uxtb	r2, r2
 801e2a4:	2a00      	cmp	r2, #0
 801e2a6:	d002      	beq.n	801e2ae <stepper_driver_interrupt_handler+0x32a>
 801e2a8:	f04f 32ff 	mov.w	r2, #4294967295
 801e2ac:	e000      	b.n	801e2b0 <stepper_driver_interrupt_handler+0x32c>
 801e2ae:	2201      	movs	r2, #1
 801e2b0:	4413      	add	r3, r2
 801e2b2:	4a41      	ldr	r2, [pc, #260]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e2b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

    st.counter_y += st.steps[Y_AXIS];
 801e2b8:	4b3c      	ldr	r3, [pc, #240]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2ba:	685a      	ldr	r2, [r3, #4]
 801e2bc:	4b3b      	ldr	r3, [pc, #236]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2be:	695b      	ldr	r3, [r3, #20]
 801e2c0:	4413      	add	r3, r2
 801e2c2:	4a3a      	ldr	r2, [pc, #232]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2c4:	6053      	str	r3, [r2, #4]
    if (st.counter_y > st.step_event_count) {
 801e2c6:	4b39      	ldr	r3, [pc, #228]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2c8:	685a      	ldr	r2, [r3, #4]
 801e2ca:	4b38      	ldr	r3, [pc, #224]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2ce:	429a      	cmp	r2, r3
 801e2d0:	d91c      	bls.n	801e30c <stepper_driver_interrupt_handler+0x388>
        step_outbits.y = On;
 801e2d2:	783b      	ldrb	r3, [r7, #0]
 801e2d4:	f043 0302 	orr.w	r3, r3, #2
 801e2d8:	703b      	strb	r3, [r7, #0]
        st.counter_y -= st.step_event_count;
 801e2da:	4b34      	ldr	r3, [pc, #208]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2dc:	685a      	ldr	r2, [r3, #4]
 801e2de:	4b33      	ldr	r3, [pc, #204]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2e2:	1ad3      	subs	r3, r2, r3
 801e2e4:	4a31      	ldr	r2, [pc, #196]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2e6:	6053      	str	r3, [r2, #4]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Y_AXIS] = sys.position[Y_AXIS] + (st.dir_outbits.y ? -1 : 1);
 801e2e8:	4b33      	ldr	r3, [pc, #204]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e2ee:	4a2f      	ldr	r2, [pc, #188]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e2f0:	7bd2      	ldrb	r2, [r2, #15]
 801e2f2:	f002 0202 	and.w	r2, r2, #2
 801e2f6:	b2d2      	uxtb	r2, r2
 801e2f8:	2a00      	cmp	r2, #0
 801e2fa:	d002      	beq.n	801e302 <stepper_driver_interrupt_handler+0x37e>
 801e2fc:	f04f 32ff 	mov.w	r2, #4294967295
 801e300:	e000      	b.n	801e304 <stepper_driver_interrupt_handler+0x380>
 801e302:	2201      	movs	r2, #1
 801e304:	4413      	add	r3, r2
 801e306:	4a2c      	ldr	r2, [pc, #176]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e308:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    st.counter_z += st.steps[Z_AXIS];
 801e30c:	4b27      	ldr	r3, [pc, #156]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e30e:	689a      	ldr	r2, [r3, #8]
 801e310:	4b26      	ldr	r3, [pc, #152]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e312:	699b      	ldr	r3, [r3, #24]
 801e314:	4413      	add	r3, r2
 801e316:	4a25      	ldr	r2, [pc, #148]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e318:	6093      	str	r3, [r2, #8]
    if (st.counter_z > st.step_event_count) {
 801e31a:	4b24      	ldr	r3, [pc, #144]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e31c:	689a      	ldr	r2, [r3, #8]
 801e31e:	4b23      	ldr	r3, [pc, #140]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e322:	429a      	cmp	r2, r3
 801e324:	d91c      	bls.n	801e360 <stepper_driver_interrupt_handler+0x3dc>
        step_outbits.z = On;
 801e326:	783b      	ldrb	r3, [r7, #0]
 801e328:	f043 0304 	orr.w	r3, r3, #4
 801e32c:	703b      	strb	r3, [r7, #0]
        st.counter_z -= st.step_event_count;
 801e32e:	4b1f      	ldr	r3, [pc, #124]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e330:	689a      	ldr	r2, [r3, #8]
 801e332:	4b1e      	ldr	r3, [pc, #120]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e336:	1ad3      	subs	r3, r2, r3
 801e338:	4a1c      	ldr	r2, [pc, #112]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e33a:	6093      	str	r3, [r2, #8]
#if ENABLE_BACKLASH_COMPENSATION
        if(!backlash_motion)
#endif
            sys.position[Z_AXIS] = sys.position[Z_AXIS] + (st.dir_outbits.z ? -1 : 1);
 801e33c:	4b1e      	ldr	r3, [pc, #120]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e342:	4a1a      	ldr	r2, [pc, #104]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e344:	7bd2      	ldrb	r2, [r2, #15]
 801e346:	f002 0204 	and.w	r2, r2, #4
 801e34a:	b2d2      	uxtb	r2, r2
 801e34c:	2a00      	cmp	r2, #0
 801e34e:	d002      	beq.n	801e356 <stepper_driver_interrupt_handler+0x3d2>
 801e350:	f04f 32ff 	mov.w	r2, #4294967295
 801e354:	e000      	b.n	801e358 <stepper_driver_interrupt_handler+0x3d4>
 801e356:	2201      	movs	r2, #1
 801e358:	4413      	add	r3, r2
 801e35a:	4a17      	ldr	r2, [pc, #92]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e35c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif
            sys.position[V_AXIS] = sys.position[V_AXIS] + (st.dir_outbits.v ? -1 : 1);
    }
  #endif

    st.step_outbits.value = step_outbits.value;
 801e360:	783a      	ldrb	r2, [r7, #0]
 801e362:	4b12      	ldr	r3, [pc, #72]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e364:	739a      	strb	r2, [r3, #14]

    // During a homing cycle, lock out and prevent desired axes from moving.
    if (state_get() == STATE_HOMING)
 801e366:	f7fe fcdb 	bl	801cd20 <state_get>
 801e36a:	4603      	mov	r3, r0
 801e36c:	2b04      	cmp	r3, #4
 801e36e:	d107      	bne.n	801e380 <stepper_driver_interrupt_handler+0x3fc>
        st.step_outbits.value &= sys.homing_axis_lock.mask;
 801e370:	4b0e      	ldr	r3, [pc, #56]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e372:	7b9a      	ldrb	r2, [r3, #14]
 801e374:	4b10      	ldr	r3, [pc, #64]	; (801e3b8 <stepper_driver_interrupt_handler+0x434>)
 801e376:	7e5b      	ldrb	r3, [r3, #25]
 801e378:	4013      	ands	r3, r2
 801e37a:	b2da      	uxtb	r2, r3
 801e37c:	4b0b      	ldr	r3, [pc, #44]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e37e:	739a      	strb	r2, [r3, #14]

    if (st.step_count == 0 || --st.step_count == 0) {
 801e380:	4b0a      	ldr	r3, [pc, #40]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e382:	6a1b      	ldr	r3, [r3, #32]
 801e384:	2b00      	cmp	r3, #0
 801e386:	d008      	beq.n	801e39a <stepper_driver_interrupt_handler+0x416>
 801e388:	4b08      	ldr	r3, [pc, #32]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e38a:	6a1b      	ldr	r3, [r3, #32]
 801e38c:	3b01      	subs	r3, #1
 801e38e:	4a07      	ldr	r2, [pc, #28]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e390:	6213      	str	r3, [r2, #32]
 801e392:	4b06      	ldr	r3, [pc, #24]	; (801e3ac <stepper_driver_interrupt_handler+0x428>)
 801e394:	6a1b      	ldr	r3, [r3, #32]
 801e396:	2b00      	cmp	r3, #0
 801e398:	d104      	bne.n	801e3a4 <stepper_driver_interrupt_handler+0x420>
        // Segment is complete. Advance segment tail pointer.
        segment_buffer_tail = segment_buffer_tail->next;
 801e39a:	4b08      	ldr	r3, [pc, #32]	; (801e3bc <stepper_driver_interrupt_handler+0x438>)
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	685b      	ldr	r3, [r3, #4]
 801e3a0:	4a06      	ldr	r2, [pc, #24]	; (801e3bc <stepper_driver_interrupt_handler+0x438>)
 801e3a2:	6013      	str	r3, [r2, #0]
    }
}
 801e3a4:	3708      	adds	r7, #8
 801e3a6:	46bd      	mov	sp, r7
 801e3a8:	bd80      	pop	{r7, pc}
 801e3aa:	bf00      	nop
 801e3ac:	20002468 	.word	0x20002468
 801e3b0:	200016a0 	.word	0x200016a0
 801e3b4:	20001568 	.word	0x20001568
 801e3b8:	20001520 	.word	0x20001520
 801e3bc:	200024b0 	.word	0x200024b0

0801e3c0 <st_reset>:

//! \endcond

// Reset and clear stepper subsystem variables
void st_reset (void)
{
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b082      	sub	sp, #8
 801e3c4:	af00      	add	r7, sp, #0
    if(hal.probe.configure)
 801e3c6:	4b5e      	ldr	r3, [pc, #376]	; (801e540 <st_reset+0x180>)
 801e3c8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d005      	beq.n	801e3dc <st_reset+0x1c>
        hal.probe.configure(false, false);
 801e3d0:	4b5b      	ldr	r3, [pc, #364]	; (801e540 <st_reset+0x180>)
 801e3d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801e3d6:	2100      	movs	r1, #0
 801e3d8:	2000      	movs	r0, #0
 801e3da:	4798      	blx	r3

    if(message) {
 801e3dc:	4b59      	ldr	r3, [pc, #356]	; (801e544 <st_reset+0x184>)
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d007      	beq.n	801e3f4 <st_reset+0x34>
        free(message);
 801e3e4:	4b57      	ldr	r3, [pc, #348]	; (801e544 <st_reset+0x184>)
 801e3e6:	681b      	ldr	r3, [r3, #0]
 801e3e8:	4618      	mov	r0, r3
 801e3ea:	f007 f9cd 	bl	8025788 <free>
        message = NULL;
 801e3ee:	4b55      	ldr	r3, [pc, #340]	; (801e544 <st_reset+0x184>)
 801e3f0:	2200      	movs	r2, #0
 801e3f2:	601a      	str	r2, [r3, #0]
    }

    // Initialize stepper driver idle state, clear step and direction port pins.
    st_go_idle();
 801e3f4:	f7ff fd7a 	bl	801deec <st_go_idle>
   // hal.stepper.go_idle(true);

    // NOTE: buffer indices starts from 1 for simpler driver coding!

    // Set up stepper block ringbuffer as circular linked list and add id
    uint_fast8_t idx, idx_max = (sizeof(st_block_buffer) / sizeof(st_block_t)) - 1;
 801e3f8:	2308      	movs	r3, #8
 801e3fa:	603b      	str	r3, [r7, #0]
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801e3fc:	2300      	movs	r3, #0
 801e3fe:	607b      	str	r3, [r7, #4]
 801e400:	e023      	b.n	801e44a <st_reset+0x8a>
        st_block_buffer[idx].next = &st_block_buffer[idx == idx_max ? 0 : idx + 1];
 801e402:	687a      	ldr	r2, [r7, #4]
 801e404:	683b      	ldr	r3, [r7, #0]
 801e406:	429a      	cmp	r2, r3
 801e408:	d002      	beq.n	801e410 <st_reset+0x50>
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	1c5a      	adds	r2, r3, #1
 801e40e:	e000      	b.n	801e412 <st_reset+0x52>
 801e410:	2200      	movs	r2, #0
 801e412:	4613      	mov	r3, r2
 801e414:	00db      	lsls	r3, r3, #3
 801e416:	1a9b      	subs	r3, r3, r2
 801e418:	00db      	lsls	r3, r3, #3
 801e41a:	4a4b      	ldr	r2, [pc, #300]	; (801e548 <st_reset+0x188>)
 801e41c:	1899      	adds	r1, r3, r2
 801e41e:	484a      	ldr	r0, [pc, #296]	; (801e548 <st_reset+0x188>)
 801e420:	687a      	ldr	r2, [r7, #4]
 801e422:	4613      	mov	r3, r2
 801e424:	00db      	lsls	r3, r3, #3
 801e426:	1a9b      	subs	r3, r3, r2
 801e428:	00db      	lsls	r3, r3, #3
 801e42a:	4403      	add	r3, r0
 801e42c:	3304      	adds	r3, #4
 801e42e:	6019      	str	r1, [r3, #0]
        st_block_buffer[idx].id = idx + 1;
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	1c59      	adds	r1, r3, #1
 801e434:	4844      	ldr	r0, [pc, #272]	; (801e548 <st_reset+0x188>)
 801e436:	687a      	ldr	r2, [r7, #4]
 801e438:	4613      	mov	r3, r2
 801e43a:	00db      	lsls	r3, r3, #3
 801e43c:	1a9b      	subs	r3, r3, r2
 801e43e:	00db      	lsls	r3, r3, #3
 801e440:	4403      	add	r3, r0
 801e442:	6019      	str	r1, [r3, #0]
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	3301      	adds	r3, #1
 801e448:	607b      	str	r3, [r7, #4]
 801e44a:	687a      	ldr	r2, [r7, #4]
 801e44c:	683b      	ldr	r3, [r7, #0]
 801e44e:	429a      	cmp	r2, r3
 801e450:	d9d7      	bls.n	801e402 <st_reset+0x42>
    }

    // Set up segments ringbuffer as circular linked list, add id and clear AMASS level
    idx_max = (sizeof(segment_buffer) / sizeof(segment_t)) - 1;
 801e452:	2309      	movs	r3, #9
 801e454:	603b      	str	r3, [r7, #0]
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801e456:	2300      	movs	r3, #0
 801e458:	607b      	str	r3, [r7, #4]
 801e45a:	e029      	b.n	801e4b0 <st_reset+0xf0>
        segment_buffer[idx].next = &segment_buffer[idx == idx_max ? 0 : idx + 1];
 801e45c:	687a      	ldr	r2, [r7, #4]
 801e45e:	683b      	ldr	r3, [r7, #0]
 801e460:	429a      	cmp	r2, r3
 801e462:	d002      	beq.n	801e46a <st_reset+0xaa>
 801e464:	687b      	ldr	r3, [r7, #4]
 801e466:	3301      	adds	r3, #1
 801e468:	e000      	b.n	801e46c <st_reset+0xac>
 801e46a:	2300      	movs	r3, #0
 801e46c:	2234      	movs	r2, #52	; 0x34
 801e46e:	fb02 f303 	mul.w	r3, r2, r3
 801e472:	4a36      	ldr	r2, [pc, #216]	; (801e54c <st_reset+0x18c>)
 801e474:	441a      	add	r2, r3
 801e476:	4935      	ldr	r1, [pc, #212]	; (801e54c <st_reset+0x18c>)
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	2034      	movs	r0, #52	; 0x34
 801e47c:	fb00 f303 	mul.w	r3, r0, r3
 801e480:	440b      	add	r3, r1
 801e482:	3304      	adds	r3, #4
 801e484:	601a      	str	r2, [r3, #0]
        segment_buffer[idx].id = idx + 1;
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	1c5a      	adds	r2, r3, #1
 801e48a:	4930      	ldr	r1, [pc, #192]	; (801e54c <st_reset+0x18c>)
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	2034      	movs	r0, #52	; 0x34
 801e490:	fb00 f303 	mul.w	r3, r0, r3
 801e494:	440b      	add	r3, r1
 801e496:	601a      	str	r2, [r3, #0]
        segment_buffer[idx].amass_level = 0;
 801e498:	4a2c      	ldr	r2, [pc, #176]	; (801e54c <st_reset+0x18c>)
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	2134      	movs	r1, #52	; 0x34
 801e49e:	fb01 f303 	mul.w	r3, r1, r3
 801e4a2:	4413      	add	r3, r2
 801e4a4:	3328      	adds	r3, #40	; 0x28
 801e4a6:	2200      	movs	r2, #0
 801e4a8:	601a      	str	r2, [r3, #0]
    for(idx = 0 ; idx <= idx_max ; idx++) {
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	3301      	adds	r3, #1
 801e4ae:	607b      	str	r3, [r7, #4]
 801e4b0:	687a      	ldr	r2, [r7, #4]
 801e4b2:	683b      	ldr	r3, [r7, #0]
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	d9d1      	bls.n	801e45c <st_reset+0x9c>
    }

    st_prep_block = &st_block_buffer[0];
 801e4b8:	4b25      	ldr	r3, [pc, #148]	; (801e550 <st_reset+0x190>)
 801e4ba:	4a23      	ldr	r2, [pc, #140]	; (801e548 <st_reset+0x188>)
 801e4bc:	601a      	str	r2, [r3, #0]

    // Initialize stepper algorithm variables.
    pl_block = NULL;  // Planner block pointer used by segment buffer
 801e4be:	4b25      	ldr	r3, [pc, #148]	; (801e554 <st_reset+0x194>)
 801e4c0:	2200      	movs	r2, #0
 801e4c2:	601a      	str	r2, [r3, #0]
    segment_buffer_tail = segment_buffer_head = &segment_buffer[0]; // empty = tail
 801e4c4:	4b24      	ldr	r3, [pc, #144]	; (801e558 <st_reset+0x198>)
 801e4c6:	4a21      	ldr	r2, [pc, #132]	; (801e54c <st_reset+0x18c>)
 801e4c8:	601a      	str	r2, [r3, #0]
 801e4ca:	4b24      	ldr	r3, [pc, #144]	; (801e55c <st_reset+0x19c>)
 801e4cc:	4a1f      	ldr	r2, [pc, #124]	; (801e54c <st_reset+0x18c>)
 801e4ce:	601a      	str	r2, [r3, #0]
    segment_next_head = segment_buffer_head->next;
 801e4d0:	4b21      	ldr	r3, [pc, #132]	; (801e558 <st_reset+0x198>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	685b      	ldr	r3, [r3, #4]
 801e4d6:	4a22      	ldr	r2, [pc, #136]	; (801e560 <st_reset+0x1a0>)
 801e4d8:	6013      	str	r3, [r2, #0]

    memset(&prep, 0, sizeof(st_prep_t));
 801e4da:	2250      	movs	r2, #80	; 0x50
 801e4dc:	2100      	movs	r1, #0
 801e4de:	4821      	ldr	r0, [pc, #132]	; (801e564 <st_reset+0x1a4>)
 801e4e0:	f007 fcad 	bl	8025e3e <memset>
    memset(&st, 0, sizeof(stepper_t));
 801e4e4:	2230      	movs	r2, #48	; 0x30
 801e4e6:	2100      	movs	r1, #0
 801e4e8:	481f      	ldr	r0, [pc, #124]	; (801e568 <st_reset+0x1a8>)
 801e4ea:	f007 fca8 	bl	8025e3e <memset>

#ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    // TODO: move to driver?
    // AMASS_LEVEL0: Normal operation. No AMASS. No upper cutoff frequency. Starts at LEVEL1 cutoff frequency.
    // Defined as step timer frequency / Cutoff frequency in Hz
    amass.level_1 = hal.f_step_timer / 8000;
 801e4ee:	4b14      	ldr	r3, [pc, #80]	; (801e540 <st_reset+0x180>)
 801e4f0:	69db      	ldr	r3, [r3, #28]
 801e4f2:	4a1e      	ldr	r2, [pc, #120]	; (801e56c <st_reset+0x1ac>)
 801e4f4:	fba2 2303 	umull	r2, r3, r2, r3
 801e4f8:	0a5b      	lsrs	r3, r3, #9
 801e4fa:	4a1d      	ldr	r2, [pc, #116]	; (801e570 <st_reset+0x1b0>)
 801e4fc:	6013      	str	r3, [r2, #0]
    amass.level_2 = hal.f_step_timer / 4000;
 801e4fe:	4b10      	ldr	r3, [pc, #64]	; (801e540 <st_reset+0x180>)
 801e500:	69db      	ldr	r3, [r3, #28]
 801e502:	4a1a      	ldr	r2, [pc, #104]	; (801e56c <st_reset+0x1ac>)
 801e504:	fba2 2303 	umull	r2, r3, r2, r3
 801e508:	0a1b      	lsrs	r3, r3, #8
 801e50a:	4a19      	ldr	r2, [pc, #100]	; (801e570 <st_reset+0x1b0>)
 801e50c:	6053      	str	r3, [r2, #4]
    amass.level_3 = hal.f_step_timer / 2000;
 801e50e:	4b0c      	ldr	r3, [pc, #48]	; (801e540 <st_reset+0x180>)
 801e510:	69db      	ldr	r3, [r3, #28]
 801e512:	4a16      	ldr	r2, [pc, #88]	; (801e56c <st_reset+0x1ac>)
 801e514:	fba2 2303 	umull	r2, r3, r2, r3
 801e518:	09db      	lsrs	r3, r3, #7
 801e51a:	4a15      	ldr	r2, [pc, #84]	; (801e570 <st_reset+0x1b0>)
 801e51c:	6093      	str	r3, [r2, #8]
#endif

    cycles_per_min = (float)hal.f_step_timer * 60.0f;
 801e51e:	4b08      	ldr	r3, [pc, #32]	; (801e540 <st_reset+0x180>)
 801e520:	69db      	ldr	r3, [r3, #28]
 801e522:	ee07 3a90 	vmov	s15, r3
 801e526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e52a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 801e574 <st_reset+0x1b4>
 801e52e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e532:	4b11      	ldr	r3, [pc, #68]	; (801e578 <st_reset+0x1b8>)
 801e534:	edc3 7a00 	vstr	s15, [r3]
}
 801e538:	bf00      	nop
 801e53a:	3708      	adds	r7, #8
 801e53c:	46bd      	mov	sp, r7
 801e53e:	bd80      	pop	{r7, pc}
 801e540:	200016a0 	.word	0x200016a0
 801e544:	200024a4 	.word	0x200024a4
 801e548:	20002068 	.word	0x20002068
 801e54c:	20002260 	.word	0x20002260
 801e550:	200024c0 	.word	0x200024c0
 801e554:	200024bc 	.word	0x200024bc
 801e558:	200024b4 	.word	0x200024b4
 801e55c:	200024b0 	.word	0x200024b0
 801e560:	200024b8 	.word	0x200024b8
 801e564:	200024fc 	.word	0x200024fc
 801e568:	20002468 	.word	0x20002468
 801e56c:	10624dd3 	.word	0x10624dd3
 801e570:	20002498 	.word	0x20002498
 801e574:	42700000 	.word	0x42700000
 801e578:	200024ac 	.word	0x200024ac

0801e57c <st_rpm_changed>:

// Called by spindle_set_state() to inform about RPM changes.
// Used by st_prep_buffer() to determine if spindle needs update when dynamic RPM is called for.
void st_rpm_changed (float rpm)
{
 801e57c:	b480      	push	{r7}
 801e57e:	b083      	sub	sp, #12
 801e580:	af00      	add	r7, sp, #0
 801e582:	ed87 0a01 	vstr	s0, [r7, #4]
    prep.current_spindle_rpm = rpm;
 801e586:	4a04      	ldr	r2, [pc, #16]	; (801e598 <st_rpm_changed+0x1c>)
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 801e58c:	bf00      	nop
 801e58e:	370c      	adds	r7, #12
 801e590:	46bd      	mov	sp, r7
 801e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e596:	4770      	bx	lr
 801e598:	200024fc 	.word	0x200024fc

0801e59c <st_update_plan_block_parameters>:

// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters (void)
{
 801e59c:	b480      	push	{r7}
 801e59e:	af00      	add	r7, sp, #0
    if (pl_block != NULL) { // Ignore if at start of a new block.
 801e5a0:	4b0e      	ldr	r3, [pc, #56]	; (801e5dc <st_update_plan_block_parameters+0x40>)
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d013      	beq.n	801e5d0 <st_update_plan_block_parameters+0x34>
        prep.recalculate.velocity_profile = On;
 801e5a8:	4a0d      	ldr	r2, [pc, #52]	; (801e5e0 <st_update_plan_block_parameters+0x44>)
 801e5aa:	7813      	ldrb	r3, [r2, #0]
 801e5ac:	f043 0301 	orr.w	r3, r3, #1
 801e5b0:	7013      	strb	r3, [r2, #0]
        pl_block->entry_speed_sqr = prep.current_speed * prep.current_speed; // Update entry speed.
 801e5b2:	4b0b      	ldr	r3, [pc, #44]	; (801e5e0 <st_update_plan_block_parameters+0x44>)
 801e5b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801e5b8:	4b09      	ldr	r3, [pc, #36]	; (801e5e0 <st_update_plan_block_parameters+0x44>)
 801e5ba:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801e5be:	4b07      	ldr	r3, [pc, #28]	; (801e5dc <st_update_plan_block_parameters+0x40>)
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e5c6:	edc3 7a07 	vstr	s15, [r3, #28]
        pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 801e5ca:	4b04      	ldr	r3, [pc, #16]	; (801e5dc <st_update_plan_block_parameters+0x40>)
 801e5cc:	2200      	movs	r2, #0
 801e5ce:	601a      	str	r2, [r3, #0]
    }
}
 801e5d0:	bf00      	nop
 801e5d2:	46bd      	mov	sp, r7
 801e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5d8:	4770      	bx	lr
 801e5da:	bf00      	nop
 801e5dc:	200024bc 	.word	0x200024bc
 801e5e0:	200024fc 	.word	0x200024fc

0801e5e4 <st_parking_setup_buffer>:

// Changes the run state of the step segment buffer to execute the special parking motion.
void st_parking_setup_buffer (void)
{
 801e5e4:	b580      	push	{r7, lr}
 801e5e6:	af00      	add	r7, sp, #0
    // Store step execution data of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block && !prep.recalculate.parking) {
 801e5e8:	4b19      	ldr	r3, [pc, #100]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e5ea:	781b      	ldrb	r3, [r3, #0]
 801e5ec:	f003 0302 	and.w	r3, r3, #2
 801e5f0:	b2db      	uxtb	r3, r3
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	d01d      	beq.n	801e632 <st_parking_setup_buffer+0x4e>
 801e5f6:	4b16      	ldr	r3, [pc, #88]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e5f8:	781b      	ldrb	r3, [r3, #0]
 801e5fa:	f003 0304 	and.w	r3, r3, #4
 801e5fe:	b2db      	uxtb	r3, r3
 801e600:	2b00      	cmp	r3, #0
 801e602:	d116      	bne.n	801e632 <st_parking_setup_buffer+0x4e>
        prep.last_st_block = st_prep_block;
 801e604:	4b13      	ldr	r3, [pc, #76]	; (801e654 <st_parking_setup_buffer+0x70>)
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	4a11      	ldr	r2, [pc, #68]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e60a:	6153      	str	r3, [r2, #20]
        memcpy(&st_hold_block, st_prep_block, sizeof(st_block_t));
 801e60c:	4b11      	ldr	r3, [pc, #68]	; (801e654 <st_parking_setup_buffer+0x70>)
 801e60e:	681b      	ldr	r3, [r3, #0]
 801e610:	2238      	movs	r2, #56	; 0x38
 801e612:	4619      	mov	r1, r3
 801e614:	4810      	ldr	r0, [pc, #64]	; (801e658 <st_parking_setup_buffer+0x74>)
 801e616:	f007 fd6f 	bl	80260f8 <memcpy>
        prep.last_steps_remaining = prep.steps_remaining;
 801e61a:	4b0d      	ldr	r3, [pc, #52]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e61c:	689b      	ldr	r3, [r3, #8]
 801e61e:	4a0c      	ldr	r2, [pc, #48]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e620:	6193      	str	r3, [r2, #24]
        prep.last_dt_remainder = prep.dt_remainder;
 801e622:	4b0b      	ldr	r3, [pc, #44]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e624:	685b      	ldr	r3, [r3, #4]
 801e626:	4a0a      	ldr	r2, [pc, #40]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e628:	6213      	str	r3, [r2, #32]
        prep.last_steps_per_mm = prep.steps_per_mm;
 801e62a:	4b09      	ldr	r3, [pc, #36]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e62c:	68db      	ldr	r3, [r3, #12]
 801e62e:	4a08      	ldr	r2, [pc, #32]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e630:	61d3      	str	r3, [r2, #28]
    }
    // Set flags to execute a parking motion
    prep.recalculate.parking = On;
 801e632:	4a07      	ldr	r2, [pc, #28]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e634:	7813      	ldrb	r3, [r2, #0]
 801e636:	f043 0304 	orr.w	r3, r3, #4
 801e63a:	7013      	strb	r3, [r2, #0]
    prep.recalculate.velocity_profile = Off;
 801e63c:	4a04      	ldr	r2, [pc, #16]	; (801e650 <st_parking_setup_buffer+0x6c>)
 801e63e:	7813      	ldrb	r3, [r2, #0]
 801e640:	f36f 0300 	bfc	r3, #0, #1
 801e644:	7013      	strb	r3, [r2, #0]
    pl_block = NULL; // Always reset parking motion to reload new block.
 801e646:	4b05      	ldr	r3, [pc, #20]	; (801e65c <st_parking_setup_buffer+0x78>)
 801e648:	2200      	movs	r2, #0
 801e64a:	601a      	str	r2, [r3, #0]
}
 801e64c:	bf00      	nop
 801e64e:	bd80      	pop	{r7, pc}
 801e650:	200024fc 	.word	0x200024fc
 801e654:	200024c0 	.word	0x200024c0
 801e658:	200024c4 	.word	0x200024c4
 801e65c:	200024bc 	.word	0x200024bc

0801e660 <st_parking_restore_buffer>:


// Restores the step segment buffer to the normal run state after a parking motion.
void st_parking_restore_buffer (void)
{
 801e660:	b580      	push	{r7, lr}
 801e662:	af00      	add	r7, sp, #0
    // Restore step execution data and flags of partially completed block, if necessary.
    if (prep.recalculate.hold_partial_block) {
 801e664:	4b21      	ldr	r3, [pc, #132]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e666:	781b      	ldrb	r3, [r3, #0]
 801e668:	f003 0302 	and.w	r3, r3, #2
 801e66c:	b2db      	uxtb	r3, r3
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d033      	beq.n	801e6da <st_parking_restore_buffer+0x7a>
        memcpy(prep.last_st_block, &st_hold_block, sizeof(st_block_t));
 801e672:	4b1e      	ldr	r3, [pc, #120]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e674:	695b      	ldr	r3, [r3, #20]
 801e676:	2238      	movs	r2, #56	; 0x38
 801e678:	491d      	ldr	r1, [pc, #116]	; (801e6f0 <st_parking_restore_buffer+0x90>)
 801e67a:	4618      	mov	r0, r3
 801e67c:	f007 fd3c 	bl	80260f8 <memcpy>
        st_prep_block = prep.last_st_block;
 801e680:	4b1a      	ldr	r3, [pc, #104]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e682:	695b      	ldr	r3, [r3, #20]
 801e684:	4a1b      	ldr	r2, [pc, #108]	; (801e6f4 <st_parking_restore_buffer+0x94>)
 801e686:	6013      	str	r3, [r2, #0]
        prep.steps_remaining = prep.last_steps_remaining;
 801e688:	4b18      	ldr	r3, [pc, #96]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e68a:	699b      	ldr	r3, [r3, #24]
 801e68c:	4a17      	ldr	r2, [pc, #92]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e68e:	6093      	str	r3, [r2, #8]
        prep.dt_remainder = prep.last_dt_remainder;
 801e690:	4b16      	ldr	r3, [pc, #88]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e692:	6a1b      	ldr	r3, [r3, #32]
 801e694:	4a15      	ldr	r2, [pc, #84]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e696:	6053      	str	r3, [r2, #4]
        prep.steps_per_mm = prep.last_steps_per_mm;
 801e698:	4b14      	ldr	r3, [pc, #80]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e69a:	69db      	ldr	r3, [r3, #28]
 801e69c:	4a13      	ldr	r2, [pc, #76]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e69e:	60d3      	str	r3, [r2, #12]
        prep.recalculate.flags = 0;
 801e6a0:	4b12      	ldr	r3, [pc, #72]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	701a      	strb	r2, [r3, #0]
        prep.recalculate.hold_partial_block = prep.recalculate.velocity_profile = On;
 801e6a6:	4a11      	ldr	r2, [pc, #68]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e6a8:	7813      	ldrb	r3, [r2, #0]
 801e6aa:	f043 0301 	orr.w	r3, r3, #1
 801e6ae:	7013      	strb	r3, [r2, #0]
 801e6b0:	4b0e      	ldr	r3, [pc, #56]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e6b2:	781b      	ldrb	r3, [r3, #0]
 801e6b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e6b8:	b2d9      	uxtb	r1, r3
 801e6ba:	4a0c      	ldr	r2, [pc, #48]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e6bc:	7813      	ldrb	r3, [r2, #0]
 801e6be:	f361 0341 	bfi	r3, r1, #1, #1
 801e6c2:	7013      	strb	r3, [r2, #0]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm; // Recompute this value.
 801e6c4:	4b09      	ldr	r3, [pc, #36]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e6c6:	ed93 7a03 	vldr	s14, [r3, #12]
 801e6ca:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 801e6ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e6d2:	4b06      	ldr	r3, [pc, #24]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e6d4:	edc3 7a04 	vstr	s15, [r3, #16]
 801e6d8:	e002      	b.n	801e6e0 <st_parking_restore_buffer+0x80>
    } else
        prep.recalculate.flags = 0;
 801e6da:	4b04      	ldr	r3, [pc, #16]	; (801e6ec <st_parking_restore_buffer+0x8c>)
 801e6dc:	2200      	movs	r2, #0
 801e6de:	701a      	strb	r2, [r3, #0]

    pl_block = NULL; // Set to reload next block.
 801e6e0:	4b05      	ldr	r3, [pc, #20]	; (801e6f8 <st_parking_restore_buffer+0x98>)
 801e6e2:	2200      	movs	r2, #0
 801e6e4:	601a      	str	r2, [r3, #0]
}
 801e6e6:	bf00      	nop
 801e6e8:	bd80      	pop	{r7, pc}
 801e6ea:	bf00      	nop
 801e6ec:	200024fc 	.word	0x200024fc
 801e6f0:	200024c4 	.word	0x200024c4
 801e6f4:	200024c0 	.word	0x200024c0
 801e6f8:	200024bc 	.word	0x200024bc

0801e6fc <st_prep_buffer>:
   longer than the time it takes the stepper algorithm to empty it before refilling it.
   Currently, the segment buffer conservatively holds roughly up to 40-50 msec of steps.
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer (void)
{
 801e6fc:	b580      	push	{r7, lr}
 801e6fe:	b096      	sub	sp, #88	; 0x58
 801e700:	af00      	add	r7, sp, #0
    // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
    if (sys.step_control.end_motion)
 801e702:	4b94      	ldr	r3, [pc, #592]	; (801e954 <st_prep_buffer+0x258>)
 801e704:	7e1b      	ldrb	r3, [r3, #24]
 801e706:	f003 0301 	and.w	r3, r3, #1
 801e70a:	b2db      	uxtb	r3, r3
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	f040 86b7 	bne.w	801f480 <st_prep_buffer+0xd84>
        return;

    while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 801e712:	f000 bead 	b.w	801f470 <st_prep_buffer+0xd74>

        // Determine if we need to load a new planner block or if the block needs to be recomputed.
        if (pl_block == NULL) {
 801e716:	4b90      	ldr	r3, [pc, #576]	; (801e958 <st_prep_buffer+0x25c>)
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	f040 82d3 	bne.w	801ecc6 <st_prep_buffer+0x5ca>

            // Query planner for a queued block

            pl_block = sys.step_control.execute_sys_motion ? plan_get_system_motion_block() : plan_get_current_block();
 801e720:	4b8c      	ldr	r3, [pc, #560]	; (801e954 <st_prep_buffer+0x258>)
 801e722:	7e1b      	ldrb	r3, [r3, #24]
 801e724:	f003 0304 	and.w	r3, r3, #4
 801e728:	b2db      	uxtb	r3, r3
 801e72a:	2b00      	cmp	r3, #0
 801e72c:	d003      	beq.n	801e736 <st_prep_buffer+0x3a>
 801e72e:	f7f2 fe25 	bl	801137c <plan_get_system_motion_block>
 801e732:	4603      	mov	r3, r0
 801e734:	e002      	b.n	801e73c <st_prep_buffer+0x40>
 801e736:	f7f2 fe2d 	bl	8011394 <plan_get_current_block>
 801e73a:	4603      	mov	r3, r0
 801e73c:	4a86      	ldr	r2, [pc, #536]	; (801e958 <st_prep_buffer+0x25c>)
 801e73e:	6013      	str	r3, [r2, #0]

            if (pl_block == NULL)
 801e740:	4b85      	ldr	r3, [pc, #532]	; (801e958 <st_prep_buffer+0x25c>)
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	2b00      	cmp	r3, #0
 801e746:	f000 869d 	beq.w	801f484 <st_prep_buffer+0xd88>
                return; // No planner blocks. Exit.

            // Check if we need to only recompute the velocity profile or load a new block.
            if (prep.recalculate.velocity_profile) {
 801e74a:	4b84      	ldr	r3, [pc, #528]	; (801e95c <st_prep_buffer+0x260>)
 801e74c:	781b      	ldrb	r3, [r3, #0]
 801e74e:	f003 0301 	and.w	r3, r3, #1
 801e752:	b2db      	uxtb	r3, r3
 801e754:	2b00      	cmp	r3, #0
 801e756:	d01c      	beq.n	801e792 <st_prep_buffer+0x96>
                if(settings.parking.flags.enabled) {
 801e758:	4b81      	ldr	r3, [pc, #516]	; (801e960 <st_prep_buffer+0x264>)
 801e75a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801e75e:	f003 0301 	and.w	r3, r3, #1
 801e762:	b2db      	uxtb	r3, r3
 801e764:	2b00      	cmp	r3, #0
 801e766:	d010      	beq.n	801e78a <st_prep_buffer+0x8e>
                    if (prep.recalculate.parking)
 801e768:	4b7c      	ldr	r3, [pc, #496]	; (801e95c <st_prep_buffer+0x260>)
 801e76a:	781b      	ldrb	r3, [r3, #0]
 801e76c:	f003 0304 	and.w	r3, r3, #4
 801e770:	b2db      	uxtb	r3, r3
 801e772:	2b00      	cmp	r3, #0
 801e774:	d005      	beq.n	801e782 <st_prep_buffer+0x86>
                        prep.recalculate.velocity_profile = Off;
 801e776:	4a79      	ldr	r2, [pc, #484]	; (801e95c <st_prep_buffer+0x260>)
 801e778:	7813      	ldrb	r3, [r2, #0]
 801e77a:	f36f 0300 	bfc	r3, #0, #1
 801e77e:	7013      	strb	r3, [r2, #0]
 801e780:	e0fe      	b.n	801e980 <st_prep_buffer+0x284>
                    else
                        prep.recalculate.flags = 0;
 801e782:	4b76      	ldr	r3, [pc, #472]	; (801e95c <st_prep_buffer+0x260>)
 801e784:	2200      	movs	r2, #0
 801e786:	701a      	strb	r2, [r3, #0]
 801e788:	e0fa      	b.n	801e980 <st_prep_buffer+0x284>
                } else
                    prep.recalculate.flags = 0;
 801e78a:	4b74      	ldr	r3, [pc, #464]	; (801e95c <st_prep_buffer+0x260>)
 801e78c:	2200      	movs	r2, #0
 801e78e:	701a      	strb	r2, [r3, #0]
 801e790:	e0f6      	b.n	801e980 <st_prep_buffer+0x284>

                // Prepare and copy Bresenham algorithm segment data from the new planner block, so that
                // when the segment buffer completes the planner block, it may be discarded when the
                // segment buffer finishes the prepped block, but the stepper ISR is still executing it.

                st_prep_block = st_prep_block->next;
 801e792:	4b74      	ldr	r3, [pc, #464]	; (801e964 <st_prep_buffer+0x268>)
 801e794:	681b      	ldr	r3, [r3, #0]
 801e796:	685b      	ldr	r3, [r3, #4]
 801e798:	4a72      	ldr	r2, [pc, #456]	; (801e964 <st_prep_buffer+0x268>)
 801e79a:	6013      	str	r3, [r2, #0]

                uint_fast8_t idx = N_AXIS;
 801e79c:	2303      	movs	r3, #3
 801e79e:	657b      	str	r3, [r7, #84]	; 0x54
              #else
                // With AMASS enabled, simply bit-shift multiply all Bresenham data by the max AMASS
                // level, such that we never divide beyond the original data anywhere in the algorithm.
                // If the original data is divided, we can lose a step from integer roundoff.
                do {
                    idx--;
 801e7a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e7a2:	3b01      	subs	r3, #1
 801e7a4:	657b      	str	r3, [r7, #84]	; 0x54
                    st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL;
 801e7a6:	4b6c      	ldr	r3, [pc, #432]	; (801e958 <st_prep_buffer+0x25c>)
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e7ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e7b0:	4b6c      	ldr	r3, [pc, #432]	; (801e964 <st_prep_buffer+0x268>)
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	00d1      	lsls	r1, r2, #3
 801e7b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e7b8:	3202      	adds	r2, #2
 801e7ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                } while(idx);
 801e7be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e7c0:	2b00      	cmp	r3, #0
 801e7c2:	d1ed      	bne.n	801e7a0 <st_prep_buffer+0xa4>
                st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 801e7c4:	4b64      	ldr	r3, [pc, #400]	; (801e958 <st_prep_buffer+0x25c>)
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	68da      	ldr	r2, [r3, #12]
 801e7ca:	4b66      	ldr	r3, [pc, #408]	; (801e964 <st_prep_buffer+0x268>)
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	00d2      	lsls	r2, r2, #3
 801e7d0:	615a      	str	r2, [r3, #20]
              #endif

                st_prep_block->direction_bits = pl_block->direction_bits;
 801e7d2:	4b61      	ldr	r3, [pc, #388]	; (801e958 <st_prep_buffer+0x25c>)
 801e7d4:	681a      	ldr	r2, [r3, #0]
 801e7d6:	4b63      	ldr	r3, [pc, #396]	; (801e964 <st_prep_buffer+0x268>)
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	7c12      	ldrb	r2, [r2, #16]
 801e7dc:	761a      	strb	r2, [r3, #24]
                st_prep_block->programmed_rate = pl_block->programmed_rate;
 801e7de:	4b5e      	ldr	r3, [pc, #376]	; (801e958 <st_prep_buffer+0x25c>)
 801e7e0:	681a      	ldr	r2, [r3, #0]
 801e7e2:	4b60      	ldr	r3, [pc, #384]	; (801e964 <st_prep_buffer+0x268>)
 801e7e4:	681b      	ldr	r3, [r3, #0]
 801e7e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801e7e8:	625a      	str	r2, [r3, #36]	; 0x24
//                st_prep_block->r = pl_block->programmed_rate;
                st_prep_block->millimeters = pl_block->millimeters;
 801e7ea:	4b5b      	ldr	r3, [pc, #364]	; (801e958 <st_prep_buffer+0x25c>)
 801e7ec:	681a      	ldr	r2, [r3, #0]
 801e7ee:	4b5d      	ldr	r3, [pc, #372]	; (801e964 <st_prep_buffer+0x268>)
 801e7f0:	681b      	ldr	r3, [r3, #0]
 801e7f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801e7f4:	621a      	str	r2, [r3, #32]
                st_prep_block->steps_per_mm = (float)pl_block->step_event_count / pl_block->millimeters;
 801e7f6:	4b58      	ldr	r3, [pc, #352]	; (801e958 <st_prep_buffer+0x25c>)
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	68db      	ldr	r3, [r3, #12]
 801e7fc:	ee07 3a90 	vmov	s15, r3
 801e800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e804:	4b54      	ldr	r3, [pc, #336]	; (801e958 <st_prep_buffer+0x25c>)
 801e806:	681b      	ldr	r3, [r3, #0]
 801e808:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801e80c:	4b55      	ldr	r3, [pc, #340]	; (801e964 <st_prep_buffer+0x268>)
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e814:	edc3 7a07 	vstr	s15, [r3, #28]
                st_prep_block->output_commands = pl_block->output_commands;
 801e818:	4b4f      	ldr	r3, [pc, #316]	; (801e958 <st_prep_buffer+0x25c>)
 801e81a:	681a      	ldr	r2, [r3, #0]
 801e81c:	4b51      	ldr	r3, [pc, #324]	; (801e964 <st_prep_buffer+0x268>)
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801e822:	62da      	str	r2, [r3, #44]	; 0x2c
                st_prep_block->overrides = pl_block->overrides;
 801e824:	4b4c      	ldr	r3, [pc, #304]	; (801e958 <st_prep_buffer+0x25c>)
 801e826:	681a      	ldr	r2, [r3, #0]
 801e828:	4b4e      	ldr	r3, [pc, #312]	; (801e964 <st_prep_buffer+0x268>)
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	7c52      	ldrb	r2, [r2, #17]
 801e82e:	765a      	strb	r2, [r3, #25]
                st_prep_block->backlash_motion = pl_block->condition.backlash_motion;
 801e830:	4b49      	ldr	r3, [pc, #292]	; (801e958 <st_prep_buffer+0x25c>)
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	7d1b      	ldrb	r3, [r3, #20]
 801e836:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e83a:	b2db      	uxtb	r3, r3
 801e83c:	461a      	mov	r2, r3
 801e83e:	4b49      	ldr	r3, [pc, #292]	; (801e964 <st_prep_buffer+0x268>)
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	2a00      	cmp	r2, #0
 801e844:	bf14      	ite	ne
 801e846:	2201      	movne	r2, #1
 801e848:	2200      	moveq	r2, #0
 801e84a:	b2d2      	uxtb	r2, r2
 801e84c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                st_prep_block->message = pl_block->message;
 801e850:	4b41      	ldr	r3, [pc, #260]	; (801e958 <st_prep_buffer+0x25c>)
 801e852:	681a      	ldr	r2, [r3, #0]
 801e854:	4b43      	ldr	r3, [pc, #268]	; (801e964 <st_prep_buffer+0x268>)
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801e85a:	629a      	str	r2, [r3, #40]	; 0x28
                pl_block->message= NULL;
 801e85c:	4b3e      	ldr	r3, [pc, #248]	; (801e958 <st_prep_buffer+0x25c>)
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	2200      	movs	r2, #0
 801e862:	649a      	str	r2, [r3, #72]	; 0x48

                // Initialize segment buffer data for generating the segments.
                prep.steps_per_mm = st_prep_block->steps_per_mm;
 801e864:	4b3f      	ldr	r3, [pc, #252]	; (801e964 <st_prep_buffer+0x268>)
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	69db      	ldr	r3, [r3, #28]
 801e86a:	4a3c      	ldr	r2, [pc, #240]	; (801e95c <st_prep_buffer+0x260>)
 801e86c:	60d3      	str	r3, [r2, #12]
                prep.steps_remaining = pl_block->step_event_count;
 801e86e:	4b3a      	ldr	r3, [pc, #232]	; (801e958 <st_prep_buffer+0x25c>)
 801e870:	681b      	ldr	r3, [r3, #0]
 801e872:	68db      	ldr	r3, [r3, #12]
 801e874:	4a39      	ldr	r2, [pc, #228]	; (801e95c <st_prep_buffer+0x260>)
 801e876:	6093      	str	r3, [r2, #8]
                prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR / prep.steps_per_mm;
 801e878:	4b38      	ldr	r3, [pc, #224]	; (801e95c <st_prep_buffer+0x260>)
 801e87a:	ed93 7a03 	vldr	s14, [r3, #12]
 801e87e:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 801e882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e886:	4b35      	ldr	r3, [pc, #212]	; (801e95c <st_prep_buffer+0x260>)
 801e888:	edc3 7a04 	vstr	s15, [r3, #16]
                prep.dt_remainder = prep.target_position = 0.0f; // Reset for new segment block
 801e88c:	4b33      	ldr	r3, [pc, #204]	; (801e95c <st_prep_buffer+0x260>)
 801e88e:	f04f 0200 	mov.w	r2, #0
 801e892:	641a      	str	r2, [r3, #64]	; 0x40
 801e894:	4b31      	ldr	r3, [pc, #196]	; (801e95c <st_prep_buffer+0x260>)
 801e896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e898:	4a30      	ldr	r2, [pc, #192]	; (801e95c <st_prep_buffer+0x260>)
 801e89a:	6053      	str	r3, [r2, #4]
#ifdef KINEMATICS_API
                prep.rate_multiplier = pl_block->rate_multiplier;
#endif
                if (sys.step_control.execute_hold || prep.recalculate.decel_override) {
 801e89c:	4b2d      	ldr	r3, [pc, #180]	; (801e954 <st_prep_buffer+0x258>)
 801e89e:	7e1b      	ldrb	r3, [r3, #24]
 801e8a0:	f003 0302 	and.w	r3, r3, #2
 801e8a4:	b2db      	uxtb	r3, r3
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d106      	bne.n	801e8b8 <st_prep_buffer+0x1bc>
 801e8aa:	4b2c      	ldr	r3, [pc, #176]	; (801e95c <st_prep_buffer+0x260>)
 801e8ac:	781b      	ldrb	r3, [r3, #0]
 801e8ae:	f003 0308 	and.w	r3, r3, #8
 801e8b2:	b2db      	uxtb	r3, r3
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d015      	beq.n	801e8e4 <st_prep_buffer+0x1e8>
                    // New block loaded mid-hold. Override planner block entry speed to enforce deceleration.
                    prep.current_speed = prep.exit_speed;
 801e8b8:	4b28      	ldr	r3, [pc, #160]	; (801e95c <st_prep_buffer+0x260>)
 801e8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e8bc:	4a27      	ldr	r2, [pc, #156]	; (801e95c <st_prep_buffer+0x260>)
 801e8be:	62d3      	str	r3, [r2, #44]	; 0x2c
                    pl_block->entry_speed_sqr = prep.exit_speed * prep.exit_speed;
 801e8c0:	4b26      	ldr	r3, [pc, #152]	; (801e95c <st_prep_buffer+0x260>)
 801e8c2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 801e8c6:	4b25      	ldr	r3, [pc, #148]	; (801e95c <st_prep_buffer+0x260>)
 801e8c8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801e8cc:	4b22      	ldr	r3, [pc, #136]	; (801e958 <st_prep_buffer+0x25c>)
 801e8ce:	681b      	ldr	r3, [r3, #0]
 801e8d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e8d4:	edc3 7a07 	vstr	s15, [r3, #28]
                    prep.recalculate.decel_override = Off;
 801e8d8:	4a20      	ldr	r2, [pc, #128]	; (801e95c <st_prep_buffer+0x260>)
 801e8da:	7813      	ldrb	r3, [r2, #0]
 801e8dc:	f36f 03c3 	bfc	r3, #3, #1
 801e8e0:	7013      	strb	r3, [r2, #0]
 801e8e2:	e00c      	b.n	801e8fe <st_prep_buffer+0x202>
                } else
                    prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 801e8e4:	4b1c      	ldr	r3, [pc, #112]	; (801e958 <st_prep_buffer+0x25c>)
 801e8e6:	681b      	ldr	r3, [r3, #0]
 801e8e8:	edd3 7a07 	vldr	s15, [r3, #28]
 801e8ec:	eeb0 0a67 	vmov.f32	s0, s15
 801e8f0:	f008 f9de 	bl	8026cb0 <sqrtf>
 801e8f4:	eef0 7a40 	vmov.f32	s15, s0
 801e8f8:	4b18      	ldr	r3, [pc, #96]	; (801e95c <st_prep_buffer+0x260>)
 801e8fa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

                // Setup laser mode variables. RPM rate adjusted motions will always complete a motion with the
                // spindle off.
                if ((st_prep_block->dynamic_rpm = pl_block->condition.is_rpm_rate_adjusted)) {
 801e8fe:	4b16      	ldr	r3, [pc, #88]	; (801e958 <st_prep_buffer+0x25c>)
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	7d1b      	ldrb	r3, [r3, #20]
 801e904:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801e908:	b2db      	uxtb	r3, r3
 801e90a:	461a      	mov	r2, r3
 801e90c:	4b15      	ldr	r3, [pc, #84]	; (801e964 <st_prep_buffer+0x268>)
 801e90e:	681b      	ldr	r3, [r3, #0]
 801e910:	2a00      	cmp	r2, #0
 801e912:	bf14      	ite	ne
 801e914:	2201      	movne	r2, #1
 801e916:	2200      	moveq	r2, #0
 801e918:	b2d2      	uxtb	r2, r2
 801e91a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801e91e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e922:	2b00      	cmp	r3, #0
 801e924:	d020      	beq.n	801e968 <st_prep_buffer+0x26c>
                    // Pre-compute inverse programmed rate to speed up RPM updating per step segment.
                    prep.inv_feedrate = pl_block->condition.is_laser_ppi_mode ? 1.0f : 1.0f / pl_block->programmed_rate;
 801e926:	4b0c      	ldr	r3, [pc, #48]	; (801e958 <st_prep_buffer+0x25c>)
 801e928:	681b      	ldr	r3, [r3, #0]
 801e92a:	7d1b      	ldrb	r3, [r3, #20]
 801e92c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801e930:	b2db      	uxtb	r3, r3
 801e932:	2b00      	cmp	r3, #0
 801e934:	d108      	bne.n	801e948 <st_prep_buffer+0x24c>
 801e936:	4b08      	ldr	r3, [pc, #32]	; (801e958 <st_prep_buffer+0x25c>)
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 801e93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e946:	e001      	b.n	801e94c <st_prep_buffer+0x250>
 801e948:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e94c:	4b03      	ldr	r3, [pc, #12]	; (801e95c <st_prep_buffer+0x260>)
 801e94e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 801e952:	e015      	b.n	801e980 <st_prep_buffer+0x284>
 801e954:	20001520 	.word	0x20001520
 801e958:	200024bc 	.word	0x200024bc
 801e95c:	200024fc 	.word	0x200024fc
 801e960:	20001cf0 	.word	0x20001cf0
 801e964:	200024c0 	.word	0x200024c0
                } else
                    st_prep_block->dynamic_rpm = !!pl_block->spindle.css;
 801e968:	4baf      	ldr	r3, [pc, #700]	; (801ec28 <st_prep_buffer+0x52c>)
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e96e:	4baf      	ldr	r3, [pc, #700]	; (801ec2c <st_prep_buffer+0x530>)
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	2a00      	cmp	r2, #0
 801e974:	bf14      	ite	ne
 801e976:	2201      	movne	r2, #1
 801e978:	2200      	moveq	r2, #0
 801e97a:	b2d2      	uxtb	r2, r2
 801e97c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
             Compute the velocity profile of a new planner block based on its entry and exit
             speeds, or recompute the profile of a partially-completed planner block if the
             planner has updated it. For a commanded forced-deceleration, such as from a feed
             hold, override the planner velocities and decelerate to the target exit speed.
            */
            prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 801e980:	4bab      	ldr	r3, [pc, #684]	; (801ec30 <st_prep_buffer+0x534>)
 801e982:	f04f 0200 	mov.w	r2, #0
 801e986:	629a      	str	r2, [r3, #40]	; 0x28
            float inv_2_accel = 0.5f / pl_block->acceleration;
 801e988:	4ba7      	ldr	r3, [pc, #668]	; (801ec28 <st_prep_buffer+0x52c>)
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801e990:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801e994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e998:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

            if (sys.step_control.execute_hold) { // [Forced Deceleration to Zero Velocity]
 801e99c:	4ba5      	ldr	r3, [pc, #660]	; (801ec34 <st_prep_buffer+0x538>)
 801e99e:	7e1b      	ldrb	r3, [r3, #24]
 801e9a0:	f003 0302 	and.w	r3, r3, #2
 801e9a4:	b2db      	uxtb	r3, r3
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d03e      	beq.n	801ea28 <st_prep_buffer+0x32c>
                // Compute velocity profile parameters for a feed hold in-progress. This profile overrides
                // the planner block profile, enforcing a deceleration to zero speed.
                prep.ramp_type = Ramp_Decel;
 801e9aa:	4ba1      	ldr	r3, [pc, #644]	; (801ec30 <st_prep_buffer+0x534>)
 801e9ac:	2202      	movs	r2, #2
 801e9ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                // Compute decelerate distance relative to end of block.
                float decel_dist = pl_block->millimeters - inv_2_accel * pl_block->entry_speed_sqr;
 801e9b2:	4b9d      	ldr	r3, [pc, #628]	; (801ec28 <st_prep_buffer+0x52c>)
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801e9ba:	4b9b      	ldr	r3, [pc, #620]	; (801ec28 <st_prep_buffer+0x52c>)
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	edd3 6a07 	vldr	s13, [r3, #28]
 801e9c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801e9c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e9ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e9ce:	edc7 7a08 	vstr	s15, [r7, #32]
                if (decel_dist < 0.0f) {
 801e9d2:	edd7 7a08 	vldr	s15, [r7, #32]
 801e9d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9de:	d51b      	bpl.n	801ea18 <st_prep_buffer+0x31c>
                    // Deceleration through entire planner block. End of feed hold is not in this block.
                    prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 801e9e0:	4b91      	ldr	r3, [pc, #580]	; (801ec28 <st_prep_buffer+0x52c>)
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	ed93 7a07 	vldr	s14, [r3, #28]
 801e9e8:	4b8f      	ldr	r3, [pc, #572]	; (801ec28 <st_prep_buffer+0x52c>)
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801e9f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801e9f4:	4b8c      	ldr	r3, [pc, #560]	; (801ec28 <st_prep_buffer+0x52c>)
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801e9fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ea00:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ea04:	eeb0 0a67 	vmov.f32	s0, s15
 801ea08:	f008 f952 	bl	8026cb0 <sqrtf>
 801ea0c:	eef0 7a40 	vmov.f32	s15, s0
 801ea10:	4b87      	ldr	r3, [pc, #540]	; (801ec30 <st_prep_buffer+0x534>)
 801ea12:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 801ea16:	e13b      	b.n	801ec90 <st_prep_buffer+0x594>
                } else {
                    prep.mm_complete = decel_dist; // End of feed hold.
 801ea18:	4a85      	ldr	r2, [pc, #532]	; (801ec30 <st_prep_buffer+0x534>)
 801ea1a:	6a3b      	ldr	r3, [r7, #32]
 801ea1c:	6293      	str	r3, [r2, #40]	; 0x28
                    prep.exit_speed = 0.0f;
 801ea1e:	4b84      	ldr	r3, [pc, #528]	; (801ec30 <st_prep_buffer+0x534>)
 801ea20:	f04f 0200 	mov.w	r2, #0
 801ea24:	635a      	str	r2, [r3, #52]	; 0x34
 801ea26:	e133      	b.n	801ec90 <st_prep_buffer+0x594>
                }
            } else { // [Normal Operation]
                // Compute or recompute velocity profile parameters of the prepped planner block.
                prep.ramp_type = Ramp_Accel; // Initialize as acceleration ramp.
 801ea28:	4b81      	ldr	r3, [pc, #516]	; (801ec30 <st_prep_buffer+0x534>)
 801ea2a:	2200      	movs	r2, #0
 801ea2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prep.accelerate_until = pl_block->millimeters;
 801ea30:	4b7d      	ldr	r3, [pc, #500]	; (801ec28 <st_prep_buffer+0x52c>)
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea36:	4a7e      	ldr	r2, [pc, #504]	; (801ec30 <st_prep_buffer+0x534>)
 801ea38:	6393      	str	r3, [r2, #56]	; 0x38

                float exit_speed_sqr;
                if (sys.step_control.execute_sys_motion)
 801ea3a:	4b7e      	ldr	r3, [pc, #504]	; (801ec34 <st_prep_buffer+0x538>)
 801ea3c:	7e1b      	ldrb	r3, [r3, #24]
 801ea3e:	f003 0304 	and.w	r3, r3, #4
 801ea42:	b2db      	uxtb	r3, r3
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d006      	beq.n	801ea56 <st_prep_buffer+0x35a>
                    prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 801ea48:	f04f 0300 	mov.w	r3, #0
 801ea4c:	653b      	str	r3, [r7, #80]	; 0x50
 801ea4e:	4a78      	ldr	r2, [pc, #480]	; (801ec30 <st_prep_buffer+0x534>)
 801ea50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea52:	6353      	str	r3, [r2, #52]	; 0x34
 801ea54:	e00c      	b.n	801ea70 <st_prep_buffer+0x374>
                else {
                    exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 801ea56:	f7f2 fcb3 	bl	80113c0 <plan_get_exec_block_exit_speed_sqr>
 801ea5a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
                    prep.exit_speed = sqrtf(exit_speed_sqr);
 801ea5e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 801ea62:	f008 f925 	bl	8026cb0 <sqrtf>
 801ea66:	eef0 7a40 	vmov.f32	s15, s0
 801ea6a:	4b71      	ldr	r3, [pc, #452]	; (801ec30 <st_prep_buffer+0x534>)
 801ea6c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
                }

                float nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 801ea70:	4b6d      	ldr	r3, [pc, #436]	; (801ec28 <st_prep_buffer+0x52c>)
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	4618      	mov	r0, r3
 801ea76:	f7f2 fcd5 	bl	8011424 <plan_compute_profile_nominal_speed>
 801ea7a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
                float nominal_speed_sqr = nominal_speed * nominal_speed;
 801ea7e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801ea82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ea86:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                float intersect_distance = 0.5f * (pl_block->millimeters + inv_2_accel * (pl_block->entry_speed_sqr - exit_speed_sqr));
 801ea8a:	4b67      	ldr	r3, [pc, #412]	; (801ec28 <st_prep_buffer+0x52c>)
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801ea92:	4b65      	ldr	r3, [pc, #404]	; (801ec28 <st_prep_buffer+0x52c>)
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	edd3 6a07 	vldr	s13, [r3, #28]
 801ea9a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801ea9e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801eaa2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801eaa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801eaaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801eaae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801eab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eab6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

                prep.target_feed = nominal_speed;
 801eaba:	4a5d      	ldr	r2, [pc, #372]	; (801ec30 <st_prep_buffer+0x534>)
 801eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eabe:	6453      	str	r3, [r2, #68]	; 0x44

                if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 801eac0:	4b59      	ldr	r3, [pc, #356]	; (801ec28 <st_prep_buffer+0x52c>)
 801eac2:	681b      	ldr	r3, [r3, #0]
 801eac4:	edd3 7a07 	vldr	s15, [r3, #28]
 801eac8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801eacc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ead0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ead4:	d556      	bpl.n	801eb84 <st_prep_buffer+0x488>

                    prep.accelerate_until = pl_block->millimeters - inv_2_accel * (pl_block->entry_speed_sqr - nominal_speed_sqr);
 801ead6:	4b54      	ldr	r3, [pc, #336]	; (801ec28 <st_prep_buffer+0x52c>)
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801eade:	4b52      	ldr	r3, [pc, #328]	; (801ec28 <st_prep_buffer+0x52c>)
 801eae0:	681b      	ldr	r3, [r3, #0]
 801eae2:	edd3 6a07 	vldr	s13, [r3, #28]
 801eae6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801eaea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801eaee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801eaf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801eaf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801eafa:	4b4d      	ldr	r3, [pc, #308]	; (801ec30 <st_prep_buffer+0x534>)
 801eafc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

                    if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 801eb00:	4b4b      	ldr	r3, [pc, #300]	; (801ec30 <st_prep_buffer+0x534>)
 801eb02:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801eb06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801eb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb0e:	d824      	bhi.n	801eb5a <st_prep_buffer+0x45e>
                        prep.ramp_type = Ramp_Decel;
 801eb10:	4b47      	ldr	r3, [pc, #284]	; (801ec30 <st_prep_buffer+0x534>)
 801eb12:	2202      	movs	r2, #2
 801eb14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        // prep.decelerate_after = pl_block->millimeters;
                        // prep.maximum_speed = prep.current_speed;

                        // Compute override block exit speed since it doesn't match the planner exit speed.
                        prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2.0f * pl_block->acceleration * pl_block->millimeters);
 801eb18:	4b43      	ldr	r3, [pc, #268]	; (801ec28 <st_prep_buffer+0x52c>)
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	ed93 7a07 	vldr	s14, [r3, #28]
 801eb20:	4b41      	ldr	r3, [pc, #260]	; (801ec28 <st_prep_buffer+0x52c>)
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801eb28:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801eb2c:	4b3e      	ldr	r3, [pc, #248]	; (801ec28 <st_prep_buffer+0x52c>)
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801eb34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801eb38:	ee77 7a67 	vsub.f32	s15, s14, s15
 801eb3c:	eeb0 0a67 	vmov.f32	s0, s15
 801eb40:	f008 f8b6 	bl	8026cb0 <sqrtf>
 801eb44:	eef0 7a40 	vmov.f32	s15, s0
 801eb48:	4b39      	ldr	r3, [pc, #228]	; (801ec30 <st_prep_buffer+0x534>)
 801eb4a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
                        prep.recalculate.decel_override = On; // Flag to load next block as deceleration override.
 801eb4e:	4a38      	ldr	r2, [pc, #224]	; (801ec30 <st_prep_buffer+0x534>)
 801eb50:	7813      	ldrb	r3, [r2, #0]
 801eb52:	f043 0308 	orr.w	r3, r3, #8
 801eb56:	7013      	strb	r3, [r2, #0]
 801eb58:	e09a      	b.n	801ec90 <st_prep_buffer+0x594>
                        // Can be tricky since entry speed will be current speed, as in feed holds.
                        // Also, look into near-zero speed handling issues with this.

                    } else {
                        // Decelerate to cruise or cruise-decelerate types. Guaranteed to intersect updated plan.
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 801eb5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801eb5e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801eb62:	ee37 7a67 	vsub.f32	s14, s14, s15
 801eb66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801eb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eb6e:	4b30      	ldr	r3, [pc, #192]	; (801ec30 <st_prep_buffer+0x534>)
 801eb70:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
                        prep.maximum_speed = nominal_speed;
 801eb74:	4a2e      	ldr	r2, [pc, #184]	; (801ec30 <st_prep_buffer+0x534>)
 801eb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb78:	6313      	str	r3, [r2, #48]	; 0x30
                        prep.ramp_type = Ramp_DecelOverride;
 801eb7a:	4b2d      	ldr	r3, [pc, #180]	; (801ec30 <st_prep_buffer+0x534>)
 801eb7c:	2203      	movs	r2, #3
 801eb7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801eb82:	e085      	b.n	801ec90 <st_prep_buffer+0x594>
                    }
                } else if (intersect_distance > 0.0f) {
 801eb84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801eb88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801eb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb90:	dd76      	ble.n	801ec80 <st_prep_buffer+0x584>
                    if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 801eb92:	4b25      	ldr	r3, [pc, #148]	; (801ec28 <st_prep_buffer+0x52c>)
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801eb9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801eb9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801eba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eba6:	d566      	bpl.n	801ec76 <st_prep_buffer+0x57a>
                        // NOTE: For acceleration-cruise and cruise-only types, following calculation will be 0.0.
                        prep.decelerate_after = inv_2_accel * (nominal_speed_sqr - exit_speed_sqr);
 801eba8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ebac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801ebb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ebb4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801ebb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ebbc:	4b1c      	ldr	r3, [pc, #112]	; (801ec30 <st_prep_buffer+0x534>)
 801ebbe:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
                        if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 801ebc2:	4b1b      	ldr	r3, [pc, #108]	; (801ec30 <st_prep_buffer+0x534>)
 801ebc4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801ebc8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801ebcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebd4:	dd30      	ble.n	801ec38 <st_prep_buffer+0x53c>
                            prep.maximum_speed = nominal_speed;
 801ebd6:	4a16      	ldr	r2, [pc, #88]	; (801ec30 <st_prep_buffer+0x534>)
 801ebd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ebda:	6313      	str	r3, [r2, #48]	; 0x30
                            if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 801ebdc:	4b12      	ldr	r3, [pc, #72]	; (801ec28 <st_prep_buffer+0x52c>)
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	edd3 7a07 	vldr	s15, [r3, #28]
 801ebe4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801ebe8:	eeb4 7a67 	vcmp.f32	s14, s15
 801ebec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebf0:	d104      	bne.n	801ebfc <st_prep_buffer+0x500>
                                // Cruise-deceleration or cruise-only type.
                                prep.ramp_type = Ramp_Cruise;
 801ebf2:	4b0f      	ldr	r3, [pc, #60]	; (801ec30 <st_prep_buffer+0x534>)
 801ebf4:	2201      	movs	r2, #1
 801ebf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801ebfa:	e049      	b.n	801ec90 <st_prep_buffer+0x594>
                            } else {
                                // Full-trapezoid or acceleration-cruise types
                                prep.accelerate_until -= inv_2_accel * (nominal_speed_sqr - pl_block->entry_speed_sqr);
 801ebfc:	4b0c      	ldr	r3, [pc, #48]	; (801ec30 <st_prep_buffer+0x534>)
 801ebfe:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 801ec02:	4b09      	ldr	r3, [pc, #36]	; (801ec28 <st_prep_buffer+0x52c>)
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	edd3 7a07 	vldr	s15, [r3, #28]
 801ec0a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 801ec0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801ec12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801ec16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ec1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ec1e:	4b04      	ldr	r3, [pc, #16]	; (801ec30 <st_prep_buffer+0x534>)
 801ec20:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 801ec24:	e034      	b.n	801ec90 <st_prep_buffer+0x594>
 801ec26:	bf00      	nop
 801ec28:	200024bc 	.word	0x200024bc
 801ec2c:	200024c0 	.word	0x200024c0
 801ec30:	200024fc 	.word	0x200024fc
 801ec34:	20001520 	.word	0x20001520
                            }
                        } else { // Triangle type
                            prep.accelerate_until = prep.decelerate_after = intersect_distance;
 801ec38:	4ab9      	ldr	r2, [pc, #740]	; (801ef20 <st_prep_buffer+0x824>)
 801ec3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec3c:	63d3      	str	r3, [r2, #60]	; 0x3c
 801ec3e:	4bb8      	ldr	r3, [pc, #736]	; (801ef20 <st_prep_buffer+0x824>)
 801ec40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ec42:	4ab7      	ldr	r2, [pc, #732]	; (801ef20 <st_prep_buffer+0x824>)
 801ec44:	6393      	str	r3, [r2, #56]	; 0x38
                            prep.maximum_speed = sqrtf(2.0f * pl_block->acceleration * intersect_distance + exit_speed_sqr);
 801ec46:	4bb7      	ldr	r3, [pc, #732]	; (801ef24 <st_prep_buffer+0x828>)
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801ec4e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801ec52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801ec56:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ec5a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801ec5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ec62:	eeb0 0a67 	vmov.f32	s0, s15
 801ec66:	f008 f823 	bl	8026cb0 <sqrtf>
 801ec6a:	eef0 7a40 	vmov.f32	s15, s0
 801ec6e:	4bac      	ldr	r3, [pc, #688]	; (801ef20 <st_prep_buffer+0x824>)
 801ec70:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 801ec74:	e00c      	b.n	801ec90 <st_prep_buffer+0x594>
                        }
                    } else { // Deceleration-only type
                        prep.ramp_type = Ramp_Decel;
 801ec76:	4baa      	ldr	r3, [pc, #680]	; (801ef20 <st_prep_buffer+0x824>)
 801ec78:	2202      	movs	r2, #2
 801ec7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801ec7e:	e007      	b.n	801ec90 <st_prep_buffer+0x594>
                        // prep.decelerate_after = pl_block->millimeters;
                        // prep.maximum_speed = prep.current_speed;
                    }
                } else { // Acceleration-only type
                    prep.accelerate_until = 0.0f;
 801ec80:	4ba7      	ldr	r3, [pc, #668]	; (801ef20 <st_prep_buffer+0x824>)
 801ec82:	f04f 0200 	mov.w	r2, #0
 801ec86:	639a      	str	r2, [r3, #56]	; 0x38
                    // prep.decelerate_after = 0.0f;
                    prep.maximum_speed = prep.exit_speed;
 801ec88:	4ba5      	ldr	r3, [pc, #660]	; (801ef20 <st_prep_buffer+0x824>)
 801ec8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ec8c:	4aa4      	ldr	r2, [pc, #656]	; (801ef20 <st_prep_buffer+0x824>)
 801ec8e:	6313      	str	r3, [r2, #48]	; 0x30
                }
            }

            if(state_get() != STATE_HOMING)
 801ec90:	f7fe f846 	bl	801cd20 <state_get>
 801ec94:	4603      	mov	r3, r0
 801ec96:	2b04      	cmp	r3, #4
 801ec98:	d012      	beq.n	801ecc0 <st_prep_buffer+0x5c4>
                sys.step_control.update_spindle_rpm |= pl_block->spindle.hal->cap.laser; // Force update whenever updating block in laser mode.
 801ec9a:	4ba3      	ldr	r3, [pc, #652]	; (801ef28 <st_prep_buffer+0x82c>)
 801ec9c:	7e1b      	ldrb	r3, [r3, #24]
 801ec9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801eca2:	b2da      	uxtb	r2, r3
 801eca4:	4b9f      	ldr	r3, [pc, #636]	; (801ef24 <st_prep_buffer+0x828>)
 801eca6:	681b      	ldr	r3, [r3, #0]
 801eca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ecaa:	7a5b      	ldrb	r3, [r3, #9]
 801ecac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ecb0:	b2db      	uxtb	r3, r3
 801ecb2:	4313      	orrs	r3, r2
 801ecb4:	b2d9      	uxtb	r1, r3
 801ecb6:	4a9c      	ldr	r2, [pc, #624]	; (801ef28 <st_prep_buffer+0x82c>)
 801ecb8:	7e13      	ldrb	r3, [r2, #24]
 801ecba:	f361 03c3 	bfi	r3, r1, #3, #1
 801ecbe:	7613      	strb	r3, [r2, #24]

            probe_asserted = false;
 801ecc0:	4b9a      	ldr	r3, [pc, #616]	; (801ef2c <st_prep_buffer+0x830>)
 801ecc2:	2200      	movs	r2, #0
 801ecc4:	701a      	strb	r2, [r3, #0]
        }

        // Block adding new segments after probe is asserted until deceleration is started.
        if(probe_asserted)
 801ecc6:	4b99      	ldr	r3, [pc, #612]	; (801ef2c <st_prep_buffer+0x830>)
 801ecc8:	781b      	ldrb	r3, [r3, #0]
 801ecca:	b2db      	uxtb	r3, r3
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	f040 83db 	bne.w	801f488 <st_prep_buffer+0xd8c>
            return;

        // Initialize new segment
        segment_t *prep_segment = segment_buffer_head;
 801ecd2:	4b97      	ldr	r3, [pc, #604]	; (801ef30 <st_prep_buffer+0x834>)
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	61fb      	str	r3, [r7, #28]

        // Set new segment to point to the current segment data block.
        prep_segment->exec_block = st_prep_block;
 801ecd8:	4b96      	ldr	r3, [pc, #600]	; (801ef34 <st_prep_buffer+0x838>)
 801ecda:	681a      	ldr	r2, [r3, #0]
 801ecdc:	69fb      	ldr	r3, [r7, #28]
 801ecde:	609a      	str	r2, [r3, #8]
        prep_segment->update_rpm = NULL;
 801ece0:	69fb      	ldr	r3, [r7, #28]
 801ece2:	2200      	movs	r2, #0
 801ece4:	631a      	str	r2, [r3, #48]	; 0x30
        prep_segment->update_pwm = NULL;
 801ece6:	69fb      	ldr	r3, [r7, #28]
 801ece8:	2200      	movs	r2, #0
 801ecea:	62da      	str	r2, [r3, #44]	; 0x2c
          acceleration ramp, cruising state, and deceleration ramp. Each ramp's travel distance
          may range from zero to the length of the block. Velocity profiles can end either at
          the end of planner block (typical) or mid-block at the end of a forced deceleration,
          such as from a feed hold.
        */
        float dt_max = DT_SEGMENT; // Maximum segment time
 801ecec:	4b92      	ldr	r3, [pc, #584]	; (801ef38 <st_prep_buffer+0x83c>)
 801ecee:	64fb      	str	r3, [r7, #76]	; 0x4c
        float dt = 0.0f; // Initialize segment time
 801ecf0:	f04f 0300 	mov.w	r3, #0
 801ecf4:	64bb      	str	r3, [r7, #72]	; 0x48
        float time_var = dt_max; // Time worker variable
 801ecf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ecf8:	647b      	str	r3, [r7, #68]	; 0x44
        float mm_var; // mm - Distance worker variable
        float speed_var; // Speed worker variable
        float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 801ecfa:	4b8a      	ldr	r3, [pc, #552]	; (801ef24 <st_prep_buffer+0x828>)
 801ecfc:	681b      	ldr	r3, [r3, #0]
 801ecfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ed00:	643b      	str	r3, [r7, #64]	; 0x40
        float minimum_mm = mm_remaining - prep.req_mm_increment; // Guarantee at least one step.
 801ed02:	4b87      	ldr	r3, [pc, #540]	; (801ef20 <st_prep_buffer+0x824>)
 801ed04:	edd3 7a04 	vldr	s15, [r3, #16]
 801ed08:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801ed0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ed10:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        if (minimum_mm < 0.0f)
 801ed14:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801ed18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ed1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed20:	d502      	bpl.n	801ed28 <st_prep_buffer+0x62c>
            minimum_mm = 0.0f;
 801ed22:	f04f 0300 	mov.w	r3, #0
 801ed26:	63fb      	str	r3, [r7, #60]	; 0x3c

        do {

            switch (prep.ramp_type) {
 801ed28:	4b7d      	ldr	r3, [pc, #500]	; (801ef20 <st_prep_buffer+0x824>)
 801ed2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ed2e:	2b03      	cmp	r3, #3
 801ed30:	d008      	beq.n	801ed44 <st_prep_buffer+0x648>
 801ed32:	2b03      	cmp	r3, #3
 801ed34:	f300 8102 	bgt.w	801ef3c <st_prep_buffer+0x840>
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d05e      	beq.n	801edfa <st_prep_buffer+0x6fe>
 801ed3c:	2b01      	cmp	r3, #1
 801ed3e:	f000 80be 	beq.w	801eebe <st_prep_buffer+0x7c2>
 801ed42:	e0fb      	b.n	801ef3c <st_prep_buffer+0x840>

                case Ramp_DecelOverride:
                    speed_var = pl_block->acceleration * time_var;
 801ed44:	4b77      	ldr	r3, [pc, #476]	; (801ef24 <st_prep_buffer+0x828>)
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801ed4c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801ed50:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ed54:	edc7 7a06 	vstr	s15, [r7, #24]
                    if ((prep.current_speed - prep.maximum_speed) <= speed_var) {
 801ed58:	4b71      	ldr	r3, [pc, #452]	; (801ef20 <st_prep_buffer+0x824>)
 801ed5a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801ed5e:	4b70      	ldr	r3, [pc, #448]	; (801ef20 <st_prep_buffer+0x824>)
 801ed60:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801ed64:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ed68:	ed97 7a06 	vldr	s14, [r7, #24]
 801ed6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ed70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed74:	db21      	blt.n	801edba <st_prep_buffer+0x6be>
                        // Cruise or cruise-deceleration types only for deceleration override.
                        mm_remaining = prep.accelerate_until;
 801ed76:	4b6a      	ldr	r3, [pc, #424]	; (801ef20 <st_prep_buffer+0x824>)
 801ed78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed7a:	643b      	str	r3, [r7, #64]	; 0x40
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 801ed7c:	4b69      	ldr	r3, [pc, #420]	; (801ef24 <st_prep_buffer+0x828>)
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801ed84:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801ed88:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ed8c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801ed90:	4b63      	ldr	r3, [pc, #396]	; (801ef20 <st_prep_buffer+0x824>)
 801ed92:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801ed96:	4b62      	ldr	r3, [pc, #392]	; (801ef20 <st_prep_buffer+0x824>)
 801ed98:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801ed9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801eda0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eda4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
                        prep.ramp_type = Ramp_Cruise;
 801eda8:	4b5d      	ldr	r3, [pc, #372]	; (801ef20 <st_prep_buffer+0x824>)
 801edaa:	2201      	movs	r2, #1
 801edac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        prep.current_speed = prep.maximum_speed;
 801edb0:	4b5b      	ldr	r3, [pc, #364]	; (801ef20 <st_prep_buffer+0x824>)
 801edb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801edb4:	4a5a      	ldr	r2, [pc, #360]	; (801ef20 <st_prep_buffer+0x824>)
 801edb6:	62d3      	str	r3, [r2, #44]	; 0x2c
                    } else {// Mid-deceleration override ramp.
                        mm_remaining -= time_var * (prep.current_speed - 0.5f * speed_var);
                        prep.current_speed -= speed_var;
                    }
                    break;
 801edb8:	e11c      	b.n	801eff4 <st_prep_buffer+0x8f8>
                        mm_remaining -= time_var * (prep.current_speed - 0.5f * speed_var);
 801edba:	4b59      	ldr	r3, [pc, #356]	; (801ef20 <st_prep_buffer+0x824>)
 801edbc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801edc0:	edd7 7a06 	vldr	s15, [r7, #24]
 801edc4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801edc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801edcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801edd0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801edd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801edd8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801eddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ede0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                        prep.current_speed -= speed_var;
 801ede4:	4b4e      	ldr	r3, [pc, #312]	; (801ef20 <st_prep_buffer+0x824>)
 801ede6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801edea:	edd7 7a06 	vldr	s15, [r7, #24]
 801edee:	ee77 7a67 	vsub.f32	s15, s14, s15
 801edf2:	4b4b      	ldr	r3, [pc, #300]	; (801ef20 <st_prep_buffer+0x824>)
 801edf4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
                    break;
 801edf8:	e0fc      	b.n	801eff4 <st_prep_buffer+0x8f8>

                case Ramp_Accel:
                    // NOTE: Acceleration ramp only computes during first do-while loop.
                    speed_var = pl_block->acceleration * time_var;
 801edfa:	4b4a      	ldr	r3, [pc, #296]	; (801ef24 <st_prep_buffer+0x828>)
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801ee02:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801ee06:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee0a:	edc7 7a06 	vstr	s15, [r7, #24]
                    mm_remaining -= time_var * (prep.current_speed + 0.5f * speed_var);
 801ee0e:	4b44      	ldr	r3, [pc, #272]	; (801ef20 <st_prep_buffer+0x824>)
 801ee10:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801ee14:	edd7 7a06 	vldr	s15, [r7, #24]
 801ee18:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801ee1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ee20:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ee24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801ee28:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801ee30:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ee34:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 801ee38:	4b39      	ldr	r3, [pc, #228]	; (801ef20 <st_prep_buffer+0x824>)
 801ee3a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801ee3e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801ee42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ee46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee4a:	d52d      	bpl.n	801eea8 <st_prep_buffer+0x7ac>
                        // Acceleration-cruise, acceleration-deceleration ramp junction, or end of block.
                        mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 801ee4c:	4b34      	ldr	r3, [pc, #208]	; (801ef20 <st_prep_buffer+0x824>)
 801ee4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee50:	643b      	str	r3, [r7, #64]	; 0x40
                        time_var = 2.0f * (pl_block->millimeters - mm_remaining) / (prep.current_speed + prep.maximum_speed);
 801ee52:	4b34      	ldr	r3, [pc, #208]	; (801ef24 <st_prep_buffer+0x828>)
 801ee54:	681b      	ldr	r3, [r3, #0]
 801ee56:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801ee5a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801ee5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ee62:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801ee66:	4b2e      	ldr	r3, [pc, #184]	; (801ef20 <st_prep_buffer+0x824>)
 801ee68:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801ee6c:	4b2c      	ldr	r3, [pc, #176]	; (801ef20 <st_prep_buffer+0x824>)
 801ee6e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801ee72:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ee76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ee7a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
                        prep.ramp_type = mm_remaining == prep.decelerate_after ? Ramp_Decel : Ramp_Cruise;
 801ee7e:	4b28      	ldr	r3, [pc, #160]	; (801ef20 <st_prep_buffer+0x824>)
 801ee80:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801ee84:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801ee88:	eeb4 7a67 	vcmp.f32	s14, s15
 801ee8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee90:	d101      	bne.n	801ee96 <st_prep_buffer+0x79a>
 801ee92:	2202      	movs	r2, #2
 801ee94:	e000      	b.n	801ee98 <st_prep_buffer+0x79c>
 801ee96:	2201      	movs	r2, #1
 801ee98:	4b21      	ldr	r3, [pc, #132]	; (801ef20 <st_prep_buffer+0x824>)
 801ee9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        prep.current_speed = prep.maximum_speed;
 801ee9e:	4b20      	ldr	r3, [pc, #128]	; (801ef20 <st_prep_buffer+0x824>)
 801eea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eea2:	4a1f      	ldr	r2, [pc, #124]	; (801ef20 <st_prep_buffer+0x824>)
 801eea4:	62d3      	str	r3, [r2, #44]	; 0x2c
                    } else // Acceleration only.
                        prep.current_speed += speed_var;
                    break;
 801eea6:	e0a5      	b.n	801eff4 <st_prep_buffer+0x8f8>
                        prep.current_speed += speed_var;
 801eea8:	4b1d      	ldr	r3, [pc, #116]	; (801ef20 <st_prep_buffer+0x824>)
 801eeaa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801eeae:	edd7 7a06 	vldr	s15, [r7, #24]
 801eeb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801eeb6:	4b1a      	ldr	r3, [pc, #104]	; (801ef20 <st_prep_buffer+0x824>)
 801eeb8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
                    break;
 801eebc:	e09a      	b.n	801eff4 <st_prep_buffer+0x8f8>

                case Ramp_Cruise:
                    // NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
                    // NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
                    //   prevent this, simply enforce a minimum speed threshold in the planner.
                    mm_var = mm_remaining - prep.maximum_speed * time_var;
 801eebe:	4b18      	ldr	r3, [pc, #96]	; (801ef20 <st_prep_buffer+0x824>)
 801eec0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801eec4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801eec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eecc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801eed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801eed4:	edc7 7a05 	vstr	s15, [r7, #20]
                    if (mm_var < prep.decelerate_after) { // End of cruise.
 801eed8:	4b11      	ldr	r3, [pc, #68]	; (801ef20 <st_prep_buffer+0x824>)
 801eeda:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801eede:	ed97 7a05 	vldr	s14, [r7, #20]
 801eee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801eee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eeea:	d515      	bpl.n	801ef18 <st_prep_buffer+0x81c>
                        // Cruise-deceleration junction or end of block.
                        time_var = (mm_remaining - prep.decelerate_after) / prep.maximum_speed;
 801eeec:	4b0c      	ldr	r3, [pc, #48]	; (801ef20 <st_prep_buffer+0x824>)
 801eeee:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801eef2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801eef6:	ee77 6a67 	vsub.f32	s13, s14, s15
 801eefa:	4b09      	ldr	r3, [pc, #36]	; (801ef20 <st_prep_buffer+0x824>)
 801eefc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801ef00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ef04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
                        mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 801ef08:	4b05      	ldr	r3, [pc, #20]	; (801ef20 <st_prep_buffer+0x824>)
 801ef0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ef0c:	643b      	str	r3, [r7, #64]	; 0x40
                        prep.ramp_type = Ramp_Decel;
 801ef0e:	4b04      	ldr	r3, [pc, #16]	; (801ef20 <st_prep_buffer+0x824>)
 801ef10:	2202      	movs	r2, #2
 801ef12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    } else // Cruising only.
                        mm_remaining = mm_var;
                    break;
 801ef16:	e06d      	b.n	801eff4 <st_prep_buffer+0x8f8>
                        mm_remaining = mm_var;
 801ef18:	697b      	ldr	r3, [r7, #20]
 801ef1a:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 801ef1c:	e06a      	b.n	801eff4 <st_prep_buffer+0x8f8>
 801ef1e:	bf00      	nop
 801ef20:	200024fc 	.word	0x200024fc
 801ef24:	200024bc 	.word	0x200024bc
 801ef28:	20001520 	.word	0x20001520
 801ef2c:	200024a8 	.word	0x200024a8
 801ef30:	200024b4 	.word	0x200024b4
 801ef34:	200024c0 	.word	0x200024c0
 801ef38:	392ec33e 	.word	0x392ec33e

                default: // case Ramp_Decel:
                    // NOTE: mm_var used as a misc worker variable to prevent errors when near zero speed.
                    speed_var = pl_block->acceleration * time_var; // Used as delta speed (mm/min)
 801ef3c:	4ba9      	ldr	r3, [pc, #676]	; (801f1e4 <st_prep_buffer+0xae8>)
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801ef44:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801ef48:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef4c:	edc7 7a06 	vstr	s15, [r7, #24]
                    if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 801ef50:	4ba5      	ldr	r3, [pc, #660]	; (801f1e8 <st_prep_buffer+0xaec>)
 801ef52:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801ef56:	ed97 7a06 	vldr	s14, [r7, #24]
 801ef5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ef5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef62:	d52b      	bpl.n	801efbc <st_prep_buffer+0x8c0>
                        // Compute distance from end of segment to end of block.
                        mm_var = mm_remaining - time_var * (prep.current_speed - 0.5f * speed_var); // (mm)
 801ef64:	4ba0      	ldr	r3, [pc, #640]	; (801f1e8 <st_prep_buffer+0xaec>)
 801ef66:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801ef6a:	edd7 7a06 	vldr	s15, [r7, #24]
 801ef6e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801ef72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ef76:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ef7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801ef7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef82:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801ef86:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ef8a:	edc7 7a05 	vstr	s15, [r7, #20]
                        if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 801ef8e:	4b96      	ldr	r3, [pc, #600]	; (801f1e8 <st_prep_buffer+0xaec>)
 801ef90:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801ef94:	ed97 7a05 	vldr	s14, [r7, #20]
 801ef98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efa0:	dd0c      	ble.n	801efbc <st_prep_buffer+0x8c0>
                            mm_remaining = mm_var;
 801efa2:	697b      	ldr	r3, [r7, #20]
 801efa4:	643b      	str	r3, [r7, #64]	; 0x40
                            prep.current_speed -= speed_var;
 801efa6:	4b90      	ldr	r3, [pc, #576]	; (801f1e8 <st_prep_buffer+0xaec>)
 801efa8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801efac:	edd7 7a06 	vldr	s15, [r7, #24]
 801efb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801efb4:	4b8c      	ldr	r3, [pc, #560]	; (801f1e8 <st_prep_buffer+0xaec>)
 801efb6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
                            break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 801efba:	e01b      	b.n	801eff4 <st_prep_buffer+0x8f8>
                        }
                    }
                    // Otherwise, at end of block or end of forced-deceleration.
                    time_var = 2.0f * (mm_remaining - prep.mm_complete) / (prep.current_speed + prep.exit_speed);
 801efbc:	4b8a      	ldr	r3, [pc, #552]	; (801f1e8 <st_prep_buffer+0xaec>)
 801efbe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801efc2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801efc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801efca:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801efce:	4b86      	ldr	r3, [pc, #536]	; (801f1e8 <st_prep_buffer+0xaec>)
 801efd0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801efd4:	4b84      	ldr	r3, [pc, #528]	; (801f1e8 <st_prep_buffer+0xaec>)
 801efd6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801efda:	ee37 7a27 	vadd.f32	s14, s14, s15
 801efde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801efe2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
                    mm_remaining = prep.mm_complete;
 801efe6:	4b80      	ldr	r3, [pc, #512]	; (801f1e8 <st_prep_buffer+0xaec>)
 801efe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801efea:	643b      	str	r3, [r7, #64]	; 0x40
                    prep.current_speed = prep.exit_speed;
 801efec:	4b7e      	ldr	r3, [pc, #504]	; (801f1e8 <st_prep_buffer+0xaec>)
 801efee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eff0:	4a7d      	ldr	r2, [pc, #500]	; (801f1e8 <st_prep_buffer+0xaec>)
 801eff2:	62d3      	str	r3, [r2, #44]	; 0x2c
            }

            dt += time_var; // Add computed ramp time to total segment time.
 801eff4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801eff8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801effc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f000:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

            if (dt < dt_max)
 801f004:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801f008:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801f00c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f014:	d508      	bpl.n	801f028 <st_prep_buffer+0x92c>
                time_var = dt_max - dt;// **Incomplete** At ramp junction.
 801f016:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801f01a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f01e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f022:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 801f026:	e019      	b.n	801f05c <st_prep_buffer+0x960>
            else {
                if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 801f028:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801f02c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801f030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f038:	dc00      	bgt.n	801f03c <st_prep_buffer+0x940>
                    // Increase segment time to ensure at least one step in segment. Override and loop
                    // through distance calculations until minimum_mm or mm_complete.
                    dt_max += DT_SEGMENT;
                    time_var = dt_max - dt;
                } else
                    break; // **Complete** Exit loop. Segment execution time maxed.
 801f03a:	e01a      	b.n	801f072 <st_prep_buffer+0x976>
                    dt_max += DT_SEGMENT;
 801f03c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801f040:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801f1ec <st_prep_buffer+0xaf0>
 801f044:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f048:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                    time_var = dt_max - dt;
 801f04c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801f050:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f054:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f058:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            }

        } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 801f05c:	4b62      	ldr	r3, [pc, #392]	; (801f1e8 <st_prep_buffer+0xaec>)
 801f05e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801f062:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801f066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f06e:	f73f ae5b 	bgt.w	801ed28 <st_prep_buffer+0x62c>

        /* -----------------------------------------------------------------------------------
           Compute spindle spindle speed for step segment
        */

        if (sys.step_control.update_spindle_rpm || st_prep_block->dynamic_rpm) {
 801f072:	4b5f      	ldr	r3, [pc, #380]	; (801f1f0 <st_prep_buffer+0xaf4>)
 801f074:	7e1b      	ldrb	r3, [r3, #24]
 801f076:	f003 0308 	and.w	r3, r3, #8
 801f07a:	b2db      	uxtb	r3, r3
 801f07c:	2b00      	cmp	r3, #0
 801f07e:	d106      	bne.n	801f08e <st_prep_buffer+0x992>
 801f080:	4b5c      	ldr	r3, [pc, #368]	; (801f1f4 <st_prep_buffer+0xaf8>)
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f088:	2b00      	cmp	r3, #0
 801f08a:	f000 80c7 	beq.w	801f21c <st_prep_buffer+0xb20>

            float rpm;

            st_prep_block->spindle = pl_block->spindle.hal;
 801f08e:	4b55      	ldr	r3, [pc, #340]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f090:	681a      	ldr	r2, [r3, #0]
 801f092:	4b58      	ldr	r3, [pc, #352]	; (801f1f4 <st_prep_buffer+0xaf8>)
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801f098:	635a      	str	r2, [r3, #52]	; 0x34

            if (pl_block->spindle.state.on) {
 801f09a:	4b52      	ldr	r3, [pc, #328]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f09c:	681b      	ldr	r3, [r3, #0]
 801f09e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f0a2:	f003 0301 	and.w	r3, r3, #1
 801f0a6:	b2db      	uxtb	r3, r3
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d06d      	beq.n	801f188 <st_prep_buffer+0xa8c>
                if(pl_block->spindle.css) {
 801f0ac:	4b4d      	ldr	r3, [pc, #308]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d034      	beq.n	801f120 <st_prep_buffer+0xa24>
                    float npos = (float)(pl_block->step_event_count - prep.steps_remaining) / (float)pl_block->step_event_count;
 801f0b6:	4b4b      	ldr	r3, [pc, #300]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	68da      	ldr	r2, [r3, #12]
 801f0bc:	4b4a      	ldr	r3, [pc, #296]	; (801f1e8 <st_prep_buffer+0xaec>)
 801f0be:	689b      	ldr	r3, [r3, #8]
 801f0c0:	1ad3      	subs	r3, r2, r3
 801f0c2:	ee07 3a90 	vmov	s15, r3
 801f0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f0ca:	4b46      	ldr	r3, [pc, #280]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	68db      	ldr	r3, [r3, #12]
 801f0d0:	ee07 3a90 	vmov	s15, r3
 801f0d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f0d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f0dc:	edc7 7a04 	vstr	s15, [r7, #16]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801f0e0:	4b40      	ldr	r3, [pc, #256]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f0e2:	681b      	ldr	r3, [r3, #0]
 801f0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                                           pl_block->spindle.rpm + pl_block->spindle.css->delta_rpm * npos,
 801f0e6:	4b3f      	ldr	r3, [pc, #252]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 801f0ee:	4b3d      	ldr	r3, [pc, #244]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f0f4:	edd3 6a02 	vldr	s13, [r3, #8]
 801f0f8:	edd7 7a04 	vldr	s15, [r7, #16]
 801f0fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801f100:	ee77 7a27 	vadd.f32	s15, s14, s15
                                            pl_block->spindle.hal->param->override_pct);
 801f104:	4b37      	ldr	r3, [pc, #220]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f10a:	685b      	ldr	r3, [r3, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801f10c:	68db      	ldr	r3, [r3, #12]
 801f10e:	4619      	mov	r1, r3
 801f110:	eeb0 0a67 	vmov.f32	s0, s15
 801f114:	4610      	mov	r0, r2
 801f116:	f7fd fa0f 	bl	801c538 <spindle_set_rpm>
 801f11a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 801f11e:	e03c      	b.n	801f19a <st_prep_buffer+0xa9e>
                } else {
                    // NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.
                    // If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_RPM_OVERRIDE)
                    // but this would be instantaneous only and during a motion. May not matter at all.
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801f120:	4b30      	ldr	r3, [pc, #192]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                                           pl_block->condition.is_rpm_rate_adjusted && !pl_block->condition.is_laser_ppi_mode
 801f126:	4b2f      	ldr	r3, [pc, #188]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	7d1b      	ldrb	r3, [r3, #20]
 801f12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f130:	b2db      	uxtb	r3, r3
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801f132:	2b00      	cmp	r3, #0
 801f134:	d016      	beq.n	801f164 <st_prep_buffer+0xa68>
                                           pl_block->condition.is_rpm_rate_adjusted && !pl_block->condition.is_laser_ppi_mode
 801f136:	4b2b      	ldr	r3, [pc, #172]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	7d1b      	ldrb	r3, [r3, #20]
 801f13c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801f140:	b2db      	uxtb	r3, r3
 801f142:	2b00      	cmp	r3, #0
 801f144:	d10e      	bne.n	801f164 <st_prep_buffer+0xa68>
                                            ? pl_block->spindle.rpm * prep.current_speed * prep.inv_feedrate
 801f146:	4b27      	ldr	r3, [pc, #156]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 801f14e:	4b26      	ldr	r3, [pc, #152]	; (801f1e8 <st_prep_buffer+0xaec>)
 801f150:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801f154:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f158:	4b23      	ldr	r3, [pc, #140]	; (801f1e8 <st_prep_buffer+0xaec>)
 801f15a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801f15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f162:	e003      	b.n	801f16c <st_prep_buffer+0xa70>
                                            : pl_block->spindle.rpm, pl_block->spindle.hal->param->override_pct);
 801f164:	4b1f      	ldr	r3, [pc, #124]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f166:	681b      	ldr	r3, [r3, #0]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801f168:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
                                            : pl_block->spindle.rpm, pl_block->spindle.hal->param->override_pct);
 801f16c:	4b1d      	ldr	r3, [pc, #116]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f16e:	681b      	ldr	r3, [r3, #0]
 801f170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f172:	685b      	ldr	r3, [r3, #4]
                    rpm = spindle_set_rpm(pl_block->spindle.hal,
 801f174:	68db      	ldr	r3, [r3, #12]
 801f176:	4619      	mov	r1, r3
 801f178:	eeb0 0a67 	vmov.f32	s0, s15
 801f17c:	4610      	mov	r0, r2
 801f17e:	f7fd f9db 	bl	801c538 <spindle_set_rpm>
 801f182:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
 801f186:	e008      	b.n	801f19a <st_prep_buffer+0xa9e>
                }
            } else
                pl_block->spindle.hal->param->rpm = rpm = 0.0f;
 801f188:	f04f 0300 	mov.w	r3, #0
 801f18c:	63bb      	str	r3, [r7, #56]	; 0x38
 801f18e:	4b15      	ldr	r3, [pc, #84]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f194:	685b      	ldr	r3, [r3, #4]
 801f196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f198:	601a      	str	r2, [r3, #0]

            if(rpm != prep.current_spindle_rpm) {
 801f19a:	4b13      	ldr	r3, [pc, #76]	; (801f1e8 <st_prep_buffer+0xaec>)
 801f19c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801f1a0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801f1a4:	eeb4 7a67 	vcmp.f32	s14, s15
 801f1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1ac:	d036      	beq.n	801f21c <st_prep_buffer+0xb20>
                if(pl_block->spindle.hal->get_pwm != NULL) {
 801f1ae:	4b0d      	ldr	r3, [pc, #52]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d01e      	beq.n	801f1f8 <st_prep_buffer+0xafc>
                    prep.current_spindle_rpm = rpm;
 801f1ba:	4a0b      	ldr	r2, [pc, #44]	; (801f1e8 <st_prep_buffer+0xaec>)
 801f1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1be:	64d3      	str	r3, [r2, #76]	; 0x4c
                    prep_segment->update_pwm = pl_block->spindle.hal->update_pwm;
 801f1c0:	4b08      	ldr	r3, [pc, #32]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f1c8:	69fb      	ldr	r3, [r7, #28]
 801f1ca:	62da      	str	r2, [r3, #44]	; 0x2c
                    prep_segment->spindle_pwm = pl_block->spindle.hal->get_pwm(rpm);
 801f1cc:	4b05      	ldr	r3, [pc, #20]	; (801f1e4 <st_prep_buffer+0xae8>)
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1d4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801f1d8:	4798      	blx	r3
 801f1da:	4602      	mov	r2, r0
 801f1dc:	69fb      	ldr	r3, [r7, #28]
 801f1de:	61da      	str	r2, [r3, #28]
 801f1e0:	e017      	b.n	801f212 <st_prep_buffer+0xb16>
 801f1e2:	bf00      	nop
 801f1e4:	200024bc 	.word	0x200024bc
 801f1e8:	200024fc 	.word	0x200024fc
 801f1ec:	392ec33e 	.word	0x392ec33e
 801f1f0:	20001520 	.word	0x20001520
 801f1f4:	200024c0 	.word	0x200024c0
                } else {
                    prep_segment->update_rpm = pl_block->spindle.hal->update_rpm;
 801f1f8:	4ba7      	ldr	r3, [pc, #668]	; (801f498 <st_prep_buffer+0xd9c>)
 801f1fa:	681b      	ldr	r3, [r3, #0]
 801f1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f200:	69fb      	ldr	r3, [r7, #28]
 801f202:	631a      	str	r2, [r3, #48]	; 0x30
                    prep.current_spindle_rpm = prep_segment->spindle_rpm = rpm;
 801f204:	69fb      	ldr	r3, [r7, #28]
 801f206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f208:	621a      	str	r2, [r3, #32]
 801f20a:	69fb      	ldr	r3, [r7, #28]
 801f20c:	6a1b      	ldr	r3, [r3, #32]
 801f20e:	4aa3      	ldr	r2, [pc, #652]	; (801f49c <st_prep_buffer+0xda0>)
 801f210:	64d3      	str	r3, [r2, #76]	; 0x4c
                }
                sys.step_control.update_spindle_rpm = Off;
 801f212:	4aa3      	ldr	r2, [pc, #652]	; (801f4a0 <st_prep_buffer+0xda4>)
 801f214:	7e13      	ldrb	r3, [r2, #24]
 801f216:	f36f 03c3 	bfc	r3, #3, #1
 801f21a:	7613      	strb	r3, [r2, #24]
           However, since floats have only 7.2 significant digits, long moves with extremely
           high step counts can exceed the precision of floats, which can lead to lost steps.
           Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
           supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
        */
        float step_dist_remaining = prep.steps_per_mm * mm_remaining; // Convert mm_remaining to steps
 801f21c:	4b9f      	ldr	r3, [pc, #636]	; (801f49c <st_prep_buffer+0xda0>)
 801f21e:	edd3 7a03 	vldr	s15, [r3, #12]
 801f222:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801f226:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f22a:	edc7 7a03 	vstr	s15, [r7, #12]
        uint32_t n_steps_remaining = (uint32_t)ceilf(step_dist_remaining); // Round-up current steps remaining
 801f22e:	ed97 0a03 	vldr	s0, [r7, #12]
 801f232:	f007 fe4d 	bl	8026ed0 <ceilf>
 801f236:	eef0 7a40 	vmov.f32	s15, s0
 801f23a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f23e:	ee17 3a90 	vmov	r3, s15
 801f242:	60bb      	str	r3, [r7, #8]

        prep_segment->n_step = (uint_fast16_t)(prep.steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 801f244:	4b95      	ldr	r3, [pc, #596]	; (801f49c <st_prep_buffer+0xda0>)
 801f246:	689a      	ldr	r2, [r3, #8]
 801f248:	68bb      	ldr	r3, [r7, #8]
 801f24a:	1ad2      	subs	r2, r2, r3
 801f24c:	69fb      	ldr	r3, [r7, #28]
 801f24e:	619a      	str	r2, [r3, #24]

        // Bail if we are at the end of a feed hold and don't have a step to execute.
        if (prep_segment->n_step == 0 && sys.step_control.execute_hold) {
 801f250:	69fb      	ldr	r3, [r7, #28]
 801f252:	699b      	ldr	r3, [r3, #24]
 801f254:	2b00      	cmp	r3, #0
 801f256:	d122      	bne.n	801f29e <st_prep_buffer+0xba2>
 801f258:	4b91      	ldr	r3, [pc, #580]	; (801f4a0 <st_prep_buffer+0xda4>)
 801f25a:	7e1b      	ldrb	r3, [r3, #24]
 801f25c:	f003 0302 	and.w	r3, r3, #2
 801f260:	b2db      	uxtb	r3, r3
 801f262:	2b00      	cmp	r3, #0
 801f264:	d01b      	beq.n	801f29e <st_prep_buffer+0xba2>
            // Less than one step to decelerate to zero speed, but already very close. AMASS
            // requires full steps to execute. So, just bail.
            sys.step_control.end_motion = On;
 801f266:	4a8e      	ldr	r2, [pc, #568]	; (801f4a0 <st_prep_buffer+0xda4>)
 801f268:	7e13      	ldrb	r3, [r2, #24]
 801f26a:	f043 0301 	orr.w	r3, r3, #1
 801f26e:	7613      	strb	r3, [r2, #24]
            if (settings.parking.flags.enabled && !prep.recalculate.parking)
 801f270:	4b8c      	ldr	r3, [pc, #560]	; (801f4a4 <st_prep_buffer+0xda8>)
 801f272:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801f276:	f003 0301 	and.w	r3, r3, #1
 801f27a:	b2db      	uxtb	r3, r3
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	f000 8105 	beq.w	801f48c <st_prep_buffer+0xd90>
 801f282:	4b86      	ldr	r3, [pc, #536]	; (801f49c <st_prep_buffer+0xda0>)
 801f284:	781b      	ldrb	r3, [r3, #0]
 801f286:	f003 0304 	and.w	r3, r3, #4
 801f28a:	b2db      	uxtb	r3, r3
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	f040 80fd 	bne.w	801f48c <st_prep_buffer+0xd90>
                prep.recalculate.hold_partial_block = On;
 801f292:	4a82      	ldr	r2, [pc, #520]	; (801f49c <st_prep_buffer+0xda0>)
 801f294:	7813      	ldrb	r3, [r2, #0]
 801f296:	f043 0302 	orr.w	r3, r3, #2
 801f29a:	7013      	strb	r3, [r2, #0]
            return; // Segment not generated, but current step data still retained.
 801f29c:	e0f6      	b.n	801f48c <st_prep_buffer+0xd90>
        // compensate, we track the time to execute the previous segment's partial step and simply
        // apply it with the partial step distance to the current segment, so that it minutely
        // adjusts the whole segment rate to keep step output exact. These rate adjustments are
        // typically very small and do not adversely effect performance, but ensures that Grbl
        // outputs the exact acceleration and velocity profiles as computed by the planner.
        dt += prep.dt_remainder; // Apply previous segment partial step execute time
 801f29e:	4b7f      	ldr	r3, [pc, #508]	; (801f49c <st_prep_buffer+0xda0>)
 801f2a0:	edd3 7a01 	vldr	s15, [r3, #4]
 801f2a4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801f2a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f2ac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        float inv_rate = dt / ((float)prep.steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 801f2b0:	4b7a      	ldr	r3, [pc, #488]	; (801f49c <st_prep_buffer+0xda0>)
 801f2b2:	689b      	ldr	r3, [r3, #8]
 801f2b4:	ee07 3a90 	vmov	s15, r3
 801f2b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f2bc:	edd7 7a03 	vldr	s15, [r7, #12]
 801f2c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f2c4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801f2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f2cc:	edc7 7a01 	vstr	s15, [r7, #4]

        // Compute timer ticks per step for the prepped segment.
        uint32_t cycles = (uint32_t)ceilf(cycles_per_min * inv_rate); // (cycles/step)
 801f2d0:	4b75      	ldr	r3, [pc, #468]	; (801f4a8 <st_prep_buffer+0xdac>)
 801f2d2:	ed93 7a00 	vldr	s14, [r3]
 801f2d6:	edd7 7a01 	vldr	s15, [r7, #4]
 801f2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2de:	eeb0 0a67 	vmov.f32	s0, s15
 801f2e2:	f007 fdf5 	bl	8026ed0 <ceilf>
 801f2e6:	eef0 7a40 	vmov.f32	s15, s0
 801f2ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f2ee:	ee17 3a90 	vmov	r3, s15
 801f2f2:	637b      	str	r3, [r7, #52]	; 0x34

        // Record end position of segment relative to block if spindle synchronized motion
        if((prep_segment->spindle_sync = pl_block->spindle.state.synchronized)) {
 801f2f4:	4b68      	ldr	r3, [pc, #416]	; (801f498 <st_prep_buffer+0xd9c>)
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f2fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801f300:	b2db      	uxtb	r3, r3
 801f302:	2b00      	cmp	r3, #0
 801f304:	bf14      	ite	ne
 801f306:	2301      	movne	r3, #1
 801f308:	2300      	moveq	r3, #0
 801f30a:	b2da      	uxtb	r2, r3
 801f30c:	69fb      	ldr	r3, [r7, #28]
 801f30e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801f312:	69fb      	ldr	r3, [r7, #28]
 801f314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801f318:	2b00      	cmp	r3, #0
 801f31a:	d01d      	beq.n	801f358 <st_prep_buffer+0xc5c>
            prep.target_position += dt * prep.target_feed;
 801f31c:	4b5f      	ldr	r3, [pc, #380]	; (801f49c <st_prep_buffer+0xda0>)
 801f31e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 801f322:	4b5e      	ldr	r3, [pc, #376]	; (801f49c <st_prep_buffer+0xda0>)
 801f324:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 801f328:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f32c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f330:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f334:	4b59      	ldr	r3, [pc, #356]	; (801f49c <st_prep_buffer+0xda0>)
 801f336:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
            prep_segment->cruising = prep.ramp_type == Ramp_Cruise;
 801f33a:	4b58      	ldr	r3, [pc, #352]	; (801f49c <st_prep_buffer+0xda0>)
 801f33c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801f340:	2b01      	cmp	r3, #1
 801f342:	bf0c      	ite	eq
 801f344:	2301      	moveq	r3, #1
 801f346:	2300      	movne	r3, #0
 801f348:	b2da      	uxtb	r2, r3
 801f34a:	69fb      	ldr	r3, [r7, #28]
 801f34c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
            prep_segment->target_position = prep.target_position; //st_prep_block->millimeters - pl_block->millimeters;
 801f350:	4b52      	ldr	r3, [pc, #328]	; (801f49c <st_prep_buffer+0xda0>)
 801f352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f354:	69fb      	ldr	r3, [r7, #28]
 801f356:	615a      	str	r2, [r3, #20]
        }

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // Compute step timing and multi-axis smoothing level.
        // NOTE: AMASS overdrives the timer with each level, so only one prescalar is required.
        if (cycles < amass.level_1)
 801f358:	4b54      	ldr	r3, [pc, #336]	; (801f4ac <st_prep_buffer+0xdb0>)
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f35e:	429a      	cmp	r2, r3
 801f360:	d203      	bcs.n	801f36a <st_prep_buffer+0xc6e>
            prep_segment->amass_level = 0;
 801f362:	69fb      	ldr	r3, [r7, #28]
 801f364:	2200      	movs	r2, #0
 801f366:	629a      	str	r2, [r3, #40]	; 0x28
 801f368:	e01d      	b.n	801f3a6 <st_prep_buffer+0xcaa>
        else {
            prep_segment->amass_level = cycles < amass.level_2 ? 1 : (cycles < amass.level_3 ? 2 : 3);
 801f36a:	4b50      	ldr	r3, [pc, #320]	; (801f4ac <st_prep_buffer+0xdb0>)
 801f36c:	685b      	ldr	r3, [r3, #4]
 801f36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f370:	429a      	cmp	r2, r3
 801f372:	d308      	bcc.n	801f386 <st_prep_buffer+0xc8a>
 801f374:	4b4d      	ldr	r3, [pc, #308]	; (801f4ac <st_prep_buffer+0xdb0>)
 801f376:	689b      	ldr	r3, [r3, #8]
 801f378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f37a:	429a      	cmp	r2, r3
 801f37c:	d201      	bcs.n	801f382 <st_prep_buffer+0xc86>
 801f37e:	2302      	movs	r3, #2
 801f380:	e002      	b.n	801f388 <st_prep_buffer+0xc8c>
 801f382:	2303      	movs	r3, #3
 801f384:	e000      	b.n	801f388 <st_prep_buffer+0xc8c>
 801f386:	2301      	movs	r3, #1
 801f388:	69fa      	ldr	r2, [r7, #28]
 801f38a:	6293      	str	r3, [r2, #40]	; 0x28
            cycles >>= prep_segment->amass_level;
 801f38c:	69fb      	ldr	r3, [r7, #28]
 801f38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f392:	fa22 f303 	lsr.w	r3, r2, r3
 801f396:	637b      	str	r3, [r7, #52]	; 0x34
            prep_segment->n_step <<= prep_segment->amass_level;
 801f398:	69fb      	ldr	r3, [r7, #28]
 801f39a:	699a      	ldr	r2, [r3, #24]
 801f39c:	69fb      	ldr	r3, [r7, #28]
 801f39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3a0:	409a      	lsls	r2, r3
 801f3a2:	69fb      	ldr	r3, [r7, #28]
 801f3a4:	619a      	str	r2, [r3, #24]
        }
      #endif

        prep_segment->cycles_per_tick = cycles;
 801f3a6:	69fb      	ldr	r3, [r7, #28]
 801f3a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f3aa:	60da      	str	r2, [r3, #12]
        prep_segment->current_rate = prep.current_speed;
 801f3ac:	4b3b      	ldr	r3, [pc, #236]	; (801f49c <st_prep_buffer+0xda0>)
 801f3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f3b0:	69fb      	ldr	r3, [r7, #28]
 801f3b2:	611a      	str	r2, [r3, #16]

        // Segment complete! Increment segment pointers, so stepper ISR can immediately execute it.
        segment_buffer_head = segment_next_head;
 801f3b4:	4b3e      	ldr	r3, [pc, #248]	; (801f4b0 <st_prep_buffer+0xdb4>)
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	4a3e      	ldr	r2, [pc, #248]	; (801f4b4 <st_prep_buffer+0xdb8>)
 801f3ba:	6013      	str	r3, [r2, #0]
        segment_next_head = segment_next_head->next;
 801f3bc:	4b3c      	ldr	r3, [pc, #240]	; (801f4b0 <st_prep_buffer+0xdb4>)
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	685b      	ldr	r3, [r3, #4]
 801f3c2:	4a3b      	ldr	r2, [pc, #236]	; (801f4b0 <st_prep_buffer+0xdb4>)
 801f3c4:	6013      	str	r3, [r2, #0]

        // Update the appropriate planner and segment data.
        pl_block->millimeters = mm_remaining;
 801f3c6:	4b34      	ldr	r3, [pc, #208]	; (801f498 <st_prep_buffer+0xd9c>)
 801f3c8:	681b      	ldr	r3, [r3, #0]
 801f3ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f3cc:	629a      	str	r2, [r3, #40]	; 0x28
        prep.steps_remaining = n_steps_remaining;
 801f3ce:	4a33      	ldr	r2, [pc, #204]	; (801f49c <st_prep_buffer+0xda0>)
 801f3d0:	68bb      	ldr	r3, [r7, #8]
 801f3d2:	6093      	str	r3, [r2, #8]
        prep.dt_remainder = ((float)n_steps_remaining - step_dist_remaining) * inv_rate;
 801f3d4:	68bb      	ldr	r3, [r7, #8]
 801f3d6:	ee07 3a90 	vmov	s15, r3
 801f3da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f3de:	edd7 7a03 	vldr	s15, [r7, #12]
 801f3e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f3e6:	edd7 7a01 	vldr	s15, [r7, #4]
 801f3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f3ee:	4b2b      	ldr	r3, [pc, #172]	; (801f49c <st_prep_buffer+0xda0>)
 801f3f0:	edc3 7a01 	vstr	s15, [r3, #4]

        // Check for exit conditions and flag to load next planner block.
        if (mm_remaining <= prep.mm_complete) {
 801f3f4:	4b29      	ldr	r3, [pc, #164]	; (801f49c <st_prep_buffer+0xda0>)
 801f3f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801f3fa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801f3fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f406:	d900      	bls.n	801f40a <st_prep_buffer+0xd0e>
 801f408:	e032      	b.n	801f470 <st_prep_buffer+0xd74>

            // End of planner block or forced-termination. No more distance to be executed.
            if (mm_remaining > 0.0f) { // At end of forced-termination.
 801f40a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801f40e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f416:	dd19      	ble.n	801f44c <st_prep_buffer+0xd50>
                // Reset prep parameters for resuming and then bail. Allow the stepper ISR to complete
                // the segment queue, where realtime protocol will set new state upon receiving the
                // cycle stop flag from the ISR. Prep_segment is blocked until then.
                sys.step_control.end_motion = On;
 801f418:	4a21      	ldr	r2, [pc, #132]	; (801f4a0 <st_prep_buffer+0xda4>)
 801f41a:	7e13      	ldrb	r3, [r2, #24]
 801f41c:	f043 0301 	orr.w	r3, r3, #1
 801f420:	7613      	strb	r3, [r2, #24]
                if (settings.parking.flags.enabled && !prep.recalculate.parking)
 801f422:	4b20      	ldr	r3, [pc, #128]	; (801f4a4 <st_prep_buffer+0xda8>)
 801f424:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 801f428:	f003 0301 	and.w	r3, r3, #1
 801f42c:	b2db      	uxtb	r3, r3
 801f42e:	2b00      	cmp	r3, #0
 801f430:	d02e      	beq.n	801f490 <st_prep_buffer+0xd94>
 801f432:	4b1a      	ldr	r3, [pc, #104]	; (801f49c <st_prep_buffer+0xda0>)
 801f434:	781b      	ldrb	r3, [r3, #0]
 801f436:	f003 0304 	and.w	r3, r3, #4
 801f43a:	b2db      	uxtb	r3, r3
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	d127      	bne.n	801f490 <st_prep_buffer+0xd94>
                    prep.recalculate.hold_partial_block = On;
 801f440:	4a16      	ldr	r2, [pc, #88]	; (801f49c <st_prep_buffer+0xda0>)
 801f442:	7813      	ldrb	r3, [r2, #0]
 801f444:	f043 0302 	orr.w	r3, r3, #2
 801f448:	7013      	strb	r3, [r2, #0]
                return; // Bail!
 801f44a:	e021      	b.n	801f490 <st_prep_buffer+0xd94>
            } else { // End of planner block
                // The planner block is complete. All steps are set to be executed in the segment buffer.
                if (sys.step_control.execute_sys_motion) {
 801f44c:	4b14      	ldr	r3, [pc, #80]	; (801f4a0 <st_prep_buffer+0xda4>)
 801f44e:	7e1b      	ldrb	r3, [r3, #24]
 801f450:	f003 0304 	and.w	r3, r3, #4
 801f454:	b2db      	uxtb	r3, r3
 801f456:	2b00      	cmp	r3, #0
 801f458:	d005      	beq.n	801f466 <st_prep_buffer+0xd6a>
                    sys.step_control.end_motion = On;
 801f45a:	4a11      	ldr	r2, [pc, #68]	; (801f4a0 <st_prep_buffer+0xda4>)
 801f45c:	7e13      	ldrb	r3, [r2, #24]
 801f45e:	f043 0301 	orr.w	r3, r3, #1
 801f462:	7613      	strb	r3, [r2, #24]
                    return;
 801f464:	e015      	b.n	801f492 <st_prep_buffer+0xd96>
                }
                pl_block = NULL; // Set pointer to indicate check and load next planner block.
 801f466:	4b0c      	ldr	r3, [pc, #48]	; (801f498 <st_prep_buffer+0xd9c>)
 801f468:	2200      	movs	r2, #0
 801f46a:	601a      	str	r2, [r3, #0]
                plan_discard_current_block();
 801f46c:	f7f1 ff60 	bl	8011330 <plan_discard_current_block>
    while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 801f470:	4b11      	ldr	r3, [pc, #68]	; (801f4b8 <st_prep_buffer+0xdbc>)
 801f472:	681a      	ldr	r2, [r3, #0]
 801f474:	4b0e      	ldr	r3, [pc, #56]	; (801f4b0 <st_prep_buffer+0xdb4>)
 801f476:	681b      	ldr	r3, [r3, #0]
 801f478:	429a      	cmp	r2, r3
 801f47a:	f47f a94c 	bne.w	801e716 <st_prep_buffer+0x1a>
 801f47e:	e008      	b.n	801f492 <st_prep_buffer+0xd96>
        return;
 801f480:	bf00      	nop
 801f482:	e006      	b.n	801f492 <st_prep_buffer+0xd96>
                return; // No planner blocks. Exit.
 801f484:	bf00      	nop
 801f486:	e004      	b.n	801f492 <st_prep_buffer+0xd96>
            return;
 801f488:	bf00      	nop
 801f48a:	e002      	b.n	801f492 <st_prep_buffer+0xd96>
            return; // Segment not generated, but current step data still retained.
 801f48c:	bf00      	nop
 801f48e:	e000      	b.n	801f492 <st_prep_buffer+0xd96>
                return; // Bail!
 801f490:	bf00      	nop
            }
        }
    }
}
 801f492:	3758      	adds	r7, #88	; 0x58
 801f494:	46bd      	mov	sp, r7
 801f496:	bd80      	pop	{r7, pc}
 801f498:	200024bc 	.word	0x200024bc
 801f49c:	200024fc 	.word	0x200024fc
 801f4a0:	20001520 	.word	0x20001520
 801f4a4:	20001cf0 	.word	0x20001cf0
 801f4a8:	200024ac 	.word	0x200024ac
 801f4ac:	20002498 	.word	0x20002498
 801f4b0:	200024b8 	.word	0x200024b8
 801f4b4:	200024b4 	.word	0x200024b4
 801f4b8:	200024b0 	.word	0x200024b0

0801f4bc <st_get_realtime_rate>:
// Called by realtime status reporting to fetch the current speed being executed. This value
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate (void)
{
 801f4bc:	b580      	push	{r7, lr}
 801f4be:	af00      	add	r7, sp, #0
    return state_get() & (STATE_CYCLE|STATE_HOMING|STATE_HOLD|STATE_JOG|STATE_SAFETY_DOOR)
 801f4c0:	f7fd fc2e 	bl	801cd20 <state_get>
 801f4c4:	4603      	mov	r3, r0
 801f4c6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
#ifdef KINEMATICS_API
            ? prep.current_speed * prep.rate_multiplier
#else
            ? prep.current_speed
#endif
            : 0.0f;
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	d002      	beq.n	801f4d4 <st_get_realtime_rate+0x18>
 801f4ce:	4b05      	ldr	r3, [pc, #20]	; (801f4e4 <st_get_realtime_rate+0x28>)
 801f4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4d2:	e001      	b.n	801f4d8 <st_get_realtime_rate+0x1c>
 801f4d4:	f04f 0300 	mov.w	r3, #0
 801f4d8:	ee07 3a90 	vmov	s15, r3
}
 801f4dc:	eeb0 0a67 	vmov.f32	s0, s15
 801f4e0:	bd80      	pop	{r7, pc}
 801f4e2:	bf00      	nop
 801f4e4:	200024fc 	.word	0x200024fc

0801f4e8 <stream_register_streams>:
static io_stream_details_t *streams = &null_streams;
static stream_connection_t base = {0}, mpg = {0}, *connections = &base;
static stream_write_char_ptr mpg_write_char = NULL;

void stream_register_streams (io_stream_details_t *details)
{
 801f4e8:	b480      	push	{r7}
 801f4ea:	b083      	sub	sp, #12
 801f4ec:	af00      	add	r7, sp, #0
 801f4ee:	6078      	str	r0, [r7, #4]
    if(details->n_streams) {
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	781b      	ldrb	r3, [r3, #0]
 801f4f4:	2b00      	cmp	r3, #0
 801f4f6:	d006      	beq.n	801f506 <stream_register_streams+0x1e>
        details->next = streams;
 801f4f8:	4b06      	ldr	r3, [pc, #24]	; (801f514 <stream_register_streams+0x2c>)
 801f4fa:	681a      	ldr	r2, [r3, #0]
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	609a      	str	r2, [r3, #8]
        streams = details;
 801f500:	4a04      	ldr	r2, [pc, #16]	; (801f514 <stream_register_streams+0x2c>)
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	6013      	str	r3, [r2, #0]
    }
}
 801f506:	bf00      	nop
 801f508:	370c      	adds	r7, #12
 801f50a:	46bd      	mov	sp, r7
 801f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f510:	4770      	bx	lr
 801f512:	bf00      	nop
 801f514:	2000050c 	.word	0x2000050c

0801f518 <stream_enumerate_streams>:

bool stream_enumerate_streams (stream_enumerate_callback_ptr callback)
{
 801f518:	b580      	push	{r7, lr}
 801f51a:	b086      	sub	sp, #24
 801f51c:	af00      	add	r7, sp, #0
 801f51e:	6078      	str	r0, [r7, #4]
    if(callback == NULL)
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	2b00      	cmp	r3, #0
 801f524:	d101      	bne.n	801f52a <stream_enumerate_streams+0x12>
        return false;
 801f526:	2300      	movs	r3, #0
 801f528:	e02d      	b.n	801f586 <stream_enumerate_streams+0x6e>

    bool claimed = false;
 801f52a:	2300      	movs	r3, #0
 801f52c:	75fb      	strb	r3, [r7, #23]
    io_stream_details_t *details = streams;
 801f52e:	4b18      	ldr	r3, [pc, #96]	; (801f590 <stream_enumerate_streams+0x78>)
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	613b      	str	r3, [r7, #16]

    while(details && !claimed) {
 801f534:	e01d      	b.n	801f572 <stream_enumerate_streams+0x5a>
        uint_fast8_t idx;
        for(idx = 0; idx < details->n_streams; idx++) {
 801f536:	2300      	movs	r3, #0
 801f538:	60fb      	str	r3, [r7, #12]
 801f53a:	e00f      	b.n	801f55c <stream_enumerate_streams+0x44>
            if((claimed = callback(&details->streams[idx])))
 801f53c:	693b      	ldr	r3, [r7, #16]
 801f53e:	685a      	ldr	r2, [r3, #4]
 801f540:	68fb      	ldr	r3, [r7, #12]
 801f542:	00db      	lsls	r3, r3, #3
 801f544:	441a      	add	r2, r3
 801f546:	687b      	ldr	r3, [r7, #4]
 801f548:	4610      	mov	r0, r2
 801f54a:	4798      	blx	r3
 801f54c:	4603      	mov	r3, r0
 801f54e:	75fb      	strb	r3, [r7, #23]
 801f550:	7dfb      	ldrb	r3, [r7, #23]
 801f552:	2b00      	cmp	r3, #0
 801f554:	d109      	bne.n	801f56a <stream_enumerate_streams+0x52>
        for(idx = 0; idx < details->n_streams; idx++) {
 801f556:	68fb      	ldr	r3, [r7, #12]
 801f558:	3301      	adds	r3, #1
 801f55a:	60fb      	str	r3, [r7, #12]
 801f55c:	693b      	ldr	r3, [r7, #16]
 801f55e:	781b      	ldrb	r3, [r3, #0]
 801f560:	461a      	mov	r2, r3
 801f562:	68fb      	ldr	r3, [r7, #12]
 801f564:	4293      	cmp	r3, r2
 801f566:	d3e9      	bcc.n	801f53c <stream_enumerate_streams+0x24>
 801f568:	e000      	b.n	801f56c <stream_enumerate_streams+0x54>
                break;
 801f56a:	bf00      	nop
        }
        details = details->next;
 801f56c:	693b      	ldr	r3, [r7, #16]
 801f56e:	689b      	ldr	r3, [r3, #8]
 801f570:	613b      	str	r3, [r7, #16]
    while(details && !claimed) {
 801f572:	693b      	ldr	r3, [r7, #16]
 801f574:	2b00      	cmp	r3, #0
 801f576:	d005      	beq.n	801f584 <stream_enumerate_streams+0x6c>
 801f578:	7dfb      	ldrb	r3, [r7, #23]
 801f57a:	f083 0301 	eor.w	r3, r3, #1
 801f57e:	b2db      	uxtb	r3, r3
 801f580:	2b00      	cmp	r3, #0
 801f582:	d1d8      	bne.n	801f536 <stream_enumerate_streams+0x1e>
    };

    return claimed;
 801f584:	7dfb      	ldrb	r3, [r7, #23]
}
 801f586:	4618      	mov	r0, r3
 801f588:	3718      	adds	r7, #24
 801f58a:	46bd      	mov	sp, r7
 801f58c:	bd80      	pop	{r7, pc}
 801f58e:	bf00      	nop
 801f590:	2000050c 	.word	0x2000050c

0801f594 <stream_tx_blocking>:

// called from stream drivers while tx is blocking, returns false to terminate
bool stream_tx_blocking (void)
{
 801f594:	b598      	push	{r3, r4, r7, lr}
 801f596:	af00      	add	r7, sp, #0
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.

    grbl.on_execute_realtime(state_get());
 801f598:	4b08      	ldr	r3, [pc, #32]	; (801f5bc <stream_tx_blocking+0x28>)
 801f59a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801f59c:	f7fd fbc0 	bl	801cd20 <state_get>
 801f5a0:	4603      	mov	r3, r0
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	47a0      	blx	r4

    return !(sys.rt_exec_state & EXEC_RESET);
 801f5a6:	4b06      	ldr	r3, [pc, #24]	; (801f5c0 <stream_tx_blocking+0x2c>)
 801f5a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f5aa:	f003 0320 	and.w	r3, r3, #32
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	bf0c      	ite	eq
 801f5b2:	2301      	moveq	r3, #1
 801f5b4:	2300      	movne	r3, #0
 801f5b6:	b2db      	uxtb	r3, r3
}
 801f5b8:	4618      	mov	r0, r3
 801f5ba:	bd98      	pop	{r3, r4, r7, pc}
 801f5bc:	200015b8 	.word	0x200015b8
 801f5c0:	20001520 	.word	0x20001520

0801f5c4 <stream_get_null>:

// "dummy" version of serialGetC
int16_t stream_get_null (void)
{
 801f5c4:	b480      	push	{r7}
 801f5c6:	af00      	add	r7, sp, #0
    return SERIAL_NO_DATA;
 801f5c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f5cc:	4618      	mov	r0, r3
 801f5ce:	46bd      	mov	sp, r7
 801f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5d4:	4770      	bx	lr
	...

0801f5d8 <await_toolchange_ack>:

ISR_CODE static bool ISR_FUNC(await_toolchange_ack)(char c)
{
 801f5d8:	b580      	push	{r7, lr}
 801f5da:	b082      	sub	sp, #8
 801f5dc:	af00      	add	r7, sp, #0
 801f5de:	4603      	mov	r3, r0
 801f5e0:	71fb      	strb	r3, [r7, #7]
    if(c == CMD_TOOL_ACK && !stream.rxbuffer->backup) {
 801f5e2:	79fb      	ldrb	r3, [r7, #7]
 801f5e4:	2ba3      	cmp	r3, #163	; 0xa3
 801f5e6:	d132      	bne.n	801f64e <await_toolchange_ack+0x76>
 801f5e8:	4b1f      	ldr	r3, [pc, #124]	; (801f668 <await_toolchange_ack+0x90>)
 801f5ea:	689b      	ldr	r3, [r3, #8]
 801f5ec:	7a9b      	ldrb	r3, [r3, #10]
 801f5ee:	f083 0301 	eor.w	r3, r3, #1
 801f5f2:	b2db      	uxtb	r3, r3
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d02a      	beq.n	801f64e <await_toolchange_ack+0x76>
        memcpy(&rxbackup, stream.rxbuffer, sizeof(stream_rx_buffer_t));
 801f5f8:	4b1b      	ldr	r3, [pc, #108]	; (801f668 <await_toolchange_ack+0x90>)
 801f5fa:	689b      	ldr	r3, [r3, #8]
 801f5fc:	f240 420c 	movw	r2, #1036	; 0x40c
 801f600:	4619      	mov	r1, r3
 801f602:	481a      	ldr	r0, [pc, #104]	; (801f66c <await_toolchange_ack+0x94>)
 801f604:	f006 fd78 	bl	80260f8 <memcpy>
        stream.rxbuffer->backup = true;
 801f608:	4b17      	ldr	r3, [pc, #92]	; (801f668 <await_toolchange_ack+0x90>)
 801f60a:	689b      	ldr	r3, [r3, #8]
 801f60c:	2201      	movs	r2, #1
 801f60e:	729a      	strb	r2, [r3, #10]
        stream.rxbuffer->tail = stream.rxbuffer->head;
 801f610:	4b15      	ldr	r3, [pc, #84]	; (801f668 <await_toolchange_ack+0x90>)
 801f612:	689a      	ldr	r2, [r3, #8]
 801f614:	4b14      	ldr	r3, [pc, #80]	; (801f668 <await_toolchange_ack+0x90>)
 801f616:	689b      	ldr	r3, [r3, #8]
 801f618:	6812      	ldr	r2, [r2, #0]
 801f61a:	605a      	str	r2, [r3, #4]
        hal.stream.read = stream.read; // restore normal input
 801f61c:	4b12      	ldr	r3, [pc, #72]	; (801f668 <await_toolchange_ack+0x90>)
 801f61e:	685b      	ldr	r3, [r3, #4]
 801f620:	4a13      	ldr	r2, [pc, #76]	; (801f670 <await_toolchange_ack+0x98>)
 801f622:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 801f626:	4b12      	ldr	r3, [pc, #72]	; (801f670 <await_toolchange_ack+0x98>)
 801f628:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801f62c:	4a0e      	ldr	r2, [pc, #56]	; (801f668 <await_toolchange_ack+0x90>)
 801f62e:	6812      	ldr	r2, [r2, #0]
 801f630:	4610      	mov	r0, r2
 801f632:	4798      	blx	r3
        stream.enqueue_realtime_command = NULL;
 801f634:	4b0c      	ldr	r3, [pc, #48]	; (801f668 <await_toolchange_ack+0x90>)
 801f636:	2200      	movs	r2, #0
 801f638:	601a      	str	r2, [r3, #0]
        if(grbl.on_toolchange_ack)
 801f63a:	4b0e      	ldr	r3, [pc, #56]	; (801f674 <await_toolchange_ack+0x9c>)
 801f63c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801f640:	2b00      	cmp	r3, #0
 801f642:	d00b      	beq.n	801f65c <await_toolchange_ack+0x84>
            grbl.on_toolchange_ack();
 801f644:	4b0b      	ldr	r3, [pc, #44]	; (801f674 <await_toolchange_ack+0x9c>)
 801f646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801f64a:	4798      	blx	r3
        if(grbl.on_toolchange_ack)
 801f64c:	e006      	b.n	801f65c <await_toolchange_ack+0x84>
    } else
        return stream.enqueue_realtime_command(c);
 801f64e:	4b06      	ldr	r3, [pc, #24]	; (801f668 <await_toolchange_ack+0x90>)
 801f650:	681b      	ldr	r3, [r3, #0]
 801f652:	79fa      	ldrb	r2, [r7, #7]
 801f654:	4610      	mov	r0, r2
 801f656:	4798      	blx	r3
 801f658:	4603      	mov	r3, r0
 801f65a:	e000      	b.n	801f65e <await_toolchange_ack+0x86>

    return true;
 801f65c:	2301      	movs	r3, #1
}
 801f65e:	4618      	mov	r0, r3
 801f660:	3708      	adds	r7, #8
 801f662:	46bd      	mov	sp, r7
 801f664:	bd80      	pop	{r7, pc}
 801f666:	bf00      	nop
 801f668:	20002958 	.word	0x20002958
 801f66c:	2000254c 	.word	0x2000254c
 801f670:	200016a0 	.word	0x200016a0
 801f674:	200015b8 	.word	0x200015b8

0801f678 <stream_rx_suspend>:

bool stream_rx_suspend (stream_rx_buffer_t *rxbuffer, bool suspend)
{
 801f678:	b580      	push	{r7, lr}
 801f67a:	b082      	sub	sp, #8
 801f67c:	af00      	add	r7, sp, #0
 801f67e:	6078      	str	r0, [r7, #4]
 801f680:	460b      	mov	r3, r1
 801f682:	70fb      	strb	r3, [r7, #3]
    if(suspend) {
 801f684:	78fb      	ldrb	r3, [r7, #3]
 801f686:	2b00      	cmp	r3, #0
 801f688:	d018      	beq.n	801f6bc <stream_rx_suspend+0x44>
        if(stream.rxbuffer == NULL) {
 801f68a:	4b25      	ldr	r3, [pc, #148]	; (801f720 <stream_rx_suspend+0xa8>)
 801f68c:	689b      	ldr	r3, [r3, #8]
 801f68e:	2b00      	cmp	r3, #0
 801f690:	d138      	bne.n	801f704 <stream_rx_suspend+0x8c>
            stream.rxbuffer = rxbuffer;
 801f692:	4a23      	ldr	r2, [pc, #140]	; (801f720 <stream_rx_suspend+0xa8>)
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	6093      	str	r3, [r2, #8]
            stream.read = hal.stream.read;
 801f698:	4b22      	ldr	r3, [pc, #136]	; (801f724 <stream_rx_suspend+0xac>)
 801f69a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801f69e:	4a20      	ldr	r2, [pc, #128]	; (801f720 <stream_rx_suspend+0xa8>)
 801f6a0:	6053      	str	r3, [r2, #4]
            stream.enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(await_toolchange_ack);
 801f6a2:	4b20      	ldr	r3, [pc, #128]	; (801f724 <stream_rx_suspend+0xac>)
 801f6a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801f6a8:	481f      	ldr	r0, [pc, #124]	; (801f728 <stream_rx_suspend+0xb0>)
 801f6aa:	4798      	blx	r3
 801f6ac:	4603      	mov	r3, r0
 801f6ae:	4a1c      	ldr	r2, [pc, #112]	; (801f720 <stream_rx_suspend+0xa8>)
 801f6b0:	6013      	str	r3, [r2, #0]
            hal.stream.read = stream_get_null;
 801f6b2:	4b1c      	ldr	r3, [pc, #112]	; (801f724 <stream_rx_suspend+0xac>)
 801f6b4:	4a1d      	ldr	r2, [pc, #116]	; (801f72c <stream_rx_suspend+0xb4>)
 801f6b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 801f6ba:	e023      	b.n	801f704 <stream_rx_suspend+0x8c>
        }
    } else if(stream.rxbuffer) {
 801f6bc:	4b18      	ldr	r3, [pc, #96]	; (801f720 <stream_rx_suspend+0xa8>)
 801f6be:	689b      	ldr	r3, [r3, #8]
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	d01f      	beq.n	801f704 <stream_rx_suspend+0x8c>
        if(rxbuffer->backup)
 801f6c4:	687b      	ldr	r3, [r7, #4]
 801f6c6:	7a9b      	ldrb	r3, [r3, #10]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d005      	beq.n	801f6d8 <stream_rx_suspend+0x60>
            memcpy(rxbuffer, &rxbackup, sizeof(stream_rx_buffer_t));
 801f6cc:	f240 420c 	movw	r2, #1036	; 0x40c
 801f6d0:	4917      	ldr	r1, [pc, #92]	; (801f730 <stream_rx_suspend+0xb8>)
 801f6d2:	6878      	ldr	r0, [r7, #4]
 801f6d4:	f006 fd10 	bl	80260f8 <memcpy>
        if(stream.enqueue_realtime_command) {
 801f6d8:	4b11      	ldr	r3, [pc, #68]	; (801f720 <stream_rx_suspend+0xa8>)
 801f6da:	681b      	ldr	r3, [r3, #0]
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d00e      	beq.n	801f6fe <stream_rx_suspend+0x86>
            hal.stream.read = stream.read; // restore normal input
 801f6e0:	4b0f      	ldr	r3, [pc, #60]	; (801f720 <stream_rx_suspend+0xa8>)
 801f6e2:	685b      	ldr	r3, [r3, #4]
 801f6e4:	4a0f      	ldr	r2, [pc, #60]	; (801f724 <stream_rx_suspend+0xac>)
 801f6e6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
            hal.stream.set_enqueue_rt_handler(stream.enqueue_realtime_command);
 801f6ea:	4b0e      	ldr	r3, [pc, #56]	; (801f724 <stream_rx_suspend+0xac>)
 801f6ec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801f6f0:	4a0b      	ldr	r2, [pc, #44]	; (801f720 <stream_rx_suspend+0xa8>)
 801f6f2:	6812      	ldr	r2, [r2, #0]
 801f6f4:	4610      	mov	r0, r2
 801f6f6:	4798      	blx	r3
            stream.enqueue_realtime_command = NULL;
 801f6f8:	4b09      	ldr	r3, [pc, #36]	; (801f720 <stream_rx_suspend+0xa8>)
 801f6fa:	2200      	movs	r2, #0
 801f6fc:	601a      	str	r2, [r3, #0]
        }
        stream.rxbuffer = NULL;
 801f6fe:	4b08      	ldr	r3, [pc, #32]	; (801f720 <stream_rx_suspend+0xa8>)
 801f700:	2200      	movs	r2, #0
 801f702:	609a      	str	r2, [r3, #8]
    }

    return rxbuffer->tail != rxbuffer->head;
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	685a      	ldr	r2, [r3, #4]
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	429a      	cmp	r2, r3
 801f70e:	bf14      	ite	ne
 801f710:	2301      	movne	r3, #1
 801f712:	2300      	moveq	r3, #0
 801f714:	b2db      	uxtb	r3, r3
}
 801f716:	4618      	mov	r0, r3
 801f718:	3708      	adds	r7, #8
 801f71a:	46bd      	mov	sp, r7
 801f71c:	bd80      	pop	{r7, pc}
 801f71e:	bf00      	nop
 801f720:	20002958 	.word	0x20002958
 801f724:	200016a0 	.word	0x200016a0
 801f728:	0801f5d9 	.word	0x0801f5d9
 801f72c:	0801f5c5 	.word	0x0801f5c5
 801f730:	2000254c 	.word	0x2000254c

0801f734 <stream_enqueue_realtime_command>:
{
    return false;
}

ISR_CODE bool ISR_FUNC(stream_enqueue_realtime_command)(char c)
{
 801f734:	b580      	push	{r7, lr}
 801f736:	b084      	sub	sp, #16
 801f738:	af00      	add	r7, sp, #0
 801f73a:	4603      	mov	r3, r0
 801f73c:	71fb      	strb	r3, [r7, #7]
	bool drop = hal.stream.enqueue_rt_command ? hal.stream.enqueue_rt_command(c) : protocol_enqueue_realtime_command(c);
 801f73e:	4b1c      	ldr	r3, [pc, #112]	; (801f7b0 <stream_enqueue_realtime_command+0x7c>)
 801f740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801f744:	2b00      	cmp	r3, #0
 801f746:	d00c      	beq.n	801f762 <stream_enqueue_realtime_command+0x2e>
 801f748:	4b19      	ldr	r3, [pc, #100]	; (801f7b0 <stream_enqueue_realtime_command+0x7c>)
 801f74a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801f74e:	79fa      	ldrb	r2, [r7, #7]
 801f750:	4610      	mov	r0, r2
 801f752:	4798      	blx	r3
 801f754:	4603      	mov	r3, r0
 801f756:	2b00      	cmp	r3, #0
 801f758:	bf14      	ite	ne
 801f75a:	2301      	movne	r3, #1
 801f75c:	2300      	moveq	r3, #0
 801f75e:	b2db      	uxtb	r3, r3
 801f760:	e009      	b.n	801f776 <stream_enqueue_realtime_command+0x42>
 801f762:	79fb      	ldrb	r3, [r7, #7]
 801f764:	4618      	mov	r0, r3
 801f766:	f7f3 fd19 	bl	801319c <protocol_enqueue_realtime_command>
 801f76a:	4603      	mov	r3, r0
 801f76c:	2b00      	cmp	r3, #0
 801f76e:	bf14      	ite	ne
 801f770:	2301      	movne	r3, #1
 801f772:	2300      	moveq	r3, #0
 801f774:	b2db      	uxtb	r3, r3
 801f776:	73fb      	strb	r3, [r7, #15]

    if(drop && (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))
 801f778:	7bfb      	ldrb	r3, [r7, #15]
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	d012      	beq.n	801f7a4 <stream_enqueue_realtime_command+0x70>
 801f77e:	79fb      	ldrb	r3, [r7, #7]
 801f780:	2b81      	cmp	r3, #129	; 0x81
 801f782:	d002      	beq.n	801f78a <stream_enqueue_realtime_command+0x56>
 801f784:	79fb      	ldrb	r3, [r7, #7]
 801f786:	2b7e      	cmp	r3, #126	; 0x7e
 801f788:	d10c      	bne.n	801f7a4 <stream_enqueue_realtime_command+0x70>
        sys.report.cycle_start = settings.status_report.pin_state;
 801f78a:	4b0a      	ldr	r3, [pc, #40]	; (801f7b4 <stream_enqueue_realtime_command+0x80>)
 801f78c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801f790:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801f794:	b2d9      	uxtb	r1, r3
 801f796:	4a08      	ldr	r2, [pc, #32]	; (801f7b8 <stream_enqueue_realtime_command+0x84>)
 801f798:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 801f79c:	f361 1386 	bfi	r3, r1, #6, #1
 801f7a0:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

    return drop;
 801f7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801f7a6:	4618      	mov	r0, r3
 801f7a8:	3710      	adds	r7, #16
 801f7aa:	46bd      	mov	sp, r7
 801f7ac:	bd80      	pop	{r7, pc}
 801f7ae:	bf00      	nop
 801f7b0:	200016a0 	.word	0x200016a0
 801f7b4:	20001cf0 	.word	0x20001cf0
 801f7b8:	20001520 	.word	0x20001520

0801f7bc <is_connected>:

static bool is_connected (void)
{
 801f7bc:	b480      	push	{r7}
 801f7be:	af00      	add	r7, sp, #0
    return true;
 801f7c0:	2301      	movs	r3, #1
}
 801f7c2:	4618      	mov	r0, r3
 801f7c4:	46bd      	mov	sp, r7
 801f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7ca:	4770      	bx	lr

0801f7cc <is_not_connected>:

static bool is_not_connected (void)
{
 801f7cc:	b480      	push	{r7}
 801f7ce:	af00      	add	r7, sp, #0
    return false;
 801f7d0:	2300      	movs	r3, #0
}
 801f7d2:	4618      	mov	r0, r3
 801f7d4:	46bd      	mov	sp, r7
 801f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7da:	4770      	bx	lr

0801f7dc <connection_is_up>:

static bool connection_is_up (io_stream_t *stream)
{
 801f7dc:	b580      	push	{r7, lr}
 801f7de:	b084      	sub	sp, #16
 801f7e0:	af00      	add	r7, sp, #0
 801f7e2:	6078      	str	r0, [r7, #4]
    if(stream->is_connected)
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	685b      	ldr	r3, [r3, #4]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d004      	beq.n	801f7f6 <connection_is_up+0x1a>
        return stream->is_connected();
 801f7ec:	687b      	ldr	r3, [r7, #4]
 801f7ee:	685b      	ldr	r3, [r3, #4]
 801f7f0:	4798      	blx	r3
 801f7f2:	4603      	mov	r3, r0
 801f7f4:	e035      	b.n	801f862 <connection_is_up+0x86>

    stream_connection_t *connection = connections;
 801f7f6:	4b1d      	ldr	r3, [pc, #116]	; (801f86c <connection_is_up+0x90>)
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	60fb      	str	r3, [r7, #12]

    while(connection) {
 801f7fc:	e02d      	b.n	801f85a <connection_is_up+0x7e>
        if(connection->stream->type == stream->type &&
 801f7fe:	68fb      	ldr	r3, [r7, #12]
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	781a      	ldrb	r2, [r3, #0]
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	781b      	ldrb	r3, [r3, #0]
 801f808:	429a      	cmp	r2, r3
 801f80a:	d123      	bne.n	801f854 <connection_is_up+0x78>
            connection->stream->instance == stream->instance &&
 801f80c:	68fb      	ldr	r3, [r7, #12]
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	785a      	ldrb	r2, [r3, #1]
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	785b      	ldrb	r3, [r3, #1]
        if(connection->stream->type == stream->type &&
 801f816:	429a      	cmp	r2, r3
 801f818:	d11c      	bne.n	801f854 <connection_is_up+0x78>
             connection->stream->state.is_usb == stream->state.is_usb) {
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	789b      	ldrb	r3, [r3, #2]
 801f820:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801f824:	b2da      	uxtb	r2, r3
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	789b      	ldrb	r3, [r3, #2]
 801f82a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801f82e:	b2db      	uxtb	r3, r3
            connection->stream->instance == stream->instance &&
 801f830:	429a      	cmp	r2, r3
 801f832:	d10f      	bne.n	801f854 <connection_is_up+0x78>

            if(connection->stream->state.is_usb)
 801f834:	68fb      	ldr	r3, [r7, #12]
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	789b      	ldrb	r3, [r3, #2]
 801f83a:	f003 0304 	and.w	r3, r3, #4
 801f83e:	b2db      	uxtb	r3, r3
 801f840:	2b00      	cmp	r3, #0
 801f842:	d002      	beq.n	801f84a <connection_is_up+0x6e>
                connection->is_up = is_not_connected;
 801f844:	68fb      	ldr	r3, [r7, #12]
 801f846:	4a0a      	ldr	r2, [pc, #40]	; (801f870 <connection_is_up+0x94>)
 801f848:	605a      	str	r2, [r3, #4]

            return connection->is_up();
 801f84a:	68fb      	ldr	r3, [r7, #12]
 801f84c:	685b      	ldr	r3, [r3, #4]
 801f84e:	4798      	blx	r3
 801f850:	4603      	mov	r3, r0
 801f852:	e006      	b.n	801f862 <connection_is_up+0x86>
        }
        connection = connection->next;
 801f854:	68fb      	ldr	r3, [r7, #12]
 801f856:	68db      	ldr	r3, [r3, #12]
 801f858:	60fb      	str	r3, [r7, #12]
    while(connection) {
 801f85a:	68fb      	ldr	r3, [r7, #12]
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d1ce      	bne.n	801f7fe <connection_is_up+0x22>
    }

    return false;
 801f860:	2300      	movs	r3, #0
}
 801f862:	4618      	mov	r0, r3
 801f864:	3710      	adds	r7, #16
 801f866:	46bd      	mov	sp, r7
 801f868:	bd80      	pop	{r7, pc}
 801f86a:	bf00      	nop
 801f86c:	20000510 	.word	0x20000510
 801f870:	0801f7cd 	.word	0x0801f7cd

0801f874 <stream_write_all>:

static void stream_write_all (const char *s)
{
 801f874:	b580      	push	{r7, lr}
 801f876:	b084      	sub	sp, #16
 801f878:	af00      	add	r7, sp, #0
 801f87a:	6078      	str	r0, [r7, #4]
    stream_connection_t *connection = connections;
 801f87c:	4b0c      	ldr	r3, [pc, #48]	; (801f8b0 <stream_write_all+0x3c>)
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	60fb      	str	r3, [r7, #12]

    while(connection) {
 801f882:	e00d      	b.n	801f8a0 <stream_write_all+0x2c>
        if(connection->is_up())
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	685b      	ldr	r3, [r3, #4]
 801f888:	4798      	blx	r3
 801f88a:	4603      	mov	r3, r0
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d004      	beq.n	801f89a <stream_write_all+0x26>
            connection->stream->write(s);
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	68db      	ldr	r3, [r3, #12]
 801f896:	6878      	ldr	r0, [r7, #4]
 801f898:	4798      	blx	r3
        connection = connection->next;
 801f89a:	68fb      	ldr	r3, [r7, #12]
 801f89c:	68db      	ldr	r3, [r3, #12]
 801f89e:	60fb      	str	r3, [r7, #12]
    while(connection) {
 801f8a0:	68fb      	ldr	r3, [r7, #12]
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d1ee      	bne.n	801f884 <stream_write_all+0x10>
    }
}
 801f8a6:	bf00      	nop
 801f8a8:	bf00      	nop
 801f8aa:	3710      	adds	r7, #16
 801f8ac:	46bd      	mov	sp, r7
 801f8ae:	bd80      	pop	{r7, pc}
 801f8b0:	20000510 	.word	0x20000510

0801f8b4 <add_connection>:

static stream_connection_t *add_connection (const io_stream_t *stream)
{
 801f8b4:	b580      	push	{r7, lr}
 801f8b6:	b084      	sub	sp, #16
 801f8b8:	af00      	add	r7, sp, #0
 801f8ba:	6078      	str	r0, [r7, #4]
    stream_connection_t *connection, *last = connections;
 801f8bc:	4b26      	ldr	r3, [pc, #152]	; (801f958 <add_connection+0xa4>)
 801f8be:	681b      	ldr	r3, [r3, #0]
 801f8c0:	60bb      	str	r3, [r7, #8]

    if(base.stream == NULL) {
 801f8c2:	4b26      	ldr	r3, [pc, #152]	; (801f95c <add_connection+0xa8>)
 801f8c4:	681b      	ldr	r3, [r3, #0]
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	d105      	bne.n	801f8d6 <add_connection+0x22>
        base.stream = stream;
 801f8ca:	4a24      	ldr	r2, [pc, #144]	; (801f95c <add_connection+0xa8>)
 801f8cc:	687b      	ldr	r3, [r7, #4]
 801f8ce:	6013      	str	r3, [r2, #0]
        connection = &base;
 801f8d0:	4b22      	ldr	r3, [pc, #136]	; (801f95c <add_connection+0xa8>)
 801f8d2:	60fb      	str	r3, [r7, #12]
 801f8d4:	e022      	b.n	801f91c <add_connection+0x68>
    } else if((connection = malloc(sizeof(stream_connection_t)))) {
 801f8d6:	2010      	movs	r0, #16
 801f8d8:	f005 ff4e 	bl	8025778 <malloc>
 801f8dc:	4603      	mov	r3, r0
 801f8de:	60fb      	str	r3, [r7, #12]
 801f8e0:	68fb      	ldr	r3, [r7, #12]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d01a      	beq.n	801f91c <add_connection+0x68>
        connection->stream = stream;
 801f8e6:	68fb      	ldr	r3, [r7, #12]
 801f8e8:	687a      	ldr	r2, [r7, #4]
 801f8ea:	601a      	str	r2, [r3, #0]
        connection->next = NULL;
 801f8ec:	68fb      	ldr	r3, [r7, #12]
 801f8ee:	2200      	movs	r2, #0
 801f8f0:	60da      	str	r2, [r3, #12]
        while(last->next) {
 801f8f2:	e00c      	b.n	801f90e <add_connection+0x5a>
            last = last->next;
 801f8f4:	68bb      	ldr	r3, [r7, #8]
 801f8f6:	68db      	ldr	r3, [r3, #12]
 801f8f8:	60bb      	str	r3, [r7, #8]
            if(last->stream == stream) {
 801f8fa:	68bb      	ldr	r3, [r7, #8]
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	687a      	ldr	r2, [r7, #4]
 801f900:	429a      	cmp	r2, r3
 801f902:	d104      	bne.n	801f90e <add_connection+0x5a>
                free(connection);
 801f904:	68f8      	ldr	r0, [r7, #12]
 801f906:	f005 ff3f 	bl	8025788 <free>
                return NULL;
 801f90a:	2300      	movs	r3, #0
 801f90c:	e01f      	b.n	801f94e <add_connection+0x9a>
        while(last->next) {
 801f90e:	68bb      	ldr	r3, [r7, #8]
 801f910:	68db      	ldr	r3, [r3, #12]
 801f912:	2b00      	cmp	r3, #0
 801f914:	d1ee      	bne.n	801f8f4 <add_connection+0x40>
            }
        }
        last->next = connection;
 801f916:	68bb      	ldr	r3, [r7, #8]
 801f918:	68fa      	ldr	r2, [r7, #12]
 801f91a:	60da      	str	r2, [r3, #12]
    }

    connection->is_up = stream->is_connected ?
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	685b      	ldr	r3, [r3, #4]
                         stream->is_connected :
 801f920:	2b00      	cmp	r3, #0
 801f922:	d002      	beq.n	801f92a <add_connection+0x76>
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	685b      	ldr	r3, [r3, #4]
 801f928:	e00e      	b.n	801f948 <add_connection+0x94>
                          (stream->state.is_usb && base.stream != stream ? is_not_connected : is_connected);
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	789b      	ldrb	r3, [r3, #2]
 801f92e:	f003 0304 	and.w	r3, r3, #4
 801f932:	b2db      	uxtb	r3, r3
 801f934:	2b00      	cmp	r3, #0
 801f936:	d006      	beq.n	801f946 <add_connection+0x92>
 801f938:	4b08      	ldr	r3, [pc, #32]	; (801f95c <add_connection+0xa8>)
 801f93a:	681b      	ldr	r3, [r3, #0]
 801f93c:	687a      	ldr	r2, [r7, #4]
 801f93e:	429a      	cmp	r2, r3
 801f940:	d001      	beq.n	801f946 <add_connection+0x92>
 801f942:	4b07      	ldr	r3, [pc, #28]	; (801f960 <add_connection+0xac>)
 801f944:	e000      	b.n	801f948 <add_connection+0x94>
 801f946:	4b07      	ldr	r3, [pc, #28]	; (801f964 <add_connection+0xb0>)
    connection->is_up = stream->is_connected ?
 801f948:	68fa      	ldr	r2, [r7, #12]
 801f94a:	6053      	str	r3, [r2, #4]

    return connection;
 801f94c:	68fb      	ldr	r3, [r7, #12]
}
 801f94e:	4618      	mov	r0, r3
 801f950:	3710      	adds	r7, #16
 801f952:	46bd      	mov	sp, r7
 801f954:	bd80      	pop	{r7, pc}
 801f956:	bf00      	nop
 801f958:	20000510 	.word	0x20000510
 801f95c:	20002964 	.word	0x20002964
 801f960:	0801f7cd 	.word	0x0801f7cd
 801f964:	0801f7bd 	.word	0x0801f7bd

0801f968 <stream_select>:

static bool stream_select (const io_stream_t *stream, bool add)
{
 801f968:	b580      	push	{r7, lr}
 801f96a:	b086      	sub	sp, #24
 801f96c:	af00      	add	r7, sp, #0
 801f96e:	6078      	str	r0, [r7, #4]
 801f970:	460b      	mov	r3, r1
 801f972:	70fb      	strb	r3, [r7, #3]
    static const io_stream_t *active_stream = NULL;

    if(stream == base.stream) {
 801f974:	4b76      	ldr	r3, [pc, #472]	; (801fb50 <stream_select+0x1e8>)
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	687a      	ldr	r2, [r7, #4]
 801f97a:	429a      	cmp	r2, r3
 801f97c:	d110      	bne.n	801f9a0 <stream_select+0x38>
        base.is_up = add ? (stream->is_connected ? stream->is_connected : is_connected) : is_not_connected;
 801f97e:	78fb      	ldrb	r3, [r7, #3]
 801f980:	2b00      	cmp	r3, #0
 801f982:	d008      	beq.n	801f996 <stream_select+0x2e>
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	685b      	ldr	r3, [r3, #4]
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d002      	beq.n	801f992 <stream_select+0x2a>
 801f98c:	687b      	ldr	r3, [r7, #4]
 801f98e:	685b      	ldr	r3, [r3, #4]
 801f990:	e002      	b.n	801f998 <stream_select+0x30>
 801f992:	4b70      	ldr	r3, [pc, #448]	; (801fb54 <stream_select+0x1ec>)
 801f994:	e000      	b.n	801f998 <stream_select+0x30>
 801f996:	4b70      	ldr	r3, [pc, #448]	; (801fb58 <stream_select+0x1f0>)
 801f998:	4a6d      	ldr	r2, [pc, #436]	; (801fb50 <stream_select+0x1e8>)
 801f99a:	6053      	str	r3, [r2, #4]
        return true;
 801f99c:	2301      	movs	r3, #1
 801f99e:	e133      	b.n	801fc08 <stream_select+0x2a0>
    }

    if(add) {
 801f9a0:	78fb      	ldrb	r3, [r7, #3]
 801f9a2:	2b00      	cmp	r3, #0
 801f9a4:	d007      	beq.n	801f9b6 <stream_select+0x4e>

        if(add_connection(stream) == NULL)
 801f9a6:	6878      	ldr	r0, [r7, #4]
 801f9a8:	f7ff ff84 	bl	801f8b4 <add_connection>
 801f9ac:	4603      	mov	r3, r0
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d124      	bne.n	801f9fc <stream_select+0x94>
            return false;
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	e128      	b.n	801fc08 <stream_select+0x2a0>

    } else { // disconnect

        stream_connection_t *prev, *last = connections;
 801f9b6:	4b69      	ldr	r3, [pc, #420]	; (801fb5c <stream_select+0x1f4>)
 801f9b8:	681b      	ldr	r3, [r3, #0]
 801f9ba:	617b      	str	r3, [r7, #20]

        while(last->next) {
 801f9bc:	e01a      	b.n	801f9f4 <stream_select+0x8c>
            prev = last;
 801f9be:	697b      	ldr	r3, [r7, #20]
 801f9c0:	613b      	str	r3, [r7, #16]
            last = last->next;
 801f9c2:	697b      	ldr	r3, [r7, #20]
 801f9c4:	68db      	ldr	r3, [r3, #12]
 801f9c6:	617b      	str	r3, [r7, #20]
            if(last->stream == stream) {
 801f9c8:	697b      	ldr	r3, [r7, #20]
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	687a      	ldr	r2, [r7, #4]
 801f9ce:	429a      	cmp	r2, r3
 801f9d0:	d110      	bne.n	801f9f4 <stream_select+0x8c>
                prev->next = last->next;
 801f9d2:	697b      	ldr	r3, [r7, #20]
 801f9d4:	68da      	ldr	r2, [r3, #12]
 801f9d6:	693b      	ldr	r3, [r7, #16]
 801f9d8:	60da      	str	r2, [r3, #12]
                free(last);
 801f9da:	6978      	ldr	r0, [r7, #20]
 801f9dc:	f005 fed4 	bl	8025788 <free>
                if(prev->next)
 801f9e0:	693b      	ldr	r3, [r7, #16]
 801f9e2:	68db      	ldr	r3, [r3, #12]
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	d001      	beq.n	801f9ec <stream_select+0x84>
                    return false;
 801f9e8:	2300      	movs	r3, #0
 801f9ea:	e10d      	b.n	801fc08 <stream_select+0x2a0>
                else {
                    stream = prev->stream;
 801f9ec:	693b      	ldr	r3, [r7, #16]
 801f9ee:	681b      	ldr	r3, [r3, #0]
 801f9f0:	607b      	str	r3, [r7, #4]
                    break;
 801f9f2:	e003      	b.n	801f9fc <stream_select+0x94>
        while(last->next) {
 801f9f4:	697b      	ldr	r3, [r7, #20]
 801f9f6:	68db      	ldr	r3, [r3, #12]
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	d1e0      	bne.n	801f9be <stream_select+0x56>
                }
            }
        }
    }

    bool webui_connected = hal.stream.state.webui_connected;
 801f9fc:	4b58      	ldr	r3, [pc, #352]	; (801fb60 <stream_select+0x1f8>)
 801f9fe:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 801fa02:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801fa06:	b2db      	uxtb	r3, r3
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	bf14      	ite	ne
 801fa0c:	2301      	movne	r3, #1
 801fa0e:	2300      	moveq	r3, #0
 801fa10:	73fb      	strb	r3, [r7, #15]

    switch(stream->type) {
 801fa12:	687b      	ldr	r3, [r7, #4]
 801fa14:	781b      	ldrb	r3, [r3, #0]
 801fa16:	2b04      	cmp	r3, #4
 801fa18:	d87e      	bhi.n	801fb18 <stream_select+0x1b0>
 801fa1a:	a201      	add	r2, pc, #4	; (adr r2, 801fa20 <stream_select+0xb8>)
 801fa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa20:	0801fa35 	.word	0x0801fa35
 801fa24:	0801fb19 	.word	0x0801fb19
 801fa28:	0801fae3 	.word	0x0801fae3
 801fa2c:	0801fa67 	.word	0x0801fa67
 801fa30:	0801fa9d 	.word	0x0801fa9d

        case StreamType_Serial:
            if(active_stream && active_stream->type != StreamType_Serial && connection_is_up((io_stream_t *)stream)) {
 801fa34:	4b4b      	ldr	r3, [pc, #300]	; (801fb64 <stream_select+0x1fc>)
 801fa36:	681b      	ldr	r3, [r3, #0]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d06f      	beq.n	801fb1c <stream_select+0x1b4>
 801fa3c:	4b49      	ldr	r3, [pc, #292]	; (801fb64 <stream_select+0x1fc>)
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	781b      	ldrb	r3, [r3, #0]
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d06a      	beq.n	801fb1c <stream_select+0x1b4>
 801fa46:	6878      	ldr	r0, [r7, #4]
 801fa48:	f7ff fec8 	bl	801f7dc <connection_is_up>
 801fa4c:	4603      	mov	r3, r0
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d064      	beq.n	801fb1c <stream_select+0x1b4>
                hal.stream.write = stream->write;
 801fa52:	687b      	ldr	r3, [r7, #4]
 801fa54:	68db      	ldr	r3, [r3, #12]
 801fa56:	4a42      	ldr	r2, [pc, #264]	; (801fb60 <stream_select+0x1f8>)
 801fa58:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
                report_message("SERIAL STREAM ACTIVE", Message_Plain);
 801fa5c:	2100      	movs	r1, #0
 801fa5e:	4842      	ldr	r0, [pc, #264]	; (801fb68 <stream_select+0x200>)
 801fa60:	f7f4 fa88 	bl	8013f74 <report_message>
            }
            break;
 801fa64:	e05a      	b.n	801fb1c <stream_select+0x1b4>

        case StreamType_Telnet:
            if(connection_is_up(&hal.stream))
 801fa66:	4841      	ldr	r0, [pc, #260]	; (801fb6c <stream_select+0x204>)
 801fa68:	f7ff feb8 	bl	801f7dc <connection_is_up>
 801fa6c:	4603      	mov	r3, r0
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d003      	beq.n	801fa7a <stream_select+0x112>
                report_message("TELNET STREAM ACTIVE", Message_Plain);
 801fa72:	2100      	movs	r1, #0
 801fa74:	483e      	ldr	r0, [pc, #248]	; (801fb70 <stream_select+0x208>)
 801fa76:	f7f4 fa7d 	bl	8013f74 <report_message>
            if(add && sys.driver_started) {
 801fa7a:	78fb      	ldrb	r3, [r7, #3]
 801fa7c:	2b00      	cmp	r3, #0
 801fa7e:	d04f      	beq.n	801fb20 <stream_select+0x1b8>
 801fa80:	4b3c      	ldr	r3, [pc, #240]	; (801fb74 <stream_select+0x20c>)
 801fa82:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	d04a      	beq.n	801fb20 <stream_select+0x1b8>
                hal.stream.write_all = stream->write;
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	68db      	ldr	r3, [r3, #12]
 801fa8e:	4a34      	ldr	r2, [pc, #208]	; (801fb60 <stream_select+0x1f8>)
 801fa90:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
                grbl.report.init_message();
 801fa94:	4b38      	ldr	r3, [pc, #224]	; (801fb78 <stream_select+0x210>)
 801fa96:	681b      	ldr	r3, [r3, #0]
 801fa98:	4798      	blx	r3
            }
            break;
 801fa9a:	e041      	b.n	801fb20 <stream_select+0x1b8>

        case StreamType_WebSocket:
            if(connection_is_up(&hal.stream))
 801fa9c:	4833      	ldr	r0, [pc, #204]	; (801fb6c <stream_select+0x204>)
 801fa9e:	f7ff fe9d 	bl	801f7dc <connection_is_up>
 801faa2:	4603      	mov	r3, r0
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	d003      	beq.n	801fab0 <stream_select+0x148>
                report_message("WEBSOCKET STREAM ACTIVE", Message_Plain);
 801faa8:	2100      	movs	r1, #0
 801faaa:	4834      	ldr	r0, [pc, #208]	; (801fb7c <stream_select+0x214>)
 801faac:	f7f4 fa62 	bl	8013f74 <report_message>
            if(add && sys.driver_started && !hal.stream.state.webui_connected) {
 801fab0:	78fb      	ldrb	r3, [r7, #3]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d036      	beq.n	801fb24 <stream_select+0x1bc>
 801fab6:	4b2f      	ldr	r3, [pc, #188]	; (801fb74 <stream_select+0x20c>)
 801fab8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	d031      	beq.n	801fb24 <stream_select+0x1bc>
 801fac0:	4b27      	ldr	r3, [pc, #156]	; (801fb60 <stream_select+0x1f8>)
 801fac2:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 801fac6:	f003 0302 	and.w	r3, r3, #2
 801faca:	b2db      	uxtb	r3, r3
 801facc:	2b00      	cmp	r3, #0
 801face:	d129      	bne.n	801fb24 <stream_select+0x1bc>
                hal.stream.write_all = stream->write;
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	68db      	ldr	r3, [r3, #12]
 801fad4:	4a22      	ldr	r2, [pc, #136]	; (801fb60 <stream_select+0x1f8>)
 801fad6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
                grbl.report.init_message();
 801fada:	4b27      	ldr	r3, [pc, #156]	; (801fb78 <stream_select+0x210>)
 801fadc:	681b      	ldr	r3, [r3, #0]
 801fade:	4798      	blx	r3
            }
            break;
 801fae0:	e020      	b.n	801fb24 <stream_select+0x1bc>

        case StreamType_Bluetooth:
            if(connection_is_up(&hal.stream))
 801fae2:	4822      	ldr	r0, [pc, #136]	; (801fb6c <stream_select+0x204>)
 801fae4:	f7ff fe7a 	bl	801f7dc <connection_is_up>
 801fae8:	4603      	mov	r3, r0
 801faea:	2b00      	cmp	r3, #0
 801faec:	d003      	beq.n	801faf6 <stream_select+0x18e>
                report_message("BLUETOOTH STREAM ACTIVE", Message_Plain);
 801faee:	2100      	movs	r1, #0
 801faf0:	4823      	ldr	r0, [pc, #140]	; (801fb80 <stream_select+0x218>)
 801faf2:	f7f4 fa3f 	bl	8013f74 <report_message>
            if(add && sys.driver_started) {
 801faf6:	78fb      	ldrb	r3, [r7, #3]
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d015      	beq.n	801fb28 <stream_select+0x1c0>
 801fafc:	4b1d      	ldr	r3, [pc, #116]	; (801fb74 <stream_select+0x20c>)
 801fafe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	d010      	beq.n	801fb28 <stream_select+0x1c0>
                hal.stream.write_all = stream->write;
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	68db      	ldr	r3, [r3, #12]
 801fb0a:	4a15      	ldr	r2, [pc, #84]	; (801fb60 <stream_select+0x1f8>)
 801fb0c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
                grbl.report.init_message();
 801fb10:	4b19      	ldr	r3, [pc, #100]	; (801fb78 <stream_select+0x210>)
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	4798      	blx	r3
            }
            break;
 801fb16:	e007      	b.n	801fb28 <stream_select+0x1c0>

        default:
            break;
 801fb18:	bf00      	nop
 801fb1a:	e006      	b.n	801fb2a <stream_select+0x1c2>
            break;
 801fb1c:	bf00      	nop
 801fb1e:	e004      	b.n	801fb2a <stream_select+0x1c2>
            break;
 801fb20:	bf00      	nop
 801fb22:	e002      	b.n	801fb2a <stream_select+0x1c2>
            break;
 801fb24:	bf00      	nop
 801fb26:	e000      	b.n	801fb2a <stream_select+0x1c2>
            break;
 801fb28:	bf00      	nop
    }

    memcpy(&hal.stream, stream, sizeof(io_stream_t));
 801fb2a:	224c      	movs	r2, #76	; 0x4c
 801fb2c:	6879      	ldr	r1, [r7, #4]
 801fb2e:	480f      	ldr	r0, [pc, #60]	; (801fb6c <stream_select+0x204>)
 801fb30:	f006 fae2 	bl	80260f8 <memcpy>

    if(!hal.stream.write_all)
 801fb34:	4b0a      	ldr	r3, [pc, #40]	; (801fb60 <stream_select+0x1f8>)
 801fb36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801fb3a:	2b00      	cmp	r3, #0
 801fb3c:	d126      	bne.n	801fb8c <stream_select+0x224>
        hal.stream.write_all = base.next != NULL ? stream_write_all : hal.stream.write;
 801fb3e:	4b04      	ldr	r3, [pc, #16]	; (801fb50 <stream_select+0x1e8>)
 801fb40:	68db      	ldr	r3, [r3, #12]
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	d11e      	bne.n	801fb84 <stream_select+0x21c>
 801fb46:	4b06      	ldr	r3, [pc, #24]	; (801fb60 <stream_select+0x1f8>)
 801fb48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801fb4c:	e01b      	b.n	801fb86 <stream_select+0x21e>
 801fb4e:	bf00      	nop
 801fb50:	20002964 	.word	0x20002964
 801fb54:	0801f7bd 	.word	0x0801f7bd
 801fb58:	0801f7cd 	.word	0x0801f7cd
 801fb5c:	20000510 	.word	0x20000510
 801fb60:	200016a0 	.word	0x200016a0
 801fb64:	20002994 	.word	0x20002994
 801fb68:	080317d0 	.word	0x080317d0
 801fb6c:	20001748 	.word	0x20001748
 801fb70:	080317e8 	.word	0x080317e8
 801fb74:	20001520 	.word	0x20001520
 801fb78:	200015b8 	.word	0x200015b8
 801fb7c:	08031800 	.word	0x08031800
 801fb80:	08031818 	.word	0x08031818
 801fb84:	4b22      	ldr	r3, [pc, #136]	; (801fc10 <stream_select+0x2a8>)
 801fb86:	4a23      	ldr	r2, [pc, #140]	; (801fc14 <stream_select+0x2ac>)
 801fb88:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    if(stream == base.stream && base.is_up == is_not_connected)
 801fb8c:	4b22      	ldr	r3, [pc, #136]	; (801fc18 <stream_select+0x2b0>)
 801fb8e:	681b      	ldr	r3, [r3, #0]
 801fb90:	687a      	ldr	r2, [r7, #4]
 801fb92:	429a      	cmp	r2, r3
 801fb94:	d107      	bne.n	801fba6 <stream_select+0x23e>
 801fb96:	4b20      	ldr	r3, [pc, #128]	; (801fc18 <stream_select+0x2b0>)
 801fb98:	685b      	ldr	r3, [r3, #4]
 801fb9a:	4a20      	ldr	r2, [pc, #128]	; (801fc1c <stream_select+0x2b4>)
 801fb9c:	4293      	cmp	r3, r2
 801fb9e:	d102      	bne.n	801fba6 <stream_select+0x23e>
        base.is_up = is_connected;
 801fba0:	4b1d      	ldr	r3, [pc, #116]	; (801fc18 <stream_select+0x2b0>)
 801fba2:	4a1f      	ldr	r2, [pc, #124]	; (801fc20 <stream_select+0x2b8>)
 801fba4:	605a      	str	r2, [r3, #4]

    if(stream->type == StreamType_WebSocket && !stream->state.webui_connected)
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	781b      	ldrb	r3, [r3, #0]
 801fbaa:	2b04      	cmp	r3, #4
 801fbac:	d10e      	bne.n	801fbcc <stream_select+0x264>
 801fbae:	687b      	ldr	r3, [r7, #4]
 801fbb0:	789b      	ldrb	r3, [r3, #2]
 801fbb2:	f003 0302 	and.w	r3, r3, #2
 801fbb6:	b2db      	uxtb	r3, r3
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d107      	bne.n	801fbcc <stream_select+0x264>
        hal.stream.state.webui_connected = webui_connected;
 801fbbc:	4a15      	ldr	r2, [pc, #84]	; (801fc14 <stream_select+0x2ac>)
 801fbbe:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 801fbc2:	7bf9      	ldrb	r1, [r7, #15]
 801fbc4:	f361 0341 	bfi	r3, r1, #1, #1
 801fbc8:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa

    hal.stream.set_enqueue_rt_handler(protocol_enqueue_realtime_command);
 801fbcc:	4b11      	ldr	r3, [pc, #68]	; (801fc14 <stream_select+0x2ac>)
 801fbce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801fbd2:	4814      	ldr	r0, [pc, #80]	; (801fc24 <stream_select+0x2bc>)
 801fbd4:	4798      	blx	r3

    if(hal.stream.disable_rx)
 801fbd6:	4b0f      	ldr	r3, [pc, #60]	; (801fc14 <stream_select+0x2ac>)
 801fbd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	d004      	beq.n	801fbea <stream_select+0x282>
        hal.stream.disable_rx(false);
 801fbe0:	4b0c      	ldr	r3, [pc, #48]	; (801fc14 <stream_select+0x2ac>)
 801fbe2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801fbe6:	2000      	movs	r0, #0
 801fbe8:	4798      	blx	r3

    if(grbl.on_stream_changed)
 801fbea:	4b0f      	ldr	r3, [pc, #60]	; (801fc28 <stream_select+0x2c0>)
 801fbec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	d006      	beq.n	801fc00 <stream_select+0x298>
        grbl.on_stream_changed(hal.stream.type);
 801fbf2:	4b0d      	ldr	r3, [pc, #52]	; (801fc28 <stream_select+0x2c0>)
 801fbf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801fbf6:	4a07      	ldr	r2, [pc, #28]	; (801fc14 <stream_select+0x2ac>)
 801fbf8:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 801fbfc:	4610      	mov	r0, r2
 801fbfe:	4798      	blx	r3

    active_stream = stream;
 801fc00:	4a0a      	ldr	r2, [pc, #40]	; (801fc2c <stream_select+0x2c4>)
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	6013      	str	r3, [r2, #0]

    return true;
 801fc06:	2301      	movs	r3, #1
}
 801fc08:	4618      	mov	r0, r3
 801fc0a:	3718      	adds	r7, #24
 801fc0c:	46bd      	mov	sp, r7
 801fc0e:	bd80      	pop	{r7, pc}
 801fc10:	0801f875 	.word	0x0801f875
 801fc14:	200016a0 	.word	0x200016a0
 801fc18:	20002964 	.word	0x20002964
 801fc1c:	0801f7cd 	.word	0x0801f7cd
 801fc20:	0801f7bd 	.word	0x0801f7bd
 801fc24:	0801319d 	.word	0x0801319d
 801fc28:	200015b8 	.word	0x200015b8
 801fc2c:	20002994 	.word	0x20002994

0801fc30 <stream_connect>:

    return flags;
}

bool stream_connect (const io_stream_t *stream)
{
 801fc30:	b580      	push	{r7, lr}
 801fc32:	b084      	sub	sp, #16
 801fc34:	af00      	add	r7, sp, #0
 801fc36:	6078      	str	r0, [r7, #4]
    bool ok;

    if((ok = stream_select(stream, true)) && stream->type == StreamType_Serial && !stream->state.is_usb && hal.periph_port.set_pin_description) {
 801fc38:	2101      	movs	r1, #1
 801fc3a:	6878      	ldr	r0, [r7, #4]
 801fc3c:	f7ff fe94 	bl	801f968 <stream_select>
 801fc40:	4603      	mov	r3, r0
 801fc42:	73fb      	strb	r3, [r7, #15]
 801fc44:	7bfb      	ldrb	r3, [r7, #15]
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d023      	beq.n	801fc92 <stream_connect+0x62>
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	781b      	ldrb	r3, [r3, #0]
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	d11f      	bne.n	801fc92 <stream_connect+0x62>
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	789b      	ldrb	r3, [r3, #2]
 801fc56:	f003 0304 	and.w	r3, r3, #4
 801fc5a:	b2db      	uxtb	r3, r3
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	d118      	bne.n	801fc92 <stream_connect+0x62>
 801fc60:	4b0e      	ldr	r3, [pc, #56]	; (801fc9c <stream_connect+0x6c>)
 801fc62:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801fc66:	2b00      	cmp	r3, #0
 801fc68:	d013      	beq.n	801fc92 <stream_connect+0x62>
        hal.periph_port.set_pin_description(Input_RX, (pin_group_t)(PinGroup_UART + stream->instance), "Primary UART");
 801fc6a:	4b0c      	ldr	r3, [pc, #48]	; (801fc9c <stream_connect+0x6c>)
 801fc6c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801fc70:	687a      	ldr	r2, [r7, #4]
 801fc72:	7852      	ldrb	r2, [r2, #1]
 801fc74:	3211      	adds	r2, #17
 801fc76:	4611      	mov	r1, r2
 801fc78:	4a09      	ldr	r2, [pc, #36]	; (801fca0 <stream_connect+0x70>)
 801fc7a:	2029      	movs	r0, #41	; 0x29
 801fc7c:	4798      	blx	r3
        hal.periph_port.set_pin_description(Output_TX, (pin_group_t)(PinGroup_UART + stream->instance), "Primary UART");
 801fc7e:	4b07      	ldr	r3, [pc, #28]	; (801fc9c <stream_connect+0x6c>)
 801fc80:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801fc84:	687a      	ldr	r2, [r7, #4]
 801fc86:	7852      	ldrb	r2, [r2, #1]
 801fc88:	3211      	adds	r2, #17
 801fc8a:	4611      	mov	r1, r2
 801fc8c:	4a04      	ldr	r2, [pc, #16]	; (801fca0 <stream_connect+0x70>)
 801fc8e:	2074      	movs	r0, #116	; 0x74
 801fc90:	4798      	blx	r3
    }

    return ok;
 801fc92:	7bfb      	ldrb	r3, [r7, #15]
}
 801fc94:	4618      	mov	r0, r3
 801fc96:	3710      	adds	r7, #16
 801fc98:	46bd      	mov	sp, r7
 801fc9a:	bd80      	pop	{r7, pc}
 801fc9c:	200016a0 	.word	0x200016a0
 801fca0:	08031830 	.word	0x08031830

0801fca4 <_open_instance>:
    uint32_t baud_rate;
    io_stream_t const *stream;
} connection;

static bool _open_instance (io_stream_properties_t const *stream)
{
 801fca4:	b580      	push	{r7, lr}
 801fca6:	b082      	sub	sp, #8
 801fca8:	af00      	add	r7, sp, #0
 801fcaa:	6078      	str	r0, [r7, #4]
    if(stream->type == StreamType_Serial && (connection.instance == 255 || stream->instance == connection.instance) && stream->flags.claimable && !stream->flags.claimed)
 801fcac:	687b      	ldr	r3, [r7, #4]
 801fcae:	781b      	ldrb	r3, [r3, #0]
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	d120      	bne.n	801fcf6 <_open_instance+0x52>
 801fcb4:	4b15      	ldr	r3, [pc, #84]	; (801fd0c <_open_instance+0x68>)
 801fcb6:	781b      	ldrb	r3, [r3, #0]
 801fcb8:	2bff      	cmp	r3, #255	; 0xff
 801fcba:	d005      	beq.n	801fcc8 <_open_instance+0x24>
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	785a      	ldrb	r2, [r3, #1]
 801fcc0:	4b12      	ldr	r3, [pc, #72]	; (801fd0c <_open_instance+0x68>)
 801fcc2:	781b      	ldrb	r3, [r3, #0]
 801fcc4:	429a      	cmp	r2, r3
 801fcc6:	d116      	bne.n	801fcf6 <_open_instance+0x52>
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	789b      	ldrb	r3, [r3, #2]
 801fccc:	f003 0302 	and.w	r3, r3, #2
 801fcd0:	b2db      	uxtb	r3, r3
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d00f      	beq.n	801fcf6 <_open_instance+0x52>
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	789b      	ldrb	r3, [r3, #2]
 801fcda:	f003 0304 	and.w	r3, r3, #4
 801fcde:	b2db      	uxtb	r3, r3
 801fce0:	2b00      	cmp	r3, #0
 801fce2:	d108      	bne.n	801fcf6 <_open_instance+0x52>
        connection.stream = stream->claim(connection.baud_rate);
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	685b      	ldr	r3, [r3, #4]
 801fce8:	4a08      	ldr	r2, [pc, #32]	; (801fd0c <_open_instance+0x68>)
 801fcea:	6852      	ldr	r2, [r2, #4]
 801fcec:	4610      	mov	r0, r2
 801fcee:	4798      	blx	r3
 801fcf0:	4603      	mov	r3, r0
 801fcf2:	4a06      	ldr	r2, [pc, #24]	; (801fd0c <_open_instance+0x68>)
 801fcf4:	6093      	str	r3, [r2, #8]

    return connection.stream != NULL;
 801fcf6:	4b05      	ldr	r3, [pc, #20]	; (801fd0c <_open_instance+0x68>)
 801fcf8:	689b      	ldr	r3, [r3, #8]
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	bf14      	ite	ne
 801fcfe:	2301      	movne	r3, #1
 801fd00:	2300      	moveq	r3, #0
 801fd02:	b2db      	uxtb	r3, r3
}
 801fd04:	4618      	mov	r0, r3
 801fd06:	3708      	adds	r7, #8
 801fd08:	46bd      	mov	sp, r7
 801fd0a:	bd80      	pop	{r7, pc}
 801fd0c:	20002988 	.word	0x20002988

0801fd10 <stream_connect_instance>:

bool stream_connect_instance (uint8_t instance, uint32_t baud_rate)
{
 801fd10:	b580      	push	{r7, lr}
 801fd12:	b082      	sub	sp, #8
 801fd14:	af00      	add	r7, sp, #0
 801fd16:	4603      	mov	r3, r0
 801fd18:	6039      	str	r1, [r7, #0]
 801fd1a:	71fb      	strb	r3, [r7, #7]
    connection.instance = instance;
 801fd1c:	4a10      	ldr	r2, [pc, #64]	; (801fd60 <stream_connect_instance+0x50>)
 801fd1e:	79fb      	ldrb	r3, [r7, #7]
 801fd20:	7013      	strb	r3, [r2, #0]
    connection.baud_rate = baud_rate;
 801fd22:	4a0f      	ldr	r2, [pc, #60]	; (801fd60 <stream_connect_instance+0x50>)
 801fd24:	683b      	ldr	r3, [r7, #0]
 801fd26:	6053      	str	r3, [r2, #4]
    connection.stream = NULL;
 801fd28:	4b0d      	ldr	r3, [pc, #52]	; (801fd60 <stream_connect_instance+0x50>)
 801fd2a:	2200      	movs	r2, #0
 801fd2c:	609a      	str	r2, [r3, #8]

    return stream_enumerate_streams(_open_instance) && stream_connect(connection.stream);
 801fd2e:	480d      	ldr	r0, [pc, #52]	; (801fd64 <stream_connect_instance+0x54>)
 801fd30:	f7ff fbf2 	bl	801f518 <stream_enumerate_streams>
 801fd34:	4603      	mov	r3, r0
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	d009      	beq.n	801fd4e <stream_connect_instance+0x3e>
 801fd3a:	4b09      	ldr	r3, [pc, #36]	; (801fd60 <stream_connect_instance+0x50>)
 801fd3c:	689b      	ldr	r3, [r3, #8]
 801fd3e:	4618      	mov	r0, r3
 801fd40:	f7ff ff76 	bl	801fc30 <stream_connect>
 801fd44:	4603      	mov	r3, r0
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d001      	beq.n	801fd4e <stream_connect_instance+0x3e>
 801fd4a:	2301      	movs	r3, #1
 801fd4c:	e000      	b.n	801fd50 <stream_connect_instance+0x40>
 801fd4e:	2300      	movs	r3, #0
 801fd50:	f003 0301 	and.w	r3, r3, #1
 801fd54:	b2db      	uxtb	r3, r3
}
 801fd56:	4618      	mov	r0, r3
 801fd58:	3708      	adds	r7, #8
 801fd5a:	46bd      	mov	sp, r7
 801fd5c:	bd80      	pop	{r7, pc}
 801fd5e:	bf00      	nop
 801fd60:	20002988 	.word	0x20002988
 801fd64:	0801fca5 	.word	0x0801fca5

0801fd68 <stream_mpg_enable>:

    return connection != NULL;
}

bool stream_mpg_enable (bool on)
{
 801fd68:	b590      	push	{r4, r7, lr}
 801fd6a:	b085      	sub	sp, #20
 801fd6c:	af00      	add	r7, sp, #0
 801fd6e:	4603      	mov	r3, r0
 801fd70:	71fb      	strb	r3, [r7, #7]
    static io_stream_t org_stream = {
        .type = StreamType_Redirected
    };

    if(mpg.stream == NULL)
 801fd72:	4b5d      	ldr	r3, [pc, #372]	; (801fee8 <stream_mpg_enable+0x180>)
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	d101      	bne.n	801fd7e <stream_mpg_enable+0x16>
        return false;
 801fd7a:	2300      	movs	r3, #0
 801fd7c:	e0af      	b.n	801fede <stream_mpg_enable+0x176>

    sys_state_t state = state_get();
 801fd7e:	f7fc ffcf 	bl	801cd20 <state_get>
 801fd82:	60f8      	str	r0, [r7, #12]

    // Deny entering MPG mode if busy
    if(on == sys.mpg_mode || (on && (gc_state.file_run || !(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP)))))) {
 801fd84:	4b59      	ldr	r3, [pc, #356]	; (801feec <stream_mpg_enable+0x184>)
 801fd86:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 801fd8a:	79fa      	ldrb	r2, [r7, #7]
 801fd8c:	429a      	cmp	r2, r3
 801fd8e:	d010      	beq.n	801fdb2 <stream_mpg_enable+0x4a>
 801fd90:	79fb      	ldrb	r3, [r7, #7]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	d012      	beq.n	801fdbc <stream_mpg_enable+0x54>
 801fd96:	4b56      	ldr	r3, [pc, #344]	; (801fef0 <stream_mpg_enable+0x188>)
 801fd98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d108      	bne.n	801fdb2 <stream_mpg_enable+0x4a>
 801fda0:	68fb      	ldr	r3, [r7, #12]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	d00a      	beq.n	801fdbc <stream_mpg_enable+0x54>
 801fda6:	68fa      	ldr	r2, [r7, #12]
 801fda8:	f240 1301 	movw	r3, #257	; 0x101
 801fdac:	4013      	ands	r3, r2
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	d104      	bne.n	801fdbc <stream_mpg_enable+0x54>
        protocol_enqueue_realtime_command(CMD_STATUS_REPORT_ALL);
 801fdb2:	2087      	movs	r0, #135	; 0x87
 801fdb4:	f7f3 f9f2 	bl	801319c <protocol_enqueue_realtime_command>
        return false;
 801fdb8:	2300      	movs	r3, #0
 801fdba:	e090      	b.n	801fede <stream_mpg_enable+0x176>
    }

    if(on) {
 801fdbc:	79fb      	ldrb	r3, [r7, #7]
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d04e      	beq.n	801fe60 <stream_mpg_enable+0xf8>
        if(org_stream.type == StreamType_Redirected) {
 801fdc2:	4b4c      	ldr	r3, [pc, #304]	; (801fef4 <stream_mpg_enable+0x18c>)
 801fdc4:	781b      	ldrb	r3, [r3, #0]
 801fdc6:	2b06      	cmp	r3, #6
 801fdc8:	d174      	bne.n	801feb4 <stream_mpg_enable+0x14c>
            memcpy(&org_stream, &hal.stream, sizeof(io_stream_t));
 801fdca:	4a4a      	ldr	r2, [pc, #296]	; (801fef4 <stream_mpg_enable+0x18c>)
 801fdcc:	4b4a      	ldr	r3, [pc, #296]	; (801fef8 <stream_mpg_enable+0x190>)
 801fdce:	4610      	mov	r0, r2
 801fdd0:	33a8      	adds	r3, #168	; 0xa8
 801fdd2:	224c      	movs	r2, #76	; 0x4c
 801fdd4:	4619      	mov	r1, r3
 801fdd6:	f006 f98f 	bl	80260f8 <memcpy>
            if(hal.stream.disable_rx)
 801fdda:	4b47      	ldr	r3, [pc, #284]	; (801fef8 <stream_mpg_enable+0x190>)
 801fddc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d004      	beq.n	801fdee <stream_mpg_enable+0x86>
                hal.stream.disable_rx(true);
 801fde4:	4b44      	ldr	r3, [pc, #272]	; (801fef8 <stream_mpg_enable+0x190>)
 801fde6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801fdea:	2001      	movs	r0, #1
 801fdec:	4798      	blx	r3
            mpg.stream->disable_rx(false);
 801fdee:	4b3e      	ldr	r3, [pc, #248]	; (801fee8 <stream_mpg_enable+0x180>)
 801fdf0:	681b      	ldr	r3, [r3, #0]
 801fdf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fdf4:	2000      	movs	r0, #0
 801fdf6:	4798      	blx	r3
            mpg.stream->set_enqueue_rt_handler(org_stream.set_enqueue_rt_handler(NULL));
 801fdf8:	4b3b      	ldr	r3, [pc, #236]	; (801fee8 <stream_mpg_enable+0x180>)
 801fdfa:	681b      	ldr	r3, [r3, #0]
 801fdfc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801fdfe:	4b3d      	ldr	r3, [pc, #244]	; (801fef4 <stream_mpg_enable+0x18c>)
 801fe00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe02:	2000      	movs	r0, #0
 801fe04:	4798      	blx	r3
 801fe06:	4603      	mov	r3, r0
 801fe08:	4618      	mov	r0, r3
 801fe0a:	47a0      	blx	r4
            hal.stream.type = StreamType_MPG;
 801fe0c:	4b3a      	ldr	r3, [pc, #232]	; (801fef8 <stream_mpg_enable+0x190>)
 801fe0e:	2201      	movs	r2, #1
 801fe10:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
            hal.stream.read = mpg.stream->read;
 801fe14:	4b34      	ldr	r3, [pc, #208]	; (801fee8 <stream_mpg_enable+0x180>)
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	69db      	ldr	r3, [r3, #28]
 801fe1a:	4a37      	ldr	r2, [pc, #220]	; (801fef8 <stream_mpg_enable+0x190>)
 801fe1c:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
            if(mpg.flags.is_mpg_tx)
 801fe20:	4b31      	ldr	r3, [pc, #196]	; (801fee8 <stream_mpg_enable+0x180>)
 801fe22:	7a1b      	ldrb	r3, [r3, #8]
 801fe24:	f003 0302 	and.w	r3, r3, #2
 801fe28:	b2db      	uxtb	r3, r3
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d005      	beq.n	801fe3a <stream_mpg_enable+0xd2>
                hal.stream.write = mpg.stream->write;
 801fe2e:	4b2e      	ldr	r3, [pc, #184]	; (801fee8 <stream_mpg_enable+0x180>)
 801fe30:	681b      	ldr	r3, [r3, #0]
 801fe32:	68db      	ldr	r3, [r3, #12]
 801fe34:	4a30      	ldr	r2, [pc, #192]	; (801fef8 <stream_mpg_enable+0x190>)
 801fe36:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
            hal.stream.get_rx_buffer_free = mpg.stream->get_rx_buffer_free;
 801fe3a:	4b2b      	ldr	r3, [pc, #172]	; (801fee8 <stream_mpg_enable+0x180>)
 801fe3c:	681b      	ldr	r3, [r3, #0]
 801fe3e:	689b      	ldr	r3, [r3, #8]
 801fe40:	4a2d      	ldr	r2, [pc, #180]	; (801fef8 <stream_mpg_enable+0x190>)
 801fe42:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
            hal.stream.cancel_read_buffer = mpg.stream->cancel_read_buffer;
 801fe46:	4b28      	ldr	r3, [pc, #160]	; (801fee8 <stream_mpg_enable+0x180>)
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe4c:	4a2a      	ldr	r2, [pc, #168]	; (801fef8 <stream_mpg_enable+0x190>)
 801fe4e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            hal.stream.reset_read_buffer = mpg.stream->reset_read_buffer;
 801fe52:	4b25      	ldr	r3, [pc, #148]	; (801fee8 <stream_mpg_enable+0x180>)
 801fe54:	681b      	ldr	r3, [r3, #0]
 801fe56:	6a1b      	ldr	r3, [r3, #32]
 801fe58:	4a27      	ldr	r2, [pc, #156]	; (801fef8 <stream_mpg_enable+0x190>)
 801fe5a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
 801fe5e:	e029      	b.n	801feb4 <stream_mpg_enable+0x14c>
        }
    } else if(org_stream.type != StreamType_Redirected) {
 801fe60:	4b24      	ldr	r3, [pc, #144]	; (801fef4 <stream_mpg_enable+0x18c>)
 801fe62:	781b      	ldrb	r3, [r3, #0]
 801fe64:	2b06      	cmp	r3, #6
 801fe66:	d025      	beq.n	801feb4 <stream_mpg_enable+0x14c>
        if(mpg_write_char)
 801fe68:	4b24      	ldr	r3, [pc, #144]	; (801fefc <stream_mpg_enable+0x194>)
 801fe6a:	681b      	ldr	r3, [r3, #0]
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	d007      	beq.n	801fe80 <stream_mpg_enable+0x118>
            mpg.stream->set_enqueue_rt_handler(mpg_write_char);
 801fe70:	4b1d      	ldr	r3, [pc, #116]	; (801fee8 <stream_mpg_enable+0x180>)
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe76:	4a21      	ldr	r2, [pc, #132]	; (801fefc <stream_mpg_enable+0x194>)
 801fe78:	6812      	ldr	r2, [r2, #0]
 801fe7a:	4610      	mov	r0, r2
 801fe7c:	4798      	blx	r3
 801fe7e:	e004      	b.n	801fe8a <stream_mpg_enable+0x122>
        else
            mpg.stream->disable_rx(true);
 801fe80:	4b19      	ldr	r3, [pc, #100]	; (801fee8 <stream_mpg_enable+0x180>)
 801fe82:	681b      	ldr	r3, [r3, #0]
 801fe84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fe86:	2001      	movs	r0, #1
 801fe88:	4798      	blx	r3
        memcpy(&hal.stream, &org_stream, sizeof(io_stream_t));
 801fe8a:	4b1b      	ldr	r3, [pc, #108]	; (801fef8 <stream_mpg_enable+0x190>)
 801fe8c:	4a19      	ldr	r2, [pc, #100]	; (801fef4 <stream_mpg_enable+0x18c>)
 801fe8e:	33a8      	adds	r3, #168	; 0xa8
 801fe90:	4611      	mov	r1, r2
 801fe92:	224c      	movs	r2, #76	; 0x4c
 801fe94:	4618      	mov	r0, r3
 801fe96:	f006 f92f 	bl	80260f8 <memcpy>
        org_stream.type = StreamType_Redirected;
 801fe9a:	4b16      	ldr	r3, [pc, #88]	; (801fef4 <stream_mpg_enable+0x18c>)
 801fe9c:	2206      	movs	r2, #6
 801fe9e:	701a      	strb	r2, [r3, #0]
        if(hal.stream.disable_rx)
 801fea0:	4b15      	ldr	r3, [pc, #84]	; (801fef8 <stream_mpg_enable+0x190>)
 801fea2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	d004      	beq.n	801feb4 <stream_mpg_enable+0x14c>
            hal.stream.disable_rx(false);
 801feaa:	4b13      	ldr	r3, [pc, #76]	; (801fef8 <stream_mpg_enable+0x190>)
 801feac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801feb0:	2000      	movs	r0, #0
 801feb2:	4798      	blx	r3
    }

    hal.stream.reset_read_buffer();
 801feb4:	4b10      	ldr	r3, [pc, #64]	; (801fef8 <stream_mpg_enable+0x190>)
 801feb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801feba:	4798      	blx	r3

    sys.mpg_mode = on;
 801febc:	4a0b      	ldr	r2, [pc, #44]	; (801feec <stream_mpg_enable+0x184>)
 801febe:	79fb      	ldrb	r3, [r7, #7]
 801fec0:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
    system_add_rt_report(Report_MPGMode);
 801fec4:	2001      	movs	r0, #1
 801fec6:	f001 fb7f 	bl	80215c8 <system_add_rt_report>

    // Force a realtime status report, all reports when MPG mode active
    protocol_enqueue_realtime_command(on ? CMD_STATUS_REPORT_ALL : CMD_STATUS_REPORT);
 801feca:	79fb      	ldrb	r3, [r7, #7]
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d001      	beq.n	801fed4 <stream_mpg_enable+0x16c>
 801fed0:	2387      	movs	r3, #135	; 0x87
 801fed2:	e000      	b.n	801fed6 <stream_mpg_enable+0x16e>
 801fed4:	2380      	movs	r3, #128	; 0x80
 801fed6:	4618      	mov	r0, r3
 801fed8:	f7f3 f960 	bl	801319c <protocol_enqueue_realtime_command>

    return true;
 801fedc:	2301      	movs	r3, #1
}
 801fede:	4618      	mov	r0, r3
 801fee0:	3714      	adds	r7, #20
 801fee2:	46bd      	mov	sp, r7
 801fee4:	bd90      	pop	{r4, r7, pc}
 801fee6:	bf00      	nop
 801fee8:	20002974 	.word	0x20002974
 801feec:	20001520 	.word	0x20001520
 801fef0:	2000137c 	.word	0x2000137c
 801fef4:	20000518 	.word	0x20000518
 801fef8:	200016a0 	.word	0x200016a0
 801fefc:	20002984 	.word	0x20002984

0801ff00 <null_rx_free>:
// null stream, discards output and returns no input

static enqueue_realtime_command_ptr enqueue_realtime_command = protocol_enqueue_realtime_command;

static uint16_t null_rx_free (void)
{
 801ff00:	b480      	push	{r7}
 801ff02:	af00      	add	r7, sp, #0
    return RX_BUFFER_SIZE;
 801ff04:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
 801ff08:	4618      	mov	r0, r3
 801ff0a:	46bd      	mov	sp, r7
 801ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff10:	4770      	bx	lr

0801ff12 <null_count>:

static uint16_t null_count (void)
{
 801ff12:	b480      	push	{r7}
 801ff14:	af00      	add	r7, sp, #0
    return 0;
 801ff16:	2300      	movs	r3, #0
}
 801ff18:	4618      	mov	r0, r3
 801ff1a:	46bd      	mov	sp, r7
 801ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff20:	4770      	bx	lr

0801ff22 <null_put_c>:

static bool null_put_c (const char c)
{
 801ff22:	b480      	push	{r7}
 801ff24:	b083      	sub	sp, #12
 801ff26:	af00      	add	r7, sp, #0
 801ff28:	4603      	mov	r3, r0
 801ff2a:	71fb      	strb	r3, [r7, #7]
    return true;
 801ff2c:	2301      	movs	r3, #1
}
 801ff2e:	4618      	mov	r0, r3
 801ff30:	370c      	adds	r7, #12
 801ff32:	46bd      	mov	sp, r7
 801ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff38:	4770      	bx	lr

0801ff3a <null_write_string>:

static void null_write_string (const char *s)
{
 801ff3a:	b480      	push	{r7}
 801ff3c:	b083      	sub	sp, #12
 801ff3e:	af00      	add	r7, sp, #0
 801ff40:	6078      	str	r0, [r7, #4]
}
 801ff42:	bf00      	nop
 801ff44:	370c      	adds	r7, #12
 801ff46:	46bd      	mov	sp, r7
 801ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff4c:	4770      	bx	lr

0801ff4e <null_write>:

static void null_write(const char *s, uint16_t length)
{
 801ff4e:	b480      	push	{r7}
 801ff50:	b083      	sub	sp, #12
 801ff52:	af00      	add	r7, sp, #0
 801ff54:	6078      	str	r0, [r7, #4]
 801ff56:	460b      	mov	r3, r1
 801ff58:	807b      	strh	r3, [r7, #2]
}
 801ff5a:	bf00      	nop
 801ff5c:	370c      	adds	r7, #12
 801ff5e:	46bd      	mov	sp, r7
 801ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff64:	4770      	bx	lr

0801ff66 <null_suspend_disable>:

static bool null_suspend_disable (bool suspend)
{
 801ff66:	b480      	push	{r7}
 801ff68:	b083      	sub	sp, #12
 801ff6a:	af00      	add	r7, sp, #0
 801ff6c:	4603      	mov	r3, r0
 801ff6e:	71fb      	strb	r3, [r7, #7]
    return true;
 801ff70:	2301      	movs	r3, #1
}
 801ff72:	4618      	mov	r0, r3
 801ff74:	370c      	adds	r7, #12
 801ff76:	46bd      	mov	sp, r7
 801ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff7c:	4770      	bx	lr

0801ff7e <null_set_baudrate>:

static bool null_set_baudrate (uint32_t baud_rate)
{
 801ff7e:	b480      	push	{r7}
 801ff80:	b083      	sub	sp, #12
 801ff82:	af00      	add	r7, sp, #0
 801ff84:	6078      	str	r0, [r7, #4]
    return true;
 801ff86:	2301      	movs	r3, #1
}
 801ff88:	4618      	mov	r0, r3
 801ff8a:	370c      	adds	r7, #12
 801ff8c:	46bd      	mov	sp, r7
 801ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff92:	4770      	bx	lr

0801ff94 <null_enqueue_rt_command>:

static bool null_enqueue_rt_command (char c)
{
 801ff94:	b580      	push	{r7, lr}
 801ff96:	b082      	sub	sp, #8
 801ff98:	af00      	add	r7, sp, #0
 801ff9a:	4603      	mov	r3, r0
 801ff9c:	71fb      	strb	r3, [r7, #7]
    return enqueue_realtime_command(c);
 801ff9e:	4b05      	ldr	r3, [pc, #20]	; (801ffb4 <null_enqueue_rt_command+0x20>)
 801ffa0:	681b      	ldr	r3, [r3, #0]
 801ffa2:	79fa      	ldrb	r2, [r7, #7]
 801ffa4:	4610      	mov	r0, r2
 801ffa6:	4798      	blx	r3
 801ffa8:	4603      	mov	r3, r0
}
 801ffaa:	4618      	mov	r0, r3
 801ffac:	3708      	adds	r7, #8
 801ffae:	46bd      	mov	sp, r7
 801ffb0:	bd80      	pop	{r7, pc}
 801ffb2:	bf00      	nop
 801ffb4:	20000514 	.word	0x20000514

0801ffb8 <null_set_rt_handler>:

static enqueue_realtime_command_ptr null_set_rt_handler (enqueue_realtime_command_ptr handler)
{
 801ffb8:	b480      	push	{r7}
 801ffba:	b085      	sub	sp, #20
 801ffbc:	af00      	add	r7, sp, #0
 801ffbe:	6078      	str	r0, [r7, #4]
    enqueue_realtime_command_ptr prev = enqueue_realtime_command;
 801ffc0:	4b07      	ldr	r3, [pc, #28]	; (801ffe0 <null_set_rt_handler+0x28>)
 801ffc2:	681b      	ldr	r3, [r3, #0]
 801ffc4:	60fb      	str	r3, [r7, #12]

    if(handler)
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d002      	beq.n	801ffd2 <null_set_rt_handler+0x1a>
        enqueue_realtime_command = handler;
 801ffcc:	4a04      	ldr	r2, [pc, #16]	; (801ffe0 <null_set_rt_handler+0x28>)
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	6013      	str	r3, [r2, #0]

    return prev;
 801ffd2:	68fb      	ldr	r3, [r7, #12]
}
 801ffd4:	4618      	mov	r0, r3
 801ffd6:	3714      	adds	r7, #20
 801ffd8:	46bd      	mov	sp, r7
 801ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffde:	4770      	bx	lr
 801ffe0:	20000514 	.word	0x20000514

0801ffe4 <stream_null_init>:

const io_stream_t *stream_null_init (uint32_t baud_rate)
{
 801ffe4:	b480      	push	{r7}
 801ffe6:	b083      	sub	sp, #12
 801ffe8:	af00      	add	r7, sp, #0
 801ffea:	6078      	str	r0, [r7, #4]
        .disable_rx = null_suspend_disable,
        .set_baud_rate = null_set_baudrate,
        .set_enqueue_rt_handler = null_set_rt_handler
    };

    return &stream;
 801ffec:	4b03      	ldr	r3, [pc, #12]	; (801fffc <stream_null_init+0x18>)
}
 801ffee:	4618      	mov	r0, r3
 801fff0:	370c      	adds	r7, #12
 801fff2:	46bd      	mov	sp, r7
 801fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fff8:	4770      	bx	lr
 801fffa:	bf00      	nop
 801fffc:	08034864 	.word	0x08034864

08020000 <hypot_f>:
static status_code_t output_memmap (sys_state_t state, char *args);
#endif

// Simple hypotenuse computation function.
inline static float hypot_f (float x, float y)
{
 8020000:	b580      	push	{r7, lr}
 8020002:	b082      	sub	sp, #8
 8020004:	af00      	add	r7, sp, #0
 8020006:	ed87 0a01 	vstr	s0, [r7, #4]
 802000a:	edc7 0a00 	vstr	s1, [r7]
    return sqrtf(x*x + y*y);
 802000e:	edd7 7a01 	vldr	s15, [r7, #4]
 8020012:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8020016:	edd7 7a00 	vldr	s15, [r7]
 802001a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802001e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020022:	eeb0 0a67 	vmov.f32	s0, s15
 8020026:	f006 fe43 	bl	8026cb0 <sqrtf>
 802002a:	eef0 7a40 	vmov.f32	s15, s0
}
 802002e:	eeb0 0a67 	vmov.f32	s0, s15
 8020032:	3708      	adds	r7, #8
 8020034:	46bd      	mov	sp, r7
 8020036:	bd80      	pop	{r7, pc}

08020038 <control_interrupt_handler>:
// Pin change interrupt for pin-out commands, i.e. cycle start, feed hold, and reset. Sets
// only the realtime command execute variable to have the main program execute these when
// its ready. This works exactly like the character-based realtime commands when picked off
// directly from the incoming data stream.
ISR_CODE void ISR_FUNC(control_interrupt_handler)(control_signals_t signals)
{
 8020038:	b580      	push	{r7, lr}
 802003a:	b084      	sub	sp, #16
 802003c:	af00      	add	r7, sp, #0
 802003e:	80b8      	strh	r0, [r7, #4]
    if(signals.deasserted)
 8020040:	797b      	ldrb	r3, [r7, #5]
 8020042:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8020046:	b2db      	uxtb	r3, r3
 8020048:	2b00      	cmp	r3, #0
 802004a:	f040 80c7 	bne.w	80201dc <control_interrupt_handler+0x1a4>
        return; // for now...

    if (signals.value) {
 802004e:	88bb      	ldrh	r3, [r7, #4]
 8020050:	2b00      	cmp	r3, #0
 8020052:	f000 80c4 	beq.w	80201de <control_interrupt_handler+0x1a6>

        sys.last_event.control.value = signals.value;
 8020056:	88ba      	ldrh	r2, [r7, #4]
 8020058:	4b62      	ldr	r3, [pc, #392]	; (80201e4 <control_interrupt_handler+0x1ac>)
 802005a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

        if ((signals.reset || signals.e_stop || signals.motor_fault) && state_get() != STATE_ESTOP)
 802005e:	793b      	ldrb	r3, [r7, #4]
 8020060:	f003 0301 	and.w	r3, r3, #1
 8020064:	b2db      	uxtb	r3, r3
 8020066:	2b00      	cmp	r3, #0
 8020068:	d10b      	bne.n	8020082 <control_interrupt_handler+0x4a>
 802006a:	793b      	ldrb	r3, [r7, #4]
 802006c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020070:	b2db      	uxtb	r3, r3
 8020072:	2b00      	cmp	r3, #0
 8020074:	d105      	bne.n	8020082 <control_interrupt_handler+0x4a>
 8020076:	797b      	ldrb	r3, [r7, #5]
 8020078:	f003 0301 	and.w	r3, r3, #1
 802007c:	b2db      	uxtb	r3, r3
 802007e:	2b00      	cmp	r3, #0
 8020080:	d008      	beq.n	8020094 <control_interrupt_handler+0x5c>
 8020082:	f7fc fe4d 	bl	801cd20 <state_get>
 8020086:	4603      	mov	r3, r0
 8020088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802008c:	d002      	beq.n	8020094 <control_interrupt_handler+0x5c>
            mc_reset();
 802008e:	f7ef f82f 	bl	800f0f0 <mc_reset>
 8020092:	e0a4      	b.n	80201de <control_interrupt_handler+0x1a6>
        else {
#ifndef NO_SAFETY_DOOR_SUPPORT
            if (signals.safety_door_ajar && hal.signals_cap.safety_door_ajar) {
 8020094:	793b      	ldrb	r3, [r7, #4]
 8020096:	f003 0308 	and.w	r3, r3, #8
 802009a:	b2db      	uxtb	r3, r3
 802009c:	2b00      	cmp	r3, #0
 802009e:	d02a      	beq.n	80200f6 <control_interrupt_handler+0xbe>
 80200a0:	4b51      	ldr	r3, [pc, #324]	; (80201e8 <control_interrupt_handler+0x1b0>)
 80200a2:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 80200a6:	f003 0308 	and.w	r3, r3, #8
 80200aa:	b2db      	uxtb	r3, r3
 80200ac:	2b00      	cmp	r3, #0
 80200ae:	d022      	beq.n	80200f6 <control_interrupt_handler+0xbe>
                if(settings.safety_door.flags.ignore_when_idle) {
 80200b0:	4b4e      	ldr	r3, [pc, #312]	; (80201ec <control_interrupt_handler+0x1b4>)
 80200b2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80200b6:	f003 0301 	and.w	r3, r3, #1
 80200ba:	b2db      	uxtb	r3, r3
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d015      	beq.n	80200ec <control_interrupt_handler+0xb4>
                    // Only stop the spindle (laser off) when idle or jogging,
                    // this to allow positioning the controlled point (spindle) when door is open.
                    // NOTE: at least for lasers there should be an external interlock blocking laser power.
                    if(state_get() != STATE_IDLE && state_get() != STATE_JOG)
 80200c0:	f7fc fe2e 	bl	801cd20 <state_get>
 80200c4:	4603      	mov	r3, r0
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d009      	beq.n	80200de <control_interrupt_handler+0xa6>
 80200ca:	f7fc fe29 	bl	801cd20 <state_get>
 80200ce:	4603      	mov	r3, r0
 80200d0:	2b20      	cmp	r3, #32
 80200d2:	d004      	beq.n	80200de <control_interrupt_handler+0xa6>
                        system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 80200d4:	4b44      	ldr	r3, [pc, #272]	; (80201e8 <control_interrupt_handler+0x1b0>)
 80200d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80200d8:	2140      	movs	r1, #64	; 0x40
 80200da:	4845      	ldr	r0, [pc, #276]	; (80201f0 <control_interrupt_handler+0x1b8>)
 80200dc:	4798      	blx	r3
                    if(settings.mode == Mode_Laser) // Turn off spindle immediately (laser) when in laser mode
 80200de:	4b43      	ldr	r3, [pc, #268]	; (80201ec <control_interrupt_handler+0x1b4>)
 80200e0:	7e1b      	ldrb	r3, [r3, #24]
 80200e2:	2b01      	cmp	r3, #1
 80200e4:	d107      	bne.n	80200f6 <control_interrupt_handler+0xbe>
                        spindle_all_off();
 80200e6:	f7fc fa7b 	bl	801c5e0 <spindle_all_off>
 80200ea:	e004      	b.n	80200f6 <control_interrupt_handler+0xbe>
                } else
                    system_set_exec_state_flag(EXEC_SAFETY_DOOR);
 80200ec:	4b3e      	ldr	r3, [pc, #248]	; (80201e8 <control_interrupt_handler+0x1b0>)
 80200ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80200f0:	2140      	movs	r1, #64	; 0x40
 80200f2:	483f      	ldr	r0, [pc, #252]	; (80201f0 <control_interrupt_handler+0x1b8>)
 80200f4:	4798      	blx	r3
            }
#endif

            if(signals.probe_overtravel) {
 80200f6:	797b      	ldrb	r3, [r7, #5]
 80200f8:	f003 0320 	and.w	r3, r3, #32
 80200fc:	b2db      	uxtb	r3, r3
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d00a      	beq.n	8020118 <control_interrupt_handler+0xe0>
                limit_signals_t overtravel = { .min.z = On};
 8020102:	2300      	movs	r3, #0
 8020104:	60fb      	str	r3, [r7, #12]
 8020106:	7b3b      	ldrb	r3, [r7, #12]
 8020108:	f043 0304 	orr.w	r3, r3, #4
 802010c:	733b      	strb	r3, [r7, #12]
                hal.limits.interrupt_callback(overtravel);
 802010e:	4b36      	ldr	r3, [pc, #216]	; (80201e8 <control_interrupt_handler+0x1b0>)
 8020110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020112:	68f8      	ldr	r0, [r7, #12]
 8020114:	4798      	blx	r3
 8020116:	e062      	b.n	80201de <control_interrupt_handler+0x1a6>
                // TODO: add message?
            } else if (signals.probe_triggered) {
 8020118:	797b      	ldrb	r3, [r7, #5]
 802011a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802011e:	b2db      	uxtb	r3, r3
 8020120:	2b00      	cmp	r3, #0
 8020122:	d01c      	beq.n	802015e <control_interrupt_handler+0x126>
                if(sys.probing_state == Probing_Off && (state_get() & (STATE_CYCLE|STATE_JOG))) {
 8020124:	4b2f      	ldr	r3, [pc, #188]	; (80201e4 <control_interrupt_handler+0x1ac>)
 8020126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802012a:	b2db      	uxtb	r3, r3
 802012c:	2b00      	cmp	r3, #0
 802012e:	d10f      	bne.n	8020150 <control_interrupt_handler+0x118>
 8020130:	f7fc fdf6 	bl	801cd20 <state_get>
 8020134:	4603      	mov	r3, r0
 8020136:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802013a:	2b00      	cmp	r3, #0
 802013c:	d008      	beq.n	8020150 <control_interrupt_handler+0x118>
                    system_set_exec_state_flag(EXEC_STOP);
 802013e:	4b2a      	ldr	r3, [pc, #168]	; (80201e8 <control_interrupt_handler+0x1b0>)
 8020140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020142:	2110      	movs	r1, #16
 8020144:	482a      	ldr	r0, [pc, #168]	; (80201f0 <control_interrupt_handler+0x1b8>)
 8020146:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 8020148:	4b26      	ldr	r3, [pc, #152]	; (80201e4 <control_interrupt_handler+0x1ac>)
 802014a:	220d      	movs	r2, #13
 802014c:	751a      	strb	r2, [r3, #20]
 802014e:	e046      	b.n	80201de <control_interrupt_handler+0x1a6>
                } else
                    hal.probe.configure(false, false);
 8020150:	4b25      	ldr	r3, [pc, #148]	; (80201e8 <control_interrupt_handler+0x1b0>)
 8020152:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8020156:	2100      	movs	r1, #0
 8020158:	2000      	movs	r0, #0
 802015a:	4798      	blx	r3
 802015c:	e03f      	b.n	80201de <control_interrupt_handler+0x1a6>
            } else if (signals.probe_disconnected) {
 802015e:	793b      	ldrb	r3, [r7, #4]
 8020160:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8020164:	b2db      	uxtb	r3, r3
 8020166:	2b00      	cmp	r3, #0
 8020168:	d013      	beq.n	8020192 <control_interrupt_handler+0x15a>
                if(sys.probing_state == Probing_Active && state_get() == STATE_CYCLE) {
 802016a:	4b1e      	ldr	r3, [pc, #120]	; (80201e4 <control_interrupt_handler+0x1ac>)
 802016c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020170:	b2db      	uxtb	r3, r3
 8020172:	2b01      	cmp	r3, #1
 8020174:	d133      	bne.n	80201de <control_interrupt_handler+0x1a6>
 8020176:	f7fc fdd3 	bl	801cd20 <state_get>
 802017a:	4603      	mov	r3, r0
 802017c:	2b08      	cmp	r3, #8
 802017e:	d12e      	bne.n	80201de <control_interrupt_handler+0x1a6>
                    system_set_exec_state_flag(EXEC_FEED_HOLD);
 8020180:	4b19      	ldr	r3, [pc, #100]	; (80201e8 <control_interrupt_handler+0x1b0>)
 8020182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020184:	2108      	movs	r1, #8
 8020186:	481a      	ldr	r0, [pc, #104]	; (80201f0 <control_interrupt_handler+0x1b8>)
 8020188:	4798      	blx	r3
                    sys.alarm_pending = Alarm_ProbeProtect;
 802018a:	4b16      	ldr	r3, [pc, #88]	; (80201e4 <control_interrupt_handler+0x1ac>)
 802018c:	220d      	movs	r2, #13
 802018e:	751a      	strb	r2, [r3, #20]
 8020190:	e025      	b.n	80201de <control_interrupt_handler+0x1a6>
                }
            } else if (signals.feed_hold)
 8020192:	793b      	ldrb	r3, [r7, #4]
 8020194:	f003 0302 	and.w	r3, r3, #2
 8020198:	b2db      	uxtb	r3, r3
 802019a:	2b00      	cmp	r3, #0
 802019c:	d005      	beq.n	80201aa <control_interrupt_handler+0x172>
                system_set_exec_state_flag(EXEC_FEED_HOLD);
 802019e:	4b12      	ldr	r3, [pc, #72]	; (80201e8 <control_interrupt_handler+0x1b0>)
 80201a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201a2:	2108      	movs	r1, #8
 80201a4:	4812      	ldr	r0, [pc, #72]	; (80201f0 <control_interrupt_handler+0x1b8>)
 80201a6:	4798      	blx	r3
 80201a8:	e019      	b.n	80201de <control_interrupt_handler+0x1a6>
            else if (signals.cycle_start) {
 80201aa:	793b      	ldrb	r3, [r7, #4]
 80201ac:	f003 0304 	and.w	r3, r3, #4
 80201b0:	b2db      	uxtb	r3, r3
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d013      	beq.n	80201de <control_interrupt_handler+0x1a6>
                system_set_exec_state_flag(EXEC_CYCLE_START);
 80201b6:	4b0c      	ldr	r3, [pc, #48]	; (80201e8 <control_interrupt_handler+0x1b0>)
 80201b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201ba:	2102      	movs	r1, #2
 80201bc:	480c      	ldr	r0, [pc, #48]	; (80201f0 <control_interrupt_handler+0x1b8>)
 80201be:	4798      	blx	r3
                sys.report.cycle_start = settings.status_report.pin_state;
 80201c0:	4b0a      	ldr	r3, [pc, #40]	; (80201ec <control_interrupt_handler+0x1b4>)
 80201c2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80201c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80201ca:	b2d9      	uxtb	r1, r3
 80201cc:	4a05      	ldr	r2, [pc, #20]	; (80201e4 <control_interrupt_handler+0x1ac>)
 80201ce:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 80201d2:	f361 1386 	bfi	r3, r1, #6, #1
 80201d6:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
 80201da:	e000      	b.n	80201de <control_interrupt_handler+0x1a6>
        return; // for now...
 80201dc:	bf00      	nop
            }
        }
    }
}
 80201de:	3710      	adds	r7, #16
 80201e0:	46bd      	mov	sp, r7
 80201e2:	bd80      	pop	{r7, pc}
 80201e4:	20001520 	.word	0x20001520
 80201e8:	200016a0 	.word	0x200016a0
 80201ec:	20001cf0 	.word	0x20001cf0
 80201f0:	20001568 	.word	0x20001568

080201f4 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup (void)
{
 80201f4:	b580      	push	{r7, lr}
 80201f6:	b094      	sub	sp, #80	; 0x50
 80201f8:	af00      	add	r7, sp, #0
    if(hal.nvs.type != NVS_None) {
 80201fa:	4b19      	ldr	r3, [pc, #100]	; (8020260 <system_execute_startup+0x6c>)
 80201fc:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8020200:	2b00      	cmp	r3, #0
 8020202:	d029      	beq.n	8020258 <system_execute_startup+0x64>

        char line[sizeof(stored_line_t)];
        uint_fast8_t n;

        for (n = 0; n < N_STARTUP_LINE; n++) {
 8020204:	2300      	movs	r3, #0
 8020206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020208:	e023      	b.n	8020252 <system_execute_startup+0x5e>
            if (!settings_read_startup_line(n, line))
 802020a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802020c:	b2db      	uxtb	r3, r3
 802020e:	1d3a      	adds	r2, r7, #4
 8020210:	4611      	mov	r1, r2
 8020212:	4618      	mov	r0, r3
 8020214:	f7f9 ff86 	bl	801a124 <settings_read_startup_line>
 8020218:	4603      	mov	r3, r0
 802021a:	f083 0301 	eor.w	r3, r3, #1
 802021e:	b2db      	uxtb	r3, r3
 8020220:	2b00      	cmp	r3, #0
 8020222:	d005      	beq.n	8020230 <system_execute_startup+0x3c>
                report_execute_startup_message(line, Status_SettingReadFail);
 8020224:	1d3b      	adds	r3, r7, #4
 8020226:	2107      	movs	r1, #7
 8020228:	4618      	mov	r0, r3
 802022a:	f7f4 feff 	bl	801502c <report_execute_startup_message>
 802022e:	e00d      	b.n	802024c <system_execute_startup+0x58>
            else if (*line != '\0')
 8020230:	793b      	ldrb	r3, [r7, #4]
 8020232:	2b00      	cmp	r3, #0
 8020234:	d00a      	beq.n	802024c <system_execute_startup+0x58>
                report_execute_startup_message(line, gc_execute_block(line));
 8020236:	1d3b      	adds	r3, r7, #4
 8020238:	4618      	mov	r0, r3
 802023a:	f7e5 fd71 	bl	8005d20 <gc_execute_block>
 802023e:	4603      	mov	r3, r0
 8020240:	461a      	mov	r2, r3
 8020242:	1d3b      	adds	r3, r7, #4
 8020244:	4611      	mov	r1, r2
 8020246:	4618      	mov	r0, r3
 8020248:	f7f4 fef0 	bl	801502c <report_execute_startup_message>
        for (n = 0; n < N_STARTUP_LINE; n++) {
 802024c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802024e:	3301      	adds	r3, #1
 8020250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020254:	2b01      	cmp	r3, #1
 8020256:	d9d8      	bls.n	802020a <system_execute_startup+0x16>
        }
    }
}
 8020258:	bf00      	nop
 802025a:	3750      	adds	r7, #80	; 0x50
 802025c:	46bd      	mov	sp, r7
 802025e:	bd80      	pop	{r7, pc}
 8020260:	200016a0 	.word	0x200016a0

08020264 <spindle_reset_data>:

// Reset spindle encoder data
status_code_t spindle_reset_data (sys_state_t state, char *args)
{
 8020264:	b580      	push	{r7, lr}
 8020266:	b084      	sub	sp, #16
 8020268:	af00      	add	r7, sp, #0
 802026a:	6078      	str	r0, [r7, #4]
 802026c:	6039      	str	r1, [r7, #0]
    spindle_ptrs_t *spindle = gc_spindle_get();
 802026e:	f7e5 fb57 	bl	8005920 <gc_spindle_get>
 8020272:	60f8      	str	r0, [r7, #12]

    if(spindle->reset_data)
 8020274:	68fb      	ldr	r3, [r7, #12]
 8020276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020278:	2b00      	cmp	r3, #0
 802027a:	d002      	beq.n	8020282 <spindle_reset_data+0x1e>
        spindle->reset_data();
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020280:	4798      	blx	r3

    return spindle->reset_data ? Status_OK : Status_InvalidStatement;
 8020282:	68fb      	ldr	r3, [r7, #12]
 8020284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020286:	2b00      	cmp	r3, #0
 8020288:	d001      	beq.n	802028e <spindle_reset_data+0x2a>
 802028a:	2300      	movs	r3, #0
 802028c:	e000      	b.n	8020290 <spindle_reset_data+0x2c>
 802028e:	2303      	movs	r3, #3
}
 8020290:	4618      	mov	r0, r3
 8020292:	3710      	adds	r7, #16
 8020294:	46bd      	mov	sp, r7
 8020296:	bd80      	pop	{r7, pc}

08020298 <read_int>:

status_code_t read_int (char *s, int32_t *value)
{
 8020298:	b580      	push	{r7, lr}
 802029a:	ed2d 8b02 	vpush	{d8}
 802029e:	b084      	sub	sp, #16
 80202a0:	af00      	add	r7, sp, #0
 80202a2:	6078      	str	r0, [r7, #4]
 80202a4:	6039      	str	r1, [r7, #0]
    uint_fast8_t counter = 0;
 80202a6:	2300      	movs	r3, #0
 80202a8:	60fb      	str	r3, [r7, #12]
    float parameter;
    if(!read_float(s, &counter, &parameter))
 80202aa:	f107 0208 	add.w	r2, r7, #8
 80202ae:	f107 030c 	add.w	r3, r7, #12
 80202b2:	4619      	mov	r1, r3
 80202b4:	6878      	ldr	r0, [r7, #4]
 80202b6:	f7ef fed3 	bl	8010060 <read_float>
 80202ba:	4603      	mov	r3, r0
 80202bc:	f083 0301 	eor.w	r3, r3, #1
 80202c0:	b2db      	uxtb	r3, r3
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d001      	beq.n	80202ca <read_int+0x32>
        return Status_BadNumberFormat;
 80202c6:	2302      	movs	r3, #2
 80202c8:	e01b      	b.n	8020302 <read_int+0x6a>

    if(parameter - truncf(parameter) != 0.0f)
 80202ca:	ed97 8a02 	vldr	s16, [r7, #8]
 80202ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80202d2:	eeb0 0a67 	vmov.f32	s0, s15
 80202d6:	f006 fe04 	bl	8026ee2 <truncf>
 80202da:	eef0 7a40 	vmov.f32	s15, s0
 80202de:	ee78 7a67 	vsub.f32	s15, s16, s15
 80202e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80202e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202ea:	d001      	beq.n	80202f0 <read_int+0x58>
        return Status_InvalidStatement;
 80202ec:	2303      	movs	r3, #3
 80202ee:	e008      	b.n	8020302 <read_int+0x6a>

    *value = (int32_t)parameter;
 80202f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80202f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80202f8:	ee17 2a90 	vmov	r2, s15
 80202fc:	683b      	ldr	r3, [r7, #0]
 80202fe:	601a      	str	r2, [r3, #0]

    return Status_OK;
 8020300:	2300      	movs	r3, #0
}
 8020302:	4618      	mov	r0, r3
 8020304:	3710      	adds	r7, #16
 8020306:	46bd      	mov	sp, r7
 8020308:	ecbd 8b02 	vpop	{d8}
 802030c:	bd80      	pop	{r7, pc}
	...

08020310 <system_command_help>:
    { "Q", output_memmap, { .noargs = On } },
#endif
};

void system_command_help (void)
{
 8020310:	b580      	push	{r7, lr}
 8020312:	b082      	sub	sp, #8
 8020314:	af00      	add	r7, sp, #0
    hal.stream.write("$I - output system information" ASCII_EOL);
 8020316:	4b80      	ldr	r3, [pc, #512]	; (8020518 <system_command_help+0x208>)
 8020318:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802031c:	487f      	ldr	r0, [pc, #508]	; (802051c <system_command_help+0x20c>)
 802031e:	4798      	blx	r3
    hal.stream.write("$I+ - output extended system information" ASCII_EOL);
 8020320:	4b7d      	ldr	r3, [pc, #500]	; (8020518 <system_command_help+0x208>)
 8020322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020326:	487e      	ldr	r0, [pc, #504]	; (8020520 <system_command_help+0x210>)
 8020328:	4798      	blx	r3
#if !DISABLE_BUILD_INFO_WRITE_COMMAND
    hal.stream.write("$I=<string> set build info string" ASCII_EOL);
 802032a:	4b7b      	ldr	r3, [pc, #492]	; (8020518 <system_command_help+0x208>)
 802032c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020330:	487c      	ldr	r0, [pc, #496]	; (8020524 <system_command_help+0x214>)
 8020332:	4798      	blx	r3
#endif
    hal.stream.write("$<n> - output setting <n> value" ASCII_EOL);
 8020334:	4b78      	ldr	r3, [pc, #480]	; (8020518 <system_command_help+0x208>)
 8020336:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802033a:	487b      	ldr	r0, [pc, #492]	; (8020528 <system_command_help+0x218>)
 802033c:	4798      	blx	r3
    hal.stream.write("$<n>=<value> - assign <value> to settings <n>" ASCII_EOL);
 802033e:	4b76      	ldr	r3, [pc, #472]	; (8020518 <system_command_help+0x208>)
 8020340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020344:	4879      	ldr	r0, [pc, #484]	; (802052c <system_command_help+0x21c>)
 8020346:	4798      	blx	r3
    hal.stream.write("$$ - output all setting values" ASCII_EOL);
 8020348:	4b73      	ldr	r3, [pc, #460]	; (8020518 <system_command_help+0x208>)
 802034a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802034e:	4878      	ldr	r0, [pc, #480]	; (8020530 <system_command_help+0x220>)
 8020350:	4798      	blx	r3
    hal.stream.write("$+ - output all setting values" ASCII_EOL);
 8020352:	4b71      	ldr	r3, [pc, #452]	; (8020518 <system_command_help+0x208>)
 8020354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020358:	4876      	ldr	r0, [pc, #472]	; (8020534 <system_command_help+0x224>)
 802035a:	4798      	blx	r3
    hal.stream.write("$$=<n> - output setting details for setting <n>" ASCII_EOL);
 802035c:	4b6e      	ldr	r3, [pc, #440]	; (8020518 <system_command_help+0x208>)
 802035e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020362:	4875      	ldr	r0, [pc, #468]	; (8020538 <system_command_help+0x228>)
 8020364:	4798      	blx	r3
    hal.stream.write("$# - output offsets, tool table, probing and home position" ASCII_EOL);
 8020366:	4b6c      	ldr	r3, [pc, #432]	; (8020518 <system_command_help+0x208>)
 8020368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802036c:	4873      	ldr	r0, [pc, #460]	; (802053c <system_command_help+0x22c>)
 802036e:	4798      	blx	r3
    hal.stream.write("$#=<n> - output value for parameter <n>" ASCII_EOL);
 8020370:	4b69      	ldr	r3, [pc, #420]	; (8020518 <system_command_help+0x208>)
 8020372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020376:	4872      	ldr	r0, [pc, #456]	; (8020540 <system_command_help+0x230>)
 8020378:	4798      	blx	r3
    hal.stream.write("$G - output parser state" ASCII_EOL);
 802037a:	4b67      	ldr	r3, [pc, #412]	; (8020518 <system_command_help+0x208>)
 802037c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020380:	4870      	ldr	r0, [pc, #448]	; (8020544 <system_command_help+0x234>)
 8020382:	4798      	blx	r3
    hal.stream.write("$N - output startup lines" ASCII_EOL);
 8020384:	4b64      	ldr	r3, [pc, #400]	; (8020518 <system_command_help+0x208>)
 8020386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802038a:	486f      	ldr	r0, [pc, #444]	; (8020548 <system_command_help+0x238>)
 802038c:	4798      	blx	r3
    if(settings.homing.flags.enabled)
 802038e:	4b6f      	ldr	r3, [pc, #444]	; (802054c <system_command_help+0x23c>)
 8020390:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8020394:	f003 0301 	and.w	r3, r3, #1
 8020398:	b2db      	uxtb	r3, r3
 802039a:	2b00      	cmp	r3, #0
 802039c:	d004      	beq.n	80203a8 <system_command_help+0x98>
        hal.stream.write("$H - home configured axes" ASCII_EOL);
 802039e:	4b5e      	ldr	r3, [pc, #376]	; (8020518 <system_command_help+0x208>)
 80203a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80203a4:	486a      	ldr	r0, [pc, #424]	; (8020550 <system_command_help+0x240>)
 80203a6:	4798      	blx	r3
    if(settings.homing.flags.single_axis_commands)
 80203a8:	4b68      	ldr	r3, [pc, #416]	; (802054c <system_command_help+0x23c>)
 80203aa:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80203ae:	f003 0302 	and.w	r3, r3, #2
 80203b2:	b2db      	uxtb	r3, r3
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	d004      	beq.n	80203c2 <system_command_help+0xb2>
        hal.stream.write("$H<axisletter> - home single axis" ASCII_EOL);
 80203b8:	4b57      	ldr	r3, [pc, #348]	; (8020518 <system_command_help+0x208>)
 80203ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80203be:	4865      	ldr	r0, [pc, #404]	; (8020554 <system_command_help+0x244>)
 80203c0:	4798      	blx	r3
    hal.stream.write("$HSS - report homing switches status" ASCII_EOL);
 80203c2:	4b55      	ldr	r3, [pc, #340]	; (8020518 <system_command_help+0x208>)
 80203c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80203c8:	4863      	ldr	r0, [pc, #396]	; (8020558 <system_command_help+0x248>)
 80203ca:	4798      	blx	r3
    hal.stream.write("$X - unlock machine" ASCII_EOL);
 80203cc:	4b52      	ldr	r3, [pc, #328]	; (8020518 <system_command_help+0x208>)
 80203ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80203d2:	4862      	ldr	r0, [pc, #392]	; (802055c <system_command_help+0x24c>)
 80203d4:	4798      	blx	r3
    hal.stream.write("$SLP - enter sleep mode" ASCII_EOL);
 80203d6:	4b50      	ldr	r3, [pc, #320]	; (8020518 <system_command_help+0x208>)
 80203d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80203dc:	4860      	ldr	r0, [pc, #384]	; (8020560 <system_command_help+0x250>)
 80203de:	4798      	blx	r3
    hal.stream.write("$HELP - output help topics" ASCII_EOL);
 80203e0:	4b4d      	ldr	r3, [pc, #308]	; (8020518 <system_command_help+0x208>)
 80203e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80203e6:	485f      	ldr	r0, [pc, #380]	; (8020564 <system_command_help+0x254>)
 80203e8:	4798      	blx	r3
    hal.stream.write("$HELP <topic> - output help for <topic>" ASCII_EOL);
 80203ea:	4b4b      	ldr	r3, [pc, #300]	; (8020518 <system_command_help+0x208>)
 80203ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80203f0:	485d      	ldr	r0, [pc, #372]	; (8020568 <system_command_help+0x258>)
 80203f2:	4798      	blx	r3
    hal.stream.write("$SPINDLES - output spindle list" ASCII_EOL);
 80203f4:	4b48      	ldr	r3, [pc, #288]	; (8020518 <system_command_help+0x208>)
 80203f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80203fa:	485c      	ldr	r0, [pc, #368]	; (802056c <system_command_help+0x25c>)
 80203fc:	4798      	blx	r3
#if ENABLE_RESTORE_NVS_WIPE_ALL
    hal.stream.write("$RST=* - restore/reset all settings" ASCII_EOL);
 80203fe:	4b46      	ldr	r3, [pc, #280]	; (8020518 <system_command_help+0x208>)
 8020400:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020404:	485a      	ldr	r0, [pc, #360]	; (8020570 <system_command_help+0x260>)
 8020406:	4798      	blx	r3
#endif
#if ENABLE_RESTORE_NVS_DEFAULT_SETTINGS
    hal.stream.write("$RST=$ - restore default settings" ASCII_EOL);
 8020408:	4b43      	ldr	r3, [pc, #268]	; (8020518 <system_command_help+0x208>)
 802040a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802040e:	4859      	ldr	r0, [pc, #356]	; (8020574 <system_command_help+0x264>)
 8020410:	4798      	blx	r3
#endif
#if ENABLE_RESTORE_NVS_DRIVER_PARAMETERS
    if(settings_get_details()->next)
 8020412:	f7f7 fff1 	bl	80183f8 <settings_get_details>
 8020416:	4603      	mov	r3, r0
 8020418:	699b      	ldr	r3, [r3, #24]
 802041a:	2b00      	cmp	r3, #0
 802041c:	d004      	beq.n	8020428 <system_command_help+0x118>
        hal.stream.write("$RST=& - restore driver and plugin default settings" ASCII_EOL);
 802041e:	4b3e      	ldr	r3, [pc, #248]	; (8020518 <system_command_help+0x208>)
 8020420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020424:	4854      	ldr	r0, [pc, #336]	; (8020578 <system_command_help+0x268>)
 8020426:	4798      	blx	r3
#endif
#if ENABLE_RESTORE_NVS_CLEAR_PARAMETERS
  #if N_TOOLS
    hal.stream.write("$RST=# - reset offsets and tool data" ASCII_EOL);
  #else
    hal.stream.write("$RST=# - reset offsets" ASCII_EOL);
 8020428:	4b3b      	ldr	r3, [pc, #236]	; (8020518 <system_command_help+0x208>)
 802042a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802042e:	4853      	ldr	r0, [pc, #332]	; (802057c <system_command_help+0x26c>)
 8020430:	4798      	blx	r3
  #endif
#endif
    spindle_ptrs_t *spindle = gc_spindle_get();
 8020432:	f7e5 fa75 	bl	8005920 <gc_spindle_get>
 8020436:	6078      	str	r0, [r7, #4]
    if(spindle->reset_data)
 8020438:	687b      	ldr	r3, [r7, #4]
 802043a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802043c:	2b00      	cmp	r3, #0
 802043e:	d004      	beq.n	802044a <system_command_help+0x13a>
        hal.stream.write("$SR - reset spindle encoder data" ASCII_EOL);
 8020440:	4b35      	ldr	r3, [pc, #212]	; (8020518 <system_command_help+0x208>)
 8020442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020446:	484e      	ldr	r0, [pc, #312]	; (8020580 <system_command_help+0x270>)
 8020448:	4798      	blx	r3
    if(spindle->get_data)
 802044a:	687b      	ldr	r3, [r7, #4]
 802044c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802044e:	2b00      	cmp	r3, #0
 8020450:	d004      	beq.n	802045c <system_command_help+0x14c>
        hal.stream.write("$SD - output spindle encoder data" ASCII_EOL);
 8020452:	4b31      	ldr	r3, [pc, #196]	; (8020518 <system_command_help+0x208>)
 8020454:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020458:	484a      	ldr	r0, [pc, #296]	; (8020584 <system_command_help+0x274>)
 802045a:	4798      	blx	r3

    hal.stream.write("$TLR - set tool offset reference" ASCII_EOL);
 802045c:	4b2e      	ldr	r3, [pc, #184]	; (8020518 <system_command_help+0x208>)
 802045e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020462:	4849      	ldr	r0, [pc, #292]	; (8020588 <system_command_help+0x278>)
 8020464:	4798      	blx	r3
    hal.stream.write("$TPW - probe tool plate" ASCII_EOL);
 8020466:	4b2c      	ldr	r3, [pc, #176]	; (8020518 <system_command_help+0x208>)
 8020468:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802046c:	4847      	ldr	r0, [pc, #284]	; (802058c <system_command_help+0x27c>)
 802046e:	4798      	blx	r3
    hal.stream.write("$EA - enumerate alarms" ASCII_EOL);
 8020470:	4b29      	ldr	r3, [pc, #164]	; (8020518 <system_command_help+0x208>)
 8020472:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020476:	4846      	ldr	r0, [pc, #280]	; (8020590 <system_command_help+0x280>)
 8020478:	4798      	blx	r3
    hal.stream.write("$EAG - enumerate alarms, Grbl formatted" ASCII_EOL);
 802047a:	4b27      	ldr	r3, [pc, #156]	; (8020518 <system_command_help+0x208>)
 802047c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020480:	4844      	ldr	r0, [pc, #272]	; (8020594 <system_command_help+0x284>)
 8020482:	4798      	blx	r3
    hal.stream.write("$EE - enumerate status codes" ASCII_EOL);
 8020484:	4b24      	ldr	r3, [pc, #144]	; (8020518 <system_command_help+0x208>)
 8020486:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802048a:	4843      	ldr	r0, [pc, #268]	; (8020598 <system_command_help+0x288>)
 802048c:	4798      	blx	r3
    hal.stream.write("$EEG - enumerate status codes, Grbl formatted" ASCII_EOL);
 802048e:	4b22      	ldr	r3, [pc, #136]	; (8020518 <system_command_help+0x208>)
 8020490:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020494:	4841      	ldr	r0, [pc, #260]	; (802059c <system_command_help+0x28c>)
 8020496:	4798      	blx	r3
    hal.stream.write("$ES - enumerate settings" ASCII_EOL);
 8020498:	4b1f      	ldr	r3, [pc, #124]	; (8020518 <system_command_help+0x208>)
 802049a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802049e:	4840      	ldr	r0, [pc, #256]	; (80205a0 <system_command_help+0x290>)
 80204a0:	4798      	blx	r3
    hal.stream.write("$ESG - enumerate settings, Grbl formatted" ASCII_EOL);
 80204a2:	4b1d      	ldr	r3, [pc, #116]	; (8020518 <system_command_help+0x208>)
 80204a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80204a8:	483e      	ldr	r0, [pc, #248]	; (80205a4 <system_command_help+0x294>)
 80204aa:	4798      	blx	r3
    hal.stream.write("$ESH- enumerate settings, grblHAL formatted" ASCII_EOL);
 80204ac:	4b1a      	ldr	r3, [pc, #104]	; (8020518 <system_command_help+0x208>)
 80204ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80204b2:	483d      	ldr	r0, [pc, #244]	; (80205a8 <system_command_help+0x298>)
 80204b4:	4798      	blx	r3
    hal.stream.write("$E* - enumerate alarms, status codes and settings" ASCII_EOL);
 80204b6:	4b18      	ldr	r3, [pc, #96]	; (8020518 <system_command_help+0x208>)
 80204b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80204bc:	483b      	ldr	r0, [pc, #236]	; (80205ac <system_command_help+0x29c>)
 80204be:	4798      	blx	r3
    if(hal.enumerate_pins)
 80204c0:	4b15      	ldr	r3, [pc, #84]	; (8020518 <system_command_help+0x208>)
 80204c2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d004      	beq.n	80204d4 <system_command_help+0x1c4>
        hal.stream.write("$PINS - enumerate pin bindings" ASCII_EOL);
 80204ca:	4b13      	ldr	r3, [pc, #76]	; (8020518 <system_command_help+0x208>)
 80204cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80204d0:	4837      	ldr	r0, [pc, #220]	; (80205b0 <system_command_help+0x2a0>)
 80204d2:	4798      	blx	r3
    hal.stream.write("$LEV - output last control signal events" ASCII_EOL);
 80204d4:	4b10      	ldr	r3, [pc, #64]	; (8020518 <system_command_help+0x208>)
 80204d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80204da:	4836      	ldr	r0, [pc, #216]	; (80205b4 <system_command_help+0x2a4>)
 80204dc:	4798      	blx	r3
    hal.stream.write("$LIM - output current limit pins state" ASCII_EOL);
 80204de:	4b0e      	ldr	r3, [pc, #56]	; (8020518 <system_command_help+0x208>)
 80204e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80204e4:	4834      	ldr	r0, [pc, #208]	; (80205b8 <system_command_help+0x2a8>)
 80204e6:	4798      	blx	r3
    if(hal.rtc.get_datetime) {
 80204e8:	4b0b      	ldr	r3, [pc, #44]	; (8020518 <system_command_help+0x208>)
 80204ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d009      	beq.n	8020506 <system_command_help+0x1f6>
        hal.stream.write("$RTC - output current time" ASCII_EOL);
 80204f2:	4b09      	ldr	r3, [pc, #36]	; (8020518 <system_command_help+0x208>)
 80204f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80204f8:	4830      	ldr	r0, [pc, #192]	; (80205bc <system_command_help+0x2ac>)
 80204fa:	4798      	blx	r3
        hal.stream.write("$RTC=<ISO8601 datetime> - set current time" ASCII_EOL);
 80204fc:	4b06      	ldr	r3, [pc, #24]	; (8020518 <system_command_help+0x208>)
 80204fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8020502:	482f      	ldr	r0, [pc, #188]	; (80205c0 <system_command_help+0x2b0>)
 8020504:	4798      	blx	r3
    }
#ifndef NO_SETTINGS_DESCRIPTIONS
    hal.stream.write("$SED=<n> - output settings description for setting <n>" ASCII_EOL);
 8020506:	4b04      	ldr	r3, [pc, #16]	; (8020518 <system_command_help+0x208>)
 8020508:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 802050c:	482d      	ldr	r0, [pc, #180]	; (80205c4 <system_command_help+0x2b4>)
 802050e:	4798      	blx	r3
#endif
}
 8020510:	bf00      	nop
 8020512:	3708      	adds	r7, #8
 8020514:	46bd      	mov	sp, r7
 8020516:	bd80      	pop	{r7, pc}
 8020518:	200016a0 	.word	0x200016a0
 802051c:	08031e98 	.word	0x08031e98
 8020520:	08031ebc 	.word	0x08031ebc
 8020524:	08031ee8 	.word	0x08031ee8
 8020528:	08031f0c 	.word	0x08031f0c
 802052c:	08031f30 	.word	0x08031f30
 8020530:	08031f60 	.word	0x08031f60
 8020534:	08031f84 	.word	0x08031f84
 8020538:	08031fa8 	.word	0x08031fa8
 802053c:	08031fdc 	.word	0x08031fdc
 8020540:	0803201c 	.word	0x0803201c
 8020544:	08032048 	.word	0x08032048
 8020548:	08032064 	.word	0x08032064
 802054c:	20001cf0 	.word	0x20001cf0
 8020550:	08032080 	.word	0x08032080
 8020554:	0803209c 	.word	0x0803209c
 8020558:	080320c0 	.word	0x080320c0
 802055c:	080320e8 	.word	0x080320e8
 8020560:	08032100 	.word	0x08032100
 8020564:	0803211c 	.word	0x0803211c
 8020568:	0803213c 	.word	0x0803213c
 802056c:	08032168 	.word	0x08032168
 8020570:	0803218c 	.word	0x0803218c
 8020574:	080321b4 	.word	0x080321b4
 8020578:	080321d8 	.word	0x080321d8
 802057c:	08032210 	.word	0x08032210
 8020580:	0803222c 	.word	0x0803222c
 8020584:	08032250 	.word	0x08032250
 8020588:	08032274 	.word	0x08032274
 802058c:	08032298 	.word	0x08032298
 8020590:	080322b4 	.word	0x080322b4
 8020594:	080322d0 	.word	0x080322d0
 8020598:	080322fc 	.word	0x080322fc
 802059c:	0803231c 	.word	0x0803231c
 80205a0:	0803234c 	.word	0x0803234c
 80205a4:	08032368 	.word	0x08032368
 80205a8:	08032394 	.word	0x08032394
 80205ac:	080323c4 	.word	0x080323c4
 80205b0:	080323f8 	.word	0x080323f8
 80205b4:	0803241c 	.word	0x0803241c
 80205b8:	08032448 	.word	0x08032448
 80205bc:	08032474 	.word	0x08032474
 80205c0:	08032494 	.word	0x08032494
 80205c4:	080324c4 	.word	0x080324c4

080205c8 <system_execute_line>:
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.

// NOTE: Code calling system_execute_line() needs to provide a line buffer of at least LINE_BUFFER_SIZE
status_code_t system_execute_line (char *line)
{
 80205c8:	b590      	push	{r4, r7, lr}
 80205ca:	b08f      	sub	sp, #60	; 0x3c
 80205cc:	af00      	add	r7, sp, #0
 80205ce:	6078      	str	r0, [r7, #4]
    if(line[1] == '\0') {
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	3301      	adds	r3, #1
 80205d4:	781b      	ldrb	r3, [r3, #0]
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d104      	bne.n	80205e4 <system_execute_line+0x1c>
        grbl.report.help_message();
 80205da:	4ba6      	ldr	r3, [pc, #664]	; (8020874 <system_execute_line+0x2ac>)
 80205dc:	685b      	ldr	r3, [r3, #4]
 80205de:	4798      	blx	r3
        return Status_OK;
 80205e0:	2300      	movs	r3, #0
 80205e2:	e163      	b.n	80208ac <system_execute_line+0x2e4>
    }

    sys_commands_t base = {
 80205e4:	232b      	movs	r3, #43	; 0x2b
 80205e6:	753b      	strb	r3, [r7, #20]
 80205e8:	4ba3      	ldr	r3, [pc, #652]	; (8020878 <system_execute_line+0x2b0>)
 80205ea:	61bb      	str	r3, [r7, #24]
        .n_commands = sizeof(sys_commands) / sizeof(sys_command_t),
        .commands = sys_commands,
        .on_get_commands = grbl.on_get_commands
 80205ec:	4ba1      	ldr	r3, [pc, #644]	; (8020874 <system_execute_line+0x2ac>)
 80205ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    sys_commands_t base = {
 80205f0:	61fb      	str	r3, [r7, #28]
    };

    status_code_t retval = Status_Unhandled;
 80205f2:	2354      	movs	r3, #84	; 0x54
 80205f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    char c, *s1, *s2;

    s1 = s2 = ++line;
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	3301      	adds	r3, #1
 80205fc:	607b      	str	r3, [r7, #4]
 80205fe:	687b      	ldr	r3, [r7, #4]
 8020600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020604:	633b      	str	r3, [r7, #48]	; 0x30

    c = *s1;
 8020606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020608:	781b      	ldrb	r3, [r3, #0]
 802060a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while(c && c != '=') {
 802060e:	e01e      	b.n	802064e <system_execute_line+0x86>
        if(c != ' ')
 8020610:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8020614:	2b20      	cmp	r3, #32
 8020616:	d013      	beq.n	8020640 <system_execute_line+0x78>
            *s2++ = CAPS(c);
 8020618:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 802061c:	2b60      	cmp	r3, #96	; 0x60
 802061e:	d909      	bls.n	8020634 <system_execute_line+0x6c>
 8020620:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8020624:	2b7a      	cmp	r3, #122	; 0x7a
 8020626:	d805      	bhi.n	8020634 <system_execute_line+0x6c>
 8020628:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 802062c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8020630:	b2da      	uxtb	r2, r3
 8020632:	e001      	b.n	8020638 <system_execute_line+0x70>
 8020634:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8020638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802063a:	1c59      	adds	r1, r3, #1
 802063c:	62f9      	str	r1, [r7, #44]	; 0x2c
 802063e:	701a      	strb	r2, [r3, #0]
        c = *++s1;
 8020640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020642:	3301      	adds	r3, #1
 8020644:	633b      	str	r3, [r7, #48]	; 0x30
 8020646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020648:	781b      	ldrb	r3, [r3, #0]
 802064a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while(c && c != '=') {
 802064e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8020652:	2b00      	cmp	r3, #0
 8020654:	d00a      	beq.n	802066c <system_execute_line+0xa4>
 8020656:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 802065a:	2b3d      	cmp	r3, #61	; 0x3d
 802065c:	d1d8      	bne.n	8020610 <system_execute_line+0x48>
    }

    while((c = *s1++))
 802065e:	e005      	b.n	802066c <system_execute_line+0xa4>
        *s2++ = c;
 8020660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020662:	1c5a      	adds	r2, r3, #1
 8020664:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020666:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 802066a:	701a      	strb	r2, [r3, #0]
    while((c = *s1++))
 802066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802066e:	1c5a      	adds	r2, r3, #1
 8020670:	633a      	str	r2, [r7, #48]	; 0x30
 8020672:	781b      	ldrb	r3, [r3, #0]
 8020674:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8020678:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 802067c:	2b00      	cmp	r3, #0
 802067e:	d1ef      	bne.n	8020660 <system_execute_line+0x98>

    *s2 = '\0';
 8020680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020682:	2200      	movs	r2, #0
 8020684:	701a      	strb	r2, [r3, #0]

    if(!strncmp(line, "HELP", 4))
 8020686:	2204      	movs	r2, #4
 8020688:	497c      	ldr	r1, [pc, #496]	; (802087c <system_execute_line+0x2b4>)
 802068a:	6878      	ldr	r0, [r7, #4]
 802068c:	f005 fbfb 	bl	8025e86 <strncmp>
 8020690:	4603      	mov	r3, r0
 8020692:	2b00      	cmp	r3, #0
 8020694:	d106      	bne.n	80206a4 <system_execute_line+0xdc>
        return report_help(&line[4]);
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	3304      	adds	r3, #4
 802069a:	4618      	mov	r0, r3
 802069c:	f7f3 fd80 	bl	80141a0 <report_help>
 80206a0:	4603      	mov	r3, r0
 80206a2:	e103      	b.n	80208ac <system_execute_line+0x2e4>

    char *args = strchr(line, '=');
 80206a4:	213d      	movs	r1, #61	; 0x3d
 80206a6:	6878      	ldr	r0, [r7, #4]
 80206a8:	f005 fbe0 	bl	8025e6c <strchr>
 80206ac:	62b8      	str	r0, [r7, #40]	; 0x28

    if(args)
 80206ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d004      	beq.n	80206be <system_execute_line+0xf6>
        *args++ = '\0';
 80206b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206b6:	1c5a      	adds	r2, r3, #1
 80206b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80206ba:	2200      	movs	r2, #0
 80206bc:	701a      	strb	r2, [r3, #0]

    uint_fast8_t idx;
    sys_commands_t *cmd = &base;
 80206be:	f107 0314 	add.w	r3, r7, #20
 80206c2:	623b      	str	r3, [r7, #32]
    do {
        for(idx = 0; idx < cmd->n_commands; idx++) {
 80206c4:	2300      	movs	r3, #0
 80206c6:	627b      	str	r3, [r7, #36]	; 0x24
 80206c8:	e04f      	b.n	802076a <system_execute_line+0x1a2>
            if(!strcmp(line, cmd->commands[idx].command)) {
 80206ca:	6a3b      	ldr	r3, [r7, #32]
 80206cc:	6859      	ldr	r1, [r3, #4]
 80206ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80206d0:	4613      	mov	r3, r2
 80206d2:	005b      	lsls	r3, r3, #1
 80206d4:	4413      	add	r3, r2
 80206d6:	009b      	lsls	r3, r3, #2
 80206d8:	440b      	add	r3, r1
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	4619      	mov	r1, r3
 80206de:	6878      	ldr	r0, [r7, #4]
 80206e0:	f7df fdca 	bl	8000278 <strcmp>
 80206e4:	4603      	mov	r3, r0
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	d13c      	bne.n	8020764 <system_execute_line+0x19c>
                if(sys.blocking_event && !cmd->commands[idx].flags.allow_blocking) {
 80206ea:	4b65      	ldr	r3, [pc, #404]	; (8020880 <system_execute_line+0x2b8>)
 80206ec:	795b      	ldrb	r3, [r3, #5]
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d011      	beq.n	8020716 <system_execute_line+0x14e>
 80206f2:	6a3b      	ldr	r3, [r7, #32]
 80206f4:	6859      	ldr	r1, [r3, #4]
 80206f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80206f8:	4613      	mov	r3, r2
 80206fa:	005b      	lsls	r3, r3, #1
 80206fc:	4413      	add	r3, r2
 80206fe:	009b      	lsls	r3, r3, #2
 8020700:	440b      	add	r3, r1
 8020702:	7a1b      	ldrb	r3, [r3, #8]
 8020704:	f003 0302 	and.w	r3, r3, #2
 8020708:	b2db      	uxtb	r3, r3
 802070a:	2b00      	cmp	r3, #0
 802070c:	d103      	bne.n	8020716 <system_execute_line+0x14e>
                    retval = Status_NotAllowedCriticalEvent;
 802070e:	234f      	movs	r3, #79	; 0x4f
 8020710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    break;
 8020714:	e031      	b.n	802077a <system_execute_line+0x1b2>
                } else if(!cmd->commands[idx].flags.noargs || args == NULL) {
 8020716:	6a3b      	ldr	r3, [r7, #32]
 8020718:	6859      	ldr	r1, [r3, #4]
 802071a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802071c:	4613      	mov	r3, r2
 802071e:	005b      	lsls	r3, r3, #1
 8020720:	4413      	add	r3, r2
 8020722:	009b      	lsls	r3, r3, #2
 8020724:	440b      	add	r3, r1
 8020726:	7a1b      	ldrb	r3, [r3, #8]
 8020728:	f003 0301 	and.w	r3, r3, #1
 802072c:	b2db      	uxtb	r3, r3
 802072e:	2b00      	cmp	r3, #0
 8020730:	d002      	beq.n	8020738 <system_execute_line+0x170>
 8020732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020734:	2b00      	cmp	r3, #0
 8020736:	d115      	bne.n	8020764 <system_execute_line+0x19c>
                    if((retval = cmd->commands[idx].execute(state_get(), args)) != Status_Unhandled)
 8020738:	6a3b      	ldr	r3, [r7, #32]
 802073a:	6859      	ldr	r1, [r3, #4]
 802073c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802073e:	4613      	mov	r3, r2
 8020740:	005b      	lsls	r3, r3, #1
 8020742:	4413      	add	r3, r2
 8020744:	009b      	lsls	r3, r3, #2
 8020746:	440b      	add	r3, r1
 8020748:	685c      	ldr	r4, [r3, #4]
 802074a:	f7fc fae9 	bl	801cd20 <state_get>
 802074e:	4603      	mov	r3, r0
 8020750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020752:	4618      	mov	r0, r3
 8020754:	47a0      	blx	r4
 8020756:	4603      	mov	r3, r0
 8020758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802075c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8020760:	2b54      	cmp	r3, #84	; 0x54
 8020762:	d109      	bne.n	8020778 <system_execute_line+0x1b0>
        for(idx = 0; idx < cmd->n_commands; idx++) {
 8020764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020766:	3301      	adds	r3, #1
 8020768:	627b      	str	r3, [r7, #36]	; 0x24
 802076a:	6a3b      	ldr	r3, [r7, #32]
 802076c:	781b      	ldrb	r3, [r3, #0]
 802076e:	461a      	mov	r2, r3
 8020770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020772:	4293      	cmp	r3, r2
 8020774:	d3a9      	bcc.n	80206ca <system_execute_line+0x102>
 8020776:	e000      	b.n	802077a <system_execute_line+0x1b2>
                        break;
 8020778:	bf00      	nop
                }
            }
        }
        cmd = retval == Status_Unhandled && cmd->on_get_commands ? cmd->on_get_commands() : NULL;
 802077a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802077e:	2b54      	cmp	r3, #84	; 0x54
 8020780:	d108      	bne.n	8020794 <system_execute_line+0x1cc>
 8020782:	6a3b      	ldr	r3, [r7, #32]
 8020784:	689b      	ldr	r3, [r3, #8]
 8020786:	2b00      	cmp	r3, #0
 8020788:	d004      	beq.n	8020794 <system_execute_line+0x1cc>
 802078a:	6a3b      	ldr	r3, [r7, #32]
 802078c:	689b      	ldr	r3, [r3, #8]
 802078e:	4798      	blx	r3
 8020790:	4603      	mov	r3, r0
 8020792:	e000      	b.n	8020796 <system_execute_line+0x1ce>
 8020794:	2300      	movs	r3, #0
 8020796:	623b      	str	r3, [r7, #32]
    } while(cmd);
 8020798:	6a3b      	ldr	r3, [r7, #32]
 802079a:	2b00      	cmp	r3, #0
 802079c:	d192      	bne.n	80206c4 <system_execute_line+0xfc>

    // Let user code have a peek at system commands before check for global setting
    if(retval == Status_Unhandled && grbl.on_unknown_sys_command) {
 802079e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80207a2:	2b54      	cmp	r3, #84	; 0x54
 80207a4:	d11f      	bne.n	80207e6 <system_execute_line+0x21e>
 80207a6:	4b33      	ldr	r3, [pc, #204]	; (8020874 <system_execute_line+0x2ac>)
 80207a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d01b      	beq.n	80207e6 <system_execute_line+0x21e>
        if(args)
 80207ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d005      	beq.n	80207c0 <system_execute_line+0x1f8>
            *(--args) = '=';
 80207b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207b6:	3b01      	subs	r3, #1
 80207b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80207ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207bc:	223d      	movs	r2, #61	; 0x3d
 80207be:	701a      	strb	r2, [r3, #0]

        retval = grbl.on_unknown_sys_command(state_get(), line);
 80207c0:	4b2c      	ldr	r3, [pc, #176]	; (8020874 <system_execute_line+0x2ac>)
 80207c2:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 80207c4:	f7fc faac 	bl	801cd20 <state_get>
 80207c8:	4603      	mov	r3, r0
 80207ca:	6879      	ldr	r1, [r7, #4]
 80207cc:	4618      	mov	r0, r3
 80207ce:	47a0      	blx	r4
 80207d0:	4603      	mov	r3, r0
 80207d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if(args)
 80207d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207d8:	2b00      	cmp	r3, #0
 80207da:	d004      	beq.n	80207e6 <system_execute_line+0x21e>
            *args++ = '\0';
 80207dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80207de:	1c5a      	adds	r2, r3, #1
 80207e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80207e2:	2200      	movs	r2, #0
 80207e4:	701a      	strb	r2, [r3, #0]
    }

    if (retval == Status_Unhandled) {
 80207e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80207ea:	2b54      	cmp	r3, #84	; 0x54
 80207ec:	d15c      	bne.n	80208a8 <system_execute_line+0x2e0>
        // Check for global setting, store if so
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 80207ee:	f7fc fa97 	bl	801cd20 <state_get>
 80207f2:	4603      	mov	r3, r0
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d007      	beq.n	8020808 <system_execute_line+0x240>
 80207f8:	f7fc fa92 	bl	801cd20 <state_get>
 80207fc:	4602      	mov	r2, r0
 80207fe:	f240 1303 	movw	r3, #259	; 0x103
 8020802:	4013      	ands	r3, r2
 8020804:	2b00      	cmp	r3, #0
 8020806:	d04c      	beq.n	80208a2 <system_execute_line+0x2da>
            uint_fast8_t counter = 0;
 8020808:	2300      	movs	r3, #0
 802080a:	613b      	str	r3, [r7, #16]
            float parameter;
            if(!read_float(line, &counter, &parameter))
 802080c:	f107 020c 	add.w	r2, r7, #12
 8020810:	f107 0310 	add.w	r3, r7, #16
 8020814:	4619      	mov	r1, r3
 8020816:	6878      	ldr	r0, [r7, #4]
 8020818:	f7ef fc22 	bl	8010060 <read_float>
 802081c:	4603      	mov	r3, r0
 802081e:	f083 0301 	eor.w	r3, r3, #1
 8020822:	b2db      	uxtb	r3, r3
 8020824:	2b00      	cmp	r3, #0
 8020826:	d003      	beq.n	8020830 <system_execute_line+0x268>
                retval = Status_BadNumberFormat;
 8020828:	2302      	movs	r3, #2
 802082a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 802082e:	e03b      	b.n	80208a8 <system_execute_line+0x2e0>
            else if(!isintf(parameter))
 8020830:	edd7 7a03 	vldr	s15, [r7, #12]
 8020834:	eeb0 0a67 	vmov.f32	s0, s15
 8020838:	f7ef fce2 	bl	8010200 <isintf>
 802083c:	4603      	mov	r3, r0
 802083e:	f083 0301 	eor.w	r3, r3, #1
 8020842:	b2db      	uxtb	r3, r3
 8020844:	2b00      	cmp	r3, #0
 8020846:	d003      	beq.n	8020850 <system_execute_line+0x288>
                retval = Status_InvalidStatement;
 8020848:	2303      	movs	r3, #3
 802084a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 802084e:	e02b      	b.n	80208a8 <system_execute_line+0x2e0>
            else if(args)
 8020850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020852:	2b00      	cmp	r3, #0
 8020854:	d016      	beq.n	8020884 <system_execute_line+0x2bc>
                retval = settings_store_setting((setting_id_t)parameter, args);
 8020856:	edd7 7a03 	vldr	s15, [r7, #12]
 802085a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802085e:	ee17 3a90 	vmov	r3, s15
 8020862:	b29b      	uxth	r3, r3
 8020864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020866:	4618      	mov	r0, r3
 8020868:	f7fa fc24 	bl	801b0b4 <settings_store_setting>
 802086c:	4603      	mov	r3, r0
 802086e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 8020872:	e019      	b.n	80208a8 <system_execute_line+0x2e0>
 8020874:	200015b8 	.word	0x200015b8
 8020878:	080348b0 	.word	0x080348b0
 802087c:	08031e20 	.word	0x08031e20
 8020880:	20001520 	.word	0x20001520
            else
                retval = report_grbl_setting((setting_id_t)parameter, NULL);
 8020884:	edd7 7a03 	vldr	s15, [r7, #12]
 8020888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802088c:	ee17 3a90 	vmov	r3, s15
 8020890:	b29b      	uxth	r3, r3
 8020892:	2100      	movs	r1, #0
 8020894:	4618      	mov	r0, r3
 8020896:	f7f3 fd81 	bl	801439c <report_grbl_setting>
 802089a:	4603      	mov	r3, r0
 802089c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))) {
 80208a0:	e002      	b.n	80208a8 <system_execute_line+0x2e0>
        } else
            retval = Status_IdleError;
 80208a2:	2308      	movs	r3, #8
 80208a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return retval;
 80208a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80208ac:	4618      	mov	r0, r3
 80208ae:	373c      	adds	r7, #60	; 0x3c
 80208b0:	46bd      	mov	sp, r7
 80208b2:	bd90      	pop	{r4, r7, pc}

080208b4 <jog>:

// System commands

static status_code_t jog (sys_state_t state, char *args)
{
 80208b4:	b580      	push	{r7, lr}
 80208b6:	b082      	sub	sp, #8
 80208b8:	af00      	add	r7, sp, #0
 80208ba:	6078      	str	r0, [r7, #4]
 80208bc:	6039      	str	r1, [r7, #0]
    if(!(state == STATE_IDLE || (state & (STATE_JOG|STATE_TOOL_CHANGE))))
 80208be:	687b      	ldr	r3, [r7, #4]
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	d006      	beq.n	80208d2 <jog+0x1e>
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	f403 7308 	and.w	r3, r3, #544	; 0x220
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d101      	bne.n	80208d2 <jog+0x1e>
         return Status_IdleError;
 80208ce:	2308      	movs	r3, #8
 80208d0:	e014      	b.n	80208fc <jog+0x48>

    if(args != NULL) {
 80208d2:	683b      	ldr	r3, [r7, #0]
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	d008      	beq.n	80208ea <jog+0x36>
        *(--args) = '=';
 80208d8:	683b      	ldr	r3, [r7, #0]
 80208da:	3b01      	subs	r3, #1
 80208dc:	603b      	str	r3, [r7, #0]
 80208de:	683b      	ldr	r3, [r7, #0]
 80208e0:	223d      	movs	r2, #61	; 0x3d
 80208e2:	701a      	strb	r2, [r3, #0]
        args -= 2;
 80208e4:	683b      	ldr	r3, [r7, #0]
 80208e6:	3b02      	subs	r3, #2
 80208e8:	603b      	str	r3, [r7, #0]
    }

    return args == NULL ? Status_InvalidStatement : gc_execute_block(args); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 80208ea:	683b      	ldr	r3, [r7, #0]
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	d004      	beq.n	80208fa <jog+0x46>
 80208f0:	6838      	ldr	r0, [r7, #0]
 80208f2:	f7e5 fa15 	bl	8005d20 <gc_execute_block>
 80208f6:	4603      	mov	r3, r0
 80208f8:	e000      	b.n	80208fc <jog+0x48>
 80208fa:	2303      	movs	r3, #3
}
 80208fc:	4618      	mov	r0, r3
 80208fe:	3708      	adds	r7, #8
 8020900:	46bd      	mov	sp, r7
 8020902:	bd80      	pop	{r7, pc}

08020904 <enumerate_alarms>:

static status_code_t enumerate_alarms (sys_state_t state, char *args)
{
 8020904:	b580      	push	{r7, lr}
 8020906:	b082      	sub	sp, #8
 8020908:	af00      	add	r7, sp, #0
 802090a:	6078      	str	r0, [r7, #4]
 802090c:	6039      	str	r1, [r7, #0]
    return report_alarm_details(false);
 802090e:	2000      	movs	r0, #0
 8020910:	f7f6 ff58 	bl	80177c4 <report_alarm_details>
 8020914:	4603      	mov	r3, r0
}
 8020916:	4618      	mov	r0, r3
 8020918:	3708      	adds	r7, #8
 802091a:	46bd      	mov	sp, r7
 802091c:	bd80      	pop	{r7, pc}

0802091e <enumerate_alarms_grblformatted>:

static status_code_t enumerate_alarms_grblformatted (sys_state_t state, char *args)
{
 802091e:	b580      	push	{r7, lr}
 8020920:	b082      	sub	sp, #8
 8020922:	af00      	add	r7, sp, #0
 8020924:	6078      	str	r0, [r7, #4]
 8020926:	6039      	str	r1, [r7, #0]
    return report_alarm_details(true);
 8020928:	2001      	movs	r0, #1
 802092a:	f7f6 ff4b 	bl	80177c4 <report_alarm_details>
 802092e:	4603      	mov	r3, r0
}
 8020930:	4618      	mov	r0, r3
 8020932:	3708      	adds	r7, #8
 8020934:	46bd      	mov	sp, r7
 8020936:	bd80      	pop	{r7, pc}

08020938 <enumerate_errors>:

static status_code_t enumerate_errors (sys_state_t state, char *args)
{
 8020938:	b580      	push	{r7, lr}
 802093a:	b082      	sub	sp, #8
 802093c:	af00      	add	r7, sp, #0
 802093e:	6078      	str	r0, [r7, #4]
 8020940:	6039      	str	r1, [r7, #0]
    return report_error_details(false);
 8020942:	2000      	movs	r0, #0
 8020944:	f7f7 f84a 	bl	80179dc <report_error_details>
 8020948:	4603      	mov	r3, r0
}
 802094a:	4618      	mov	r0, r3
 802094c:	3708      	adds	r7, #8
 802094e:	46bd      	mov	sp, r7
 8020950:	bd80      	pop	{r7, pc}

08020952 <enumerate_errors_grblformatted>:

static status_code_t enumerate_errors_grblformatted (sys_state_t state, char *args)
{
 8020952:	b580      	push	{r7, lr}
 8020954:	b082      	sub	sp, #8
 8020956:	af00      	add	r7, sp, #0
 8020958:	6078      	str	r0, [r7, #4]
 802095a:	6039      	str	r1, [r7, #0]
    return report_error_details(true);
 802095c:	2001      	movs	r0, #1
 802095e:	f7f7 f83d 	bl	80179dc <report_error_details>
 8020962:	4603      	mov	r3, r0
}
 8020964:	4618      	mov	r0, r3
 8020966:	3708      	adds	r7, #8
 8020968:	46bd      	mov	sp, r7
 802096a:	bd80      	pop	{r7, pc}

0802096c <enumerate_groups>:

static status_code_t enumerate_groups (sys_state_t state, char *args)
{
 802096c:	b580      	push	{r7, lr}
 802096e:	b082      	sub	sp, #8
 8020970:	af00      	add	r7, sp, #0
 8020972:	6078      	str	r0, [r7, #4]
 8020974:	6039      	str	r1, [r7, #0]
    return report_setting_group_details(true, NULL);
 8020976:	2100      	movs	r1, #0
 8020978:	2001      	movs	r0, #1
 802097a:	f7f7 f969 	bl	8017c50 <report_setting_group_details>
 802097e:	4603      	mov	r3, r0
}
 8020980:	4618      	mov	r0, r3
 8020982:	3708      	adds	r7, #8
 8020984:	46bd      	mov	sp, r7
 8020986:	bd80      	pop	{r7, pc}

08020988 <enumerate_settings>:

static status_code_t enumerate_settings (sys_state_t state, char *args)
{
 8020988:	b580      	push	{r7, lr}
 802098a:	b082      	sub	sp, #8
 802098c:	af00      	add	r7, sp, #0
 802098e:	6078      	str	r0, [r7, #4]
 8020990:	6039      	str	r1, [r7, #0]
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 8020992:	2200      	movs	r2, #0
 8020994:	f240 218a 	movw	r1, #650	; 0x28a
 8020998:	2000      	movs	r0, #0
 802099a:	f7f6 fdf1 	bl	8017580 <report_settings_details>
 802099e:	4603      	mov	r3, r0
}
 80209a0:	4618      	mov	r0, r3
 80209a2:	3708      	adds	r7, #8
 80209a4:	46bd      	mov	sp, r7
 80209a6:	bd80      	pop	{r7, pc}

080209a8 <enumerate_settings_grblformatted>:

static status_code_t enumerate_settings_grblformatted (sys_state_t state, char *args)
{
 80209a8:	b580      	push	{r7, lr}
 80209aa:	b082      	sub	sp, #8
 80209ac:	af00      	add	r7, sp, #0
 80209ae:	6078      	str	r0, [r7, #4]
 80209b0:	6039      	str	r1, [r7, #0]
    return report_settings_details(SettingsFormat_Grbl, Setting_SettingsAll, Group_All);
 80209b2:	2200      	movs	r2, #0
 80209b4:	f240 218a 	movw	r1, #650	; 0x28a
 80209b8:	2002      	movs	r0, #2
 80209ba:	f7f6 fde1 	bl	8017580 <report_settings_details>
 80209be:	4603      	mov	r3, r0
}
 80209c0:	4618      	mov	r0, r3
 80209c2:	3708      	adds	r7, #8
 80209c4:	46bd      	mov	sp, r7
 80209c6:	bd80      	pop	{r7, pc}

080209c8 <enumerate_settings_halformatted>:

static status_code_t enumerate_settings_halformatted (sys_state_t state, char *args)
{
 80209c8:	b580      	push	{r7, lr}
 80209ca:	b082      	sub	sp, #8
 80209cc:	af00      	add	r7, sp, #0
 80209ce:	6078      	str	r0, [r7, #4]
 80209d0:	6039      	str	r1, [r7, #0]
    return report_settings_details(SettingsFormat_grblHAL, Setting_SettingsAll, Group_All);
 80209d2:	2200      	movs	r2, #0
 80209d4:	f240 218a 	movw	r1, #650	; 0x28a
 80209d8:	2003      	movs	r0, #3
 80209da:	f7f6 fdd1 	bl	8017580 <report_settings_details>
 80209de:	4603      	mov	r3, r0
}
 80209e0:	4618      	mov	r0, r3
 80209e2:	3708      	adds	r7, #8
 80209e4:	46bd      	mov	sp, r7
 80209e6:	bd80      	pop	{r7, pc}

080209e8 <enumerate_all>:

static status_code_t enumerate_all (sys_state_t state, char *args)
{
 80209e8:	b580      	push	{r7, lr}
 80209ea:	b082      	sub	sp, #8
 80209ec:	af00      	add	r7, sp, #0
 80209ee:	6078      	str	r0, [r7, #4]
 80209f0:	6039      	str	r1, [r7, #0]
    report_alarm_details(false);
 80209f2:	2000      	movs	r0, #0
 80209f4:	f7f6 fee6 	bl	80177c4 <report_alarm_details>
    report_error_details(false);
 80209f8:	2000      	movs	r0, #0
 80209fa:	f7f6 ffef 	bl	80179dc <report_error_details>
    report_setting_group_details(true, NULL);
 80209fe:	2100      	movs	r1, #0
 8020a00:	2001      	movs	r0, #1
 8020a02:	f7f7 f925 	bl	8017c50 <report_setting_group_details>
    return report_settings_details(SettingsFormat_MachineReadable, Setting_SettingsAll, Group_All);
 8020a06:	2200      	movs	r2, #0
 8020a08:	f240 218a 	movw	r1, #650	; 0x28a
 8020a0c:	2000      	movs	r0, #0
 8020a0e:	f7f6 fdb7 	bl	8017580 <report_settings_details>
 8020a12:	4603      	mov	r3, r0
}
 8020a14:	4618      	mov	r0, r3
 8020a16:	3708      	adds	r7, #8
 8020a18:	46bd      	mov	sp, r7
 8020a1a:	bd80      	pop	{r7, pc}

08020a1c <enumerate_pins>:

static status_code_t enumerate_pins (sys_state_t state, char *args)
{
 8020a1c:	b580      	push	{r7, lr}
 8020a1e:	b082      	sub	sp, #8
 8020a20:	af00      	add	r7, sp, #0
 8020a22:	6078      	str	r0, [r7, #4]
 8020a24:	6039      	str	r1, [r7, #0]
    return report_pins(state, args);
 8020a26:	6839      	ldr	r1, [r7, #0]
 8020a28:	6878      	ldr	r0, [r7, #4]
 8020a2a:	f7f7 fb89 	bl	8018140 <report_pins>
 8020a2e:	4603      	mov	r3, r0
}
 8020a30:	4618      	mov	r0, r3
 8020a32:	3708      	adds	r7, #8
 8020a34:	46bd      	mov	sp, r7
 8020a36:	bd80      	pop	{r7, pc}

08020a38 <output_settings>:

static status_code_t output_settings (sys_state_t state, char *args)
{
 8020a38:	b580      	push	{r7, lr}
 8020a3a:	b084      	sub	sp, #16
 8020a3c:	af00      	add	r7, sp, #0
 8020a3e:	6078      	str	r0, [r7, #4]
 8020a40:	6039      	str	r1, [r7, #0]
    status_code_t retval = Status_OK;
 8020a42:	2300      	movs	r3, #0
 8020a44:	73fb      	strb	r3, [r7, #15]

    if(args) {
 8020a46:	683b      	ldr	r3, [r7, #0]
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	d017      	beq.n	8020a7c <output_settings+0x44>
        int32_t id;
        retval = read_int(args, &id);
 8020a4c:	f107 0308 	add.w	r3, r7, #8
 8020a50:	4619      	mov	r1, r3
 8020a52:	6838      	ldr	r0, [r7, #0]
 8020a54:	f7ff fc20 	bl	8020298 <read_int>
 8020a58:	4603      	mov	r3, r0
 8020a5a:	73fb      	strb	r3, [r7, #15]
        if(retval == Status_OK && id >= 0)
 8020a5c:	7bfb      	ldrb	r3, [r7, #15]
 8020a5e:	2b00      	cmp	r3, #0
 8020a60:	d118      	bne.n	8020a94 <output_settings+0x5c>
 8020a62:	68bb      	ldr	r3, [r7, #8]
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	db15      	blt.n	8020a94 <output_settings+0x5c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 8020a68:	68bb      	ldr	r3, [r7, #8]
 8020a6a:	b29b      	uxth	r3, r3
 8020a6c:	2200      	movs	r2, #0
 8020a6e:	4619      	mov	r1, r3
 8020a70:	2001      	movs	r0, #1
 8020a72:	f7f6 fd85 	bl	8017580 <report_settings_details>
 8020a76:	4603      	mov	r3, r0
 8020a78:	73fb      	strb	r3, [r7, #15]
 8020a7a:	e00b      	b.n	8020a94 <output_settings+0x5c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	f003 0318 	and.w	r3, r3, #24
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	d002      	beq.n	8020a8c <output_settings+0x54>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 8020a86:	2308      	movs	r3, #8
 8020a88:	73fb      	strb	r3, [r7, #15]
 8020a8a:	e003      	b.n	8020a94 <output_settings+0x5c>
    else
#if COMPATIBILITY_LEVEL <= 1
    report_grbl_settings(true, NULL);
 8020a8c:	2100      	movs	r1, #0
 8020a8e:	2001      	movs	r0, #1
 8020a90:	f7f3 fcde 	bl	8014450 <report_grbl_settings>
#else
    report_grbl_settings(false, NULL);
#endif

    return retval;
 8020a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8020a96:	4618      	mov	r0, r3
 8020a98:	3710      	adds	r7, #16
 8020a9a:	46bd      	mov	sp, r7
 8020a9c:	bd80      	pop	{r7, pc}

08020a9e <output_setting_description>:

#ifndef NO_SETTINGS_DESCRIPTIONS

static status_code_t output_setting_description (sys_state_t state, char *args)
{
 8020a9e:	b580      	push	{r7, lr}
 8020aa0:	b084      	sub	sp, #16
 8020aa2:	af00      	add	r7, sp, #0
 8020aa4:	6078      	str	r0, [r7, #4]
 8020aa6:	6039      	str	r1, [r7, #0]
    status_code_t retval = Status_BadNumberFormat;
 8020aa8:	2302      	movs	r3, #2
 8020aaa:	73fb      	strb	r3, [r7, #15]

    if(args) {
 8020aac:	683b      	ldr	r3, [r7, #0]
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	d015      	beq.n	8020ade <output_setting_description+0x40>
        int32_t id;
        retval = read_int(args, &id);
 8020ab2:	f107 0308 	add.w	r3, r7, #8
 8020ab6:	4619      	mov	r1, r3
 8020ab8:	6838      	ldr	r0, [r7, #0]
 8020aba:	f7ff fbed 	bl	8020298 <read_int>
 8020abe:	4603      	mov	r3, r0
 8020ac0:	73fb      	strb	r3, [r7, #15]
        if(retval == Status_OK && id >= 0)
 8020ac2:	7bfb      	ldrb	r3, [r7, #15]
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d10a      	bne.n	8020ade <output_setting_description+0x40>
 8020ac8:	68bb      	ldr	r3, [r7, #8]
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	db07      	blt.n	8020ade <output_setting_description+0x40>
            retval = report_setting_description(SettingsFormat_MachineReadable, (setting_id_t)id);
 8020ace:	68bb      	ldr	r3, [r7, #8]
 8020ad0:	b29b      	uxth	r3, r3
 8020ad2:	4619      	mov	r1, r3
 8020ad4:	2000      	movs	r0, #0
 8020ad6:	f7f6 fd87 	bl	80175e8 <report_setting_description>
 8020ada:	4603      	mov	r3, r0
 8020adc:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 8020ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8020ae0:	4618      	mov	r0, r3
 8020ae2:	3710      	adds	r7, #16
 8020ae4:	46bd      	mov	sp, r7
 8020ae6:	bd80      	pop	{r7, pc}

08020ae8 <output_all_settings>:

#endif

static status_code_t output_all_settings (sys_state_t state, char *args)
{
 8020ae8:	b580      	push	{r7, lr}
 8020aea:	b084      	sub	sp, #16
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	6078      	str	r0, [r7, #4]
 8020af0:	6039      	str	r1, [r7, #0]
    status_code_t retval = Status_OK;
 8020af2:	2300      	movs	r3, #0
 8020af4:	73fb      	strb	r3, [r7, #15]

    if(args) {
 8020af6:	683b      	ldr	r3, [r7, #0]
 8020af8:	2b00      	cmp	r3, #0
 8020afa:	d017      	beq.n	8020b2c <output_all_settings+0x44>
        int32_t id;
        retval = read_int(args, &id);
 8020afc:	f107 0308 	add.w	r3, r7, #8
 8020b00:	4619      	mov	r1, r3
 8020b02:	6838      	ldr	r0, [r7, #0]
 8020b04:	f7ff fbc8 	bl	8020298 <read_int>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	73fb      	strb	r3, [r7, #15]
        if(retval == Status_OK && id >= 0)
 8020b0c:	7bfb      	ldrb	r3, [r7, #15]
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d118      	bne.n	8020b44 <output_all_settings+0x5c>
 8020b12:	68bb      	ldr	r3, [r7, #8]
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	db15      	blt.n	8020b44 <output_all_settings+0x5c>
            retval = report_settings_details(SettingsFormat_HumanReadable, (setting_id_t)id, Group_All);
 8020b18:	68bb      	ldr	r3, [r7, #8]
 8020b1a:	b29b      	uxth	r3, r3
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	4619      	mov	r1, r3
 8020b20:	2001      	movs	r0, #1
 8020b22:	f7f6 fd2d 	bl	8017580 <report_settings_details>
 8020b26:	4603      	mov	r3, r0
 8020b28:	73fb      	strb	r3, [r7, #15]
 8020b2a:	e00b      	b.n	8020b44 <output_all_settings+0x5c>
    } else if (state & (STATE_CYCLE|STATE_HOLD))
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	f003 0318 	and.w	r3, r3, #24
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d002      	beq.n	8020b3c <output_all_settings+0x54>
        retval = Status_IdleError; // Block during cycle. Takes too long to print.
 8020b36:	2308      	movs	r3, #8
 8020b38:	73fb      	strb	r3, [r7, #15]
 8020b3a:	e003      	b.n	8020b44 <output_all_settings+0x5c>
    else
        report_grbl_settings(true, NULL);
 8020b3c:	2100      	movs	r1, #0
 8020b3e:	2001      	movs	r0, #1
 8020b40:	f7f3 fc86 	bl	8014450 <report_grbl_settings>

    return retval;
 8020b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8020b46:	4618      	mov	r0, r3
 8020b48:	3710      	adds	r7, #16
 8020b4a:	46bd      	mov	sp, r7
 8020b4c:	bd80      	pop	{r7, pc}

08020b4e <output_parser_state>:

static status_code_t output_parser_state (sys_state_t state, char *args)
{
 8020b4e:	b580      	push	{r7, lr}
 8020b50:	b082      	sub	sp, #8
 8020b52:	af00      	add	r7, sp, #0
 8020b54:	6078      	str	r0, [r7, #4]
 8020b56:	6039      	str	r1, [r7, #0]
    report_gcode_modes();
 8020b58:	f7f3 ffb0 	bl	8014abc <report_gcode_modes>
    system_add_rt_report(Report_Homed); // Report homed state on next realtime report
 8020b5c:	2004      	movs	r0, #4
 8020b5e:	f000 fd33 	bl	80215c8 <system_add_rt_report>

    return Status_OK;
 8020b62:	2300      	movs	r3, #0
}
 8020b64:	4618      	mov	r0, r3
 8020b66:	3708      	adds	r7, #8
 8020b68:	46bd      	mov	sp, r7
 8020b6a:	bd80      	pop	{r7, pc}

08020b6c <toggle_single_block>:

static status_code_t toggle_single_block (sys_state_t state, char *args)
{
 8020b6c:	b580      	push	{r7, lr}
 8020b6e:	b082      	sub	sp, #8
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	6078      	str	r0, [r7, #4]
 8020b74:	6039      	str	r1, [r7, #0]
    sys.flags.single_block = !sys.flags.single_block;
 8020b76:	4b0f      	ldr	r3, [pc, #60]	; (8020bb4 <toggle_single_block+0x48>)
 8020b78:	7d9b      	ldrb	r3, [r3, #22]
 8020b7a:	b25b      	sxtb	r3, r3
 8020b7c:	43db      	mvns	r3, r3
 8020b7e:	b2db      	uxtb	r3, r3
 8020b80:	09db      	lsrs	r3, r3, #7
 8020b82:	b2d9      	uxtb	r1, r3
 8020b84:	4a0b      	ldr	r2, [pc, #44]	; (8020bb4 <toggle_single_block+0x48>)
 8020b86:	7d93      	ldrb	r3, [r2, #22]
 8020b88:	f361 13c7 	bfi	r3, r1, #7, #1
 8020b8c:	7593      	strb	r3, [r2, #22]
    grbl.report.feedback_message(sys.flags.single_block ? Message_Enabled : Message_Disabled);
 8020b8e:	4b0a      	ldr	r3, [pc, #40]	; (8020bb8 <toggle_single_block+0x4c>)
 8020b90:	68db      	ldr	r3, [r3, #12]
 8020b92:	4a08      	ldr	r2, [pc, #32]	; (8020bb4 <toggle_single_block+0x48>)
 8020b94:	7d92      	ldrb	r2, [r2, #22]
 8020b96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8020b9a:	b2d2      	uxtb	r2, r2
 8020b9c:	2a00      	cmp	r2, #0
 8020b9e:	d001      	beq.n	8020ba4 <toggle_single_block+0x38>
 8020ba0:	2204      	movs	r2, #4
 8020ba2:	e000      	b.n	8020ba6 <toggle_single_block+0x3a>
 8020ba4:	2205      	movs	r2, #5
 8020ba6:	4610      	mov	r0, r2
 8020ba8:	4798      	blx	r3

    return Status_OK;
 8020baa:	2300      	movs	r3, #0
}
 8020bac:	4618      	mov	r0, r3
 8020bae:	3708      	adds	r7, #8
 8020bb0:	46bd      	mov	sp, r7
 8020bb2:	bd80      	pop	{r7, pc}
 8020bb4:	20001520 	.word	0x20001520
 8020bb8:	200015b8 	.word	0x200015b8

08020bbc <toggle_block_delete>:

static status_code_t toggle_block_delete (sys_state_t state, char *args)
{
 8020bbc:	b580      	push	{r7, lr}
 8020bbe:	b082      	sub	sp, #8
 8020bc0:	af00      	add	r7, sp, #0
 8020bc2:	6078      	str	r0, [r7, #4]
 8020bc4:	6039      	str	r1, [r7, #0]
    sys.flags.block_delete_enabled = !sys.flags.block_delete_enabled;
 8020bc6:	4b11      	ldr	r3, [pc, #68]	; (8020c0c <toggle_block_delete+0x50>)
 8020bc8:	7d9b      	ldrb	r3, [r3, #22]
 8020bca:	f003 0310 	and.w	r3, r3, #16
 8020bce:	b2db      	uxtb	r3, r3
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	bf0c      	ite	eq
 8020bd4:	2301      	moveq	r3, #1
 8020bd6:	2300      	movne	r3, #0
 8020bd8:	b2d9      	uxtb	r1, r3
 8020bda:	4a0c      	ldr	r2, [pc, #48]	; (8020c0c <toggle_block_delete+0x50>)
 8020bdc:	7d93      	ldrb	r3, [r2, #22]
 8020bde:	f361 1304 	bfi	r3, r1, #4, #1
 8020be2:	7593      	strb	r3, [r2, #22]
    grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 8020be4:	4b0a      	ldr	r3, [pc, #40]	; (8020c10 <toggle_block_delete+0x54>)
 8020be6:	68db      	ldr	r3, [r3, #12]
 8020be8:	4a08      	ldr	r2, [pc, #32]	; (8020c0c <toggle_block_delete+0x50>)
 8020bea:	7d92      	ldrb	r2, [r2, #22]
 8020bec:	f002 0210 	and.w	r2, r2, #16
 8020bf0:	b2d2      	uxtb	r2, r2
 8020bf2:	2a00      	cmp	r2, #0
 8020bf4:	d001      	beq.n	8020bfa <toggle_block_delete+0x3e>
 8020bf6:	2204      	movs	r2, #4
 8020bf8:	e000      	b.n	8020bfc <toggle_block_delete+0x40>
 8020bfa:	2205      	movs	r2, #5
 8020bfc:	4610      	mov	r0, r2
 8020bfe:	4798      	blx	r3

    return Status_OK;
 8020c00:	2300      	movs	r3, #0
}
 8020c02:	4618      	mov	r0, r3
 8020c04:	3708      	adds	r7, #8
 8020c06:	46bd      	mov	sp, r7
 8020c08:	bd80      	pop	{r7, pc}
 8020c0a:	bf00      	nop
 8020c0c:	20001520 	.word	0x20001520
 8020c10:	200015b8 	.word	0x200015b8

08020c14 <toggle_optional_stop>:

static status_code_t toggle_optional_stop (sys_state_t state, char *args)
{
 8020c14:	b580      	push	{r7, lr}
 8020c16:	b082      	sub	sp, #8
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
 8020c1c:	6039      	str	r1, [r7, #0]
    sys.flags.optional_stop_disable = !sys.flags.optional_stop_disable;
 8020c1e:	4b11      	ldr	r3, [pc, #68]	; (8020c64 <toggle_optional_stop+0x50>)
 8020c20:	7d9b      	ldrb	r3, [r3, #22]
 8020c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020c26:	b2db      	uxtb	r3, r3
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	bf0c      	ite	eq
 8020c2c:	2301      	moveq	r3, #1
 8020c2e:	2300      	movne	r3, #0
 8020c30:	b2d9      	uxtb	r1, r3
 8020c32:	4a0c      	ldr	r2, [pc, #48]	; (8020c64 <toggle_optional_stop+0x50>)
 8020c34:	7d93      	ldrb	r3, [r2, #22]
 8020c36:	f361 1386 	bfi	r3, r1, #6, #1
 8020c3a:	7593      	strb	r3, [r2, #22]
    grbl.report.feedback_message(sys.flags.block_delete_enabled ? Message_Enabled : Message_Disabled);
 8020c3c:	4b0a      	ldr	r3, [pc, #40]	; (8020c68 <toggle_optional_stop+0x54>)
 8020c3e:	68db      	ldr	r3, [r3, #12]
 8020c40:	4a08      	ldr	r2, [pc, #32]	; (8020c64 <toggle_optional_stop+0x50>)
 8020c42:	7d92      	ldrb	r2, [r2, #22]
 8020c44:	f002 0210 	and.w	r2, r2, #16
 8020c48:	b2d2      	uxtb	r2, r2
 8020c4a:	2a00      	cmp	r2, #0
 8020c4c:	d001      	beq.n	8020c52 <toggle_optional_stop+0x3e>
 8020c4e:	2204      	movs	r2, #4
 8020c50:	e000      	b.n	8020c54 <toggle_optional_stop+0x40>
 8020c52:	2205      	movs	r2, #5
 8020c54:	4610      	mov	r0, r2
 8020c56:	4798      	blx	r3

    return Status_OK;
 8020c58:	2300      	movs	r3, #0
}
 8020c5a:	4618      	mov	r0, r3
 8020c5c:	3708      	adds	r7, #8
 8020c5e:	46bd      	mov	sp, r7
 8020c60:	bd80      	pop	{r7, pc}
 8020c62:	bf00      	nop
 8020c64:	20001520 	.word	0x20001520
 8020c68:	200015b8 	.word	0x200015b8

08020c6c <check_mode>:

static status_code_t check_mode (sys_state_t state, char *args)
{
 8020c6c:	b580      	push	{r7, lr}
 8020c6e:	b082      	sub	sp, #8
 8020c70:	af00      	add	r7, sp, #0
 8020c72:	6078      	str	r0, [r7, #4]
 8020c74:	6039      	str	r1, [r7, #0]
    if (state == STATE_CHECK_MODE) {
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	2b02      	cmp	r3, #2
 8020c7a:	d106      	bne.n	8020c8a <check_mode+0x1e>
        // Perform reset when toggling off. Check g-code mode should only work if Grbl
        // is idle and ready, regardless of alarm locks. This is mainly to keep things
        // simple and consistent.
        mc_reset();
 8020c7c:	f7ee fa38 	bl	800f0f0 <mc_reset>
        grbl.report.feedback_message(Message_Disabled);
 8020c80:	4b0b      	ldr	r3, [pc, #44]	; (8020cb0 <check_mode+0x44>)
 8020c82:	68db      	ldr	r3, [r3, #12]
 8020c84:	2005      	movs	r0, #5
 8020c86:	4798      	blx	r3
 8020c88:	e00c      	b.n	8020ca4 <check_mode+0x38>
    } else if (state == STATE_IDLE) { // Requires idle mode.
 8020c8a:	687b      	ldr	r3, [r7, #4]
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	d107      	bne.n	8020ca0 <check_mode+0x34>
        state_set(STATE_CHECK_MODE);
 8020c90:	2002      	movs	r0, #2
 8020c92:	f7fc f851 	bl	801cd38 <state_set>
        grbl.report.feedback_message(Message_Enabled);
 8020c96:	4b06      	ldr	r3, [pc, #24]	; (8020cb0 <check_mode+0x44>)
 8020c98:	68db      	ldr	r3, [r3, #12]
 8020c9a:	2004      	movs	r0, #4
 8020c9c:	4798      	blx	r3
 8020c9e:	e001      	b.n	8020ca4 <check_mode+0x38>
    } else
        return Status_IdleError;
 8020ca0:	2308      	movs	r3, #8
 8020ca2:	e000      	b.n	8020ca6 <check_mode+0x3a>

    return Status_OK;
 8020ca4:	2300      	movs	r3, #0
}
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	3708      	adds	r7, #8
 8020caa:	46bd      	mov	sp, r7
 8020cac:	bd80      	pop	{r7, pc}
 8020cae:	bf00      	nop
 8020cb0:	200015b8 	.word	0x200015b8

08020cb4 <disable_lock>:

static status_code_t disable_lock (sys_state_t state, char *args)
{
 8020cb4:	b580      	push	{r7, lr}
 8020cb6:	b086      	sub	sp, #24
 8020cb8:	af00      	add	r7, sp, #0
 8020cba:	6078      	str	r0, [r7, #4]
 8020cbc:	6039      	str	r1, [r7, #0]
    status_code_t retval = Status_OK;
 8020cbe:	2300      	movs	r3, #0
 8020cc0:	75fb      	strb	r3, [r7, #23]

    if(state & (STATE_ALARM|STATE_ESTOP)) {
 8020cc2:	687a      	ldr	r2, [r7, #4]
 8020cc4:	f240 1301 	movw	r3, #257	; 0x101
 8020cc8:	4013      	ands	r3, r2
 8020cca:	2b00      	cmp	r3, #0
 8020ccc:	d055      	beq.n	8020d7a <disable_lock+0xc6>

        control_signals_t control_signals = hal.control.get_state();
 8020cce:	4b2d      	ldr	r3, [pc, #180]	; (8020d84 <disable_lock+0xd0>)
 8020cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020cd2:	4798      	blx	r3
 8020cd4:	4603      	mov	r3, r0
 8020cd6:	81bb      	strh	r3, [r7, #12]

        // Block if self-test failed
        if(sys.alarm == Alarm_SelftestFailed)
 8020cd8:	4b2b      	ldr	r3, [pc, #172]	; (8020d88 <disable_lock+0xd4>)
 8020cda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8020cde:	2b10      	cmp	r3, #16
 8020ce0:	d102      	bne.n	8020ce8 <disable_lock+0x34>
            retval = Status_SelfTestFailed;
 8020ce2:	2331      	movs	r3, #49	; 0x31
 8020ce4:	75fb      	strb	r3, [r7, #23]
 8020ce6:	e048      	b.n	8020d7a <disable_lock+0xc6>
        // Block if e-stop is active.
        else if (control_signals.e_stop)
 8020ce8:	7b3b      	ldrb	r3, [r7, #12]
 8020cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cee:	b2db      	uxtb	r3, r3
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d002      	beq.n	8020cfa <disable_lock+0x46>
            retval = Status_EStop;
 8020cf4:	2332      	movs	r3, #50	; 0x32
 8020cf6:	75fb      	strb	r3, [r7, #23]
 8020cf8:	e03f      	b.n	8020d7a <disable_lock+0xc6>
        // Block if safety door is ajar.
        else if (control_signals.safety_door_ajar)
 8020cfa:	7b3b      	ldrb	r3, [r7, #12]
 8020cfc:	f003 0308 	and.w	r3, r3, #8
 8020d00:	b2db      	uxtb	r3, r3
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	d002      	beq.n	8020d0c <disable_lock+0x58>
            retval = Status_CheckDoor;
 8020d06:	230d      	movs	r3, #13
 8020d08:	75fb      	strb	r3, [r7, #23]
 8020d0a:	e036      	b.n	8020d7a <disable_lock+0xc6>
        // Block if safety reset is active.
        else if(control_signals.reset)
 8020d0c:	7b3b      	ldrb	r3, [r7, #12]
 8020d0e:	f003 0301 	and.w	r3, r3, #1
 8020d12:	b2db      	uxtb	r3, r3
 8020d14:	2b00      	cmp	r3, #0
 8020d16:	d002      	beq.n	8020d1e <disable_lock+0x6a>
            retval = Status_Reset;
 8020d18:	2312      	movs	r3, #18
 8020d1a:	75fb      	strb	r3, [r7, #23]
 8020d1c:	e02d      	b.n	8020d7a <disable_lock+0xc6>
        else if(settings.limits.flags.hard_enabled && settings.limits.flags.check_at_init && limit_signals_merge(hal.limits.get_state()).value)
 8020d1e:	4b1b      	ldr	r3, [pc, #108]	; (8020d8c <disable_lock+0xd8>)
 8020d20:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8020d24:	f003 0301 	and.w	r3, r3, #1
 8020d28:	b2db      	uxtb	r3, r3
 8020d2a:	2b00      	cmp	r3, #0
 8020d2c:	d016      	beq.n	8020d5c <disable_lock+0xa8>
 8020d2e:	4b17      	ldr	r3, [pc, #92]	; (8020d8c <disable_lock+0xd8>)
 8020d30:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8020d34:	f003 0304 	and.w	r3, r3, #4
 8020d38:	b2db      	uxtb	r3, r3
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	d00e      	beq.n	8020d5c <disable_lock+0xa8>
 8020d3e:	4b11      	ldr	r3, [pc, #68]	; (8020d84 <disable_lock+0xd0>)
 8020d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020d42:	4798      	blx	r3
 8020d44:	4603      	mov	r3, r0
 8020d46:	613b      	str	r3, [r7, #16]
 8020d48:	6938      	ldr	r0, [r7, #16]
 8020d4a:	f7ea fddd 	bl	800b908 <limit_signals_merge>
 8020d4e:	4603      	mov	r3, r0
 8020d50:	b2db      	uxtb	r3, r3
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	d002      	beq.n	8020d5c <disable_lock+0xa8>
            retval = Status_LimitsEngaged;
 8020d56:	232d      	movs	r3, #45	; 0x2d
 8020d58:	75fb      	strb	r3, [r7, #23]
 8020d5a:	e00e      	b.n	8020d7a <disable_lock+0xc6>
        else if(limits_homing_required())
 8020d5c:	f7eb fd30 	bl	800c7c0 <limits_homing_required>
 8020d60:	4603      	mov	r3, r0
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d002      	beq.n	8020d6c <disable_lock+0xb8>
            retval = Status_HomingRequired;
 8020d66:	232e      	movs	r3, #46	; 0x2e
 8020d68:	75fb      	strb	r3, [r7, #23]
 8020d6a:	e006      	b.n	8020d7a <disable_lock+0xc6>
        else {
            grbl.report.feedback_message(Message_AlarmUnlock);
 8020d6c:	4b08      	ldr	r3, [pc, #32]	; (8020d90 <disable_lock+0xdc>)
 8020d6e:	68db      	ldr	r3, [r3, #12]
 8020d70:	2003      	movs	r0, #3
 8020d72:	4798      	blx	r3
            state_set(STATE_IDLE);
 8020d74:	2000      	movs	r0, #0
 8020d76:	f7fb ffdf 	bl	801cd38 <state_set>
        }
        // Don't run startup script. Prevents stored moves in startup from causing accidents.
    } // Otherwise, no effect.

    return retval;
 8020d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8020d7c:	4618      	mov	r0, r3
 8020d7e:	3718      	adds	r7, #24
 8020d80:	46bd      	mov	sp, r7
 8020d82:	bd80      	pop	{r7, pc}
 8020d84:	200016a0 	.word	0x200016a0
 8020d88:	20001520 	.word	0x20001520
 8020d8c:	20001cf0 	.word	0x20001cf0
 8020d90:	200015b8 	.word	0x200015b8

08020d94 <output_help>:

static status_code_t output_help (sys_state_t state, char *args)
{
 8020d94:	b580      	push	{r7, lr}
 8020d96:	b082      	sub	sp, #8
 8020d98:	af00      	add	r7, sp, #0
 8020d9a:	6078      	str	r0, [r7, #4]
 8020d9c:	6039      	str	r1, [r7, #0]
    return report_help(args);
 8020d9e:	6838      	ldr	r0, [r7, #0]
 8020da0:	f7f3 f9fe 	bl	80141a0 <report_help>
 8020da4:	4603      	mov	r3, r0
}
 8020da6:	4618      	mov	r0, r3
 8020da8:	3708      	adds	r7, #8
 8020daa:	46bd      	mov	sp, r7
 8020dac:	bd80      	pop	{r7, pc}

08020dae <output_spindles>:

static status_code_t output_spindles (sys_state_t state, char *args)
{
 8020dae:	b580      	push	{r7, lr}
 8020db0:	b082      	sub	sp, #8
 8020db2:	af00      	add	r7, sp, #0
 8020db4:	6078      	str	r0, [r7, #4]
 8020db6:	6039      	str	r1, [r7, #0]
    return report_spindles();
 8020db8:	f7f7 fa98 	bl	80182ec <report_spindles>
 8020dbc:	4603      	mov	r3, r0
}
 8020dbe:	4618      	mov	r0, r3
 8020dc0:	3708      	adds	r7, #8
 8020dc2:	46bd      	mov	sp, r7
 8020dc4:	bd80      	pop	{r7, pc}
	...

08020dc8 <go_home>:

static status_code_t go_home (sys_state_t state, axes_signals_t axes)
{
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b084      	sub	sp, #16
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	6078      	str	r0, [r7, #4]
 8020dd0:	7039      	strb	r1, [r7, #0]
    if(axes.mask && !settings.homing.flags.single_axis_commands)
 8020dd2:	783b      	ldrb	r3, [r7, #0]
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	d009      	beq.n	8020dec <go_home+0x24>
 8020dd8:	4b5a      	ldr	r3, [pc, #360]	; (8020f44 <go_home+0x17c>)
 8020dda:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8020dde:	f003 0302 	and.w	r3, r3, #2
 8020de2:	b2db      	uxtb	r3, r3
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d101      	bne.n	8020dec <go_home+0x24>
        return Status_HomingDisabled;
 8020de8:	2305      	movs	r3, #5
 8020dea:	e0a6      	b.n	8020f3a <go_home+0x172>

    if(!(state_get() == STATE_IDLE || (state_get() & (STATE_ALARM|STATE_ESTOP))))
 8020dec:	f7fb ff98 	bl	801cd20 <state_get>
 8020df0:	4603      	mov	r3, r0
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	d009      	beq.n	8020e0a <go_home+0x42>
 8020df6:	f7fb ff93 	bl	801cd20 <state_get>
 8020dfa:	4602      	mov	r2, r0
 8020dfc:	f240 1301 	movw	r3, #257	; 0x101
 8020e00:	4013      	ands	r3, r2
 8020e02:	2b00      	cmp	r3, #0
 8020e04:	d101      	bne.n	8020e0a <go_home+0x42>
        return Status_IdleError;
 8020e06:	2308      	movs	r3, #8
 8020e08:	e097      	b.n	8020f3a <go_home+0x172>

    status_code_t retval = Status_OK;
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	73fb      	strb	r3, [r7, #15]

    control_signals_t control_signals = hal.control.get_state();
 8020e0e:	4b4e      	ldr	r3, [pc, #312]	; (8020f48 <go_home+0x180>)
 8020e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020e12:	4798      	blx	r3
 8020e14:	4603      	mov	r3, r0
 8020e16:	81bb      	strh	r3, [r7, #12]

    // Block if self-test failed
    if(sys.alarm == Alarm_SelftestFailed)
 8020e18:	4b4c      	ldr	r3, [pc, #304]	; (8020f4c <go_home+0x184>)
 8020e1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8020e1e:	2b10      	cmp	r3, #16
 8020e20:	d102      	bne.n	8020e28 <go_home+0x60>
        retval = Status_SelfTestFailed;
 8020e22:	2331      	movs	r3, #49	; 0x31
 8020e24:	73fb      	strb	r3, [r7, #15]
 8020e26:	e049      	b.n	8020ebc <go_home+0xf4>
    // Block if e-stop is active.
    else if (control_signals.e_stop)
 8020e28:	7b3b      	ldrb	r3, [r7, #12]
 8020e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020e2e:	b2db      	uxtb	r3, r3
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d002      	beq.n	8020e3a <go_home+0x72>
        retval = Status_EStop;
 8020e34:	2332      	movs	r3, #50	; 0x32
 8020e36:	73fb      	strb	r3, [r7, #15]
 8020e38:	e040      	b.n	8020ebc <go_home+0xf4>
    else if(control_signals.motor_fault)
 8020e3a:	7b7b      	ldrb	r3, [r7, #13]
 8020e3c:	f003 0301 	and.w	r3, r3, #1
 8020e40:	b2db      	uxtb	r3, r3
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	d002      	beq.n	8020e4c <go_home+0x84>
        retval = Status_MotorFault;
 8020e46:	2333      	movs	r3, #51	; 0x33
 8020e48:	73fb      	strb	r3, [r7, #15]
 8020e4a:	e037      	b.n	8020ebc <go_home+0xf4>
    else if (!(settings.homing.flags.enabled && (sys.homing.mask || settings.homing.flags.single_axis_commands || settings.homing.flags.manual)))
 8020e4c:	4b3d      	ldr	r3, [pc, #244]	; (8020f44 <go_home+0x17c>)
 8020e4e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8020e52:	f003 0301 	and.w	r3, r3, #1
 8020e56:	b2db      	uxtb	r3, r3
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d013      	beq.n	8020e84 <go_home+0xbc>
 8020e5c:	4b3b      	ldr	r3, [pc, #236]	; (8020f4c <go_home+0x184>)
 8020e5e:	7e9b      	ldrb	r3, [r3, #26]
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d112      	bne.n	8020e8a <go_home+0xc2>
 8020e64:	4b37      	ldr	r3, [pc, #220]	; (8020f44 <go_home+0x17c>)
 8020e66:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8020e6a:	f003 0302 	and.w	r3, r3, #2
 8020e6e:	b2db      	uxtb	r3, r3
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	d10a      	bne.n	8020e8a <go_home+0xc2>
 8020e74:	4b33      	ldr	r3, [pc, #204]	; (8020f44 <go_home+0x17c>)
 8020e76:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8020e7a:	f003 0310 	and.w	r3, r3, #16
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d102      	bne.n	8020e8a <go_home+0xc2>
        retval = Status_HomingDisabled;
 8020e84:	2305      	movs	r3, #5
 8020e86:	73fb      	strb	r3, [r7, #15]
 8020e88:	e018      	b.n	8020ebc <go_home+0xf4>
    // Block if safety door is ajar.
    else if (control_signals.safety_door_ajar && !settings.safety_door.flags.ignore_when_idle)
 8020e8a:	7b3b      	ldrb	r3, [r7, #12]
 8020e8c:	f003 0308 	and.w	r3, r3, #8
 8020e90:	b2db      	uxtb	r3, r3
 8020e92:	2b00      	cmp	r3, #0
 8020e94:	d00a      	beq.n	8020eac <go_home+0xe4>
 8020e96:	4b2b      	ldr	r3, [pc, #172]	; (8020f44 <go_home+0x17c>)
 8020e98:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8020e9c:	f003 0301 	and.w	r3, r3, #1
 8020ea0:	b2db      	uxtb	r3, r3
 8020ea2:	2b00      	cmp	r3, #0
 8020ea4:	d102      	bne.n	8020eac <go_home+0xe4>
        retval = Status_CheckDoor;
 8020ea6:	230d      	movs	r3, #13
 8020ea8:	73fb      	strb	r3, [r7, #15]
 8020eaa:	e007      	b.n	8020ebc <go_home+0xf4>
    // Block if safety reset is active.
    else if(control_signals.reset)
 8020eac:	7b3b      	ldrb	r3, [r7, #12]
 8020eae:	f003 0301 	and.w	r3, r3, #1
 8020eb2:	b2db      	uxtb	r3, r3
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d001      	beq.n	8020ebc <go_home+0xf4>
        retval = Status_Reset;
 8020eb8:	2312      	movs	r3, #18
 8020eba:	73fb      	strb	r3, [r7, #15]

    if(retval == Status_OK)
 8020ebc:	7bfb      	ldrb	r3, [r7, #15]
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d104      	bne.n	8020ecc <go_home+0x104>
        retval = mc_homing_cycle(axes); // Home axes according to configuration
 8020ec2:	7838      	ldrb	r0, [r7, #0]
 8020ec4:	f7ed fdd4 	bl	800ea70 <mc_homing_cycle>
 8020ec8:	4603      	mov	r3, r0
 8020eca:	73fb      	strb	r3, [r7, #15]

    if (retval == Status_OK && !sys.abort) {
 8020ecc:	7bfb      	ldrb	r3, [r7, #15]
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d12d      	bne.n	8020f2e <go_home+0x166>
 8020ed2:	4b1e      	ldr	r3, [pc, #120]	; (8020f4c <go_home+0x184>)
 8020ed4:	781b      	ldrb	r3, [r3, #0]
 8020ed6:	f083 0301 	eor.w	r3, r3, #1
 8020eda:	b2db      	uxtb	r3, r3
 8020edc:	2b00      	cmp	r3, #0
 8020ede:	d026      	beq.n	8020f2e <go_home+0x166>
        state_set(STATE_IDLE);  // Set to IDLE when complete.
 8020ee0:	2000      	movs	r0, #0
 8020ee2:	f7fb ff29 	bl	801cd38 <state_set>
        st_go_idle();           // Set steppers to the settings idle state before returning.
 8020ee6:	f7fd f801 	bl	801deec <st_go_idle>
        grbl.report.feedback_message(Message_None);
 8020eea:	4b19      	ldr	r3, [pc, #100]	; (8020f50 <go_home+0x188>)
 8020eec:	68db      	ldr	r3, [r3, #12]
 8020eee:	2000      	movs	r0, #0
 8020ef0:	4798      	blx	r3
        // Execute startup scripts after successful homing.
        if (sys.homing.mask && (sys.homing.mask & sys.homed.mask) == sys.homing.mask)
 8020ef2:	4b16      	ldr	r3, [pc, #88]	; (8020f4c <go_home+0x184>)
 8020ef4:	7e9b      	ldrb	r3, [r3, #26]
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	d00d      	beq.n	8020f16 <go_home+0x14e>
 8020efa:	4b14      	ldr	r3, [pc, #80]	; (8020f4c <go_home+0x184>)
 8020efc:	7e9a      	ldrb	r2, [r3, #26]
 8020efe:	4b13      	ldr	r3, [pc, #76]	; (8020f4c <go_home+0x184>)
 8020f00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8020f04:	4013      	ands	r3, r2
 8020f06:	b2da      	uxtb	r2, r3
 8020f08:	4b10      	ldr	r3, [pc, #64]	; (8020f4c <go_home+0x184>)
 8020f0a:	7e9b      	ldrb	r3, [r3, #26]
 8020f0c:	429a      	cmp	r2, r3
 8020f0e:	d102      	bne.n	8020f16 <go_home+0x14e>
            system_execute_startup();
 8020f10:	f7ff f970 	bl	80201f4 <system_execute_startup>
 8020f14:	e00b      	b.n	8020f2e <go_home+0x166>
        else if(limits_homing_required()) { // Keep alarm state active if homing is required and not all axes homed.
 8020f16:	f7eb fc53 	bl	800c7c0 <limits_homing_required>
 8020f1a:	4603      	mov	r3, r0
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d006      	beq.n	8020f2e <go_home+0x166>
            sys.alarm = Alarm_HomingRequired;
 8020f20:	4b0a      	ldr	r3, [pc, #40]	; (8020f4c <go_home+0x184>)
 8020f22:	220b      	movs	r2, #11
 8020f24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            state_set(STATE_ALARM);
 8020f28:	2001      	movs	r0, #1
 8020f2a:	f7fb ff05 	bl	801cd38 <state_set>
        }
    }

    return retval == Status_Unhandled ? Status_OK : retval;
 8020f2e:	7bfb      	ldrb	r3, [r7, #15]
 8020f30:	2b54      	cmp	r3, #84	; 0x54
 8020f32:	d001      	beq.n	8020f38 <go_home+0x170>
 8020f34:	7bfb      	ldrb	r3, [r7, #15]
 8020f36:	e000      	b.n	8020f3a <go_home+0x172>
 8020f38:	2300      	movs	r3, #0
}
 8020f3a:	4618      	mov	r0, r3
 8020f3c:	3710      	adds	r7, #16
 8020f3e:	46bd      	mov	sp, r7
 8020f40:	bd80      	pop	{r7, pc}
 8020f42:	bf00      	nop
 8020f44:	20001cf0 	.word	0x20001cf0
 8020f48:	200016a0 	.word	0x200016a0
 8020f4c:	20001520 	.word	0x20001520
 8020f50:	200015b8 	.word	0x200015b8

08020f54 <home>:

static status_code_t home (sys_state_t state, char *args)
{
 8020f54:	b580      	push	{r7, lr}
 8020f56:	b082      	sub	sp, #8
 8020f58:	af00      	add	r7, sp, #0
 8020f5a:	6078      	str	r0, [r7, #4]
 8020f5c:	6039      	str	r1, [r7, #0]
    return go_home(state, (axes_signals_t){0});
 8020f5e:	2300      	movs	r3, #0
 8020f60:	4619      	mov	r1, r3
 8020f62:	6878      	ldr	r0, [r7, #4]
 8020f64:	f7ff ff30 	bl	8020dc8 <go_home>
 8020f68:	4603      	mov	r3, r0
}
 8020f6a:	4618      	mov	r0, r3
 8020f6c:	3708      	adds	r7, #8
 8020f6e:	46bd      	mov	sp, r7
 8020f70:	bd80      	pop	{r7, pc}

08020f72 <home_x>:

static status_code_t home_x (sys_state_t state, char *args)
{
 8020f72:	b580      	push	{r7, lr}
 8020f74:	b082      	sub	sp, #8
 8020f76:	af00      	add	r7, sp, #0
 8020f78:	6078      	str	r0, [r7, #4]
 8020f7a:	6039      	str	r1, [r7, #0]
    return go_home(state, (axes_signals_t){X_AXIS_BIT});
 8020f7c:	2301      	movs	r3, #1
 8020f7e:	4619      	mov	r1, r3
 8020f80:	6878      	ldr	r0, [r7, #4]
 8020f82:	f7ff ff21 	bl	8020dc8 <go_home>
 8020f86:	4603      	mov	r3, r0
}
 8020f88:	4618      	mov	r0, r3
 8020f8a:	3708      	adds	r7, #8
 8020f8c:	46bd      	mov	sp, r7
 8020f8e:	bd80      	pop	{r7, pc}

08020f90 <home_y>:

static status_code_t home_y (sys_state_t state, char *args)
{
 8020f90:	b580      	push	{r7, lr}
 8020f92:	b082      	sub	sp, #8
 8020f94:	af00      	add	r7, sp, #0
 8020f96:	6078      	str	r0, [r7, #4]
 8020f98:	6039      	str	r1, [r7, #0]
    return go_home(state, (axes_signals_t){Y_AXIS_BIT});
 8020f9a:	2302      	movs	r3, #2
 8020f9c:	4619      	mov	r1, r3
 8020f9e:	6878      	ldr	r0, [r7, #4]
 8020fa0:	f7ff ff12 	bl	8020dc8 <go_home>
 8020fa4:	4603      	mov	r3, r0
}
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	3708      	adds	r7, #8
 8020faa:	46bd      	mov	sp, r7
 8020fac:	bd80      	pop	{r7, pc}

08020fae <home_z>:

static status_code_t home_z (sys_state_t state, char *args)
{
 8020fae:	b580      	push	{r7, lr}
 8020fb0:	b082      	sub	sp, #8
 8020fb2:	af00      	add	r7, sp, #0
 8020fb4:	6078      	str	r0, [r7, #4]
 8020fb6:	6039      	str	r1, [r7, #0]
    return go_home(state, (axes_signals_t){Z_AXIS_BIT});
 8020fb8:	2304      	movs	r3, #4
 8020fba:	4619      	mov	r1, r3
 8020fbc:	6878      	ldr	r0, [r7, #4]
 8020fbe:	f7ff ff03 	bl	8020dc8 <go_home>
 8020fc2:	4603      	mov	r3, r0
}
 8020fc4:	4618      	mov	r0, r3
 8020fc6:	3708      	adds	r7, #8
 8020fc8:	46bd      	mov	sp, r7
 8020fca:	bd80      	pop	{r7, pc}

08020fcc <enter_sleep>:
    return go_home(state, (axes_signals_t){V_AXIS_BIT});
}
#endif

static status_code_t enter_sleep (sys_state_t state, char *args)
{
 8020fcc:	b580      	push	{r7, lr}
 8020fce:	b082      	sub	sp, #8
 8020fd0:	af00      	add	r7, sp, #0
 8020fd2:	6078      	str	r0, [r7, #4]
 8020fd4:	6039      	str	r1, [r7, #0]
    if(!settings.flags.sleep_enable)
 8020fd6:	4b0e      	ldr	r3, [pc, #56]	; (8021010 <enter_sleep+0x44>)
 8020fd8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8020fdc:	f003 0308 	and.w	r3, r3, #8
 8020fe0:	b2db      	uxtb	r3, r3
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d101      	bne.n	8020fea <enter_sleep+0x1e>
        return Status_InvalidStatement;
 8020fe6:	2303      	movs	r3, #3
 8020fe8:	e00e      	b.n	8021008 <enter_sleep+0x3c>
    else if(!(state == STATE_IDLE || state == STATE_ALARM))
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	2b00      	cmp	r3, #0
 8020fee:	d004      	beq.n	8020ffa <enter_sleep+0x2e>
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	2b01      	cmp	r3, #1
 8020ff4:	d001      	beq.n	8020ffa <enter_sleep+0x2e>
        return Status_IdleError;
 8020ff6:	2308      	movs	r3, #8
 8020ff8:	e006      	b.n	8021008 <enter_sleep+0x3c>
    else
        system_set_exec_state_flag(EXEC_SLEEP); // Set to execute enter_sleep mode immediately
 8020ffa:	4b06      	ldr	r3, [pc, #24]	; (8021014 <enter_sleep+0x48>)
 8020ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8021002:	4805      	ldr	r0, [pc, #20]	; (8021018 <enter_sleep+0x4c>)
 8021004:	4798      	blx	r3

    return Status_OK;
 8021006:	2300      	movs	r3, #0
}
 8021008:	4618      	mov	r0, r3
 802100a:	3708      	adds	r7, #8
 802100c:	46bd      	mov	sp, r7
 802100e:	bd80      	pop	{r7, pc}
 8021010:	20001cf0 	.word	0x20001cf0
 8021014:	200016a0 	.word	0x200016a0
 8021018:	20001568 	.word	0x20001568

0802101c <set_tool_reference>:

static status_code_t set_tool_reference (sys_state_t state, char *args)
{
 802101c:	b580      	push	{r7, lr}
 802101e:	b084      	sub	sp, #16
 8021020:	af00      	add	r7, sp, #0
 8021022:	6078      	str	r0, [r7, #4]
 8021024:	6039      	str	r1, [r7, #0]
        sys.tlo_reference[TOOL_LENGTH_OFFSET_AXIS] = sys.probe_position[TOOL_LENGTH_OFFSET_AXIS]; // - gc_state.tool_length_offset[Z_AXIS]));
    } else
        sys.tlo_reference_set.mask = 0;
#else
    plane_t plane;
    gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8021026:	4b19      	ldr	r3, [pc, #100]	; (802108c <set_tool_reference+0x70>)
 8021028:	799a      	ldrb	r2, [r3, #6]
 802102a:	f107 030c 	add.w	r3, r7, #12
 802102e:	4611      	mov	r1, r2
 8021030:	4618      	mov	r0, r3
 8021032:	f7e4 fb59 	bl	80056e8 <gc_get_plane_data>
    if(sys.flags.probe_succeeded) {
 8021036:	4b16      	ldr	r3, [pc, #88]	; (8021090 <set_tool_reference+0x74>)
 8021038:	7d9b      	ldrb	r3, [r3, #22]
 802103a:	f003 0302 	and.w	r3, r3, #2
 802103e:	b2db      	uxtb	r3, r3
 8021040:	2b00      	cmp	r3, #0
 8021042:	d016      	beq.n	8021072 <set_tool_reference+0x56>
        sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 8021044:	4b12      	ldr	r3, [pc, #72]	; (8021090 <set_tool_reference+0x74>)
 8021046:	79da      	ldrb	r2, [r3, #7]
 8021048:	7bbb      	ldrb	r3, [r7, #14]
 802104a:	4619      	mov	r1, r3
 802104c:	2301      	movs	r3, #1
 802104e:	408b      	lsls	r3, r1
 8021050:	b2db      	uxtb	r3, r3
 8021052:	4313      	orrs	r3, r2
 8021054:	b2da      	uxtb	r2, r3
 8021056:	4b0e      	ldr	r3, [pc, #56]	; (8021090 <set_tool_reference+0x74>)
 8021058:	71da      	strb	r2, [r3, #7]
        sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 802105a:	7bbb      	ldrb	r3, [r7, #14]
 802105c:	7bba      	ldrb	r2, [r7, #14]
 802105e:	4610      	mov	r0, r2
 8021060:	4a0b      	ldr	r2, [pc, #44]	; (8021090 <set_tool_reference+0x74>)
 8021062:	330e      	adds	r3, #14
 8021064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021068:	4909      	ldr	r1, [pc, #36]	; (8021090 <set_tool_reference+0x74>)
 802106a:	1c83      	adds	r3, r0, #2
 802106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021070:	e002      	b.n	8021078 <set_tool_reference+0x5c>
//                    - lroundf(gc_state.tool_length_offset[plane.axis_linear] * settings.axis[plane.axis_linear].steps_per_mm);
    } else
        sys.tlo_reference_set.mask = 0;
 8021072:	4b07      	ldr	r3, [pc, #28]	; (8021090 <set_tool_reference+0x74>)
 8021074:	2200      	movs	r2, #0
 8021076:	71da      	strb	r2, [r3, #7]
#endif
    system_add_rt_report(Report_TLOReference);
 8021078:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 802107c:	f000 faa4 	bl	80215c8 <system_add_rt_report>

    return Status_OK;
 8021080:	2300      	movs	r3, #0
}
 8021082:	4618      	mov	r0, r3
 8021084:	3710      	adds	r7, #16
 8021086:	46bd      	mov	sp, r7
 8021088:	bd80      	pop	{r7, pc}
 802108a:	bf00      	nop
 802108c:	2000137c 	.word	0x2000137c
 8021090:	20001520 	.word	0x20001520

08021094 <tool_probe_workpiece>:

static status_code_t tool_probe_workpiece (sys_state_t state, char *args)
{
 8021094:	b580      	push	{r7, lr}
 8021096:	b082      	sub	sp, #8
 8021098:	af00      	add	r7, sp, #0
 802109a:	6078      	str	r0, [r7, #4]
 802109c:	6039      	str	r1, [r7, #0]
    return tc_probe_workpiece();
 802109e:	f001 f887 	bl	80221b0 <tc_probe_workpiece>
 80210a2:	4603      	mov	r3, r0
}
 80210a4:	4618      	mov	r0, r3
 80210a6:	3708      	adds	r7, #8
 80210a8:	46bd      	mov	sp, r7
 80210aa:	bd80      	pop	{r7, pc}

080210ac <output_ngc_parameters>:

static status_code_t output_ngc_parameters (sys_state_t state, char *args)
{
 80210ac:	b580      	push	{r7, lr}
 80210ae:	b084      	sub	sp, #16
 80210b0:	af00      	add	r7, sp, #0
 80210b2:	6078      	str	r0, [r7, #4]
 80210b4:	6039      	str	r1, [r7, #0]
    status_code_t retval = Status_OK;
 80210b6:	2300      	movs	r3, #0
 80210b8:	73fb      	strb	r3, [r7, #15]

    if(args) {
 80210ba:	683b      	ldr	r3, [r7, #0]
 80210bc:	2b00      	cmp	r3, #0
 80210be:	d01b      	beq.n	80210f8 <output_ngc_parameters+0x4c>
        int32_t id;
        retval = read_int(args, &id);
 80210c0:	f107 0308 	add.w	r3, r7, #8
 80210c4:	4619      	mov	r1, r3
 80210c6:	6838      	ldr	r0, [r7, #0]
 80210c8:	f7ff f8e6 	bl	8020298 <read_int>
 80210cc:	4603      	mov	r3, r0
 80210ce:	73fb      	strb	r3, [r7, #15]
        if(retval == Status_OK && id >= 0)
 80210d0:	7bfb      	ldrb	r3, [r7, #15]
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	d10a      	bne.n	80210ec <output_ngc_parameters+0x40>
 80210d6:	68bb      	ldr	r3, [r7, #8]
 80210d8:	2b00      	cmp	r3, #0
 80210da:	db07      	blt.n	80210ec <output_ngc_parameters+0x40>
            retval = report_ngc_parameter((ngc_param_id_t)id);
 80210dc:	68bb      	ldr	r3, [r7, #8]
 80210de:	b29b      	uxth	r3, r3
 80210e0:	4618      	mov	r0, r3
 80210e2:	f7f3 fb25 	bl	8014730 <report_ngc_parameter>
 80210e6:	4603      	mov	r3, r0
 80210e8:	73fb      	strb	r3, [r7, #15]
 80210ea:	e007      	b.n	80210fc <output_ngc_parameters+0x50>
        else
            retval = report_named_ngc_parameter(args);
 80210ec:	6838      	ldr	r0, [r7, #0]
 80210ee:	f7f3 fb69 	bl	80147c4 <report_named_ngc_parameter>
 80210f2:	4603      	mov	r3, r0
 80210f4:	73fb      	strb	r3, [r7, #15]
 80210f6:	e001      	b.n	80210fc <output_ngc_parameters+0x50>
    } else
        report_ngc_parameters();
 80210f8:	f7f3 fba8 	bl	801484c <report_ngc_parameters>

    return retval;
 80210fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80210fe:	4618      	mov	r0, r3
 8021100:	3710      	adds	r7, #16
 8021102:	46bd      	mov	sp, r7
 8021104:	bd80      	pop	{r7, pc}

08021106 <build_info>:

static status_code_t build_info (sys_state_t state, char *args)
{
 8021106:	b580      	push	{r7, lr}
 8021108:	b094      	sub	sp, #80	; 0x50
 802110a:	af00      	add	r7, sp, #0
 802110c:	6078      	str	r0, [r7, #4]
 802110e:	6039      	str	r1, [r7, #0]
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_SLEEP|STATE_CHECK_MODE))))
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	2b00      	cmp	r3, #0
 8021114:	d007      	beq.n	8021126 <build_info+0x20>
 8021116:	687a      	ldr	r2, [r7, #4]
 8021118:	f240 1383 	movw	r3, #387	; 0x183
 802111c:	4013      	ands	r3, r2
 802111e:	2b00      	cmp	r3, #0
 8021120:	d101      	bne.n	8021126 <build_info+0x20>
        return Status_IdleError;
 8021122:	2308      	movs	r3, #8
 8021124:	e01b      	b.n	802115e <build_info+0x58>

    if (args == NULL) {
 8021126:	683b      	ldr	r3, [r7, #0]
 8021128:	2b00      	cmp	r3, #0
 802112a:	d10b      	bne.n	8021144 <build_info+0x3e>
        char info[sizeof(stored_line_t)];
        settings_read_build_info(info);
 802112c:	f107 0308 	add.w	r3, r7, #8
 8021130:	4618      	mov	r0, r3
 8021132:	f7f8 ffa3 	bl	801a07c <settings_read_build_info>
        report_build_info(info, false);
 8021136:	f107 0308 	add.w	r3, r7, #8
 802113a:	2100      	movs	r1, #0
 802113c:	4618      	mov	r0, r3
 802113e:	f7f3 ff9b 	bl	8015078 <report_build_info>
 8021142:	e00b      	b.n	802115c <build_info+0x56>
    }
  #if !DISABLE_BUILD_INFO_WRITE_COMMAND
    else if (strlen(args) < (sizeof(stored_line_t) - 1))
 8021144:	6838      	ldr	r0, [r7, #0]
 8021146:	f7df f8a1 	bl	800028c <strlen>
 802114a:	4603      	mov	r3, r0
 802114c:	2b44      	cmp	r3, #68	; 0x44
 802114e:	d803      	bhi.n	8021158 <build_info+0x52>
        settings_write_build_info(args);
 8021150:	6838      	ldr	r0, [r7, #0]
 8021152:	f7f8 ff7b 	bl	801a04c <settings_write_build_info>
 8021156:	e001      	b.n	802115c <build_info+0x56>
  #endif
    else
        return Status_InvalidStatement;
 8021158:	2303      	movs	r3, #3
 802115a:	e000      	b.n	802115e <build_info+0x58>

    return Status_OK;
 802115c:	2300      	movs	r3, #0
}
 802115e:	4618      	mov	r0, r3
 8021160:	3750      	adds	r7, #80	; 0x50
 8021162:	46bd      	mov	sp, r7
 8021164:	bd80      	pop	{r7, pc}

08021166 <output_all_build_info>:

static status_code_t output_all_build_info (sys_state_t state, char *args)
{
 8021166:	b580      	push	{r7, lr}
 8021168:	b094      	sub	sp, #80	; 0x50
 802116a:	af00      	add	r7, sp, #0
 802116c:	6078      	str	r0, [r7, #4]
 802116e:	6039      	str	r1, [r7, #0]
    char info[sizeof(stored_line_t)];

    settings_read_build_info(info);
 8021170:	f107 0308 	add.w	r3, r7, #8
 8021174:	4618      	mov	r0, r3
 8021176:	f7f8 ff81 	bl	801a07c <settings_read_build_info>
    report_build_info(info, true);
 802117a:	f107 0308 	add.w	r3, r7, #8
 802117e:	2101      	movs	r1, #1
 8021180:	4618      	mov	r0, r3
 8021182:	f7f3 ff79 	bl	8015078 <report_build_info>

    return Status_OK;
 8021186:	2300      	movs	r3, #0
}
 8021188:	4618      	mov	r0, r3
 802118a:	3750      	adds	r7, #80	; 0x50
 802118c:	46bd      	mov	sp, r7
 802118e:	bd80      	pop	{r7, pc}

08021190 <settings_reset>:

static status_code_t settings_reset (sys_state_t state, char *args)
{
 8021190:	b580      	push	{r7, lr}
 8021192:	b084      	sub	sp, #16
 8021194:	af00      	add	r7, sp, #0
 8021196:	6078      	str	r0, [r7, #4]
 8021198:	6039      	str	r1, [r7, #0]
    settings_restore_t restore = {0};
 802119a:	2300      	movs	r3, #0
 802119c:	733b      	strb	r3, [r7, #12]
    status_code_t retval = Status_OK;
 802119e:	2300      	movs	r3, #0
 80211a0:	73fb      	strb	r3, [r7, #15]

    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP))))
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	2b00      	cmp	r3, #0
 80211a6:	d008      	beq.n	80211ba <settings_reset+0x2a>
 80211a8:	687a      	ldr	r2, [r7, #4]
 80211aa:	f240 1301 	movw	r3, #257	; 0x101
 80211ae:	4013      	ands	r3, r2
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	d102      	bne.n	80211ba <settings_reset+0x2a>
        retval = Status_IdleError;
 80211b4:	2308      	movs	r3, #8
 80211b6:	73fb      	strb	r3, [r7, #15]
 80211b8:	e02e      	b.n	8021218 <settings_reset+0x88>

    else switch (*args) {
 80211ba:	683b      	ldr	r3, [r7, #0]
 80211bc:	781b      	ldrb	r3, [r3, #0]
 80211be:	3b23      	subs	r3, #35	; 0x23
 80211c0:	2b07      	cmp	r3, #7
 80211c2:	d826      	bhi.n	8021212 <settings_reset+0x82>
 80211c4:	a201      	add	r2, pc, #4	; (adr r2, 80211cc <settings_reset+0x3c>)
 80211c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80211ca:	bf00      	nop
 80211cc:	080211f7 	.word	0x080211f7
 80211d0:	080211ed 	.word	0x080211ed
 80211d4:	08021213 	.word	0x08021213
 80211d8:	08021209 	.word	0x08021209
 80211dc:	08021213 	.word	0x08021213
 80211e0:	08021213 	.word	0x08021213
 80211e4:	08021213 	.word	0x08021213
 80211e8:	08021201 	.word	0x08021201

      #if ENABLE_RESTORE_NVS_DEFAULT_SETTINGS
        case '$':
            restore.defaults = On;
 80211ec:	7b3b      	ldrb	r3, [r7, #12]
 80211ee:	f043 0301 	orr.w	r3, r3, #1
 80211f2:	733b      	strb	r3, [r7, #12]
            break;
 80211f4:	e010      	b.n	8021218 <settings_reset+0x88>
      #endif

      #if ENABLE_RESTORE_NVS_CLEAR_PARAMETERS
        case '#':
            restore.parameters = On;
 80211f6:	7b3b      	ldrb	r3, [r7, #12]
 80211f8:	f043 0302 	orr.w	r3, r3, #2
 80211fc:	733b      	strb	r3, [r7, #12]
            break;
 80211fe:	e00b      	b.n	8021218 <settings_reset+0x88>
      #endif

      #if ENABLE_RESTORE_NVS_WIPE_ALL
        case '*':
            restore.mask = settings_all.mask;
 8021200:	4b0f      	ldr	r3, [pc, #60]	; (8021240 <settings_reset+0xb0>)
 8021202:	781b      	ldrb	r3, [r3, #0]
 8021204:	733b      	strb	r3, [r7, #12]
            break;
 8021206:	e007      	b.n	8021218 <settings_reset+0x88>
      #endif

      #if ENABLE_RESTORE_NVS_DRIVER_PARAMETERS
        case '&':
            restore.driver_parameters = On;
 8021208:	7b3b      	ldrb	r3, [r7, #12]
 802120a:	f043 0310 	orr.w	r3, r3, #16
 802120e:	733b      	strb	r3, [r7, #12]
            break;
 8021210:	e002      	b.n	8021218 <settings_reset+0x88>
      #endif

        default:
            retval = Status_InvalidStatement;
 8021212:	2303      	movs	r3, #3
 8021214:	73fb      	strb	r3, [r7, #15]
            break;
 8021216:	bf00      	nop
    }

    if(retval == Status_OK && restore.mask) {
 8021218:	7bfb      	ldrb	r3, [r7, #15]
 802121a:	2b00      	cmp	r3, #0
 802121c:	d10b      	bne.n	8021236 <settings_reset+0xa6>
 802121e:	7b3b      	ldrb	r3, [r7, #12]
 8021220:	2b00      	cmp	r3, #0
 8021222:	d008      	beq.n	8021236 <settings_reset+0xa6>
        settings_restore(restore);
 8021224:	7b38      	ldrb	r0, [r7, #12]
 8021226:	f7f9 f8cf 	bl	801a3c8 <settings_restore>
        grbl.report.feedback_message(Message_RestoreDefaults);
 802122a:	4b06      	ldr	r3, [pc, #24]	; (8021244 <settings_reset+0xb4>)
 802122c:	68db      	ldr	r3, [r3, #12]
 802122e:	2009      	movs	r0, #9
 8021230:	4798      	blx	r3
        mc_reset(); // Force reset to ensure settings are initialized correctly.
 8021232:	f7ed ff5d 	bl	800f0f0 <mc_reset>
    }

    return retval;
 8021236:	7bfb      	ldrb	r3, [r7, #15]
}
 8021238:	4618      	mov	r0, r3
 802123a:	3710      	adds	r7, #16
 802123c:	46bd      	mov	sp, r7
 802123e:	bd80      	pop	{r7, pc}
 8021240:	0803317c 	.word	0x0803317c
 8021244:	200015b8 	.word	0x200015b8

08021248 <output_startup_lines>:

static status_code_t output_startup_lines (sys_state_t state, char *args)
{
 8021248:	b580      	push	{r7, lr}
 802124a:	b096      	sub	sp, #88	; 0x58
 802124c:	af00      	add	r7, sp, #0
 802124e:	6078      	str	r0, [r7, #4]
 8021250:	6039      	str	r1, [r7, #0]
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 8021252:	687b      	ldr	r3, [r7, #4]
 8021254:	2b00      	cmp	r3, #0
 8021256:	d007      	beq.n	8021268 <output_startup_lines+0x20>
 8021258:	687a      	ldr	r2, [r7, #4]
 802125a:	f240 1303 	movw	r3, #259	; 0x103
 802125e:	4013      	ands	r3, r2
 8021260:	2b00      	cmp	r3, #0
 8021262:	d101      	bne.n	8021268 <output_startup_lines+0x20>
        return Status_IdleError;
 8021264:	2308      	movs	r3, #8
 8021266:	e024      	b.n	80212b2 <output_startup_lines+0x6a>
    // Print startup lines

    uint_fast8_t counter;
    char line[sizeof(stored_line_t)];

    for (counter = 0; counter < N_STARTUP_LINE; counter++) {
 8021268:	2300      	movs	r3, #0
 802126a:	657b      	str	r3, [r7, #84]	; 0x54
 802126c:	e01d      	b.n	80212aa <output_startup_lines+0x62>
        if (!(settings_read_startup_line(counter, line)))
 802126e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021270:	b2db      	uxtb	r3, r3
 8021272:	f107 020c 	add.w	r2, r7, #12
 8021276:	4611      	mov	r1, r2
 8021278:	4618      	mov	r0, r3
 802127a:	f7f8 ff53 	bl	801a124 <settings_read_startup_line>
 802127e:	4603      	mov	r3, r0
 8021280:	f083 0301 	eor.w	r3, r3, #1
 8021284:	b2db      	uxtb	r3, r3
 8021286:	2b00      	cmp	r3, #0
 8021288:	d004      	beq.n	8021294 <output_startup_lines+0x4c>
            grbl.report.status_message(Status_SettingReadFail);
 802128a:	4b0c      	ldr	r3, [pc, #48]	; (80212bc <output_startup_lines+0x74>)
 802128c:	689b      	ldr	r3, [r3, #8]
 802128e:	2007      	movs	r0, #7
 8021290:	4798      	blx	r3
 8021292:	e007      	b.n	80212a4 <output_startup_lines+0x5c>
        else
            report_startup_line(counter, line);
 8021294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021296:	b2db      	uxtb	r3, r3
 8021298:	f107 020c 	add.w	r2, r7, #12
 802129c:	4611      	mov	r1, r2
 802129e:	4618      	mov	r0, r3
 80212a0:	f7f3 fe98 	bl	8014fd4 <report_startup_line>
    for (counter = 0; counter < N_STARTUP_LINE; counter++) {
 80212a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80212a6:	3301      	adds	r3, #1
 80212a8:	657b      	str	r3, [r7, #84]	; 0x54
 80212aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80212ac:	2b01      	cmp	r3, #1
 80212ae:	d9de      	bls.n	802126e <output_startup_lines+0x26>
    }

    return Status_OK;
 80212b0:	2300      	movs	r3, #0
}
 80212b2:	4618      	mov	r0, r3
 80212b4:	3758      	adds	r7, #88	; 0x58
 80212b6:	46bd      	mov	sp, r7
 80212b8:	bd80      	pop	{r7, pc}
 80212ba:	bf00      	nop
 80212bc:	200015b8 	.word	0x200015b8

080212c0 <set_startup_line>:

static status_code_t set_startup_line (sys_state_t state, char *args, uint_fast8_t lnr)
{
 80212c0:	b580      	push	{r7, lr}
 80212c2:	b086      	sub	sp, #24
 80212c4:	af00      	add	r7, sp, #0
 80212c6:	60f8      	str	r0, [r7, #12]
 80212c8:	60b9      	str	r1, [r7, #8]
 80212ca:	607a      	str	r2, [r7, #4]
    // Store startup line [IDLE Only] Prevents motion during ALARM.
    if (!(state == STATE_IDLE || (state & (STATE_ALARM|STATE_ESTOP|STATE_CHECK_MODE))))
 80212cc:	68fb      	ldr	r3, [r7, #12]
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d007      	beq.n	80212e2 <set_startup_line+0x22>
 80212d2:	68fa      	ldr	r2, [r7, #12]
 80212d4:	f240 1303 	movw	r3, #259	; 0x103
 80212d8:	4013      	ands	r3, r2
 80212da:	2b00      	cmp	r3, #0
 80212dc:	d101      	bne.n	80212e2 <set_startup_line+0x22>
        return Status_IdleError;
 80212de:	2308      	movs	r3, #8
 80212e0:	e023      	b.n	802132a <set_startup_line+0x6a>

    if(args == NULL)
 80212e2:	68bb      	ldr	r3, [r7, #8]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d101      	bne.n	80212ec <set_startup_line+0x2c>
        return Status_InvalidStatement;
 80212e8:	2303      	movs	r3, #3
 80212ea:	e01e      	b.n	802132a <set_startup_line+0x6a>

    status_code_t retval = Status_OK;
 80212ec:	2300      	movs	r3, #0
 80212ee:	75fb      	strb	r3, [r7, #23]

    args = gc_normalize_block(args, NULL);
 80212f0:	2100      	movs	r1, #0
 80212f2:	68b8      	ldr	r0, [r7, #8]
 80212f4:	f7e4 fc20 	bl	8005b38 <gc_normalize_block>
 80212f8:	60b8      	str	r0, [r7, #8]

    if(strlen(args) >= (sizeof(stored_line_t) - 1))
 80212fa:	68b8      	ldr	r0, [r7, #8]
 80212fc:	f7de ffc6 	bl	800028c <strlen>
 8021300:	4603      	mov	r3, r0
 8021302:	2b44      	cmp	r3, #68	; 0x44
 8021304:	d902      	bls.n	802130c <set_startup_line+0x4c>
        retval = Status_Overflow;
 8021306:	230b      	movs	r3, #11
 8021308:	75fb      	strb	r3, [r7, #23]
 802130a:	e00d      	b.n	8021328 <set_startup_line+0x68>
    else if ((retval = gc_execute_block(args)) == Status_OK) // Execute gcode block to ensure block is valid.
 802130c:	68b8      	ldr	r0, [r7, #8]
 802130e:	f7e4 fd07 	bl	8005d20 <gc_execute_block>
 8021312:	4603      	mov	r3, r0
 8021314:	75fb      	strb	r3, [r7, #23]
 8021316:	7dfb      	ldrb	r3, [r7, #23]
 8021318:	2b00      	cmp	r3, #0
 802131a:	d105      	bne.n	8021328 <set_startup_line+0x68>
        settings_write_startup_line(lnr, args);
 802131c:	687b      	ldr	r3, [r7, #4]
 802131e:	b2db      	uxtb	r3, r3
 8021320:	68b9      	ldr	r1, [r7, #8]
 8021322:	4618      	mov	r0, r3
 8021324:	f7f8 fece 	bl	801a0c4 <settings_write_startup_line>

    return retval;
 8021328:	7dfb      	ldrb	r3, [r7, #23]
}
 802132a:	4618      	mov	r0, r3
 802132c:	3718      	adds	r7, #24
 802132e:	46bd      	mov	sp, r7
 8021330:	bd80      	pop	{r7, pc}

08021332 <set_startup_line0>:

static status_code_t set_startup_line0 (sys_state_t state, char *args)
{
 8021332:	b580      	push	{r7, lr}
 8021334:	b082      	sub	sp, #8
 8021336:	af00      	add	r7, sp, #0
 8021338:	6078      	str	r0, [r7, #4]
 802133a:	6039      	str	r1, [r7, #0]
    return set_startup_line(state, args, 0);
 802133c:	2200      	movs	r2, #0
 802133e:	6839      	ldr	r1, [r7, #0]
 8021340:	6878      	ldr	r0, [r7, #4]
 8021342:	f7ff ffbd 	bl	80212c0 <set_startup_line>
 8021346:	4603      	mov	r3, r0
}
 8021348:	4618      	mov	r0, r3
 802134a:	3708      	adds	r7, #8
 802134c:	46bd      	mov	sp, r7
 802134e:	bd80      	pop	{r7, pc}

08021350 <set_startup_line1>:

static status_code_t set_startup_line1 (sys_state_t state, char *args)
{
 8021350:	b580      	push	{r7, lr}
 8021352:	b082      	sub	sp, #8
 8021354:	af00      	add	r7, sp, #0
 8021356:	6078      	str	r0, [r7, #4]
 8021358:	6039      	str	r1, [r7, #0]
    return set_startup_line(state, args, 1);
 802135a:	2201      	movs	r2, #1
 802135c:	6839      	ldr	r1, [r7, #0]
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	f7ff ffae 	bl	80212c0 <set_startup_line>
 8021364:	4603      	mov	r3, r0
}
 8021366:	4618      	mov	r0, r3
 8021368:	3708      	adds	r7, #8
 802136a:	46bd      	mov	sp, r7
 802136c:	bd80      	pop	{r7, pc}
	...

08021370 <rtc_action>:

static status_code_t rtc_action (sys_state_t state, char *args)
{
 8021370:	b580      	push	{r7, lr}
 8021372:	b084      	sub	sp, #16
 8021374:	af00      	add	r7, sp, #0
 8021376:	6078      	str	r0, [r7, #4]
 8021378:	6039      	str	r1, [r7, #0]
    status_code_t retval = Status_OK;
 802137a:	2300      	movs	r3, #0
 802137c:	73fb      	strb	r3, [r7, #15]

    if(args) {
 802137e:	683b      	ldr	r3, [r7, #0]
 8021380:	2b00      	cmp	r3, #0
 8021382:	d00f      	beq.n	80213a4 <rtc_action+0x34>

        struct tm *time = get_datetime(args);
 8021384:	6838      	ldr	r0, [r7, #0]
 8021386:	f7ee fffb 	bl	8010380 <get_datetime>
 802138a:	60b8      	str	r0, [r7, #8]

        if(time)
 802138c:	68bb      	ldr	r3, [r7, #8]
 802138e:	2b00      	cmp	r3, #0
 8021390:	d005      	beq.n	802139e <rtc_action+0x2e>
            hal.rtc.set_datetime(time);
 8021392:	4b09      	ldr	r3, [pc, #36]	; (80213b8 <rtc_action+0x48>)
 8021394:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8021398:	68b8      	ldr	r0, [r7, #8]
 802139a:	4798      	blx	r3
 802139c:	e006      	b.n	80213ac <rtc_action+0x3c>
        else
            retval = Status_BadNumberFormat;
 802139e:	2302      	movs	r3, #2
 80213a0:	73fb      	strb	r3, [r7, #15]
 80213a2:	e003      	b.n	80213ac <rtc_action+0x3c>
    } else
        retval = report_time();
 80213a4:	f7f6 ff0a 	bl	80181bc <report_time>
 80213a8:	4603      	mov	r3, r0
 80213aa:	73fb      	strb	r3, [r7, #15]

    return retval;
 80213ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80213ae:	4618      	mov	r0, r3
 80213b0:	3710      	adds	r7, #16
 80213b2:	46bd      	mov	sp, r7
 80213b4:	bd80      	pop	{r7, pc}
 80213b6:	bf00      	nop
 80213b8:	200016a0 	.word	0x200016a0

080213bc <system_flag_wco_change>:
#endif

// End system commands

void system_flag_wco_change (void)
{
 80213bc:	b580      	push	{r7, lr}
 80213be:	af00      	add	r7, sp, #0
    if(!settings.status_report.sync_on_wco_change)
 80213c0:	4b0b      	ldr	r3, [pc, #44]	; (80213f0 <system_flag_wco_change+0x34>)
 80213c2:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80213c6:	f003 0301 	and.w	r3, r3, #1
 80213ca:	b2db      	uxtb	r3, r3
 80213cc:	2b00      	cmp	r3, #0
 80213ce:	d101      	bne.n	80213d4 <system_flag_wco_change+0x18>
        protocol_buffer_synchronize();
 80213d0:	f7f1 f9d8 	bl	8012784 <protocol_buffer_synchronize>

    if(grbl.on_wco_changed)
 80213d4:	4b07      	ldr	r3, [pc, #28]	; (80213f4 <system_flag_wco_change+0x38>)
 80213d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80213d8:	2b00      	cmp	r3, #0
 80213da:	d002      	beq.n	80213e2 <system_flag_wco_change+0x26>
        grbl.on_wco_changed();
 80213dc:	4b05      	ldr	r3, [pc, #20]	; (80213f4 <system_flag_wco_change+0x38>)
 80213de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80213e0:	4798      	blx	r3

    system_add_rt_report(Report_WCO);
 80213e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80213e6:	f000 f8ef 	bl	80215c8 <system_add_rt_report>
}
 80213ea:	bf00      	nop
 80213ec:	bd80      	pop	{r7, pc}
 80213ee:	bf00      	nop
 80213f0:	20001cf0 	.word	0x20001cf0
 80213f4:	200015b8 	.word	0x200015b8

080213f8 <system_convert_array_steps_to_mpos>:

// Sets machine position. Must be sent a 'step' array.
// NOTE: If motor steps and machine position are not in the same coordinate frame, this function
//       serves as a central place to compute the transformation.
void system_convert_array_steps_to_mpos (float *position, int32_t *steps)
{
 80213f8:	b480      	push	{r7}
 80213fa:	b085      	sub	sp, #20
 80213fc:	af00      	add	r7, sp, #0
 80213fe:	6078      	str	r0, [r7, #4]
 8021400:	6039      	str	r1, [r7, #0]
#ifdef KINEMATICS_API
    kinematics.transform_steps_to_cartesian(position, steps);
#else
    uint_fast8_t idx = N_AXIS;
 8021402:	2303      	movs	r3, #3
 8021404:	60fb      	str	r3, [r7, #12]
    do {
        idx--;
 8021406:	68fb      	ldr	r3, [r7, #12]
 8021408:	3b01      	subs	r3, #1
 802140a:	60fb      	str	r3, [r7, #12]
        position[idx] = steps[idx] / settings.axis[idx].steps_per_mm;
 802140c:	68fb      	ldr	r3, [r7, #12]
 802140e:	009b      	lsls	r3, r3, #2
 8021410:	683a      	ldr	r2, [r7, #0]
 8021412:	4413      	add	r3, r2
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	ee07 3a90 	vmov	s15, r3
 802141a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802141e:	490e      	ldr	r1, [pc, #56]	; (8021458 <system_convert_array_steps_to_mpos+0x60>)
 8021420:	68fa      	ldr	r2, [r7, #12]
 8021422:	4613      	mov	r3, r2
 8021424:	009b      	lsls	r3, r3, #2
 8021426:	4413      	add	r3, r2
 8021428:	009b      	lsls	r3, r3, #2
 802142a:	440b      	add	r3, r1
 802142c:	3330      	adds	r3, #48	; 0x30
 802142e:	ed93 7a00 	vldr	s14, [r3]
 8021432:	68fb      	ldr	r3, [r7, #12]
 8021434:	009b      	lsls	r3, r3, #2
 8021436:	687a      	ldr	r2, [r7, #4]
 8021438:	4413      	add	r3, r2
 802143a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802143e:	edc3 7a00 	vstr	s15, [r3]
    } while(idx);
 8021442:	68fb      	ldr	r3, [r7, #12]
 8021444:	2b00      	cmp	r3, #0
 8021446:	d1de      	bne.n	8021406 <system_convert_array_steps_to_mpos+0xe>
#endif
}
 8021448:	bf00      	nop
 802144a:	bf00      	nop
 802144c:	3714      	adds	r7, #20
 802144e:	46bd      	mov	sp, r7
 8021450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021454:	4770      	bx	lr
 8021456:	bf00      	nop
 8021458:	20001cf0 	.word	0x20001cf0

0802145c <system_xy_at_fixture>:

// Checks if XY position is within coordinate system XY with given tolerance.
// If tolerance is 0 false is returned.
bool system_xy_at_fixture (coord_system_id_t id, float tolerance)
{
 802145c:	b580      	push	{r7, lr}
 802145e:	b08a      	sub	sp, #40	; 0x28
 8021460:	af00      	add	r7, sp, #0
 8021462:	4603      	mov	r3, r0
 8021464:	ed87 0a00 	vstr	s0, [r7]
 8021468:	71fb      	strb	r3, [r7, #7]
    bool ok = false;
 802146a:	2300      	movs	r3, #0
 802146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    coord_data_t target, position;

    if(tolerance > 0.0f && settings_read_coord_data(id, &target.values)) {
 8021470:	edd7 7a00 	vldr	s15, [r7]
 8021474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802147c:	dd2e      	ble.n	80214dc <system_xy_at_fixture+0x80>
 802147e:	f107 0218 	add.w	r2, r7, #24
 8021482:	79fb      	ldrb	r3, [r7, #7]
 8021484:	4611      	mov	r1, r2
 8021486:	4618      	mov	r0, r3
 8021488:	f7f8 feba 	bl	801a200 <settings_read_coord_data>
 802148c:	4603      	mov	r3, r0
 802148e:	2b00      	cmp	r3, #0
 8021490:	d024      	beq.n	80214dc <system_xy_at_fixture+0x80>
        system_convert_array_steps_to_mpos(position.values, sys.position);
 8021492:	f107 030c 	add.w	r3, r7, #12
 8021496:	4914      	ldr	r1, [pc, #80]	; (80214e8 <system_xy_at_fixture+0x8c>)
 8021498:	4618      	mov	r0, r3
 802149a:	f7ff ffad 	bl	80213f8 <system_convert_array_steps_to_mpos>
        ok = hypot_f(position.x - target.x, position.y - target.y) <= tolerance;
 802149e:	ed97 7a03 	vldr	s14, [r7, #12]
 80214a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80214a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80214aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80214ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80214b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80214b6:	eef0 0a67 	vmov.f32	s1, s15
 80214ba:	eeb0 0a66 	vmov.f32	s0, s13
 80214be:	f7fe fd9f 	bl	8020000 <hypot_f>
 80214c2:	eeb0 7a40 	vmov.f32	s14, s0
 80214c6:	edd7 7a00 	vldr	s15, [r7]
 80214ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80214ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214d2:	bfac      	ite	ge
 80214d4:	2301      	movge	r3, #1
 80214d6:	2300      	movlt	r3, #0
 80214d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return ok;
 80214dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80214e0:	4618      	mov	r0, r3
 80214e2:	3728      	adds	r7, #40	; 0x28
 80214e4:	46bd      	mov	sp, r7
 80214e6:	bd80      	pop	{r7, pc}
 80214e8:	200015a8 	.word	0x200015a8

080214ec <system_raise_alarm>:

void system_raise_alarm (alarm_code_t alarm)
{
 80214ec:	b580      	push	{r7, lr}
 80214ee:	b082      	sub	sp, #8
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	4603      	mov	r3, r0
 80214f4:	71fb      	strb	r3, [r7, #7]
    if(state_get() == STATE_HOMING && !(sys.rt_exec_state & EXEC_RESET))
 80214f6:	f7fb fc13 	bl	801cd20 <state_get>
 80214fa:	4603      	mov	r3, r0
 80214fc:	2b04      	cmp	r3, #4
 80214fe:	d10c      	bne.n	802151a <system_raise_alarm+0x2e>
 8021500:	4b27      	ldr	r3, [pc, #156]	; (80215a0 <system_raise_alarm+0xb4>)
 8021502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021504:	f003 0320 	and.w	r3, r3, #32
 8021508:	2b00      	cmp	r3, #0
 802150a:	d106      	bne.n	802151a <system_raise_alarm+0x2e>
        system_set_exec_alarm(alarm);
 802150c:	4b25      	ldr	r3, [pc, #148]	; (80215a4 <system_raise_alarm+0xb8>)
 802150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021510:	79fa      	ldrb	r2, [r7, #7]
 8021512:	4611      	mov	r1, r2
 8021514:	4824      	ldr	r0, [pc, #144]	; (80215a8 <system_raise_alarm+0xbc>)
 8021516:	4798      	blx	r3
                                sys.alarm == Alarm_MotorFault;
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
        if(sys.driver_started || sys.alarm == Alarm_SelftestFailed)
            grbl.report.alarm_message(alarm);
    }
}
 8021518:	e03e      	b.n	8021598 <system_raise_alarm+0xac>
    else if(sys.alarm != alarm) {
 802151a:	4b21      	ldr	r3, [pc, #132]	; (80215a0 <system_raise_alarm+0xb4>)
 802151c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021520:	79fa      	ldrb	r2, [r7, #7]
 8021522:	429a      	cmp	r2, r3
 8021524:	d038      	beq.n	8021598 <system_raise_alarm+0xac>
        sys.alarm = alarm;
 8021526:	4a1e      	ldr	r2, [pc, #120]	; (80215a0 <system_raise_alarm+0xb4>)
 8021528:	79fb      	ldrb	r3, [r7, #7]
 802152a:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 802152e:	4b1c      	ldr	r3, [pc, #112]	; (80215a0 <system_raise_alarm+0xb4>)
 8021530:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
                               sys.alarm == Alarm_EStop ||
 8021534:	2b01      	cmp	r3, #1
 8021536:	d00e      	beq.n	8021556 <system_raise_alarm+0x6a>
                              sys.alarm == Alarm_SoftLimit ||
 8021538:	4b19      	ldr	r3, [pc, #100]	; (80215a0 <system_raise_alarm+0xb4>)
 802153a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 802153e:	2b02      	cmp	r3, #2
 8021540:	d009      	beq.n	8021556 <system_raise_alarm+0x6a>
                               sys.alarm == Alarm_EStop ||
 8021542:	4b17      	ldr	r3, [pc, #92]	; (80215a0 <system_raise_alarm+0xb4>)
 8021544:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
                              sys.alarm == Alarm_SoftLimit ||
 8021548:	2b0a      	cmp	r3, #10
 802154a:	d004      	beq.n	8021556 <system_raise_alarm+0x6a>
                                sys.alarm == Alarm_MotorFault;
 802154c:	4b14      	ldr	r3, [pc, #80]	; (80215a0 <system_raise_alarm+0xb4>)
 802154e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
                               sys.alarm == Alarm_EStop ||
 8021552:	2b11      	cmp	r3, #17
 8021554:	d101      	bne.n	802155a <system_raise_alarm+0x6e>
 8021556:	2301      	movs	r3, #1
 8021558:	e000      	b.n	802155c <system_raise_alarm+0x70>
 802155a:	2300      	movs	r3, #0
 802155c:	f003 0301 	and.w	r3, r3, #1
 8021560:	b2da      	uxtb	r2, r3
        sys.blocking_event = sys.alarm == Alarm_HardLimit ||
 8021562:	4b0f      	ldr	r3, [pc, #60]	; (80215a0 <system_raise_alarm+0xb4>)
 8021564:	715a      	strb	r2, [r3, #5]
        state_set(alarm == Alarm_EStop ? STATE_ESTOP : STATE_ALARM);
 8021566:	79fb      	ldrb	r3, [r7, #7]
 8021568:	2b0a      	cmp	r3, #10
 802156a:	d102      	bne.n	8021572 <system_raise_alarm+0x86>
 802156c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021570:	e000      	b.n	8021574 <system_raise_alarm+0x88>
 8021572:	2301      	movs	r3, #1
 8021574:	4618      	mov	r0, r3
 8021576:	f7fb fbdf 	bl	801cd38 <state_set>
        if(sys.driver_started || sys.alarm == Alarm_SelftestFailed)
 802157a:	4b09      	ldr	r3, [pc, #36]	; (80215a0 <system_raise_alarm+0xb4>)
 802157c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8021580:	2b00      	cmp	r3, #0
 8021582:	d104      	bne.n	802158e <system_raise_alarm+0xa2>
 8021584:	4b06      	ldr	r3, [pc, #24]	; (80215a0 <system_raise_alarm+0xb4>)
 8021586:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 802158a:	2b10      	cmp	r3, #16
 802158c:	d104      	bne.n	8021598 <system_raise_alarm+0xac>
            grbl.report.alarm_message(alarm);
 802158e:	4b07      	ldr	r3, [pc, #28]	; (80215ac <system_raise_alarm+0xc0>)
 8021590:	691b      	ldr	r3, [r3, #16]
 8021592:	79fa      	ldrb	r2, [r7, #7]
 8021594:	4610      	mov	r0, r2
 8021596:	4798      	blx	r3
}
 8021598:	bf00      	nop
 802159a:	3708      	adds	r7, #8
 802159c:	46bd      	mov	sp, r7
 802159e:	bd80      	pop	{r7, pc}
 80215a0:	20001520 	.word	0x20001520
 80215a4:	200016a0 	.word	0x200016a0
 80215a8:	2000156c 	.word	0x2000156c
 80215ac:	200015b8 	.word	0x200015b8

080215b0 <system_get_rt_report_flags>:

// TODO: encapsulate sys.report

report_tracking_flags_t system_get_rt_report_flags (void)
{
 80215b0:	b480      	push	{r7}
 80215b2:	af00      	add	r7, sp, #0
    return sys.report;
 80215b4:	4b03      	ldr	r3, [pc, #12]	; (80215c4 <system_get_rt_report_flags+0x14>)
 80215b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80215b8:	4618      	mov	r0, r3
 80215ba:	46bd      	mov	sp, r7
 80215bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215c0:	4770      	bx	lr
 80215c2:	bf00      	nop
 80215c4:	20001520 	.word	0x20001520

080215c8 <system_add_rt_report>:

void system_add_rt_report (report_tracking_t report)
{
 80215c8:	b580      	push	{r7, lr}
 80215ca:	b082      	sub	sp, #8
 80215cc:	af00      	add	r7, sp, #0
 80215ce:	6078      	str	r0, [r7, #4]
    if(report == Report_ClearAll)
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d103      	bne.n	80215de <system_add_rt_report+0x16>
        sys.report.value = 0;
 80215d6:	4b16      	ldr	r3, [pc, #88]	; (8021630 <system_add_rt_report+0x68>)
 80215d8:	2200      	movs	r2, #0
 80215da:	631a      	str	r2, [r3, #48]	; 0x30
 80215dc:	e016      	b.n	802160c <system_add_rt_report+0x44>
    else if(report == Report_MPGMode)
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	2b01      	cmp	r3, #1
 80215e2:	d10d      	bne.n	8021600 <system_add_rt_report+0x38>
        sys.report.mpg_mode = hal.driver_cap.mpg_mode;
 80215e4:	4b13      	ldr	r3, [pc, #76]	; (8021634 <system_add_rt_report+0x6c>)
 80215e6:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 80215ea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80215ee:	b2d9      	uxtb	r1, r3
 80215f0:	4a0f      	ldr	r2, [pc, #60]	; (8021630 <system_add_rt_report+0x68>)
 80215f2:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80215f6:	f361 0300 	bfi	r3, r1, #0, #1
 80215fa:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 80215fe:	e005      	b.n	802160c <system_add_rt_report+0x44>
    else
        sys.report.value |= (uint32_t)report;
 8021600:	4b0b      	ldr	r3, [pc, #44]	; (8021630 <system_add_rt_report+0x68>)
 8021602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	4313      	orrs	r3, r2
 8021608:	4a09      	ldr	r2, [pc, #36]	; (8021630 <system_add_rt_report+0x68>)
 802160a:	6313      	str	r3, [r2, #48]	; 0x30

    if(sys.report.value && grbl.on_rt_reports_added)
 802160c:	4b08      	ldr	r3, [pc, #32]	; (8021630 <system_add_rt_report+0x68>)
 802160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021610:	2b00      	cmp	r3, #0
 8021612:	d008      	beq.n	8021626 <system_add_rt_report+0x5e>
 8021614:	4b08      	ldr	r3, [pc, #32]	; (8021638 <system_add_rt_report+0x70>)
 8021616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021618:	2b00      	cmp	r3, #0
 802161a:	d004      	beq.n	8021626 <system_add_rt_report+0x5e>
        grbl.on_rt_reports_added((report_tracking_flags_t)((uint32_t)report));
 802161c:	4b06      	ldr	r3, [pc, #24]	; (8021638 <system_add_rt_report+0x70>)
 802161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021620:	687a      	ldr	r2, [r7, #4]
 8021622:	4610      	mov	r0, r2
 8021624:	4798      	blx	r3
}
 8021626:	bf00      	nop
 8021628:	3708      	adds	r7, #8
 802162a:	46bd      	mov	sp, r7
 802162c:	bd80      	pop	{r7, pc}
 802162e:	bf00      	nop
 8021630:	20001520 	.word	0x20001520
 8021634:	200016a0 	.word	0x200016a0
 8021638:	200015b8 	.word	0x200015b8

0802163c <on_probe_completed>:
static control_signals_callback_ptr control_interrupt_callback = NULL;

// Set tool offset on successful $TPW probe, prompt for retry on failure.
// Called via probe completed event.
static void on_probe_completed (void)
{
 802163c:	b580      	push	{r7, lr}
 802163e:	af00      	add	r7, sp, #0
    if(!sys.flags.probe_succeeded)
 8021640:	4b16      	ldr	r3, [pc, #88]	; (802169c <on_probe_completed+0x60>)
 8021642:	7d9b      	ldrb	r3, [r3, #22]
 8021644:	f003 0302 	and.w	r3, r3, #2
 8021648:	b2db      	uxtb	r3, r3
 802164a:	2b00      	cmp	r3, #0
 802164c:	d104      	bne.n	8021658 <on_probe_completed+0x1c>
        grbl.report.feedback_message(Message_ProbeFailedRetry);
 802164e:	4b14      	ldr	r3, [pc, #80]	; (80216a0 <on_probe_completed+0x64>)
 8021650:	68db      	ldr	r3, [r3, #12]
 8021652:	2013      	movs	r0, #19
 8021654:	4798      	blx	r3
    else if(sys.tlo_reference_set.mask & bit(plane.axis_linear))
        gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear, sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
//    else error?
}
 8021656:	e01f      	b.n	8021698 <on_probe_completed+0x5c>
    else if(sys.tlo_reference_set.mask & bit(plane.axis_linear))
 8021658:	4b10      	ldr	r3, [pc, #64]	; (802169c <on_probe_completed+0x60>)
 802165a:	79db      	ldrb	r3, [r3, #7]
 802165c:	461a      	mov	r2, r3
 802165e:	4b11      	ldr	r3, [pc, #68]	; (80216a4 <on_probe_completed+0x68>)
 8021660:	789b      	ldrb	r3, [r3, #2]
 8021662:	fa22 f303 	lsr.w	r3, r2, r3
 8021666:	f003 0301 	and.w	r3, r3, #1
 802166a:	2b00      	cmp	r3, #0
 802166c:	d014      	beq.n	8021698 <on_probe_completed+0x5c>
        gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear, sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 802166e:	4b0d      	ldr	r3, [pc, #52]	; (80216a4 <on_probe_completed+0x68>)
 8021670:	789b      	ldrb	r3, [r3, #2]
 8021672:	4618      	mov	r0, r3
 8021674:	4b0b      	ldr	r3, [pc, #44]	; (80216a4 <on_probe_completed+0x68>)
 8021676:	789b      	ldrb	r3, [r3, #2]
 8021678:	4a08      	ldr	r2, [pc, #32]	; (802169c <on_probe_completed+0x60>)
 802167a:	330e      	adds	r3, #14
 802167c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021680:	4b08      	ldr	r3, [pc, #32]	; (80216a4 <on_probe_completed+0x68>)
 8021682:	789b      	ldrb	r3, [r3, #2]
 8021684:	4905      	ldr	r1, [pc, #20]	; (802169c <on_probe_completed+0x60>)
 8021686:	3302      	adds	r3, #2
 8021688:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802168c:	1ad3      	subs	r3, r2, r3
 802168e:	461a      	mov	r2, r3
 8021690:	4601      	mov	r1, r0
 8021692:	2002      	movs	r0, #2
 8021694:	f7e3 ff9a 	bl	80055cc <gc_set_tool_offset>
}
 8021698:	bf00      	nop
 802169a:	bd80      	pop	{r7, pc}
 802169c:	20001520 	.word	0x20001520
 80216a0:	200015b8 	.word	0x200015b8
 80216a4:	200029bc 	.word	0x200029bc

080216a8 <change_completed>:

// Restore HAL pointers on completion or reset.
static void change_completed (void)
{
 80216a8:	b580      	push	{r7, lr}
 80216aa:	af00      	add	r7, sp, #0
    if(enqueue_realtime_command) {
 80216ac:	4b23      	ldr	r3, [pc, #140]	; (802173c <change_completed+0x94>)
 80216ae:	681b      	ldr	r3, [r3, #0]
 80216b0:	2b00      	cmp	r3, #0
 80216b2:	d014      	beq.n	80216de <change_completed+0x36>
        while(spin_lock);
 80216b4:	bf00      	nop
 80216b6:	4b22      	ldr	r3, [pc, #136]	; (8021740 <change_completed+0x98>)
 80216b8:	681b      	ldr	r3, [r3, #0]
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d1fb      	bne.n	80216b6 <change_completed+0xe>
        hal.irq_disable();
 80216be:	4b21      	ldr	r3, [pc, #132]	; (8021744 <change_completed+0x9c>)
 80216c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80216c2:	4798      	blx	r3
        hal.stream.set_enqueue_rt_handler(enqueue_realtime_command);
 80216c4:	4b1f      	ldr	r3, [pc, #124]	; (8021744 <change_completed+0x9c>)
 80216c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80216ca:	4a1c      	ldr	r2, [pc, #112]	; (802173c <change_completed+0x94>)
 80216cc:	6812      	ldr	r2, [r2, #0]
 80216ce:	4610      	mov	r0, r2
 80216d0:	4798      	blx	r3
        enqueue_realtime_command = NULL;
 80216d2:	4b1a      	ldr	r3, [pc, #104]	; (802173c <change_completed+0x94>)
 80216d4:	2200      	movs	r2, #0
 80216d6:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 80216d8:	4b1a      	ldr	r3, [pc, #104]	; (8021744 <change_completed+0x9c>)
 80216da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80216dc:	4798      	blx	r3
    }

    if(control_interrupt_callback) {
 80216de:	4b1a      	ldr	r3, [pc, #104]	; (8021748 <change_completed+0xa0>)
 80216e0:	681b      	ldr	r3, [r3, #0]
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d011      	beq.n	802170a <change_completed+0x62>
        while(spin_lock);
 80216e6:	bf00      	nop
 80216e8:	4b15      	ldr	r3, [pc, #84]	; (8021740 <change_completed+0x98>)
 80216ea:	681b      	ldr	r3, [r3, #0]
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	d1fb      	bne.n	80216e8 <change_completed+0x40>
        hal.irq_disable();
 80216f0:	4b14      	ldr	r3, [pc, #80]	; (8021744 <change_completed+0x9c>)
 80216f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80216f4:	4798      	blx	r3
        hal.control.interrupt_callback = control_interrupt_callback;
 80216f6:	4b14      	ldr	r3, [pc, #80]	; (8021748 <change_completed+0xa0>)
 80216f8:	681b      	ldr	r3, [r3, #0]
 80216fa:	4a12      	ldr	r2, [pc, #72]	; (8021744 <change_completed+0x9c>)
 80216fc:	66d3      	str	r3, [r2, #108]	; 0x6c
        control_interrupt_callback = NULL;
 80216fe:	4b12      	ldr	r3, [pc, #72]	; (8021748 <change_completed+0xa0>)
 8021700:	2200      	movs	r2, #0
 8021702:	601a      	str	r2, [r3, #0]
        hal.irq_enable();
 8021704:	4b0f      	ldr	r3, [pc, #60]	; (8021744 <change_completed+0x9c>)
 8021706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021708:	4798      	blx	r3
    }

    if(probe_fixture)
 802170a:	4b10      	ldr	r3, [pc, #64]	; (802174c <change_completed+0xa4>)
 802170c:	781b      	ldrb	r3, [r3, #0]
 802170e:	2b00      	cmp	r3, #0
 8021710:	d006      	beq.n	8021720 <change_completed+0x78>
        grbl.on_probe_fixture(&current_tool, true, false);
 8021712:	4b0f      	ldr	r3, [pc, #60]	; (8021750 <change_completed+0xa8>)
 8021714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021718:	2200      	movs	r2, #0
 802171a:	2101      	movs	r1, #1
 802171c:	480d      	ldr	r0, [pc, #52]	; (8021754 <change_completed+0xac>)
 802171e:	4798      	blx	r3

    grbl.on_probe_completed = NULL;
 8021720:	4b0b      	ldr	r3, [pc, #44]	; (8021750 <change_completed+0xa8>)
 8021722:	2200      	movs	r2, #0
 8021724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    gc_state.tool_change = probe_fixture = false;
 8021728:	4b08      	ldr	r3, [pc, #32]	; (802174c <change_completed+0xa4>)
 802172a:	2200      	movs	r2, #0
 802172c:	701a      	strb	r2, [r3, #0]
 802172e:	4b07      	ldr	r3, [pc, #28]	; (802174c <change_completed+0xa4>)
 8021730:	781a      	ldrb	r2, [r3, #0]
 8021732:	4b09      	ldr	r3, [pc, #36]	; (8021758 <change_completed+0xb0>)
 8021734:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
}
 8021738:	bf00      	nop
 802173a:	bd80      	pop	{r7, pc}
 802173c:	200029dc 	.word	0x200029dc
 8021740:	2000299c 	.word	0x2000299c
 8021744:	200016a0 	.word	0x200016a0
 8021748:	200029e0 	.word	0x200029e0
 802174c:	20002999 	.word	0x20002999
 8021750:	200015b8 	.word	0x200015b8
 8021754:	200029a4 	.word	0x200029a4
 8021758:	2000137c 	.word	0x2000137c

0802175c <reset>:


// Reset claimed HAL entry points and restore previous tool if needed on soft restart.
// Called from EXEC_RESET and EXEC_STOP handlers (via HAL).
static void reset (void)
{
 802175c:	b580      	push	{r7, lr}
 802175e:	af00      	add	r7, sp, #0
    if(next_tool) { //TODO: move to gc_xxx() function?
 8021760:	4b12      	ldr	r3, [pc, #72]	; (80217ac <reset+0x50>)
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	2b00      	cmp	r3, #0
 8021766:	d019      	beq.n	802179c <reset+0x40>
        if(current_tool.tool_id != next_tool->tool_id) {
            memcpy(gc_state.tool, &current_tool, sizeof(tool_data_t));
            system_add_rt_report(Report_Tool);
        }
#else
        if(current_tool.tool_id != next_tool->tool_id) {
 8021768:	4b11      	ldr	r3, [pc, #68]	; (80217b0 <reset+0x54>)
 802176a:	691a      	ldr	r2, [r3, #16]
 802176c:	4b0f      	ldr	r3, [pc, #60]	; (80217ac <reset+0x50>)
 802176e:	681b      	ldr	r3, [r3, #0]
 8021770:	691b      	ldr	r3, [r3, #16]
 8021772:	429a      	cmp	r2, r3
 8021774:	d009      	beq.n	802178a <reset+0x2e>
            memcpy(next_tool, &current_tool, sizeof(tool_data_t));
 8021776:	4b0d      	ldr	r3, [pc, #52]	; (80217ac <reset+0x50>)
 8021778:	681b      	ldr	r3, [r3, #0]
 802177a:	2214      	movs	r2, #20
 802177c:	490c      	ldr	r1, [pc, #48]	; (80217b0 <reset+0x54>)
 802177e:	4618      	mov	r0, r3
 8021780:	f004 fcba 	bl	80260f8 <memcpy>
            system_add_rt_report(Report_Tool);
 8021784:	2080      	movs	r0, #128	; 0x80
 8021786:	f7ff ff1f 	bl	80215c8 <system_add_rt_report>
        }
#endif
        gc_state.tool_pending = gc_state.tool->tool_id;
 802178a:	4b0a      	ldr	r3, [pc, #40]	; (80217b4 <reset+0x58>)
 802178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8021790:	691b      	ldr	r3, [r3, #16]
 8021792:	4a08      	ldr	r2, [pc, #32]	; (80217b4 <reset+0x58>)
 8021794:	6713      	str	r3, [r2, #112]	; 0x70
        next_tool = NULL;
 8021796:	4b05      	ldr	r3, [pc, #20]	; (80217ac <reset+0x50>)
 8021798:	2200      	movs	r2, #0
 802179a:	601a      	str	r2, [r3, #0]
    }

    change_completed();
 802179c:	f7ff ff84 	bl	80216a8 <change_completed>
    driver_reset();
 80217a0:	4b05      	ldr	r3, [pc, #20]	; (80217b8 <reset+0x5c>)
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	4798      	blx	r3
}
 80217a6:	bf00      	nop
 80217a8:	bd80      	pop	{r7, pc}
 80217aa:	bf00      	nop
 80217ac:	200029b8 	.word	0x200029b8
 80217b0:	200029a4 	.word	0x200029a4
 80217b4:	2000137c 	.word	0x2000137c
 80217b8:	200029d8 	.word	0x200029d8

080217bc <restore>:

// Restore coolant and spindle status, return controlled point to original position.
static bool restore (void)
{
 80217bc:	b580      	push	{r7, lr}
 80217be:	b08a      	sub	sp, #40	; 0x28
 80217c0:	af00      	add	r7, sp, #0
    plan_line_data_t plan_data;

    plan_data_init(&plan_data);
 80217c2:	463b      	mov	r3, r7
 80217c4:	4618      	mov	r0, r3
 80217c6:	f7f0 fb39 	bl	8011e3c <plan_data_init>
    plan_data.condition.rapid_motion = On;
 80217ca:	7d3b      	ldrb	r3, [r7, #20]
 80217cc:	f043 0301 	orr.w	r3, r3, #1
 80217d0:	753b      	strb	r3, [r7, #20]

    target.values[plane.axis_linear] = tool_change_position;
 80217d2:	4b48      	ldr	r3, [pc, #288]	; (80218f4 <restore+0x138>)
 80217d4:	789b      	ldrb	r3, [r3, #2]
 80217d6:	4618      	mov	r0, r3
 80217d8:	4b47      	ldr	r3, [pc, #284]	; (80218f8 <restore+0x13c>)
 80217da:	681a      	ldr	r2, [r3, #0]
 80217dc:	4947      	ldr	r1, [pc, #284]	; (80218fc <restore+0x140>)
 80217de:	0083      	lsls	r3, r0, #2
 80217e0:	440b      	add	r3, r1
 80217e2:	601a      	str	r2, [r3, #0]
    mc_line(target.values, &plan_data);
 80217e4:	463b      	mov	r3, r7
 80217e6:	4619      	mov	r1, r3
 80217e8:	4844      	ldr	r0, [pc, #272]	; (80218fc <restore+0x140>)
 80217ea:	f7eb fde7 	bl	800d3bc <mc_line>

    if(!settings.flags.no_restore_position_after_M6) {
 80217ee:	4b44      	ldr	r3, [pc, #272]	; (8021900 <restore+0x144>)
 80217f0:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80217f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80217f8:	b2db      	uxtb	r3, r3
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d112      	bne.n	8021824 <restore+0x68>
        memcpy(&target, &previous, sizeof(coord_data_t));
 80217fe:	4b3f      	ldr	r3, [pc, #252]	; (80218fc <restore+0x140>)
 8021800:	4a40      	ldr	r2, [pc, #256]	; (8021904 <restore+0x148>)
 8021802:	ca07      	ldmia	r2, {r0, r1, r2}
 8021804:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        target.values[plane.axis_linear] = tool_change_position;
 8021808:	4b3a      	ldr	r3, [pc, #232]	; (80218f4 <restore+0x138>)
 802180a:	789b      	ldrb	r3, [r3, #2]
 802180c:	4618      	mov	r0, r3
 802180e:	4b3a      	ldr	r3, [pc, #232]	; (80218f8 <restore+0x13c>)
 8021810:	681a      	ldr	r2, [r3, #0]
 8021812:	493a      	ldr	r1, [pc, #232]	; (80218fc <restore+0x140>)
 8021814:	0083      	lsls	r3, r0, #2
 8021816:	440b      	add	r3, r1
 8021818:	601a      	str	r2, [r3, #0]
        mc_line(target.values, &plan_data);
 802181a:	463b      	mov	r3, r7
 802181c:	4619      	mov	r1, r3
 802181e:	4837      	ldr	r0, [pc, #220]	; (80218fc <restore+0x140>)
 8021820:	f7eb fdcc 	bl	800d3bc <mc_line>
    }

    if(protocol_buffer_synchronize()) {
 8021824:	f7f0 ffae 	bl	8012784 <protocol_buffer_synchronize>
 8021828:	4603      	mov	r3, r0
 802182a:	2b00      	cmp	r3, #0
 802182c:	d038      	beq.n	80218a0 <restore+0xe4>

        sync_position();
 802182e:	f7f0 fa1d 	bl	8011c6c <plan_sync_position>
 8021832:	4935      	ldr	r1, [pc, #212]	; (8021908 <restore+0x14c>)
 8021834:	4835      	ldr	r0, [pc, #212]	; (802190c <restore+0x150>)
 8021836:	f7ff fddf 	bl	80213f8 <system_convert_array_steps_to_mpos>

        coolant_sync(gc_state.modal.coolant);
 802183a:	4b35      	ldr	r3, [pc, #212]	; (8021910 <restore+0x154>)
 802183c:	7e58      	ldrb	r0, [r3, #25]
 802183e:	f7e3 fccf 	bl	80051e0 <coolant_sync>
        spindle_restore(plan_data.spindle.hal, gc_state.modal.spindle.state, gc_state.spindle.rpm);
 8021842:	693b      	ldr	r3, [r7, #16]
 8021844:	4a32      	ldr	r2, [pc, #200]	; (8021910 <restore+0x154>)
 8021846:	edd2 7a12 	vldr	s15, [r2, #72]	; 0x48
 802184a:	4a31      	ldr	r2, [pc, #196]	; (8021910 <restore+0x154>)
 802184c:	eeb0 0a67 	vmov.f32	s0, s15
 8021850:	7e91      	ldrb	r1, [r2, #26]
 8021852:	4618      	mov	r0, r3
 8021854:	f7fa fde4 	bl	801c420 <spindle_restore>

        if(!settings.flags.no_restore_position_after_M6) {
 8021858:	4b29      	ldr	r3, [pc, #164]	; (8021900 <restore+0x144>)
 802185a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 802185e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021862:	b2db      	uxtb	r3, r3
 8021864:	2b00      	cmp	r3, #0
 8021866:	d11b      	bne.n	80218a0 <restore+0xe4>
            previous.values[plane.axis_linear] += gc_get_offset(plane.axis_linear);
 8021868:	4b22      	ldr	r3, [pc, #136]	; (80218f4 <restore+0x138>)
 802186a:	789b      	ldrb	r3, [r3, #2]
 802186c:	4618      	mov	r0, r3
 802186e:	f7e3 fe5d 	bl	800552c <gc_get_offset>
 8021872:	eeb0 7a40 	vmov.f32	s14, s0
 8021876:	4b1f      	ldr	r3, [pc, #124]	; (80218f4 <restore+0x138>)
 8021878:	789b      	ldrb	r3, [r3, #2]
 802187a:	4a22      	ldr	r2, [pc, #136]	; (8021904 <restore+0x148>)
 802187c:	009b      	lsls	r3, r3, #2
 802187e:	4413      	add	r3, r2
 8021880:	edd3 7a00 	vldr	s15, [r3]
 8021884:	4b1b      	ldr	r3, [pc, #108]	; (80218f4 <restore+0x138>)
 8021886:	789b      	ldrb	r3, [r3, #2]
 8021888:	ee77 7a27 	vadd.f32	s15, s14, s15
 802188c:	4a1d      	ldr	r2, [pc, #116]	; (8021904 <restore+0x148>)
 802188e:	009b      	lsls	r3, r3, #2
 8021890:	4413      	add	r3, r2
 8021892:	edc3 7a00 	vstr	s15, [r3]
            mc_line(previous.values, &plan_data);
 8021896:	463b      	mov	r3, r7
 8021898:	4619      	mov	r1, r3
 802189a:	481a      	ldr	r0, [pc, #104]	; (8021904 <restore+0x148>)
 802189c:	f7eb fd8e 	bl	800d3bc <mc_line>
        }
    }

    if(protocol_buffer_synchronize()) {
 80218a0:	f7f0 ff70 	bl	8012784 <protocol_buffer_synchronize>
 80218a4:	4603      	mov	r3, r0
 80218a6:	2b00      	cmp	r3, #0
 80218a8:	d00c      	beq.n	80218c4 <restore+0x108>
        sync_position();
 80218aa:	f7f0 f9df 	bl	8011c6c <plan_sync_position>
 80218ae:	4916      	ldr	r1, [pc, #88]	; (8021908 <restore+0x14c>)
 80218b0:	4816      	ldr	r0, [pc, #88]	; (802190c <restore+0x150>)
 80218b2:	f7ff fda1 	bl	80213f8 <system_convert_array_steps_to_mpos>
        memcpy(&current_tool, next_tool, sizeof(tool_data_t));
 80218b6:	4b17      	ldr	r3, [pc, #92]	; (8021914 <restore+0x158>)
 80218b8:	681b      	ldr	r3, [r3, #0]
 80218ba:	2214      	movs	r2, #20
 80218bc:	4619      	mov	r1, r3
 80218be:	4816      	ldr	r0, [pc, #88]	; (8021918 <restore+0x15c>)
 80218c0:	f004 fc1a 	bl	80260f8 <memcpy>
    }

    return !ABORTED;
 80218c4:	4b15      	ldr	r3, [pc, #84]	; (802191c <restore+0x160>)
 80218c6:	781b      	ldrb	r3, [r3, #0]
 80218c8:	f083 0301 	eor.w	r3, r3, #1
 80218cc:	b2db      	uxtb	r3, r3
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d008      	beq.n	80218e4 <restore+0x128>
 80218d2:	4b12      	ldr	r3, [pc, #72]	; (802191c <restore+0x160>)
 80218d4:	785b      	ldrb	r3, [r3, #1]
 80218d6:	f083 0301 	eor.w	r3, r3, #1
 80218da:	b2db      	uxtb	r3, r3
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d001      	beq.n	80218e4 <restore+0x128>
 80218e0:	2301      	movs	r3, #1
 80218e2:	e000      	b.n	80218e6 <restore+0x12a>
 80218e4:	2300      	movs	r3, #0
 80218e6:	f003 0301 	and.w	r3, r3, #1
 80218ea:	b2db      	uxtb	r3, r3
}
 80218ec:	4618      	mov	r0, r3
 80218ee:	3728      	adds	r7, #40	; 0x28
 80218f0:	46bd      	mov	sp, r7
 80218f2:	bd80      	pop	{r7, pc}
 80218f4:	200029bc 	.word	0x200029bc
 80218f8:	200029a0 	.word	0x200029a0
 80218fc:	200029c0 	.word	0x200029c0
 8021900:	20001cf0 	.word	0x20001cf0
 8021904:	200029cc 	.word	0x200029cc
 8021908:	200015a8 	.word	0x200015a8
 802190c:	200013dc 	.word	0x200013dc
 8021910:	2000137c 	.word	0x2000137c
 8021914:	200029b8 	.word	0x200029b8
 8021918:	200029a4 	.word	0x200029a4
 802191c:	20001520 	.word	0x20001520

08021920 <execute_warning>:

// Issue warning on cycle start event if touch off by $TPW is pending.
// Used in Manual and Manual_G59_3 modes ($341=1 or $341=2). Called from the foreground process.
static void execute_warning (sys_state_t state)
{
 8021920:	b580      	push	{r7, lr}
 8021922:	b082      	sub	sp, #8
 8021924:	af00      	add	r7, sp, #0
 8021926:	6078      	str	r0, [r7, #4]
    grbl.report.feedback_message(Message_ExecuteTPW);
 8021928:	4b03      	ldr	r3, [pc, #12]	; (8021938 <execute_warning+0x18>)
 802192a:	68db      	ldr	r3, [r3, #12]
 802192c:	2014      	movs	r0, #20
 802192e:	4798      	blx	r3
}
 8021930:	bf00      	nop
 8021932:	3708      	adds	r7, #8
 8021934:	46bd      	mov	sp, r7
 8021936:	bd80      	pop	{r7, pc}
 8021938:	200015b8 	.word	0x200015b8

0802193c <execute_restore>:

// Execute restore position after touch off (on cycle start event).
// Used in Manual and Manual_G59_3 modes ($341=1 or $341=2). Called from the foreground process.
static void execute_restore (sys_state_t state)
{
 802193c:	b580      	push	{r7, lr}
 802193e:	b084      	sub	sp, #16
 8021940:	af00      	add	r7, sp, #0
 8021942:	6078      	str	r0, [r7, #4]
    // Get current position.
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8021944:	490c      	ldr	r1, [pc, #48]	; (8021978 <execute_restore+0x3c>)
 8021946:	480d      	ldr	r0, [pc, #52]	; (802197c <execute_restore+0x40>)
 8021948:	f7ff fd56 	bl	80213f8 <system_convert_array_steps_to_mpos>

    bool ok = restore();
 802194c:	f7ff ff36 	bl	80217bc <restore>
 8021950:	4603      	mov	r3, r0
 8021952:	73fb      	strb	r3, [r7, #15]

    change_completed();
 8021954:	f7ff fea8 	bl	80216a8 <change_completed>

    grbl.report.feedback_message(Message_None);
 8021958:	4b09      	ldr	r3, [pc, #36]	; (8021980 <execute_restore+0x44>)
 802195a:	68db      	ldr	r3, [r3, #12]
 802195c:	2000      	movs	r0, #0
 802195e:	4798      	blx	r3

    if(ok)
 8021960:	7bfb      	ldrb	r3, [r7, #15]
 8021962:	2b00      	cmp	r3, #0
 8021964:	d004      	beq.n	8021970 <execute_restore+0x34>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 8021966:	4b07      	ldr	r3, [pc, #28]	; (8021984 <execute_restore+0x48>)
 8021968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802196a:	2102      	movs	r1, #2
 802196c:	4806      	ldr	r0, [pc, #24]	; (8021988 <execute_restore+0x4c>)
 802196e:	4798      	blx	r3
}
 8021970:	bf00      	nop
 8021972:	3710      	adds	r7, #16
 8021974:	46bd      	mov	sp, r7
 8021976:	bd80      	pop	{r7, pc}
 8021978:	200015a8 	.word	0x200015a8
 802197c:	200029c0 	.word	0x200029c0
 8021980:	200015b8 	.word	0x200015b8
 8021984:	200016a0 	.word	0x200016a0
 8021988:	20001568 	.word	0x20001568

0802198c <execute_probe>:

// Execute touch off on cycle start event from @ G59.3 position.
// Used in SemiAutomatic mode ($341=3) only. Called from the foreground process.
static void execute_probe (sys_state_t state)
{
 802198c:	b580      	push	{r7, lr}
 802198e:	b092      	sub	sp, #72	; 0x48
 8021990:	af00      	add	r7, sp, #0
 8021992:	6078      	str	r0, [r7, #4]
#if COMPATIBILITY_LEVEL <= 1
    bool ok;
    coord_data_t offset;
    plan_line_data_t plan_data;
    gc_parser_flags_t flags = {0};
 8021994:	2300      	movs	r3, #0
 8021996:	81bb      	strh	r3, [r7, #12]

    if(probe_fixture)
 8021998:	4b9e      	ldr	r3, [pc, #632]	; (8021c14 <execute_probe+0x288>)
 802199a:	781b      	ldrb	r3, [r3, #0]
 802199c:	2b00      	cmp	r3, #0
 802199e:	d007      	beq.n	80219b0 <execute_probe+0x24>
        grbl.on_probe_fixture(next_tool, true, true);
 80219a0:	4b9d      	ldr	r3, [pc, #628]	; (8021c18 <execute_probe+0x28c>)
 80219a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80219a6:	4a9d      	ldr	r2, [pc, #628]	; (8021c1c <execute_probe+0x290>)
 80219a8:	6810      	ldr	r0, [r2, #0]
 80219aa:	2201      	movs	r2, #1
 80219ac:	2101      	movs	r1, #1
 80219ae:	4798      	blx	r3

    // G59.3 contains offsets to position of TLS.
    settings_read_coord_data(CoordinateSystem_G59_3, &offset.values);
 80219b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80219b4:	4619      	mov	r1, r3
 80219b6:	2008      	movs	r0, #8
 80219b8:	f7f8 fc22 	bl	801a200 <settings_read_coord_data>

    plan_data_init(&plan_data);
 80219bc:	f107 0310 	add.w	r3, r7, #16
 80219c0:	4618      	mov	r0, r3
 80219c2:	f7f0 fa3b 	bl	8011e3c <plan_data_init>
    plan_data.condition.rapid_motion = On;
 80219c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80219ca:	f043 0301 	orr.w	r3, r3, #1
 80219ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    target.values[plane.axis_0] = offset.values[plane.axis_0];
 80219d2:	4b93      	ldr	r3, [pc, #588]	; (8021c20 <execute_probe+0x294>)
 80219d4:	781b      	ldrb	r3, [r3, #0]
 80219d6:	461a      	mov	r2, r3
 80219d8:	4b91      	ldr	r3, [pc, #580]	; (8021c20 <execute_probe+0x294>)
 80219da:	781b      	ldrb	r3, [r3, #0]
 80219dc:	4618      	mov	r0, r3
 80219de:	0093      	lsls	r3, r2, #2
 80219e0:	3348      	adds	r3, #72	; 0x48
 80219e2:	443b      	add	r3, r7
 80219e4:	3b10      	subs	r3, #16
 80219e6:	681a      	ldr	r2, [r3, #0]
 80219e8:	498e      	ldr	r1, [pc, #568]	; (8021c24 <execute_probe+0x298>)
 80219ea:	0083      	lsls	r3, r0, #2
 80219ec:	440b      	add	r3, r1
 80219ee:	601a      	str	r2, [r3, #0]
    target.values[plane.axis_1] = offset.values[plane.axis_1];
 80219f0:	4b8b      	ldr	r3, [pc, #556]	; (8021c20 <execute_probe+0x294>)
 80219f2:	785b      	ldrb	r3, [r3, #1]
 80219f4:	461a      	mov	r2, r3
 80219f6:	4b8a      	ldr	r3, [pc, #552]	; (8021c20 <execute_probe+0x294>)
 80219f8:	785b      	ldrb	r3, [r3, #1]
 80219fa:	4618      	mov	r0, r3
 80219fc:	0093      	lsls	r3, r2, #2
 80219fe:	3348      	adds	r3, #72	; 0x48
 8021a00:	443b      	add	r3, r7
 8021a02:	3b10      	subs	r3, #16
 8021a04:	681a      	ldr	r2, [r3, #0]
 8021a06:	4987      	ldr	r1, [pc, #540]	; (8021c24 <execute_probe+0x298>)
 8021a08:	0083      	lsls	r3, r0, #2
 8021a0a:	440b      	add	r3, r1
 8021a0c:	601a      	str	r2, [r3, #0]

    if((ok = mc_line(target.values, &plan_data))) {
 8021a0e:	f107 0310 	add.w	r3, r7, #16
 8021a12:	4619      	mov	r1, r3
 8021a14:	4883      	ldr	r0, [pc, #524]	; (8021c24 <execute_probe+0x298>)
 8021a16:	f7eb fcd1 	bl	800d3bc <mc_line>
 8021a1a:	4603      	mov	r3, r0
 8021a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8021a20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021a24:	2b00      	cmp	r3, #0
 8021a26:	f000 80e5 	beq.w	8021bf4 <execute_probe+0x268>

        target.values[plane.axis_linear] = offset.values[plane.axis_linear];
 8021a2a:	4b7d      	ldr	r3, [pc, #500]	; (8021c20 <execute_probe+0x294>)
 8021a2c:	789b      	ldrb	r3, [r3, #2]
 8021a2e:	461a      	mov	r2, r3
 8021a30:	4b7b      	ldr	r3, [pc, #492]	; (8021c20 <execute_probe+0x294>)
 8021a32:	789b      	ldrb	r3, [r3, #2]
 8021a34:	4618      	mov	r0, r3
 8021a36:	0093      	lsls	r3, r2, #2
 8021a38:	3348      	adds	r3, #72	; 0x48
 8021a3a:	443b      	add	r3, r7
 8021a3c:	3b10      	subs	r3, #16
 8021a3e:	681a      	ldr	r2, [r3, #0]
 8021a40:	4978      	ldr	r1, [pc, #480]	; (8021c24 <execute_probe+0x298>)
 8021a42:	0083      	lsls	r3, r0, #2
 8021a44:	440b      	add	r3, r1
 8021a46:	601a      	str	r2, [r3, #0]
        ok = mc_line(target.values, &plan_data);
 8021a48:	f107 0310 	add.w	r3, r7, #16
 8021a4c:	4619      	mov	r1, r3
 8021a4e:	4875      	ldr	r0, [pc, #468]	; (8021c24 <execute_probe+0x298>)
 8021a50:	f7eb fcb4 	bl	800d3bc <mc_line>
 8021a54:	4603      	mov	r3, r0
 8021a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        plan_data.feed_rate = settings.tool_change.seek_rate;
 8021a5a:	4b73      	ldr	r3, [pc, #460]	; (8021c28 <execute_probe+0x29c>)
 8021a5c:	6a1b      	ldr	r3, [r3, #32]
 8021a5e:	613b      	str	r3, [r7, #16]
        plan_data.condition.value = 0;
 8021a60:	2300      	movs	r3, #0
 8021a62:	627b      	str	r3, [r7, #36]	; 0x24
        plan_data.spindle.state.value = 0;
 8021a64:	2300      	movs	r3, #0
 8021a66:	763b      	strb	r3, [r7, #24]
        target.values[plane.axis_linear] -= settings.tool_change.probing_distance;
 8021a68:	4b6d      	ldr	r3, [pc, #436]	; (8021c20 <execute_probe+0x294>)
 8021a6a:	789b      	ldrb	r3, [r3, #2]
 8021a6c:	4a6d      	ldr	r2, [pc, #436]	; (8021c24 <execute_probe+0x298>)
 8021a6e:	009b      	lsls	r3, r3, #2
 8021a70:	4413      	add	r3, r2
 8021a72:	ed93 7a00 	vldr	s14, [r3]
 8021a76:	4b6c      	ldr	r3, [pc, #432]	; (8021c28 <execute_probe+0x29c>)
 8021a78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8021a7c:	4b68      	ldr	r3, [pc, #416]	; (8021c20 <execute_probe+0x294>)
 8021a7e:	789b      	ldrb	r3, [r3, #2]
 8021a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021a84:	4a67      	ldr	r2, [pc, #412]	; (8021c24 <execute_probe+0x298>)
 8021a86:	009b      	lsls	r3, r3, #2
 8021a88:	4413      	add	r3, r2
 8021a8a:	edc3 7a00 	vstr	s15, [r3]

        if((ok = ok && mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 8021a8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d00b      	beq.n	8021aae <execute_probe+0x122>
 8021a96:	f107 0310 	add.w	r3, r7, #16
 8021a9a:	89ba      	ldrh	r2, [r7, #12]
 8021a9c:	4619      	mov	r1, r3
 8021a9e:	4861      	ldr	r0, [pc, #388]	; (8021c24 <execute_probe+0x298>)
 8021aa0:	f7ed f960 	bl	800ed64 <mc_probe_cycle>
 8021aa4:	4603      	mov	r3, r0
 8021aa6:	2b01      	cmp	r3, #1
 8021aa8:	d101      	bne.n	8021aae <execute_probe+0x122>
 8021aaa:	2301      	movs	r3, #1
 8021aac:	e000      	b.n	8021ab0 <execute_probe+0x124>
 8021aae:	2300      	movs	r3, #0
 8021ab0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8021ab4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021ab8:	f003 0301 	and.w	r3, r3, #1
 8021abc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8021ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021ac4:	2b00      	cmp	r3, #0
 8021ac6:	d048      	beq.n	8021b5a <execute_probe+0x1ce>
        {
            system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8021ac8:	4958      	ldr	r1, [pc, #352]	; (8021c2c <execute_probe+0x2a0>)
 8021aca:	4856      	ldr	r0, [pc, #344]	; (8021c24 <execute_probe+0x298>)
 8021acc:	f7ff fc94 	bl	80213f8 <system_convert_array_steps_to_mpos>

            // Retract a bit and perform slow probe.
            plan_data.feed_rate = settings.tool_change.pulloff_rate;
 8021ad0:	4b55      	ldr	r3, [pc, #340]	; (8021c28 <execute_probe+0x29c>)
 8021ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021ad4:	613b      	str	r3, [r7, #16]
            target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 8021ad6:	4b52      	ldr	r3, [pc, #328]	; (8021c20 <execute_probe+0x294>)
 8021ad8:	789b      	ldrb	r3, [r3, #2]
 8021ada:	4a52      	ldr	r2, [pc, #328]	; (8021c24 <execute_probe+0x298>)
 8021adc:	009b      	lsls	r3, r3, #2
 8021ade:	4413      	add	r3, r2
 8021ae0:	edd3 7a00 	vldr	s15, [r3]
 8021ae4:	4b4e      	ldr	r3, [pc, #312]	; (8021c20 <execute_probe+0x294>)
 8021ae6:	789b      	ldrb	r3, [r3, #2]
 8021ae8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8021aec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021af0:	4a4c      	ldr	r2, [pc, #304]	; (8021c24 <execute_probe+0x298>)
 8021af2:	009b      	lsls	r3, r3, #2
 8021af4:	4413      	add	r3, r2
 8021af6:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_line(target.values, &plan_data))) {
 8021afa:	f107 0310 	add.w	r3, r7, #16
 8021afe:	4619      	mov	r1, r3
 8021b00:	4848      	ldr	r0, [pc, #288]	; (8021c24 <execute_probe+0x298>)
 8021b02:	f7eb fc5b 	bl	800d3bc <mc_line>
 8021b06:	4603      	mov	r3, r0
 8021b08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8021b0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d022      	beq.n	8021b5a <execute_probe+0x1ce>
                plan_data.feed_rate = settings.tool_change.feed_rate;
 8021b14:	4b44      	ldr	r3, [pc, #272]	; (8021c28 <execute_probe+0x29c>)
 8021b16:	69db      	ldr	r3, [r3, #28]
 8021b18:	613b      	str	r3, [r7, #16]
                target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 8021b1a:	4b41      	ldr	r3, [pc, #260]	; (8021c20 <execute_probe+0x294>)
 8021b1c:	789b      	ldrb	r3, [r3, #2]
 8021b1e:	4a41      	ldr	r2, [pc, #260]	; (8021c24 <execute_probe+0x298>)
 8021b20:	009b      	lsls	r3, r3, #2
 8021b22:	4413      	add	r3, r2
 8021b24:	edd3 7a00 	vldr	s15, [r3]
 8021b28:	4b3d      	ldr	r3, [pc, #244]	; (8021c20 <execute_probe+0x294>)
 8021b2a:	789b      	ldrb	r3, [r3, #2]
 8021b2c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8021b30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021b34:	4a3b      	ldr	r2, [pc, #236]	; (8021c24 <execute_probe+0x298>)
 8021b36:	009b      	lsls	r3, r3, #2
 8021b38:	4413      	add	r3, r2
 8021b3a:	edc3 7a00 	vstr	s15, [r3]
                ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found;
 8021b3e:	f107 0310 	add.w	r3, r7, #16
 8021b42:	89ba      	ldrh	r2, [r7, #12]
 8021b44:	4619      	mov	r1, r3
 8021b46:	4837      	ldr	r0, [pc, #220]	; (8021c24 <execute_probe+0x298>)
 8021b48:	f7ed f90c 	bl	800ed64 <mc_probe_cycle>
 8021b4c:	4603      	mov	r3, r0
 8021b4e:	2b01      	cmp	r3, #1
 8021b50:	bf0c      	ite	eq
 8021b52:	2301      	moveq	r3, #1
 8021b54:	2300      	movne	r3, #0
 8021b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }

        if(ok) {
 8021b5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d048      	beq.n	8021bf4 <execute_probe+0x268>
            if(!(sys.tlo_reference_set.mask & bit(plane.axis_linear))) {
 8021b62:	4b33      	ldr	r3, [pc, #204]	; (8021c30 <execute_probe+0x2a4>)
 8021b64:	79db      	ldrb	r3, [r3, #7]
 8021b66:	461a      	mov	r2, r3
 8021b68:	4b2d      	ldr	r3, [pc, #180]	; (8021c20 <execute_probe+0x294>)
 8021b6a:	789b      	ldrb	r3, [r3, #2]
 8021b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8021b70:	f003 0301 	and.w	r3, r3, #1
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	d123      	bne.n	8021bc0 <execute_probe+0x234>
                sys.tlo_reference[plane.axis_linear] = sys.probe_position[plane.axis_linear];
 8021b78:	4b29      	ldr	r3, [pc, #164]	; (8021c20 <execute_probe+0x294>)
 8021b7a:	789b      	ldrb	r3, [r3, #2]
 8021b7c:	4619      	mov	r1, r3
 8021b7e:	4b28      	ldr	r3, [pc, #160]	; (8021c20 <execute_probe+0x294>)
 8021b80:	789b      	ldrb	r3, [r3, #2]
 8021b82:	4618      	mov	r0, r3
 8021b84:	4a2a      	ldr	r2, [pc, #168]	; (8021c30 <execute_probe+0x2a4>)
 8021b86:	f101 030e 	add.w	r3, r1, #14
 8021b8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021b8e:	4928      	ldr	r1, [pc, #160]	; (8021c30 <execute_probe+0x2a4>)
 8021b90:	1c83      	adds	r3, r0, #2
 8021b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                sys.tlo_reference_set.mask |= bit(plane.axis_linear);
 8021b96:	4b26      	ldr	r3, [pc, #152]	; (8021c30 <execute_probe+0x2a4>)
 8021b98:	79da      	ldrb	r2, [r3, #7]
 8021b9a:	4b21      	ldr	r3, [pc, #132]	; (8021c20 <execute_probe+0x294>)
 8021b9c:	789b      	ldrb	r3, [r3, #2]
 8021b9e:	4619      	mov	r1, r3
 8021ba0:	2301      	movs	r3, #1
 8021ba2:	408b      	lsls	r3, r1
 8021ba4:	b2db      	uxtb	r3, r3
 8021ba6:	4313      	orrs	r3, r2
 8021ba8:	b2da      	uxtb	r2, r3
 8021baa:	4b21      	ldr	r3, [pc, #132]	; (8021c30 <execute_probe+0x2a4>)
 8021bac:	71da      	strb	r2, [r3, #7]
                system_add_rt_report(Report_TLOReference);
 8021bae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8021bb2:	f7ff fd09 	bl	80215c8 <system_add_rt_report>
                grbl.report.feedback_message(Message_ReferenceTLOEstablished);
 8021bb6:	4b18      	ldr	r3, [pc, #96]	; (8021c18 <execute_probe+0x28c>)
 8021bb8:	68db      	ldr	r3, [r3, #12]
 8021bba:	200f      	movs	r0, #15
 8021bbc:	4798      	blx	r3
 8021bbe:	e014      	b.n	8021bea <execute_probe+0x25e>
            } else
                gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear,
 8021bc0:	4b17      	ldr	r3, [pc, #92]	; (8021c20 <execute_probe+0x294>)
 8021bc2:	789b      	ldrb	r3, [r3, #2]
 8021bc4:	4618      	mov	r0, r3
                                    sys.probe_position[plane.axis_linear] - sys.tlo_reference[plane.axis_linear]);
 8021bc6:	4b16      	ldr	r3, [pc, #88]	; (8021c20 <execute_probe+0x294>)
 8021bc8:	789b      	ldrb	r3, [r3, #2]
 8021bca:	4a19      	ldr	r2, [pc, #100]	; (8021c30 <execute_probe+0x2a4>)
 8021bcc:	330e      	adds	r3, #14
 8021bce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021bd2:	4b13      	ldr	r3, [pc, #76]	; (8021c20 <execute_probe+0x294>)
 8021bd4:	789b      	ldrb	r3, [r3, #2]
 8021bd6:	4916      	ldr	r1, [pc, #88]	; (8021c30 <execute_probe+0x2a4>)
 8021bd8:	3302      	adds	r3, #2
 8021bda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                gc_set_tool_offset(ToolLengthOffset_EnableDynamic, plane.axis_linear,
 8021bde:	1ad3      	subs	r3, r2, r3
 8021be0:	461a      	mov	r2, r3
 8021be2:	4601      	mov	r1, r0
 8021be4:	2002      	movs	r0, #2
 8021be6:	f7e3 fcf1 	bl	80055cc <gc_set_tool_offset>

            ok = restore();
 8021bea:	f7ff fde7 	bl	80217bc <restore>
 8021bee:	4603      	mov	r3, r0
 8021bf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    change_completed();
 8021bf4:	f7ff fd58 	bl	80216a8 <change_completed>

    if(ok)
 8021bf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021bfc:	2b00      	cmp	r3, #0
 8021bfe:	d004      	beq.n	8021c0a <execute_probe+0x27e>
        system_set_exec_state_flag(EXEC_CYCLE_START);
 8021c00:	4b0c      	ldr	r3, [pc, #48]	; (8021c34 <execute_probe+0x2a8>)
 8021c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021c04:	2102      	movs	r1, #2
 8021c06:	480c      	ldr	r0, [pc, #48]	; (8021c38 <execute_probe+0x2ac>)
 8021c08:	4798      	blx	r3
#endif
}
 8021c0a:	bf00      	nop
 8021c0c:	3748      	adds	r7, #72	; 0x48
 8021c0e:	46bd      	mov	sp, r7
 8021c10:	bd80      	pop	{r7, pc}
 8021c12:	bf00      	nop
 8021c14:	20002999 	.word	0x20002999
 8021c18:	200015b8 	.word	0x200015b8
 8021c1c:	200029b8 	.word	0x200029b8
 8021c20:	200029bc 	.word	0x200029bc
 8021c24:	200029c0 	.word	0x200029c0
 8021c28:	20001cf0 	.word	0x20001cf0
 8021c2c:	20001558 	.word	0x20001558
 8021c30:	20001520 	.word	0x20001520
 8021c34:	200016a0 	.word	0x200016a0
 8021c38:	20001568 	.word	0x20001568

08021c3c <trap_control_cycle_start>:

// Trap cycle start commands and redirect to foreground process
// by adding the function to be called to the realtime execution queue.
ISR_CODE static void ISR_FUNC(trap_control_cycle_start)(control_signals_t signals)
{
 8021c3c:	b580      	push	{r7, lr}
 8021c3e:	b082      	sub	sp, #8
 8021c40:	af00      	add	r7, sp, #0
 8021c42:	80b8      	strh	r0, [r7, #4]
    spin_lock++;
 8021c44:	4b1f      	ldr	r3, [pc, #124]	; (8021cc4 <trap_control_cycle_start+0x88>)
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	3301      	adds	r3, #1
 8021c4a:	4a1e      	ldr	r2, [pc, #120]	; (8021cc4 <trap_control_cycle_start+0x88>)
 8021c4c:	6013      	str	r3, [r2, #0]

    if(signals.cycle_start) {
 8021c4e:	793b      	ldrb	r3, [r7, #4]
 8021c50:	f003 0304 	and.w	r3, r3, #4
 8021c54:	b2db      	uxtb	r3, r3
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	d026      	beq.n	8021ca8 <trap_control_cycle_start+0x6c>
        if(!execute_posted) {
 8021c5a:	4b1b      	ldr	r3, [pc, #108]	; (8021cc8 <trap_control_cycle_start+0x8c>)
 8021c5c:	781b      	ldrb	r3, [r3, #0]
 8021c5e:	b2db      	uxtb	r3, r3
 8021c60:	f083 0301 	eor.w	r3, r3, #1
 8021c64:	b2db      	uxtb	r3, r3
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d019      	beq.n	8021c9e <trap_control_cycle_start+0x62>
            if(!block_cycle_start)
 8021c6a:	4b18      	ldr	r3, [pc, #96]	; (8021ccc <trap_control_cycle_start+0x90>)
 8021c6c:	781b      	ldrb	r3, [r3, #0]
 8021c6e:	f083 0301 	eor.w	r3, r3, #1
 8021c72:	b2db      	uxtb	r3, r3
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	d00f      	beq.n	8021c98 <trap_control_cycle_start+0x5c>
                execute_posted = protocol_enqueue_rt_command(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore);
 8021c78:	4b15      	ldr	r3, [pc, #84]	; (8021cd0 <trap_control_cycle_start+0x94>)
 8021c7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021c7e:	2b03      	cmp	r3, #3
 8021c80:	d101      	bne.n	8021c86 <trap_control_cycle_start+0x4a>
 8021c82:	4b14      	ldr	r3, [pc, #80]	; (8021cd4 <trap_control_cycle_start+0x98>)
 8021c84:	e000      	b.n	8021c88 <trap_control_cycle_start+0x4c>
 8021c86:	4b14      	ldr	r3, [pc, #80]	; (8021cd8 <trap_control_cycle_start+0x9c>)
 8021c88:	4618      	mov	r0, r3
 8021c8a:	f7f1 fde5 	bl	8013858 <protocol_enqueue_rt_command>
 8021c8e:	4603      	mov	r3, r0
 8021c90:	461a      	mov	r2, r3
 8021c92:	4b0d      	ldr	r3, [pc, #52]	; (8021cc8 <trap_control_cycle_start+0x8c>)
 8021c94:	701a      	strb	r2, [r3, #0]
 8021c96:	e002      	b.n	8021c9e <trap_control_cycle_start+0x62>
            else
                protocol_enqueue_rt_command(execute_warning);
 8021c98:	4810      	ldr	r0, [pc, #64]	; (8021cdc <trap_control_cycle_start+0xa0>)
 8021c9a:	f7f1 fddd 	bl	8013858 <protocol_enqueue_rt_command>
        }
        signals.cycle_start = Off;
 8021c9e:	793b      	ldrb	r3, [r7, #4]
 8021ca0:	f36f 0382 	bfc	r3, #2, #1
 8021ca4:	713b      	strb	r3, [r7, #4]
 8021ca6:	e003      	b.n	8021cb0 <trap_control_cycle_start+0x74>
    } else
        control_interrupt_callback(signals);
 8021ca8:	4b0d      	ldr	r3, [pc, #52]	; (8021ce0 <trap_control_cycle_start+0xa4>)
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	88b8      	ldrh	r0, [r7, #4]
 8021cae:	4798      	blx	r3

    spin_lock--;
 8021cb0:	4b04      	ldr	r3, [pc, #16]	; (8021cc4 <trap_control_cycle_start+0x88>)
 8021cb2:	681b      	ldr	r3, [r3, #0]
 8021cb4:	3b01      	subs	r3, #1
 8021cb6:	4a03      	ldr	r2, [pc, #12]	; (8021cc4 <trap_control_cycle_start+0x88>)
 8021cb8:	6013      	str	r3, [r2, #0]
}
 8021cba:	bf00      	nop
 8021cbc:	3708      	adds	r7, #8
 8021cbe:	46bd      	mov	sp, r7
 8021cc0:	bd80      	pop	{r7, pc}
 8021cc2:	bf00      	nop
 8021cc4:	2000299c 	.word	0x2000299c
 8021cc8:	2000299a 	.word	0x2000299a
 8021ccc:	20002998 	.word	0x20002998
 8021cd0:	20001cf0 	.word	0x20001cf0
 8021cd4:	0802198d 	.word	0x0802198d
 8021cd8:	0802193d 	.word	0x0802193d
 8021cdc:	08021921 	.word	0x08021921
 8021ce0:	200029e0 	.word	0x200029e0

08021ce4 <trap_stream_cycle_start>:

ISR_CODE static bool ISR_FUNC(trap_stream_cycle_start)(char c)
{
 8021ce4:	b580      	push	{r7, lr}
 8021ce6:	b084      	sub	sp, #16
 8021ce8:	af00      	add	r7, sp, #0
 8021cea:	4603      	mov	r3, r0
 8021cec:	71fb      	strb	r3, [r7, #7]
    bool drop = false;
 8021cee:	2300      	movs	r3, #0
 8021cf0:	73fb      	strb	r3, [r7, #15]

    spin_lock++;
 8021cf2:	4b25      	ldr	r3, [pc, #148]	; (8021d88 <trap_stream_cycle_start+0xa4>)
 8021cf4:	681b      	ldr	r3, [r3, #0]
 8021cf6:	3301      	adds	r3, #1
 8021cf8:	4a23      	ldr	r2, [pc, #140]	; (8021d88 <trap_stream_cycle_start+0xa4>)
 8021cfa:	6013      	str	r3, [r2, #0]

    if((drop = (c == CMD_CYCLE_START || c == CMD_CYCLE_START_LEGACY))) {
 8021cfc:	79fb      	ldrb	r3, [r7, #7]
 8021cfe:	2b81      	cmp	r3, #129	; 0x81
 8021d00:	d002      	beq.n	8021d08 <trap_stream_cycle_start+0x24>
 8021d02:	79fb      	ldrb	r3, [r7, #7]
 8021d04:	2b7e      	cmp	r3, #126	; 0x7e
 8021d06:	d101      	bne.n	8021d0c <trap_stream_cycle_start+0x28>
 8021d08:	2301      	movs	r3, #1
 8021d0a:	e000      	b.n	8021d0e <trap_stream_cycle_start+0x2a>
 8021d0c:	2300      	movs	r3, #0
 8021d0e:	73fb      	strb	r3, [r7, #15]
 8021d10:	7bfb      	ldrb	r3, [r7, #15]
 8021d12:	f003 0301 	and.w	r3, r3, #1
 8021d16:	73fb      	strb	r3, [r7, #15]
 8021d18:	7bfb      	ldrb	r3, [r7, #15]
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d022      	beq.n	8021d64 <trap_stream_cycle_start+0x80>
        if(!execute_posted) {
 8021d1e:	4b1b      	ldr	r3, [pc, #108]	; (8021d8c <trap_stream_cycle_start+0xa8>)
 8021d20:	781b      	ldrb	r3, [r3, #0]
 8021d22:	b2db      	uxtb	r3, r3
 8021d24:	f083 0301 	eor.w	r3, r3, #1
 8021d28:	b2db      	uxtb	r3, r3
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d021      	beq.n	8021d72 <trap_stream_cycle_start+0x8e>
            if(!block_cycle_start)
 8021d2e:	4b18      	ldr	r3, [pc, #96]	; (8021d90 <trap_stream_cycle_start+0xac>)
 8021d30:	781b      	ldrb	r3, [r3, #0]
 8021d32:	f083 0301 	eor.w	r3, r3, #1
 8021d36:	b2db      	uxtb	r3, r3
 8021d38:	2b00      	cmp	r3, #0
 8021d3a:	d00f      	beq.n	8021d5c <trap_stream_cycle_start+0x78>
                execute_posted = protocol_enqueue_rt_command(settings.tool_change.mode == ToolChange_SemiAutomatic ? execute_probe : execute_restore);
 8021d3c:	4b15      	ldr	r3, [pc, #84]	; (8021d94 <trap_stream_cycle_start+0xb0>)
 8021d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021d42:	2b03      	cmp	r3, #3
 8021d44:	d101      	bne.n	8021d4a <trap_stream_cycle_start+0x66>
 8021d46:	4b14      	ldr	r3, [pc, #80]	; (8021d98 <trap_stream_cycle_start+0xb4>)
 8021d48:	e000      	b.n	8021d4c <trap_stream_cycle_start+0x68>
 8021d4a:	4b14      	ldr	r3, [pc, #80]	; (8021d9c <trap_stream_cycle_start+0xb8>)
 8021d4c:	4618      	mov	r0, r3
 8021d4e:	f7f1 fd83 	bl	8013858 <protocol_enqueue_rt_command>
 8021d52:	4603      	mov	r3, r0
 8021d54:	461a      	mov	r2, r3
 8021d56:	4b0d      	ldr	r3, [pc, #52]	; (8021d8c <trap_stream_cycle_start+0xa8>)
 8021d58:	701a      	strb	r2, [r3, #0]
 8021d5a:	e00a      	b.n	8021d72 <trap_stream_cycle_start+0x8e>
            else
                protocol_enqueue_rt_command(execute_warning);
 8021d5c:	4810      	ldr	r0, [pc, #64]	; (8021da0 <trap_stream_cycle_start+0xbc>)
 8021d5e:	f7f1 fd7b 	bl	8013858 <protocol_enqueue_rt_command>
 8021d62:	e006      	b.n	8021d72 <trap_stream_cycle_start+0x8e>
        }
    } else
        drop = enqueue_realtime_command(c);
 8021d64:	4b0f      	ldr	r3, [pc, #60]	; (8021da4 <trap_stream_cycle_start+0xc0>)
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	79fa      	ldrb	r2, [r7, #7]
 8021d6a:	4610      	mov	r0, r2
 8021d6c:	4798      	blx	r3
 8021d6e:	4603      	mov	r3, r0
 8021d70:	73fb      	strb	r3, [r7, #15]

    spin_lock--;
 8021d72:	4b05      	ldr	r3, [pc, #20]	; (8021d88 <trap_stream_cycle_start+0xa4>)
 8021d74:	681b      	ldr	r3, [r3, #0]
 8021d76:	3b01      	subs	r3, #1
 8021d78:	4a03      	ldr	r2, [pc, #12]	; (8021d88 <trap_stream_cycle_start+0xa4>)
 8021d7a:	6013      	str	r3, [r2, #0]

    return drop;
 8021d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8021d7e:	4618      	mov	r0, r3
 8021d80:	3710      	adds	r7, #16
 8021d82:	46bd      	mov	sp, r7
 8021d84:	bd80      	pop	{r7, pc}
 8021d86:	bf00      	nop
 8021d88:	2000299c 	.word	0x2000299c
 8021d8c:	2000299a 	.word	0x2000299a
 8021d90:	20002998 	.word	0x20002998
 8021d94:	20001cf0 	.word	0x20001cf0
 8021d98:	0802198d 	.word	0x0802198d
 8021d9c:	0802193d 	.word	0x0802193d
 8021da0:	08021921 	.word	0x08021921
 8021da4:	200029dc 	.word	0x200029dc

08021da8 <on_toolchange_ack>:

// Trap cycle start command and control signal when tool change is acknowledged by sender.
ISR_CODE static void ISR_FUNC(on_toolchange_ack)(void)
{
 8021da8:	b580      	push	{r7, lr}
 8021daa:	af00      	add	r7, sp, #0
    control_interrupt_callback = hal.control.interrupt_callback;
 8021dac:	4b08      	ldr	r3, [pc, #32]	; (8021dd0 <on_toolchange_ack+0x28>)
 8021dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021db0:	4a08      	ldr	r2, [pc, #32]	; (8021dd4 <on_toolchange_ack+0x2c>)
 8021db2:	6013      	str	r3, [r2, #0]
    hal.control.interrupt_callback = trap_control_cycle_start;
 8021db4:	4b06      	ldr	r3, [pc, #24]	; (8021dd0 <on_toolchange_ack+0x28>)
 8021db6:	4a08      	ldr	r2, [pc, #32]	; (8021dd8 <on_toolchange_ack+0x30>)
 8021db8:	66da      	str	r2, [r3, #108]	; 0x6c
    enqueue_realtime_command = hal.stream.set_enqueue_rt_handler(trap_stream_cycle_start);
 8021dba:	4b05      	ldr	r3, [pc, #20]	; (8021dd0 <on_toolchange_ack+0x28>)
 8021dbc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8021dc0:	4806      	ldr	r0, [pc, #24]	; (8021ddc <on_toolchange_ack+0x34>)
 8021dc2:	4798      	blx	r3
 8021dc4:	4603      	mov	r3, r0
 8021dc6:	4a06      	ldr	r2, [pc, #24]	; (8021de0 <on_toolchange_ack+0x38>)
 8021dc8:	6013      	str	r3, [r2, #0]

}
 8021dca:	bf00      	nop
 8021dcc:	bd80      	pop	{r7, pc}
 8021dce:	bf00      	nop
 8021dd0:	200016a0 	.word	0x200016a0
 8021dd4:	200029e0 	.word	0x200029e0
 8021dd8:	08021c3d 	.word	0x08021c3d
 8021ddc:	08021ce5 	.word	0x08021ce5
 8021de0:	200029dc 	.word	0x200029dc

08021de4 <tool_select>:

// Set next and/or current tool. Called by gcode.c on on a Tn or M61 command (via HAL).
static void tool_select (tool_data_t *tool, bool next)
{
 8021de4:	b580      	push	{r7, lr}
 8021de6:	b082      	sub	sp, #8
 8021de8:	af00      	add	r7, sp, #0
 8021dea:	6078      	str	r0, [r7, #4]
 8021dec:	460b      	mov	r3, r1
 8021dee:	70fb      	strb	r3, [r7, #3]
    next_tool = tool;
 8021df0:	4a08      	ldr	r2, [pc, #32]	; (8021e14 <tool_select+0x30>)
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	6013      	str	r3, [r2, #0]
    if(!next)
 8021df6:	78fb      	ldrb	r3, [r7, #3]
 8021df8:	f083 0301 	eor.w	r3, r3, #1
 8021dfc:	b2db      	uxtb	r3, r3
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d004      	beq.n	8021e0c <tool_select+0x28>
        memcpy(&current_tool, tool, sizeof(tool_data_t));
 8021e02:	2214      	movs	r2, #20
 8021e04:	6879      	ldr	r1, [r7, #4]
 8021e06:	4804      	ldr	r0, [pc, #16]	; (8021e18 <tool_select+0x34>)
 8021e08:	f004 f976 	bl	80260f8 <memcpy>
}
 8021e0c:	bf00      	nop
 8021e0e:	3708      	adds	r7, #8
 8021e10:	46bd      	mov	sp, r7
 8021e12:	bd80      	pop	{r7, pc}
 8021e14:	200029b8 	.word	0x200029b8
 8021e18:	200029a4 	.word	0x200029a4

08021e1c <tool_change>:

// Start a tool change sequence. Called by gcode.c on a M6 command (via HAL).
static status_code_t tool_change (parser_state_t *parser_state)
{
 8021e1c:	b580      	push	{r7, lr}
 8021e1e:	b08e      	sub	sp, #56	; 0x38
 8021e20:	af00      	add	r7, sp, #0
 8021e22:	6078      	str	r0, [r7, #4]
    if(next_tool == NULL)
 8021e24:	4b83      	ldr	r3, [pc, #524]	; (8022034 <tool_change+0x218>)
 8021e26:	681b      	ldr	r3, [r3, #0]
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	d101      	bne.n	8021e30 <tool_change+0x14>
        return Status_GCodeToolError;
 8021e2c:	232f      	movs	r3, #47	; 0x2f
 8021e2e:	e0fd      	b.n	802202c <tool_change+0x210>

    if(current_tool.tool_id == next_tool->tool_id)
 8021e30:	4b81      	ldr	r3, [pc, #516]	; (8022038 <tool_change+0x21c>)
 8021e32:	691a      	ldr	r2, [r3, #16]
 8021e34:	4b7f      	ldr	r3, [pc, #508]	; (8022034 <tool_change+0x218>)
 8021e36:	681b      	ldr	r3, [r3, #0]
 8021e38:	691b      	ldr	r3, [r3, #16]
 8021e3a:	429a      	cmp	r2, r3
 8021e3c:	d101      	bne.n	8021e42 <tool_change+0x26>
        return Status_OK;
 8021e3e:	2300      	movs	r3, #0
 8021e40:	e0f4      	b.n	802202c <tool_change+0x210>
  #else
    plane.axis_0 = X_AXIS;
    plane.axis_1 = Y_AXIS;
  #endif
#else
    gc_get_plane_data(&plane, parser_state->modal.plane_select);
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	799b      	ldrb	r3, [r3, #6]
 8021e46:	4619      	mov	r1, r3
 8021e48:	487c      	ldr	r0, [pc, #496]	; (802203c <tool_change+0x220>)
 8021e4a:	f7e3 fc4d 	bl	80056e8 <gc_get_plane_data>
#endif

    uint8_t homed_req = settings.tool_change.mode == ToolChange_Manual ? bit(plane.axis_linear) : (X_AXIS_BIT|Y_AXIS_BIT|Z_AXIS_BIT);
 8021e4e:	4b7c      	ldr	r3, [pc, #496]	; (8022040 <tool_change+0x224>)
 8021e50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021e54:	2b01      	cmp	r3, #1
 8021e56:	d106      	bne.n	8021e66 <tool_change+0x4a>
 8021e58:	4b78      	ldr	r3, [pc, #480]	; (802203c <tool_change+0x220>)
 8021e5a:	789b      	ldrb	r3, [r3, #2]
 8021e5c:	461a      	mov	r2, r3
 8021e5e:	2301      	movs	r3, #1
 8021e60:	4093      	lsls	r3, r2
 8021e62:	b2db      	uxtb	r3, r3
 8021e64:	e000      	b.n	8021e68 <tool_change+0x4c>
 8021e66:	2307      	movs	r3, #7
 8021e68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if((sys.homed.mask & homed_req) != homed_req)
 8021e6c:	4b75      	ldr	r3, [pc, #468]	; (8022044 <tool_change+0x228>)
 8021e6e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8021e72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8021e76:	4013      	ands	r3, r2
 8021e78:	b2db      	uxtb	r3, r3
 8021e7a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8021e7e:	429a      	cmp	r2, r3
 8021e80:	d001      	beq.n	8021e86 <tool_change+0x6a>
        return Status_HomingRequired;
 8021e82:	232e      	movs	r3, #46	; 0x2e
 8021e84:	e0d2      	b.n	802202c <tool_change+0x210>

    if(settings.tool_change.mode != ToolChange_SemiAutomatic)
 8021e86:	4b6e      	ldr	r3, [pc, #440]	; (8022040 <tool_change+0x224>)
 8021e88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021e8c:	2b03      	cmp	r3, #3
 8021e8e:	d003      	beq.n	8021e98 <tool_change+0x7c>
        grbl.on_probe_completed = on_probe_completed;
 8021e90:	4b6d      	ldr	r3, [pc, #436]	; (8022048 <tool_change+0x22c>)
 8021e92:	4a6e      	ldr	r2, [pc, #440]	; (802204c <tool_change+0x230>)
 8021e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    block_cycle_start = settings.tool_change.mode != ToolChange_SemiAutomatic;
 8021e98:	4b69      	ldr	r3, [pc, #420]	; (8022040 <tool_change+0x224>)
 8021e9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021e9e:	2b03      	cmp	r3, #3
 8021ea0:	bf14      	ite	ne
 8021ea2:	2301      	movne	r3, #1
 8021ea4:	2300      	moveq	r3, #0
 8021ea6:	b2da      	uxtb	r2, r3
 8021ea8:	4b69      	ldr	r3, [pc, #420]	; (8022050 <tool_change+0x234>)
 8021eaa:	701a      	strb	r2, [r3, #0]

    // Stop spindle and coolant.
    spindle_all_off();
 8021eac:	f7fa fb98 	bl	801c5e0 <spindle_all_off>
    hal.coolant.set_state((coolant_state_t){0});
 8021eb0:	4b68      	ldr	r3, [pc, #416]	; (8022054 <tool_change+0x238>)
 8021eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021eb4:	2200      	movs	r2, #0
 8021eb6:	4610      	mov	r0, r2
 8021eb8:	4798      	blx	r3

    execute_posted = false;
 8021eba:	4b67      	ldr	r3, [pc, #412]	; (8022058 <tool_change+0x23c>)
 8021ebc:	2200      	movs	r2, #0
 8021ebe:	701a      	strb	r2, [r3, #0]
    probe_fixture = grbl.on_probe_fixture != NULL &&
 8021ec0:	4b61      	ldr	r3, [pc, #388]	; (8022048 <tool_change+0x22c>)
 8021ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021ec6:	2b00      	cmp	r3, #0
 8021ec8:	d010      	beq.n	8021eec <tool_change+0xd0>
                     (settings.tool_change.mode == ToolChange_Manual ||
 8021eca:	4b5d      	ldr	r3, [pc, #372]	; (8022040 <tool_change+0x224>)
 8021ecc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    probe_fixture = grbl.on_probe_fixture != NULL &&
 8021ed0:	2b01      	cmp	r3, #1
 8021ed2:	d009      	beq.n	8021ee8 <tool_change+0xcc>
                       settings.tool_change.mode == ToolChange_Manual_G59_3 ||
 8021ed4:	4b5a      	ldr	r3, [pc, #360]	; (8022040 <tool_change+0x224>)
 8021ed6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
                     (settings.tool_change.mode == ToolChange_Manual ||
 8021eda:	2b02      	cmp	r3, #2
 8021edc:	d004      	beq.n	8021ee8 <tool_change+0xcc>
                        settings.tool_change.mode == ToolChange_SemiAutomatic);
 8021ede:	4b58      	ldr	r3, [pc, #352]	; (8022040 <tool_change+0x224>)
 8021ee0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
                       settings.tool_change.mode == ToolChange_Manual_G59_3 ||
 8021ee4:	2b03      	cmp	r3, #3
 8021ee6:	d101      	bne.n	8021eec <tool_change+0xd0>
    probe_fixture = grbl.on_probe_fixture != NULL &&
 8021ee8:	2301      	movs	r3, #1
 8021eea:	e000      	b.n	8021eee <tool_change+0xd2>
 8021eec:	2300      	movs	r3, #0
 8021eee:	f003 0301 	and.w	r3, r3, #1
 8021ef2:	b2da      	uxtb	r2, r3
 8021ef4:	4b59      	ldr	r3, [pc, #356]	; (802205c <tool_change+0x240>)
 8021ef6:	701a      	strb	r2, [r3, #0]

    // Save current position.
    system_convert_array_steps_to_mpos(previous.values, sys.position);
 8021ef8:	4959      	ldr	r1, [pc, #356]	; (8022060 <tool_change+0x244>)
 8021efa:	485a      	ldr	r0, [pc, #360]	; (8022064 <tool_change+0x248>)
 8021efc:	f7ff fa7c 	bl	80213f8 <system_convert_array_steps_to_mpos>

    // Establish axis assignments.

    previous.values[plane.axis_linear] -= gc_get_offset(plane.axis_linear);
 8021f00:	4b4e      	ldr	r3, [pc, #312]	; (802203c <tool_change+0x220>)
 8021f02:	789b      	ldrb	r3, [r3, #2]
 8021f04:	4618      	mov	r0, r3
 8021f06:	f7e3 fb11 	bl	800552c <gc_get_offset>
 8021f0a:	eeb0 7a40 	vmov.f32	s14, s0
 8021f0e:	4b4b      	ldr	r3, [pc, #300]	; (802203c <tool_change+0x220>)
 8021f10:	789b      	ldrb	r3, [r3, #2]
 8021f12:	4a54      	ldr	r2, [pc, #336]	; (8022064 <tool_change+0x248>)
 8021f14:	009b      	lsls	r3, r3, #2
 8021f16:	4413      	add	r3, r2
 8021f18:	edd3 7a00 	vldr	s15, [r3]
 8021f1c:	4b47      	ldr	r3, [pc, #284]	; (802203c <tool_change+0x220>)
 8021f1e:	789b      	ldrb	r3, [r3, #2]
 8021f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021f24:	4a4f      	ldr	r2, [pc, #316]	; (8022064 <tool_change+0x248>)
 8021f26:	009b      	lsls	r3, r3, #2
 8021f28:	4413      	add	r3, r2
 8021f2a:	edc3 7a00 	vstr	s15, [r3]

    plan_line_data_t plan_data;

    plan_data_init(&plan_data);
 8021f2e:	f107 0308 	add.w	r3, r7, #8
 8021f32:	4618      	mov	r0, r3
 8021f34:	f7ef ff82 	bl	8011e3c <plan_data_init>
    plan_data.condition.rapid_motion = On;
 8021f38:	7f3b      	ldrb	r3, [r7, #28]
 8021f3a:	f043 0301 	orr.w	r3, r3, #1
 8021f3e:	773b      	strb	r3, [r7, #28]
    // TODO: add?
    //if(!settings.homing.flags.force_set_origin && bit_istrue(settings.homing.dir_mask.value, bit(plane.axis_linear)))
    //    tool_change_position = ?
    //else

    tool_change_position = sys.home_position[plane.axis_linear]; // - settings.homing.flags.force_set_origin ? LINEAR_AXIS_HOME_OFFSET : 0.0f;
 8021f40:	4b3e      	ldr	r3, [pc, #248]	; (802203c <tool_change+0x220>)
 8021f42:	789b      	ldrb	r3, [r3, #2]
 8021f44:	4a3f      	ldr	r2, [pc, #252]	; (8022044 <tool_change+0x228>)
 8021f46:	3316      	adds	r3, #22
 8021f48:	009b      	lsls	r3, r3, #2
 8021f4a:	4413      	add	r3, r2
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	4a46      	ldr	r2, [pc, #280]	; (8022068 <tool_change+0x24c>)
 8021f50:	6013      	str	r3, [r2, #0]

    // Rapid to home position of linear axis.
    memcpy(&target, &previous, sizeof(coord_data_t));
 8021f52:	4b46      	ldr	r3, [pc, #280]	; (802206c <tool_change+0x250>)
 8021f54:	4a43      	ldr	r2, [pc, #268]	; (8022064 <tool_change+0x248>)
 8021f56:	ca07      	ldmia	r2, {r0, r1, r2}
 8021f58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    target.values[plane.axis_linear] = tool_change_position;
 8021f5c:	4b37      	ldr	r3, [pc, #220]	; (802203c <tool_change+0x220>)
 8021f5e:	789b      	ldrb	r3, [r3, #2]
 8021f60:	4618      	mov	r0, r3
 8021f62:	4b41      	ldr	r3, [pc, #260]	; (8022068 <tool_change+0x24c>)
 8021f64:	681a      	ldr	r2, [r3, #0]
 8021f66:	4941      	ldr	r1, [pc, #260]	; (802206c <tool_change+0x250>)
 8021f68:	0083      	lsls	r3, r0, #2
 8021f6a:	440b      	add	r3, r1
 8021f6c:	601a      	str	r2, [r3, #0]
    if(!mc_line(target.values, &plan_data))
 8021f6e:	f107 0308 	add.w	r3, r7, #8
 8021f72:	4619      	mov	r1, r3
 8021f74:	483d      	ldr	r0, [pc, #244]	; (802206c <tool_change+0x250>)
 8021f76:	f7eb fa21 	bl	800d3bc <mc_line>
 8021f7a:	4603      	mov	r3, r0
 8021f7c:	f083 0301 	eor.w	r3, r3, #1
 8021f80:	b2db      	uxtb	r3, r3
 8021f82:	2b00      	cmp	r3, #0
 8021f84:	d001      	beq.n	8021f8a <tool_change+0x16e>
        return Status_Reset;
 8021f86:	2312      	movs	r3, #18
 8021f88:	e050      	b.n	802202c <tool_change+0x210>

#if COMPATIBILITY_LEVEL <= 1
    if(settings.tool_change.mode == ToolChange_Manual_G59_3) {
 8021f8a:	4b2d      	ldr	r3, [pc, #180]	; (8022040 <tool_change+0x224>)
 8021f8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021f90:	2b02      	cmp	r3, #2
 8021f92:	d136      	bne.n	8022002 <tool_change+0x1e6>

        // G59.3 contains offsets to tool change position.
        settings_read_coord_data(CoordinateSystem_G59_3, &target.values);
 8021f94:	4935      	ldr	r1, [pc, #212]	; (802206c <tool_change+0x250>)
 8021f96:	2008      	movs	r0, #8
 8021f98:	f7f8 f932 	bl	801a200 <settings_read_coord_data>

        float tmp_pos = target.values[plane.axis_linear];
 8021f9c:	4b27      	ldr	r3, [pc, #156]	; (802203c <tool_change+0x220>)
 8021f9e:	789b      	ldrb	r3, [r3, #2]
 8021fa0:	4a32      	ldr	r2, [pc, #200]	; (802206c <tool_change+0x250>)
 8021fa2:	009b      	lsls	r3, r3, #2
 8021fa4:	4413      	add	r3, r2
 8021fa6:	681b      	ldr	r3, [r3, #0]
 8021fa8:	633b      	str	r3, [r7, #48]	; 0x30

        target.values[plane.axis_linear] = tool_change_position;
 8021faa:	4b24      	ldr	r3, [pc, #144]	; (802203c <tool_change+0x220>)
 8021fac:	789b      	ldrb	r3, [r3, #2]
 8021fae:	4618      	mov	r0, r3
 8021fb0:	4b2d      	ldr	r3, [pc, #180]	; (8022068 <tool_change+0x24c>)
 8021fb2:	681a      	ldr	r2, [r3, #0]
 8021fb4:	492d      	ldr	r1, [pc, #180]	; (802206c <tool_change+0x250>)
 8021fb6:	0083      	lsls	r3, r0, #2
 8021fb8:	440b      	add	r3, r1
 8021fba:	601a      	str	r2, [r3, #0]
        if(!mc_line(target.values, &plan_data))
 8021fbc:	f107 0308 	add.w	r3, r7, #8
 8021fc0:	4619      	mov	r1, r3
 8021fc2:	482a      	ldr	r0, [pc, #168]	; (802206c <tool_change+0x250>)
 8021fc4:	f7eb f9fa 	bl	800d3bc <mc_line>
 8021fc8:	4603      	mov	r3, r0
 8021fca:	f083 0301 	eor.w	r3, r3, #1
 8021fce:	b2db      	uxtb	r3, r3
 8021fd0:	2b00      	cmp	r3, #0
 8021fd2:	d001      	beq.n	8021fd8 <tool_change+0x1bc>
            return Status_Reset;
 8021fd4:	2312      	movs	r3, #18
 8021fd6:	e029      	b.n	802202c <tool_change+0x210>

        target.values[plane.axis_linear] = tmp_pos;
 8021fd8:	4b18      	ldr	r3, [pc, #96]	; (802203c <tool_change+0x220>)
 8021fda:	789b      	ldrb	r3, [r3, #2]
 8021fdc:	4a23      	ldr	r2, [pc, #140]	; (802206c <tool_change+0x250>)
 8021fde:	009b      	lsls	r3, r3, #2
 8021fe0:	4413      	add	r3, r2
 8021fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021fe4:	601a      	str	r2, [r3, #0]
        if(!mc_line(target.values, &plan_data))
 8021fe6:	f107 0308 	add.w	r3, r7, #8
 8021fea:	4619      	mov	r1, r3
 8021fec:	481f      	ldr	r0, [pc, #124]	; (802206c <tool_change+0x250>)
 8021fee:	f7eb f9e5 	bl	800d3bc <mc_line>
 8021ff2:	4603      	mov	r3, r0
 8021ff4:	f083 0301 	eor.w	r3, r3, #1
 8021ff8:	b2db      	uxtb	r3, r3
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	d001      	beq.n	8022002 <tool_change+0x1e6>
            return Status_Reset;
 8021ffe:	2312      	movs	r3, #18
 8022000:	e014      	b.n	802202c <tool_change+0x210>
    }
#endif

    protocol_buffer_synchronize();
 8022002:	f7f0 fbbf 	bl	8012784 <protocol_buffer_synchronize>
    sync_position();
 8022006:	f7ef fe31 	bl	8011c6c <plan_sync_position>
 802200a:	4915      	ldr	r1, [pc, #84]	; (8022060 <tool_change+0x244>)
 802200c:	4818      	ldr	r0, [pc, #96]	; (8022070 <tool_change+0x254>)
 802200e:	f7ff f9f3 	bl	80213f8 <system_convert_array_steps_to_mpos>

    // Enter tool change mode, waits for cycle start to continue.
    parser_state->tool_change = true;
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	2201      	movs	r2, #1
 8022016:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
    system_set_exec_state_flag(EXEC_TOOL_CHANGE);   // Set up program pause for manual tool change
 802201a:	4b0e      	ldr	r3, [pc, #56]	; (8022054 <tool_change+0x238>)
 802201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802201e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022022:	4814      	ldr	r0, [pc, #80]	; (8022074 <tool_change+0x258>)
 8022024:	4798      	blx	r3
    protocol_execute_realtime();                    // Execute...
 8022026:	f7f0 fbdd 	bl	80127e4 <protocol_execute_realtime>

    return Status_OK;
 802202a:	2300      	movs	r3, #0
}
 802202c:	4618      	mov	r0, r3
 802202e:	3738      	adds	r7, #56	; 0x38
 8022030:	46bd      	mov	sp, r7
 8022032:	bd80      	pop	{r7, pc}
 8022034:	200029b8 	.word	0x200029b8
 8022038:	200029a4 	.word	0x200029a4
 802203c:	200029bc 	.word	0x200029bc
 8022040:	20001cf0 	.word	0x20001cf0
 8022044:	20001520 	.word	0x20001520
 8022048:	200015b8 	.word	0x200015b8
 802204c:	0802163d 	.word	0x0802163d
 8022050:	20002998 	.word	0x20002998
 8022054:	200016a0 	.word	0x200016a0
 8022058:	2000299a 	.word	0x2000299a
 802205c:	20002999 	.word	0x20002999
 8022060:	200015a8 	.word	0x200015a8
 8022064:	200029cc 	.word	0x200029cc
 8022068:	200029a0 	.word	0x200029a0
 802206c:	200029c0 	.word	0x200029c0
 8022070:	200013dc 	.word	0x200013dc
 8022074:	20001568 	.word	0x20001568

08022078 <tc_init>:

// Claim HAL tool change entry points and clear current tool offsets.
// TODO: change to survive a warm reset?
void tc_init (void)
{
 8022078:	b580      	push	{r7, lr}
 802207a:	af00      	add	r7, sp, #0
    if(hal.driver_cap.atc) // Do not override driver tool change implementation!
 802207c:	4b28      	ldr	r3, [pc, #160]	; (8022120 <tc_init+0xa8>)
 802207e:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8022082:	f003 0301 	and.w	r3, r3, #1
 8022086:	b2db      	uxtb	r3, r3
 8022088:	2b00      	cmp	r3, #0
 802208a:	d145      	bne.n	8022118 <tc_init+0xa0>
        return;

    if(!hal.stream.suspend_read) // Tool change requires support for suspending input stream.
 802208c:	4b24      	ldr	r3, [pc, #144]	; (8022120 <tc_init+0xa8>)
 802208e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8022092:	2b00      	cmp	r3, #0
 8022094:	d042      	beq.n	802211c <tc_init+0xa4>
        return;

    if(sys.tlo_reference_set.mask != 0) {
 8022096:	4b23      	ldr	r3, [pc, #140]	; (8022124 <tc_init+0xac>)
 8022098:	79db      	ldrb	r3, [r3, #7]
 802209a:	2b00      	cmp	r3, #0
 802209c:	d006      	beq.n	80220ac <tc_init+0x34>
        sys.tlo_reference_set.mask = 0;
 802209e:	4b21      	ldr	r3, [pc, #132]	; (8022124 <tc_init+0xac>)
 80220a0:	2200      	movs	r2, #0
 80220a2:	71da      	strb	r2, [r3, #7]
        system_add_rt_report(Report_TLOReference);
 80220a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80220a8:	f7ff fa8e 	bl	80215c8 <system_add_rt_report>
    }

    gc_set_tool_offset(ToolLengthOffset_Cancel, 0, 0.0f);
 80220ac:	2200      	movs	r2, #0
 80220ae:	2100      	movs	r1, #0
 80220b0:	2000      	movs	r0, #0
 80220b2:	f7e3 fa8b 	bl	80055cc <gc_set_tool_offset>

    if(settings.tool_change.mode == ToolChange_Disabled || settings.tool_change.mode == ToolChange_Ignore) {
 80220b6:	4b1c      	ldr	r3, [pc, #112]	; (8022128 <tc_init+0xb0>)
 80220b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80220bc:	2b00      	cmp	r3, #0
 80220be:	d004      	beq.n	80220ca <tc_init+0x52>
 80220c0:	4b19      	ldr	r3, [pc, #100]	; (8022128 <tc_init+0xb0>)
 80220c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80220c6:	2b04      	cmp	r3, #4
 80220c8:	d10c      	bne.n	80220e4 <tc_init+0x6c>
        hal.tool.select = NULL;
 80220ca:	4b15      	ldr	r3, [pc, #84]	; (8022120 <tc_init+0xa8>)
 80220cc:	2200      	movs	r2, #0
 80220ce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        hal.tool.change = NULL;
 80220d2:	4b13      	ldr	r3, [pc, #76]	; (8022120 <tc_init+0xa8>)
 80220d4:	2200      	movs	r2, #0
 80220d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        grbl.on_toolchange_ack = NULL;
 80220da:	4b14      	ldr	r3, [pc, #80]	; (802212c <tc_init+0xb4>)
 80220dc:	2200      	movs	r2, #0
 80220de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80220e2:	e01c      	b.n	802211e <tc_init+0xa6>
    } else {
        hal.tool.select = tool_select;
 80220e4:	4b0e      	ldr	r3, [pc, #56]	; (8022120 <tc_init+0xa8>)
 80220e6:	4a12      	ldr	r2, [pc, #72]	; (8022130 <tc_init+0xb8>)
 80220e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        hal.tool.change = tool_change;
 80220ec:	4b0c      	ldr	r3, [pc, #48]	; (8022120 <tc_init+0xa8>)
 80220ee:	4a11      	ldr	r2, [pc, #68]	; (8022134 <tc_init+0xbc>)
 80220f0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        grbl.on_toolchange_ack = on_toolchange_ack;
 80220f4:	4b0d      	ldr	r3, [pc, #52]	; (802212c <tc_init+0xb4>)
 80220f6:	4a10      	ldr	r2, [pc, #64]	; (8022138 <tc_init+0xc0>)
 80220f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if(driver_reset == NULL) {
 80220fc:	4b0f      	ldr	r3, [pc, #60]	; (802213c <tc_init+0xc4>)
 80220fe:	681b      	ldr	r3, [r3, #0]
 8022100:	2b00      	cmp	r3, #0
 8022102:	d10c      	bne.n	802211e <tc_init+0xa6>
            driver_reset = hal.driver_reset;
 8022104:	4b06      	ldr	r3, [pc, #24]	; (8022120 <tc_init+0xa8>)
 8022106:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 802210a:	4a0c      	ldr	r2, [pc, #48]	; (802213c <tc_init+0xc4>)
 802210c:	6013      	str	r3, [r2, #0]
            hal.driver_reset = reset;
 802210e:	4b04      	ldr	r3, [pc, #16]	; (8022120 <tc_init+0xa8>)
 8022110:	4a0b      	ldr	r2, [pc, #44]	; (8022140 <tc_init+0xc8>)
 8022112:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8022116:	e002      	b.n	802211e <tc_init+0xa6>
        return;
 8022118:	bf00      	nop
 802211a:	e000      	b.n	802211e <tc_init+0xa6>
        return;
 802211c:	bf00      	nop
        }
    }
}
 802211e:	bd80      	pop	{r7, pc}
 8022120:	200016a0 	.word	0x200016a0
 8022124:	20001520 	.word	0x20001520
 8022128:	20001cf0 	.word	0x20001cf0
 802212c:	200015b8 	.word	0x200015b8
 8022130:	08021de5 	.word	0x08021de5
 8022134:	08021e1d 	.word	0x08021e1d
 8022138:	08021da9 	.word	0x08021da9
 802213c:	200029d8 	.word	0x200029d8
 8022140:	0802175d 	.word	0x0802175d

08022144 <tc_clear_tlo_reference>:

void tc_clear_tlo_reference (axes_signals_t homing_cycle)
{
 8022144:	b580      	push	{r7, lr}
 8022146:	b084      	sub	sp, #16
 8022148:	af00      	add	r7, sp, #0
 802214a:	7138      	strb	r0, [r7, #4]
    if(settings.tool_change.mode != ToolChange_Disabled) {
 802214c:	4b15      	ldr	r3, [pc, #84]	; (80221a4 <tc_clear_tlo_reference+0x60>)
 802214e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8022152:	2b00      	cmp	r3, #0
 8022154:	d021      	beq.n	802219a <tc_clear_tlo_reference+0x56>
        plane_t plane;

#if TOOL_LENGTH_OFFSET_AXIS >= 0
        plane.axis_linear = TOOL_LENGTH_OFFSET_AXIS;
#else
        gc_get_plane_data(&plane, gc_state.modal.plane_select);
 8022156:	4b14      	ldr	r3, [pc, #80]	; (80221a8 <tc_clear_tlo_reference+0x64>)
 8022158:	799a      	ldrb	r2, [r3, #6]
 802215a:	f107 030c 	add.w	r3, r7, #12
 802215e:	4611      	mov	r1, r2
 8022160:	4618      	mov	r0, r3
 8022162:	f7e3 fac1 	bl	80056e8 <gc_get_plane_data>
#endif
        if(homing_cycle.mask & (settings.mode == Mode_Lathe ? (X_AXIS_BIT|Z_AXIS_BIT) : bit(plane.axis_linear))) {
 8022166:	793b      	ldrb	r3, [r7, #4]
 8022168:	461a      	mov	r2, r3
 802216a:	4b0e      	ldr	r3, [pc, #56]	; (80221a4 <tc_clear_tlo_reference+0x60>)
 802216c:	7e1b      	ldrb	r3, [r3, #24]
 802216e:	2b02      	cmp	r3, #2
 8022170:	d004      	beq.n	802217c <tc_clear_tlo_reference+0x38>
 8022172:	7bbb      	ldrb	r3, [r7, #14]
 8022174:	4619      	mov	r1, r3
 8022176:	2301      	movs	r3, #1
 8022178:	408b      	lsls	r3, r1
 802217a:	e000      	b.n	802217e <tc_clear_tlo_reference+0x3a>
 802217c:	2305      	movs	r3, #5
 802217e:	4013      	ands	r3, r2
 8022180:	2b00      	cmp	r3, #0
 8022182:	d00a      	beq.n	802219a <tc_clear_tlo_reference+0x56>
            if(sys.tlo_reference_set.mask != 0) {
 8022184:	4b09      	ldr	r3, [pc, #36]	; (80221ac <tc_clear_tlo_reference+0x68>)
 8022186:	79db      	ldrb	r3, [r3, #7]
 8022188:	2b00      	cmp	r3, #0
 802218a:	d006      	beq.n	802219a <tc_clear_tlo_reference+0x56>
                sys.tlo_reference_set.mask = 0;  // Invalidate tool length offset reference
 802218c:	4b07      	ldr	r3, [pc, #28]	; (80221ac <tc_clear_tlo_reference+0x68>)
 802218e:	2200      	movs	r2, #0
 8022190:	71da      	strb	r2, [r3, #7]
                system_add_rt_report(Report_TLOReference);
 8022192:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8022196:	f7ff fa17 	bl	80215c8 <system_add_rt_report>
            }
        }
    }
}
 802219a:	bf00      	nop
 802219c:	3710      	adds	r7, #16
 802219e:	46bd      	mov	sp, r7
 80221a0:	bd80      	pop	{r7, pc}
 80221a2:	bf00      	nop
 80221a4:	20001cf0 	.word	0x20001cf0
 80221a8:	2000137c 	.word	0x2000137c
 80221ac:	20001520 	.word	0x20001520

080221b0 <tc_probe_workpiece>:

// Perform a probe cycle: set tool length offset and restart job if successful.
// Note: tool length offset is set by the on_probe_completed event handler.
// Called by the $TPW system command.
status_code_t tc_probe_workpiece (void)
{
 80221b0:	b5b0      	push	{r4, r5, r7, lr}
 80221b2:	b08c      	sub	sp, #48	; 0x30
 80221b4:	af00      	add	r7, sp, #0
    if(!(settings.tool_change.mode == ToolChange_Manual || settings.tool_change.mode == ToolChange_Manual_G59_3) || enqueue_realtime_command == NULL)
 80221b6:	4b84      	ldr	r3, [pc, #528]	; (80223c8 <tc_probe_workpiece+0x218>)
 80221b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80221bc:	2b01      	cmp	r3, #1
 80221be:	d004      	beq.n	80221ca <tc_probe_workpiece+0x1a>
 80221c0:	4b81      	ldr	r3, [pc, #516]	; (80223c8 <tc_probe_workpiece+0x218>)
 80221c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80221c6:	2b02      	cmp	r3, #2
 80221c8:	d103      	bne.n	80221d2 <tc_probe_workpiece+0x22>
 80221ca:	4b80      	ldr	r3, [pc, #512]	; (80223cc <tc_probe_workpiece+0x21c>)
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	2b00      	cmp	r3, #0
 80221d0:	d101      	bne.n	80221d6 <tc_probe_workpiece+0x26>
        return Status_InvalidStatement;
 80221d2:	2303      	movs	r3, #3
 80221d4:	e0f3      	b.n	80223be <tc_probe_workpiece+0x20e>

    // TODO: add check for reference offset set?

    bool ok;
    gc_parser_flags_t flags = {0};
 80221d6:	2300      	movs	r3, #0
 80221d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    plan_line_data_t plan_data;

#if COMPATIBILITY_LEVEL <= 1
    if(probe_fixture)
 80221da:	4b7d      	ldr	r3, [pc, #500]	; (80223d0 <tc_probe_workpiece+0x220>)
 80221dc:	781b      	ldrb	r3, [r3, #0]
 80221de:	2b00      	cmp	r3, #0
 80221e0:	d00e      	beq.n	8022200 <tc_probe_workpiece+0x50>
        grbl.on_probe_fixture(next_tool, system_xy_at_fixture(CoordinateSystem_G59_3, TOOLSETTER_RADIUS), true);
 80221e2:	4b7c      	ldr	r3, [pc, #496]	; (80223d4 <tc_probe_workpiece+0x224>)
 80221e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80221e8:	4b7b      	ldr	r3, [pc, #492]	; (80223d8 <tc_probe_workpiece+0x228>)
 80221ea:	681d      	ldr	r5, [r3, #0]
 80221ec:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80221f0:	2008      	movs	r0, #8
 80221f2:	f7ff f933 	bl	802145c <system_xy_at_fixture>
 80221f6:	4603      	mov	r3, r0
 80221f8:	2201      	movs	r2, #1
 80221fa:	4619      	mov	r1, r3
 80221fc:	4628      	mov	r0, r5
 80221fe:	47a0      	blx	r4
#endif

    // Get current position.
    system_convert_array_steps_to_mpos(target.values, sys.position);
 8022200:	4976      	ldr	r1, [pc, #472]	; (80223dc <tc_probe_workpiece+0x22c>)
 8022202:	4877      	ldr	r0, [pc, #476]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022204:	f7ff f8f8 	bl	80213f8 <system_convert_array_steps_to_mpos>

    flags.probe_is_no_error = On;
 8022208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802220c:	f043 0310 	orr.w	r3, r3, #16
 8022210:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    plan_data_init(&plan_data);
 8022214:	1d3b      	adds	r3, r7, #4
 8022216:	4618      	mov	r0, r3
 8022218:	f7ef fe10 	bl	8011e3c <plan_data_init>
    plan_data.feed_rate = settings.tool_change.seek_rate;
 802221c:	4b6a      	ldr	r3, [pc, #424]	; (80223c8 <tc_probe_workpiece+0x218>)
 802221e:	6a1b      	ldr	r3, [r3, #32]
 8022220:	607b      	str	r3, [r7, #4]

    target.values[plane.axis_linear] -= settings.tool_change.probing_distance;
 8022222:	4b70      	ldr	r3, [pc, #448]	; (80223e4 <tc_probe_workpiece+0x234>)
 8022224:	789b      	ldrb	r3, [r3, #2]
 8022226:	4a6e      	ldr	r2, [pc, #440]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022228:	009b      	lsls	r3, r3, #2
 802222a:	4413      	add	r3, r2
 802222c:	ed93 7a00 	vldr	s14, [r3]
 8022230:	4b65      	ldr	r3, [pc, #404]	; (80223c8 <tc_probe_workpiece+0x218>)
 8022232:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8022236:	4b6b      	ldr	r3, [pc, #428]	; (80223e4 <tc_probe_workpiece+0x234>)
 8022238:	789b      	ldrb	r3, [r3, #2]
 802223a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802223e:	4a68      	ldr	r2, [pc, #416]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022240:	009b      	lsls	r3, r3, #2
 8022242:	4413      	add	r3, r2
 8022244:	edc3 7a00 	vstr	s15, [r3]

    if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found))
 8022248:	1d3b      	adds	r3, r7, #4
 802224a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 802224c:	4619      	mov	r1, r3
 802224e:	4864      	ldr	r0, [pc, #400]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022250:	f7ec fd88 	bl	800ed64 <mc_probe_cycle>
 8022254:	4603      	mov	r3, r0
 8022256:	2b01      	cmp	r3, #1
 8022258:	bf0c      	ite	eq
 802225a:	2301      	moveq	r3, #1
 802225c:	2300      	movne	r3, #0
 802225e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022266:	2b00      	cmp	r3, #0
 8022268:	f000 8084 	beq.w	8022374 <tc_probe_workpiece+0x1c4>
    {
        system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 802226c:	495e      	ldr	r1, [pc, #376]	; (80223e8 <tc_probe_workpiece+0x238>)
 802226e:	485c      	ldr	r0, [pc, #368]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022270:	f7ff f8c2 	bl	80213f8 <system_convert_array_steps_to_mpos>

        // Retract a bit and perform slow probe.
        plan_data.feed_rate = settings.tool_change.pulloff_rate;
 8022274:	4b54      	ldr	r3, [pc, #336]	; (80223c8 <tc_probe_workpiece+0x218>)
 8022276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022278:	607b      	str	r3, [r7, #4]
        target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE;
 802227a:	4b5a      	ldr	r3, [pc, #360]	; (80223e4 <tc_probe_workpiece+0x234>)
 802227c:	789b      	ldrb	r3, [r3, #2]
 802227e:	4a58      	ldr	r2, [pc, #352]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022280:	009b      	lsls	r3, r3, #2
 8022282:	4413      	add	r3, r2
 8022284:	edd3 7a00 	vldr	s15, [r3]
 8022288:	4b56      	ldr	r3, [pc, #344]	; (80223e4 <tc_probe_workpiece+0x234>)
 802228a:	789b      	ldrb	r3, [r3, #2]
 802228c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022290:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022294:	4a52      	ldr	r2, [pc, #328]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022296:	009b      	lsls	r3, r3, #2
 8022298:	4413      	add	r3, r2
 802229a:	edc3 7a00 	vstr	s15, [r3]
        if((ok = mc_line(target.values, &plan_data))) {
 802229e:	1d3b      	adds	r3, r7, #4
 80222a0:	4619      	mov	r1, r3
 80222a2:	484f      	ldr	r0, [pc, #316]	; (80223e0 <tc_probe_workpiece+0x230>)
 80222a4:	f7eb f88a 	bl	800d3bc <mc_line>
 80222a8:	4603      	mov	r3, r0
 80222aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80222ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80222b2:	2b00      	cmp	r3, #0
 80222b4:	d05e      	beq.n	8022374 <tc_probe_workpiece+0x1c4>

            plan_data.feed_rate = settings.tool_change.feed_rate;
 80222b6:	4b44      	ldr	r3, [pc, #272]	; (80223c8 <tc_probe_workpiece+0x218>)
 80222b8:	69db      	ldr	r3, [r3, #28]
 80222ba:	607b      	str	r3, [r7, #4]
            target.values[plane.axis_linear] -= (TOOL_CHANGE_PROBE_RETRACT_DISTANCE + 2.0f);
 80222bc:	4b49      	ldr	r3, [pc, #292]	; (80223e4 <tc_probe_workpiece+0x234>)
 80222be:	789b      	ldrb	r3, [r3, #2]
 80222c0:	4a47      	ldr	r2, [pc, #284]	; (80223e0 <tc_probe_workpiece+0x230>)
 80222c2:	009b      	lsls	r3, r3, #2
 80222c4:	4413      	add	r3, r2
 80222c6:	edd3 7a00 	vldr	s15, [r3]
 80222ca:	4b46      	ldr	r3, [pc, #280]	; (80223e4 <tc_probe_workpiece+0x234>)
 80222cc:	789b      	ldrb	r3, [r3, #2]
 80222ce:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80222d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80222d6:	4a42      	ldr	r2, [pc, #264]	; (80223e0 <tc_probe_workpiece+0x230>)
 80222d8:	009b      	lsls	r3, r3, #2
 80222da:	4413      	add	r3, r2
 80222dc:	edc3 7a00 	vstr	s15, [r3]
            if((ok = mc_probe_cycle(target.values, &plan_data, flags) == GCProbe_Found)) {
 80222e0:	1d3b      	adds	r3, r7, #4
 80222e2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80222e4:	4619      	mov	r1, r3
 80222e6:	483e      	ldr	r0, [pc, #248]	; (80223e0 <tc_probe_workpiece+0x230>)
 80222e8:	f7ec fd3c 	bl	800ed64 <mc_probe_cycle>
 80222ec:	4603      	mov	r3, r0
 80222ee:	2b01      	cmp	r3, #1
 80222f0:	bf0c      	ite	eq
 80222f2:	2301      	moveq	r3, #1
 80222f4:	2300      	movne	r3, #0
 80222f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80222fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d038      	beq.n	8022374 <tc_probe_workpiece+0x1c4>
                // Retract a bit again so that any touch plate can be removed
                system_convert_array_steps_to_mpos(target.values, sys.probe_position);
 8022302:	4939      	ldr	r1, [pc, #228]	; (80223e8 <tc_probe_workpiece+0x238>)
 8022304:	4836      	ldr	r0, [pc, #216]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022306:	f7ff f877 	bl	80213f8 <system_convert_array_steps_to_mpos>
                plan_data.feed_rate = settings.tool_change.seek_rate;
 802230a:	4b2f      	ldr	r3, [pc, #188]	; (80223c8 <tc_probe_workpiece+0x218>)
 802230c:	6a1b      	ldr	r3, [r3, #32]
 802230e:	607b      	str	r3, [r7, #4]
                target.values[plane.axis_linear] += TOOL_CHANGE_PROBE_RETRACT_DISTANCE * 2.0f;
 8022310:	4b34      	ldr	r3, [pc, #208]	; (80223e4 <tc_probe_workpiece+0x234>)
 8022312:	789b      	ldrb	r3, [r3, #2]
 8022314:	4a32      	ldr	r2, [pc, #200]	; (80223e0 <tc_probe_workpiece+0x230>)
 8022316:	009b      	lsls	r3, r3, #2
 8022318:	4413      	add	r3, r2
 802231a:	edd3 7a00 	vldr	s15, [r3]
 802231e:	4b31      	ldr	r3, [pc, #196]	; (80223e4 <tc_probe_workpiece+0x234>)
 8022320:	789b      	ldrb	r3, [r3, #2]
 8022322:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8022326:	ee77 7a87 	vadd.f32	s15, s15, s14
 802232a:	4a2d      	ldr	r2, [pc, #180]	; (80223e0 <tc_probe_workpiece+0x230>)
 802232c:	009b      	lsls	r3, r3, #2
 802232e:	4413      	add	r3, r2
 8022330:	edc3 7a00 	vstr	s15, [r3]
                if(target.values[plane.axis_linear] > tool_change_position)
 8022334:	4b2b      	ldr	r3, [pc, #172]	; (80223e4 <tc_probe_workpiece+0x234>)
 8022336:	789b      	ldrb	r3, [r3, #2]
 8022338:	4a29      	ldr	r2, [pc, #164]	; (80223e0 <tc_probe_workpiece+0x230>)
 802233a:	009b      	lsls	r3, r3, #2
 802233c:	4413      	add	r3, r2
 802233e:	ed93 7a00 	vldr	s14, [r3]
 8022342:	4b2a      	ldr	r3, [pc, #168]	; (80223ec <tc_probe_workpiece+0x23c>)
 8022344:	edd3 7a00 	vldr	s15, [r3]
 8022348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022350:	dd08      	ble.n	8022364 <tc_probe_workpiece+0x1b4>
                    target.values[plane.axis_linear] = tool_change_position;
 8022352:	4b24      	ldr	r3, [pc, #144]	; (80223e4 <tc_probe_workpiece+0x234>)
 8022354:	789b      	ldrb	r3, [r3, #2]
 8022356:	4618      	mov	r0, r3
 8022358:	4b24      	ldr	r3, [pc, #144]	; (80223ec <tc_probe_workpiece+0x23c>)
 802235a:	681a      	ldr	r2, [r3, #0]
 802235c:	4920      	ldr	r1, [pc, #128]	; (80223e0 <tc_probe_workpiece+0x230>)
 802235e:	0083      	lsls	r3, r0, #2
 8022360:	440b      	add	r3, r1
 8022362:	601a      	str	r2, [r3, #0]
                ok = mc_line(target.values, &plan_data);
 8022364:	1d3b      	adds	r3, r7, #4
 8022366:	4619      	mov	r1, r3
 8022368:	481d      	ldr	r0, [pc, #116]	; (80223e0 <tc_probe_workpiece+0x230>)
 802236a:	f7eb f827 	bl	800d3bc <mc_line>
 802236e:	4603      	mov	r3, r0
 8022370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }
    }

    if(ok && protocol_buffer_synchronize()) {
 8022374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022378:	2b00      	cmp	r3, #0
 802237a:	d019      	beq.n	80223b0 <tc_probe_workpiece+0x200>
 802237c:	f7f0 fa02 	bl	8012784 <protocol_buffer_synchronize>
 8022380:	4603      	mov	r3, r0
 8022382:	2b00      	cmp	r3, #0
 8022384:	d014      	beq.n	80223b0 <tc_probe_workpiece+0x200>
        sync_position();
 8022386:	f7ef fc71 	bl	8011c6c <plan_sync_position>
 802238a:	4914      	ldr	r1, [pc, #80]	; (80223dc <tc_probe_workpiece+0x22c>)
 802238c:	4818      	ldr	r0, [pc, #96]	; (80223f0 <tc_probe_workpiece+0x240>)
 802238e:	f7ff f833 	bl	80213f8 <system_convert_array_steps_to_mpos>
        block_cycle_start = false;
 8022392:	4b18      	ldr	r3, [pc, #96]	; (80223f4 <tc_probe_workpiece+0x244>)
 8022394:	2200      	movs	r2, #0
 8022396:	701a      	strb	r2, [r3, #0]
        grbl.report.feedback_message(settings.tool_change.mode == ToolChange_Manual_G59_3
 8022398:	4b0e      	ldr	r3, [pc, #56]	; (80223d4 <tc_probe_workpiece+0x224>)
 802239a:	68db      	ldr	r3, [r3, #12]
 802239c:	4a0a      	ldr	r2, [pc, #40]	; (80223c8 <tc_probe_workpiece+0x218>)
 802239e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80223a2:	2a02      	cmp	r2, #2
 80223a4:	d101      	bne.n	80223aa <tc_probe_workpiece+0x1fa>
 80223a6:	2211      	movs	r2, #17
 80223a8:	e000      	b.n	80223ac <tc_probe_workpiece+0x1fc>
 80223aa:	2212      	movs	r2, #18
 80223ac:	4610      	mov	r0, r2
 80223ae:	4798      	blx	r3
                                      ? Message_CycleStart2Continue
                                      : Message_TPCycleStart2Continue);
    }

    return ok ? Status_OK : Status_GCodeToolError;
 80223b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	d001      	beq.n	80223bc <tc_probe_workpiece+0x20c>
 80223b8:	2300      	movs	r3, #0
 80223ba:	e000      	b.n	80223be <tc_probe_workpiece+0x20e>
 80223bc:	232f      	movs	r3, #47	; 0x2f
}
 80223be:	4618      	mov	r0, r3
 80223c0:	3730      	adds	r7, #48	; 0x30
 80223c2:	46bd      	mov	sp, r7
 80223c4:	bdb0      	pop	{r4, r5, r7, pc}
 80223c6:	bf00      	nop
 80223c8:	20001cf0 	.word	0x20001cf0
 80223cc:	200029dc 	.word	0x200029dc
 80223d0:	20002999 	.word	0x20002999
 80223d4:	200015b8 	.word	0x200015b8
 80223d8:	200029b8 	.word	0x200029b8
 80223dc:	200015a8 	.word	0x200015a8
 80223e0:	200029c0 	.word	0x200029c0
 80223e4:	200029bc 	.word	0x200029bc
 80223e8:	20001558 	.word	0x20001558
 80223ec:	200029a0 	.word	0x200029a0
 80223f0:	200013dc 	.word	0x200013dc
 80223f4:	20002998 	.word	0x20002998

080223f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80223f8:	b580      	push	{r7, lr}
 80223fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80223fc:	4b11      	ldr	r3, [pc, #68]	; (8022444 <HAL_Init+0x4c>)
 80223fe:	681b      	ldr	r3, [r3, #0]
 8022400:	4a10      	ldr	r2, [pc, #64]	; (8022444 <HAL_Init+0x4c>)
 8022402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022408:	2003      	movs	r0, #3
 802240a:	f000 f914 	bl	8022636 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 802240e:	f002 fbbb 	bl	8024b88 <HAL_RCC_GetSysClockFreq>
 8022412:	4602      	mov	r2, r0
 8022414:	4b0c      	ldr	r3, [pc, #48]	; (8022448 <HAL_Init+0x50>)
 8022416:	6a1b      	ldr	r3, [r3, #32]
 8022418:	f003 030f 	and.w	r3, r3, #15
 802241c:	490b      	ldr	r1, [pc, #44]	; (802244c <HAL_Init+0x54>)
 802241e:	5ccb      	ldrb	r3, [r1, r3]
 8022420:	fa22 f303 	lsr.w	r3, r2, r3
 8022424:	4a0a      	ldr	r2, [pc, #40]	; (8022450 <HAL_Init+0x58>)
 8022426:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8022428:	2007      	movs	r0, #7
 802242a:	f7e2 fcd7 	bl	8004ddc <HAL_InitTick>
 802242e:	4603      	mov	r3, r0
 8022430:	2b00      	cmp	r3, #0
 8022432:	d001      	beq.n	8022438 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8022434:	2301      	movs	r3, #1
 8022436:	e002      	b.n	802243e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8022438:	f7e2 fcb4 	bl	8004da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802243c:	2300      	movs	r3, #0
}
 802243e:	4618      	mov	r0, r3
 8022440:	bd80      	pop	{r7, pc}
 8022442:	bf00      	nop
 8022444:	40022000 	.word	0x40022000
 8022448:	46020c00 	.word	0x46020c00
 802244c:	0803264c 	.word	0x0803264c
 8022450:	20000380 	.word	0x20000380

08022454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022454:	b480      	push	{r7}
 8022456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8022458:	4b06      	ldr	r3, [pc, #24]	; (8022474 <HAL_IncTick+0x20>)
 802245a:	781b      	ldrb	r3, [r3, #0]
 802245c:	461a      	mov	r2, r3
 802245e:	4b06      	ldr	r3, [pc, #24]	; (8022478 <HAL_IncTick+0x24>)
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	4413      	add	r3, r2
 8022464:	4a04      	ldr	r2, [pc, #16]	; (8022478 <HAL_IncTick+0x24>)
 8022466:	6013      	str	r3, [r2, #0]
}
 8022468:	bf00      	nop
 802246a:	46bd      	mov	sp, r7
 802246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022470:	4770      	bx	lr
 8022472:	bf00      	nop
 8022474:	20000568 	.word	0x20000568
 8022478:	200029e4 	.word	0x200029e4

0802247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802247c:	b480      	push	{r7}
 802247e:	af00      	add	r7, sp, #0
  return uwTick;
 8022480:	4b03      	ldr	r3, [pc, #12]	; (8022490 <HAL_GetTick+0x14>)
 8022482:	681b      	ldr	r3, [r3, #0]
}
 8022484:	4618      	mov	r0, r3
 8022486:	46bd      	mov	sp, r7
 8022488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802248c:	4770      	bx	lr
 802248e:	bf00      	nop
 8022490:	200029e4 	.word	0x200029e4

08022494 <__NVIC_SetPriorityGrouping>:
{
 8022494:	b480      	push	{r7}
 8022496:	b085      	sub	sp, #20
 8022498:	af00      	add	r7, sp, #0
 802249a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	f003 0307 	and.w	r3, r3, #7
 80224a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80224a4:	4b0c      	ldr	r3, [pc, #48]	; (80224d8 <__NVIC_SetPriorityGrouping+0x44>)
 80224a6:	68db      	ldr	r3, [r3, #12]
 80224a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80224aa:	68ba      	ldr	r2, [r7, #8]
 80224ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80224b0:	4013      	ands	r3, r2
 80224b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80224b4:	68fb      	ldr	r3, [r7, #12]
 80224b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80224b8:	68bb      	ldr	r3, [r7, #8]
 80224ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80224bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80224c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80224c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80224c6:	4a04      	ldr	r2, [pc, #16]	; (80224d8 <__NVIC_SetPriorityGrouping+0x44>)
 80224c8:	68bb      	ldr	r3, [r7, #8]
 80224ca:	60d3      	str	r3, [r2, #12]
}
 80224cc:	bf00      	nop
 80224ce:	3714      	adds	r7, #20
 80224d0:	46bd      	mov	sp, r7
 80224d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224d6:	4770      	bx	lr
 80224d8:	e000ed00 	.word	0xe000ed00

080224dc <__NVIC_GetPriorityGrouping>:
{
 80224dc:	b480      	push	{r7}
 80224de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80224e0:	4b04      	ldr	r3, [pc, #16]	; (80224f4 <__NVIC_GetPriorityGrouping+0x18>)
 80224e2:	68db      	ldr	r3, [r3, #12]
 80224e4:	0a1b      	lsrs	r3, r3, #8
 80224e6:	f003 0307 	and.w	r3, r3, #7
}
 80224ea:	4618      	mov	r0, r3
 80224ec:	46bd      	mov	sp, r7
 80224ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224f2:	4770      	bx	lr
 80224f4:	e000ed00 	.word	0xe000ed00

080224f8 <__NVIC_EnableIRQ>:
{
 80224f8:	b480      	push	{r7}
 80224fa:	b083      	sub	sp, #12
 80224fc:	af00      	add	r7, sp, #0
 80224fe:	4603      	mov	r3, r0
 8022500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022506:	2b00      	cmp	r3, #0
 8022508:	db0b      	blt.n	8022522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802250a:	79fb      	ldrb	r3, [r7, #7]
 802250c:	f003 021f 	and.w	r2, r3, #31
 8022510:	4907      	ldr	r1, [pc, #28]	; (8022530 <__NVIC_EnableIRQ+0x38>)
 8022512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022516:	095b      	lsrs	r3, r3, #5
 8022518:	2001      	movs	r0, #1
 802251a:	fa00 f202 	lsl.w	r2, r0, r2
 802251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8022522:	bf00      	nop
 8022524:	370c      	adds	r7, #12
 8022526:	46bd      	mov	sp, r7
 8022528:	f85d 7b04 	ldr.w	r7, [sp], #4
 802252c:	4770      	bx	lr
 802252e:	bf00      	nop
 8022530:	e000e100 	.word	0xe000e100

08022534 <__NVIC_DisableIRQ>:
{
 8022534:	b480      	push	{r7}
 8022536:	b083      	sub	sp, #12
 8022538:	af00      	add	r7, sp, #0
 802253a:	4603      	mov	r3, r0
 802253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022542:	2b00      	cmp	r3, #0
 8022544:	db12      	blt.n	802256c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022546:	79fb      	ldrb	r3, [r7, #7]
 8022548:	f003 021f 	and.w	r2, r3, #31
 802254c:	490a      	ldr	r1, [pc, #40]	; (8022578 <__NVIC_DisableIRQ+0x44>)
 802254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022552:	095b      	lsrs	r3, r3, #5
 8022554:	2001      	movs	r0, #1
 8022556:	fa00 f202 	lsl.w	r2, r0, r2
 802255a:	3320      	adds	r3, #32
 802255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8022560:	f3bf 8f4f 	dsb	sy
}
 8022564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8022566:	f3bf 8f6f 	isb	sy
}
 802256a:	bf00      	nop
}
 802256c:	bf00      	nop
 802256e:	370c      	adds	r7, #12
 8022570:	46bd      	mov	sp, r7
 8022572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022576:	4770      	bx	lr
 8022578:	e000e100 	.word	0xe000e100

0802257c <__NVIC_SetPriority>:
{
 802257c:	b480      	push	{r7}
 802257e:	b083      	sub	sp, #12
 8022580:	af00      	add	r7, sp, #0
 8022582:	4603      	mov	r3, r0
 8022584:	6039      	str	r1, [r7, #0]
 8022586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802258c:	2b00      	cmp	r3, #0
 802258e:	db0a      	blt.n	80225a6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022590:	683b      	ldr	r3, [r7, #0]
 8022592:	b2da      	uxtb	r2, r3
 8022594:	490c      	ldr	r1, [pc, #48]	; (80225c8 <__NVIC_SetPriority+0x4c>)
 8022596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802259a:	0112      	lsls	r2, r2, #4
 802259c:	b2d2      	uxtb	r2, r2
 802259e:	440b      	add	r3, r1
 80225a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80225a4:	e00a      	b.n	80225bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80225a6:	683b      	ldr	r3, [r7, #0]
 80225a8:	b2da      	uxtb	r2, r3
 80225aa:	4908      	ldr	r1, [pc, #32]	; (80225cc <__NVIC_SetPriority+0x50>)
 80225ac:	79fb      	ldrb	r3, [r7, #7]
 80225ae:	f003 030f 	and.w	r3, r3, #15
 80225b2:	3b04      	subs	r3, #4
 80225b4:	0112      	lsls	r2, r2, #4
 80225b6:	b2d2      	uxtb	r2, r2
 80225b8:	440b      	add	r3, r1
 80225ba:	761a      	strb	r2, [r3, #24]
}
 80225bc:	bf00      	nop
 80225be:	370c      	adds	r7, #12
 80225c0:	46bd      	mov	sp, r7
 80225c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225c6:	4770      	bx	lr
 80225c8:	e000e100 	.word	0xe000e100
 80225cc:	e000ed00 	.word	0xe000ed00

080225d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80225d0:	b480      	push	{r7}
 80225d2:	b089      	sub	sp, #36	; 0x24
 80225d4:	af00      	add	r7, sp, #0
 80225d6:	60f8      	str	r0, [r7, #12]
 80225d8:	60b9      	str	r1, [r7, #8]
 80225da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80225dc:	68fb      	ldr	r3, [r7, #12]
 80225de:	f003 0307 	and.w	r3, r3, #7
 80225e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80225e4:	69fb      	ldr	r3, [r7, #28]
 80225e6:	f1c3 0307 	rsb	r3, r3, #7
 80225ea:	2b04      	cmp	r3, #4
 80225ec:	bf28      	it	cs
 80225ee:	2304      	movcs	r3, #4
 80225f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80225f2:	69fb      	ldr	r3, [r7, #28]
 80225f4:	3304      	adds	r3, #4
 80225f6:	2b06      	cmp	r3, #6
 80225f8:	d902      	bls.n	8022600 <NVIC_EncodePriority+0x30>
 80225fa:	69fb      	ldr	r3, [r7, #28]
 80225fc:	3b03      	subs	r3, #3
 80225fe:	e000      	b.n	8022602 <NVIC_EncodePriority+0x32>
 8022600:	2300      	movs	r3, #0
 8022602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022604:	f04f 32ff 	mov.w	r2, #4294967295
 8022608:	69bb      	ldr	r3, [r7, #24]
 802260a:	fa02 f303 	lsl.w	r3, r2, r3
 802260e:	43da      	mvns	r2, r3
 8022610:	68bb      	ldr	r3, [r7, #8]
 8022612:	401a      	ands	r2, r3
 8022614:	697b      	ldr	r3, [r7, #20]
 8022616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022618:	f04f 31ff 	mov.w	r1, #4294967295
 802261c:	697b      	ldr	r3, [r7, #20]
 802261e:	fa01 f303 	lsl.w	r3, r1, r3
 8022622:	43d9      	mvns	r1, r3
 8022624:	687b      	ldr	r3, [r7, #4]
 8022626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022628:	4313      	orrs	r3, r2
         );
}
 802262a:	4618      	mov	r0, r3
 802262c:	3724      	adds	r7, #36	; 0x24
 802262e:	46bd      	mov	sp, r7
 8022630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022634:	4770      	bx	lr

08022636 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022636:	b580      	push	{r7, lr}
 8022638:	b082      	sub	sp, #8
 802263a:	af00      	add	r7, sp, #0
 802263c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802263e:	6878      	ldr	r0, [r7, #4]
 8022640:	f7ff ff28 	bl	8022494 <__NVIC_SetPriorityGrouping>
}
 8022644:	bf00      	nop
 8022646:	3708      	adds	r7, #8
 8022648:	46bd      	mov	sp, r7
 802264a:	bd80      	pop	{r7, pc}

0802264c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802264c:	b580      	push	{r7, lr}
 802264e:	b086      	sub	sp, #24
 8022650:	af00      	add	r7, sp, #0
 8022652:	4603      	mov	r3, r0
 8022654:	60b9      	str	r1, [r7, #8]
 8022656:	607a      	str	r2, [r7, #4]
 8022658:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802265a:	f7ff ff3f 	bl	80224dc <__NVIC_GetPriorityGrouping>
 802265e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8022660:	687a      	ldr	r2, [r7, #4]
 8022662:	68b9      	ldr	r1, [r7, #8]
 8022664:	6978      	ldr	r0, [r7, #20]
 8022666:	f7ff ffb3 	bl	80225d0 <NVIC_EncodePriority>
 802266a:	4602      	mov	r2, r0
 802266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022670:	4611      	mov	r1, r2
 8022672:	4618      	mov	r0, r3
 8022674:	f7ff ff82 	bl	802257c <__NVIC_SetPriority>
}
 8022678:	bf00      	nop
 802267a:	3718      	adds	r7, #24
 802267c:	46bd      	mov	sp, r7
 802267e:	bd80      	pop	{r7, pc}

08022680 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022680:	b580      	push	{r7, lr}
 8022682:	b082      	sub	sp, #8
 8022684:	af00      	add	r7, sp, #0
 8022686:	4603      	mov	r3, r0
 8022688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802268e:	4618      	mov	r0, r3
 8022690:	f7ff ff32 	bl	80224f8 <__NVIC_EnableIRQ>
}
 8022694:	bf00      	nop
 8022696:	3708      	adds	r7, #8
 8022698:	46bd      	mov	sp, r7
 802269a:	bd80      	pop	{r7, pc}

0802269c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 802269c:	b580      	push	{r7, lr}
 802269e:	b082      	sub	sp, #8
 80226a0:	af00      	add	r7, sp, #0
 80226a2:	4603      	mov	r3, r0
 80226a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80226a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80226aa:	4618      	mov	r0, r3
 80226ac:	f7ff ff42 	bl	8022534 <__NVIC_DisableIRQ>
}
 80226b0:	bf00      	nop
 80226b2:	3708      	adds	r7, #8
 80226b4:	46bd      	mov	sp, r7
 80226b6:	bd80      	pop	{r7, pc}

080226b8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80226b8:	b480      	push	{r7}
 80226ba:	b083      	sub	sp, #12
 80226bc:	af00      	add	r7, sp, #0
 80226be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80226c0:	687b      	ldr	r3, [r7, #4]
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	d101      	bne.n	80226ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80226c6:	2301      	movs	r3, #1
 80226c8:	e019      	b.n	80226fe <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80226d0:	b2db      	uxtb	r3, r3
 80226d2:	2b02      	cmp	r3, #2
 80226d4:	d004      	beq.n	80226e0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	2220      	movs	r2, #32
 80226da:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80226dc:	2301      	movs	r3, #1
 80226de:	e00e      	b.n	80226fe <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	2204      	movs	r2, #4
 80226e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	681b      	ldr	r3, [r3, #0]
 80226ec:	695b      	ldr	r3, [r3, #20]
 80226ee:	687a      	ldr	r2, [r7, #4]
 80226f0:	6812      	ldr	r2, [r2, #0]
 80226f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80226f6:	f043 0304 	orr.w	r3, r3, #4
 80226fa:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80226fc:	2300      	movs	r3, #0
}
 80226fe:	4618      	mov	r0, r3
 8022700:	370c      	adds	r7, #12
 8022702:	46bd      	mov	sp, r7
 8022704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022708:	4770      	bx	lr

0802270a <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 802270a:	b480      	push	{r7}
 802270c:	b083      	sub	sp, #12
 802270e:	af00      	add	r7, sp, #0
 8022710:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8022718:	b2db      	uxtb	r3, r3
}
 802271a:	4618      	mov	r0, r3
 802271c:	370c      	adds	r7, #12
 802271e:	46bd      	mov	sp, r7
 8022720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022724:	4770      	bx	lr

08022726 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8022726:	b480      	push	{r7}
 8022728:	b083      	sub	sp, #12
 802272a:	af00      	add	r7, sp, #0
 802272c:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	681b      	ldr	r3, [r3, #0]
 8022732:	691b      	ldr	r3, [r3, #16]
 8022734:	0c1b      	lsrs	r3, r3, #16
 8022736:	b2db      	uxtb	r3, r3
}
 8022738:	4618      	mov	r0, r3
 802273a:	370c      	adds	r7, #12
 802273c:	46bd      	mov	sp, r7
 802273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022742:	4770      	bx	lr

08022744 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8022744:	b480      	push	{r7}
 8022746:	b089      	sub	sp, #36	; 0x24
 8022748:	af00      	add	r7, sp, #0
 802274a:	6078      	str	r0, [r7, #4]
 802274c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 802274e:	2300      	movs	r3, #0
 8022750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8022756:	e1ba      	b.n	8022ace <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8022758:	683b      	ldr	r3, [r7, #0]
 802275a:	681a      	ldr	r2, [r3, #0]
 802275c:	2101      	movs	r1, #1
 802275e:	697b      	ldr	r3, [r7, #20]
 8022760:	fa01 f303 	lsl.w	r3, r1, r3
 8022764:	4013      	ands	r3, r2
 8022766:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8022768:	697b      	ldr	r3, [r7, #20]
 802276a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 802276c:	68fb      	ldr	r3, [r7, #12]
 802276e:	2b00      	cmp	r3, #0
 8022770:	f000 81aa 	beq.w	8022ac8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	4a55      	ldr	r2, [pc, #340]	; (80228cc <HAL_GPIO_Init+0x188>)
 8022778:	4293      	cmp	r3, r2
 802277a:	d15d      	bne.n	8022838 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	681b      	ldr	r3, [r3, #0]
 8022780:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8022782:	2201      	movs	r2, #1
 8022784:	697b      	ldr	r3, [r7, #20]
 8022786:	fa02 f303 	lsl.w	r3, r2, r3
 802278a:	43db      	mvns	r3, r3
 802278c:	69fa      	ldr	r2, [r7, #28]
 802278e:	4013      	ands	r3, r2
 8022790:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8022792:	683b      	ldr	r3, [r7, #0]
 8022794:	685b      	ldr	r3, [r3, #4]
 8022796:	f003 0201 	and.w	r2, r3, #1
 802279a:	697b      	ldr	r3, [r7, #20]
 802279c:	fa02 f303 	lsl.w	r3, r2, r3
 80227a0:	69fa      	ldr	r2, [r7, #28]
 80227a2:	4313      	orrs	r3, r2
 80227a4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	69fa      	ldr	r2, [r7, #28]
 80227aa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80227ac:	4a48      	ldr	r2, [pc, #288]	; (80228d0 <HAL_GPIO_Init+0x18c>)
 80227ae:	697b      	ldr	r3, [r7, #20]
 80227b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80227b4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80227b6:	4a46      	ldr	r2, [pc, #280]	; (80228d0 <HAL_GPIO_Init+0x18c>)
 80227b8:	697b      	ldr	r3, [r7, #20]
 80227ba:	00db      	lsls	r3, r3, #3
 80227bc:	4413      	add	r3, r2
 80227be:	685b      	ldr	r3, [r3, #4]
 80227c0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80227c2:	69bb      	ldr	r3, [r7, #24]
 80227c4:	08da      	lsrs	r2, r3, #3
 80227c6:	693b      	ldr	r3, [r7, #16]
 80227c8:	3208      	adds	r2, #8
 80227ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80227ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80227d0:	69bb      	ldr	r3, [r7, #24]
 80227d2:	f003 0307 	and.w	r3, r3, #7
 80227d6:	009b      	lsls	r3, r3, #2
 80227d8:	220f      	movs	r2, #15
 80227da:	fa02 f303 	lsl.w	r3, r2, r3
 80227de:	43db      	mvns	r3, r3
 80227e0:	69fa      	ldr	r2, [r7, #28]
 80227e2:	4013      	ands	r3, r2
 80227e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80227e6:	69bb      	ldr	r3, [r7, #24]
 80227e8:	f003 0307 	and.w	r3, r3, #7
 80227ec:	009b      	lsls	r3, r3, #2
 80227ee:	220b      	movs	r2, #11
 80227f0:	fa02 f303 	lsl.w	r3, r2, r3
 80227f4:	69fa      	ldr	r2, [r7, #28]
 80227f6:	4313      	orrs	r3, r2
 80227f8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80227fa:	69bb      	ldr	r3, [r7, #24]
 80227fc:	08da      	lsrs	r2, r3, #3
 80227fe:	693b      	ldr	r3, [r7, #16]
 8022800:	3208      	adds	r2, #8
 8022802:	69f9      	ldr	r1, [r7, #28]
 8022804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8022808:	693b      	ldr	r3, [r7, #16]
 802280a:	681b      	ldr	r3, [r3, #0]
 802280c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 802280e:	69bb      	ldr	r3, [r7, #24]
 8022810:	005b      	lsls	r3, r3, #1
 8022812:	2203      	movs	r2, #3
 8022814:	fa02 f303 	lsl.w	r3, r2, r3
 8022818:	43db      	mvns	r3, r3
 802281a:	69fa      	ldr	r2, [r7, #28]
 802281c:	4013      	ands	r3, r2
 802281e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8022820:	69bb      	ldr	r3, [r7, #24]
 8022822:	005b      	lsls	r3, r3, #1
 8022824:	2202      	movs	r2, #2
 8022826:	fa02 f303 	lsl.w	r3, r2, r3
 802282a:	69fa      	ldr	r2, [r7, #28]
 802282c:	4313      	orrs	r3, r2
 802282e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8022830:	693b      	ldr	r3, [r7, #16]
 8022832:	69fa      	ldr	r2, [r7, #28]
 8022834:	601a      	str	r2, [r3, #0]
 8022836:	e067      	b.n	8022908 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8022838:	683b      	ldr	r3, [r7, #0]
 802283a:	685b      	ldr	r3, [r3, #4]
 802283c:	2b02      	cmp	r3, #2
 802283e:	d003      	beq.n	8022848 <HAL_GPIO_Init+0x104>
 8022840:	683b      	ldr	r3, [r7, #0]
 8022842:	685b      	ldr	r3, [r3, #4]
 8022844:	2b12      	cmp	r3, #18
 8022846:	d145      	bne.n	80228d4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8022848:	697b      	ldr	r3, [r7, #20]
 802284a:	08da      	lsrs	r2, r3, #3
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	3208      	adds	r2, #8
 8022850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022854:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8022856:	697b      	ldr	r3, [r7, #20]
 8022858:	f003 0307 	and.w	r3, r3, #7
 802285c:	009b      	lsls	r3, r3, #2
 802285e:	220f      	movs	r2, #15
 8022860:	fa02 f303 	lsl.w	r3, r2, r3
 8022864:	43db      	mvns	r3, r3
 8022866:	69fa      	ldr	r2, [r7, #28]
 8022868:	4013      	ands	r3, r2
 802286a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 802286c:	683b      	ldr	r3, [r7, #0]
 802286e:	691b      	ldr	r3, [r3, #16]
 8022870:	f003 020f 	and.w	r2, r3, #15
 8022874:	697b      	ldr	r3, [r7, #20]
 8022876:	f003 0307 	and.w	r3, r3, #7
 802287a:	009b      	lsls	r3, r3, #2
 802287c:	fa02 f303 	lsl.w	r3, r2, r3
 8022880:	69fa      	ldr	r2, [r7, #28]
 8022882:	4313      	orrs	r3, r2
 8022884:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8022886:	697b      	ldr	r3, [r7, #20]
 8022888:	08da      	lsrs	r2, r3, #3
 802288a:	687b      	ldr	r3, [r7, #4]
 802288c:	3208      	adds	r2, #8
 802288e:	69f9      	ldr	r1, [r7, #28]
 8022890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8022894:	693b      	ldr	r3, [r7, #16]
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 802289a:	69bb      	ldr	r3, [r7, #24]
 802289c:	005b      	lsls	r3, r3, #1
 802289e:	2203      	movs	r2, #3
 80228a0:	fa02 f303 	lsl.w	r3, r2, r3
 80228a4:	43db      	mvns	r3, r3
 80228a6:	69fa      	ldr	r2, [r7, #28]
 80228a8:	4013      	ands	r3, r2
 80228aa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80228ac:	683b      	ldr	r3, [r7, #0]
 80228ae:	685b      	ldr	r3, [r3, #4]
 80228b0:	f003 0203 	and.w	r2, r3, #3
 80228b4:	69bb      	ldr	r3, [r7, #24]
 80228b6:	005b      	lsls	r3, r3, #1
 80228b8:	fa02 f303 	lsl.w	r3, r2, r3
 80228bc:	69fa      	ldr	r2, [r7, #28]
 80228be:	4313      	orrs	r3, r2
 80228c0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80228c2:	693b      	ldr	r3, [r7, #16]
 80228c4:	69fa      	ldr	r2, [r7, #28]
 80228c6:	601a      	str	r2, [r3, #0]
 80228c8:	e01e      	b.n	8022908 <HAL_GPIO_Init+0x1c4>
 80228ca:	bf00      	nop
 80228cc:	46020000 	.word	0x46020000
 80228d0:	08034ab4 	.word	0x08034ab4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80228d4:	693b      	ldr	r3, [r7, #16]
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80228da:	69bb      	ldr	r3, [r7, #24]
 80228dc:	005b      	lsls	r3, r3, #1
 80228de:	2203      	movs	r2, #3
 80228e0:	fa02 f303 	lsl.w	r3, r2, r3
 80228e4:	43db      	mvns	r3, r3
 80228e6:	69fa      	ldr	r2, [r7, #28]
 80228e8:	4013      	ands	r3, r2
 80228ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80228ec:	683b      	ldr	r3, [r7, #0]
 80228ee:	685b      	ldr	r3, [r3, #4]
 80228f0:	f003 0203 	and.w	r2, r3, #3
 80228f4:	69bb      	ldr	r3, [r7, #24]
 80228f6:	005b      	lsls	r3, r3, #1
 80228f8:	fa02 f303 	lsl.w	r3, r2, r3
 80228fc:	69fa      	ldr	r2, [r7, #28]
 80228fe:	4313      	orrs	r3, r2
 8022900:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8022902:	693b      	ldr	r3, [r7, #16]
 8022904:	69fa      	ldr	r2, [r7, #28]
 8022906:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8022908:	683b      	ldr	r3, [r7, #0]
 802290a:	685b      	ldr	r3, [r3, #4]
 802290c:	2b01      	cmp	r3, #1
 802290e:	d00b      	beq.n	8022928 <HAL_GPIO_Init+0x1e4>
 8022910:	683b      	ldr	r3, [r7, #0]
 8022912:	685b      	ldr	r3, [r3, #4]
 8022914:	2b02      	cmp	r3, #2
 8022916:	d007      	beq.n	8022928 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8022918:	683b      	ldr	r3, [r7, #0]
 802291a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802291c:	2b11      	cmp	r3, #17
 802291e:	d003      	beq.n	8022928 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8022920:	683b      	ldr	r3, [r7, #0]
 8022922:	685b      	ldr	r3, [r3, #4]
 8022924:	2b12      	cmp	r3, #18
 8022926:	d130      	bne.n	802298a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8022928:	693b      	ldr	r3, [r7, #16]
 802292a:	689b      	ldr	r3, [r3, #8]
 802292c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 802292e:	69bb      	ldr	r3, [r7, #24]
 8022930:	005b      	lsls	r3, r3, #1
 8022932:	2203      	movs	r2, #3
 8022934:	fa02 f303 	lsl.w	r3, r2, r3
 8022938:	43db      	mvns	r3, r3
 802293a:	69fa      	ldr	r2, [r7, #28]
 802293c:	4013      	ands	r3, r2
 802293e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8022940:	683b      	ldr	r3, [r7, #0]
 8022942:	68da      	ldr	r2, [r3, #12]
 8022944:	69bb      	ldr	r3, [r7, #24]
 8022946:	005b      	lsls	r3, r3, #1
 8022948:	fa02 f303 	lsl.w	r3, r2, r3
 802294c:	69fa      	ldr	r2, [r7, #28]
 802294e:	4313      	orrs	r3, r2
 8022950:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8022952:	693b      	ldr	r3, [r7, #16]
 8022954:	69fa      	ldr	r2, [r7, #28]
 8022956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8022958:	693b      	ldr	r3, [r7, #16]
 802295a:	685b      	ldr	r3, [r3, #4]
 802295c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 802295e:	2201      	movs	r2, #1
 8022960:	69bb      	ldr	r3, [r7, #24]
 8022962:	fa02 f303 	lsl.w	r3, r2, r3
 8022966:	43db      	mvns	r3, r3
 8022968:	69fa      	ldr	r2, [r7, #28]
 802296a:	4013      	ands	r3, r2
 802296c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 802296e:	683b      	ldr	r3, [r7, #0]
 8022970:	685b      	ldr	r3, [r3, #4]
 8022972:	091b      	lsrs	r3, r3, #4
 8022974:	f003 0201 	and.w	r2, r3, #1
 8022978:	69bb      	ldr	r3, [r7, #24]
 802297a:	fa02 f303 	lsl.w	r3, r2, r3
 802297e:	69fa      	ldr	r2, [r7, #28]
 8022980:	4313      	orrs	r3, r2
 8022982:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8022984:	693b      	ldr	r3, [r7, #16]
 8022986:	69fa      	ldr	r2, [r7, #28]
 8022988:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 802298a:	683b      	ldr	r3, [r7, #0]
 802298c:	685b      	ldr	r3, [r3, #4]
 802298e:	2b03      	cmp	r3, #3
 8022990:	d017      	beq.n	80229c2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8022992:	693b      	ldr	r3, [r7, #16]
 8022994:	68db      	ldr	r3, [r3, #12]
 8022996:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8022998:	69bb      	ldr	r3, [r7, #24]
 802299a:	005b      	lsls	r3, r3, #1
 802299c:	2203      	movs	r2, #3
 802299e:	fa02 f303 	lsl.w	r3, r2, r3
 80229a2:	43db      	mvns	r3, r3
 80229a4:	69fa      	ldr	r2, [r7, #28]
 80229a6:	4013      	ands	r3, r2
 80229a8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80229aa:	683b      	ldr	r3, [r7, #0]
 80229ac:	689a      	ldr	r2, [r3, #8]
 80229ae:	69bb      	ldr	r3, [r7, #24]
 80229b0:	005b      	lsls	r3, r3, #1
 80229b2:	fa02 f303 	lsl.w	r3, r2, r3
 80229b6:	69fa      	ldr	r2, [r7, #28]
 80229b8:	4313      	orrs	r3, r2
 80229ba:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80229bc:	693b      	ldr	r3, [r7, #16]
 80229be:	69fa      	ldr	r2, [r7, #28]
 80229c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80229c2:	683b      	ldr	r3, [r7, #0]
 80229c4:	685b      	ldr	r3, [r3, #4]
 80229c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d07c      	beq.n	8022ac8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80229ce:	4a47      	ldr	r2, [pc, #284]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 80229d0:	697b      	ldr	r3, [r7, #20]
 80229d2:	089b      	lsrs	r3, r3, #2
 80229d4:	3318      	adds	r3, #24
 80229d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80229da:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80229dc:	697b      	ldr	r3, [r7, #20]
 80229de:	f003 0303 	and.w	r3, r3, #3
 80229e2:	00db      	lsls	r3, r3, #3
 80229e4:	220f      	movs	r2, #15
 80229e6:	fa02 f303 	lsl.w	r3, r2, r3
 80229ea:	43db      	mvns	r3, r3
 80229ec:	69fa      	ldr	r2, [r7, #28]
 80229ee:	4013      	ands	r3, r2
 80229f0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80229f2:	687b      	ldr	r3, [r7, #4]
 80229f4:	0a9a      	lsrs	r2, r3, #10
 80229f6:	4b3e      	ldr	r3, [pc, #248]	; (8022af0 <HAL_GPIO_Init+0x3ac>)
 80229f8:	4013      	ands	r3, r2
 80229fa:	697a      	ldr	r2, [r7, #20]
 80229fc:	f002 0203 	and.w	r2, r2, #3
 8022a00:	00d2      	lsls	r2, r2, #3
 8022a02:	4093      	lsls	r3, r2
 8022a04:	69fa      	ldr	r2, [r7, #28]
 8022a06:	4313      	orrs	r3, r2
 8022a08:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8022a0a:	4938      	ldr	r1, [pc, #224]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022a0c:	697b      	ldr	r3, [r7, #20]
 8022a0e:	089b      	lsrs	r3, r3, #2
 8022a10:	3318      	adds	r3, #24
 8022a12:	69fa      	ldr	r2, [r7, #28]
 8022a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8022a18:	4b34      	ldr	r3, [pc, #208]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8022a1e:	68fb      	ldr	r3, [r7, #12]
 8022a20:	43db      	mvns	r3, r3
 8022a22:	69fa      	ldr	r2, [r7, #28]
 8022a24:	4013      	ands	r3, r2
 8022a26:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8022a28:	683b      	ldr	r3, [r7, #0]
 8022a2a:	685b      	ldr	r3, [r3, #4]
 8022a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022a30:	2b00      	cmp	r3, #0
 8022a32:	d003      	beq.n	8022a3c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8022a34:	69fa      	ldr	r2, [r7, #28]
 8022a36:	68fb      	ldr	r3, [r7, #12]
 8022a38:	4313      	orrs	r3, r2
 8022a3a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8022a3c:	4a2b      	ldr	r2, [pc, #172]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022a3e:	69fb      	ldr	r3, [r7, #28]
 8022a40:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8022a42:	4b2a      	ldr	r3, [pc, #168]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022a44:	685b      	ldr	r3, [r3, #4]
 8022a46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8022a48:	68fb      	ldr	r3, [r7, #12]
 8022a4a:	43db      	mvns	r3, r3
 8022a4c:	69fa      	ldr	r2, [r7, #28]
 8022a4e:	4013      	ands	r3, r2
 8022a50:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8022a52:	683b      	ldr	r3, [r7, #0]
 8022a54:	685b      	ldr	r3, [r3, #4]
 8022a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	d003      	beq.n	8022a66 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8022a5e:	69fa      	ldr	r2, [r7, #28]
 8022a60:	68fb      	ldr	r3, [r7, #12]
 8022a62:	4313      	orrs	r3, r2
 8022a64:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8022a66:	4a21      	ldr	r2, [pc, #132]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022a68:	69fb      	ldr	r3, [r7, #28]
 8022a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8022a6c:	4b1f      	ldr	r3, [pc, #124]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022a72:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8022a74:	68fb      	ldr	r3, [r7, #12]
 8022a76:	43db      	mvns	r3, r3
 8022a78:	69fa      	ldr	r2, [r7, #28]
 8022a7a:	4013      	ands	r3, r2
 8022a7c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8022a7e:	683b      	ldr	r3, [r7, #0]
 8022a80:	685b      	ldr	r3, [r3, #4]
 8022a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022a86:	2b00      	cmp	r3, #0
 8022a88:	d003      	beq.n	8022a92 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8022a8a:	69fa      	ldr	r2, [r7, #28]
 8022a8c:	68fb      	ldr	r3, [r7, #12]
 8022a8e:	4313      	orrs	r3, r2
 8022a90:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8022a92:	4a16      	ldr	r2, [pc, #88]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022a94:	69fb      	ldr	r3, [r7, #28]
 8022a96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8022a9a:	4b14      	ldr	r3, [pc, #80]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8022aa0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8022aa2:	68fb      	ldr	r3, [r7, #12]
 8022aa4:	43db      	mvns	r3, r3
 8022aa6:	69fa      	ldr	r2, [r7, #28]
 8022aa8:	4013      	ands	r3, r2
 8022aaa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8022aac:	683b      	ldr	r3, [r7, #0]
 8022aae:	685b      	ldr	r3, [r3, #4]
 8022ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022ab4:	2b00      	cmp	r3, #0
 8022ab6:	d003      	beq.n	8022ac0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8022ab8:	69fa      	ldr	r2, [r7, #28]
 8022aba:	68fb      	ldr	r3, [r7, #12]
 8022abc:	4313      	orrs	r3, r2
 8022abe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8022ac0:	4a0a      	ldr	r2, [pc, #40]	; (8022aec <HAL_GPIO_Init+0x3a8>)
 8022ac2:	69fb      	ldr	r3, [r7, #28]
 8022ac4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8022ac8:	697b      	ldr	r3, [r7, #20]
 8022aca:	3301      	adds	r3, #1
 8022acc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8022ace:	683b      	ldr	r3, [r7, #0]
 8022ad0:	681a      	ldr	r2, [r3, #0]
 8022ad2:	697b      	ldr	r3, [r7, #20]
 8022ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	f47f ae3d 	bne.w	8022758 <HAL_GPIO_Init+0x14>
  }
}
 8022ade:	bf00      	nop
 8022ae0:	bf00      	nop
 8022ae2:	3724      	adds	r7, #36	; 0x24
 8022ae4:	46bd      	mov	sp, r7
 8022ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aea:	4770      	bx	lr
 8022aec:	46022000 	.word	0x46022000
 8022af0:	002f7f7f 	.word	0x002f7f7f

08022af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8022af4:	b480      	push	{r7}
 8022af6:	b083      	sub	sp, #12
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	6078      	str	r0, [r7, #4]
 8022afc:	460b      	mov	r3, r1
 8022afe:	807b      	strh	r3, [r7, #2]
 8022b00:	4613      	mov	r3, r2
 8022b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8022b04:	787b      	ldrb	r3, [r7, #1]
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d003      	beq.n	8022b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8022b0a:	887a      	ldrh	r2, [r7, #2]
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8022b10:	e002      	b.n	8022b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8022b12:	887a      	ldrh	r2, [r7, #2]
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8022b18:	bf00      	nop
 8022b1a:	370c      	adds	r7, #12
 8022b1c:	46bd      	mov	sp, r7
 8022b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b22:	4770      	bx	lr

08022b24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8022b24:	b580      	push	{r7, lr}
 8022b26:	b084      	sub	sp, #16
 8022b28:	af00      	add	r7, sp, #0
 8022b2a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8022b2c:	687b      	ldr	r3, [r7, #4]
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	699b      	ldr	r3, [r3, #24]
 8022b32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	681b      	ldr	r3, [r3, #0]
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	d005      	beq.n	8022b50 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b48:	68ba      	ldr	r2, [r7, #8]
 8022b4a:	68f9      	ldr	r1, [r7, #12]
 8022b4c:	6878      	ldr	r0, [r7, #4]
 8022b4e:	4798      	blx	r3
  }
}
 8022b50:	bf00      	nop
 8022b52:	3710      	adds	r7, #16
 8022b54:	46bd      	mov	sp, r7
 8022b56:	bd80      	pop	{r7, pc}

08022b58 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8022b58:	b580      	push	{r7, lr}
 8022b5a:	b086      	sub	sp, #24
 8022b5c:	af00      	add	r7, sp, #0
 8022b5e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8022b60:	687b      	ldr	r3, [r7, #4]
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	699b      	ldr	r3, [r3, #24]
 8022b66:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	681b      	ldr	r3, [r3, #0]
 8022b6c:	681b      	ldr	r3, [r3, #0]
 8022b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8022b70:	697b      	ldr	r3, [r7, #20]
 8022b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d00f      	beq.n	8022b9a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8022b7a:	693b      	ldr	r3, [r7, #16]
 8022b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	d00a      	beq.n	8022b9a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022b88:	f043 0201 	orr.w	r2, r3, #1
 8022b8c:	687b      	ldr	r3, [r7, #4]
 8022b8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	681b      	ldr	r3, [r3, #0]
 8022b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022b98:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8022b9a:	697b      	ldr	r3, [r7, #20]
 8022b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022ba0:	2b00      	cmp	r3, #0
 8022ba2:	d00f      	beq.n	8022bc4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8022ba4:	693b      	ldr	r3, [r7, #16]
 8022ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	d00a      	beq.n	8022bc4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8022bae:	687b      	ldr	r3, [r7, #4]
 8022bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022bb2:	f043 0208 	orr.w	r2, r3, #8
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	681b      	ldr	r3, [r3, #0]
 8022bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022bc2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8022bc4:	697b      	ldr	r3, [r7, #20]
 8022bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022bca:	2b00      	cmp	r3, #0
 8022bcc:	d00f      	beq.n	8022bee <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8022bce:	693b      	ldr	r3, [r7, #16]
 8022bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d00a      	beq.n	8022bee <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8022bd8:	687b      	ldr	r3, [r7, #4]
 8022bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022bdc:	f043 0202 	orr.w	r2, r3, #2
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	681b      	ldr	r3, [r3, #0]
 8022be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022bec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8022bee:	687b      	ldr	r3, [r7, #4]
 8022bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022bf2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8022bf4:	68fb      	ldr	r3, [r7, #12]
 8022bf6:	f003 030b 	and.w	r3, r3, #11
 8022bfa:	2b00      	cmp	r3, #0
 8022bfc:	d003      	beq.n	8022c06 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8022bfe:	68f9      	ldr	r1, [r7, #12]
 8022c00:	6878      	ldr	r0, [r7, #4]
 8022c02:	f000 fb8d 	bl	8023320 <I2C_ITError>
  }
}
 8022c06:	bf00      	nop
 8022c08:	3718      	adds	r7, #24
 8022c0a:	46bd      	mov	sp, r7
 8022c0c:	bd80      	pop	{r7, pc}

08022c0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8022c0e:	b480      	push	{r7}
 8022c10:	b083      	sub	sp, #12
 8022c12:	af00      	add	r7, sp, #0
 8022c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8022c16:	bf00      	nop
 8022c18:	370c      	adds	r7, #12
 8022c1a:	46bd      	mov	sp, r7
 8022c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c20:	4770      	bx	lr

08022c22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8022c22:	b480      	push	{r7}
 8022c24:	b083      	sub	sp, #12
 8022c26:	af00      	add	r7, sp, #0
 8022c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8022c2a:	bf00      	nop
 8022c2c:	370c      	adds	r7, #12
 8022c2e:	46bd      	mov	sp, r7
 8022c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c34:	4770      	bx	lr

08022c36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8022c36:	b480      	push	{r7}
 8022c38:	b083      	sub	sp, #12
 8022c3a:	af00      	add	r7, sp, #0
 8022c3c:	6078      	str	r0, [r7, #4]
 8022c3e:	460b      	mov	r3, r1
 8022c40:	70fb      	strb	r3, [r7, #3]
 8022c42:	4613      	mov	r3, r2
 8022c44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8022c46:	bf00      	nop
 8022c48:	370c      	adds	r7, #12
 8022c4a:	46bd      	mov	sp, r7
 8022c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c50:	4770      	bx	lr

08022c52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8022c52:	b480      	push	{r7}
 8022c54:	b083      	sub	sp, #12
 8022c56:	af00      	add	r7, sp, #0
 8022c58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8022c5a:	bf00      	nop
 8022c5c:	370c      	adds	r7, #12
 8022c5e:	46bd      	mov	sp, r7
 8022c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c64:	4770      	bx	lr

08022c66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8022c66:	b480      	push	{r7}
 8022c68:	b083      	sub	sp, #12
 8022c6a:	af00      	add	r7, sp, #0
 8022c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8022c6e:	bf00      	nop
 8022c70:	370c      	adds	r7, #12
 8022c72:	46bd      	mov	sp, r7
 8022c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c78:	4770      	bx	lr

08022c7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8022c7a:	b480      	push	{r7}
 8022c7c:	b083      	sub	sp, #12
 8022c7e:	af00      	add	r7, sp, #0
 8022c80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8022c82:	bf00      	nop
 8022c84:	370c      	adds	r7, #12
 8022c86:	46bd      	mov	sp, r7
 8022c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c8c:	4770      	bx	lr

08022c8e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8022c8e:	b580      	push	{r7, lr}
 8022c90:	b086      	sub	sp, #24
 8022c92:	af00      	add	r7, sp, #0
 8022c94:	60f8      	str	r0, [r7, #12]
 8022c96:	60b9      	str	r1, [r7, #8]
 8022c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8022c9a:	68fb      	ldr	r3, [r7, #12]
 8022c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022c9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8022ca0:	68bb      	ldr	r3, [r7, #8]
 8022ca2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8022ca4:	68fb      	ldr	r3, [r7, #12]
 8022ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8022caa:	2b01      	cmp	r3, #1
 8022cac:	d101      	bne.n	8022cb2 <I2C_Slave_ISR_IT+0x24>
 8022cae:	2302      	movs	r3, #2
 8022cb0:	e0e1      	b.n	8022e76 <I2C_Slave_ISR_IT+0x1e8>
 8022cb2:	68fb      	ldr	r3, [r7, #12]
 8022cb4:	2201      	movs	r2, #1
 8022cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8022cba:	693b      	ldr	r3, [r7, #16]
 8022cbc:	f003 0320 	and.w	r3, r3, #32
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	d008      	beq.n	8022cd6 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8022cca:	2b00      	cmp	r3, #0
 8022ccc:	d003      	beq.n	8022cd6 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8022cce:	6939      	ldr	r1, [r7, #16]
 8022cd0:	68f8      	ldr	r0, [r7, #12]
 8022cd2:	f000 f9b5 	bl	8023040 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8022cd6:	693b      	ldr	r3, [r7, #16]
 8022cd8:	f003 0310 	and.w	r3, r3, #16
 8022cdc:	2b00      	cmp	r3, #0
 8022cde:	d04b      	beq.n	8022d78 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	d046      	beq.n	8022d78 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8022cea:	68fb      	ldr	r3, [r7, #12]
 8022cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022cee:	b29b      	uxth	r3, r3
 8022cf0:	2b00      	cmp	r3, #0
 8022cf2:	d128      	bne.n	8022d46 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8022cf4:	68fb      	ldr	r3, [r7, #12]
 8022cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8022cfa:	b2db      	uxtb	r3, r3
 8022cfc:	2b28      	cmp	r3, #40	; 0x28
 8022cfe:	d108      	bne.n	8022d12 <I2C_Slave_ISR_IT+0x84>
 8022d00:	697b      	ldr	r3, [r7, #20]
 8022d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8022d06:	d104      	bne.n	8022d12 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8022d08:	6939      	ldr	r1, [r7, #16]
 8022d0a:	68f8      	ldr	r0, [r7, #12]
 8022d0c:	f000 fab4 	bl	8023278 <I2C_ITListenCplt>
 8022d10:	e031      	b.n	8022d76 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8022d18:	b2db      	uxtb	r3, r3
 8022d1a:	2b29      	cmp	r3, #41	; 0x29
 8022d1c:	d10e      	bne.n	8022d3c <I2C_Slave_ISR_IT+0xae>
 8022d1e:	697b      	ldr	r3, [r7, #20]
 8022d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8022d24:	d00a      	beq.n	8022d3c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8022d26:	68fb      	ldr	r3, [r7, #12]
 8022d28:	681b      	ldr	r3, [r3, #0]
 8022d2a:	2210      	movs	r2, #16
 8022d2c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8022d2e:	68f8      	ldr	r0, [r7, #12]
 8022d30:	f000 fc0d 	bl	802354e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8022d34:	68f8      	ldr	r0, [r7, #12]
 8022d36:	f000 f926 	bl	8022f86 <I2C_ITSlaveSeqCplt>
 8022d3a:	e01c      	b.n	8022d76 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8022d3c:	68fb      	ldr	r3, [r7, #12]
 8022d3e:	681b      	ldr	r3, [r3, #0]
 8022d40:	2210      	movs	r2, #16
 8022d42:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8022d44:	e08f      	b.n	8022e66 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8022d46:	68fb      	ldr	r3, [r7, #12]
 8022d48:	681b      	ldr	r3, [r3, #0]
 8022d4a:	2210      	movs	r2, #16
 8022d4c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022d52:	f043 0204 	orr.w	r2, r3, #4
 8022d56:	68fb      	ldr	r3, [r7, #12]
 8022d58:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8022d5a:	697b      	ldr	r3, [r7, #20]
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d003      	beq.n	8022d68 <I2C_Slave_ISR_IT+0xda>
 8022d60:	697b      	ldr	r3, [r7, #20]
 8022d62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022d66:	d17e      	bne.n	8022e66 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8022d68:	68fb      	ldr	r3, [r7, #12]
 8022d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022d6c:	4619      	mov	r1, r3
 8022d6e:	68f8      	ldr	r0, [r7, #12]
 8022d70:	f000 fad6 	bl	8023320 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8022d74:	e077      	b.n	8022e66 <I2C_Slave_ISR_IT+0x1d8>
 8022d76:	e076      	b.n	8022e66 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8022d78:	693b      	ldr	r3, [r7, #16]
 8022d7a:	f003 0304 	and.w	r3, r3, #4
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	d02f      	beq.n	8022de2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8022d82:	687b      	ldr	r3, [r7, #4]
 8022d84:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	d02a      	beq.n	8022de2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8022d8c:	68fb      	ldr	r3, [r7, #12]
 8022d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022d90:	b29b      	uxth	r3, r3
 8022d92:	2b00      	cmp	r3, #0
 8022d94:	d018      	beq.n	8022dc8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8022d96:	68fb      	ldr	r3, [r7, #12]
 8022d98:	681b      	ldr	r3, [r3, #0]
 8022d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022d9c:	68fb      	ldr	r3, [r7, #12]
 8022d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022da0:	b2d2      	uxtb	r2, r2
 8022da2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8022da4:	68fb      	ldr	r3, [r7, #12]
 8022da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022da8:	1c5a      	adds	r2, r3, #1
 8022daa:	68fb      	ldr	r3, [r7, #12]
 8022dac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8022dae:	68fb      	ldr	r3, [r7, #12]
 8022db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022db2:	3b01      	subs	r3, #1
 8022db4:	b29a      	uxth	r2, r3
 8022db6:	68fb      	ldr	r3, [r7, #12]
 8022db8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8022dba:	68fb      	ldr	r3, [r7, #12]
 8022dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022dbe:	b29b      	uxth	r3, r3
 8022dc0:	3b01      	subs	r3, #1
 8022dc2:	b29a      	uxth	r2, r3
 8022dc4:	68fb      	ldr	r3, [r7, #12]
 8022dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8022dc8:	68fb      	ldr	r3, [r7, #12]
 8022dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022dcc:	b29b      	uxth	r3, r3
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	d14b      	bne.n	8022e6a <I2C_Slave_ISR_IT+0x1dc>
 8022dd2:	697b      	ldr	r3, [r7, #20]
 8022dd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8022dd8:	d047      	beq.n	8022e6a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8022dda:	68f8      	ldr	r0, [r7, #12]
 8022ddc:	f000 f8d3 	bl	8022f86 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8022de0:	e043      	b.n	8022e6a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8022de2:	693b      	ldr	r3, [r7, #16]
 8022de4:	f003 0308 	and.w	r3, r3, #8
 8022de8:	2b00      	cmp	r3, #0
 8022dea:	d009      	beq.n	8022e00 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8022df2:	2b00      	cmp	r3, #0
 8022df4:	d004      	beq.n	8022e00 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8022df6:	6939      	ldr	r1, [r7, #16]
 8022df8:	68f8      	ldr	r0, [r7, #12]
 8022dfa:	f000 f840 	bl	8022e7e <I2C_ITAddrCplt>
 8022dfe:	e035      	b.n	8022e6c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8022e00:	693b      	ldr	r3, [r7, #16]
 8022e02:	f003 0302 	and.w	r3, r3, #2
 8022e06:	2b00      	cmp	r3, #0
 8022e08:	d030      	beq.n	8022e6c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8022e0a:	687b      	ldr	r3, [r7, #4]
 8022e0c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	d02b      	beq.n	8022e6c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8022e14:	68fb      	ldr	r3, [r7, #12]
 8022e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022e18:	b29b      	uxth	r3, r3
 8022e1a:	2b00      	cmp	r3, #0
 8022e1c:	d018      	beq.n	8022e50 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8022e1e:	68fb      	ldr	r3, [r7, #12]
 8022e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e22:	781a      	ldrb	r2, [r3, #0]
 8022e24:	68fb      	ldr	r3, [r7, #12]
 8022e26:	681b      	ldr	r3, [r3, #0]
 8022e28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8022e2a:	68fb      	ldr	r3, [r7, #12]
 8022e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e2e:	1c5a      	adds	r2, r3, #1
 8022e30:	68fb      	ldr	r3, [r7, #12]
 8022e32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8022e34:	68fb      	ldr	r3, [r7, #12]
 8022e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022e38:	b29b      	uxth	r3, r3
 8022e3a:	3b01      	subs	r3, #1
 8022e3c:	b29a      	uxth	r2, r3
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8022e42:	68fb      	ldr	r3, [r7, #12]
 8022e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022e46:	3b01      	subs	r3, #1
 8022e48:	b29a      	uxth	r2, r3
 8022e4a:	68fb      	ldr	r3, [r7, #12]
 8022e4c:	851a      	strh	r2, [r3, #40]	; 0x28
 8022e4e:	e00d      	b.n	8022e6c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8022e50:	697b      	ldr	r3, [r7, #20]
 8022e52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022e56:	d002      	beq.n	8022e5e <I2C_Slave_ISR_IT+0x1d0>
 8022e58:	697b      	ldr	r3, [r7, #20]
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d106      	bne.n	8022e6c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8022e5e:	68f8      	ldr	r0, [r7, #12]
 8022e60:	f000 f891 	bl	8022f86 <I2C_ITSlaveSeqCplt>
 8022e64:	e002      	b.n	8022e6c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8022e66:	bf00      	nop
 8022e68:	e000      	b.n	8022e6c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8022e6a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8022e6c:	68fb      	ldr	r3, [r7, #12]
 8022e6e:	2200      	movs	r2, #0
 8022e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8022e74:	2300      	movs	r3, #0
}
 8022e76:	4618      	mov	r0, r3
 8022e78:	3718      	adds	r7, #24
 8022e7a:	46bd      	mov	sp, r7
 8022e7c:	bd80      	pop	{r7, pc}

08022e7e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8022e7e:	b580      	push	{r7, lr}
 8022e80:	b084      	sub	sp, #16
 8022e82:	af00      	add	r7, sp, #0
 8022e84:	6078      	str	r0, [r7, #4]
 8022e86:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8022e8e:	b2db      	uxtb	r3, r3
 8022e90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8022e94:	2b28      	cmp	r3, #40	; 0x28
 8022e96:	d16a      	bne.n	8022f6e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8022e98:	687b      	ldr	r3, [r7, #4]
 8022e9a:	681b      	ldr	r3, [r3, #0]
 8022e9c:	699b      	ldr	r3, [r3, #24]
 8022e9e:	0c1b      	lsrs	r3, r3, #16
 8022ea0:	b2db      	uxtb	r3, r3
 8022ea2:	f003 0301 	and.w	r3, r3, #1
 8022ea6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	681b      	ldr	r3, [r3, #0]
 8022eac:	699b      	ldr	r3, [r3, #24]
 8022eae:	0c1b      	lsrs	r3, r3, #16
 8022eb0:	b29b      	uxth	r3, r3
 8022eb2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8022eb6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	681b      	ldr	r3, [r3, #0]
 8022ebc:	689b      	ldr	r3, [r3, #8]
 8022ebe:	b29b      	uxth	r3, r3
 8022ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8022ec4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	681b      	ldr	r3, [r3, #0]
 8022eca:	68db      	ldr	r3, [r3, #12]
 8022ecc:	b29b      	uxth	r3, r3
 8022ece:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8022ed2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8022ed4:	687b      	ldr	r3, [r7, #4]
 8022ed6:	68db      	ldr	r3, [r3, #12]
 8022ed8:	2b02      	cmp	r3, #2
 8022eda:	d138      	bne.n	8022f4e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8022edc:	897b      	ldrh	r3, [r7, #10]
 8022ede:	09db      	lsrs	r3, r3, #7
 8022ee0:	b29a      	uxth	r2, r3
 8022ee2:	89bb      	ldrh	r3, [r7, #12]
 8022ee4:	4053      	eors	r3, r2
 8022ee6:	b29b      	uxth	r3, r3
 8022ee8:	f003 0306 	and.w	r3, r3, #6
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d11c      	bne.n	8022f2a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8022ef0:	897b      	ldrh	r3, [r7, #10]
 8022ef2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8022ef4:	687b      	ldr	r3, [r7, #4]
 8022ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022ef8:	1c5a      	adds	r2, r3, #1
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022f02:	2b02      	cmp	r3, #2
 8022f04:	d13b      	bne.n	8022f7e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	2200      	movs	r2, #0
 8022f0a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8022f0c:	687b      	ldr	r3, [r7, #4]
 8022f0e:	681b      	ldr	r3, [r3, #0]
 8022f10:	2208      	movs	r2, #8
 8022f12:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	2200      	movs	r2, #0
 8022f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8022f1c:	89ba      	ldrh	r2, [r7, #12]
 8022f1e:	7bfb      	ldrb	r3, [r7, #15]
 8022f20:	4619      	mov	r1, r3
 8022f22:	6878      	ldr	r0, [r7, #4]
 8022f24:	f7ff fe87 	bl	8022c36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8022f28:	e029      	b.n	8022f7e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8022f2a:	893b      	ldrh	r3, [r7, #8]
 8022f2c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8022f2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8022f32:	6878      	ldr	r0, [r7, #4]
 8022f34:	f000 fb4d 	bl	80235d2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8022f38:	687b      	ldr	r3, [r7, #4]
 8022f3a:	2200      	movs	r2, #0
 8022f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8022f40:	89ba      	ldrh	r2, [r7, #12]
 8022f42:	7bfb      	ldrb	r3, [r7, #15]
 8022f44:	4619      	mov	r1, r3
 8022f46:	6878      	ldr	r0, [r7, #4]
 8022f48:	f7ff fe75 	bl	8022c36 <HAL_I2C_AddrCallback>
}
 8022f4c:	e017      	b.n	8022f7e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8022f4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8022f52:	6878      	ldr	r0, [r7, #4]
 8022f54:	f000 fb3d 	bl	80235d2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	2200      	movs	r2, #0
 8022f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8022f60:	89ba      	ldrh	r2, [r7, #12]
 8022f62:	7bfb      	ldrb	r3, [r7, #15]
 8022f64:	4619      	mov	r1, r3
 8022f66:	6878      	ldr	r0, [r7, #4]
 8022f68:	f7ff fe65 	bl	8022c36 <HAL_I2C_AddrCallback>
}
 8022f6c:	e007      	b.n	8022f7e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8022f6e:	687b      	ldr	r3, [r7, #4]
 8022f70:	681b      	ldr	r3, [r3, #0]
 8022f72:	2208      	movs	r2, #8
 8022f74:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8022f76:	687b      	ldr	r3, [r7, #4]
 8022f78:	2200      	movs	r2, #0
 8022f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8022f7e:	bf00      	nop
 8022f80:	3710      	adds	r7, #16
 8022f82:	46bd      	mov	sp, r7
 8022f84:	bd80      	pop	{r7, pc}

08022f86 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8022f86:	b580      	push	{r7, lr}
 8022f88:	b084      	sub	sp, #16
 8022f8a:	af00      	add	r7, sp, #0
 8022f8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	681b      	ldr	r3, [r3, #0]
 8022f92:	681b      	ldr	r3, [r3, #0]
 8022f94:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8022f96:	687b      	ldr	r3, [r7, #4]
 8022f98:	2200      	movs	r2, #0
 8022f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8022f9e:	68fb      	ldr	r3, [r7, #12]
 8022fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022fa4:	2b00      	cmp	r3, #0
 8022fa6:	d008      	beq.n	8022fba <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8022fa8:	687b      	ldr	r3, [r7, #4]
 8022faa:	681b      	ldr	r3, [r3, #0]
 8022fac:	681a      	ldr	r2, [r3, #0]
 8022fae:	687b      	ldr	r3, [r7, #4]
 8022fb0:	681b      	ldr	r3, [r3, #0]
 8022fb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8022fb6:	601a      	str	r2, [r3, #0]
 8022fb8:	e00c      	b.n	8022fd4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8022fba:	68fb      	ldr	r3, [r7, #12]
 8022fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8022fc0:	2b00      	cmp	r3, #0
 8022fc2:	d007      	beq.n	8022fd4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8022fc4:	687b      	ldr	r3, [r7, #4]
 8022fc6:	681b      	ldr	r3, [r3, #0]
 8022fc8:	681a      	ldr	r2, [r3, #0]
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8022fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8022fd4:	687b      	ldr	r3, [r7, #4]
 8022fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8022fda:	b2db      	uxtb	r3, r3
 8022fdc:	2b29      	cmp	r3, #41	; 0x29
 8022fde:	d112      	bne.n	8023006 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	2228      	movs	r2, #40	; 0x28
 8022fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	2221      	movs	r2, #33	; 0x21
 8022fec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8022fee:	2101      	movs	r1, #1
 8022ff0:	6878      	ldr	r0, [r7, #4]
 8022ff2:	f000 faee 	bl	80235d2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8022ff6:	687b      	ldr	r3, [r7, #4]
 8022ff8:	2200      	movs	r2, #0
 8022ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8022ffe:	6878      	ldr	r0, [r7, #4]
 8023000:	f7ff fe05 	bl	8022c0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8023004:	e017      	b.n	8023036 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802300c:	b2db      	uxtb	r3, r3
 802300e:	2b2a      	cmp	r3, #42	; 0x2a
 8023010:	d111      	bne.n	8023036 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	2228      	movs	r2, #40	; 0x28
 8023016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	2222      	movs	r2, #34	; 0x22
 802301e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8023020:	2102      	movs	r1, #2
 8023022:	6878      	ldr	r0, [r7, #4]
 8023024:	f000 fad5 	bl	80235d2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8023028:	687b      	ldr	r3, [r7, #4]
 802302a:	2200      	movs	r2, #0
 802302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8023030:	6878      	ldr	r0, [r7, #4]
 8023032:	f7ff fdf6 	bl	8022c22 <HAL_I2C_SlaveRxCpltCallback>
}
 8023036:	bf00      	nop
 8023038:	3710      	adds	r7, #16
 802303a:	46bd      	mov	sp, r7
 802303c:	bd80      	pop	{r7, pc}
	...

08023040 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8023040:	b590      	push	{r4, r7, lr}
 8023042:	b087      	sub	sp, #28
 8023044:	af00      	add	r7, sp, #0
 8023046:	6078      	str	r0, [r7, #4]
 8023048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	681b      	ldr	r3, [r3, #0]
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8023052:	683b      	ldr	r3, [r7, #0]
 8023054:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802305c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802305e:	687b      	ldr	r3, [r7, #4]
 8023060:	681b      	ldr	r3, [r3, #0]
 8023062:	2220      	movs	r2, #32
 8023064:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8023066:	7bfb      	ldrb	r3, [r7, #15]
 8023068:	2b21      	cmp	r3, #33	; 0x21
 802306a:	d005      	beq.n	8023078 <I2C_ITSlaveCplt+0x38>
 802306c:	7bfb      	ldrb	r3, [r7, #15]
 802306e:	2b29      	cmp	r3, #41	; 0x29
 8023070:	d002      	beq.n	8023078 <I2C_ITSlaveCplt+0x38>
 8023072:	7bfb      	ldrb	r3, [r7, #15]
 8023074:	2b28      	cmp	r3, #40	; 0x28
 8023076:	d108      	bne.n	802308a <I2C_ITSlaveCplt+0x4a>
      (tmpstate == HAL_I2C_STATE_LISTEN))
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8023078:	f248 0101 	movw	r1, #32769	; 0x8001
 802307c:	6878      	ldr	r0, [r7, #4]
 802307e:	f000 faa8 	bl	80235d2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	2221      	movs	r2, #33	; 0x21
 8023086:	631a      	str	r2, [r3, #48]	; 0x30
 8023088:	e00d      	b.n	80230a6 <I2C_ITSlaveCplt+0x66>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802308a:	7bfb      	ldrb	r3, [r7, #15]
 802308c:	2b22      	cmp	r3, #34	; 0x22
 802308e:	d002      	beq.n	8023096 <I2C_ITSlaveCplt+0x56>
 8023090:	7bfb      	ldrb	r3, [r7, #15]
 8023092:	2b2a      	cmp	r3, #42	; 0x2a
 8023094:	d107      	bne.n	80230a6 <I2C_ITSlaveCplt+0x66>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8023096:	f248 0102 	movw	r1, #32770	; 0x8002
 802309a:	6878      	ldr	r0, [r7, #4]
 802309c:	f000 fa99 	bl	80235d2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	2222      	movs	r2, #34	; 0x22
 80230a4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80230a6:	687b      	ldr	r3, [r7, #4]
 80230a8:	681b      	ldr	r3, [r3, #0]
 80230aa:	685a      	ldr	r2, [r3, #4]
 80230ac:	687b      	ldr	r3, [r7, #4]
 80230ae:	681b      	ldr	r3, [r3, #0]
 80230b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80230b4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	681b      	ldr	r3, [r3, #0]
 80230ba:	6859      	ldr	r1, [r3, #4]
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	681a      	ldr	r2, [r3, #0]
 80230c0:	4b6b      	ldr	r3, [pc, #428]	; (8023270 <I2C_ITSlaveCplt+0x230>)
 80230c2:	400b      	ands	r3, r1
 80230c4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80230c6:	6878      	ldr	r0, [r7, #4]
 80230c8:	f000 fa41 	bl	802354e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80230cc:	693b      	ldr	r3, [r7, #16]
 80230ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	d01c      	beq.n	8023110 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	681b      	ldr	r3, [r3, #0]
 80230da:	681a      	ldr	r2, [r3, #0]
 80230dc:	687b      	ldr	r3, [r7, #4]
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80230e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80230e6:	687b      	ldr	r3, [r7, #4]
 80230e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80230ea:	2b00      	cmp	r3, #0
 80230ec:	d031      	beq.n	8023152 <I2C_ITSlaveCplt+0x112>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80230ee:	687b      	ldr	r3, [r7, #4]
 80230f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80230f6:	b29c      	uxth	r4, r3
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80230fc:	4618      	mov	r0, r3
 80230fe:	f7ff fb12 	bl	8022726 <HAL_DMAEx_GetFifoLevel>
 8023102:	4603      	mov	r3, r0
 8023104:	b29b      	uxth	r3, r3
 8023106:	4423      	add	r3, r4
 8023108:	b29a      	uxth	r2, r3
 802310a:	687b      	ldr	r3, [r7, #4]
 802310c:	855a      	strh	r2, [r3, #42]	; 0x2a
 802310e:	e020      	b.n	8023152 <I2C_ITSlaveCplt+0x112>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8023110:	693b      	ldr	r3, [r7, #16]
 8023112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023116:	2b00      	cmp	r3, #0
 8023118:	d01b      	beq.n	8023152 <I2C_ITSlaveCplt+0x112>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	681b      	ldr	r3, [r3, #0]
 802311e:	681a      	ldr	r2, [r3, #0]
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	681b      	ldr	r3, [r3, #0]
 8023124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8023128:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802312e:	2b00      	cmp	r3, #0
 8023130:	d00f      	beq.n	8023152 <I2C_ITSlaveCplt+0x112>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8023132:	687b      	ldr	r3, [r7, #4]
 8023134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023136:	681b      	ldr	r3, [r3, #0]
 8023138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802313a:	b29c      	uxth	r4, r3
 802313c:	687b      	ldr	r3, [r7, #4]
 802313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023140:	4618      	mov	r0, r3
 8023142:	f7ff faf0 	bl	8022726 <HAL_DMAEx_GetFifoLevel>
 8023146:	4603      	mov	r3, r0
 8023148:	b29b      	uxth	r3, r3
 802314a:	4423      	add	r3, r4
 802314c:	b29a      	uxth	r2, r3
 802314e:	687b      	ldr	r3, [r7, #4]
 8023150:	855a      	strh	r2, [r3, #42]	; 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8023152:	697b      	ldr	r3, [r7, #20]
 8023154:	f003 0304 	and.w	r3, r3, #4
 8023158:	2b00      	cmp	r3, #0
 802315a:	d020      	beq.n	802319e <I2C_ITSlaveCplt+0x15e>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 802315c:	697b      	ldr	r3, [r7, #20]
 802315e:	f023 0304 	bic.w	r3, r3, #4
 8023162:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	681b      	ldr	r3, [r3, #0]
 8023168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802316a:	687b      	ldr	r3, [r7, #4]
 802316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802316e:	b2d2      	uxtb	r2, r2
 8023170:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023176:	1c5a      	adds	r2, r3, #1
 8023178:	687b      	ldr	r3, [r7, #4]
 802317a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023180:	2b00      	cmp	r3, #0
 8023182:	d00c      	beq.n	802319e <I2C_ITSlaveCplt+0x15e>
    {
      hi2c->XferSize--;
 8023184:	687b      	ldr	r3, [r7, #4]
 8023186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023188:	3b01      	subs	r3, #1
 802318a:	b29a      	uxth	r2, r3
 802318c:	687b      	ldr	r3, [r7, #4]
 802318e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023194:	b29b      	uxth	r3, r3
 8023196:	3b01      	subs	r3, #1
 8023198:	b29a      	uxth	r2, r3
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 802319e:	687b      	ldr	r3, [r7, #4]
 80231a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80231a2:	b29b      	uxth	r3, r3
 80231a4:	2b00      	cmp	r3, #0
 80231a6:	d005      	beq.n	80231b4 <I2C_ITSlaveCplt+0x174>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80231ac:	f043 0204 	orr.w	r2, r3, #4
 80231b0:	687b      	ldr	r3, [r7, #4]
 80231b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80231b4:	687b      	ldr	r3, [r7, #4]
 80231b6:	2200      	movs	r2, #0
 80231b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	2200      	movs	r2, #0
 80231c0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80231c6:	2b00      	cmp	r3, #0
 80231c8:	d010      	beq.n	80231ec <I2C_ITSlaveCplt+0x1ac>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80231ca:	687b      	ldr	r3, [r7, #4]
 80231cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80231ce:	4619      	mov	r1, r3
 80231d0:	6878      	ldr	r0, [r7, #4]
 80231d2:	f000 f8a5 	bl	8023320 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80231dc:	b2db      	uxtb	r3, r3
 80231de:	2b28      	cmp	r3, #40	; 0x28
 80231e0:	d141      	bne.n	8023266 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80231e2:	6979      	ldr	r1, [r7, #20]
 80231e4:	6878      	ldr	r0, [r7, #4]
 80231e6:	f000 f847 	bl	8023278 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80231ea:	e03c      	b.n	8023266 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80231ec:	687b      	ldr	r3, [r7, #4]
 80231ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80231f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80231f4:	d014      	beq.n	8023220 <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 80231f6:	6878      	ldr	r0, [r7, #4]
 80231f8:	f7ff fec5 	bl	8022f86 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80231fc:	687b      	ldr	r3, [r7, #4]
 80231fe:	4a1d      	ldr	r2, [pc, #116]	; (8023274 <I2C_ITSlaveCplt+0x234>)
 8023200:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	2220      	movs	r2, #32
 8023206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	2200      	movs	r2, #0
 802320e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	2200      	movs	r2, #0
 8023214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8023218:	6878      	ldr	r0, [r7, #4]
 802321a:	f7ff fd1a 	bl	8022c52 <HAL_I2C_ListenCpltCallback>
}
 802321e:	e022      	b.n	8023266 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8023220:	687b      	ldr	r3, [r7, #4]
 8023222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023226:	b2db      	uxtb	r3, r3
 8023228:	2b22      	cmp	r3, #34	; 0x22
 802322a:	d10e      	bne.n	802324a <I2C_ITSlaveCplt+0x20a>
    hi2c->State = HAL_I2C_STATE_READY;
 802322c:	687b      	ldr	r3, [r7, #4]
 802322e:	2220      	movs	r2, #32
 8023230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8023234:	687b      	ldr	r3, [r7, #4]
 8023236:	2200      	movs	r2, #0
 8023238:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	2200      	movs	r2, #0
 802323e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8023242:	6878      	ldr	r0, [r7, #4]
 8023244:	f7ff fced 	bl	8022c22 <HAL_I2C_SlaveRxCpltCallback>
}
 8023248:	e00d      	b.n	8023266 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 802324a:	687b      	ldr	r3, [r7, #4]
 802324c:	2220      	movs	r2, #32
 802324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8023252:	687b      	ldr	r3, [r7, #4]
 8023254:	2200      	movs	r2, #0
 8023256:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	2200      	movs	r2, #0
 802325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8023260:	6878      	ldr	r0, [r7, #4]
 8023262:	f7ff fcd4 	bl	8022c0e <HAL_I2C_SlaveTxCpltCallback>
}
 8023266:	bf00      	nop
 8023268:	371c      	adds	r7, #28
 802326a:	46bd      	mov	sp, r7
 802326c:	bd90      	pop	{r4, r7, pc}
 802326e:	bf00      	nop
 8023270:	fe00e800 	.word	0xfe00e800
 8023274:	ffff0000 	.word	0xffff0000

08023278 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8023278:	b580      	push	{r7, lr}
 802327a:	b082      	sub	sp, #8
 802327c:	af00      	add	r7, sp, #0
 802327e:	6078      	str	r0, [r7, #4]
 8023280:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023282:	687b      	ldr	r3, [r7, #4]
 8023284:	4a25      	ldr	r2, [pc, #148]	; (802331c <I2C_ITListenCplt+0xa4>)
 8023286:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	2200      	movs	r2, #0
 802328c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	2220      	movs	r2, #32
 8023292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023296:	687b      	ldr	r3, [r7, #4]
 8023298:	2200      	movs	r2, #0
 802329a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	2200      	movs	r2, #0
 80232a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80232a4:	683b      	ldr	r3, [r7, #0]
 80232a6:	f003 0304 	and.w	r3, r3, #4
 80232aa:	2b00      	cmp	r3, #0
 80232ac:	d022      	beq.n	80232f4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80232ae:	687b      	ldr	r3, [r7, #4]
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232b8:	b2d2      	uxtb	r2, r2
 80232ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80232bc:	687b      	ldr	r3, [r7, #4]
 80232be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232c0:	1c5a      	adds	r2, r3, #1
 80232c2:	687b      	ldr	r3, [r7, #4]
 80232c4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80232ca:	2b00      	cmp	r3, #0
 80232cc:	d012      	beq.n	80232f4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80232ce:	687b      	ldr	r3, [r7, #4]
 80232d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80232d2:	3b01      	subs	r3, #1
 80232d4:	b29a      	uxth	r2, r3
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80232de:	b29b      	uxth	r3, r3
 80232e0:	3b01      	subs	r3, #1
 80232e2:	b29a      	uxth	r2, r3
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80232e8:	687b      	ldr	r3, [r7, #4]
 80232ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80232ec:	f043 0204 	orr.w	r2, r3, #4
 80232f0:	687b      	ldr	r3, [r7, #4]
 80232f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80232f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80232f8:	6878      	ldr	r0, [r7, #4]
 80232fa:	f000 f96a 	bl	80235d2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80232fe:	687b      	ldr	r3, [r7, #4]
 8023300:	681b      	ldr	r3, [r3, #0]
 8023302:	2210      	movs	r2, #16
 8023304:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8023306:	687b      	ldr	r3, [r7, #4]
 8023308:	2200      	movs	r2, #0
 802330a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 802330e:	6878      	ldr	r0, [r7, #4]
 8023310:	f7ff fc9f 	bl	8022c52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8023314:	bf00      	nop
 8023316:	3708      	adds	r7, #8
 8023318:	46bd      	mov	sp, r7
 802331a:	bd80      	pop	{r7, pc}
 802331c:	ffff0000 	.word	0xffff0000

08023320 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8023320:	b580      	push	{r7, lr}
 8023322:	b084      	sub	sp, #16
 8023324:	af00      	add	r7, sp, #0
 8023326:	6078      	str	r0, [r7, #4]
 8023328:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802332a:	687b      	ldr	r3, [r7, #4]
 802332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023330:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	2200      	movs	r2, #0
 8023336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802333a:	687b      	ldr	r3, [r7, #4]
 802333c:	4a6d      	ldr	r2, [pc, #436]	; (80234f4 <I2C_ITError+0x1d4>)
 802333e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	2200      	movs	r2, #0
 8023344:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802334a:	683b      	ldr	r3, [r7, #0]
 802334c:	431a      	orrs	r2, r3
 802334e:	687b      	ldr	r3, [r7, #4]
 8023350:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8023352:	7bfb      	ldrb	r3, [r7, #15]
 8023354:	2b28      	cmp	r3, #40	; 0x28
 8023356:	d005      	beq.n	8023364 <I2C_ITError+0x44>
 8023358:	7bfb      	ldrb	r3, [r7, #15]
 802335a:	2b29      	cmp	r3, #41	; 0x29
 802335c:	d002      	beq.n	8023364 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 802335e:	7bfb      	ldrb	r3, [r7, #15]
 8023360:	2b2a      	cmp	r3, #42	; 0x2a
 8023362:	d10b      	bne.n	802337c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8023364:	2103      	movs	r1, #3
 8023366:	6878      	ldr	r0, [r7, #4]
 8023368:	f000 f933 	bl	80235d2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802336c:	687b      	ldr	r3, [r7, #4]
 802336e:	2228      	movs	r2, #40	; 0x28
 8023370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8023374:	687b      	ldr	r3, [r7, #4]
 8023376:	4a60      	ldr	r2, [pc, #384]	; (80234f8 <I2C_ITError+0x1d8>)
 8023378:	635a      	str	r2, [r3, #52]	; 0x34
 802337a:	e030      	b.n	80233de <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802337c:	f248 0103 	movw	r1, #32771	; 0x8003
 8023380:	6878      	ldr	r0, [r7, #4]
 8023382:	f000 f926 	bl	80235d2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8023386:	6878      	ldr	r0, [r7, #4]
 8023388:	f000 f8e1 	bl	802354e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023392:	b2db      	uxtb	r3, r3
 8023394:	2b60      	cmp	r3, #96	; 0x60
 8023396:	d01f      	beq.n	80233d8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	2220      	movs	r2, #32
 802339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80233a0:	687b      	ldr	r3, [r7, #4]
 80233a2:	681b      	ldr	r3, [r3, #0]
 80233a4:	699b      	ldr	r3, [r3, #24]
 80233a6:	f003 0320 	and.w	r3, r3, #32
 80233aa:	2b20      	cmp	r3, #32
 80233ac:	d114      	bne.n	80233d8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80233ae:	687b      	ldr	r3, [r7, #4]
 80233b0:	681b      	ldr	r3, [r3, #0]
 80233b2:	699b      	ldr	r3, [r3, #24]
 80233b4:	f003 0310 	and.w	r3, r3, #16
 80233b8:	2b10      	cmp	r3, #16
 80233ba:	d109      	bne.n	80233d0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80233bc:	687b      	ldr	r3, [r7, #4]
 80233be:	681b      	ldr	r3, [r3, #0]
 80233c0:	2210      	movs	r2, #16
 80233c2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80233c8:	f043 0204 	orr.w	r2, r3, #4
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	681b      	ldr	r3, [r3, #0]
 80233d4:	2220      	movs	r2, #32
 80233d6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80233d8:	687b      	ldr	r3, [r7, #4]
 80233da:	2200      	movs	r2, #0
 80233dc:	635a      	str	r2, [r3, #52]	; 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233e8:	2b00      	cmp	r3, #0
 80233ea:	d039      	beq.n	8023460 <I2C_ITError+0x140>
 80233ec:	68bb      	ldr	r3, [r7, #8]
 80233ee:	2b11      	cmp	r3, #17
 80233f0:	d002      	beq.n	80233f8 <I2C_ITError+0xd8>
 80233f2:	68bb      	ldr	r3, [r7, #8]
 80233f4:	2b21      	cmp	r3, #33	; 0x21
 80233f6:	d133      	bne.n	8023460 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8023406:	d107      	bne.n	8023418 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8023408:	687b      	ldr	r3, [r7, #4]
 802340a:	681b      	ldr	r3, [r3, #0]
 802340c:	681a      	ldr	r2, [r3, #0]
 802340e:	687b      	ldr	r3, [r7, #4]
 8023410:	681b      	ldr	r3, [r3, #0]
 8023412:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8023416:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802341c:	4618      	mov	r0, r3
 802341e:	f7ff f974 	bl	802270a <HAL_DMA_GetState>
 8023422:	4603      	mov	r3, r0
 8023424:	2b01      	cmp	r3, #1
 8023426:	d017      	beq.n	8023458 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802342c:	4a33      	ldr	r2, [pc, #204]	; (80234fc <I2C_ITError+0x1dc>)
 802342e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8023430:	687b      	ldr	r3, [r7, #4]
 8023432:	2200      	movs	r2, #0
 8023434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802343c:	4618      	mov	r0, r3
 802343e:	f7ff f93b 	bl	80226b8 <HAL_DMA_Abort_IT>
 8023442:	4603      	mov	r3, r0
 8023444:	2b00      	cmp	r3, #0
 8023446:	d04d      	beq.n	80234e4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8023448:	687b      	ldr	r3, [r7, #4]
 802344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802344c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802344e:	687a      	ldr	r2, [r7, #4]
 8023450:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8023452:	4610      	mov	r0, r2
 8023454:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8023456:	e045      	b.n	80234e4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8023458:	6878      	ldr	r0, [r7, #4]
 802345a:	f000 f851 	bl	8023500 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802345e:	e041      	b.n	80234e4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023464:	2b00      	cmp	r3, #0
 8023466:	d039      	beq.n	80234dc <I2C_ITError+0x1bc>
 8023468:	68bb      	ldr	r3, [r7, #8]
 802346a:	2b12      	cmp	r3, #18
 802346c:	d002      	beq.n	8023474 <I2C_ITError+0x154>
 802346e:	68bb      	ldr	r3, [r7, #8]
 8023470:	2b22      	cmp	r3, #34	; 0x22
 8023472:	d133      	bne.n	80234dc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	681b      	ldr	r3, [r3, #0]
 8023478:	681b      	ldr	r3, [r3, #0]
 802347a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802347e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023482:	d107      	bne.n	8023494 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	681b      	ldr	r3, [r3, #0]
 8023488:	681a      	ldr	r2, [r3, #0]
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	681b      	ldr	r3, [r3, #0]
 802348e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8023492:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023498:	4618      	mov	r0, r3
 802349a:	f7ff f936 	bl	802270a <HAL_DMA_GetState>
 802349e:	4603      	mov	r3, r0
 80234a0:	2b01      	cmp	r3, #1
 80234a2:	d017      	beq.n	80234d4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80234a8:	4a14      	ldr	r2, [pc, #80]	; (80234fc <I2C_ITError+0x1dc>)
 80234aa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	2200      	movs	r2, #0
 80234b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80234b4:	687b      	ldr	r3, [r7, #4]
 80234b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80234b8:	4618      	mov	r0, r3
 80234ba:	f7ff f8fd 	bl	80226b8 <HAL_DMA_Abort_IT>
 80234be:	4603      	mov	r3, r0
 80234c0:	2b00      	cmp	r3, #0
 80234c2:	d011      	beq.n	80234e8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80234c4:	687b      	ldr	r3, [r7, #4]
 80234c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80234c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80234ca:	687a      	ldr	r2, [r7, #4]
 80234cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80234ce:	4610      	mov	r0, r2
 80234d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80234d2:	e009      	b.n	80234e8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80234d4:	6878      	ldr	r0, [r7, #4]
 80234d6:	f000 f813 	bl	8023500 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80234da:	e005      	b.n	80234e8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80234dc:	6878      	ldr	r0, [r7, #4]
 80234de:	f000 f80f 	bl	8023500 <I2C_TreatErrorCallback>
  }
}
 80234e2:	e002      	b.n	80234ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80234e4:	bf00      	nop
 80234e6:	e000      	b.n	80234ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80234e8:	bf00      	nop
}
 80234ea:	bf00      	nop
 80234ec:	3710      	adds	r7, #16
 80234ee:	46bd      	mov	sp, r7
 80234f0:	bd80      	pop	{r7, pc}
 80234f2:	bf00      	nop
 80234f4:	ffff0000 	.word	0xffff0000
 80234f8:	08022c8f 	.word	0x08022c8f
 80234fc:	08023597 	.word	0x08023597

08023500 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8023500:	b580      	push	{r7, lr}
 8023502:	b082      	sub	sp, #8
 8023504:	af00      	add	r7, sp, #0
 8023506:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8023508:	687b      	ldr	r3, [r7, #4]
 802350a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802350e:	b2db      	uxtb	r3, r3
 8023510:	2b60      	cmp	r3, #96	; 0x60
 8023512:	d10e      	bne.n	8023532 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	2220      	movs	r2, #32
 8023518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	2200      	movs	r2, #0
 8023520:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	2200      	movs	r2, #0
 8023526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802352a:	6878      	ldr	r0, [r7, #4]
 802352c:	f7ff fba5 	bl	8022c7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8023530:	e009      	b.n	8023546 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8023532:	687b      	ldr	r3, [r7, #4]
 8023534:	2200      	movs	r2, #0
 8023536:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	2200      	movs	r2, #0
 802353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8023540:	6878      	ldr	r0, [r7, #4]
 8023542:	f7ff fb90 	bl	8022c66 <HAL_I2C_ErrorCallback>
}
 8023546:	bf00      	nop
 8023548:	3708      	adds	r7, #8
 802354a:	46bd      	mov	sp, r7
 802354c:	bd80      	pop	{r7, pc}

0802354e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 802354e:	b480      	push	{r7}
 8023550:	b083      	sub	sp, #12
 8023552:	af00      	add	r7, sp, #0
 8023554:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	681b      	ldr	r3, [r3, #0]
 802355a:	699b      	ldr	r3, [r3, #24]
 802355c:	f003 0302 	and.w	r3, r3, #2
 8023560:	2b02      	cmp	r3, #2
 8023562:	d103      	bne.n	802356c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8023564:	687b      	ldr	r3, [r7, #4]
 8023566:	681b      	ldr	r3, [r3, #0]
 8023568:	2200      	movs	r2, #0
 802356a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802356c:	687b      	ldr	r3, [r7, #4]
 802356e:	681b      	ldr	r3, [r3, #0]
 8023570:	699b      	ldr	r3, [r3, #24]
 8023572:	f003 0301 	and.w	r3, r3, #1
 8023576:	2b01      	cmp	r3, #1
 8023578:	d007      	beq.n	802358a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	681b      	ldr	r3, [r3, #0]
 802357e:	699a      	ldr	r2, [r3, #24]
 8023580:	687b      	ldr	r3, [r7, #4]
 8023582:	681b      	ldr	r3, [r3, #0]
 8023584:	f042 0201 	orr.w	r2, r2, #1
 8023588:	619a      	str	r2, [r3, #24]
  }
}
 802358a:	bf00      	nop
 802358c:	370c      	adds	r7, #12
 802358e:	46bd      	mov	sp, r7
 8023590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023594:	4770      	bx	lr

08023596 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8023596:	b580      	push	{r7, lr}
 8023598:	b084      	sub	sp, #16
 802359a:	af00      	add	r7, sp, #0
 802359c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80235a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80235a4:	68fb      	ldr	r3, [r7, #12]
 80235a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80235a8:	2b00      	cmp	r3, #0
 80235aa:	d003      	beq.n	80235b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80235ac:	68fb      	ldr	r3, [r7, #12]
 80235ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80235b0:	2200      	movs	r2, #0
 80235b2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  if (hi2c->hdmarx != NULL)
 80235b4:	68fb      	ldr	r3, [r7, #12]
 80235b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80235b8:	2b00      	cmp	r3, #0
 80235ba:	d003      	beq.n	80235c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80235bc:	68fb      	ldr	r3, [r7, #12]
 80235be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80235c0:	2200      	movs	r2, #0
 80235c2:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 80235c4:	68f8      	ldr	r0, [r7, #12]
 80235c6:	f7ff ff9b 	bl	8023500 <I2C_TreatErrorCallback>
}
 80235ca:	bf00      	nop
 80235cc:	3710      	adds	r7, #16
 80235ce:	46bd      	mov	sp, r7
 80235d0:	bd80      	pop	{r7, pc}

080235d2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80235d2:	b480      	push	{r7}
 80235d4:	b085      	sub	sp, #20
 80235d6:	af00      	add	r7, sp, #0
 80235d8:	6078      	str	r0, [r7, #4]
 80235da:	460b      	mov	r3, r1
 80235dc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80235de:	2300      	movs	r3, #0
 80235e0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80235e2:	887b      	ldrh	r3, [r7, #2]
 80235e4:	f003 0301 	and.w	r3, r3, #1
 80235e8:	2b00      	cmp	r3, #0
 80235ea:	d00f      	beq.n	802360c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80235ec:	68fb      	ldr	r3, [r7, #12]
 80235ee:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80235f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80235fa:	b2db      	uxtb	r3, r3
 80235fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8023600:	2b28      	cmp	r3, #40	; 0x28
 8023602:	d003      	beq.n	802360c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8023604:	68fb      	ldr	r3, [r7, #12]
 8023606:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802360a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 802360c:	887b      	ldrh	r3, [r7, #2]
 802360e:	f003 0302 	and.w	r3, r3, #2
 8023612:	2b00      	cmp	r3, #0
 8023614:	d00f      	beq.n	8023636 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8023616:	68fb      	ldr	r3, [r7, #12]
 8023618:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 802361c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023624:	b2db      	uxtb	r3, r3
 8023626:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802362a:	2b28      	cmp	r3, #40	; 0x28
 802362c:	d003      	beq.n	8023636 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802362e:	68fb      	ldr	r3, [r7, #12]
 8023630:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8023634:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8023636:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802363a:	2b00      	cmp	r3, #0
 802363c:	da03      	bge.n	8023646 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802363e:	68fb      	ldr	r3, [r7, #12]
 8023640:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8023644:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8023646:	887b      	ldrh	r3, [r7, #2]
 8023648:	2b10      	cmp	r3, #16
 802364a:	d103      	bne.n	8023654 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 802364c:	68fb      	ldr	r3, [r7, #12]
 802364e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8023652:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8023654:	887b      	ldrh	r3, [r7, #2]
 8023656:	2b20      	cmp	r3, #32
 8023658:	d103      	bne.n	8023662 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 802365a:	68fb      	ldr	r3, [r7, #12]
 802365c:	f043 0320 	orr.w	r3, r3, #32
 8023660:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8023662:	887b      	ldrh	r3, [r7, #2]
 8023664:	2b40      	cmp	r3, #64	; 0x40
 8023666:	d103      	bne.n	8023670 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8023668:	68fb      	ldr	r3, [r7, #12]
 802366a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802366e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8023670:	687b      	ldr	r3, [r7, #4]
 8023672:	681b      	ldr	r3, [r3, #0]
 8023674:	6819      	ldr	r1, [r3, #0]
 8023676:	68fb      	ldr	r3, [r7, #12]
 8023678:	43da      	mvns	r2, r3
 802367a:	687b      	ldr	r3, [r7, #4]
 802367c:	681b      	ldr	r3, [r3, #0]
 802367e:	400a      	ands	r2, r1
 8023680:	601a      	str	r2, [r3, #0]
}
 8023682:	bf00      	nop
 8023684:	3714      	adds	r7, #20
 8023686:	46bd      	mov	sp, r7
 8023688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802368c:	4770      	bx	lr
	...

08023690 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8023690:	b480      	push	{r7}
 8023692:	b085      	sub	sp, #20
 8023694:	af00      	add	r7, sp, #0
 8023696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023698:	2300      	movs	r3, #0
 802369a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 802369c:	4b0b      	ldr	r3, [pc, #44]	; (80236cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	f003 0301 	and.w	r3, r3, #1
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	d002      	beq.n	80236ae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80236a8:	2301      	movs	r3, #1
 80236aa:	73fb      	strb	r3, [r7, #15]
 80236ac:	e007      	b.n	80236be <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80236ae:	4b07      	ldr	r3, [pc, #28]	; (80236cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80236b0:	681b      	ldr	r3, [r3, #0]
 80236b2:	f023 0204 	bic.w	r2, r3, #4
 80236b6:	4905      	ldr	r1, [pc, #20]	; (80236cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	4313      	orrs	r3, r2
 80236bc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80236be:	7bfb      	ldrb	r3, [r7, #15]
}
 80236c0:	4618      	mov	r0, r3
 80236c2:	3714      	adds	r7, #20
 80236c4:	46bd      	mov	sp, r7
 80236c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236ca:	4770      	bx	lr
 80236cc:	40030400 	.word	0x40030400

080236d0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80236d0:	b480      	push	{r7}
 80236d2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80236d4:	4b05      	ldr	r3, [pc, #20]	; (80236ec <HAL_ICACHE_Enable+0x1c>)
 80236d6:	681b      	ldr	r3, [r3, #0]
 80236d8:	4a04      	ldr	r2, [pc, #16]	; (80236ec <HAL_ICACHE_Enable+0x1c>)
 80236da:	f043 0301 	orr.w	r3, r3, #1
 80236de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80236e0:	2300      	movs	r3, #0
}
 80236e2:	4618      	mov	r0, r3
 80236e4:	46bd      	mov	sp, r7
 80236e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236ea:	4770      	bx	lr
 80236ec:	40030400 	.word	0x40030400

080236f0 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 80236f0:	b580      	push	{r7, lr}
 80236f2:	b082      	sub	sp, #8
 80236f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80236f6:	2300      	movs	r3, #0
 80236f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 80236fa:	4b14      	ldr	r3, [pc, #80]	; (802374c <HAL_ICACHE_Disable+0x5c>)
 80236fc:	2202      	movs	r2, #2
 80236fe:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8023700:	4b12      	ldr	r3, [pc, #72]	; (802374c <HAL_ICACHE_Disable+0x5c>)
 8023702:	681b      	ldr	r3, [r3, #0]
 8023704:	4a11      	ldr	r2, [pc, #68]	; (802374c <HAL_ICACHE_Disable+0x5c>)
 8023706:	f023 0301 	bic.w	r3, r3, #1
 802370a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 802370c:	f7fe feb6 	bl	802247c <HAL_GetTick>
 8023710:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8023712:	e00f      	b.n	8023734 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8023714:	f7fe feb2 	bl	802247c <HAL_GetTick>
 8023718:	4602      	mov	r2, r0
 802371a:	683b      	ldr	r3, [r7, #0]
 802371c:	1ad3      	subs	r3, r2, r3
 802371e:	2b01      	cmp	r3, #1
 8023720:	d908      	bls.n	8023734 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8023722:	4b0a      	ldr	r3, [pc, #40]	; (802374c <HAL_ICACHE_Disable+0x5c>)
 8023724:	681b      	ldr	r3, [r3, #0]
 8023726:	f003 0301 	and.w	r3, r3, #1
 802372a:	2b00      	cmp	r3, #0
 802372c:	d002      	beq.n	8023734 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 802372e:	2303      	movs	r3, #3
 8023730:	71fb      	strb	r3, [r7, #7]
        break;
 8023732:	e005      	b.n	8023740 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8023734:	4b05      	ldr	r3, [pc, #20]	; (802374c <HAL_ICACHE_Disable+0x5c>)
 8023736:	681b      	ldr	r3, [r3, #0]
 8023738:	f003 0301 	and.w	r3, r3, #1
 802373c:	2b00      	cmp	r3, #0
 802373e:	d1e9      	bne.n	8023714 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8023740:	79fb      	ldrb	r3, [r7, #7]
}
 8023742:	4618      	mov	r0, r3
 8023744:	3708      	adds	r7, #8
 8023746:	46bd      	mov	sp, r7
 8023748:	bd80      	pop	{r7, pc}
 802374a:	bf00      	nop
 802374c:	40030400 	.word	0x40030400

08023750 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8023750:	b480      	push	{r7}
 8023752:	b087      	sub	sp, #28
 8023754:	af00      	add	r7, sp, #0
 8023756:	6078      	str	r0, [r7, #4]
 8023758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802375a:	2300      	movs	r3, #0
 802375c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 802375e:	4b22      	ldr	r3, [pc, #136]	; (80237e8 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8023760:	681b      	ldr	r3, [r3, #0]
 8023762:	f003 0301 	and.w	r3, r3, #1
 8023766:	2b00      	cmp	r3, #0
 8023768:	d002      	beq.n	8023770 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 802376a:	2301      	movs	r3, #1
 802376c:	75fb      	strb	r3, [r7, #23]
 802376e:	e034      	b.n	80237da <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	009a      	lsls	r2, r3, #2
 8023774:	4b1d      	ldr	r3, [pc, #116]	; (80237ec <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8023776:	4413      	add	r3, r2
 8023778:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 802377a:	693b      	ldr	r3, [r7, #16]
 802377c:	681b      	ldr	r3, [r3, #0]
 802377e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023782:	2b00      	cmp	r3, #0
 8023784:	d002      	beq.n	802378c <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8023786:	2301      	movs	r3, #1
 8023788:	75fb      	strb	r3, [r7, #23]
 802378a:	e026      	b.n	80237da <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 802378c:	683b      	ldr	r3, [r7, #0]
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8023792:	683b      	ldr	r3, [r7, #0]
 8023794:	689b      	ldr	r3, [r3, #8]
 8023796:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8023798:	4013      	ands	r3, r2
 802379a:	b2db      	uxtb	r3, r3
 802379c:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 802379e:	683b      	ldr	r3, [r7, #0]
 80237a0:	685b      	ldr	r3, [r3, #4]
 80237a2:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 80237a4:	683b      	ldr	r3, [r7, #0]
 80237a6:	689b      	ldr	r3, [r3, #8]
 80237a8:	425b      	negs	r3, r3
 80237aa:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 80237ac:	401a      	ands	r2, r3
 80237ae:	4b10      	ldr	r3, [pc, #64]	; (80237f0 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 80237b0:	4013      	ands	r3, r2
 80237b2:	68fa      	ldr	r2, [r7, #12]
 80237b4:	4313      	orrs	r3, r2
 80237b6:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80237b8:	683b      	ldr	r3, [r7, #0]
 80237ba:	689b      	ldr	r3, [r3, #8]
 80237bc:	025a      	lsls	r2, r3, #9
 80237be:	683b      	ldr	r3, [r7, #0]
 80237c0:	68db      	ldr	r3, [r3, #12]
 80237c2:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 80237c4:	683b      	ldr	r3, [r7, #0]
 80237c6:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 80237c8:	4313      	orrs	r3, r2
 80237ca:	68fa      	ldr	r2, [r7, #12]
 80237cc:	4313      	orrs	r3, r2
 80237ce:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 80237d0:	68fb      	ldr	r3, [r7, #12]
 80237d2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80237d6:	693b      	ldr	r3, [r7, #16]
 80237d8:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80237da:	7dfb      	ldrb	r3, [r7, #23]
}
 80237dc:	4618      	mov	r0, r3
 80237de:	371c      	adds	r7, #28
 80237e0:	46bd      	mov	sp, r7
 80237e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237e6:	4770      	bx	lr
 80237e8:	40030400 	.word	0x40030400
 80237ec:	40030420 	.word	0x40030420
 80237f0:	07ff0000 	.word	0x07ff0000

080237f4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80237f4:	b480      	push	{r7}
 80237f6:	b085      	sub	sp, #20
 80237f8:	af00      	add	r7, sp, #0
 80237fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80237fc:	4b39      	ldr	r3, [pc, #228]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80237fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023800:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8023804:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8023806:	68ba      	ldr	r2, [r7, #8]
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	429a      	cmp	r2, r3
 802380c:	d10b      	bne.n	8023826 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 802380e:	687b      	ldr	r3, [r7, #4]
 8023810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023814:	d905      	bls.n	8023822 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8023816:	4b33      	ldr	r3, [pc, #204]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8023818:	68db      	ldr	r3, [r3, #12]
 802381a:	4a32      	ldr	r2, [pc, #200]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 802381c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023820:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8023822:	2300      	movs	r3, #0
 8023824:	e057      	b.n	80238d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8023826:	687b      	ldr	r3, [r7, #4]
 8023828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802382c:	d90a      	bls.n	8023844 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 802382e:	4b2d      	ldr	r3, [pc, #180]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8023830:	68db      	ldr	r3, [r3, #12]
 8023832:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8023836:	687b      	ldr	r3, [r7, #4]
 8023838:	4313      	orrs	r3, r2
 802383a:	4a2a      	ldr	r2, [pc, #168]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 802383c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023840:	60d3      	str	r3, [r2, #12]
 8023842:	e007      	b.n	8023854 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8023844:	4b27      	ldr	r3, [pc, #156]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8023846:	68db      	ldr	r3, [r3, #12]
 8023848:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 802384c:	4925      	ldr	r1, [pc, #148]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 802384e:	687b      	ldr	r3, [r7, #4]
 8023850:	4313      	orrs	r3, r2
 8023852:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8023854:	4b24      	ldr	r3, [pc, #144]	; (80238e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8023856:	681b      	ldr	r3, [r3, #0]
 8023858:	4a24      	ldr	r2, [pc, #144]	; (80238ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 802385a:	fba2 2303 	umull	r2, r3, r2, r3
 802385e:	099b      	lsrs	r3, r3, #6
 8023860:	2232      	movs	r2, #50	; 0x32
 8023862:	fb02 f303 	mul.w	r3, r2, r3
 8023866:	4a21      	ldr	r2, [pc, #132]	; (80238ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8023868:	fba2 2303 	umull	r2, r3, r2, r3
 802386c:	099b      	lsrs	r3, r3, #6
 802386e:	3301      	adds	r3, #1
 8023870:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8023872:	e002      	b.n	802387a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8023874:	68fb      	ldr	r3, [r7, #12]
 8023876:	3b01      	subs	r3, #1
 8023878:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 802387a:	4b1a      	ldr	r3, [pc, #104]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 802387c:	68db      	ldr	r3, [r3, #12]
 802387e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023882:	2b00      	cmp	r3, #0
 8023884:	d102      	bne.n	802388c <HAL_PWREx_ControlVoltageScaling+0x98>
 8023886:	68fb      	ldr	r3, [r7, #12]
 8023888:	2b00      	cmp	r3, #0
 802388a:	d1f3      	bne.n	8023874 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 802388c:	68fb      	ldr	r3, [r7, #12]
 802388e:	2b00      	cmp	r3, #0
 8023890:	d01b      	beq.n	80238ca <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8023892:	4b15      	ldr	r3, [pc, #84]	; (80238e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8023894:	681b      	ldr	r3, [r3, #0]
 8023896:	4a15      	ldr	r2, [pc, #84]	; (80238ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8023898:	fba2 2303 	umull	r2, r3, r2, r3
 802389c:	099b      	lsrs	r3, r3, #6
 802389e:	2232      	movs	r2, #50	; 0x32
 80238a0:	fb02 f303 	mul.w	r3, r2, r3
 80238a4:	4a11      	ldr	r2, [pc, #68]	; (80238ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80238a6:	fba2 2303 	umull	r2, r3, r2, r3
 80238aa:	099b      	lsrs	r3, r3, #6
 80238ac:	3301      	adds	r3, #1
 80238ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80238b0:	e002      	b.n	80238b8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	3b01      	subs	r3, #1
 80238b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80238b8:	4b0a      	ldr	r3, [pc, #40]	; (80238e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80238ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80238bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	d102      	bne.n	80238ca <HAL_PWREx_ControlVoltageScaling+0xd6>
 80238c4:	68fb      	ldr	r3, [r7, #12]
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d1f3      	bne.n	80238b2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	2b00      	cmp	r3, #0
 80238ce:	d101      	bne.n	80238d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80238d0:	2303      	movs	r3, #3
 80238d2:	e000      	b.n	80238d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80238d4:	2300      	movs	r3, #0
}
 80238d6:	4618      	mov	r0, r3
 80238d8:	3714      	adds	r7, #20
 80238da:	46bd      	mov	sp, r7
 80238dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238e0:	4770      	bx	lr
 80238e2:	bf00      	nop
 80238e4:	46020800 	.word	0x46020800
 80238e8:	20000380 	.word	0x20000380
 80238ec:	10624dd3 	.word	0x10624dd3

080238f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80238f0:	b480      	push	{r7}
 80238f2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80238f4:	4b04      	ldr	r3, [pc, #16]	; (8023908 <HAL_PWREx_GetVoltageRange+0x18>)
 80238f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80238f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80238fc:	4618      	mov	r0, r3
 80238fe:	46bd      	mov	sp, r7
 8023900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023904:	4770      	bx	lr
 8023906:	bf00      	nop
 8023908:	46020800 	.word	0x46020800

0802390c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 802390c:	b480      	push	{r7}
 802390e:	b085      	sub	sp, #20
 8023910:	af00      	add	r7, sp, #0
 8023912:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8023914:	4b22      	ldr	r3, [pc, #136]	; (80239a0 <HAL_PWREx_ConfigSupply+0x94>)
 8023916:	681b      	ldr	r3, [r3, #0]
 8023918:	4a22      	ldr	r2, [pc, #136]	; (80239a4 <HAL_PWREx_ConfigSupply+0x98>)
 802391a:	fba2 2303 	umull	r2, r3, r2, r3
 802391e:	099b      	lsrs	r3, r3, #6
 8023920:	2232      	movs	r2, #50	; 0x32
 8023922:	fb02 f303 	mul.w	r3, r2, r3
 8023926:	4a1f      	ldr	r2, [pc, #124]	; (80239a4 <HAL_PWREx_ConfigSupply+0x98>)
 8023928:	fba2 2303 	umull	r2, r3, r2, r3
 802392c:	099b      	lsrs	r3, r3, #6
 802392e:	3301      	adds	r3, #1
 8023930:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8023932:	687b      	ldr	r3, [r7, #4]
 8023934:	2b00      	cmp	r3, #0
 8023936:	d113      	bne.n	8023960 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8023938:	4b1b      	ldr	r3, [pc, #108]	; (80239a8 <HAL_PWREx_ConfigSupply+0x9c>)
 802393a:	689b      	ldr	r3, [r3, #8]
 802393c:	4a1a      	ldr	r2, [pc, #104]	; (80239a8 <HAL_PWREx_ConfigSupply+0x9c>)
 802393e:	f023 0302 	bic.w	r3, r3, #2
 8023942:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8023944:	e002      	b.n	802394c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8023946:	68fb      	ldr	r3, [r7, #12]
 8023948:	3b01      	subs	r3, #1
 802394a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 802394c:	4b16      	ldr	r3, [pc, #88]	; (80239a8 <HAL_PWREx_ConfigSupply+0x9c>)
 802394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023950:	f003 0302 	and.w	r3, r3, #2
 8023954:	2b02      	cmp	r3, #2
 8023956:	d116      	bne.n	8023986 <HAL_PWREx_ConfigSupply+0x7a>
 8023958:	68fb      	ldr	r3, [r7, #12]
 802395a:	2b00      	cmp	r3, #0
 802395c:	d1f3      	bne.n	8023946 <HAL_PWREx_ConfigSupply+0x3a>
 802395e:	e012      	b.n	8023986 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8023960:	4b11      	ldr	r3, [pc, #68]	; (80239a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8023962:	689b      	ldr	r3, [r3, #8]
 8023964:	4a10      	ldr	r2, [pc, #64]	; (80239a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8023966:	f043 0302 	orr.w	r3, r3, #2
 802396a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 802396c:	e002      	b.n	8023974 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 802396e:	68fb      	ldr	r3, [r7, #12]
 8023970:	3b01      	subs	r3, #1
 8023972:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8023974:	4b0c      	ldr	r3, [pc, #48]	; (80239a8 <HAL_PWREx_ConfigSupply+0x9c>)
 8023976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023978:	f003 0302 	and.w	r3, r3, #2
 802397c:	2b00      	cmp	r3, #0
 802397e:	d102      	bne.n	8023986 <HAL_PWREx_ConfigSupply+0x7a>
 8023980:	68fb      	ldr	r3, [r7, #12]
 8023982:	2b00      	cmp	r3, #0
 8023984:	d1f3      	bne.n	802396e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8023986:	68fb      	ldr	r3, [r7, #12]
 8023988:	2b00      	cmp	r3, #0
 802398a:	d101      	bne.n	8023990 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 802398c:	2303      	movs	r3, #3
 802398e:	e000      	b.n	8023992 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8023990:	2300      	movs	r3, #0
}
 8023992:	4618      	mov	r0, r3
 8023994:	3714      	adds	r7, #20
 8023996:	46bd      	mov	sp, r7
 8023998:	f85d 7b04 	ldr.w	r7, [sp], #4
 802399c:	4770      	bx	lr
 802399e:	bf00      	nop
 80239a0:	20000380 	.word	0x20000380
 80239a4:	10624dd3 	.word	0x10624dd3
 80239a8:	46020800 	.word	0x46020800

080239ac <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80239ac:	b480      	push	{r7}
 80239ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80239b0:	4b05      	ldr	r3, [pc, #20]	; (80239c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80239b2:	691b      	ldr	r3, [r3, #16]
 80239b4:	4a04      	ldr	r2, [pc, #16]	; (80239c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80239b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80239ba:	6113      	str	r3, [r2, #16]
}
 80239bc:	bf00      	nop
 80239be:	46bd      	mov	sp, r7
 80239c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239c4:	4770      	bx	lr
 80239c6:	bf00      	nop
 80239c8:	46020800 	.word	0x46020800

080239cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80239cc:	b480      	push	{r7}
 80239ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80239d0:	4b05      	ldr	r3, [pc, #20]	; (80239e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80239d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80239d4:	4a04      	ldr	r2, [pc, #16]	; (80239e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80239d6:	f043 0301 	orr.w	r3, r3, #1
 80239da:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80239dc:	bf00      	nop
 80239de:	46bd      	mov	sp, r7
 80239e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239e4:	4770      	bx	lr
 80239e6:	bf00      	nop
 80239e8:	46020800 	.word	0x46020800

080239ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80239ec:	b580      	push	{r7, lr}
 80239ee:	b08e      	sub	sp, #56	; 0x38
 80239f0:	af00      	add	r7, sp, #0
 80239f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80239f4:	2300      	movs	r3, #0
 80239f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	2b00      	cmp	r3, #0
 80239fe:	d102      	bne.n	8023a06 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8023a00:	2301      	movs	r3, #1
 8023a02:	f000 bec8 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8023a06:	4b99      	ldr	r3, [pc, #612]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023a08:	69db      	ldr	r3, [r3, #28]
 8023a0a:	f003 030c 	and.w	r3, r3, #12
 8023a0e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8023a10:	4b96      	ldr	r3, [pc, #600]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a14:	f003 0303 	and.w	r3, r3, #3
 8023a18:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	681b      	ldr	r3, [r3, #0]
 8023a1e:	f003 0310 	and.w	r3, r3, #16
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	f000 816c 	beq.w	8023d00 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8023a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a2a:	2b00      	cmp	r3, #0
 8023a2c:	d007      	beq.n	8023a3e <HAL_RCC_OscConfig+0x52>
 8023a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a30:	2b0c      	cmp	r3, #12
 8023a32:	f040 80de 	bne.w	8023bf2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8023a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023a38:	2b01      	cmp	r3, #1
 8023a3a:	f040 80da 	bne.w	8023bf2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	69db      	ldr	r3, [r3, #28]
 8023a42:	2b00      	cmp	r3, #0
 8023a44:	d102      	bne.n	8023a4c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8023a46:	2301      	movs	r3, #1
 8023a48:	f000 bea5 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8023a4c:	687b      	ldr	r3, [r7, #4]
 8023a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023a50:	4b86      	ldr	r3, [pc, #536]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023a52:	689b      	ldr	r3, [r3, #8]
 8023a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8023a58:	2b00      	cmp	r3, #0
 8023a5a:	d004      	beq.n	8023a66 <HAL_RCC_OscConfig+0x7a>
 8023a5c:	4b83      	ldr	r3, [pc, #524]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023a5e:	689b      	ldr	r3, [r3, #8]
 8023a60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8023a64:	e005      	b.n	8023a72 <HAL_RCC_OscConfig+0x86>
 8023a66:	4b81      	ldr	r3, [pc, #516]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8023a6c:	041b      	lsls	r3, r3, #16
 8023a6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8023a72:	4293      	cmp	r3, r2
 8023a74:	d255      	bcs.n	8023b22 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8023a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d10a      	bne.n	8023a92 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023a80:	4618      	mov	r0, r3
 8023a82:	f001 f9fd 	bl	8024e80 <RCC_SetFlashLatencyFromMSIRange>
 8023a86:	4603      	mov	r3, r0
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	d002      	beq.n	8023a92 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8023a8c:	2301      	movs	r3, #1
 8023a8e:	f000 be82 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8023a92:	4b76      	ldr	r3, [pc, #472]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023a94:	689b      	ldr	r3, [r3, #8]
 8023a96:	4a75      	ldr	r2, [pc, #468]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023a98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8023a9c:	6093      	str	r3, [r2, #8]
 8023a9e:	4b73      	ldr	r3, [pc, #460]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023aa0:	689b      	ldr	r3, [r3, #8]
 8023aa2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023aaa:	4970      	ldr	r1, [pc, #448]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023aac:	4313      	orrs	r3, r2
 8023aae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ab4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8023ab8:	d309      	bcc.n	8023ace <HAL_RCC_OscConfig+0xe2>
 8023aba:	4b6c      	ldr	r3, [pc, #432]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023abc:	68db      	ldr	r3, [r3, #12]
 8023abe:	f023 021f 	bic.w	r2, r3, #31
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	6a1b      	ldr	r3, [r3, #32]
 8023ac6:	4969      	ldr	r1, [pc, #420]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023ac8:	4313      	orrs	r3, r2
 8023aca:	60cb      	str	r3, [r1, #12]
 8023acc:	e07e      	b.n	8023bcc <HAL_RCC_OscConfig+0x1e0>
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ad2:	2b00      	cmp	r3, #0
 8023ad4:	da0a      	bge.n	8023aec <HAL_RCC_OscConfig+0x100>
 8023ad6:	4b65      	ldr	r3, [pc, #404]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023ad8:	68db      	ldr	r3, [r3, #12]
 8023ada:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	6a1b      	ldr	r3, [r3, #32]
 8023ae2:	015b      	lsls	r3, r3, #5
 8023ae4:	4961      	ldr	r1, [pc, #388]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023ae6:	4313      	orrs	r3, r2
 8023ae8:	60cb      	str	r3, [r1, #12]
 8023aea:	e06f      	b.n	8023bcc <HAL_RCC_OscConfig+0x1e0>
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023af4:	d30a      	bcc.n	8023b0c <HAL_RCC_OscConfig+0x120>
 8023af6:	4b5d      	ldr	r3, [pc, #372]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023af8:	68db      	ldr	r3, [r3, #12]
 8023afa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	6a1b      	ldr	r3, [r3, #32]
 8023b02:	029b      	lsls	r3, r3, #10
 8023b04:	4959      	ldr	r1, [pc, #356]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b06:	4313      	orrs	r3, r2
 8023b08:	60cb      	str	r3, [r1, #12]
 8023b0a:	e05f      	b.n	8023bcc <HAL_RCC_OscConfig+0x1e0>
 8023b0c:	4b57      	ldr	r3, [pc, #348]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b0e:	68db      	ldr	r3, [r3, #12]
 8023b10:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8023b14:	687b      	ldr	r3, [r7, #4]
 8023b16:	6a1b      	ldr	r3, [r3, #32]
 8023b18:	03db      	lsls	r3, r3, #15
 8023b1a:	4954      	ldr	r1, [pc, #336]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b1c:	4313      	orrs	r3, r2
 8023b1e:	60cb      	str	r3, [r1, #12]
 8023b20:	e054      	b.n	8023bcc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8023b22:	4b52      	ldr	r3, [pc, #328]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b24:	689b      	ldr	r3, [r3, #8]
 8023b26:	4a51      	ldr	r2, [pc, #324]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8023b2c:	6093      	str	r3, [r2, #8]
 8023b2e:	4b4f      	ldr	r3, [pc, #316]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b30:	689b      	ldr	r3, [r3, #8]
 8023b32:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b3a:	494c      	ldr	r1, [pc, #304]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b3c:	4313      	orrs	r3, r2
 8023b3e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b44:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8023b48:	d309      	bcc.n	8023b5e <HAL_RCC_OscConfig+0x172>
 8023b4a:	4b48      	ldr	r3, [pc, #288]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b4c:	68db      	ldr	r3, [r3, #12]
 8023b4e:	f023 021f 	bic.w	r2, r3, #31
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	6a1b      	ldr	r3, [r3, #32]
 8023b56:	4945      	ldr	r1, [pc, #276]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b58:	4313      	orrs	r3, r2
 8023b5a:	60cb      	str	r3, [r1, #12]
 8023b5c:	e028      	b.n	8023bb0 <HAL_RCC_OscConfig+0x1c4>
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b62:	2b00      	cmp	r3, #0
 8023b64:	da0a      	bge.n	8023b7c <HAL_RCC_OscConfig+0x190>
 8023b66:	4b41      	ldr	r3, [pc, #260]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b68:	68db      	ldr	r3, [r3, #12]
 8023b6a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8023b6e:	687b      	ldr	r3, [r7, #4]
 8023b70:	6a1b      	ldr	r3, [r3, #32]
 8023b72:	015b      	lsls	r3, r3, #5
 8023b74:	493d      	ldr	r1, [pc, #244]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b76:	4313      	orrs	r3, r2
 8023b78:	60cb      	str	r3, [r1, #12]
 8023b7a:	e019      	b.n	8023bb0 <HAL_RCC_OscConfig+0x1c4>
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023b84:	d30a      	bcc.n	8023b9c <HAL_RCC_OscConfig+0x1b0>
 8023b86:	4b39      	ldr	r3, [pc, #228]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b88:	68db      	ldr	r3, [r3, #12]
 8023b8a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8023b8e:	687b      	ldr	r3, [r7, #4]
 8023b90:	6a1b      	ldr	r3, [r3, #32]
 8023b92:	029b      	lsls	r3, r3, #10
 8023b94:	4935      	ldr	r1, [pc, #212]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b96:	4313      	orrs	r3, r2
 8023b98:	60cb      	str	r3, [r1, #12]
 8023b9a:	e009      	b.n	8023bb0 <HAL_RCC_OscConfig+0x1c4>
 8023b9c:	4b33      	ldr	r3, [pc, #204]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023b9e:	68db      	ldr	r3, [r3, #12]
 8023ba0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	6a1b      	ldr	r3, [r3, #32]
 8023ba8:	03db      	lsls	r3, r3, #15
 8023baa:	4930      	ldr	r1, [pc, #192]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023bac:	4313      	orrs	r3, r2
 8023bae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8023bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023bb2:	2b00      	cmp	r3, #0
 8023bb4:	d10a      	bne.n	8023bcc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023bba:	4618      	mov	r0, r3
 8023bbc:	f001 f960 	bl	8024e80 <RCC_SetFlashLatencyFromMSIRange>
 8023bc0:	4603      	mov	r3, r0
 8023bc2:	2b00      	cmp	r3, #0
 8023bc4:	d002      	beq.n	8023bcc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8023bc6:	2301      	movs	r3, #1
 8023bc8:	f000 bde5 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8023bcc:	f001 f8de 	bl	8024d8c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8023bd0:	4b27      	ldr	r3, [pc, #156]	; (8023c70 <HAL_RCC_OscConfig+0x284>)
 8023bd2:	681b      	ldr	r3, [r3, #0]
 8023bd4:	4618      	mov	r0, r3
 8023bd6:	f7e1 f901 	bl	8004ddc <HAL_InitTick>
 8023bda:	4603      	mov	r3, r0
 8023bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8023be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023be4:	2b00      	cmp	r3, #0
 8023be6:	f000 808a 	beq.w	8023cfe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8023bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023bee:	f000 bdd2 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8023bf2:	687b      	ldr	r3, [r7, #4]
 8023bf4:	69db      	ldr	r3, [r3, #28]
 8023bf6:	2b00      	cmp	r3, #0
 8023bf8:	d066      	beq.n	8023cc8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8023bfa:	4b1c      	ldr	r3, [pc, #112]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023bfc:	681b      	ldr	r3, [r3, #0]
 8023bfe:	4a1b      	ldr	r2, [pc, #108]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023c00:	f043 0301 	orr.w	r3, r3, #1
 8023c04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8023c06:	f7fe fc39 	bl	802247c <HAL_GetTick>
 8023c0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8023c0c:	e009      	b.n	8023c22 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8023c0e:	f7fe fc35 	bl	802247c <HAL_GetTick>
 8023c12:	4602      	mov	r2, r0
 8023c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023c16:	1ad3      	subs	r3, r2, r3
 8023c18:	2b02      	cmp	r3, #2
 8023c1a:	d902      	bls.n	8023c22 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8023c1c:	2303      	movs	r3, #3
 8023c1e:	f000 bdba 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8023c22:	4b12      	ldr	r3, [pc, #72]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023c24:	681b      	ldr	r3, [r3, #0]
 8023c26:	f003 0304 	and.w	r3, r3, #4
 8023c2a:	2b00      	cmp	r3, #0
 8023c2c:	d0ef      	beq.n	8023c0e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8023c2e:	4b0f      	ldr	r3, [pc, #60]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023c30:	689b      	ldr	r3, [r3, #8]
 8023c32:	4a0e      	ldr	r2, [pc, #56]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8023c38:	6093      	str	r3, [r2, #8]
 8023c3a:	4b0c      	ldr	r3, [pc, #48]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023c3c:	689b      	ldr	r3, [r3, #8]
 8023c3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8023c42:	687b      	ldr	r3, [r7, #4]
 8023c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c46:	4909      	ldr	r1, [pc, #36]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023c48:	4313      	orrs	r3, r2
 8023c4a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8023c54:	d30e      	bcc.n	8023c74 <HAL_RCC_OscConfig+0x288>
 8023c56:	4b05      	ldr	r3, [pc, #20]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023c58:	68db      	ldr	r3, [r3, #12]
 8023c5a:	f023 021f 	bic.w	r2, r3, #31
 8023c5e:	687b      	ldr	r3, [r7, #4]
 8023c60:	6a1b      	ldr	r3, [r3, #32]
 8023c62:	4902      	ldr	r1, [pc, #8]	; (8023c6c <HAL_RCC_OscConfig+0x280>)
 8023c64:	4313      	orrs	r3, r2
 8023c66:	60cb      	str	r3, [r1, #12]
 8023c68:	e04a      	b.n	8023d00 <HAL_RCC_OscConfig+0x314>
 8023c6a:	bf00      	nop
 8023c6c:	46020c00 	.word	0x46020c00
 8023c70:	20000564 	.word	0x20000564
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	da0a      	bge.n	8023c92 <HAL_RCC_OscConfig+0x2a6>
 8023c7c:	4b98      	ldr	r3, [pc, #608]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023c7e:	68db      	ldr	r3, [r3, #12]
 8023c80:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8023c84:	687b      	ldr	r3, [r7, #4]
 8023c86:	6a1b      	ldr	r3, [r3, #32]
 8023c88:	015b      	lsls	r3, r3, #5
 8023c8a:	4995      	ldr	r1, [pc, #596]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023c8c:	4313      	orrs	r3, r2
 8023c8e:	60cb      	str	r3, [r1, #12]
 8023c90:	e036      	b.n	8023d00 <HAL_RCC_OscConfig+0x314>
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023c9a:	d30a      	bcc.n	8023cb2 <HAL_RCC_OscConfig+0x2c6>
 8023c9c:	4b90      	ldr	r3, [pc, #576]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023c9e:	68db      	ldr	r3, [r3, #12]
 8023ca0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	6a1b      	ldr	r3, [r3, #32]
 8023ca8:	029b      	lsls	r3, r3, #10
 8023caa:	498d      	ldr	r1, [pc, #564]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023cac:	4313      	orrs	r3, r2
 8023cae:	60cb      	str	r3, [r1, #12]
 8023cb0:	e026      	b.n	8023d00 <HAL_RCC_OscConfig+0x314>
 8023cb2:	4b8b      	ldr	r3, [pc, #556]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023cb4:	68db      	ldr	r3, [r3, #12]
 8023cb6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8023cba:	687b      	ldr	r3, [r7, #4]
 8023cbc:	6a1b      	ldr	r3, [r3, #32]
 8023cbe:	03db      	lsls	r3, r3, #15
 8023cc0:	4987      	ldr	r1, [pc, #540]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023cc2:	4313      	orrs	r3, r2
 8023cc4:	60cb      	str	r3, [r1, #12]
 8023cc6:	e01b      	b.n	8023d00 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8023cc8:	4b85      	ldr	r3, [pc, #532]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023cca:	681b      	ldr	r3, [r3, #0]
 8023ccc:	4a84      	ldr	r2, [pc, #528]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023cce:	f023 0301 	bic.w	r3, r3, #1
 8023cd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8023cd4:	f7fe fbd2 	bl	802247c <HAL_GetTick>
 8023cd8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8023cda:	e009      	b.n	8023cf0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8023cdc:	f7fe fbce 	bl	802247c <HAL_GetTick>
 8023ce0:	4602      	mov	r2, r0
 8023ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ce4:	1ad3      	subs	r3, r2, r3
 8023ce6:	2b02      	cmp	r3, #2
 8023ce8:	d902      	bls.n	8023cf0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8023cea:	2303      	movs	r3, #3
 8023cec:	f000 bd53 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8023cf0:	4b7b      	ldr	r3, [pc, #492]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023cf2:	681b      	ldr	r3, [r3, #0]
 8023cf4:	f003 0304 	and.w	r3, r3, #4
 8023cf8:	2b00      	cmp	r3, #0
 8023cfa:	d1ef      	bne.n	8023cdc <HAL_RCC_OscConfig+0x2f0>
 8023cfc:	e000      	b.n	8023d00 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8023cfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8023d00:	687b      	ldr	r3, [r7, #4]
 8023d02:	681b      	ldr	r3, [r3, #0]
 8023d04:	f003 0301 	and.w	r3, r3, #1
 8023d08:	2b00      	cmp	r3, #0
 8023d0a:	f000 808b 	beq.w	8023e24 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8023d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d10:	2b08      	cmp	r3, #8
 8023d12:	d005      	beq.n	8023d20 <HAL_RCC_OscConfig+0x334>
 8023d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d16:	2b0c      	cmp	r3, #12
 8023d18:	d109      	bne.n	8023d2e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8023d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d1c:	2b03      	cmp	r3, #3
 8023d1e:	d106      	bne.n	8023d2e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	685b      	ldr	r3, [r3, #4]
 8023d24:	2b00      	cmp	r3, #0
 8023d26:	d17d      	bne.n	8023e24 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8023d28:	2301      	movs	r3, #1
 8023d2a:	f000 bd34 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8023d2e:	687b      	ldr	r3, [r7, #4]
 8023d30:	685b      	ldr	r3, [r3, #4]
 8023d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023d36:	d106      	bne.n	8023d46 <HAL_RCC_OscConfig+0x35a>
 8023d38:	4b69      	ldr	r3, [pc, #420]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d3a:	681b      	ldr	r3, [r3, #0]
 8023d3c:	4a68      	ldr	r2, [pc, #416]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023d42:	6013      	str	r3, [r2, #0]
 8023d44:	e041      	b.n	8023dca <HAL_RCC_OscConfig+0x3de>
 8023d46:	687b      	ldr	r3, [r7, #4]
 8023d48:	685b      	ldr	r3, [r3, #4]
 8023d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023d4e:	d112      	bne.n	8023d76 <HAL_RCC_OscConfig+0x38a>
 8023d50:	4b63      	ldr	r3, [pc, #396]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d52:	681b      	ldr	r3, [r3, #0]
 8023d54:	4a62      	ldr	r2, [pc, #392]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023d5a:	6013      	str	r3, [r2, #0]
 8023d5c:	4b60      	ldr	r3, [pc, #384]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d5e:	681b      	ldr	r3, [r3, #0]
 8023d60:	4a5f      	ldr	r2, [pc, #380]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8023d66:	6013      	str	r3, [r2, #0]
 8023d68:	4b5d      	ldr	r3, [pc, #372]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d6a:	681b      	ldr	r3, [r3, #0]
 8023d6c:	4a5c      	ldr	r2, [pc, #368]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023d72:	6013      	str	r3, [r2, #0]
 8023d74:	e029      	b.n	8023dca <HAL_RCC_OscConfig+0x3de>
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	685b      	ldr	r3, [r3, #4]
 8023d7a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8023d7e:	d112      	bne.n	8023da6 <HAL_RCC_OscConfig+0x3ba>
 8023d80:	4b57      	ldr	r3, [pc, #348]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d82:	681b      	ldr	r3, [r3, #0]
 8023d84:	4a56      	ldr	r2, [pc, #344]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023d8a:	6013      	str	r3, [r2, #0]
 8023d8c:	4b54      	ldr	r3, [pc, #336]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d8e:	681b      	ldr	r3, [r3, #0]
 8023d90:	4a53      	ldr	r2, [pc, #332]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8023d96:	6013      	str	r3, [r2, #0]
 8023d98:	4b51      	ldr	r3, [pc, #324]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d9a:	681b      	ldr	r3, [r3, #0]
 8023d9c:	4a50      	ldr	r2, [pc, #320]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023da2:	6013      	str	r3, [r2, #0]
 8023da4:	e011      	b.n	8023dca <HAL_RCC_OscConfig+0x3de>
 8023da6:	4b4e      	ldr	r3, [pc, #312]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023da8:	681b      	ldr	r3, [r3, #0]
 8023daa:	4a4d      	ldr	r2, [pc, #308]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8023db0:	6013      	str	r3, [r2, #0]
 8023db2:	4b4b      	ldr	r3, [pc, #300]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023db4:	681b      	ldr	r3, [r3, #0]
 8023db6:	4a4a      	ldr	r2, [pc, #296]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8023dbc:	6013      	str	r3, [r2, #0]
 8023dbe:	4b48      	ldr	r3, [pc, #288]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023dc0:	681b      	ldr	r3, [r3, #0]
 8023dc2:	4a47      	ldr	r2, [pc, #284]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023dc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8023dc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8023dca:	687b      	ldr	r3, [r7, #4]
 8023dcc:	685b      	ldr	r3, [r3, #4]
 8023dce:	2b00      	cmp	r3, #0
 8023dd0:	d014      	beq.n	8023dfc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8023dd2:	f7fe fb53 	bl	802247c <HAL_GetTick>
 8023dd6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8023dd8:	e009      	b.n	8023dee <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8023dda:	f7fe fb4f 	bl	802247c <HAL_GetTick>
 8023dde:	4602      	mov	r2, r0
 8023de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023de2:	1ad3      	subs	r3, r2, r3
 8023de4:	2b64      	cmp	r3, #100	; 0x64
 8023de6:	d902      	bls.n	8023dee <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8023de8:	2303      	movs	r3, #3
 8023dea:	f000 bcd4 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8023dee:	4b3c      	ldr	r3, [pc, #240]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	d0ef      	beq.n	8023dda <HAL_RCC_OscConfig+0x3ee>
 8023dfa:	e013      	b.n	8023e24 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8023dfc:	f7fe fb3e 	bl	802247c <HAL_GetTick>
 8023e00:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8023e02:	e009      	b.n	8023e18 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8023e04:	f7fe fb3a 	bl	802247c <HAL_GetTick>
 8023e08:	4602      	mov	r2, r0
 8023e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e0c:	1ad3      	subs	r3, r2, r3
 8023e0e:	2b64      	cmp	r3, #100	; 0x64
 8023e10:	d902      	bls.n	8023e18 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8023e12:	2303      	movs	r3, #3
 8023e14:	f000 bcbf 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8023e18:	4b31      	ldr	r3, [pc, #196]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023e1a:	681b      	ldr	r3, [r3, #0]
 8023e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023e20:	2b00      	cmp	r3, #0
 8023e22:	d1ef      	bne.n	8023e04 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8023e24:	687b      	ldr	r3, [r7, #4]
 8023e26:	681b      	ldr	r3, [r3, #0]
 8023e28:	f003 0302 	and.w	r3, r3, #2
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d05f      	beq.n	8023ef0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8023e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e32:	2b04      	cmp	r3, #4
 8023e34:	d005      	beq.n	8023e42 <HAL_RCC_OscConfig+0x456>
 8023e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e38:	2b0c      	cmp	r3, #12
 8023e3a:	d114      	bne.n	8023e66 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8023e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e3e:	2b02      	cmp	r3, #2
 8023e40:	d111      	bne.n	8023e66 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8023e42:	687b      	ldr	r3, [r7, #4]
 8023e44:	68db      	ldr	r3, [r3, #12]
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	d102      	bne.n	8023e50 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8023e4a:	2301      	movs	r3, #1
 8023e4c:	f000 bca3 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8023e50:	4b23      	ldr	r3, [pc, #140]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023e52:	691b      	ldr	r3, [r3, #16]
 8023e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8023e58:	687b      	ldr	r3, [r7, #4]
 8023e5a:	691b      	ldr	r3, [r3, #16]
 8023e5c:	041b      	lsls	r3, r3, #16
 8023e5e:	4920      	ldr	r1, [pc, #128]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023e60:	4313      	orrs	r3, r2
 8023e62:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8023e64:	e044      	b.n	8023ef0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8023e66:	687b      	ldr	r3, [r7, #4]
 8023e68:	68db      	ldr	r3, [r3, #12]
 8023e6a:	2b00      	cmp	r3, #0
 8023e6c:	d024      	beq.n	8023eb8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8023e6e:	4b1c      	ldr	r3, [pc, #112]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023e70:	681b      	ldr	r3, [r3, #0]
 8023e72:	4a1b      	ldr	r2, [pc, #108]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023e78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8023e7a:	f7fe faff 	bl	802247c <HAL_GetTick>
 8023e7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8023e80:	e009      	b.n	8023e96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8023e82:	f7fe fafb 	bl	802247c <HAL_GetTick>
 8023e86:	4602      	mov	r2, r0
 8023e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e8a:	1ad3      	subs	r3, r2, r3
 8023e8c:	2b02      	cmp	r3, #2
 8023e8e:	d902      	bls.n	8023e96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8023e90:	2303      	movs	r3, #3
 8023e92:	f000 bc80 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8023e96:	4b12      	ldr	r3, [pc, #72]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023e98:	681b      	ldr	r3, [r3, #0]
 8023e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023e9e:	2b00      	cmp	r3, #0
 8023ea0:	d0ef      	beq.n	8023e82 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8023ea2:	4b0f      	ldr	r3, [pc, #60]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023ea4:	691b      	ldr	r3, [r3, #16]
 8023ea6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8023eaa:	687b      	ldr	r3, [r7, #4]
 8023eac:	691b      	ldr	r3, [r3, #16]
 8023eae:	041b      	lsls	r3, r3, #16
 8023eb0:	490b      	ldr	r1, [pc, #44]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023eb2:	4313      	orrs	r3, r2
 8023eb4:	610b      	str	r3, [r1, #16]
 8023eb6:	e01b      	b.n	8023ef0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8023eb8:	4b09      	ldr	r3, [pc, #36]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	4a08      	ldr	r2, [pc, #32]	; (8023ee0 <HAL_RCC_OscConfig+0x4f4>)
 8023ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023ec2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8023ec4:	f7fe fada 	bl	802247c <HAL_GetTick>
 8023ec8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8023eca:	e00b      	b.n	8023ee4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8023ecc:	f7fe fad6 	bl	802247c <HAL_GetTick>
 8023ed0:	4602      	mov	r2, r0
 8023ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ed4:	1ad3      	subs	r3, r2, r3
 8023ed6:	2b02      	cmp	r3, #2
 8023ed8:	d904      	bls.n	8023ee4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8023eda:	2303      	movs	r3, #3
 8023edc:	f000 bc5b 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
 8023ee0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8023ee4:	4baf      	ldr	r3, [pc, #700]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023ee6:	681b      	ldr	r3, [r3, #0]
 8023ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023eec:	2b00      	cmp	r3, #0
 8023eee:	d1ed      	bne.n	8023ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8023ef0:	687b      	ldr	r3, [r7, #4]
 8023ef2:	681b      	ldr	r3, [r3, #0]
 8023ef4:	f003 0308 	and.w	r3, r3, #8
 8023ef8:	2b00      	cmp	r3, #0
 8023efa:	f000 80c8 	beq.w	802408e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8023efe:	2300      	movs	r3, #0
 8023f00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8023f04:	4ba7      	ldr	r3, [pc, #668]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8023f0a:	f003 0304 	and.w	r3, r3, #4
 8023f0e:	2b00      	cmp	r3, #0
 8023f10:	d111      	bne.n	8023f36 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8023f12:	4ba4      	ldr	r3, [pc, #656]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8023f18:	4aa2      	ldr	r2, [pc, #648]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023f1a:	f043 0304 	orr.w	r3, r3, #4
 8023f1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8023f22:	4ba0      	ldr	r3, [pc, #640]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8023f28:	f003 0304 	and.w	r3, r3, #4
 8023f2c:	617b      	str	r3, [r7, #20]
 8023f2e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8023f30:	2301      	movs	r3, #1
 8023f32:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8023f36:	4b9c      	ldr	r3, [pc, #624]	; (80241a8 <HAL_RCC_OscConfig+0x7bc>)
 8023f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f3a:	f003 0301 	and.w	r3, r3, #1
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	d119      	bne.n	8023f76 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8023f42:	4b99      	ldr	r3, [pc, #612]	; (80241a8 <HAL_RCC_OscConfig+0x7bc>)
 8023f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f46:	4a98      	ldr	r2, [pc, #608]	; (80241a8 <HAL_RCC_OscConfig+0x7bc>)
 8023f48:	f043 0301 	orr.w	r3, r3, #1
 8023f4c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8023f4e:	f7fe fa95 	bl	802247c <HAL_GetTick>
 8023f52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8023f54:	e009      	b.n	8023f6a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8023f56:	f7fe fa91 	bl	802247c <HAL_GetTick>
 8023f5a:	4602      	mov	r2, r0
 8023f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f5e:	1ad3      	subs	r3, r2, r3
 8023f60:	2b02      	cmp	r3, #2
 8023f62:	d902      	bls.n	8023f6a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8023f64:	2303      	movs	r3, #3
 8023f66:	f000 bc16 	b.w	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8023f6a:	4b8f      	ldr	r3, [pc, #572]	; (80241a8 <HAL_RCC_OscConfig+0x7bc>)
 8023f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f6e:	f003 0301 	and.w	r3, r3, #1
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d0ef      	beq.n	8023f56 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8023f76:	687b      	ldr	r3, [r7, #4]
 8023f78:	695b      	ldr	r3, [r3, #20]
 8023f7a:	2b00      	cmp	r3, #0
 8023f7c:	d05f      	beq.n	802403e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8023f7e:	4b89      	ldr	r3, [pc, #548]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8023f84:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8023f86:	687b      	ldr	r3, [r7, #4]
 8023f88:	699a      	ldr	r2, [r3, #24]
 8023f8a:	6a3b      	ldr	r3, [r7, #32]
 8023f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023f90:	429a      	cmp	r2, r3
 8023f92:	d037      	beq.n	8024004 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8023f94:	6a3b      	ldr	r3, [r7, #32]
 8023f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	d006      	beq.n	8023fac <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8023f9e:	6a3b      	ldr	r3, [r7, #32]
 8023fa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	d101      	bne.n	8023fac <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8023fa8:	2301      	movs	r3, #1
 8023faa:	e3f4      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8023fac:	6a3b      	ldr	r3, [r7, #32]
 8023fae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8023fb2:	2b00      	cmp	r3, #0
 8023fb4:	d01b      	beq.n	8023fee <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8023fb6:	4b7b      	ldr	r3, [pc, #492]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8023fbc:	4a79      	ldr	r2, [pc, #484]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023fbe:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8023fc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8023fc6:	f7fe fa59 	bl	802247c <HAL_GetTick>
 8023fca:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8023fcc:	e008      	b.n	8023fe0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8023fce:	f7fe fa55 	bl	802247c <HAL_GetTick>
 8023fd2:	4602      	mov	r2, r0
 8023fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fd6:	1ad3      	subs	r3, r2, r3
 8023fd8:	2b05      	cmp	r3, #5
 8023fda:	d901      	bls.n	8023fe0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8023fdc:	2303      	movs	r3, #3
 8023fde:	e3da      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8023fe0:	4b70      	ldr	r3, [pc, #448]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8023fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8023fea:	2b00      	cmp	r3, #0
 8023fec:	d1ef      	bne.n	8023fce <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8023fee:	4b6d      	ldr	r3, [pc, #436]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8023ff4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8023ff8:	687b      	ldr	r3, [r7, #4]
 8023ffa:	699b      	ldr	r3, [r3, #24]
 8023ffc:	4969      	ldr	r1, [pc, #420]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8023ffe:	4313      	orrs	r3, r2
 8024000:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8024004:	4b67      	ldr	r3, [pc, #412]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802400a:	4a66      	ldr	r2, [pc, #408]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 802400c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8024010:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8024014:	f7fe fa32 	bl	802247c <HAL_GetTick>
 8024018:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 802401a:	e008      	b.n	802402e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802401c:	f7fe fa2e 	bl	802247c <HAL_GetTick>
 8024020:	4602      	mov	r2, r0
 8024022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024024:	1ad3      	subs	r3, r2, r3
 8024026:	2b05      	cmp	r3, #5
 8024028:	d901      	bls.n	802402e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 802402a:	2303      	movs	r3, #3
 802402c:	e3b3      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 802402e:	4b5d      	ldr	r3, [pc, #372]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8024038:	2b00      	cmp	r3, #0
 802403a:	d0ef      	beq.n	802401c <HAL_RCC_OscConfig+0x630>
 802403c:	e01b      	b.n	8024076 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 802403e:	4b59      	ldr	r3, [pc, #356]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024044:	4a57      	ldr	r2, [pc, #348]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024046:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 802404a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 802404e:	f7fe fa15 	bl	802247c <HAL_GetTick>
 8024052:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8024054:	e008      	b.n	8024068 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8024056:	f7fe fa11 	bl	802247c <HAL_GetTick>
 802405a:	4602      	mov	r2, r0
 802405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802405e:	1ad3      	subs	r3, r2, r3
 8024060:	2b05      	cmp	r3, #5
 8024062:	d901      	bls.n	8024068 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8024064:	2303      	movs	r3, #3
 8024066:	e396      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8024068:	4b4e      	ldr	r3, [pc, #312]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 802406a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802406e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8024072:	2b00      	cmp	r3, #0
 8024074:	d1ef      	bne.n	8024056 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8024076:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 802407a:	2b01      	cmp	r3, #1
 802407c:	d107      	bne.n	802408e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802407e:	4b49      	ldr	r3, [pc, #292]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8024084:	4a47      	ldr	r2, [pc, #284]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024086:	f023 0304 	bic.w	r3, r3, #4
 802408a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	681b      	ldr	r3, [r3, #0]
 8024092:	f003 0304 	and.w	r3, r3, #4
 8024096:	2b00      	cmp	r3, #0
 8024098:	f000 8111 	beq.w	80242be <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 802409c:	2300      	movs	r3, #0
 802409e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80240a2:	4b40      	ldr	r3, [pc, #256]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 80240a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80240a8:	f003 0304 	and.w	r3, r3, #4
 80240ac:	2b00      	cmp	r3, #0
 80240ae:	d111      	bne.n	80240d4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80240b0:	4b3c      	ldr	r3, [pc, #240]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 80240b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80240b6:	4a3b      	ldr	r2, [pc, #236]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 80240b8:	f043 0304 	orr.w	r3, r3, #4
 80240bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80240c0:	4b38      	ldr	r3, [pc, #224]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 80240c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80240c6:	f003 0304 	and.w	r3, r3, #4
 80240ca:	613b      	str	r3, [r7, #16]
 80240cc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80240ce:	2301      	movs	r3, #1
 80240d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80240d4:	4b34      	ldr	r3, [pc, #208]	; (80241a8 <HAL_RCC_OscConfig+0x7bc>)
 80240d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80240d8:	f003 0301 	and.w	r3, r3, #1
 80240dc:	2b00      	cmp	r3, #0
 80240de:	d118      	bne.n	8024112 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80240e0:	4b31      	ldr	r3, [pc, #196]	; (80241a8 <HAL_RCC_OscConfig+0x7bc>)
 80240e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80240e4:	4a30      	ldr	r2, [pc, #192]	; (80241a8 <HAL_RCC_OscConfig+0x7bc>)
 80240e6:	f043 0301 	orr.w	r3, r3, #1
 80240ea:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80240ec:	f7fe f9c6 	bl	802247c <HAL_GetTick>
 80240f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80240f2:	e008      	b.n	8024106 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80240f4:	f7fe f9c2 	bl	802247c <HAL_GetTick>
 80240f8:	4602      	mov	r2, r0
 80240fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80240fc:	1ad3      	subs	r3, r2, r3
 80240fe:	2b02      	cmp	r3, #2
 8024100:	d901      	bls.n	8024106 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8024102:	2303      	movs	r3, #3
 8024104:	e347      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8024106:	4b28      	ldr	r3, [pc, #160]	; (80241a8 <HAL_RCC_OscConfig+0x7bc>)
 8024108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802410a:	f003 0301 	and.w	r3, r3, #1
 802410e:	2b00      	cmp	r3, #0
 8024110:	d0f0      	beq.n	80240f4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	689b      	ldr	r3, [r3, #8]
 8024116:	f003 0301 	and.w	r3, r3, #1
 802411a:	2b00      	cmp	r3, #0
 802411c:	d01f      	beq.n	802415e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 802411e:	687b      	ldr	r3, [r7, #4]
 8024120:	689b      	ldr	r3, [r3, #8]
 8024122:	f003 0304 	and.w	r3, r3, #4
 8024126:	2b00      	cmp	r3, #0
 8024128:	d010      	beq.n	802414c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 802412a:	4b1e      	ldr	r3, [pc, #120]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 802412c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024130:	4a1c      	ldr	r2, [pc, #112]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024132:	f043 0304 	orr.w	r3, r3, #4
 8024136:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 802413a:	4b1a      	ldr	r3, [pc, #104]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 802413c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024140:	4a18      	ldr	r2, [pc, #96]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024142:	f043 0301 	orr.w	r3, r3, #1
 8024146:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 802414a:	e018      	b.n	802417e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 802414c:	4b15      	ldr	r3, [pc, #84]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 802414e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024152:	4a14      	ldr	r2, [pc, #80]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024154:	f043 0301 	orr.w	r3, r3, #1
 8024158:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 802415c:	e00f      	b.n	802417e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 802415e:	4b11      	ldr	r3, [pc, #68]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024164:	4a0f      	ldr	r2, [pc, #60]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024166:	f023 0301 	bic.w	r3, r3, #1
 802416a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 802416e:	4b0d      	ldr	r3, [pc, #52]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024174:	4a0b      	ldr	r2, [pc, #44]	; (80241a4 <HAL_RCC_OscConfig+0x7b8>)
 8024176:	f023 0304 	bic.w	r3, r3, #4
 802417a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	689b      	ldr	r3, [r3, #8]
 8024182:	2b00      	cmp	r3, #0
 8024184:	d057      	beq.n	8024236 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8024186:	f7fe f979 	bl	802247c <HAL_GetTick>
 802418a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 802418c:	e00e      	b.n	80241ac <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802418e:	f7fe f975 	bl	802247c <HAL_GetTick>
 8024192:	4602      	mov	r2, r0
 8024194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024196:	1ad3      	subs	r3, r2, r3
 8024198:	f241 3288 	movw	r2, #5000	; 0x1388
 802419c:	4293      	cmp	r3, r2
 802419e:	d905      	bls.n	80241ac <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80241a0:	2303      	movs	r3, #3
 80241a2:	e2f8      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
 80241a4:	46020c00 	.word	0x46020c00
 80241a8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80241ac:	4b9c      	ldr	r3, [pc, #624]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80241ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80241b2:	f003 0302 	and.w	r3, r3, #2
 80241b6:	2b00      	cmp	r3, #0
 80241b8:	d0e9      	beq.n	802418e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80241ba:	687b      	ldr	r3, [r7, #4]
 80241bc:	689b      	ldr	r3, [r3, #8]
 80241be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	d01b      	beq.n	80241fe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80241c6:	4b96      	ldr	r3, [pc, #600]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80241c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80241cc:	4a94      	ldr	r2, [pc, #592]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80241ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80241d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80241d6:	e00a      	b.n	80241ee <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80241d8:	f7fe f950 	bl	802247c <HAL_GetTick>
 80241dc:	4602      	mov	r2, r0
 80241de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241e0:	1ad3      	subs	r3, r2, r3
 80241e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80241e6:	4293      	cmp	r3, r2
 80241e8:	d901      	bls.n	80241ee <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80241ea:	2303      	movs	r3, #3
 80241ec:	e2d3      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80241ee:	4b8c      	ldr	r3, [pc, #560]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80241f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80241f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80241f8:	2b00      	cmp	r3, #0
 80241fa:	d0ed      	beq.n	80241d8 <HAL_RCC_OscConfig+0x7ec>
 80241fc:	e053      	b.n	80242a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80241fe:	4b88      	ldr	r3, [pc, #544]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024204:	4a86      	ldr	r2, [pc, #536]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802420a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 802420e:	e00a      	b.n	8024226 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8024210:	f7fe f934 	bl	802247c <HAL_GetTick>
 8024214:	4602      	mov	r2, r0
 8024216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024218:	1ad3      	subs	r3, r2, r3
 802421a:	f241 3288 	movw	r2, #5000	; 0x1388
 802421e:	4293      	cmp	r3, r2
 8024220:	d901      	bls.n	8024226 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8024222:	2303      	movs	r3, #3
 8024224:	e2b7      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8024226:	4b7e      	ldr	r3, [pc, #504]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802422c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8024230:	2b00      	cmp	r3, #0
 8024232:	d1ed      	bne.n	8024210 <HAL_RCC_OscConfig+0x824>
 8024234:	e037      	b.n	80242a6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8024236:	f7fe f921 	bl	802247c <HAL_GetTick>
 802423a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 802423c:	e00a      	b.n	8024254 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802423e:	f7fe f91d 	bl	802247c <HAL_GetTick>
 8024242:	4602      	mov	r2, r0
 8024244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024246:	1ad3      	subs	r3, r2, r3
 8024248:	f241 3288 	movw	r2, #5000	; 0x1388
 802424c:	4293      	cmp	r3, r2
 802424e:	d901      	bls.n	8024254 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8024250:	2303      	movs	r3, #3
 8024252:	e2a0      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8024254:	4b72      	ldr	r3, [pc, #456]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802425a:	f003 0302 	and.w	r3, r3, #2
 802425e:	2b00      	cmp	r3, #0
 8024260:	d1ed      	bne.n	802423e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8024262:	4b6f      	ldr	r3, [pc, #444]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802426c:	2b00      	cmp	r3, #0
 802426e:	d01a      	beq.n	80242a6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8024270:	4b6b      	ldr	r3, [pc, #428]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8024276:	4a6a      	ldr	r2, [pc, #424]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802427c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8024280:	e00a      	b.n	8024298 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8024282:	f7fe f8fb 	bl	802247c <HAL_GetTick>
 8024286:	4602      	mov	r2, r0
 8024288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802428a:	1ad3      	subs	r3, r2, r3
 802428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8024290:	4293      	cmp	r3, r2
 8024292:	d901      	bls.n	8024298 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8024294:	2303      	movs	r3, #3
 8024296:	e27e      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8024298:	4b61      	ldr	r3, [pc, #388]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 802429a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802429e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80242a2:	2b00      	cmp	r3, #0
 80242a4:	d1ed      	bne.n	8024282 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80242a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80242aa:	2b01      	cmp	r3, #1
 80242ac:	d107      	bne.n	80242be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80242ae:	4b5c      	ldr	r3, [pc, #368]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80242b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80242b4:	4a5a      	ldr	r2, [pc, #360]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80242b6:	f023 0304 	bic.w	r3, r3, #4
 80242ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80242be:	687b      	ldr	r3, [r7, #4]
 80242c0:	681b      	ldr	r3, [r3, #0]
 80242c2:	f003 0320 	and.w	r3, r3, #32
 80242c6:	2b00      	cmp	r3, #0
 80242c8:	d036      	beq.n	8024338 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242ce:	2b00      	cmp	r3, #0
 80242d0:	d019      	beq.n	8024306 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80242d2:	4b53      	ldr	r3, [pc, #332]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80242d4:	681b      	ldr	r3, [r3, #0]
 80242d6:	4a52      	ldr	r2, [pc, #328]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80242d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80242dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80242de:	f7fe f8cd 	bl	802247c <HAL_GetTick>
 80242e2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80242e4:	e008      	b.n	80242f8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80242e6:	f7fe f8c9 	bl	802247c <HAL_GetTick>
 80242ea:	4602      	mov	r2, r0
 80242ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242ee:	1ad3      	subs	r3, r2, r3
 80242f0:	2b02      	cmp	r3, #2
 80242f2:	d901      	bls.n	80242f8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80242f4:	2303      	movs	r3, #3
 80242f6:	e24e      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80242f8:	4b49      	ldr	r3, [pc, #292]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80242fa:	681b      	ldr	r3, [r3, #0]
 80242fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024300:	2b00      	cmp	r3, #0
 8024302:	d0f0      	beq.n	80242e6 <HAL_RCC_OscConfig+0x8fa>
 8024304:	e018      	b.n	8024338 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8024306:	4b46      	ldr	r3, [pc, #280]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024308:	681b      	ldr	r3, [r3, #0]
 802430a:	4a45      	ldr	r2, [pc, #276]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 802430c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024310:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8024312:	f7fe f8b3 	bl	802247c <HAL_GetTick>
 8024316:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8024318:	e008      	b.n	802432c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802431a:	f7fe f8af 	bl	802247c <HAL_GetTick>
 802431e:	4602      	mov	r2, r0
 8024320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024322:	1ad3      	subs	r3, r2, r3
 8024324:	2b02      	cmp	r3, #2
 8024326:	d901      	bls.n	802432c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8024328:	2303      	movs	r3, #3
 802432a:	e234      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 802432c:	4b3c      	ldr	r3, [pc, #240]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 802432e:	681b      	ldr	r3, [r3, #0]
 8024330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024334:	2b00      	cmp	r3, #0
 8024336:	d1f0      	bne.n	802431a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8024338:	687b      	ldr	r3, [r7, #4]
 802433a:	681b      	ldr	r3, [r3, #0]
 802433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024340:	2b00      	cmp	r3, #0
 8024342:	d036      	beq.n	80243b2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8024344:	687b      	ldr	r3, [r7, #4]
 8024346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024348:	2b00      	cmp	r3, #0
 802434a:	d019      	beq.n	8024380 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 802434c:	4b34      	ldr	r3, [pc, #208]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 802434e:	681b      	ldr	r3, [r3, #0]
 8024350:	4a33      	ldr	r2, [pc, #204]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024356:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8024358:	f7fe f890 	bl	802247c <HAL_GetTick>
 802435c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 802435e:	e008      	b.n	8024372 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8024360:	f7fe f88c 	bl	802247c <HAL_GetTick>
 8024364:	4602      	mov	r2, r0
 8024366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024368:	1ad3      	subs	r3, r2, r3
 802436a:	2b02      	cmp	r3, #2
 802436c:	d901      	bls.n	8024372 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 802436e:	2303      	movs	r3, #3
 8024370:	e211      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8024372:	4b2b      	ldr	r3, [pc, #172]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024374:	681b      	ldr	r3, [r3, #0]
 8024376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802437a:	2b00      	cmp	r3, #0
 802437c:	d0f0      	beq.n	8024360 <HAL_RCC_OscConfig+0x974>
 802437e:	e018      	b.n	80243b2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8024380:	4b27      	ldr	r3, [pc, #156]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024382:	681b      	ldr	r3, [r3, #0]
 8024384:	4a26      	ldr	r2, [pc, #152]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 8024386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802438a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 802438c:	f7fe f876 	bl	802247c <HAL_GetTick>
 8024390:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8024392:	e008      	b.n	80243a6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8024394:	f7fe f872 	bl	802247c <HAL_GetTick>
 8024398:	4602      	mov	r2, r0
 802439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802439c:	1ad3      	subs	r3, r2, r3
 802439e:	2b02      	cmp	r3, #2
 80243a0:	d901      	bls.n	80243a6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80243a2:	2303      	movs	r3, #3
 80243a4:	e1f7      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80243a6:	4b1e      	ldr	r3, [pc, #120]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80243a8:	681b      	ldr	r3, [r3, #0]
 80243aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80243ae:	2b00      	cmp	r3, #0
 80243b0:	d1f0      	bne.n	8024394 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80243b2:	687b      	ldr	r3, [r7, #4]
 80243b4:	681b      	ldr	r3, [r3, #0]
 80243b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80243ba:	2b00      	cmp	r3, #0
 80243bc:	d07f      	beq.n	80244be <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80243be:	687b      	ldr	r3, [r7, #4]
 80243c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80243c2:	2b00      	cmp	r3, #0
 80243c4:	d062      	beq.n	802448c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80243c6:	4b16      	ldr	r3, [pc, #88]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80243c8:	689b      	ldr	r3, [r3, #8]
 80243ca:	4a15      	ldr	r2, [pc, #84]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80243cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80243d0:	6093      	str	r3, [r2, #8]
 80243d2:	4b13      	ldr	r3, [pc, #76]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80243d4:	689b      	ldr	r3, [r3, #8]
 80243d6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80243da:	687b      	ldr	r3, [r7, #4]
 80243dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80243de:	4910      	ldr	r1, [pc, #64]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80243e0:	4313      	orrs	r3, r2
 80243e2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80243e4:	687b      	ldr	r3, [r7, #4]
 80243e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80243e8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80243ec:	d309      	bcc.n	8024402 <HAL_RCC_OscConfig+0xa16>
 80243ee:	4b0c      	ldr	r3, [pc, #48]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80243f0:	68db      	ldr	r3, [r3, #12]
 80243f2:	f023 021f 	bic.w	r2, r3, #31
 80243f6:	687b      	ldr	r3, [r7, #4]
 80243f8:	6a1b      	ldr	r3, [r3, #32]
 80243fa:	4909      	ldr	r1, [pc, #36]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 80243fc:	4313      	orrs	r3, r2
 80243fe:	60cb      	str	r3, [r1, #12]
 8024400:	e02a      	b.n	8024458 <HAL_RCC_OscConfig+0xa6c>
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024406:	2b00      	cmp	r3, #0
 8024408:	da0c      	bge.n	8024424 <HAL_RCC_OscConfig+0xa38>
 802440a:	4b05      	ldr	r3, [pc, #20]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 802440c:	68db      	ldr	r3, [r3, #12]
 802440e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8024412:	687b      	ldr	r3, [r7, #4]
 8024414:	6a1b      	ldr	r3, [r3, #32]
 8024416:	015b      	lsls	r3, r3, #5
 8024418:	4901      	ldr	r1, [pc, #4]	; (8024420 <HAL_RCC_OscConfig+0xa34>)
 802441a:	4313      	orrs	r3, r2
 802441c:	60cb      	str	r3, [r1, #12]
 802441e:	e01b      	b.n	8024458 <HAL_RCC_OscConfig+0xa6c>
 8024420:	46020c00 	.word	0x46020c00
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802442c:	d30a      	bcc.n	8024444 <HAL_RCC_OscConfig+0xa58>
 802442e:	4ba1      	ldr	r3, [pc, #644]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024430:	68db      	ldr	r3, [r3, #12]
 8024432:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8024436:	687b      	ldr	r3, [r7, #4]
 8024438:	6a1b      	ldr	r3, [r3, #32]
 802443a:	029b      	lsls	r3, r3, #10
 802443c:	499d      	ldr	r1, [pc, #628]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802443e:	4313      	orrs	r3, r2
 8024440:	60cb      	str	r3, [r1, #12]
 8024442:	e009      	b.n	8024458 <HAL_RCC_OscConfig+0xa6c>
 8024444:	4b9b      	ldr	r3, [pc, #620]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024446:	68db      	ldr	r3, [r3, #12]
 8024448:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	6a1b      	ldr	r3, [r3, #32]
 8024450:	03db      	lsls	r3, r3, #15
 8024452:	4998      	ldr	r1, [pc, #608]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024454:	4313      	orrs	r3, r2
 8024456:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8024458:	4b96      	ldr	r3, [pc, #600]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802445a:	681b      	ldr	r3, [r3, #0]
 802445c:	4a95      	ldr	r2, [pc, #596]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802445e:	f043 0310 	orr.w	r3, r3, #16
 8024462:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8024464:	f7fe f80a 	bl	802247c <HAL_GetTick>
 8024468:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 802446a:	e008      	b.n	802447e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 802446c:	f7fe f806 	bl	802247c <HAL_GetTick>
 8024470:	4602      	mov	r2, r0
 8024472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024474:	1ad3      	subs	r3, r2, r3
 8024476:	2b02      	cmp	r3, #2
 8024478:	d901      	bls.n	802447e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 802447a:	2303      	movs	r3, #3
 802447c:	e18b      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 802447e:	4b8d      	ldr	r3, [pc, #564]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024480:	681b      	ldr	r3, [r3, #0]
 8024482:	f003 0320 	and.w	r3, r3, #32
 8024486:	2b00      	cmp	r3, #0
 8024488:	d0f0      	beq.n	802446c <HAL_RCC_OscConfig+0xa80>
 802448a:	e018      	b.n	80244be <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 802448c:	4b89      	ldr	r3, [pc, #548]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802448e:	681b      	ldr	r3, [r3, #0]
 8024490:	4a88      	ldr	r2, [pc, #544]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024492:	f023 0310 	bic.w	r3, r3, #16
 8024496:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8024498:	f7fd fff0 	bl	802247c <HAL_GetTick>
 802449c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 802449e:	e008      	b.n	80244b2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80244a0:	f7fd ffec 	bl	802247c <HAL_GetTick>
 80244a4:	4602      	mov	r2, r0
 80244a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80244a8:	1ad3      	subs	r3, r2, r3
 80244aa:	2b02      	cmp	r3, #2
 80244ac:	d901      	bls.n	80244b2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80244ae:	2303      	movs	r3, #3
 80244b0:	e171      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80244b2:	4b80      	ldr	r3, [pc, #512]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80244b4:	681b      	ldr	r3, [r3, #0]
 80244b6:	f003 0320 	and.w	r3, r3, #32
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	d1f0      	bne.n	80244a0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80244c2:	2b00      	cmp	r3, #0
 80244c4:	f000 8166 	beq.w	8024794 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80244c8:	2300      	movs	r3, #0
 80244ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80244ce:	4b79      	ldr	r3, [pc, #484]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80244d0:	69db      	ldr	r3, [r3, #28]
 80244d2:	f003 030c 	and.w	r3, r3, #12
 80244d6:	2b0c      	cmp	r3, #12
 80244d8:	f000 80f2 	beq.w	80246c0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80244dc:	687b      	ldr	r3, [r7, #4]
 80244de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80244e0:	2b02      	cmp	r3, #2
 80244e2:	f040 80c5 	bne.w	8024670 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80244e6:	4b73      	ldr	r3, [pc, #460]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80244e8:	681b      	ldr	r3, [r3, #0]
 80244ea:	4a72      	ldr	r2, [pc, #456]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80244ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80244f0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80244f2:	f7fd ffc3 	bl	802247c <HAL_GetTick>
 80244f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80244f8:	e008      	b.n	802450c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80244fa:	f7fd ffbf 	bl	802247c <HAL_GetTick>
 80244fe:	4602      	mov	r2, r0
 8024500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024502:	1ad3      	subs	r3, r2, r3
 8024504:	2b02      	cmp	r3, #2
 8024506:	d901      	bls.n	802450c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8024508:	2303      	movs	r3, #3
 802450a:	e144      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 802450c:	4b69      	ldr	r3, [pc, #420]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802450e:	681b      	ldr	r3, [r3, #0]
 8024510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024514:	2b00      	cmp	r3, #0
 8024516:	d1f0      	bne.n	80244fa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8024518:	4b66      	ldr	r3, [pc, #408]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802451e:	f003 0304 	and.w	r3, r3, #4
 8024522:	2b00      	cmp	r3, #0
 8024524:	d111      	bne.n	802454a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8024526:	4b63      	ldr	r3, [pc, #396]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802452c:	4a61      	ldr	r2, [pc, #388]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802452e:	f043 0304 	orr.w	r3, r3, #4
 8024532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8024536:	4b5f      	ldr	r3, [pc, #380]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802453c:	f003 0304 	and.w	r3, r3, #4
 8024540:	60fb      	str	r3, [r7, #12]
 8024542:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8024544:	2301      	movs	r3, #1
 8024546:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 802454a:	4b5b      	ldr	r3, [pc, #364]	; (80246b8 <HAL_RCC_OscConfig+0xccc>)
 802454c:	68db      	ldr	r3, [r3, #12]
 802454e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024552:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8024556:	d102      	bne.n	802455e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8024558:	2301      	movs	r3, #1
 802455a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 802455e:	4b56      	ldr	r3, [pc, #344]	; (80246b8 <HAL_RCC_OscConfig+0xccc>)
 8024560:	68db      	ldr	r3, [r3, #12]
 8024562:	4a55      	ldr	r2, [pc, #340]	; (80246b8 <HAL_RCC_OscConfig+0xccc>)
 8024564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8024568:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 802456a:	4b52      	ldr	r3, [pc, #328]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802456e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8024572:	f023 0303 	bic.w	r3, r3, #3
 8024576:	687a      	ldr	r2, [r7, #4]
 8024578:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 802457a:	687a      	ldr	r2, [r7, #4]
 802457c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 802457e:	3a01      	subs	r2, #1
 8024580:	0212      	lsls	r2, r2, #8
 8024582:	4311      	orrs	r1, r2
 8024584:	687a      	ldr	r2, [r7, #4]
 8024586:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8024588:	430a      	orrs	r2, r1
 802458a:	494a      	ldr	r1, [pc, #296]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802458c:	4313      	orrs	r3, r2
 802458e:	628b      	str	r3, [r1, #40]	; 0x28
 8024590:	4b48      	ldr	r3, [pc, #288]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8024594:	4b49      	ldr	r3, [pc, #292]	; (80246bc <HAL_RCC_OscConfig+0xcd0>)
 8024596:	4013      	ands	r3, r2
 8024598:	687a      	ldr	r2, [r7, #4]
 802459a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 802459c:	3a01      	subs	r2, #1
 802459e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80245a2:	687a      	ldr	r2, [r7, #4]
 80245a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80245a6:	3a01      	subs	r2, #1
 80245a8:	0252      	lsls	r2, r2, #9
 80245aa:	b292      	uxth	r2, r2
 80245ac:	4311      	orrs	r1, r2
 80245ae:	687a      	ldr	r2, [r7, #4]
 80245b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80245b2:	3a01      	subs	r2, #1
 80245b4:	0412      	lsls	r2, r2, #16
 80245b6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80245ba:	4311      	orrs	r1, r2
 80245bc:	687a      	ldr	r2, [r7, #4]
 80245be:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80245c0:	3a01      	subs	r2, #1
 80245c2:	0612      	lsls	r2, r2, #24
 80245c4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80245c8:	430a      	orrs	r2, r1
 80245ca:	493a      	ldr	r1, [pc, #232]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80245cc:	4313      	orrs	r3, r2
 80245ce:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80245d0:	4b38      	ldr	r3, [pc, #224]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80245d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80245d4:	4a37      	ldr	r2, [pc, #220]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80245d6:	f023 0310 	bic.w	r3, r3, #16
 80245da:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80245dc:	687b      	ldr	r3, [r7, #4]
 80245de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80245e0:	4a34      	ldr	r2, [pc, #208]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80245e2:	00db      	lsls	r3, r3, #3
 80245e4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80245e6:	4b33      	ldr	r3, [pc, #204]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80245e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80245ea:	4a32      	ldr	r2, [pc, #200]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80245ec:	f043 0310 	orr.w	r3, r3, #16
 80245f0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80245f2:	4b30      	ldr	r3, [pc, #192]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80245f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80245f6:	f023 020c 	bic.w	r2, r3, #12
 80245fa:	687b      	ldr	r3, [r7, #4]
 80245fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80245fe:	492d      	ldr	r1, [pc, #180]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024600:	4313      	orrs	r3, r2
 8024602:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8024604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8024608:	2b01      	cmp	r3, #1
 802460a:	d105      	bne.n	8024618 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 802460c:	4b2a      	ldr	r3, [pc, #168]	; (80246b8 <HAL_RCC_OscConfig+0xccc>)
 802460e:	68db      	ldr	r3, [r3, #12]
 8024610:	4a29      	ldr	r2, [pc, #164]	; (80246b8 <HAL_RCC_OscConfig+0xccc>)
 8024612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8024616:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8024618:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 802461c:	2b01      	cmp	r3, #1
 802461e:	d107      	bne.n	8024630 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8024620:	4b24      	ldr	r3, [pc, #144]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8024626:	4a23      	ldr	r2, [pc, #140]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024628:	f023 0304 	bic.w	r3, r3, #4
 802462c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8024630:	4b20      	ldr	r3, [pc, #128]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024634:	4a1f      	ldr	r2, [pc, #124]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802463a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 802463c:	4b1d      	ldr	r3, [pc, #116]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 802463e:	681b      	ldr	r3, [r3, #0]
 8024640:	4a1c      	ldr	r2, [pc, #112]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8024646:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8024648:	f7fd ff18 	bl	802247c <HAL_GetTick>
 802464c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 802464e:	e008      	b.n	8024662 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8024650:	f7fd ff14 	bl	802247c <HAL_GetTick>
 8024654:	4602      	mov	r2, r0
 8024656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024658:	1ad3      	subs	r3, r2, r3
 802465a:	2b02      	cmp	r3, #2
 802465c:	d901      	bls.n	8024662 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 802465e:	2303      	movs	r3, #3
 8024660:	e099      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8024662:	4b14      	ldr	r3, [pc, #80]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024664:	681b      	ldr	r3, [r3, #0]
 8024666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802466a:	2b00      	cmp	r3, #0
 802466c:	d0f0      	beq.n	8024650 <HAL_RCC_OscConfig+0xc64>
 802466e:	e091      	b.n	8024794 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8024670:	4b10      	ldr	r3, [pc, #64]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024672:	681b      	ldr	r3, [r3, #0]
 8024674:	4a0f      	ldr	r2, [pc, #60]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802467a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 802467c:	f7fd fefe 	bl	802247c <HAL_GetTick>
 8024680:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8024682:	e008      	b.n	8024696 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8024684:	f7fd fefa 	bl	802247c <HAL_GetTick>
 8024688:	4602      	mov	r2, r0
 802468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802468c:	1ad3      	subs	r3, r2, r3
 802468e:	2b02      	cmp	r3, #2
 8024690:	d901      	bls.n	8024696 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8024692:	2303      	movs	r3, #3
 8024694:	e07f      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8024696:	4b07      	ldr	r3, [pc, #28]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802469e:	2b00      	cmp	r3, #0
 80246a0:	d1f0      	bne.n	8024684 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80246a2:	4b04      	ldr	r3, [pc, #16]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80246a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80246a6:	4a03      	ldr	r2, [pc, #12]	; (80246b4 <HAL_RCC_OscConfig+0xcc8>)
 80246a8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80246ac:	f023 0303 	bic.w	r3, r3, #3
 80246b0:	6293      	str	r3, [r2, #40]	; 0x28
 80246b2:	e06f      	b.n	8024794 <HAL_RCC_OscConfig+0xda8>
 80246b4:	46020c00 	.word	0x46020c00
 80246b8:	46020800 	.word	0x46020800
 80246bc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80246c0:	4b37      	ldr	r3, [pc, #220]	; (80247a0 <HAL_RCC_OscConfig+0xdb4>)
 80246c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80246c4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80246c6:	4b36      	ldr	r3, [pc, #216]	; (80247a0 <HAL_RCC_OscConfig+0xdb4>)
 80246c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80246ca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80246cc:	687b      	ldr	r3, [r7, #4]
 80246ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80246d0:	2b01      	cmp	r3, #1
 80246d2:	d039      	beq.n	8024748 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80246d4:	69fb      	ldr	r3, [r7, #28]
 80246d6:	f003 0203 	and.w	r2, r3, #3
 80246da:	687b      	ldr	r3, [r7, #4]
 80246dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80246de:	429a      	cmp	r2, r3
 80246e0:	d132      	bne.n	8024748 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80246e2:	69fb      	ldr	r3, [r7, #28]
 80246e4:	0a1b      	lsrs	r3, r3, #8
 80246e6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80246ea:	687b      	ldr	r3, [r7, #4]
 80246ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80246ee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80246f0:	429a      	cmp	r2, r3
 80246f2:	d129      	bne.n	8024748 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80246f4:	69fb      	ldr	r3, [r7, #28]
 80246f6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80246fa:	687b      	ldr	r3, [r7, #4]
 80246fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80246fe:	429a      	cmp	r2, r3
 8024700:	d122      	bne.n	8024748 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8024702:	69bb      	ldr	r3, [r7, #24]
 8024704:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802470c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 802470e:	429a      	cmp	r2, r3
 8024710:	d11a      	bne.n	8024748 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8024712:	69bb      	ldr	r3, [r7, #24]
 8024714:	0a5b      	lsrs	r3, r3, #9
 8024716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802471a:	687b      	ldr	r3, [r7, #4]
 802471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802471e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8024720:	429a      	cmp	r2, r3
 8024722:	d111      	bne.n	8024748 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8024724:	69bb      	ldr	r3, [r7, #24]
 8024726:	0c1b      	lsrs	r3, r3, #16
 8024728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802472c:	687b      	ldr	r3, [r7, #4]
 802472e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024730:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8024732:	429a      	cmp	r2, r3
 8024734:	d108      	bne.n	8024748 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8024736:	69bb      	ldr	r3, [r7, #24]
 8024738:	0e1b      	lsrs	r3, r3, #24
 802473a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024742:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8024744:	429a      	cmp	r2, r3
 8024746:	d001      	beq.n	802474c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8024748:	2301      	movs	r3, #1
 802474a:	e024      	b.n	8024796 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 802474c:	4b14      	ldr	r3, [pc, #80]	; (80247a0 <HAL_RCC_OscConfig+0xdb4>)
 802474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024750:	08db      	lsrs	r3, r3, #3
 8024752:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8024756:	687b      	ldr	r3, [r7, #4]
 8024758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 802475a:	429a      	cmp	r2, r3
 802475c:	d01a      	beq.n	8024794 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 802475e:	4b10      	ldr	r3, [pc, #64]	; (80247a0 <HAL_RCC_OscConfig+0xdb4>)
 8024760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024762:	4a0f      	ldr	r2, [pc, #60]	; (80247a0 <HAL_RCC_OscConfig+0xdb4>)
 8024764:	f023 0310 	bic.w	r3, r3, #16
 8024768:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802476a:	f7fd fe87 	bl	802247c <HAL_GetTick>
 802476e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8024770:	bf00      	nop
 8024772:	f7fd fe83 	bl	802247c <HAL_GetTick>
 8024776:	4602      	mov	r2, r0
 8024778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802477a:	4293      	cmp	r3, r2
 802477c:	d0f9      	beq.n	8024772 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024782:	4a07      	ldr	r2, [pc, #28]	; (80247a0 <HAL_RCC_OscConfig+0xdb4>)
 8024784:	00db      	lsls	r3, r3, #3
 8024786:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8024788:	4b05      	ldr	r3, [pc, #20]	; (80247a0 <HAL_RCC_OscConfig+0xdb4>)
 802478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802478c:	4a04      	ldr	r2, [pc, #16]	; (80247a0 <HAL_RCC_OscConfig+0xdb4>)
 802478e:	f043 0310 	orr.w	r3, r3, #16
 8024792:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8024794:	2300      	movs	r3, #0
}
 8024796:	4618      	mov	r0, r3
 8024798:	3738      	adds	r7, #56	; 0x38
 802479a:	46bd      	mov	sp, r7
 802479c:	bd80      	pop	{r7, pc}
 802479e:	bf00      	nop
 80247a0:	46020c00 	.word	0x46020c00

080247a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80247a4:	b580      	push	{r7, lr}
 80247a6:	b086      	sub	sp, #24
 80247a8:	af00      	add	r7, sp, #0
 80247aa:	6078      	str	r0, [r7, #4]
 80247ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80247ae:	687b      	ldr	r3, [r7, #4]
 80247b0:	2b00      	cmp	r3, #0
 80247b2:	d101      	bne.n	80247b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80247b4:	2301      	movs	r3, #1
 80247b6:	e1d9      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80247b8:	4b9b      	ldr	r3, [pc, #620]	; (8024a28 <HAL_RCC_ClockConfig+0x284>)
 80247ba:	681b      	ldr	r3, [r3, #0]
 80247bc:	f003 030f 	and.w	r3, r3, #15
 80247c0:	683a      	ldr	r2, [r7, #0]
 80247c2:	429a      	cmp	r2, r3
 80247c4:	d910      	bls.n	80247e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80247c6:	4b98      	ldr	r3, [pc, #608]	; (8024a28 <HAL_RCC_ClockConfig+0x284>)
 80247c8:	681b      	ldr	r3, [r3, #0]
 80247ca:	f023 020f 	bic.w	r2, r3, #15
 80247ce:	4996      	ldr	r1, [pc, #600]	; (8024a28 <HAL_RCC_ClockConfig+0x284>)
 80247d0:	683b      	ldr	r3, [r7, #0]
 80247d2:	4313      	orrs	r3, r2
 80247d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80247d6:	4b94      	ldr	r3, [pc, #592]	; (8024a28 <HAL_RCC_ClockConfig+0x284>)
 80247d8:	681b      	ldr	r3, [r3, #0]
 80247da:	f003 030f 	and.w	r3, r3, #15
 80247de:	683a      	ldr	r2, [r7, #0]
 80247e0:	429a      	cmp	r2, r3
 80247e2:	d001      	beq.n	80247e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80247e4:	2301      	movs	r3, #1
 80247e6:	e1c1      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	681b      	ldr	r3, [r3, #0]
 80247ec:	f003 0310 	and.w	r3, r3, #16
 80247f0:	2b00      	cmp	r3, #0
 80247f2:	d010      	beq.n	8024816 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80247f4:	687b      	ldr	r3, [r7, #4]
 80247f6:	695a      	ldr	r2, [r3, #20]
 80247f8:	4b8c      	ldr	r3, [pc, #560]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 80247fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80247fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8024800:	429a      	cmp	r2, r3
 8024802:	d908      	bls.n	8024816 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8024804:	4b89      	ldr	r3, [pc, #548]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024808:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802480c:	687b      	ldr	r3, [r7, #4]
 802480e:	695b      	ldr	r3, [r3, #20]
 8024810:	4986      	ldr	r1, [pc, #536]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024812:	4313      	orrs	r3, r2
 8024814:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024816:	687b      	ldr	r3, [r7, #4]
 8024818:	681b      	ldr	r3, [r3, #0]
 802481a:	f003 0308 	and.w	r3, r3, #8
 802481e:	2b00      	cmp	r3, #0
 8024820:	d012      	beq.n	8024848 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8024822:	687b      	ldr	r3, [r7, #4]
 8024824:	691a      	ldr	r2, [r3, #16]
 8024826:	4b81      	ldr	r3, [pc, #516]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024828:	6a1b      	ldr	r3, [r3, #32]
 802482a:	091b      	lsrs	r3, r3, #4
 802482c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8024830:	429a      	cmp	r2, r3
 8024832:	d909      	bls.n	8024848 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8024834:	4b7d      	ldr	r3, [pc, #500]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024836:	6a1b      	ldr	r3, [r3, #32]
 8024838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	691b      	ldr	r3, [r3, #16]
 8024840:	011b      	lsls	r3, r3, #4
 8024842:	497a      	ldr	r1, [pc, #488]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024844:	4313      	orrs	r3, r2
 8024846:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024848:	687b      	ldr	r3, [r7, #4]
 802484a:	681b      	ldr	r3, [r3, #0]
 802484c:	f003 0304 	and.w	r3, r3, #4
 8024850:	2b00      	cmp	r3, #0
 8024852:	d010      	beq.n	8024876 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	68da      	ldr	r2, [r3, #12]
 8024858:	4b74      	ldr	r3, [pc, #464]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 802485a:	6a1b      	ldr	r3, [r3, #32]
 802485c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8024860:	429a      	cmp	r2, r3
 8024862:	d908      	bls.n	8024876 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8024864:	4b71      	ldr	r3, [pc, #452]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024866:	6a1b      	ldr	r3, [r3, #32]
 8024868:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	68db      	ldr	r3, [r3, #12]
 8024870:	496e      	ldr	r1, [pc, #440]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024872:	4313      	orrs	r3, r2
 8024874:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8024876:	687b      	ldr	r3, [r7, #4]
 8024878:	681b      	ldr	r3, [r3, #0]
 802487a:	f003 0302 	and.w	r3, r3, #2
 802487e:	2b00      	cmp	r3, #0
 8024880:	d010      	beq.n	80248a4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8024882:	687b      	ldr	r3, [r7, #4]
 8024884:	689a      	ldr	r2, [r3, #8]
 8024886:	4b69      	ldr	r3, [pc, #420]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024888:	6a1b      	ldr	r3, [r3, #32]
 802488a:	f003 030f 	and.w	r3, r3, #15
 802488e:	429a      	cmp	r2, r3
 8024890:	d908      	bls.n	80248a4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8024892:	4b66      	ldr	r3, [pc, #408]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024894:	6a1b      	ldr	r3, [r3, #32]
 8024896:	f023 020f 	bic.w	r2, r3, #15
 802489a:	687b      	ldr	r3, [r7, #4]
 802489c:	689b      	ldr	r3, [r3, #8]
 802489e:	4963      	ldr	r1, [pc, #396]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 80248a0:	4313      	orrs	r3, r2
 80248a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	681b      	ldr	r3, [r3, #0]
 80248a8:	f003 0301 	and.w	r3, r3, #1
 80248ac:	2b00      	cmp	r3, #0
 80248ae:	f000 80d2 	beq.w	8024a56 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80248b2:	2300      	movs	r3, #0
 80248b4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80248b6:	687b      	ldr	r3, [r7, #4]
 80248b8:	685b      	ldr	r3, [r3, #4]
 80248ba:	2b03      	cmp	r3, #3
 80248bc:	d143      	bne.n	8024946 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80248be:	4b5b      	ldr	r3, [pc, #364]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 80248c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80248c4:	f003 0304 	and.w	r3, r3, #4
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	d110      	bne.n	80248ee <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80248cc:	4b57      	ldr	r3, [pc, #348]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 80248ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80248d2:	4a56      	ldr	r2, [pc, #344]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 80248d4:	f043 0304 	orr.w	r3, r3, #4
 80248d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80248dc:	4b53      	ldr	r3, [pc, #332]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 80248de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80248e2:	f003 0304 	and.w	r3, r3, #4
 80248e6:	60bb      	str	r3, [r7, #8]
 80248e8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80248ea:	2301      	movs	r3, #1
 80248ec:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80248ee:	f7fd fdc5 	bl	802247c <HAL_GetTick>
 80248f2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80248f4:	4b4e      	ldr	r3, [pc, #312]	; (8024a30 <HAL_RCC_ClockConfig+0x28c>)
 80248f6:	68db      	ldr	r3, [r3, #12]
 80248f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80248fc:	2b00      	cmp	r3, #0
 80248fe:	d00f      	beq.n	8024920 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8024900:	e008      	b.n	8024914 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8024902:	f7fd fdbb 	bl	802247c <HAL_GetTick>
 8024906:	4602      	mov	r2, r0
 8024908:	693b      	ldr	r3, [r7, #16]
 802490a:	1ad3      	subs	r3, r2, r3
 802490c:	2b02      	cmp	r3, #2
 802490e:	d901      	bls.n	8024914 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8024910:	2303      	movs	r3, #3
 8024912:	e12b      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8024914:	4b46      	ldr	r3, [pc, #280]	; (8024a30 <HAL_RCC_ClockConfig+0x28c>)
 8024916:	68db      	ldr	r3, [r3, #12]
 8024918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802491c:	2b00      	cmp	r3, #0
 802491e:	d0f0      	beq.n	8024902 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8024920:	7dfb      	ldrb	r3, [r7, #23]
 8024922:	2b01      	cmp	r3, #1
 8024924:	d107      	bne.n	8024936 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8024926:	4b41      	ldr	r3, [pc, #260]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802492c:	4a3f      	ldr	r2, [pc, #252]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 802492e:	f023 0304 	bic.w	r3, r3, #4
 8024932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8024936:	4b3d      	ldr	r3, [pc, #244]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802493e:	2b00      	cmp	r3, #0
 8024940:	d121      	bne.n	8024986 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8024942:	2301      	movs	r3, #1
 8024944:	e112      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024946:	687b      	ldr	r3, [r7, #4]
 8024948:	685b      	ldr	r3, [r3, #4]
 802494a:	2b02      	cmp	r3, #2
 802494c:	d107      	bne.n	802495e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 802494e:	4b37      	ldr	r3, [pc, #220]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024950:	681b      	ldr	r3, [r3, #0]
 8024952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024956:	2b00      	cmp	r3, #0
 8024958:	d115      	bne.n	8024986 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 802495a:	2301      	movs	r3, #1
 802495c:	e106      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 802495e:	687b      	ldr	r3, [r7, #4]
 8024960:	685b      	ldr	r3, [r3, #4]
 8024962:	2b00      	cmp	r3, #0
 8024964:	d107      	bne.n	8024976 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8024966:	4b31      	ldr	r3, [pc, #196]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024968:	681b      	ldr	r3, [r3, #0]
 802496a:	f003 0304 	and.w	r3, r3, #4
 802496e:	2b00      	cmp	r3, #0
 8024970:	d109      	bne.n	8024986 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8024972:	2301      	movs	r3, #1
 8024974:	e0fa      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8024976:	4b2d      	ldr	r3, [pc, #180]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024978:	681b      	ldr	r3, [r3, #0]
 802497a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802497e:	2b00      	cmp	r3, #0
 8024980:	d101      	bne.n	8024986 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8024982:	2301      	movs	r3, #1
 8024984:	e0f2      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8024986:	4b29      	ldr	r3, [pc, #164]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024988:	69db      	ldr	r3, [r3, #28]
 802498a:	f023 0203 	bic.w	r2, r3, #3
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	685b      	ldr	r3, [r3, #4]
 8024992:	4926      	ldr	r1, [pc, #152]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024994:	4313      	orrs	r3, r2
 8024996:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8024998:	f7fd fd70 	bl	802247c <HAL_GetTick>
 802499c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802499e:	687b      	ldr	r3, [r7, #4]
 80249a0:	685b      	ldr	r3, [r3, #4]
 80249a2:	2b03      	cmp	r3, #3
 80249a4:	d112      	bne.n	80249cc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80249a6:	e00a      	b.n	80249be <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80249a8:	f7fd fd68 	bl	802247c <HAL_GetTick>
 80249ac:	4602      	mov	r2, r0
 80249ae:	693b      	ldr	r3, [r7, #16]
 80249b0:	1ad3      	subs	r3, r2, r3
 80249b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80249b6:	4293      	cmp	r3, r2
 80249b8:	d901      	bls.n	80249be <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80249ba:	2303      	movs	r3, #3
 80249bc:	e0d6      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80249be:	4b1b      	ldr	r3, [pc, #108]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 80249c0:	69db      	ldr	r3, [r3, #28]
 80249c2:	f003 030c 	and.w	r3, r3, #12
 80249c6:	2b0c      	cmp	r3, #12
 80249c8:	d1ee      	bne.n	80249a8 <HAL_RCC_ClockConfig+0x204>
 80249ca:	e044      	b.n	8024a56 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	685b      	ldr	r3, [r3, #4]
 80249d0:	2b02      	cmp	r3, #2
 80249d2:	d112      	bne.n	80249fa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80249d4:	e00a      	b.n	80249ec <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80249d6:	f7fd fd51 	bl	802247c <HAL_GetTick>
 80249da:	4602      	mov	r2, r0
 80249dc:	693b      	ldr	r3, [r7, #16]
 80249de:	1ad3      	subs	r3, r2, r3
 80249e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80249e4:	4293      	cmp	r3, r2
 80249e6:	d901      	bls.n	80249ec <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80249e8:	2303      	movs	r3, #3
 80249ea:	e0bf      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80249ec:	4b0f      	ldr	r3, [pc, #60]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 80249ee:	69db      	ldr	r3, [r3, #28]
 80249f0:	f003 030c 	and.w	r3, r3, #12
 80249f4:	2b08      	cmp	r3, #8
 80249f6:	d1ee      	bne.n	80249d6 <HAL_RCC_ClockConfig+0x232>
 80249f8:	e02d      	b.n	8024a56 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80249fa:	687b      	ldr	r3, [r7, #4]
 80249fc:	685b      	ldr	r3, [r3, #4]
 80249fe:	2b00      	cmp	r3, #0
 8024a00:	d123      	bne.n	8024a4a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8024a02:	e00a      	b.n	8024a1a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8024a04:	f7fd fd3a 	bl	802247c <HAL_GetTick>
 8024a08:	4602      	mov	r2, r0
 8024a0a:	693b      	ldr	r3, [r7, #16]
 8024a0c:	1ad3      	subs	r3, r2, r3
 8024a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8024a12:	4293      	cmp	r3, r2
 8024a14:	d901      	bls.n	8024a1a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8024a16:	2303      	movs	r3, #3
 8024a18:	e0a8      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8024a1a:	4b04      	ldr	r3, [pc, #16]	; (8024a2c <HAL_RCC_ClockConfig+0x288>)
 8024a1c:	69db      	ldr	r3, [r3, #28]
 8024a1e:	f003 030c 	and.w	r3, r3, #12
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	d1ee      	bne.n	8024a04 <HAL_RCC_ClockConfig+0x260>
 8024a26:	e016      	b.n	8024a56 <HAL_RCC_ClockConfig+0x2b2>
 8024a28:	40022000 	.word	0x40022000
 8024a2c:	46020c00 	.word	0x46020c00
 8024a30:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8024a34:	f7fd fd22 	bl	802247c <HAL_GetTick>
 8024a38:	4602      	mov	r2, r0
 8024a3a:	693b      	ldr	r3, [r7, #16]
 8024a3c:	1ad3      	subs	r3, r2, r3
 8024a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8024a42:	4293      	cmp	r3, r2
 8024a44:	d901      	bls.n	8024a4a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8024a46:	2303      	movs	r3, #3
 8024a48:	e090      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8024a4a:	4b4a      	ldr	r3, [pc, #296]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024a4c:	69db      	ldr	r3, [r3, #28]
 8024a4e:	f003 030c 	and.w	r3, r3, #12
 8024a52:	2b04      	cmp	r3, #4
 8024a54:	d1ee      	bne.n	8024a34 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8024a56:	687b      	ldr	r3, [r7, #4]
 8024a58:	681b      	ldr	r3, [r3, #0]
 8024a5a:	f003 0302 	and.w	r3, r3, #2
 8024a5e:	2b00      	cmp	r3, #0
 8024a60:	d010      	beq.n	8024a84 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8024a62:	687b      	ldr	r3, [r7, #4]
 8024a64:	689a      	ldr	r2, [r3, #8]
 8024a66:	4b43      	ldr	r3, [pc, #268]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024a68:	6a1b      	ldr	r3, [r3, #32]
 8024a6a:	f003 030f 	and.w	r3, r3, #15
 8024a6e:	429a      	cmp	r2, r3
 8024a70:	d208      	bcs.n	8024a84 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8024a72:	4b40      	ldr	r3, [pc, #256]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024a74:	6a1b      	ldr	r3, [r3, #32]
 8024a76:	f023 020f 	bic.w	r2, r3, #15
 8024a7a:	687b      	ldr	r3, [r7, #4]
 8024a7c:	689b      	ldr	r3, [r3, #8]
 8024a7e:	493d      	ldr	r1, [pc, #244]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024a80:	4313      	orrs	r3, r2
 8024a82:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8024a84:	4b3c      	ldr	r3, [pc, #240]	; (8024b78 <HAL_RCC_ClockConfig+0x3d4>)
 8024a86:	681b      	ldr	r3, [r3, #0]
 8024a88:	f003 030f 	and.w	r3, r3, #15
 8024a8c:	683a      	ldr	r2, [r7, #0]
 8024a8e:	429a      	cmp	r2, r3
 8024a90:	d210      	bcs.n	8024ab4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024a92:	4b39      	ldr	r3, [pc, #228]	; (8024b78 <HAL_RCC_ClockConfig+0x3d4>)
 8024a94:	681b      	ldr	r3, [r3, #0]
 8024a96:	f023 020f 	bic.w	r2, r3, #15
 8024a9a:	4937      	ldr	r1, [pc, #220]	; (8024b78 <HAL_RCC_ClockConfig+0x3d4>)
 8024a9c:	683b      	ldr	r3, [r7, #0]
 8024a9e:	4313      	orrs	r3, r2
 8024aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8024aa2:	4b35      	ldr	r3, [pc, #212]	; (8024b78 <HAL_RCC_ClockConfig+0x3d4>)
 8024aa4:	681b      	ldr	r3, [r3, #0]
 8024aa6:	f003 030f 	and.w	r3, r3, #15
 8024aaa:	683a      	ldr	r2, [r7, #0]
 8024aac:	429a      	cmp	r2, r3
 8024aae:	d001      	beq.n	8024ab4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8024ab0:	2301      	movs	r3, #1
 8024ab2:	e05b      	b.n	8024b6c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024ab4:	687b      	ldr	r3, [r7, #4]
 8024ab6:	681b      	ldr	r3, [r3, #0]
 8024ab8:	f003 0304 	and.w	r3, r3, #4
 8024abc:	2b00      	cmp	r3, #0
 8024abe:	d010      	beq.n	8024ae2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	68da      	ldr	r2, [r3, #12]
 8024ac4:	4b2b      	ldr	r3, [pc, #172]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024ac6:	6a1b      	ldr	r3, [r3, #32]
 8024ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8024acc:	429a      	cmp	r2, r3
 8024ace:	d208      	bcs.n	8024ae2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8024ad0:	4b28      	ldr	r3, [pc, #160]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024ad2:	6a1b      	ldr	r3, [r3, #32]
 8024ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8024ad8:	687b      	ldr	r3, [r7, #4]
 8024ada:	68db      	ldr	r3, [r3, #12]
 8024adc:	4925      	ldr	r1, [pc, #148]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024ade:	4313      	orrs	r3, r2
 8024ae0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	f003 0308 	and.w	r3, r3, #8
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d012      	beq.n	8024b14 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8024aee:	687b      	ldr	r3, [r7, #4]
 8024af0:	691a      	ldr	r2, [r3, #16]
 8024af2:	4b20      	ldr	r3, [pc, #128]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024af4:	6a1b      	ldr	r3, [r3, #32]
 8024af6:	091b      	lsrs	r3, r3, #4
 8024af8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8024afc:	429a      	cmp	r2, r3
 8024afe:	d209      	bcs.n	8024b14 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8024b00:	4b1c      	ldr	r3, [pc, #112]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024b02:	6a1b      	ldr	r3, [r3, #32]
 8024b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8024b08:	687b      	ldr	r3, [r7, #4]
 8024b0a:	691b      	ldr	r3, [r3, #16]
 8024b0c:	011b      	lsls	r3, r3, #4
 8024b0e:	4919      	ldr	r1, [pc, #100]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024b10:	4313      	orrs	r3, r2
 8024b12:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8024b14:	687b      	ldr	r3, [r7, #4]
 8024b16:	681b      	ldr	r3, [r3, #0]
 8024b18:	f003 0310 	and.w	r3, r3, #16
 8024b1c:	2b00      	cmp	r3, #0
 8024b1e:	d010      	beq.n	8024b42 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8024b20:	687b      	ldr	r3, [r7, #4]
 8024b22:	695a      	ldr	r2, [r3, #20]
 8024b24:	4b13      	ldr	r3, [pc, #76]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8024b2c:	429a      	cmp	r2, r3
 8024b2e:	d208      	bcs.n	8024b42 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8024b30:	4b10      	ldr	r3, [pc, #64]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	695b      	ldr	r3, [r3, #20]
 8024b3c:	490d      	ldr	r1, [pc, #52]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024b3e:	4313      	orrs	r3, r2
 8024b40:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8024b42:	f000 f821 	bl	8024b88 <HAL_RCC_GetSysClockFreq>
 8024b46:	4602      	mov	r2, r0
 8024b48:	4b0a      	ldr	r3, [pc, #40]	; (8024b74 <HAL_RCC_ClockConfig+0x3d0>)
 8024b4a:	6a1b      	ldr	r3, [r3, #32]
 8024b4c:	f003 030f 	and.w	r3, r3, #15
 8024b50:	490a      	ldr	r1, [pc, #40]	; (8024b7c <HAL_RCC_ClockConfig+0x3d8>)
 8024b52:	5ccb      	ldrb	r3, [r1, r3]
 8024b54:	fa22 f303 	lsr.w	r3, r2, r3
 8024b58:	4a09      	ldr	r2, [pc, #36]	; (8024b80 <HAL_RCC_ClockConfig+0x3dc>)
 8024b5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8024b5c:	4b09      	ldr	r3, [pc, #36]	; (8024b84 <HAL_RCC_ClockConfig+0x3e0>)
 8024b5e:	681b      	ldr	r3, [r3, #0]
 8024b60:	4618      	mov	r0, r3
 8024b62:	f7e0 f93b 	bl	8004ddc <HAL_InitTick>
 8024b66:	4603      	mov	r3, r0
 8024b68:	73fb      	strb	r3, [r7, #15]

  return status;
 8024b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8024b6c:	4618      	mov	r0, r3
 8024b6e:	3718      	adds	r7, #24
 8024b70:	46bd      	mov	sp, r7
 8024b72:	bd80      	pop	{r7, pc}
 8024b74:	46020c00 	.word	0x46020c00
 8024b78:	40022000 	.word	0x40022000
 8024b7c:	0803264c 	.word	0x0803264c
 8024b80:	20000380 	.word	0x20000380
 8024b84:	20000564 	.word	0x20000564

08024b88 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8024b88:	b480      	push	{r7}
 8024b8a:	b08b      	sub	sp, #44	; 0x2c
 8024b8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8024b8e:	2300      	movs	r3, #0
 8024b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8024b92:	2300      	movs	r3, #0
 8024b94:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8024b96:	4b78      	ldr	r3, [pc, #480]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024b98:	69db      	ldr	r3, [r3, #28]
 8024b9a:	f003 030c 	and.w	r3, r3, #12
 8024b9e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8024ba0:	4b75      	ldr	r3, [pc, #468]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024ba4:	f003 0303 	and.w	r3, r3, #3
 8024ba8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8024baa:	69bb      	ldr	r3, [r7, #24]
 8024bac:	2b00      	cmp	r3, #0
 8024bae:	d005      	beq.n	8024bbc <HAL_RCC_GetSysClockFreq+0x34>
 8024bb0:	69bb      	ldr	r3, [r7, #24]
 8024bb2:	2b0c      	cmp	r3, #12
 8024bb4:	d121      	bne.n	8024bfa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8024bb6:	697b      	ldr	r3, [r7, #20]
 8024bb8:	2b01      	cmp	r3, #1
 8024bba:	d11e      	bne.n	8024bfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8024bbc:	4b6e      	ldr	r3, [pc, #440]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024bbe:	689b      	ldr	r3, [r3, #8]
 8024bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8024bc4:	2b00      	cmp	r3, #0
 8024bc6:	d107      	bne.n	8024bd8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8024bc8:	4b6b      	ldr	r3, [pc, #428]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024bca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8024bce:	0b1b      	lsrs	r3, r3, #12
 8024bd0:	f003 030f 	and.w	r3, r3, #15
 8024bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8024bd6:	e005      	b.n	8024be4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8024bd8:	4b67      	ldr	r3, [pc, #412]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024bda:	689b      	ldr	r3, [r3, #8]
 8024bdc:	0f1b      	lsrs	r3, r3, #28
 8024bde:	f003 030f 	and.w	r3, r3, #15
 8024be2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8024be4:	4a65      	ldr	r2, [pc, #404]	; (8024d7c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8024be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024bec:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8024bee:	69bb      	ldr	r3, [r7, #24]
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	d110      	bne.n	8024c16 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8024bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bf6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8024bf8:	e00d      	b.n	8024c16 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8024bfa:	4b5f      	ldr	r3, [pc, #380]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024bfc:	69db      	ldr	r3, [r3, #28]
 8024bfe:	f003 030c 	and.w	r3, r3, #12
 8024c02:	2b04      	cmp	r3, #4
 8024c04:	d102      	bne.n	8024c0c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8024c06:	4b5e      	ldr	r3, [pc, #376]	; (8024d80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8024c08:	623b      	str	r3, [r7, #32]
 8024c0a:	e004      	b.n	8024c16 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8024c0c:	69bb      	ldr	r3, [r7, #24]
 8024c0e:	2b08      	cmp	r3, #8
 8024c10:	d101      	bne.n	8024c16 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8024c12:	4b5b      	ldr	r3, [pc, #364]	; (8024d80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8024c14:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8024c16:	69bb      	ldr	r3, [r7, #24]
 8024c18:	2b0c      	cmp	r3, #12
 8024c1a:	f040 80a5 	bne.w	8024d68 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8024c1e:	4b56      	ldr	r3, [pc, #344]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c22:	f003 0303 	and.w	r3, r3, #3
 8024c26:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8024c28:	4b53      	ldr	r3, [pc, #332]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c2c:	0a1b      	lsrs	r3, r3, #8
 8024c2e:	f003 030f 	and.w	r3, r3, #15
 8024c32:	3301      	adds	r3, #1
 8024c34:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8024c36:	4b50      	ldr	r3, [pc, #320]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c3a:	091b      	lsrs	r3, r3, #4
 8024c3c:	f003 0301 	and.w	r3, r3, #1
 8024c40:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8024c42:	4b4d      	ldr	r3, [pc, #308]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024c46:	08db      	lsrs	r3, r3, #3
 8024c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024c4c:	68ba      	ldr	r2, [r7, #8]
 8024c4e:	fb02 f303 	mul.w	r3, r2, r3
 8024c52:	ee07 3a90 	vmov	s15, r3
 8024c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024c5a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8024c5e:	693b      	ldr	r3, [r7, #16]
 8024c60:	2b02      	cmp	r3, #2
 8024c62:	d003      	beq.n	8024c6c <HAL_RCC_GetSysClockFreq+0xe4>
 8024c64:	693b      	ldr	r3, [r7, #16]
 8024c66:	2b03      	cmp	r3, #3
 8024c68:	d022      	beq.n	8024cb0 <HAL_RCC_GetSysClockFreq+0x128>
 8024c6a:	e043      	b.n	8024cf4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024c6c:	68fb      	ldr	r3, [r7, #12]
 8024c6e:	ee07 3a90 	vmov	s15, r3
 8024c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024c76:	eddf 6a43 	vldr	s13, [pc, #268]	; 8024d84 <HAL_RCC_GetSysClockFreq+0x1fc>
 8024c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8024c7e:	4b3e      	ldr	r3, [pc, #248]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024c86:	ee07 3a90 	vmov	s15, r3
 8024c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8024c8e:	ed97 6a01 	vldr	s12, [r7, #4]
 8024c92:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8024d88 <HAL_RCC_GetSysClockFreq+0x200>
 8024c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8024c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8024cae:	e046      	b.n	8024d3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024cb0:	68fb      	ldr	r3, [r7, #12]
 8024cb2:	ee07 3a90 	vmov	s15, r3
 8024cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024cba:	eddf 6a32 	vldr	s13, [pc, #200]	; 8024d84 <HAL_RCC_GetSysClockFreq+0x1fc>
 8024cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8024cc2:	4b2d      	ldr	r3, [pc, #180]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024cca:	ee07 3a90 	vmov	s15, r3
 8024cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8024cd2:	ed97 6a01 	vldr	s12, [r7, #4]
 8024cd6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8024d88 <HAL_RCC_GetSysClockFreq+0x200>
 8024cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8024ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8024cf2:	e024      	b.n	8024d3e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024cf6:	ee07 3a90 	vmov	s15, r3
 8024cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8024cfe:	68fb      	ldr	r3, [r7, #12]
 8024d00:	ee07 3a90 	vmov	s15, r3
 8024d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8024d0c:	4b1a      	ldr	r3, [pc, #104]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024d14:	ee07 3a90 	vmov	s15, r3
 8024d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8024d1c:	ed97 6a01 	vldr	s12, [r7, #4]
 8024d20:	eddf 5a19 	vldr	s11, [pc, #100]	; 8024d88 <HAL_RCC_GetSysClockFreq+0x200>
 8024d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8024d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8024d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8024d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024d38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8024d3c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8024d3e:	4b0e      	ldr	r3, [pc, #56]	; (8024d78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8024d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024d42:	0e1b      	lsrs	r3, r3, #24
 8024d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024d48:	3301      	adds	r3, #1
 8024d4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8024d4c:	683b      	ldr	r3, [r7, #0]
 8024d4e:	ee07 3a90 	vmov	s15, r3
 8024d52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8024d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8024d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024d62:	ee17 3a90 	vmov	r3, s15
 8024d66:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8024d68:	6a3b      	ldr	r3, [r7, #32]
}
 8024d6a:	4618      	mov	r0, r3
 8024d6c:	372c      	adds	r7, #44	; 0x2c
 8024d6e:	46bd      	mov	sp, r7
 8024d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d74:	4770      	bx	lr
 8024d76:	bf00      	nop
 8024d78:	46020c00 	.word	0x46020c00
 8024d7c:	08032664 	.word	0x08032664
 8024d80:	00f42400 	.word	0x00f42400
 8024d84:	4b742400 	.word	0x4b742400
 8024d88:	46000000 	.word	0x46000000

08024d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8024d8c:	b580      	push	{r7, lr}
 8024d8e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8024d90:	f7ff fefa 	bl	8024b88 <HAL_RCC_GetSysClockFreq>
 8024d94:	4602      	mov	r2, r0
 8024d96:	4b07      	ldr	r3, [pc, #28]	; (8024db4 <HAL_RCC_GetHCLKFreq+0x28>)
 8024d98:	6a1b      	ldr	r3, [r3, #32]
 8024d9a:	f003 030f 	and.w	r3, r3, #15
 8024d9e:	4906      	ldr	r1, [pc, #24]	; (8024db8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8024da0:	5ccb      	ldrb	r3, [r1, r3]
 8024da2:	fa22 f303 	lsr.w	r3, r2, r3
 8024da6:	4a05      	ldr	r2, [pc, #20]	; (8024dbc <HAL_RCC_GetHCLKFreq+0x30>)
 8024da8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8024daa:	4b04      	ldr	r3, [pc, #16]	; (8024dbc <HAL_RCC_GetHCLKFreq+0x30>)
 8024dac:	681b      	ldr	r3, [r3, #0]
}
 8024dae:	4618      	mov	r0, r3
 8024db0:	bd80      	pop	{r7, pc}
 8024db2:	bf00      	nop
 8024db4:	46020c00 	.word	0x46020c00
 8024db8:	0803264c 	.word	0x0803264c
 8024dbc:	20000380 	.word	0x20000380

08024dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8024dc0:	b580      	push	{r7, lr}
 8024dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8024dc4:	f7ff ffe2 	bl	8024d8c <HAL_RCC_GetHCLKFreq>
 8024dc8:	4602      	mov	r2, r0
 8024dca:	4b05      	ldr	r3, [pc, #20]	; (8024de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8024dcc:	6a1b      	ldr	r3, [r3, #32]
 8024dce:	091b      	lsrs	r3, r3, #4
 8024dd0:	f003 0307 	and.w	r3, r3, #7
 8024dd4:	4903      	ldr	r1, [pc, #12]	; (8024de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8024dd6:	5ccb      	ldrb	r3, [r1, r3]
 8024dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8024ddc:	4618      	mov	r0, r3
 8024dde:	bd80      	pop	{r7, pc}
 8024de0:	46020c00 	.word	0x46020c00
 8024de4:	0803265c 	.word	0x0803265c

08024de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8024de8:	b580      	push	{r7, lr}
 8024dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8024dec:	f7ff ffce 	bl	8024d8c <HAL_RCC_GetHCLKFreq>
 8024df0:	4602      	mov	r2, r0
 8024df2:	4b05      	ldr	r3, [pc, #20]	; (8024e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8024df4:	6a1b      	ldr	r3, [r3, #32]
 8024df6:	0a1b      	lsrs	r3, r3, #8
 8024df8:	f003 0307 	and.w	r3, r3, #7
 8024dfc:	4903      	ldr	r1, [pc, #12]	; (8024e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8024dfe:	5ccb      	ldrb	r3, [r1, r3]
 8024e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8024e04:	4618      	mov	r0, r3
 8024e06:	bd80      	pop	{r7, pc}
 8024e08:	46020c00 	.word	0x46020c00
 8024e0c:	0803265c 	.word	0x0803265c

08024e10 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8024e10:	b480      	push	{r7}
 8024e12:	b083      	sub	sp, #12
 8024e14:	af00      	add	r7, sp, #0
 8024e16:	6078      	str	r0, [r7, #4]
 8024e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8024e1a:	687b      	ldr	r3, [r7, #4]
 8024e1c:	221f      	movs	r2, #31
 8024e1e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8024e20:	4b15      	ldr	r3, [pc, #84]	; (8024e78 <HAL_RCC_GetClockConfig+0x68>)
 8024e22:	69db      	ldr	r3, [r3, #28]
 8024e24:	f003 0203 	and.w	r2, r3, #3
 8024e28:	687b      	ldr	r3, [r7, #4]
 8024e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8024e2c:	4b12      	ldr	r3, [pc, #72]	; (8024e78 <HAL_RCC_GetClockConfig+0x68>)
 8024e2e:	6a1b      	ldr	r3, [r3, #32]
 8024e30:	f003 020f 	and.w	r2, r3, #15
 8024e34:	687b      	ldr	r3, [r7, #4]
 8024e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8024e38:	4b0f      	ldr	r3, [pc, #60]	; (8024e78 <HAL_RCC_GetClockConfig+0x68>)
 8024e3a:	6a1b      	ldr	r3, [r3, #32]
 8024e3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8024e40:	687b      	ldr	r3, [r7, #4]
 8024e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8024e44:	4b0c      	ldr	r3, [pc, #48]	; (8024e78 <HAL_RCC_GetClockConfig+0x68>)
 8024e46:	6a1b      	ldr	r3, [r3, #32]
 8024e48:	091b      	lsrs	r3, r3, #4
 8024e4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8024e52:	4b09      	ldr	r3, [pc, #36]	; (8024e78 <HAL_RCC_GetClockConfig+0x68>)
 8024e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8024e5a:	687b      	ldr	r3, [r7, #4]
 8024e5c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8024e5e:	4b07      	ldr	r3, [pc, #28]	; (8024e7c <HAL_RCC_GetClockConfig+0x6c>)
 8024e60:	681b      	ldr	r3, [r3, #0]
 8024e62:	f003 020f 	and.w	r2, r3, #15
 8024e66:	683b      	ldr	r3, [r7, #0]
 8024e68:	601a      	str	r2, [r3, #0]
}
 8024e6a:	bf00      	nop
 8024e6c:	370c      	adds	r7, #12
 8024e6e:	46bd      	mov	sp, r7
 8024e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e74:	4770      	bx	lr
 8024e76:	bf00      	nop
 8024e78:	46020c00 	.word	0x46020c00
 8024e7c:	40022000 	.word	0x40022000

08024e80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8024e80:	b580      	push	{r7, lr}
 8024e82:	b086      	sub	sp, #24
 8024e84:	af00      	add	r7, sp, #0
 8024e86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8024e88:	4b3e      	ldr	r3, [pc, #248]	; (8024f84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8024e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8024e8e:	f003 0304 	and.w	r3, r3, #4
 8024e92:	2b00      	cmp	r3, #0
 8024e94:	d003      	beq.n	8024e9e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8024e96:	f7fe fd2b 	bl	80238f0 <HAL_PWREx_GetVoltageRange>
 8024e9a:	6178      	str	r0, [r7, #20]
 8024e9c:	e019      	b.n	8024ed2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8024e9e:	4b39      	ldr	r3, [pc, #228]	; (8024f84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8024ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8024ea4:	4a37      	ldr	r2, [pc, #220]	; (8024f84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8024ea6:	f043 0304 	orr.w	r3, r3, #4
 8024eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8024eae:	4b35      	ldr	r3, [pc, #212]	; (8024f84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8024eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8024eb4:	f003 0304 	and.w	r3, r3, #4
 8024eb8:	60fb      	str	r3, [r7, #12]
 8024eba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8024ebc:	f7fe fd18 	bl	80238f0 <HAL_PWREx_GetVoltageRange>
 8024ec0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8024ec2:	4b30      	ldr	r3, [pc, #192]	; (8024f84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8024ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8024ec8:	4a2e      	ldr	r2, [pc, #184]	; (8024f84 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8024eca:	f023 0304 	bic.w	r3, r3, #4
 8024ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8024ed2:	697b      	ldr	r3, [r7, #20]
 8024ed4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8024ed8:	d003      	beq.n	8024ee2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8024eda:	697b      	ldr	r3, [r7, #20]
 8024edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8024ee0:	d109      	bne.n	8024ef6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8024ee2:	687b      	ldr	r3, [r7, #4]
 8024ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8024ee8:	d202      	bcs.n	8024ef0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8024eea:	2301      	movs	r3, #1
 8024eec:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8024eee:	e033      	b.n	8024f58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8024ef0:	2300      	movs	r3, #0
 8024ef2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8024ef4:	e030      	b.n	8024f58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8024ef6:	687b      	ldr	r3, [r7, #4]
 8024ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8024efc:	d208      	bcs.n	8024f10 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8024efe:	697b      	ldr	r3, [r7, #20]
 8024f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024f04:	d102      	bne.n	8024f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8024f06:	2303      	movs	r3, #3
 8024f08:	613b      	str	r3, [r7, #16]
 8024f0a:	e025      	b.n	8024f58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8024f0c:	2301      	movs	r3, #1
 8024f0e:	e035      	b.n	8024f7c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8024f10:	687b      	ldr	r3, [r7, #4]
 8024f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8024f16:	d90f      	bls.n	8024f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8024f18:	697b      	ldr	r3, [r7, #20]
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d109      	bne.n	8024f32 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8024f1e:	687b      	ldr	r3, [r7, #4]
 8024f20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8024f24:	d902      	bls.n	8024f2c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8024f26:	2300      	movs	r3, #0
 8024f28:	613b      	str	r3, [r7, #16]
 8024f2a:	e015      	b.n	8024f58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8024f2c:	2301      	movs	r3, #1
 8024f2e:	613b      	str	r3, [r7, #16]
 8024f30:	e012      	b.n	8024f58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8024f32:	2300      	movs	r3, #0
 8024f34:	613b      	str	r3, [r7, #16]
 8024f36:	e00f      	b.n	8024f58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8024f38:	687b      	ldr	r3, [r7, #4]
 8024f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8024f3e:	d109      	bne.n	8024f54 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8024f40:	697b      	ldr	r3, [r7, #20]
 8024f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024f46:	d102      	bne.n	8024f4e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8024f48:	2301      	movs	r3, #1
 8024f4a:	613b      	str	r3, [r7, #16]
 8024f4c:	e004      	b.n	8024f58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8024f4e:	2302      	movs	r3, #2
 8024f50:	613b      	str	r3, [r7, #16]
 8024f52:	e001      	b.n	8024f58 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8024f54:	2301      	movs	r3, #1
 8024f56:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8024f58:	4b0b      	ldr	r3, [pc, #44]	; (8024f88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8024f5a:	681b      	ldr	r3, [r3, #0]
 8024f5c:	f023 020f 	bic.w	r2, r3, #15
 8024f60:	4909      	ldr	r1, [pc, #36]	; (8024f88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8024f62:	693b      	ldr	r3, [r7, #16]
 8024f64:	4313      	orrs	r3, r2
 8024f66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8024f68:	4b07      	ldr	r3, [pc, #28]	; (8024f88 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8024f6a:	681b      	ldr	r3, [r3, #0]
 8024f6c:	f003 030f 	and.w	r3, r3, #15
 8024f70:	693a      	ldr	r2, [r7, #16]
 8024f72:	429a      	cmp	r2, r3
 8024f74:	d001      	beq.n	8024f7a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8024f76:	2301      	movs	r3, #1
 8024f78:	e000      	b.n	8024f7c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8024f7a:	2300      	movs	r3, #0
}
 8024f7c:	4618      	mov	r0, r3
 8024f7e:	3718      	adds	r7, #24
 8024f80:	46bd      	mov	sp, r7
 8024f82:	bd80      	pop	{r7, pc}
 8024f84:	46020c00 	.word	0x46020c00
 8024f88:	40022000 	.word	0x40022000

08024f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8024f8c:	b580      	push	{r7, lr}
 8024f8e:	b082      	sub	sp, #8
 8024f90:	af00      	add	r7, sp, #0
 8024f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8024f94:	687b      	ldr	r3, [r7, #4]
 8024f96:	2b00      	cmp	r3, #0
 8024f98:	d101      	bne.n	8024f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8024f9a:	2301      	movs	r3, #1
 8024f9c:	e049      	b.n	8025032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024fa4:	b2db      	uxtb	r3, r3
 8024fa6:	2b00      	cmp	r3, #0
 8024fa8:	d106      	bne.n	8024fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	2200      	movs	r2, #0
 8024fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8024fb2:	6878      	ldr	r0, [r7, #4]
 8024fb4:	f000 f841 	bl	802503a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024fb8:	687b      	ldr	r3, [r7, #4]
 8024fba:	2202      	movs	r2, #2
 8024fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	681a      	ldr	r2, [r3, #0]
 8024fc4:	687b      	ldr	r3, [r7, #4]
 8024fc6:	3304      	adds	r3, #4
 8024fc8:	4619      	mov	r1, r3
 8024fca:	4610      	mov	r0, r2
 8024fcc:	f000 fa58 	bl	8025480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8024fd0:	687b      	ldr	r3, [r7, #4]
 8024fd2:	2201      	movs	r2, #1
 8024fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8024fd8:	687b      	ldr	r3, [r7, #4]
 8024fda:	2201      	movs	r2, #1
 8024fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	2201      	movs	r2, #1
 8024fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8024fe8:	687b      	ldr	r3, [r7, #4]
 8024fea:	2201      	movs	r2, #1
 8024fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8024ff0:	687b      	ldr	r3, [r7, #4]
 8024ff2:	2201      	movs	r2, #1
 8024ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	2201      	movs	r2, #1
 8024ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	2201      	movs	r2, #1
 8025004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8025008:	687b      	ldr	r3, [r7, #4]
 802500a:	2201      	movs	r2, #1
 802500c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	2201      	movs	r2, #1
 8025014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8025018:	687b      	ldr	r3, [r7, #4]
 802501a:	2201      	movs	r2, #1
 802501c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8025020:	687b      	ldr	r3, [r7, #4]
 8025022:	2201      	movs	r2, #1
 8025024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025028:	687b      	ldr	r3, [r7, #4]
 802502a:	2201      	movs	r2, #1
 802502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8025030:	2300      	movs	r3, #0
}
 8025032:	4618      	mov	r0, r3
 8025034:	3708      	adds	r7, #8
 8025036:	46bd      	mov	sp, r7
 8025038:	bd80      	pop	{r7, pc}

0802503a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 802503a:	b480      	push	{r7}
 802503c:	b083      	sub	sp, #12
 802503e:	af00      	add	r7, sp, #0
 8025040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8025042:	bf00      	nop
 8025044:	370c      	adds	r7, #12
 8025046:	46bd      	mov	sp, r7
 8025048:	f85d 7b04 	ldr.w	r7, [sp], #4
 802504c:	4770      	bx	lr
	...

08025050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8025050:	b480      	push	{r7}
 8025052:	b085      	sub	sp, #20
 8025054:	af00      	add	r7, sp, #0
 8025056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8025058:	687b      	ldr	r3, [r7, #4]
 802505a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802505e:	b2db      	uxtb	r3, r3
 8025060:	2b01      	cmp	r3, #1
 8025062:	d001      	beq.n	8025068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8025064:	2301      	movs	r3, #1
 8025066:	e072      	b.n	802514e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025068:	687b      	ldr	r3, [r7, #4]
 802506a:	2202      	movs	r2, #2
 802506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	681b      	ldr	r3, [r3, #0]
 8025074:	68da      	ldr	r2, [r3, #12]
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	681b      	ldr	r3, [r3, #0]
 802507a:	f042 0201 	orr.w	r2, r2, #1
 802507e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8025080:	687b      	ldr	r3, [r7, #4]
 8025082:	681b      	ldr	r3, [r3, #0]
 8025084:	4a35      	ldr	r2, [pc, #212]	; (802515c <HAL_TIM_Base_Start_IT+0x10c>)
 8025086:	4293      	cmp	r3, r2
 8025088:	d040      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 802508a:	687b      	ldr	r3, [r7, #4]
 802508c:	681b      	ldr	r3, [r3, #0]
 802508e:	4a34      	ldr	r2, [pc, #208]	; (8025160 <HAL_TIM_Base_Start_IT+0x110>)
 8025090:	4293      	cmp	r3, r2
 8025092:	d03b      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802509c:	d036      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	681b      	ldr	r3, [r3, #0]
 80250a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80250a6:	d031      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250a8:	687b      	ldr	r3, [r7, #4]
 80250aa:	681b      	ldr	r3, [r3, #0]
 80250ac:	4a2d      	ldr	r2, [pc, #180]	; (8025164 <HAL_TIM_Base_Start_IT+0x114>)
 80250ae:	4293      	cmp	r3, r2
 80250b0:	d02c      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	681b      	ldr	r3, [r3, #0]
 80250b6:	4a2c      	ldr	r2, [pc, #176]	; (8025168 <HAL_TIM_Base_Start_IT+0x118>)
 80250b8:	4293      	cmp	r3, r2
 80250ba:	d027      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	681b      	ldr	r3, [r3, #0]
 80250c0:	4a2a      	ldr	r2, [pc, #168]	; (802516c <HAL_TIM_Base_Start_IT+0x11c>)
 80250c2:	4293      	cmp	r3, r2
 80250c4:	d022      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	681b      	ldr	r3, [r3, #0]
 80250ca:	4a29      	ldr	r2, [pc, #164]	; (8025170 <HAL_TIM_Base_Start_IT+0x120>)
 80250cc:	4293      	cmp	r3, r2
 80250ce:	d01d      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250d0:	687b      	ldr	r3, [r7, #4]
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	4a27      	ldr	r2, [pc, #156]	; (8025174 <HAL_TIM_Base_Start_IT+0x124>)
 80250d6:	4293      	cmp	r3, r2
 80250d8:	d018      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250da:	687b      	ldr	r3, [r7, #4]
 80250dc:	681b      	ldr	r3, [r3, #0]
 80250de:	4a26      	ldr	r2, [pc, #152]	; (8025178 <HAL_TIM_Base_Start_IT+0x128>)
 80250e0:	4293      	cmp	r3, r2
 80250e2:	d013      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	681b      	ldr	r3, [r3, #0]
 80250e8:	4a24      	ldr	r2, [pc, #144]	; (802517c <HAL_TIM_Base_Start_IT+0x12c>)
 80250ea:	4293      	cmp	r3, r2
 80250ec:	d00e      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250ee:	687b      	ldr	r3, [r7, #4]
 80250f0:	681b      	ldr	r3, [r3, #0]
 80250f2:	4a23      	ldr	r2, [pc, #140]	; (8025180 <HAL_TIM_Base_Start_IT+0x130>)
 80250f4:	4293      	cmp	r3, r2
 80250f6:	d009      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 80250f8:	687b      	ldr	r3, [r7, #4]
 80250fa:	681b      	ldr	r3, [r3, #0]
 80250fc:	4a21      	ldr	r2, [pc, #132]	; (8025184 <HAL_TIM_Base_Start_IT+0x134>)
 80250fe:	4293      	cmp	r3, r2
 8025100:	d004      	beq.n	802510c <HAL_TIM_Base_Start_IT+0xbc>
 8025102:	687b      	ldr	r3, [r7, #4]
 8025104:	681b      	ldr	r3, [r3, #0]
 8025106:	4a20      	ldr	r2, [pc, #128]	; (8025188 <HAL_TIM_Base_Start_IT+0x138>)
 8025108:	4293      	cmp	r3, r2
 802510a:	d115      	bne.n	8025138 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802510c:	687b      	ldr	r3, [r7, #4]
 802510e:	681b      	ldr	r3, [r3, #0]
 8025110:	689a      	ldr	r2, [r3, #8]
 8025112:	4b1e      	ldr	r3, [pc, #120]	; (802518c <HAL_TIM_Base_Start_IT+0x13c>)
 8025114:	4013      	ands	r3, r2
 8025116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025118:	68fb      	ldr	r3, [r7, #12]
 802511a:	2b06      	cmp	r3, #6
 802511c:	d015      	beq.n	802514a <HAL_TIM_Base_Start_IT+0xfa>
 802511e:	68fb      	ldr	r3, [r7, #12]
 8025120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025124:	d011      	beq.n	802514a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8025126:	687b      	ldr	r3, [r7, #4]
 8025128:	681b      	ldr	r3, [r3, #0]
 802512a:	681a      	ldr	r2, [r3, #0]
 802512c:	687b      	ldr	r3, [r7, #4]
 802512e:	681b      	ldr	r3, [r3, #0]
 8025130:	f042 0201 	orr.w	r2, r2, #1
 8025134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8025136:	e008      	b.n	802514a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8025138:	687b      	ldr	r3, [r7, #4]
 802513a:	681b      	ldr	r3, [r3, #0]
 802513c:	681a      	ldr	r2, [r3, #0]
 802513e:	687b      	ldr	r3, [r7, #4]
 8025140:	681b      	ldr	r3, [r3, #0]
 8025142:	f042 0201 	orr.w	r2, r2, #1
 8025146:	601a      	str	r2, [r3, #0]
 8025148:	e000      	b.n	802514c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802514a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 802514c:	2300      	movs	r3, #0
}
 802514e:	4618      	mov	r0, r3
 8025150:	3714      	adds	r7, #20
 8025152:	46bd      	mov	sp, r7
 8025154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025158:	4770      	bx	lr
 802515a:	bf00      	nop
 802515c:	40012c00 	.word	0x40012c00
 8025160:	50012c00 	.word	0x50012c00
 8025164:	40000400 	.word	0x40000400
 8025168:	50000400 	.word	0x50000400
 802516c:	40000800 	.word	0x40000800
 8025170:	50000800 	.word	0x50000800
 8025174:	40000c00 	.word	0x40000c00
 8025178:	50000c00 	.word	0x50000c00
 802517c:	40013400 	.word	0x40013400
 8025180:	50013400 	.word	0x50013400
 8025184:	40014000 	.word	0x40014000
 8025188:	50014000 	.word	0x50014000
 802518c:	00010007 	.word	0x00010007

08025190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8025190:	b580      	push	{r7, lr}
 8025192:	b084      	sub	sp, #16
 8025194:	af00      	add	r7, sp, #0
 8025196:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8025198:	687b      	ldr	r3, [r7, #4]
 802519a:	681b      	ldr	r3, [r3, #0]
 802519c:	68db      	ldr	r3, [r3, #12]
 802519e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	681b      	ldr	r3, [r3, #0]
 80251a4:	691b      	ldr	r3, [r3, #16]
 80251a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80251a8:	68bb      	ldr	r3, [r7, #8]
 80251aa:	f003 0302 	and.w	r3, r3, #2
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	d020      	beq.n	80251f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80251b2:	68fb      	ldr	r3, [r7, #12]
 80251b4:	f003 0302 	and.w	r3, r3, #2
 80251b8:	2b00      	cmp	r3, #0
 80251ba:	d01b      	beq.n	80251f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80251bc:	687b      	ldr	r3, [r7, #4]
 80251be:	681b      	ldr	r3, [r3, #0]
 80251c0:	f06f 0202 	mvn.w	r2, #2
 80251c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80251c6:	687b      	ldr	r3, [r7, #4]
 80251c8:	2201      	movs	r2, #1
 80251ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80251cc:	687b      	ldr	r3, [r7, #4]
 80251ce:	681b      	ldr	r3, [r3, #0]
 80251d0:	699b      	ldr	r3, [r3, #24]
 80251d2:	f003 0303 	and.w	r3, r3, #3
 80251d6:	2b00      	cmp	r3, #0
 80251d8:	d003      	beq.n	80251e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80251da:	6878      	ldr	r0, [r7, #4]
 80251dc:	f000 f931 	bl	8025442 <HAL_TIM_IC_CaptureCallback>
 80251e0:	e005      	b.n	80251ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80251e2:	6878      	ldr	r0, [r7, #4]
 80251e4:	f000 f923 	bl	802542e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80251e8:	6878      	ldr	r0, [r7, #4]
 80251ea:	f000 f934 	bl	8025456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80251ee:	687b      	ldr	r3, [r7, #4]
 80251f0:	2200      	movs	r2, #0
 80251f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80251f4:	68bb      	ldr	r3, [r7, #8]
 80251f6:	f003 0304 	and.w	r3, r3, #4
 80251fa:	2b00      	cmp	r3, #0
 80251fc:	d020      	beq.n	8025240 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80251fe:	68fb      	ldr	r3, [r7, #12]
 8025200:	f003 0304 	and.w	r3, r3, #4
 8025204:	2b00      	cmp	r3, #0
 8025206:	d01b      	beq.n	8025240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8025208:	687b      	ldr	r3, [r7, #4]
 802520a:	681b      	ldr	r3, [r3, #0]
 802520c:	f06f 0204 	mvn.w	r2, #4
 8025210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8025212:	687b      	ldr	r3, [r7, #4]
 8025214:	2202      	movs	r2, #2
 8025216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8025218:	687b      	ldr	r3, [r7, #4]
 802521a:	681b      	ldr	r3, [r3, #0]
 802521c:	699b      	ldr	r3, [r3, #24]
 802521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025222:	2b00      	cmp	r3, #0
 8025224:	d003      	beq.n	802522e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025226:	6878      	ldr	r0, [r7, #4]
 8025228:	f000 f90b 	bl	8025442 <HAL_TIM_IC_CaptureCallback>
 802522c:	e005      	b.n	802523a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802522e:	6878      	ldr	r0, [r7, #4]
 8025230:	f000 f8fd 	bl	802542e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025234:	6878      	ldr	r0, [r7, #4]
 8025236:	f000 f90e 	bl	8025456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802523a:	687b      	ldr	r3, [r7, #4]
 802523c:	2200      	movs	r2, #0
 802523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8025240:	68bb      	ldr	r3, [r7, #8]
 8025242:	f003 0308 	and.w	r3, r3, #8
 8025246:	2b00      	cmp	r3, #0
 8025248:	d020      	beq.n	802528c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 802524a:	68fb      	ldr	r3, [r7, #12]
 802524c:	f003 0308 	and.w	r3, r3, #8
 8025250:	2b00      	cmp	r3, #0
 8025252:	d01b      	beq.n	802528c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8025254:	687b      	ldr	r3, [r7, #4]
 8025256:	681b      	ldr	r3, [r3, #0]
 8025258:	f06f 0208 	mvn.w	r2, #8
 802525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802525e:	687b      	ldr	r3, [r7, #4]
 8025260:	2204      	movs	r2, #4
 8025262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8025264:	687b      	ldr	r3, [r7, #4]
 8025266:	681b      	ldr	r3, [r3, #0]
 8025268:	69db      	ldr	r3, [r3, #28]
 802526a:	f003 0303 	and.w	r3, r3, #3
 802526e:	2b00      	cmp	r3, #0
 8025270:	d003      	beq.n	802527a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025272:	6878      	ldr	r0, [r7, #4]
 8025274:	f000 f8e5 	bl	8025442 <HAL_TIM_IC_CaptureCallback>
 8025278:	e005      	b.n	8025286 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802527a:	6878      	ldr	r0, [r7, #4]
 802527c:	f000 f8d7 	bl	802542e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8025280:	6878      	ldr	r0, [r7, #4]
 8025282:	f000 f8e8 	bl	8025456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025286:	687b      	ldr	r3, [r7, #4]
 8025288:	2200      	movs	r2, #0
 802528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 802528c:	68bb      	ldr	r3, [r7, #8]
 802528e:	f003 0310 	and.w	r3, r3, #16
 8025292:	2b00      	cmp	r3, #0
 8025294:	d020      	beq.n	80252d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8025296:	68fb      	ldr	r3, [r7, #12]
 8025298:	f003 0310 	and.w	r3, r3, #16
 802529c:	2b00      	cmp	r3, #0
 802529e:	d01b      	beq.n	80252d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	681b      	ldr	r3, [r3, #0]
 80252a4:	f06f 0210 	mvn.w	r2, #16
 80252a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80252aa:	687b      	ldr	r3, [r7, #4]
 80252ac:	2208      	movs	r2, #8
 80252ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80252b0:	687b      	ldr	r3, [r7, #4]
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	69db      	ldr	r3, [r3, #28]
 80252b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80252ba:	2b00      	cmp	r3, #0
 80252bc:	d003      	beq.n	80252c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80252be:	6878      	ldr	r0, [r7, #4]
 80252c0:	f000 f8bf 	bl	8025442 <HAL_TIM_IC_CaptureCallback>
 80252c4:	e005      	b.n	80252d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80252c6:	6878      	ldr	r0, [r7, #4]
 80252c8:	f000 f8b1 	bl	802542e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80252cc:	6878      	ldr	r0, [r7, #4]
 80252ce:	f000 f8c2 	bl	8025456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80252d2:	687b      	ldr	r3, [r7, #4]
 80252d4:	2200      	movs	r2, #0
 80252d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80252d8:	68bb      	ldr	r3, [r7, #8]
 80252da:	f003 0301 	and.w	r3, r3, #1
 80252de:	2b00      	cmp	r3, #0
 80252e0:	d00c      	beq.n	80252fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80252e2:	68fb      	ldr	r3, [r7, #12]
 80252e4:	f003 0301 	and.w	r3, r3, #1
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	d007      	beq.n	80252fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80252ec:	687b      	ldr	r3, [r7, #4]
 80252ee:	681b      	ldr	r3, [r3, #0]
 80252f0:	f06f 0201 	mvn.w	r2, #1
 80252f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80252f6:	6878      	ldr	r0, [r7, #4]
 80252f8:	f7de ffa8 	bl	800424c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80252fc:	68bb      	ldr	r3, [r7, #8]
 80252fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025302:	2b00      	cmp	r3, #0
 8025304:	d104      	bne.n	8025310 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8025306:	68bb      	ldr	r3, [r7, #8]
 8025308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 802530c:	2b00      	cmp	r3, #0
 802530e:	d00c      	beq.n	802532a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8025310:	68fb      	ldr	r3, [r7, #12]
 8025312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025316:	2b00      	cmp	r3, #0
 8025318:	d007      	beq.n	802532a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 802531a:	687b      	ldr	r3, [r7, #4]
 802531c:	681b      	ldr	r3, [r3, #0]
 802531e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8025322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8025324:	6878      	ldr	r0, [r7, #4]
 8025326:	f000 f9af 	bl	8025688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 802532a:	68bb      	ldr	r3, [r7, #8]
 802532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025330:	2b00      	cmp	r3, #0
 8025332:	d00c      	beq.n	802534e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8025334:	68fb      	ldr	r3, [r7, #12]
 8025336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802533a:	2b00      	cmp	r3, #0
 802533c:	d007      	beq.n	802534e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802533e:	687b      	ldr	r3, [r7, #4]
 8025340:	681b      	ldr	r3, [r3, #0]
 8025342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8025346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8025348:	6878      	ldr	r0, [r7, #4]
 802534a:	f000 f9a7 	bl	802569c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 802534e:	68bb      	ldr	r3, [r7, #8]
 8025350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025354:	2b00      	cmp	r3, #0
 8025356:	d00c      	beq.n	8025372 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8025358:	68fb      	ldr	r3, [r7, #12]
 802535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802535e:	2b00      	cmp	r3, #0
 8025360:	d007      	beq.n	8025372 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8025362:	687b      	ldr	r3, [r7, #4]
 8025364:	681b      	ldr	r3, [r3, #0]
 8025366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802536a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802536c:	6878      	ldr	r0, [r7, #4]
 802536e:	f000 f87c 	bl	802546a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8025372:	68bb      	ldr	r3, [r7, #8]
 8025374:	f003 0320 	and.w	r3, r3, #32
 8025378:	2b00      	cmp	r3, #0
 802537a:	d00c      	beq.n	8025396 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 802537c:	68fb      	ldr	r3, [r7, #12]
 802537e:	f003 0320 	and.w	r3, r3, #32
 8025382:	2b00      	cmp	r3, #0
 8025384:	d007      	beq.n	8025396 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8025386:	687b      	ldr	r3, [r7, #4]
 8025388:	681b      	ldr	r3, [r3, #0]
 802538a:	f06f 0220 	mvn.w	r2, #32
 802538e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8025390:	6878      	ldr	r0, [r7, #4]
 8025392:	f000 f96f 	bl	8025674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8025396:	68bb      	ldr	r3, [r7, #8]
 8025398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802539c:	2b00      	cmp	r3, #0
 802539e:	d00c      	beq.n	80253ba <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80253a0:	68fb      	ldr	r3, [r7, #12]
 80253a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80253a6:	2b00      	cmp	r3, #0
 80253a8:	d007      	beq.n	80253ba <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	681b      	ldr	r3, [r3, #0]
 80253ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80253b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80253b4:	6878      	ldr	r0, [r7, #4]
 80253b6:	f000 f97b 	bl	80256b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80253ba:	68bb      	ldr	r3, [r7, #8]
 80253bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80253c0:	2b00      	cmp	r3, #0
 80253c2:	d00c      	beq.n	80253de <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80253c4:	68fb      	ldr	r3, [r7, #12]
 80253c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	d007      	beq.n	80253de <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80253ce:	687b      	ldr	r3, [r7, #4]
 80253d0:	681b      	ldr	r3, [r3, #0]
 80253d2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80253d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80253d8:	6878      	ldr	r0, [r7, #4]
 80253da:	f000 f973 	bl	80256c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80253de:	68bb      	ldr	r3, [r7, #8]
 80253e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80253e4:	2b00      	cmp	r3, #0
 80253e6:	d00c      	beq.n	8025402 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80253e8:	68fb      	ldr	r3, [r7, #12]
 80253ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80253ee:	2b00      	cmp	r3, #0
 80253f0:	d007      	beq.n	8025402 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80253fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80253fc:	6878      	ldr	r0, [r7, #4]
 80253fe:	f000 f96b 	bl	80256d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8025402:	68bb      	ldr	r3, [r7, #8]
 8025404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8025408:	2b00      	cmp	r3, #0
 802540a:	d00c      	beq.n	8025426 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 802540c:	68fb      	ldr	r3, [r7, #12]
 802540e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8025412:	2b00      	cmp	r3, #0
 8025414:	d007      	beq.n	8025426 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8025416:	687b      	ldr	r3, [r7, #4]
 8025418:	681b      	ldr	r3, [r3, #0]
 802541a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 802541e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8025420:	6878      	ldr	r0, [r7, #4]
 8025422:	f000 f963 	bl	80256ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8025426:	bf00      	nop
 8025428:	3710      	adds	r7, #16
 802542a:	46bd      	mov	sp, r7
 802542c:	bd80      	pop	{r7, pc}

0802542e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802542e:	b480      	push	{r7}
 8025430:	b083      	sub	sp, #12
 8025432:	af00      	add	r7, sp, #0
 8025434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8025436:	bf00      	nop
 8025438:	370c      	adds	r7, #12
 802543a:	46bd      	mov	sp, r7
 802543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025440:	4770      	bx	lr

08025442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8025442:	b480      	push	{r7}
 8025444:	b083      	sub	sp, #12
 8025446:	af00      	add	r7, sp, #0
 8025448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802544a:	bf00      	nop
 802544c:	370c      	adds	r7, #12
 802544e:	46bd      	mov	sp, r7
 8025450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025454:	4770      	bx	lr

08025456 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8025456:	b480      	push	{r7}
 8025458:	b083      	sub	sp, #12
 802545a:	af00      	add	r7, sp, #0
 802545c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802545e:	bf00      	nop
 8025460:	370c      	adds	r7, #12
 8025462:	46bd      	mov	sp, r7
 8025464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025468:	4770      	bx	lr

0802546a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802546a:	b480      	push	{r7}
 802546c:	b083      	sub	sp, #12
 802546e:	af00      	add	r7, sp, #0
 8025470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8025472:	bf00      	nop
 8025474:	370c      	adds	r7, #12
 8025476:	46bd      	mov	sp, r7
 8025478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802547c:	4770      	bx	lr
	...

08025480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8025480:	b480      	push	{r7}
 8025482:	b085      	sub	sp, #20
 8025484:	af00      	add	r7, sp, #0
 8025486:	6078      	str	r0, [r7, #4]
 8025488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802548a:	687b      	ldr	r3, [r7, #4]
 802548c:	681b      	ldr	r3, [r3, #0]
 802548e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	4a68      	ldr	r2, [pc, #416]	; (8025634 <TIM_Base_SetConfig+0x1b4>)
 8025494:	4293      	cmp	r3, r2
 8025496:	d02b      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 8025498:	687b      	ldr	r3, [r7, #4]
 802549a:	4a67      	ldr	r2, [pc, #412]	; (8025638 <TIM_Base_SetConfig+0x1b8>)
 802549c:	4293      	cmp	r3, r2
 802549e:	d027      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254a0:	687b      	ldr	r3, [r7, #4]
 80254a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80254a6:	d023      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80254ae:	d01f      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	4a62      	ldr	r2, [pc, #392]	; (802563c <TIM_Base_SetConfig+0x1bc>)
 80254b4:	4293      	cmp	r3, r2
 80254b6:	d01b      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254b8:	687b      	ldr	r3, [r7, #4]
 80254ba:	4a61      	ldr	r2, [pc, #388]	; (8025640 <TIM_Base_SetConfig+0x1c0>)
 80254bc:	4293      	cmp	r3, r2
 80254be:	d017      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254c0:	687b      	ldr	r3, [r7, #4]
 80254c2:	4a60      	ldr	r2, [pc, #384]	; (8025644 <TIM_Base_SetConfig+0x1c4>)
 80254c4:	4293      	cmp	r3, r2
 80254c6:	d013      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254c8:	687b      	ldr	r3, [r7, #4]
 80254ca:	4a5f      	ldr	r2, [pc, #380]	; (8025648 <TIM_Base_SetConfig+0x1c8>)
 80254cc:	4293      	cmp	r3, r2
 80254ce:	d00f      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254d0:	687b      	ldr	r3, [r7, #4]
 80254d2:	4a5e      	ldr	r2, [pc, #376]	; (802564c <TIM_Base_SetConfig+0x1cc>)
 80254d4:	4293      	cmp	r3, r2
 80254d6:	d00b      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254d8:	687b      	ldr	r3, [r7, #4]
 80254da:	4a5d      	ldr	r2, [pc, #372]	; (8025650 <TIM_Base_SetConfig+0x1d0>)
 80254dc:	4293      	cmp	r3, r2
 80254de:	d007      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254e0:	687b      	ldr	r3, [r7, #4]
 80254e2:	4a5c      	ldr	r2, [pc, #368]	; (8025654 <TIM_Base_SetConfig+0x1d4>)
 80254e4:	4293      	cmp	r3, r2
 80254e6:	d003      	beq.n	80254f0 <TIM_Base_SetConfig+0x70>
 80254e8:	687b      	ldr	r3, [r7, #4]
 80254ea:	4a5b      	ldr	r2, [pc, #364]	; (8025658 <TIM_Base_SetConfig+0x1d8>)
 80254ec:	4293      	cmp	r3, r2
 80254ee:	d108      	bne.n	8025502 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80254f0:	68fb      	ldr	r3, [r7, #12]
 80254f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80254f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80254f8:	683b      	ldr	r3, [r7, #0]
 80254fa:	685b      	ldr	r3, [r3, #4]
 80254fc:	68fa      	ldr	r2, [r7, #12]
 80254fe:	4313      	orrs	r3, r2
 8025500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8025502:	687b      	ldr	r3, [r7, #4]
 8025504:	4a4b      	ldr	r2, [pc, #300]	; (8025634 <TIM_Base_SetConfig+0x1b4>)
 8025506:	4293      	cmp	r3, r2
 8025508:	d043      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	4a4a      	ldr	r2, [pc, #296]	; (8025638 <TIM_Base_SetConfig+0x1b8>)
 802550e:	4293      	cmp	r3, r2
 8025510:	d03f      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 8025512:	687b      	ldr	r3, [r7, #4]
 8025514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025518:	d03b      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802551a:	687b      	ldr	r3, [r7, #4]
 802551c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8025520:	d037      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 8025522:	687b      	ldr	r3, [r7, #4]
 8025524:	4a45      	ldr	r2, [pc, #276]	; (802563c <TIM_Base_SetConfig+0x1bc>)
 8025526:	4293      	cmp	r3, r2
 8025528:	d033      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802552a:	687b      	ldr	r3, [r7, #4]
 802552c:	4a44      	ldr	r2, [pc, #272]	; (8025640 <TIM_Base_SetConfig+0x1c0>)
 802552e:	4293      	cmp	r3, r2
 8025530:	d02f      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 8025532:	687b      	ldr	r3, [r7, #4]
 8025534:	4a43      	ldr	r2, [pc, #268]	; (8025644 <TIM_Base_SetConfig+0x1c4>)
 8025536:	4293      	cmp	r3, r2
 8025538:	d02b      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802553a:	687b      	ldr	r3, [r7, #4]
 802553c:	4a42      	ldr	r2, [pc, #264]	; (8025648 <TIM_Base_SetConfig+0x1c8>)
 802553e:	4293      	cmp	r3, r2
 8025540:	d027      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 8025542:	687b      	ldr	r3, [r7, #4]
 8025544:	4a41      	ldr	r2, [pc, #260]	; (802564c <TIM_Base_SetConfig+0x1cc>)
 8025546:	4293      	cmp	r3, r2
 8025548:	d023      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	4a40      	ldr	r2, [pc, #256]	; (8025650 <TIM_Base_SetConfig+0x1d0>)
 802554e:	4293      	cmp	r3, r2
 8025550:	d01f      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 8025552:	687b      	ldr	r3, [r7, #4]
 8025554:	4a3f      	ldr	r2, [pc, #252]	; (8025654 <TIM_Base_SetConfig+0x1d4>)
 8025556:	4293      	cmp	r3, r2
 8025558:	d01b      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802555a:	687b      	ldr	r3, [r7, #4]
 802555c:	4a3e      	ldr	r2, [pc, #248]	; (8025658 <TIM_Base_SetConfig+0x1d8>)
 802555e:	4293      	cmp	r3, r2
 8025560:	d017      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 8025562:	687b      	ldr	r3, [r7, #4]
 8025564:	4a3d      	ldr	r2, [pc, #244]	; (802565c <TIM_Base_SetConfig+0x1dc>)
 8025566:	4293      	cmp	r3, r2
 8025568:	d013      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802556a:	687b      	ldr	r3, [r7, #4]
 802556c:	4a3c      	ldr	r2, [pc, #240]	; (8025660 <TIM_Base_SetConfig+0x1e0>)
 802556e:	4293      	cmp	r3, r2
 8025570:	d00f      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 8025572:	687b      	ldr	r3, [r7, #4]
 8025574:	4a3b      	ldr	r2, [pc, #236]	; (8025664 <TIM_Base_SetConfig+0x1e4>)
 8025576:	4293      	cmp	r3, r2
 8025578:	d00b      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802557a:	687b      	ldr	r3, [r7, #4]
 802557c:	4a3a      	ldr	r2, [pc, #232]	; (8025668 <TIM_Base_SetConfig+0x1e8>)
 802557e:	4293      	cmp	r3, r2
 8025580:	d007      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 8025582:	687b      	ldr	r3, [r7, #4]
 8025584:	4a39      	ldr	r2, [pc, #228]	; (802566c <TIM_Base_SetConfig+0x1ec>)
 8025586:	4293      	cmp	r3, r2
 8025588:	d003      	beq.n	8025592 <TIM_Base_SetConfig+0x112>
 802558a:	687b      	ldr	r3, [r7, #4]
 802558c:	4a38      	ldr	r2, [pc, #224]	; (8025670 <TIM_Base_SetConfig+0x1f0>)
 802558e:	4293      	cmp	r3, r2
 8025590:	d108      	bne.n	80255a4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8025592:	68fb      	ldr	r3, [r7, #12]
 8025594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802559a:	683b      	ldr	r3, [r7, #0]
 802559c:	68db      	ldr	r3, [r3, #12]
 802559e:	68fa      	ldr	r2, [r7, #12]
 80255a0:	4313      	orrs	r3, r2
 80255a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80255a4:	68fb      	ldr	r3, [r7, #12]
 80255a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80255aa:	683b      	ldr	r3, [r7, #0]
 80255ac:	695b      	ldr	r3, [r3, #20]
 80255ae:	4313      	orrs	r3, r2
 80255b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80255b2:	687b      	ldr	r3, [r7, #4]
 80255b4:	68fa      	ldr	r2, [r7, #12]
 80255b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80255b8:	683b      	ldr	r3, [r7, #0]
 80255ba:	689a      	ldr	r2, [r3, #8]
 80255bc:	687b      	ldr	r3, [r7, #4]
 80255be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80255c0:	683b      	ldr	r3, [r7, #0]
 80255c2:	681a      	ldr	r2, [r3, #0]
 80255c4:	687b      	ldr	r3, [r7, #4]
 80255c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80255c8:	687b      	ldr	r3, [r7, #4]
 80255ca:	4a1a      	ldr	r2, [pc, #104]	; (8025634 <TIM_Base_SetConfig+0x1b4>)
 80255cc:	4293      	cmp	r3, r2
 80255ce:	d023      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 80255d0:	687b      	ldr	r3, [r7, #4]
 80255d2:	4a19      	ldr	r2, [pc, #100]	; (8025638 <TIM_Base_SetConfig+0x1b8>)
 80255d4:	4293      	cmp	r3, r2
 80255d6:	d01f      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 80255d8:	687b      	ldr	r3, [r7, #4]
 80255da:	4a1e      	ldr	r2, [pc, #120]	; (8025654 <TIM_Base_SetConfig+0x1d4>)
 80255dc:	4293      	cmp	r3, r2
 80255de:	d01b      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 80255e0:	687b      	ldr	r3, [r7, #4]
 80255e2:	4a1d      	ldr	r2, [pc, #116]	; (8025658 <TIM_Base_SetConfig+0x1d8>)
 80255e4:	4293      	cmp	r3, r2
 80255e6:	d017      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 80255e8:	687b      	ldr	r3, [r7, #4]
 80255ea:	4a1c      	ldr	r2, [pc, #112]	; (802565c <TIM_Base_SetConfig+0x1dc>)
 80255ec:	4293      	cmp	r3, r2
 80255ee:	d013      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 80255f0:	687b      	ldr	r3, [r7, #4]
 80255f2:	4a1b      	ldr	r2, [pc, #108]	; (8025660 <TIM_Base_SetConfig+0x1e0>)
 80255f4:	4293      	cmp	r3, r2
 80255f6:	d00f      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 80255f8:	687b      	ldr	r3, [r7, #4]
 80255fa:	4a1a      	ldr	r2, [pc, #104]	; (8025664 <TIM_Base_SetConfig+0x1e4>)
 80255fc:	4293      	cmp	r3, r2
 80255fe:	d00b      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 8025600:	687b      	ldr	r3, [r7, #4]
 8025602:	4a19      	ldr	r2, [pc, #100]	; (8025668 <TIM_Base_SetConfig+0x1e8>)
 8025604:	4293      	cmp	r3, r2
 8025606:	d007      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 8025608:	687b      	ldr	r3, [r7, #4]
 802560a:	4a18      	ldr	r2, [pc, #96]	; (802566c <TIM_Base_SetConfig+0x1ec>)
 802560c:	4293      	cmp	r3, r2
 802560e:	d003      	beq.n	8025618 <TIM_Base_SetConfig+0x198>
 8025610:	687b      	ldr	r3, [r7, #4]
 8025612:	4a17      	ldr	r2, [pc, #92]	; (8025670 <TIM_Base_SetConfig+0x1f0>)
 8025614:	4293      	cmp	r3, r2
 8025616:	d103      	bne.n	8025620 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8025618:	683b      	ldr	r3, [r7, #0]
 802561a:	691a      	ldr	r2, [r3, #16]
 802561c:	687b      	ldr	r3, [r7, #4]
 802561e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8025620:	687b      	ldr	r3, [r7, #4]
 8025622:	2201      	movs	r2, #1
 8025624:	615a      	str	r2, [r3, #20]
}
 8025626:	bf00      	nop
 8025628:	3714      	adds	r7, #20
 802562a:	46bd      	mov	sp, r7
 802562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025630:	4770      	bx	lr
 8025632:	bf00      	nop
 8025634:	40012c00 	.word	0x40012c00
 8025638:	50012c00 	.word	0x50012c00
 802563c:	40000400 	.word	0x40000400
 8025640:	50000400 	.word	0x50000400
 8025644:	40000800 	.word	0x40000800
 8025648:	50000800 	.word	0x50000800
 802564c:	40000c00 	.word	0x40000c00
 8025650:	50000c00 	.word	0x50000c00
 8025654:	40013400 	.word	0x40013400
 8025658:	50013400 	.word	0x50013400
 802565c:	40014000 	.word	0x40014000
 8025660:	50014000 	.word	0x50014000
 8025664:	40014400 	.word	0x40014400
 8025668:	50014400 	.word	0x50014400
 802566c:	40014800 	.word	0x40014800
 8025670:	50014800 	.word	0x50014800

08025674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8025674:	b480      	push	{r7}
 8025676:	b083      	sub	sp, #12
 8025678:	af00      	add	r7, sp, #0
 802567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802567c:	bf00      	nop
 802567e:	370c      	adds	r7, #12
 8025680:	46bd      	mov	sp, r7
 8025682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025686:	4770      	bx	lr

08025688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8025688:	b480      	push	{r7}
 802568a:	b083      	sub	sp, #12
 802568c:	af00      	add	r7, sp, #0
 802568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8025690:	bf00      	nop
 8025692:	370c      	adds	r7, #12
 8025694:	46bd      	mov	sp, r7
 8025696:	f85d 7b04 	ldr.w	r7, [sp], #4
 802569a:	4770      	bx	lr

0802569c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 802569c:	b480      	push	{r7}
 802569e:	b083      	sub	sp, #12
 80256a0:	af00      	add	r7, sp, #0
 80256a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80256a4:	bf00      	nop
 80256a6:	370c      	adds	r7, #12
 80256a8:	46bd      	mov	sp, r7
 80256aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256ae:	4770      	bx	lr

080256b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80256b0:	b480      	push	{r7}
 80256b2:	b083      	sub	sp, #12
 80256b4:	af00      	add	r7, sp, #0
 80256b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80256b8:	bf00      	nop
 80256ba:	370c      	adds	r7, #12
 80256bc:	46bd      	mov	sp, r7
 80256be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256c2:	4770      	bx	lr

080256c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80256c4:	b480      	push	{r7}
 80256c6:	b083      	sub	sp, #12
 80256c8:	af00      	add	r7, sp, #0
 80256ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80256cc:	bf00      	nop
 80256ce:	370c      	adds	r7, #12
 80256d0:	46bd      	mov	sp, r7
 80256d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256d6:	4770      	bx	lr

080256d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80256d8:	b480      	push	{r7}
 80256da:	b083      	sub	sp, #12
 80256dc:	af00      	add	r7, sp, #0
 80256de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80256e0:	bf00      	nop
 80256e2:	370c      	adds	r7, #12
 80256e4:	46bd      	mov	sp, r7
 80256e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256ea:	4770      	bx	lr

080256ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80256ec:	b480      	push	{r7}
 80256ee:	b083      	sub	sp, #12
 80256f0:	af00      	add	r7, sp, #0
 80256f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80256f4:	bf00      	nop
 80256f6:	370c      	adds	r7, #12
 80256f8:	46bd      	mov	sp, r7
 80256fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256fe:	4770      	bx	lr

08025700 <__assert_func>:
 8025700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025702:	4614      	mov	r4, r2
 8025704:	461a      	mov	r2, r3
 8025706:	4b09      	ldr	r3, [pc, #36]	; (802572c <__assert_func+0x2c>)
 8025708:	4605      	mov	r5, r0
 802570a:	681b      	ldr	r3, [r3, #0]
 802570c:	68d8      	ldr	r0, [r3, #12]
 802570e:	b14c      	cbz	r4, 8025724 <__assert_func+0x24>
 8025710:	4b07      	ldr	r3, [pc, #28]	; (8025730 <__assert_func+0x30>)
 8025712:	9100      	str	r1, [sp, #0]
 8025714:	4907      	ldr	r1, [pc, #28]	; (8025734 <__assert_func+0x34>)
 8025716:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802571a:	462b      	mov	r3, r5
 802571c:	f000 fb0c 	bl	8025d38 <fiprintf>
 8025720:	f000 fcf7 	bl	8026112 <abort>
 8025724:	4b04      	ldr	r3, [pc, #16]	; (8025738 <__assert_func+0x38>)
 8025726:	461c      	mov	r4, r3
 8025728:	e7f3      	b.n	8025712 <__assert_func+0x12>
 802572a:	bf00      	nop
 802572c:	200005c4 	.word	0x200005c4
 8025730:	08034b4c 	.word	0x08034b4c
 8025734:	08034b59 	.word	0x08034b59
 8025738:	08034b87 	.word	0x08034b87

0802573c <calloc>:
 802573c:	4b02      	ldr	r3, [pc, #8]	; (8025748 <calloc+0xc>)
 802573e:	460a      	mov	r2, r1
 8025740:	4601      	mov	r1, r0
 8025742:	6818      	ldr	r0, [r3, #0]
 8025744:	f000 b802 	b.w	802574c <_calloc_r>
 8025748:	200005c4 	.word	0x200005c4

0802574c <_calloc_r>:
 802574c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802574e:	fba1 2402 	umull	r2, r4, r1, r2
 8025752:	b94c      	cbnz	r4, 8025768 <_calloc_r+0x1c>
 8025754:	4611      	mov	r1, r2
 8025756:	9201      	str	r2, [sp, #4]
 8025758:	f000 f83e 	bl	80257d8 <_malloc_r>
 802575c:	9a01      	ldr	r2, [sp, #4]
 802575e:	4605      	mov	r5, r0
 8025760:	b930      	cbnz	r0, 8025770 <_calloc_r+0x24>
 8025762:	4628      	mov	r0, r5
 8025764:	b003      	add	sp, #12
 8025766:	bd30      	pop	{r4, r5, pc}
 8025768:	220c      	movs	r2, #12
 802576a:	2500      	movs	r5, #0
 802576c:	6002      	str	r2, [r0, #0]
 802576e:	e7f8      	b.n	8025762 <_calloc_r+0x16>
 8025770:	4621      	mov	r1, r4
 8025772:	f000 fb64 	bl	8025e3e <memset>
 8025776:	e7f4      	b.n	8025762 <_calloc_r+0x16>

08025778 <malloc>:
 8025778:	4b02      	ldr	r3, [pc, #8]	; (8025784 <malloc+0xc>)
 802577a:	4601      	mov	r1, r0
 802577c:	6818      	ldr	r0, [r3, #0]
 802577e:	f000 b82b 	b.w	80257d8 <_malloc_r>
 8025782:	bf00      	nop
 8025784:	200005c4 	.word	0x200005c4

08025788 <free>:
 8025788:	4b02      	ldr	r3, [pc, #8]	; (8025794 <free+0xc>)
 802578a:	4601      	mov	r1, r0
 802578c:	6818      	ldr	r0, [r3, #0]
 802578e:	f000 bcc7 	b.w	8026120 <_free_r>
 8025792:	bf00      	nop
 8025794:	200005c4 	.word	0x200005c4

08025798 <sbrk_aligned>:
 8025798:	b570      	push	{r4, r5, r6, lr}
 802579a:	4e0e      	ldr	r6, [pc, #56]	; (80257d4 <sbrk_aligned+0x3c>)
 802579c:	460c      	mov	r4, r1
 802579e:	4605      	mov	r5, r0
 80257a0:	6831      	ldr	r1, [r6, #0]
 80257a2:	b911      	cbnz	r1, 80257aa <sbrk_aligned+0x12>
 80257a4:	f000 fc52 	bl	802604c <_sbrk_r>
 80257a8:	6030      	str	r0, [r6, #0]
 80257aa:	4621      	mov	r1, r4
 80257ac:	4628      	mov	r0, r5
 80257ae:	f000 fc4d 	bl	802604c <_sbrk_r>
 80257b2:	1c43      	adds	r3, r0, #1
 80257b4:	d00a      	beq.n	80257cc <sbrk_aligned+0x34>
 80257b6:	1cc4      	adds	r4, r0, #3
 80257b8:	f024 0403 	bic.w	r4, r4, #3
 80257bc:	42a0      	cmp	r0, r4
 80257be:	d007      	beq.n	80257d0 <sbrk_aligned+0x38>
 80257c0:	1a21      	subs	r1, r4, r0
 80257c2:	4628      	mov	r0, r5
 80257c4:	f000 fc42 	bl	802604c <_sbrk_r>
 80257c8:	3001      	adds	r0, #1
 80257ca:	d101      	bne.n	80257d0 <sbrk_aligned+0x38>
 80257cc:	f04f 34ff 	mov.w	r4, #4294967295
 80257d0:	4620      	mov	r0, r4
 80257d2:	bd70      	pop	{r4, r5, r6, pc}
 80257d4:	200029ec 	.word	0x200029ec

080257d8 <_malloc_r>:
 80257d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80257dc:	1ccd      	adds	r5, r1, #3
 80257de:	4607      	mov	r7, r0
 80257e0:	f025 0503 	bic.w	r5, r5, #3
 80257e4:	3508      	adds	r5, #8
 80257e6:	2d0c      	cmp	r5, #12
 80257e8:	bf38      	it	cc
 80257ea:	250c      	movcc	r5, #12
 80257ec:	2d00      	cmp	r5, #0
 80257ee:	db01      	blt.n	80257f4 <_malloc_r+0x1c>
 80257f0:	42a9      	cmp	r1, r5
 80257f2:	d905      	bls.n	8025800 <_malloc_r+0x28>
 80257f4:	230c      	movs	r3, #12
 80257f6:	2600      	movs	r6, #0
 80257f8:	603b      	str	r3, [r7, #0]
 80257fa:	4630      	mov	r0, r6
 80257fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025800:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80258d4 <_malloc_r+0xfc>
 8025804:	f000 f868 	bl	80258d8 <__malloc_lock>
 8025808:	f8d8 3000 	ldr.w	r3, [r8]
 802580c:	461c      	mov	r4, r3
 802580e:	bb5c      	cbnz	r4, 8025868 <_malloc_r+0x90>
 8025810:	4629      	mov	r1, r5
 8025812:	4638      	mov	r0, r7
 8025814:	f7ff ffc0 	bl	8025798 <sbrk_aligned>
 8025818:	1c43      	adds	r3, r0, #1
 802581a:	4604      	mov	r4, r0
 802581c:	d155      	bne.n	80258ca <_malloc_r+0xf2>
 802581e:	f8d8 4000 	ldr.w	r4, [r8]
 8025822:	4626      	mov	r6, r4
 8025824:	2e00      	cmp	r6, #0
 8025826:	d145      	bne.n	80258b4 <_malloc_r+0xdc>
 8025828:	2c00      	cmp	r4, #0
 802582a:	d048      	beq.n	80258be <_malloc_r+0xe6>
 802582c:	6823      	ldr	r3, [r4, #0]
 802582e:	4631      	mov	r1, r6
 8025830:	4638      	mov	r0, r7
 8025832:	eb04 0903 	add.w	r9, r4, r3
 8025836:	f000 fc09 	bl	802604c <_sbrk_r>
 802583a:	4581      	cmp	r9, r0
 802583c:	d13f      	bne.n	80258be <_malloc_r+0xe6>
 802583e:	6821      	ldr	r1, [r4, #0]
 8025840:	4638      	mov	r0, r7
 8025842:	1a6d      	subs	r5, r5, r1
 8025844:	4629      	mov	r1, r5
 8025846:	f7ff ffa7 	bl	8025798 <sbrk_aligned>
 802584a:	3001      	adds	r0, #1
 802584c:	d037      	beq.n	80258be <_malloc_r+0xe6>
 802584e:	6823      	ldr	r3, [r4, #0]
 8025850:	442b      	add	r3, r5
 8025852:	6023      	str	r3, [r4, #0]
 8025854:	f8d8 3000 	ldr.w	r3, [r8]
 8025858:	2b00      	cmp	r3, #0
 802585a:	d038      	beq.n	80258ce <_malloc_r+0xf6>
 802585c:	685a      	ldr	r2, [r3, #4]
 802585e:	42a2      	cmp	r2, r4
 8025860:	d12b      	bne.n	80258ba <_malloc_r+0xe2>
 8025862:	2200      	movs	r2, #0
 8025864:	605a      	str	r2, [r3, #4]
 8025866:	e00f      	b.n	8025888 <_malloc_r+0xb0>
 8025868:	6822      	ldr	r2, [r4, #0]
 802586a:	1b52      	subs	r2, r2, r5
 802586c:	d41f      	bmi.n	80258ae <_malloc_r+0xd6>
 802586e:	2a0b      	cmp	r2, #11
 8025870:	d917      	bls.n	80258a2 <_malloc_r+0xca>
 8025872:	1961      	adds	r1, r4, r5
 8025874:	42a3      	cmp	r3, r4
 8025876:	6025      	str	r5, [r4, #0]
 8025878:	bf18      	it	ne
 802587a:	6059      	strne	r1, [r3, #4]
 802587c:	6863      	ldr	r3, [r4, #4]
 802587e:	bf08      	it	eq
 8025880:	f8c8 1000 	streq.w	r1, [r8]
 8025884:	5162      	str	r2, [r4, r5]
 8025886:	604b      	str	r3, [r1, #4]
 8025888:	f104 060b 	add.w	r6, r4, #11
 802588c:	4638      	mov	r0, r7
 802588e:	f000 f829 	bl	80258e4 <__malloc_unlock>
 8025892:	1d23      	adds	r3, r4, #4
 8025894:	f026 0607 	bic.w	r6, r6, #7
 8025898:	1af2      	subs	r2, r6, r3
 802589a:	d0ae      	beq.n	80257fa <_malloc_r+0x22>
 802589c:	1b9b      	subs	r3, r3, r6
 802589e:	50a3      	str	r3, [r4, r2]
 80258a0:	e7ab      	b.n	80257fa <_malloc_r+0x22>
 80258a2:	42a3      	cmp	r3, r4
 80258a4:	6862      	ldr	r2, [r4, #4]
 80258a6:	d1dd      	bne.n	8025864 <_malloc_r+0x8c>
 80258a8:	f8c8 2000 	str.w	r2, [r8]
 80258ac:	e7ec      	b.n	8025888 <_malloc_r+0xb0>
 80258ae:	4623      	mov	r3, r4
 80258b0:	6864      	ldr	r4, [r4, #4]
 80258b2:	e7ac      	b.n	802580e <_malloc_r+0x36>
 80258b4:	4634      	mov	r4, r6
 80258b6:	6876      	ldr	r6, [r6, #4]
 80258b8:	e7b4      	b.n	8025824 <_malloc_r+0x4c>
 80258ba:	4613      	mov	r3, r2
 80258bc:	e7cc      	b.n	8025858 <_malloc_r+0x80>
 80258be:	230c      	movs	r3, #12
 80258c0:	4638      	mov	r0, r7
 80258c2:	603b      	str	r3, [r7, #0]
 80258c4:	f000 f80e 	bl	80258e4 <__malloc_unlock>
 80258c8:	e797      	b.n	80257fa <_malloc_r+0x22>
 80258ca:	6025      	str	r5, [r4, #0]
 80258cc:	e7dc      	b.n	8025888 <_malloc_r+0xb0>
 80258ce:	605b      	str	r3, [r3, #4]
 80258d0:	deff      	udf	#255	; 0xff
 80258d2:	bf00      	nop
 80258d4:	200029e8 	.word	0x200029e8

080258d8 <__malloc_lock>:
 80258d8:	4801      	ldr	r0, [pc, #4]	; (80258e0 <__malloc_lock+0x8>)
 80258da:	f000 bc03 	b.w	80260e4 <__retarget_lock_acquire_recursive>
 80258de:	bf00      	nop
 80258e0:	20002b30 	.word	0x20002b30

080258e4 <__malloc_unlock>:
 80258e4:	4801      	ldr	r0, [pc, #4]	; (80258ec <__malloc_unlock+0x8>)
 80258e6:	f000 bbfe 	b.w	80260e6 <__retarget_lock_release_recursive>
 80258ea:	bf00      	nop
 80258ec:	20002b30 	.word	0x20002b30

080258f0 <mallinfo>:
 80258f0:	4b03      	ldr	r3, [pc, #12]	; (8025900 <mallinfo+0x10>)
 80258f2:	b510      	push	{r4, lr}
 80258f4:	4604      	mov	r4, r0
 80258f6:	6819      	ldr	r1, [r3, #0]
 80258f8:	f000 fc5e 	bl	80261b8 <_mallinfo_r>
 80258fc:	4620      	mov	r0, r4
 80258fe:	bd10      	pop	{r4, pc}
 8025900:	200005c4 	.word	0x200005c4

08025904 <swapfunc>:
 8025904:	2b02      	cmp	r3, #2
 8025906:	b510      	push	{r4, lr}
 8025908:	d00a      	beq.n	8025920 <swapfunc+0x1c>
 802590a:	0892      	lsrs	r2, r2, #2
 802590c:	3a01      	subs	r2, #1
 802590e:	6803      	ldr	r3, [r0, #0]
 8025910:	680c      	ldr	r4, [r1, #0]
 8025912:	2a00      	cmp	r2, #0
 8025914:	f840 4b04 	str.w	r4, [r0], #4
 8025918:	f841 3b04 	str.w	r3, [r1], #4
 802591c:	dcf6      	bgt.n	802590c <swapfunc+0x8>
 802591e:	bd10      	pop	{r4, pc}
 8025920:	4402      	add	r2, r0
 8025922:	7803      	ldrb	r3, [r0, #0]
 8025924:	780c      	ldrb	r4, [r1, #0]
 8025926:	f800 4b01 	strb.w	r4, [r0], #1
 802592a:	f801 3b01 	strb.w	r3, [r1], #1
 802592e:	1a13      	subs	r3, r2, r0
 8025930:	2b00      	cmp	r3, #0
 8025932:	dcf6      	bgt.n	8025922 <swapfunc+0x1e>
 8025934:	e7f3      	b.n	802591e <swapfunc+0x1a>

08025936 <med3.constprop.0>:
 8025936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025938:	460c      	mov	r4, r1
 802593a:	4615      	mov	r5, r2
 802593c:	4607      	mov	r7, r0
 802593e:	461e      	mov	r6, r3
 8025940:	4798      	blx	r3
 8025942:	2800      	cmp	r0, #0
 8025944:	4629      	mov	r1, r5
 8025946:	4620      	mov	r0, r4
 8025948:	da0a      	bge.n	8025960 <med3.constprop.0+0x2a>
 802594a:	47b0      	blx	r6
 802594c:	2800      	cmp	r0, #0
 802594e:	db05      	blt.n	802595c <med3.constprop.0+0x26>
 8025950:	4629      	mov	r1, r5
 8025952:	4638      	mov	r0, r7
 8025954:	47b0      	blx	r6
 8025956:	2800      	cmp	r0, #0
 8025958:	db0a      	blt.n	8025970 <med3.constprop.0+0x3a>
 802595a:	463c      	mov	r4, r7
 802595c:	4620      	mov	r0, r4
 802595e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025960:	47b0      	blx	r6
 8025962:	2800      	cmp	r0, #0
 8025964:	dcfa      	bgt.n	802595c <med3.constprop.0+0x26>
 8025966:	4629      	mov	r1, r5
 8025968:	4638      	mov	r0, r7
 802596a:	47b0      	blx	r6
 802596c:	2800      	cmp	r0, #0
 802596e:	dbf4      	blt.n	802595a <med3.constprop.0+0x24>
 8025970:	462c      	mov	r4, r5
 8025972:	e7f3      	b.n	802595c <med3.constprop.0+0x26>

08025974 <qsort>:
 8025974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025978:	469a      	mov	sl, r3
 802597a:	ea40 0302 	orr.w	r3, r0, r2
 802597e:	b097      	sub	sp, #92	; 0x5c
 8025980:	4606      	mov	r6, r0
 8025982:	079b      	lsls	r3, r3, #30
 8025984:	4614      	mov	r4, r2
 8025986:	d11a      	bne.n	80259be <qsort+0x4a>
 8025988:	f1b2 0804 	subs.w	r8, r2, #4
 802598c:	bf18      	it	ne
 802598e:	f04f 0801 	movne.w	r8, #1
 8025992:	2300      	movs	r3, #0
 8025994:	9302      	str	r3, [sp, #8]
 8025996:	1933      	adds	r3, r6, r4
 8025998:	fb04 f701 	mul.w	r7, r4, r1
 802599c:	2906      	cmp	r1, #6
 802599e:	9301      	str	r3, [sp, #4]
 80259a0:	eb06 0307 	add.w	r3, r6, r7
 80259a4:	9303      	str	r3, [sp, #12]
 80259a6:	d82a      	bhi.n	80259fe <qsort+0x8a>
 80259a8:	9b01      	ldr	r3, [sp, #4]
 80259aa:	9a03      	ldr	r2, [sp, #12]
 80259ac:	4293      	cmp	r3, r2
 80259ae:	d310      	bcc.n	80259d2 <qsort+0x5e>
 80259b0:	9b02      	ldr	r3, [sp, #8]
 80259b2:	2b00      	cmp	r3, #0
 80259b4:	f040 811e 	bne.w	8025bf4 <qsort+0x280>
 80259b8:	b017      	add	sp, #92	; 0x5c
 80259ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259be:	f04f 0802 	mov.w	r8, #2
 80259c2:	e7e6      	b.n	8025992 <qsort+0x1e>
 80259c4:	4643      	mov	r3, r8
 80259c6:	4622      	mov	r2, r4
 80259c8:	4639      	mov	r1, r7
 80259ca:	4628      	mov	r0, r5
 80259cc:	f7ff ff9a 	bl	8025904 <swapfunc>
 80259d0:	e00e      	b.n	80259f0 <qsort+0x7c>
 80259d2:	9d01      	ldr	r5, [sp, #4]
 80259d4:	e00d      	b.n	80259f2 <qsort+0x7e>
 80259d6:	1b2f      	subs	r7, r5, r4
 80259d8:	4629      	mov	r1, r5
 80259da:	4638      	mov	r0, r7
 80259dc:	47d0      	blx	sl
 80259de:	2800      	cmp	r0, #0
 80259e0:	dd09      	ble.n	80259f6 <qsort+0x82>
 80259e2:	f1b8 0f00 	cmp.w	r8, #0
 80259e6:	d1ed      	bne.n	80259c4 <qsort+0x50>
 80259e8:	682b      	ldr	r3, [r5, #0]
 80259ea:	683a      	ldr	r2, [r7, #0]
 80259ec:	602a      	str	r2, [r5, #0]
 80259ee:	603b      	str	r3, [r7, #0]
 80259f0:	463d      	mov	r5, r7
 80259f2:	42ae      	cmp	r6, r5
 80259f4:	d3ef      	bcc.n	80259d6 <qsort+0x62>
 80259f6:	9b01      	ldr	r3, [sp, #4]
 80259f8:	4423      	add	r3, r4
 80259fa:	9301      	str	r3, [sp, #4]
 80259fc:	e7d4      	b.n	80259a8 <qsort+0x34>
 80259fe:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8025a02:	1b3f      	subs	r7, r7, r4
 8025a04:	2907      	cmp	r1, #7
 8025a06:	fb04 6909 	mla	r9, r4, r9, r6
 8025a0a:	4437      	add	r7, r6
 8025a0c:	d021      	beq.n	8025a52 <qsort+0xde>
 8025a0e:	2928      	cmp	r1, #40	; 0x28
 8025a10:	d944      	bls.n	8025a9c <qsort+0x128>
 8025a12:	08cd      	lsrs	r5, r1, #3
 8025a14:	4653      	mov	r3, sl
 8025a16:	4630      	mov	r0, r6
 8025a18:	4365      	muls	r5, r4
 8025a1a:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8025a1e:	1971      	adds	r1, r6, r5
 8025a20:	f7ff ff89 	bl	8025936 <med3.constprop.0>
 8025a24:	4649      	mov	r1, r9
 8025a26:	eb09 0205 	add.w	r2, r9, r5
 8025a2a:	4653      	mov	r3, sl
 8025a2c:	4683      	mov	fp, r0
 8025a2e:	1b48      	subs	r0, r1, r5
 8025a30:	f7ff ff81 	bl	8025936 <med3.constprop.0>
 8025a34:	463a      	mov	r2, r7
 8025a36:	4681      	mov	r9, r0
 8025a38:	4653      	mov	r3, sl
 8025a3a:	1b79      	subs	r1, r7, r5
 8025a3c:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8025a40:	f7ff ff79 	bl	8025936 <med3.constprop.0>
 8025a44:	4602      	mov	r2, r0
 8025a46:	4649      	mov	r1, r9
 8025a48:	4653      	mov	r3, sl
 8025a4a:	4658      	mov	r0, fp
 8025a4c:	f7ff ff73 	bl	8025936 <med3.constprop.0>
 8025a50:	4681      	mov	r9, r0
 8025a52:	f1b8 0f00 	cmp.w	r8, #0
 8025a56:	d124      	bne.n	8025aa2 <qsort+0x12e>
 8025a58:	6833      	ldr	r3, [r6, #0]
 8025a5a:	f8d9 2000 	ldr.w	r2, [r9]
 8025a5e:	6032      	str	r2, [r6, #0]
 8025a60:	f8c9 3000 	str.w	r3, [r9]
 8025a64:	eb06 0b04 	add.w	fp, r6, r4
 8025a68:	46b9      	mov	r9, r7
 8025a6a:	2300      	movs	r3, #0
 8025a6c:	465d      	mov	r5, fp
 8025a6e:	45bb      	cmp	fp, r7
 8025a70:	d835      	bhi.n	8025ade <qsort+0x16a>
 8025a72:	4631      	mov	r1, r6
 8025a74:	4658      	mov	r0, fp
 8025a76:	9304      	str	r3, [sp, #16]
 8025a78:	47d0      	blx	sl
 8025a7a:	2800      	cmp	r0, #0
 8025a7c:	9b04      	ldr	r3, [sp, #16]
 8025a7e:	dc3e      	bgt.n	8025afe <qsort+0x18a>
 8025a80:	d10a      	bne.n	8025a98 <qsort+0x124>
 8025a82:	f1b8 0f00 	cmp.w	r8, #0
 8025a86:	d113      	bne.n	8025ab0 <qsort+0x13c>
 8025a88:	682b      	ldr	r3, [r5, #0]
 8025a8a:	f8db 2000 	ldr.w	r2, [fp]
 8025a8e:	602a      	str	r2, [r5, #0]
 8025a90:	f8cb 3000 	str.w	r3, [fp]
 8025a94:	4425      	add	r5, r4
 8025a96:	2301      	movs	r3, #1
 8025a98:	44a3      	add	fp, r4
 8025a9a:	e7e8      	b.n	8025a6e <qsort+0xfa>
 8025a9c:	463a      	mov	r2, r7
 8025a9e:	46b3      	mov	fp, r6
 8025aa0:	e7d1      	b.n	8025a46 <qsort+0xd2>
 8025aa2:	4643      	mov	r3, r8
 8025aa4:	4622      	mov	r2, r4
 8025aa6:	4649      	mov	r1, r9
 8025aa8:	4630      	mov	r0, r6
 8025aaa:	f7ff ff2b 	bl	8025904 <swapfunc>
 8025aae:	e7d9      	b.n	8025a64 <qsort+0xf0>
 8025ab0:	4643      	mov	r3, r8
 8025ab2:	4622      	mov	r2, r4
 8025ab4:	4659      	mov	r1, fp
 8025ab6:	4628      	mov	r0, r5
 8025ab8:	f7ff ff24 	bl	8025904 <swapfunc>
 8025abc:	e7ea      	b.n	8025a94 <qsort+0x120>
 8025abe:	d10b      	bne.n	8025ad8 <qsort+0x164>
 8025ac0:	f1b8 0f00 	cmp.w	r8, #0
 8025ac4:	d114      	bne.n	8025af0 <qsort+0x17c>
 8025ac6:	683b      	ldr	r3, [r7, #0]
 8025ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8025acc:	603a      	str	r2, [r7, #0]
 8025ace:	f8c9 3000 	str.w	r3, [r9]
 8025ad2:	eba9 0904 	sub.w	r9, r9, r4
 8025ad6:	2301      	movs	r3, #1
 8025ad8:	9f04      	ldr	r7, [sp, #16]
 8025ada:	45bb      	cmp	fp, r7
 8025adc:	d90f      	bls.n	8025afe <qsort+0x18a>
 8025ade:	2b00      	cmp	r3, #0
 8025ae0:	d143      	bne.n	8025b6a <qsort+0x1f6>
 8025ae2:	9b01      	ldr	r3, [sp, #4]
 8025ae4:	9a03      	ldr	r2, [sp, #12]
 8025ae6:	4293      	cmp	r3, r2
 8025ae8:	f4bf af62 	bcs.w	80259b0 <qsort+0x3c>
 8025aec:	9d01      	ldr	r5, [sp, #4]
 8025aee:	e036      	b.n	8025b5e <qsort+0x1ea>
 8025af0:	4643      	mov	r3, r8
 8025af2:	4622      	mov	r2, r4
 8025af4:	4649      	mov	r1, r9
 8025af6:	4638      	mov	r0, r7
 8025af8:	f7ff ff04 	bl	8025904 <swapfunc>
 8025afc:	e7e9      	b.n	8025ad2 <qsort+0x15e>
 8025afe:	4631      	mov	r1, r6
 8025b00:	4638      	mov	r0, r7
 8025b02:	9305      	str	r3, [sp, #20]
 8025b04:	47d0      	blx	sl
 8025b06:	1b3b      	subs	r3, r7, r4
 8025b08:	2800      	cmp	r0, #0
 8025b0a:	9304      	str	r3, [sp, #16]
 8025b0c:	9b05      	ldr	r3, [sp, #20]
 8025b0e:	dad6      	bge.n	8025abe <qsort+0x14a>
 8025b10:	f1b8 0f00 	cmp.w	r8, #0
 8025b14:	d006      	beq.n	8025b24 <qsort+0x1b0>
 8025b16:	4643      	mov	r3, r8
 8025b18:	4622      	mov	r2, r4
 8025b1a:	4639      	mov	r1, r7
 8025b1c:	4658      	mov	r0, fp
 8025b1e:	f7ff fef1 	bl	8025904 <swapfunc>
 8025b22:	e005      	b.n	8025b30 <qsort+0x1bc>
 8025b24:	f8db 3000 	ldr.w	r3, [fp]
 8025b28:	683a      	ldr	r2, [r7, #0]
 8025b2a:	f8cb 2000 	str.w	r2, [fp]
 8025b2e:	603b      	str	r3, [r7, #0]
 8025b30:	9f04      	ldr	r7, [sp, #16]
 8025b32:	e7b0      	b.n	8025a96 <qsort+0x122>
 8025b34:	4643      	mov	r3, r8
 8025b36:	4622      	mov	r2, r4
 8025b38:	4639      	mov	r1, r7
 8025b3a:	4628      	mov	r0, r5
 8025b3c:	f7ff fee2 	bl	8025904 <swapfunc>
 8025b40:	e00c      	b.n	8025b5c <qsort+0x1e8>
 8025b42:	1b2f      	subs	r7, r5, r4
 8025b44:	4629      	mov	r1, r5
 8025b46:	4638      	mov	r0, r7
 8025b48:	47d0      	blx	sl
 8025b4a:	2800      	cmp	r0, #0
 8025b4c:	dd09      	ble.n	8025b62 <qsort+0x1ee>
 8025b4e:	f1b8 0f00 	cmp.w	r8, #0
 8025b52:	d1ef      	bne.n	8025b34 <qsort+0x1c0>
 8025b54:	682b      	ldr	r3, [r5, #0]
 8025b56:	683a      	ldr	r2, [r7, #0]
 8025b58:	602a      	str	r2, [r5, #0]
 8025b5a:	603b      	str	r3, [r7, #0]
 8025b5c:	463d      	mov	r5, r7
 8025b5e:	42ae      	cmp	r6, r5
 8025b60:	d3ef      	bcc.n	8025b42 <qsort+0x1ce>
 8025b62:	9b01      	ldr	r3, [sp, #4]
 8025b64:	4423      	add	r3, r4
 8025b66:	9301      	str	r3, [sp, #4]
 8025b68:	e7bb      	b.n	8025ae2 <qsort+0x16e>
 8025b6a:	ebab 0305 	sub.w	r3, fp, r5
 8025b6e:	1baa      	subs	r2, r5, r6
 8025b70:	429a      	cmp	r2, r3
 8025b72:	9301      	str	r3, [sp, #4]
 8025b74:	bfa8      	it	ge
 8025b76:	461a      	movge	r2, r3
 8025b78:	b12a      	cbz	r2, 8025b86 <qsort+0x212>
 8025b7a:	4643      	mov	r3, r8
 8025b7c:	ebab 0102 	sub.w	r1, fp, r2
 8025b80:	4630      	mov	r0, r6
 8025b82:	f7ff febf 	bl	8025904 <swapfunc>
 8025b86:	9b03      	ldr	r3, [sp, #12]
 8025b88:	eba9 0707 	sub.w	r7, r9, r7
 8025b8c:	eba3 0209 	sub.w	r2, r3, r9
 8025b90:	1b12      	subs	r2, r2, r4
 8025b92:	42ba      	cmp	r2, r7
 8025b94:	bf28      	it	cs
 8025b96:	463a      	movcs	r2, r7
 8025b98:	b12a      	cbz	r2, 8025ba6 <qsort+0x232>
 8025b9a:	9903      	ldr	r1, [sp, #12]
 8025b9c:	4643      	mov	r3, r8
 8025b9e:	4658      	mov	r0, fp
 8025ba0:	1a89      	subs	r1, r1, r2
 8025ba2:	f7ff feaf 	bl	8025904 <swapfunc>
 8025ba6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8025baa:	9b03      	ldr	r3, [sp, #12]
 8025bac:	454f      	cmp	r7, r9
 8025bae:	eba3 0007 	sub.w	r0, r3, r7
 8025bb2:	d904      	bls.n	8025bbe <qsort+0x24a>
 8025bb4:	4633      	mov	r3, r6
 8025bb6:	46b9      	mov	r9, r7
 8025bb8:	4606      	mov	r6, r0
 8025bba:	9f01      	ldr	r7, [sp, #4]
 8025bbc:	4618      	mov	r0, r3
 8025bbe:	42a7      	cmp	r7, r4
 8025bc0:	d921      	bls.n	8025c06 <qsort+0x292>
 8025bc2:	9b02      	ldr	r3, [sp, #8]
 8025bc4:	2b07      	cmp	r3, #7
 8025bc6:	fbb7 f1f4 	udiv	r1, r7, r4
 8025bca:	d80d      	bhi.n	8025be8 <qsort+0x274>
 8025bcc:	aa16      	add	r2, sp, #88	; 0x58
 8025bce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8025bd2:	fbb9 f2f4 	udiv	r2, r9, r4
 8025bd6:	f843 6c40 	str.w	r6, [r3, #-64]
 8025bda:	f843 2c3c 	str.w	r2, [r3, #-60]
 8025bde:	9b02      	ldr	r3, [sp, #8]
 8025be0:	3301      	adds	r3, #1
 8025be2:	9302      	str	r3, [sp, #8]
 8025be4:	4606      	mov	r6, r0
 8025be6:	e6d6      	b.n	8025996 <qsort+0x22>
 8025be8:	4653      	mov	r3, sl
 8025bea:	4622      	mov	r2, r4
 8025bec:	f7ff fec2 	bl	8025974 <qsort>
 8025bf0:	45a1      	cmp	r9, r4
 8025bf2:	d80b      	bhi.n	8025c0c <qsort+0x298>
 8025bf4:	9b02      	ldr	r3, [sp, #8]
 8025bf6:	aa16      	add	r2, sp, #88	; 0x58
 8025bf8:	3b01      	subs	r3, #1
 8025bfa:	9302      	str	r3, [sp, #8]
 8025bfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8025c00:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8025c04:	e7ee      	b.n	8025be4 <qsort+0x270>
 8025c06:	45a1      	cmp	r9, r4
 8025c08:	f67f aed2 	bls.w	80259b0 <qsort+0x3c>
 8025c0c:	4630      	mov	r0, r6
 8025c0e:	fbb9 f1f4 	udiv	r1, r9, r4
 8025c12:	e7e7      	b.n	8025be4 <qsort+0x270>

08025c14 <std>:
 8025c14:	2300      	movs	r3, #0
 8025c16:	b510      	push	{r4, lr}
 8025c18:	4604      	mov	r4, r0
 8025c1a:	6083      	str	r3, [r0, #8]
 8025c1c:	8181      	strh	r1, [r0, #12]
 8025c1e:	4619      	mov	r1, r3
 8025c20:	6643      	str	r3, [r0, #100]	; 0x64
 8025c22:	81c2      	strh	r2, [r0, #14]
 8025c24:	2208      	movs	r2, #8
 8025c26:	6183      	str	r3, [r0, #24]
 8025c28:	e9c0 3300 	strd	r3, r3, [r0]
 8025c2c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025c30:	305c      	adds	r0, #92	; 0x5c
 8025c32:	f000 f904 	bl	8025e3e <memset>
 8025c36:	4b05      	ldr	r3, [pc, #20]	; (8025c4c <std+0x38>)
 8025c38:	6224      	str	r4, [r4, #32]
 8025c3a:	6263      	str	r3, [r4, #36]	; 0x24
 8025c3c:	4b04      	ldr	r3, [pc, #16]	; (8025c50 <std+0x3c>)
 8025c3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8025c40:	4b04      	ldr	r3, [pc, #16]	; (8025c54 <std+0x40>)
 8025c42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025c44:	4b04      	ldr	r3, [pc, #16]	; (8025c58 <std+0x44>)
 8025c46:	6323      	str	r3, [r4, #48]	; 0x30
 8025c48:	bd10      	pop	{r4, pc}
 8025c4a:	bf00      	nop
 8025c4c:	08025d99 	.word	0x08025d99
 8025c50:	08025dbb 	.word	0x08025dbb
 8025c54:	08025df3 	.word	0x08025df3
 8025c58:	08025e17 	.word	0x08025e17

08025c5c <stdio_exit_handler>:
 8025c5c:	4a02      	ldr	r2, [pc, #8]	; (8025c68 <stdio_exit_handler+0xc>)
 8025c5e:	4903      	ldr	r1, [pc, #12]	; (8025c6c <stdio_exit_handler+0x10>)
 8025c60:	4803      	ldr	r0, [pc, #12]	; (8025c70 <stdio_exit_handler+0x14>)
 8025c62:	f000 b87b 	b.w	8025d5c <_fwalk_sglue>
 8025c66:	bf00      	nop
 8025c68:	2000056c 	.word	0x2000056c
 8025c6c:	080268d5 	.word	0x080268d5
 8025c70:	20000578 	.word	0x20000578

08025c74 <cleanup_stdio>:
 8025c74:	6841      	ldr	r1, [r0, #4]
 8025c76:	4b0c      	ldr	r3, [pc, #48]	; (8025ca8 <cleanup_stdio+0x34>)
 8025c78:	4299      	cmp	r1, r3
 8025c7a:	b510      	push	{r4, lr}
 8025c7c:	4604      	mov	r4, r0
 8025c7e:	d001      	beq.n	8025c84 <cleanup_stdio+0x10>
 8025c80:	f000 fe28 	bl	80268d4 <_fflush_r>
 8025c84:	68a1      	ldr	r1, [r4, #8]
 8025c86:	4b09      	ldr	r3, [pc, #36]	; (8025cac <cleanup_stdio+0x38>)
 8025c88:	4299      	cmp	r1, r3
 8025c8a:	d002      	beq.n	8025c92 <cleanup_stdio+0x1e>
 8025c8c:	4620      	mov	r0, r4
 8025c8e:	f000 fe21 	bl	80268d4 <_fflush_r>
 8025c92:	68e1      	ldr	r1, [r4, #12]
 8025c94:	4b06      	ldr	r3, [pc, #24]	; (8025cb0 <cleanup_stdio+0x3c>)
 8025c96:	4299      	cmp	r1, r3
 8025c98:	d004      	beq.n	8025ca4 <cleanup_stdio+0x30>
 8025c9a:	4620      	mov	r0, r4
 8025c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ca0:	f000 be18 	b.w	80268d4 <_fflush_r>
 8025ca4:	bd10      	pop	{r4, pc}
 8025ca6:	bf00      	nop
 8025ca8:	200029f0 	.word	0x200029f0
 8025cac:	20002a58 	.word	0x20002a58
 8025cb0:	20002ac0 	.word	0x20002ac0

08025cb4 <global_stdio_init.part.0>:
 8025cb4:	b510      	push	{r4, lr}
 8025cb6:	4b0b      	ldr	r3, [pc, #44]	; (8025ce4 <global_stdio_init.part.0+0x30>)
 8025cb8:	2104      	movs	r1, #4
 8025cba:	4c0b      	ldr	r4, [pc, #44]	; (8025ce8 <global_stdio_init.part.0+0x34>)
 8025cbc:	4a0b      	ldr	r2, [pc, #44]	; (8025cec <global_stdio_init.part.0+0x38>)
 8025cbe:	4620      	mov	r0, r4
 8025cc0:	601a      	str	r2, [r3, #0]
 8025cc2:	2200      	movs	r2, #0
 8025cc4:	f7ff ffa6 	bl	8025c14 <std>
 8025cc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8025ccc:	2201      	movs	r2, #1
 8025cce:	2109      	movs	r1, #9
 8025cd0:	f7ff ffa0 	bl	8025c14 <std>
 8025cd4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8025cd8:	2202      	movs	r2, #2
 8025cda:	2112      	movs	r1, #18
 8025cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ce0:	f7ff bf98 	b.w	8025c14 <std>
 8025ce4:	20002b28 	.word	0x20002b28
 8025ce8:	200029f0 	.word	0x200029f0
 8025cec:	08025c5d 	.word	0x08025c5d

08025cf0 <__sfp_lock_acquire>:
 8025cf0:	4801      	ldr	r0, [pc, #4]	; (8025cf8 <__sfp_lock_acquire+0x8>)
 8025cf2:	f000 b9f7 	b.w	80260e4 <__retarget_lock_acquire_recursive>
 8025cf6:	bf00      	nop
 8025cf8:	20002b31 	.word	0x20002b31

08025cfc <__sfp_lock_release>:
 8025cfc:	4801      	ldr	r0, [pc, #4]	; (8025d04 <__sfp_lock_release+0x8>)
 8025cfe:	f000 b9f2 	b.w	80260e6 <__retarget_lock_release_recursive>
 8025d02:	bf00      	nop
 8025d04:	20002b31 	.word	0x20002b31

08025d08 <__sinit>:
 8025d08:	b510      	push	{r4, lr}
 8025d0a:	4604      	mov	r4, r0
 8025d0c:	f7ff fff0 	bl	8025cf0 <__sfp_lock_acquire>
 8025d10:	6a23      	ldr	r3, [r4, #32]
 8025d12:	b11b      	cbz	r3, 8025d1c <__sinit+0x14>
 8025d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025d18:	f7ff bff0 	b.w	8025cfc <__sfp_lock_release>
 8025d1c:	4b04      	ldr	r3, [pc, #16]	; (8025d30 <__sinit+0x28>)
 8025d1e:	6223      	str	r3, [r4, #32]
 8025d20:	4b04      	ldr	r3, [pc, #16]	; (8025d34 <__sinit+0x2c>)
 8025d22:	681b      	ldr	r3, [r3, #0]
 8025d24:	2b00      	cmp	r3, #0
 8025d26:	d1f5      	bne.n	8025d14 <__sinit+0xc>
 8025d28:	f7ff ffc4 	bl	8025cb4 <global_stdio_init.part.0>
 8025d2c:	e7f2      	b.n	8025d14 <__sinit+0xc>
 8025d2e:	bf00      	nop
 8025d30:	08025c75 	.word	0x08025c75
 8025d34:	20002b28 	.word	0x20002b28

08025d38 <fiprintf>:
 8025d38:	b40e      	push	{r1, r2, r3}
 8025d3a:	b503      	push	{r0, r1, lr}
 8025d3c:	ab03      	add	r3, sp, #12
 8025d3e:	4601      	mov	r1, r0
 8025d40:	4805      	ldr	r0, [pc, #20]	; (8025d58 <fiprintf+0x20>)
 8025d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8025d46:	6800      	ldr	r0, [r0, #0]
 8025d48:	9301      	str	r3, [sp, #4]
 8025d4a:	f000 fa93 	bl	8026274 <_vfiprintf_r>
 8025d4e:	b002      	add	sp, #8
 8025d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8025d54:	b003      	add	sp, #12
 8025d56:	4770      	bx	lr
 8025d58:	200005c4 	.word	0x200005c4

08025d5c <_fwalk_sglue>:
 8025d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d60:	4607      	mov	r7, r0
 8025d62:	4688      	mov	r8, r1
 8025d64:	4614      	mov	r4, r2
 8025d66:	2600      	movs	r6, #0
 8025d68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025d6c:	f1b9 0901 	subs.w	r9, r9, #1
 8025d70:	d505      	bpl.n	8025d7e <_fwalk_sglue+0x22>
 8025d72:	6824      	ldr	r4, [r4, #0]
 8025d74:	2c00      	cmp	r4, #0
 8025d76:	d1f7      	bne.n	8025d68 <_fwalk_sglue+0xc>
 8025d78:	4630      	mov	r0, r6
 8025d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d7e:	89ab      	ldrh	r3, [r5, #12]
 8025d80:	2b01      	cmp	r3, #1
 8025d82:	d907      	bls.n	8025d94 <_fwalk_sglue+0x38>
 8025d84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025d88:	3301      	adds	r3, #1
 8025d8a:	d003      	beq.n	8025d94 <_fwalk_sglue+0x38>
 8025d8c:	4629      	mov	r1, r5
 8025d8e:	4638      	mov	r0, r7
 8025d90:	47c0      	blx	r8
 8025d92:	4306      	orrs	r6, r0
 8025d94:	3568      	adds	r5, #104	; 0x68
 8025d96:	e7e9      	b.n	8025d6c <_fwalk_sglue+0x10>

08025d98 <__sread>:
 8025d98:	b510      	push	{r4, lr}
 8025d9a:	460c      	mov	r4, r1
 8025d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025da0:	f000 f942 	bl	8026028 <_read_r>
 8025da4:	2800      	cmp	r0, #0
 8025da6:	bfab      	itete	ge
 8025da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025daa:	89a3      	ldrhlt	r3, [r4, #12]
 8025dac:	181b      	addge	r3, r3, r0
 8025dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025db2:	bfac      	ite	ge
 8025db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8025db6:	81a3      	strhlt	r3, [r4, #12]
 8025db8:	bd10      	pop	{r4, pc}

08025dba <__swrite>:
 8025dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025dbe:	461f      	mov	r7, r3
 8025dc0:	898b      	ldrh	r3, [r1, #12]
 8025dc2:	4605      	mov	r5, r0
 8025dc4:	460c      	mov	r4, r1
 8025dc6:	05db      	lsls	r3, r3, #23
 8025dc8:	4616      	mov	r6, r2
 8025dca:	d505      	bpl.n	8025dd8 <__swrite+0x1e>
 8025dcc:	2302      	movs	r3, #2
 8025dce:	2200      	movs	r2, #0
 8025dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025dd4:	f000 f916 	bl	8026004 <_lseek_r>
 8025dd8:	89a3      	ldrh	r3, [r4, #12]
 8025dda:	4632      	mov	r2, r6
 8025ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025de0:	4628      	mov	r0, r5
 8025de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025de6:	81a3      	strh	r3, [r4, #12]
 8025de8:	463b      	mov	r3, r7
 8025dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025dee:	f000 b93d 	b.w	802606c <_write_r>

08025df2 <__sseek>:
 8025df2:	b510      	push	{r4, lr}
 8025df4:	460c      	mov	r4, r1
 8025df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025dfa:	f000 f903 	bl	8026004 <_lseek_r>
 8025dfe:	1c43      	adds	r3, r0, #1
 8025e00:	89a3      	ldrh	r3, [r4, #12]
 8025e02:	bf15      	itete	ne
 8025e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8025e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025e0e:	81a3      	strheq	r3, [r4, #12]
 8025e10:	bf18      	it	ne
 8025e12:	81a3      	strhne	r3, [r4, #12]
 8025e14:	bd10      	pop	{r4, pc}

08025e16 <__sclose>:
 8025e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e1a:	f000 b8e3 	b.w	8025fe4 <_close_r>

08025e1e <memcmp>:
 8025e1e:	3901      	subs	r1, #1
 8025e20:	4402      	add	r2, r0
 8025e22:	b510      	push	{r4, lr}
 8025e24:	4290      	cmp	r0, r2
 8025e26:	d101      	bne.n	8025e2c <memcmp+0xe>
 8025e28:	2000      	movs	r0, #0
 8025e2a:	e005      	b.n	8025e38 <memcmp+0x1a>
 8025e2c:	7803      	ldrb	r3, [r0, #0]
 8025e2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025e32:	42a3      	cmp	r3, r4
 8025e34:	d001      	beq.n	8025e3a <memcmp+0x1c>
 8025e36:	1b18      	subs	r0, r3, r4
 8025e38:	bd10      	pop	{r4, pc}
 8025e3a:	3001      	adds	r0, #1
 8025e3c:	e7f2      	b.n	8025e24 <memcmp+0x6>

08025e3e <memset>:
 8025e3e:	4402      	add	r2, r0
 8025e40:	4603      	mov	r3, r0
 8025e42:	4293      	cmp	r3, r2
 8025e44:	d100      	bne.n	8025e48 <memset+0xa>
 8025e46:	4770      	bx	lr
 8025e48:	f803 1b01 	strb.w	r1, [r3], #1
 8025e4c:	e7f9      	b.n	8025e42 <memset+0x4>

08025e4e <strcat>:
 8025e4e:	4602      	mov	r2, r0
 8025e50:	b510      	push	{r4, lr}
 8025e52:	7814      	ldrb	r4, [r2, #0]
 8025e54:	4613      	mov	r3, r2
 8025e56:	3201      	adds	r2, #1
 8025e58:	2c00      	cmp	r4, #0
 8025e5a:	d1fa      	bne.n	8025e52 <strcat+0x4>
 8025e5c:	3b01      	subs	r3, #1
 8025e5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025e62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025e66:	2a00      	cmp	r2, #0
 8025e68:	d1f9      	bne.n	8025e5e <strcat+0x10>
 8025e6a:	bd10      	pop	{r4, pc}

08025e6c <strchr>:
 8025e6c:	b2c9      	uxtb	r1, r1
 8025e6e:	4603      	mov	r3, r0
 8025e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025e74:	b11a      	cbz	r2, 8025e7e <strchr+0x12>
 8025e76:	428a      	cmp	r2, r1
 8025e78:	d1f9      	bne.n	8025e6e <strchr+0x2>
 8025e7a:	4618      	mov	r0, r3
 8025e7c:	4770      	bx	lr
 8025e7e:	2900      	cmp	r1, #0
 8025e80:	bf18      	it	ne
 8025e82:	2300      	movne	r3, #0
 8025e84:	e7f9      	b.n	8025e7a <strchr+0xe>

08025e86 <strncmp>:
 8025e86:	b510      	push	{r4, lr}
 8025e88:	b16a      	cbz	r2, 8025ea6 <strncmp+0x20>
 8025e8a:	3901      	subs	r1, #1
 8025e8c:	1884      	adds	r4, r0, r2
 8025e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025e92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8025e96:	429a      	cmp	r2, r3
 8025e98:	d103      	bne.n	8025ea2 <strncmp+0x1c>
 8025e9a:	42a0      	cmp	r0, r4
 8025e9c:	d001      	beq.n	8025ea2 <strncmp+0x1c>
 8025e9e:	2a00      	cmp	r2, #0
 8025ea0:	d1f5      	bne.n	8025e8e <strncmp+0x8>
 8025ea2:	1ad0      	subs	r0, r2, r3
 8025ea4:	bd10      	pop	{r4, pc}
 8025ea6:	4610      	mov	r0, r2
 8025ea8:	e7fc      	b.n	8025ea4 <strncmp+0x1e>

08025eaa <strncpy>:
 8025eaa:	3901      	subs	r1, #1
 8025eac:	4603      	mov	r3, r0
 8025eae:	b510      	push	{r4, lr}
 8025eb0:	b132      	cbz	r2, 8025ec0 <strncpy+0x16>
 8025eb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025eb6:	3a01      	subs	r2, #1
 8025eb8:	f803 4b01 	strb.w	r4, [r3], #1
 8025ebc:	2c00      	cmp	r4, #0
 8025ebe:	d1f7      	bne.n	8025eb0 <strncpy+0x6>
 8025ec0:	441a      	add	r2, r3
 8025ec2:	2100      	movs	r1, #0
 8025ec4:	4293      	cmp	r3, r2
 8025ec6:	d100      	bne.n	8025eca <strncpy+0x20>
 8025ec8:	bd10      	pop	{r4, pc}
 8025eca:	f803 1b01 	strb.w	r1, [r3], #1
 8025ece:	e7f9      	b.n	8025ec4 <strncpy+0x1a>

08025ed0 <strrchr>:
 8025ed0:	b513      	push	{r0, r1, r4, lr}
 8025ed2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8025ed6:	4603      	mov	r3, r0
 8025ed8:	d110      	bne.n	8025efc <strrchr+0x2c>
 8025eda:	b002      	add	sp, #8
 8025edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ee0:	f7ff bfc4 	b.w	8025e6c <strchr>
 8025ee4:	1c43      	adds	r3, r0, #1
 8025ee6:	4604      	mov	r4, r0
 8025ee8:	4618      	mov	r0, r3
 8025eea:	9101      	str	r1, [sp, #4]
 8025eec:	f7ff ffbe 	bl	8025e6c <strchr>
 8025ef0:	9901      	ldr	r1, [sp, #4]
 8025ef2:	2800      	cmp	r0, #0
 8025ef4:	d1f6      	bne.n	8025ee4 <strrchr+0x14>
 8025ef6:	4620      	mov	r0, r4
 8025ef8:	b002      	add	sp, #8
 8025efa:	bd10      	pop	{r4, pc}
 8025efc:	2400      	movs	r4, #0
 8025efe:	e7f3      	b.n	8025ee8 <strrchr+0x18>

08025f00 <strtok>:
 8025f00:	4b16      	ldr	r3, [pc, #88]	; (8025f5c <strtok+0x5c>)
 8025f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025f04:	681e      	ldr	r6, [r3, #0]
 8025f06:	4605      	mov	r5, r0
 8025f08:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8025f0a:	b9fc      	cbnz	r4, 8025f4c <strtok+0x4c>
 8025f0c:	2050      	movs	r0, #80	; 0x50
 8025f0e:	9101      	str	r1, [sp, #4]
 8025f10:	f7ff fc32 	bl	8025778 <malloc>
 8025f14:	9901      	ldr	r1, [sp, #4]
 8025f16:	4602      	mov	r2, r0
 8025f18:	6470      	str	r0, [r6, #68]	; 0x44
 8025f1a:	b920      	cbnz	r0, 8025f26 <strtok+0x26>
 8025f1c:	4b10      	ldr	r3, [pc, #64]	; (8025f60 <strtok+0x60>)
 8025f1e:	215b      	movs	r1, #91	; 0x5b
 8025f20:	4810      	ldr	r0, [pc, #64]	; (8025f64 <strtok+0x64>)
 8025f22:	f7ff fbed 	bl	8025700 <__assert_func>
 8025f26:	e9c0 4400 	strd	r4, r4, [r0]
 8025f2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8025f2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8025f32:	6184      	str	r4, [r0, #24]
 8025f34:	7704      	strb	r4, [r0, #28]
 8025f36:	6244      	str	r4, [r0, #36]	; 0x24
 8025f38:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8025f3c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8025f40:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8025f44:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8025f48:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8025f4c:	2301      	movs	r3, #1
 8025f4e:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8025f50:	4628      	mov	r0, r5
 8025f52:	b002      	add	sp, #8
 8025f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025f58:	f000 b806 	b.w	8025f68 <__strtok_r>
 8025f5c:	200005c4 	.word	0x200005c4
 8025f60:	08034c89 	.word	0x08034c89
 8025f64:	08034ca0 	.word	0x08034ca0

08025f68 <__strtok_r>:
 8025f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f6a:	b908      	cbnz	r0, 8025f70 <__strtok_r+0x8>
 8025f6c:	6810      	ldr	r0, [r2, #0]
 8025f6e:	b188      	cbz	r0, 8025f94 <__strtok_r+0x2c>
 8025f70:	4604      	mov	r4, r0
 8025f72:	4620      	mov	r0, r4
 8025f74:	460f      	mov	r7, r1
 8025f76:	f814 5b01 	ldrb.w	r5, [r4], #1
 8025f7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8025f7e:	b91e      	cbnz	r6, 8025f88 <__strtok_r+0x20>
 8025f80:	b965      	cbnz	r5, 8025f9c <__strtok_r+0x34>
 8025f82:	4628      	mov	r0, r5
 8025f84:	6015      	str	r5, [r2, #0]
 8025f86:	e005      	b.n	8025f94 <__strtok_r+0x2c>
 8025f88:	42b5      	cmp	r5, r6
 8025f8a:	d1f6      	bne.n	8025f7a <__strtok_r+0x12>
 8025f8c:	2b00      	cmp	r3, #0
 8025f8e:	d1f0      	bne.n	8025f72 <__strtok_r+0xa>
 8025f90:	6014      	str	r4, [r2, #0]
 8025f92:	7003      	strb	r3, [r0, #0]
 8025f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f96:	461c      	mov	r4, r3
 8025f98:	e00c      	b.n	8025fb4 <__strtok_r+0x4c>
 8025f9a:	b915      	cbnz	r5, 8025fa2 <__strtok_r+0x3a>
 8025f9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025fa0:	460e      	mov	r6, r1
 8025fa2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8025fa6:	42ab      	cmp	r3, r5
 8025fa8:	d1f7      	bne.n	8025f9a <__strtok_r+0x32>
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	d0f3      	beq.n	8025f96 <__strtok_r+0x2e>
 8025fae:	2300      	movs	r3, #0
 8025fb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8025fb4:	6014      	str	r4, [r2, #0]
 8025fb6:	e7ed      	b.n	8025f94 <__strtok_r+0x2c>

08025fb8 <strstr>:
 8025fb8:	780a      	ldrb	r2, [r1, #0]
 8025fba:	b570      	push	{r4, r5, r6, lr}
 8025fbc:	b96a      	cbnz	r2, 8025fda <strstr+0x22>
 8025fbe:	bd70      	pop	{r4, r5, r6, pc}
 8025fc0:	429a      	cmp	r2, r3
 8025fc2:	d109      	bne.n	8025fd8 <strstr+0x20>
 8025fc4:	460c      	mov	r4, r1
 8025fc6:	4605      	mov	r5, r0
 8025fc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8025fcc:	2b00      	cmp	r3, #0
 8025fce:	d0f6      	beq.n	8025fbe <strstr+0x6>
 8025fd0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8025fd4:	429e      	cmp	r6, r3
 8025fd6:	d0f7      	beq.n	8025fc8 <strstr+0x10>
 8025fd8:	3001      	adds	r0, #1
 8025fda:	7803      	ldrb	r3, [r0, #0]
 8025fdc:	2b00      	cmp	r3, #0
 8025fde:	d1ef      	bne.n	8025fc0 <strstr+0x8>
 8025fe0:	4618      	mov	r0, r3
 8025fe2:	e7ec      	b.n	8025fbe <strstr+0x6>

08025fe4 <_close_r>:
 8025fe4:	b538      	push	{r3, r4, r5, lr}
 8025fe6:	2300      	movs	r3, #0
 8025fe8:	4d05      	ldr	r5, [pc, #20]	; (8026000 <_close_r+0x1c>)
 8025fea:	4604      	mov	r4, r0
 8025fec:	4608      	mov	r0, r1
 8025fee:	602b      	str	r3, [r5, #0]
 8025ff0:	f7de fffd 	bl	8004fee <_close>
 8025ff4:	1c43      	adds	r3, r0, #1
 8025ff6:	d102      	bne.n	8025ffe <_close_r+0x1a>
 8025ff8:	682b      	ldr	r3, [r5, #0]
 8025ffa:	b103      	cbz	r3, 8025ffe <_close_r+0x1a>
 8025ffc:	6023      	str	r3, [r4, #0]
 8025ffe:	bd38      	pop	{r3, r4, r5, pc}
 8026000:	20002b2c 	.word	0x20002b2c

08026004 <_lseek_r>:
 8026004:	b538      	push	{r3, r4, r5, lr}
 8026006:	4604      	mov	r4, r0
 8026008:	4d06      	ldr	r5, [pc, #24]	; (8026024 <_lseek_r+0x20>)
 802600a:	4608      	mov	r0, r1
 802600c:	4611      	mov	r1, r2
 802600e:	2200      	movs	r2, #0
 8026010:	602a      	str	r2, [r5, #0]
 8026012:	461a      	mov	r2, r3
 8026014:	f7df f812 	bl	800503c <_lseek>
 8026018:	1c43      	adds	r3, r0, #1
 802601a:	d102      	bne.n	8026022 <_lseek_r+0x1e>
 802601c:	682b      	ldr	r3, [r5, #0]
 802601e:	b103      	cbz	r3, 8026022 <_lseek_r+0x1e>
 8026020:	6023      	str	r3, [r4, #0]
 8026022:	bd38      	pop	{r3, r4, r5, pc}
 8026024:	20002b2c 	.word	0x20002b2c

08026028 <_read_r>:
 8026028:	b538      	push	{r3, r4, r5, lr}
 802602a:	4604      	mov	r4, r0
 802602c:	4d06      	ldr	r5, [pc, #24]	; (8026048 <_read_r+0x20>)
 802602e:	4608      	mov	r0, r1
 8026030:	4611      	mov	r1, r2
 8026032:	2200      	movs	r2, #0
 8026034:	602a      	str	r2, [r5, #0]
 8026036:	461a      	mov	r2, r3
 8026038:	f7de ffa0 	bl	8004f7c <_read>
 802603c:	1c43      	adds	r3, r0, #1
 802603e:	d102      	bne.n	8026046 <_read_r+0x1e>
 8026040:	682b      	ldr	r3, [r5, #0]
 8026042:	b103      	cbz	r3, 8026046 <_read_r+0x1e>
 8026044:	6023      	str	r3, [r4, #0]
 8026046:	bd38      	pop	{r3, r4, r5, pc}
 8026048:	20002b2c 	.word	0x20002b2c

0802604c <_sbrk_r>:
 802604c:	b538      	push	{r3, r4, r5, lr}
 802604e:	2300      	movs	r3, #0
 8026050:	4d05      	ldr	r5, [pc, #20]	; (8026068 <_sbrk_r+0x1c>)
 8026052:	4604      	mov	r4, r0
 8026054:	4608      	mov	r0, r1
 8026056:	602b      	str	r3, [r5, #0]
 8026058:	f7de fffe 	bl	8005058 <_sbrk>
 802605c:	1c43      	adds	r3, r0, #1
 802605e:	d102      	bne.n	8026066 <_sbrk_r+0x1a>
 8026060:	682b      	ldr	r3, [r5, #0]
 8026062:	b103      	cbz	r3, 8026066 <_sbrk_r+0x1a>
 8026064:	6023      	str	r3, [r4, #0]
 8026066:	bd38      	pop	{r3, r4, r5, pc}
 8026068:	20002b2c 	.word	0x20002b2c

0802606c <_write_r>:
 802606c:	b538      	push	{r3, r4, r5, lr}
 802606e:	4604      	mov	r4, r0
 8026070:	4d06      	ldr	r5, [pc, #24]	; (802608c <_write_r+0x20>)
 8026072:	4608      	mov	r0, r1
 8026074:	4611      	mov	r1, r2
 8026076:	2200      	movs	r2, #0
 8026078:	602a      	str	r2, [r5, #0]
 802607a:	461a      	mov	r2, r3
 802607c:	f7de ff9b 	bl	8004fb6 <_write>
 8026080:	1c43      	adds	r3, r0, #1
 8026082:	d102      	bne.n	802608a <_write_r+0x1e>
 8026084:	682b      	ldr	r3, [r5, #0]
 8026086:	b103      	cbz	r3, 802608a <_write_r+0x1e>
 8026088:	6023      	str	r3, [r4, #0]
 802608a:	bd38      	pop	{r3, r4, r5, pc}
 802608c:	20002b2c 	.word	0x20002b2c

08026090 <__errno>:
 8026090:	4b01      	ldr	r3, [pc, #4]	; (8026098 <__errno+0x8>)
 8026092:	6818      	ldr	r0, [r3, #0]
 8026094:	4770      	bx	lr
 8026096:	bf00      	nop
 8026098:	200005c4 	.word	0x200005c4

0802609c <__libc_init_array>:
 802609c:	b570      	push	{r4, r5, r6, lr}
 802609e:	4d0d      	ldr	r5, [pc, #52]	; (80260d4 <__libc_init_array+0x38>)
 80260a0:	2600      	movs	r6, #0
 80260a2:	4c0d      	ldr	r4, [pc, #52]	; (80260d8 <__libc_init_array+0x3c>)
 80260a4:	1b64      	subs	r4, r4, r5
 80260a6:	10a4      	asrs	r4, r4, #2
 80260a8:	42a6      	cmp	r6, r4
 80260aa:	d109      	bne.n	80260c0 <__libc_init_array+0x24>
 80260ac:	4d0b      	ldr	r5, [pc, #44]	; (80260dc <__libc_init_array+0x40>)
 80260ae:	2600      	movs	r6, #0
 80260b0:	4c0b      	ldr	r4, [pc, #44]	; (80260e0 <__libc_init_array+0x44>)
 80260b2:	f002 fa0b 	bl	80284cc <_init>
 80260b6:	1b64      	subs	r4, r4, r5
 80260b8:	10a4      	asrs	r4, r4, #2
 80260ba:	42a6      	cmp	r6, r4
 80260bc:	d105      	bne.n	80260ca <__libc_init_array+0x2e>
 80260be:	bd70      	pop	{r4, r5, r6, pc}
 80260c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80260c4:	3601      	adds	r6, #1
 80260c6:	4798      	blx	r3
 80260c8:	e7ee      	b.n	80260a8 <__libc_init_array+0xc>
 80260ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80260ce:	3601      	adds	r6, #1
 80260d0:	4798      	blx	r3
 80260d2:	e7f2      	b.n	80260ba <__libc_init_array+0x1e>
 80260d4:	08035188 	.word	0x08035188
 80260d8:	08035188 	.word	0x08035188
 80260dc:	08035188 	.word	0x08035188
 80260e0:	0803518c 	.word	0x0803518c

080260e4 <__retarget_lock_acquire_recursive>:
 80260e4:	4770      	bx	lr

080260e6 <__retarget_lock_release_recursive>:
 80260e6:	4770      	bx	lr

080260e8 <strcpy>:
 80260e8:	4603      	mov	r3, r0
 80260ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80260ee:	f803 2b01 	strb.w	r2, [r3], #1
 80260f2:	2a00      	cmp	r2, #0
 80260f4:	d1f9      	bne.n	80260ea <strcpy+0x2>
 80260f6:	4770      	bx	lr

080260f8 <memcpy>:
 80260f8:	440a      	add	r2, r1
 80260fa:	1e43      	subs	r3, r0, #1
 80260fc:	4291      	cmp	r1, r2
 80260fe:	d100      	bne.n	8026102 <memcpy+0xa>
 8026100:	4770      	bx	lr
 8026102:	b510      	push	{r4, lr}
 8026104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026108:	4291      	cmp	r1, r2
 802610a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802610e:	d1f9      	bne.n	8026104 <memcpy+0xc>
 8026110:	bd10      	pop	{r4, pc}

08026112 <abort>:
 8026112:	2006      	movs	r0, #6
 8026114:	b508      	push	{r3, lr}
 8026116:	f000 fcc3 	bl	8026aa0 <raise>
 802611a:	2001      	movs	r0, #1
 802611c:	f7de ff24 	bl	8004f68 <_exit>

08026120 <_free_r>:
 8026120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026122:	2900      	cmp	r1, #0
 8026124:	d043      	beq.n	80261ae <_free_r+0x8e>
 8026126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802612a:	1f0c      	subs	r4, r1, #4
 802612c:	9001      	str	r0, [sp, #4]
 802612e:	2b00      	cmp	r3, #0
 8026130:	bfb8      	it	lt
 8026132:	18e4      	addlt	r4, r4, r3
 8026134:	f7ff fbd0 	bl	80258d8 <__malloc_lock>
 8026138:	4a1e      	ldr	r2, [pc, #120]	; (80261b4 <_free_r+0x94>)
 802613a:	9801      	ldr	r0, [sp, #4]
 802613c:	6813      	ldr	r3, [r2, #0]
 802613e:	b933      	cbnz	r3, 802614e <_free_r+0x2e>
 8026140:	6063      	str	r3, [r4, #4]
 8026142:	6014      	str	r4, [r2, #0]
 8026144:	b003      	add	sp, #12
 8026146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802614a:	f7ff bbcb 	b.w	80258e4 <__malloc_unlock>
 802614e:	42a3      	cmp	r3, r4
 8026150:	d908      	bls.n	8026164 <_free_r+0x44>
 8026152:	6825      	ldr	r5, [r4, #0]
 8026154:	1961      	adds	r1, r4, r5
 8026156:	428b      	cmp	r3, r1
 8026158:	bf01      	itttt	eq
 802615a:	6819      	ldreq	r1, [r3, #0]
 802615c:	685b      	ldreq	r3, [r3, #4]
 802615e:	1949      	addeq	r1, r1, r5
 8026160:	6021      	streq	r1, [r4, #0]
 8026162:	e7ed      	b.n	8026140 <_free_r+0x20>
 8026164:	461a      	mov	r2, r3
 8026166:	685b      	ldr	r3, [r3, #4]
 8026168:	b10b      	cbz	r3, 802616e <_free_r+0x4e>
 802616a:	42a3      	cmp	r3, r4
 802616c:	d9fa      	bls.n	8026164 <_free_r+0x44>
 802616e:	6811      	ldr	r1, [r2, #0]
 8026170:	1855      	adds	r5, r2, r1
 8026172:	42a5      	cmp	r5, r4
 8026174:	d10b      	bne.n	802618e <_free_r+0x6e>
 8026176:	6824      	ldr	r4, [r4, #0]
 8026178:	4421      	add	r1, r4
 802617a:	1854      	adds	r4, r2, r1
 802617c:	6011      	str	r1, [r2, #0]
 802617e:	42a3      	cmp	r3, r4
 8026180:	d1e0      	bne.n	8026144 <_free_r+0x24>
 8026182:	681c      	ldr	r4, [r3, #0]
 8026184:	685b      	ldr	r3, [r3, #4]
 8026186:	440c      	add	r4, r1
 8026188:	6053      	str	r3, [r2, #4]
 802618a:	6014      	str	r4, [r2, #0]
 802618c:	e7da      	b.n	8026144 <_free_r+0x24>
 802618e:	d902      	bls.n	8026196 <_free_r+0x76>
 8026190:	230c      	movs	r3, #12
 8026192:	6003      	str	r3, [r0, #0]
 8026194:	e7d6      	b.n	8026144 <_free_r+0x24>
 8026196:	6825      	ldr	r5, [r4, #0]
 8026198:	1961      	adds	r1, r4, r5
 802619a:	428b      	cmp	r3, r1
 802619c:	bf02      	ittt	eq
 802619e:	6819      	ldreq	r1, [r3, #0]
 80261a0:	685b      	ldreq	r3, [r3, #4]
 80261a2:	1949      	addeq	r1, r1, r5
 80261a4:	6063      	str	r3, [r4, #4]
 80261a6:	bf08      	it	eq
 80261a8:	6021      	streq	r1, [r4, #0]
 80261aa:	6054      	str	r4, [r2, #4]
 80261ac:	e7ca      	b.n	8026144 <_free_r+0x24>
 80261ae:	b003      	add	sp, #12
 80261b0:	bd30      	pop	{r4, r5, pc}
 80261b2:	bf00      	nop
 80261b4:	200029e8 	.word	0x200029e8

080261b8 <_mallinfo_r>:
 80261b8:	b570      	push	{r4, r5, r6, lr}
 80261ba:	4c16      	ldr	r4, [pc, #88]	; (8026214 <_mallinfo_r+0x5c>)
 80261bc:	4605      	mov	r5, r0
 80261be:	4608      	mov	r0, r1
 80261c0:	460e      	mov	r6, r1
 80261c2:	f7ff fb89 	bl	80258d8 <__malloc_lock>
 80261c6:	6823      	ldr	r3, [r4, #0]
 80261c8:	b143      	cbz	r3, 80261dc <_mallinfo_r+0x24>
 80261ca:	2100      	movs	r1, #0
 80261cc:	4630      	mov	r0, r6
 80261ce:	f7ff ff3d 	bl	802604c <_sbrk_r>
 80261d2:	1c42      	adds	r2, r0, #1
 80261d4:	4603      	mov	r3, r0
 80261d6:	bf1c      	itt	ne
 80261d8:	6822      	ldrne	r2, [r4, #0]
 80261da:	1a83      	subne	r3, r0, r2
 80261dc:	4a0e      	ldr	r2, [pc, #56]	; (8026218 <_mallinfo_r+0x60>)
 80261de:	6811      	ldr	r1, [r2, #0]
 80261e0:	2200      	movs	r2, #0
 80261e2:	b991      	cbnz	r1, 802620a <_mallinfo_r+0x52>
 80261e4:	4c0d      	ldr	r4, [pc, #52]	; (802621c <_mallinfo_r+0x64>)
 80261e6:	4630      	mov	r0, r6
 80261e8:	462e      	mov	r6, r5
 80261ea:	6023      	str	r3, [r4, #0]
 80261ec:	1a9b      	subs	r3, r3, r2
 80261ee:	6222      	str	r2, [r4, #32]
 80261f0:	61e3      	str	r3, [r4, #28]
 80261f2:	f7ff fb77 	bl	80258e4 <__malloc_unlock>
 80261f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80261f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80261fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80261fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80261fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026202:	e886 0003 	stmia.w	r6, {r0, r1}
 8026206:	4628      	mov	r0, r5
 8026208:	bd70      	pop	{r4, r5, r6, pc}
 802620a:	6808      	ldr	r0, [r1, #0]
 802620c:	6849      	ldr	r1, [r1, #4]
 802620e:	4402      	add	r2, r0
 8026210:	e7e7      	b.n	80261e2 <_mallinfo_r+0x2a>
 8026212:	bf00      	nop
 8026214:	200029ec 	.word	0x200029ec
 8026218:	200029e8 	.word	0x200029e8
 802621c:	20002b34 	.word	0x20002b34

08026220 <__sfputc_r>:
 8026220:	6893      	ldr	r3, [r2, #8]
 8026222:	3b01      	subs	r3, #1
 8026224:	2b00      	cmp	r3, #0
 8026226:	6093      	str	r3, [r2, #8]
 8026228:	b410      	push	{r4}
 802622a:	da08      	bge.n	802623e <__sfputc_r+0x1e>
 802622c:	6994      	ldr	r4, [r2, #24]
 802622e:	42a3      	cmp	r3, r4
 8026230:	db01      	blt.n	8026236 <__sfputc_r+0x16>
 8026232:	290a      	cmp	r1, #10
 8026234:	d103      	bne.n	802623e <__sfputc_r+0x1e>
 8026236:	f85d 4b04 	ldr.w	r4, [sp], #4
 802623a:	f000 bb73 	b.w	8026924 <__swbuf_r>
 802623e:	6813      	ldr	r3, [r2, #0]
 8026240:	1c58      	adds	r0, r3, #1
 8026242:	6010      	str	r0, [r2, #0]
 8026244:	4608      	mov	r0, r1
 8026246:	7019      	strb	r1, [r3, #0]
 8026248:	f85d 4b04 	ldr.w	r4, [sp], #4
 802624c:	4770      	bx	lr

0802624e <__sfputs_r>:
 802624e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026250:	4606      	mov	r6, r0
 8026252:	460f      	mov	r7, r1
 8026254:	4614      	mov	r4, r2
 8026256:	18d5      	adds	r5, r2, r3
 8026258:	42ac      	cmp	r4, r5
 802625a:	d101      	bne.n	8026260 <__sfputs_r+0x12>
 802625c:	2000      	movs	r0, #0
 802625e:	e007      	b.n	8026270 <__sfputs_r+0x22>
 8026260:	463a      	mov	r2, r7
 8026262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026266:	4630      	mov	r0, r6
 8026268:	f7ff ffda 	bl	8026220 <__sfputc_r>
 802626c:	1c43      	adds	r3, r0, #1
 802626e:	d1f3      	bne.n	8026258 <__sfputs_r+0xa>
 8026270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026274 <_vfiprintf_r>:
 8026274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026278:	460d      	mov	r5, r1
 802627a:	b09d      	sub	sp, #116	; 0x74
 802627c:	4614      	mov	r4, r2
 802627e:	4698      	mov	r8, r3
 8026280:	4606      	mov	r6, r0
 8026282:	b118      	cbz	r0, 802628c <_vfiprintf_r+0x18>
 8026284:	6a03      	ldr	r3, [r0, #32]
 8026286:	b90b      	cbnz	r3, 802628c <_vfiprintf_r+0x18>
 8026288:	f7ff fd3e 	bl	8025d08 <__sinit>
 802628c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802628e:	07d9      	lsls	r1, r3, #31
 8026290:	d405      	bmi.n	802629e <_vfiprintf_r+0x2a>
 8026292:	89ab      	ldrh	r3, [r5, #12]
 8026294:	059a      	lsls	r2, r3, #22
 8026296:	d402      	bmi.n	802629e <_vfiprintf_r+0x2a>
 8026298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802629a:	f7ff ff23 	bl	80260e4 <__retarget_lock_acquire_recursive>
 802629e:	89ab      	ldrh	r3, [r5, #12]
 80262a0:	071b      	lsls	r3, r3, #28
 80262a2:	d501      	bpl.n	80262a8 <_vfiprintf_r+0x34>
 80262a4:	692b      	ldr	r3, [r5, #16]
 80262a6:	b99b      	cbnz	r3, 80262d0 <_vfiprintf_r+0x5c>
 80262a8:	4629      	mov	r1, r5
 80262aa:	4630      	mov	r0, r6
 80262ac:	f000 fb78 	bl	80269a0 <__swsetup_r>
 80262b0:	b170      	cbz	r0, 80262d0 <_vfiprintf_r+0x5c>
 80262b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80262b4:	07dc      	lsls	r4, r3, #31
 80262b6:	d504      	bpl.n	80262c2 <_vfiprintf_r+0x4e>
 80262b8:	f04f 30ff 	mov.w	r0, #4294967295
 80262bc:	b01d      	add	sp, #116	; 0x74
 80262be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262c2:	89ab      	ldrh	r3, [r5, #12]
 80262c4:	0598      	lsls	r0, r3, #22
 80262c6:	d4f7      	bmi.n	80262b8 <_vfiprintf_r+0x44>
 80262c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80262ca:	f7ff ff0c 	bl	80260e6 <__retarget_lock_release_recursive>
 80262ce:	e7f3      	b.n	80262b8 <_vfiprintf_r+0x44>
 80262d0:	2300      	movs	r3, #0
 80262d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80262d6:	f04f 0901 	mov.w	r9, #1
 80262da:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8026494 <_vfiprintf_r+0x220>
 80262de:	9309      	str	r3, [sp, #36]	; 0x24
 80262e0:	2320      	movs	r3, #32
 80262e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80262e6:	2330      	movs	r3, #48	; 0x30
 80262e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80262ec:	4623      	mov	r3, r4
 80262ee:	469a      	mov	sl, r3
 80262f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80262f4:	b10a      	cbz	r2, 80262fa <_vfiprintf_r+0x86>
 80262f6:	2a25      	cmp	r2, #37	; 0x25
 80262f8:	d1f9      	bne.n	80262ee <_vfiprintf_r+0x7a>
 80262fa:	ebba 0b04 	subs.w	fp, sl, r4
 80262fe:	d00b      	beq.n	8026318 <_vfiprintf_r+0xa4>
 8026300:	465b      	mov	r3, fp
 8026302:	4622      	mov	r2, r4
 8026304:	4629      	mov	r1, r5
 8026306:	4630      	mov	r0, r6
 8026308:	f7ff ffa1 	bl	802624e <__sfputs_r>
 802630c:	3001      	adds	r0, #1
 802630e:	f000 80a9 	beq.w	8026464 <_vfiprintf_r+0x1f0>
 8026312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026314:	445a      	add	r2, fp
 8026316:	9209      	str	r2, [sp, #36]	; 0x24
 8026318:	f89a 3000 	ldrb.w	r3, [sl]
 802631c:	2b00      	cmp	r3, #0
 802631e:	f000 80a1 	beq.w	8026464 <_vfiprintf_r+0x1f0>
 8026322:	2300      	movs	r3, #0
 8026324:	f04f 32ff 	mov.w	r2, #4294967295
 8026328:	f10a 0a01 	add.w	sl, sl, #1
 802632c:	9304      	str	r3, [sp, #16]
 802632e:	9307      	str	r3, [sp, #28]
 8026330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026334:	931a      	str	r3, [sp, #104]	; 0x68
 8026336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802633a:	4654      	mov	r4, sl
 802633c:	2205      	movs	r2, #5
 802633e:	4855      	ldr	r0, [pc, #340]	; (8026494 <_vfiprintf_r+0x220>)
 8026340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026344:	f000 fbc8 	bl	8026ad8 <memchr>
 8026348:	9a04      	ldr	r2, [sp, #16]
 802634a:	b9d8      	cbnz	r0, 8026384 <_vfiprintf_r+0x110>
 802634c:	06d1      	lsls	r1, r2, #27
 802634e:	bf44      	itt	mi
 8026350:	2320      	movmi	r3, #32
 8026352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026356:	0713      	lsls	r3, r2, #28
 8026358:	bf44      	itt	mi
 802635a:	232b      	movmi	r3, #43	; 0x2b
 802635c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026360:	f89a 3000 	ldrb.w	r3, [sl]
 8026364:	2b2a      	cmp	r3, #42	; 0x2a
 8026366:	d015      	beq.n	8026394 <_vfiprintf_r+0x120>
 8026368:	9a07      	ldr	r2, [sp, #28]
 802636a:	4654      	mov	r4, sl
 802636c:	2000      	movs	r0, #0
 802636e:	f04f 0c0a 	mov.w	ip, #10
 8026372:	4621      	mov	r1, r4
 8026374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026378:	3b30      	subs	r3, #48	; 0x30
 802637a:	2b09      	cmp	r3, #9
 802637c:	d94d      	bls.n	802641a <_vfiprintf_r+0x1a6>
 802637e:	b1b0      	cbz	r0, 80263ae <_vfiprintf_r+0x13a>
 8026380:	9207      	str	r2, [sp, #28]
 8026382:	e014      	b.n	80263ae <_vfiprintf_r+0x13a>
 8026384:	eba0 0308 	sub.w	r3, r0, r8
 8026388:	46a2      	mov	sl, r4
 802638a:	fa09 f303 	lsl.w	r3, r9, r3
 802638e:	4313      	orrs	r3, r2
 8026390:	9304      	str	r3, [sp, #16]
 8026392:	e7d2      	b.n	802633a <_vfiprintf_r+0xc6>
 8026394:	9b03      	ldr	r3, [sp, #12]
 8026396:	1d19      	adds	r1, r3, #4
 8026398:	681b      	ldr	r3, [r3, #0]
 802639a:	2b00      	cmp	r3, #0
 802639c:	9103      	str	r1, [sp, #12]
 802639e:	bfbb      	ittet	lt
 80263a0:	425b      	neglt	r3, r3
 80263a2:	f042 0202 	orrlt.w	r2, r2, #2
 80263a6:	9307      	strge	r3, [sp, #28]
 80263a8:	9307      	strlt	r3, [sp, #28]
 80263aa:	bfb8      	it	lt
 80263ac:	9204      	strlt	r2, [sp, #16]
 80263ae:	7823      	ldrb	r3, [r4, #0]
 80263b0:	2b2e      	cmp	r3, #46	; 0x2e
 80263b2:	d10c      	bne.n	80263ce <_vfiprintf_r+0x15a>
 80263b4:	7863      	ldrb	r3, [r4, #1]
 80263b6:	2b2a      	cmp	r3, #42	; 0x2a
 80263b8:	d134      	bne.n	8026424 <_vfiprintf_r+0x1b0>
 80263ba:	9b03      	ldr	r3, [sp, #12]
 80263bc:	3402      	adds	r4, #2
 80263be:	1d1a      	adds	r2, r3, #4
 80263c0:	681b      	ldr	r3, [r3, #0]
 80263c2:	2b00      	cmp	r3, #0
 80263c4:	9203      	str	r2, [sp, #12]
 80263c6:	bfb8      	it	lt
 80263c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80263cc:	9305      	str	r3, [sp, #20]
 80263ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80264a4 <_vfiprintf_r+0x230>
 80263d2:	2203      	movs	r2, #3
 80263d4:	7821      	ldrb	r1, [r4, #0]
 80263d6:	4650      	mov	r0, sl
 80263d8:	f000 fb7e 	bl	8026ad8 <memchr>
 80263dc:	b138      	cbz	r0, 80263ee <_vfiprintf_r+0x17a>
 80263de:	eba0 000a 	sub.w	r0, r0, sl
 80263e2:	2240      	movs	r2, #64	; 0x40
 80263e4:	9b04      	ldr	r3, [sp, #16]
 80263e6:	3401      	adds	r4, #1
 80263e8:	4082      	lsls	r2, r0
 80263ea:	4313      	orrs	r3, r2
 80263ec:	9304      	str	r3, [sp, #16]
 80263ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80263f2:	2206      	movs	r2, #6
 80263f4:	4828      	ldr	r0, [pc, #160]	; (8026498 <_vfiprintf_r+0x224>)
 80263f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80263fa:	f000 fb6d 	bl	8026ad8 <memchr>
 80263fe:	2800      	cmp	r0, #0
 8026400:	d03f      	beq.n	8026482 <_vfiprintf_r+0x20e>
 8026402:	4b26      	ldr	r3, [pc, #152]	; (802649c <_vfiprintf_r+0x228>)
 8026404:	bb1b      	cbnz	r3, 802644e <_vfiprintf_r+0x1da>
 8026406:	9b03      	ldr	r3, [sp, #12]
 8026408:	3307      	adds	r3, #7
 802640a:	f023 0307 	bic.w	r3, r3, #7
 802640e:	3308      	adds	r3, #8
 8026410:	9303      	str	r3, [sp, #12]
 8026412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026414:	443b      	add	r3, r7
 8026416:	9309      	str	r3, [sp, #36]	; 0x24
 8026418:	e768      	b.n	80262ec <_vfiprintf_r+0x78>
 802641a:	fb0c 3202 	mla	r2, ip, r2, r3
 802641e:	460c      	mov	r4, r1
 8026420:	2001      	movs	r0, #1
 8026422:	e7a6      	b.n	8026372 <_vfiprintf_r+0xfe>
 8026424:	2300      	movs	r3, #0
 8026426:	3401      	adds	r4, #1
 8026428:	f04f 0c0a 	mov.w	ip, #10
 802642c:	4619      	mov	r1, r3
 802642e:	9305      	str	r3, [sp, #20]
 8026430:	4620      	mov	r0, r4
 8026432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026436:	3a30      	subs	r2, #48	; 0x30
 8026438:	2a09      	cmp	r2, #9
 802643a:	d903      	bls.n	8026444 <_vfiprintf_r+0x1d0>
 802643c:	2b00      	cmp	r3, #0
 802643e:	d0c6      	beq.n	80263ce <_vfiprintf_r+0x15a>
 8026440:	9105      	str	r1, [sp, #20]
 8026442:	e7c4      	b.n	80263ce <_vfiprintf_r+0x15a>
 8026444:	fb0c 2101 	mla	r1, ip, r1, r2
 8026448:	4604      	mov	r4, r0
 802644a:	2301      	movs	r3, #1
 802644c:	e7f0      	b.n	8026430 <_vfiprintf_r+0x1bc>
 802644e:	ab03      	add	r3, sp, #12
 8026450:	462a      	mov	r2, r5
 8026452:	a904      	add	r1, sp, #16
 8026454:	4630      	mov	r0, r6
 8026456:	9300      	str	r3, [sp, #0]
 8026458:	4b11      	ldr	r3, [pc, #68]	; (80264a0 <_vfiprintf_r+0x22c>)
 802645a:	f3af 8000 	nop.w
 802645e:	4607      	mov	r7, r0
 8026460:	1c78      	adds	r0, r7, #1
 8026462:	d1d6      	bne.n	8026412 <_vfiprintf_r+0x19e>
 8026464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026466:	07d9      	lsls	r1, r3, #31
 8026468:	d405      	bmi.n	8026476 <_vfiprintf_r+0x202>
 802646a:	89ab      	ldrh	r3, [r5, #12]
 802646c:	059a      	lsls	r2, r3, #22
 802646e:	d402      	bmi.n	8026476 <_vfiprintf_r+0x202>
 8026470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026472:	f7ff fe38 	bl	80260e6 <__retarget_lock_release_recursive>
 8026476:	89ab      	ldrh	r3, [r5, #12]
 8026478:	065b      	lsls	r3, r3, #25
 802647a:	f53f af1d 	bmi.w	80262b8 <_vfiprintf_r+0x44>
 802647e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026480:	e71c      	b.n	80262bc <_vfiprintf_r+0x48>
 8026482:	ab03      	add	r3, sp, #12
 8026484:	462a      	mov	r2, r5
 8026486:	a904      	add	r1, sp, #16
 8026488:	4630      	mov	r0, r6
 802648a:	9300      	str	r3, [sp, #0]
 802648c:	4b04      	ldr	r3, [pc, #16]	; (80264a0 <_vfiprintf_r+0x22c>)
 802648e:	f000 f87d 	bl	802658c <_printf_i>
 8026492:	e7e4      	b.n	802645e <_vfiprintf_r+0x1ea>
 8026494:	08034cfa 	.word	0x08034cfa
 8026498:	08034d04 	.word	0x08034d04
 802649c:	00000000 	.word	0x00000000
 80264a0:	0802624f 	.word	0x0802624f
 80264a4:	08034d00 	.word	0x08034d00

080264a8 <_printf_common>:
 80264a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80264ac:	4616      	mov	r6, r2
 80264ae:	4699      	mov	r9, r3
 80264b0:	688a      	ldr	r2, [r1, #8]
 80264b2:	4607      	mov	r7, r0
 80264b4:	690b      	ldr	r3, [r1, #16]
 80264b6:	460c      	mov	r4, r1
 80264b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80264bc:	4293      	cmp	r3, r2
 80264be:	bfb8      	it	lt
 80264c0:	4613      	movlt	r3, r2
 80264c2:	6033      	str	r3, [r6, #0]
 80264c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80264c8:	b10a      	cbz	r2, 80264ce <_printf_common+0x26>
 80264ca:	3301      	adds	r3, #1
 80264cc:	6033      	str	r3, [r6, #0]
 80264ce:	6823      	ldr	r3, [r4, #0]
 80264d0:	0699      	lsls	r1, r3, #26
 80264d2:	bf42      	ittt	mi
 80264d4:	6833      	ldrmi	r3, [r6, #0]
 80264d6:	3302      	addmi	r3, #2
 80264d8:	6033      	strmi	r3, [r6, #0]
 80264da:	6825      	ldr	r5, [r4, #0]
 80264dc:	f015 0506 	ands.w	r5, r5, #6
 80264e0:	d106      	bne.n	80264f0 <_printf_common+0x48>
 80264e2:	f104 0a19 	add.w	sl, r4, #25
 80264e6:	68e3      	ldr	r3, [r4, #12]
 80264e8:	6832      	ldr	r2, [r6, #0]
 80264ea:	1a9b      	subs	r3, r3, r2
 80264ec:	42ab      	cmp	r3, r5
 80264ee:	dc2b      	bgt.n	8026548 <_printf_common+0xa0>
 80264f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80264f4:	1e13      	subs	r3, r2, #0
 80264f6:	6822      	ldr	r2, [r4, #0]
 80264f8:	bf18      	it	ne
 80264fa:	2301      	movne	r3, #1
 80264fc:	0692      	lsls	r2, r2, #26
 80264fe:	d430      	bmi.n	8026562 <_printf_common+0xba>
 8026500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026504:	4649      	mov	r1, r9
 8026506:	4638      	mov	r0, r7
 8026508:	47c0      	blx	r8
 802650a:	3001      	adds	r0, #1
 802650c:	d023      	beq.n	8026556 <_printf_common+0xae>
 802650e:	6823      	ldr	r3, [r4, #0]
 8026510:	341a      	adds	r4, #26
 8026512:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8026516:	f003 0306 	and.w	r3, r3, #6
 802651a:	2b04      	cmp	r3, #4
 802651c:	bf0a      	itet	eq
 802651e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8026522:	2500      	movne	r5, #0
 8026524:	6833      	ldreq	r3, [r6, #0]
 8026526:	f04f 0600 	mov.w	r6, #0
 802652a:	bf08      	it	eq
 802652c:	1aed      	subeq	r5, r5, r3
 802652e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8026532:	bf08      	it	eq
 8026534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026538:	4293      	cmp	r3, r2
 802653a:	bfc4      	itt	gt
 802653c:	1a9b      	subgt	r3, r3, r2
 802653e:	18ed      	addgt	r5, r5, r3
 8026540:	42b5      	cmp	r5, r6
 8026542:	d11a      	bne.n	802657a <_printf_common+0xd2>
 8026544:	2000      	movs	r0, #0
 8026546:	e008      	b.n	802655a <_printf_common+0xb2>
 8026548:	2301      	movs	r3, #1
 802654a:	4652      	mov	r2, sl
 802654c:	4649      	mov	r1, r9
 802654e:	4638      	mov	r0, r7
 8026550:	47c0      	blx	r8
 8026552:	3001      	adds	r0, #1
 8026554:	d103      	bne.n	802655e <_printf_common+0xb6>
 8026556:	f04f 30ff 	mov.w	r0, #4294967295
 802655a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802655e:	3501      	adds	r5, #1
 8026560:	e7c1      	b.n	80264e6 <_printf_common+0x3e>
 8026562:	18e1      	adds	r1, r4, r3
 8026564:	1c5a      	adds	r2, r3, #1
 8026566:	2030      	movs	r0, #48	; 0x30
 8026568:	3302      	adds	r3, #2
 802656a:	4422      	add	r2, r4
 802656c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026578:	e7c2      	b.n	8026500 <_printf_common+0x58>
 802657a:	2301      	movs	r3, #1
 802657c:	4622      	mov	r2, r4
 802657e:	4649      	mov	r1, r9
 8026580:	4638      	mov	r0, r7
 8026582:	47c0      	blx	r8
 8026584:	3001      	adds	r0, #1
 8026586:	d0e6      	beq.n	8026556 <_printf_common+0xae>
 8026588:	3601      	adds	r6, #1
 802658a:	e7d9      	b.n	8026540 <_printf_common+0x98>

0802658c <_printf_i>:
 802658c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026590:	7e0f      	ldrb	r7, [r1, #24]
 8026592:	4691      	mov	r9, r2
 8026594:	4680      	mov	r8, r0
 8026596:	460c      	mov	r4, r1
 8026598:	2f78      	cmp	r7, #120	; 0x78
 802659a:	469a      	mov	sl, r3
 802659c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802659e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80265a2:	d807      	bhi.n	80265b4 <_printf_i+0x28>
 80265a4:	2f62      	cmp	r7, #98	; 0x62
 80265a6:	d80a      	bhi.n	80265be <_printf_i+0x32>
 80265a8:	2f00      	cmp	r7, #0
 80265aa:	f000 80d3 	beq.w	8026754 <_printf_i+0x1c8>
 80265ae:	2f58      	cmp	r7, #88	; 0x58
 80265b0:	f000 80bf 	beq.w	8026732 <_printf_i+0x1a6>
 80265b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80265b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80265bc:	e03a      	b.n	8026634 <_printf_i+0xa8>
 80265be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80265c2:	2b15      	cmp	r3, #21
 80265c4:	d8f6      	bhi.n	80265b4 <_printf_i+0x28>
 80265c6:	a101      	add	r1, pc, #4	; (adr r1, 80265cc <_printf_i+0x40>)
 80265c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80265cc:	08026625 	.word	0x08026625
 80265d0:	08026639 	.word	0x08026639
 80265d4:	080265b5 	.word	0x080265b5
 80265d8:	080265b5 	.word	0x080265b5
 80265dc:	080265b5 	.word	0x080265b5
 80265e0:	080265b5 	.word	0x080265b5
 80265e4:	08026639 	.word	0x08026639
 80265e8:	080265b5 	.word	0x080265b5
 80265ec:	080265b5 	.word	0x080265b5
 80265f0:	080265b5 	.word	0x080265b5
 80265f4:	080265b5 	.word	0x080265b5
 80265f8:	0802673b 	.word	0x0802673b
 80265fc:	08026665 	.word	0x08026665
 8026600:	080266f7 	.word	0x080266f7
 8026604:	080265b5 	.word	0x080265b5
 8026608:	080265b5 	.word	0x080265b5
 802660c:	0802675d 	.word	0x0802675d
 8026610:	080265b5 	.word	0x080265b5
 8026614:	08026665 	.word	0x08026665
 8026618:	080265b5 	.word	0x080265b5
 802661c:	080265b5 	.word	0x080265b5
 8026620:	080266ff 	.word	0x080266ff
 8026624:	682b      	ldr	r3, [r5, #0]
 8026626:	1d1a      	adds	r2, r3, #4
 8026628:	681b      	ldr	r3, [r3, #0]
 802662a:	602a      	str	r2, [r5, #0]
 802662c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026634:	2301      	movs	r3, #1
 8026636:	e09e      	b.n	8026776 <_printf_i+0x1ea>
 8026638:	6820      	ldr	r0, [r4, #0]
 802663a:	682b      	ldr	r3, [r5, #0]
 802663c:	0607      	lsls	r7, r0, #24
 802663e:	f103 0104 	add.w	r1, r3, #4
 8026642:	6029      	str	r1, [r5, #0]
 8026644:	d501      	bpl.n	802664a <_printf_i+0xbe>
 8026646:	681e      	ldr	r6, [r3, #0]
 8026648:	e003      	b.n	8026652 <_printf_i+0xc6>
 802664a:	0646      	lsls	r6, r0, #25
 802664c:	d5fb      	bpl.n	8026646 <_printf_i+0xba>
 802664e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8026652:	2e00      	cmp	r6, #0
 8026654:	da03      	bge.n	802665e <_printf_i+0xd2>
 8026656:	232d      	movs	r3, #45	; 0x2d
 8026658:	4276      	negs	r6, r6
 802665a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802665e:	4859      	ldr	r0, [pc, #356]	; (80267c4 <_printf_i+0x238>)
 8026660:	230a      	movs	r3, #10
 8026662:	e012      	b.n	802668a <_printf_i+0xfe>
 8026664:	682b      	ldr	r3, [r5, #0]
 8026666:	6820      	ldr	r0, [r4, #0]
 8026668:	1d19      	adds	r1, r3, #4
 802666a:	6029      	str	r1, [r5, #0]
 802666c:	0605      	lsls	r5, r0, #24
 802666e:	d501      	bpl.n	8026674 <_printf_i+0xe8>
 8026670:	681e      	ldr	r6, [r3, #0]
 8026672:	e002      	b.n	802667a <_printf_i+0xee>
 8026674:	0641      	lsls	r1, r0, #25
 8026676:	d5fb      	bpl.n	8026670 <_printf_i+0xe4>
 8026678:	881e      	ldrh	r6, [r3, #0]
 802667a:	2f6f      	cmp	r7, #111	; 0x6f
 802667c:	4851      	ldr	r0, [pc, #324]	; (80267c4 <_printf_i+0x238>)
 802667e:	bf0c      	ite	eq
 8026680:	2308      	moveq	r3, #8
 8026682:	230a      	movne	r3, #10
 8026684:	2100      	movs	r1, #0
 8026686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802668a:	6865      	ldr	r5, [r4, #4]
 802668c:	2d00      	cmp	r5, #0
 802668e:	60a5      	str	r5, [r4, #8]
 8026690:	bfa2      	ittt	ge
 8026692:	6821      	ldrge	r1, [r4, #0]
 8026694:	f021 0104 	bicge.w	r1, r1, #4
 8026698:	6021      	strge	r1, [r4, #0]
 802669a:	b90e      	cbnz	r6, 80266a0 <_printf_i+0x114>
 802669c:	2d00      	cmp	r5, #0
 802669e:	d04a      	beq.n	8026736 <_printf_i+0x1aa>
 80266a0:	4615      	mov	r5, r2
 80266a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80266a6:	fb03 6711 	mls	r7, r3, r1, r6
 80266aa:	5dc7      	ldrb	r7, [r0, r7]
 80266ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80266b0:	4637      	mov	r7, r6
 80266b2:	460e      	mov	r6, r1
 80266b4:	42bb      	cmp	r3, r7
 80266b6:	d9f4      	bls.n	80266a2 <_printf_i+0x116>
 80266b8:	2b08      	cmp	r3, #8
 80266ba:	d10b      	bne.n	80266d4 <_printf_i+0x148>
 80266bc:	6823      	ldr	r3, [r4, #0]
 80266be:	07de      	lsls	r6, r3, #31
 80266c0:	d508      	bpl.n	80266d4 <_printf_i+0x148>
 80266c2:	6923      	ldr	r3, [r4, #16]
 80266c4:	6861      	ldr	r1, [r4, #4]
 80266c6:	4299      	cmp	r1, r3
 80266c8:	bfde      	ittt	le
 80266ca:	2330      	movle	r3, #48	; 0x30
 80266cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80266d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80266d4:	1b52      	subs	r2, r2, r5
 80266d6:	6122      	str	r2, [r4, #16]
 80266d8:	464b      	mov	r3, r9
 80266da:	aa03      	add	r2, sp, #12
 80266dc:	4621      	mov	r1, r4
 80266de:	4640      	mov	r0, r8
 80266e0:	f8cd a000 	str.w	sl, [sp]
 80266e4:	f7ff fee0 	bl	80264a8 <_printf_common>
 80266e8:	3001      	adds	r0, #1
 80266ea:	d149      	bne.n	8026780 <_printf_i+0x1f4>
 80266ec:	f04f 30ff 	mov.w	r0, #4294967295
 80266f0:	b004      	add	sp, #16
 80266f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80266f6:	6823      	ldr	r3, [r4, #0]
 80266f8:	f043 0320 	orr.w	r3, r3, #32
 80266fc:	6023      	str	r3, [r4, #0]
 80266fe:	2778      	movs	r7, #120	; 0x78
 8026700:	4831      	ldr	r0, [pc, #196]	; (80267c8 <_printf_i+0x23c>)
 8026702:	6823      	ldr	r3, [r4, #0]
 8026704:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8026708:	061f      	lsls	r7, r3, #24
 802670a:	6829      	ldr	r1, [r5, #0]
 802670c:	f851 6b04 	ldr.w	r6, [r1], #4
 8026710:	d402      	bmi.n	8026718 <_printf_i+0x18c>
 8026712:	065f      	lsls	r7, r3, #25
 8026714:	bf48      	it	mi
 8026716:	b2b6      	uxthmi	r6, r6
 8026718:	07df      	lsls	r7, r3, #31
 802671a:	6029      	str	r1, [r5, #0]
 802671c:	bf44      	itt	mi
 802671e:	f043 0320 	orrmi.w	r3, r3, #32
 8026722:	6023      	strmi	r3, [r4, #0]
 8026724:	b91e      	cbnz	r6, 802672e <_printf_i+0x1a2>
 8026726:	6823      	ldr	r3, [r4, #0]
 8026728:	f023 0320 	bic.w	r3, r3, #32
 802672c:	6023      	str	r3, [r4, #0]
 802672e:	2310      	movs	r3, #16
 8026730:	e7a8      	b.n	8026684 <_printf_i+0xf8>
 8026732:	4824      	ldr	r0, [pc, #144]	; (80267c4 <_printf_i+0x238>)
 8026734:	e7e5      	b.n	8026702 <_printf_i+0x176>
 8026736:	4615      	mov	r5, r2
 8026738:	e7be      	b.n	80266b8 <_printf_i+0x12c>
 802673a:	682b      	ldr	r3, [r5, #0]
 802673c:	6826      	ldr	r6, [r4, #0]
 802673e:	1d18      	adds	r0, r3, #4
 8026740:	6961      	ldr	r1, [r4, #20]
 8026742:	6028      	str	r0, [r5, #0]
 8026744:	0635      	lsls	r5, r6, #24
 8026746:	681b      	ldr	r3, [r3, #0]
 8026748:	d501      	bpl.n	802674e <_printf_i+0x1c2>
 802674a:	6019      	str	r1, [r3, #0]
 802674c:	e002      	b.n	8026754 <_printf_i+0x1c8>
 802674e:	0670      	lsls	r0, r6, #25
 8026750:	d5fb      	bpl.n	802674a <_printf_i+0x1be>
 8026752:	8019      	strh	r1, [r3, #0]
 8026754:	2300      	movs	r3, #0
 8026756:	4615      	mov	r5, r2
 8026758:	6123      	str	r3, [r4, #16]
 802675a:	e7bd      	b.n	80266d8 <_printf_i+0x14c>
 802675c:	682b      	ldr	r3, [r5, #0]
 802675e:	2100      	movs	r1, #0
 8026760:	1d1a      	adds	r2, r3, #4
 8026762:	602a      	str	r2, [r5, #0]
 8026764:	681d      	ldr	r5, [r3, #0]
 8026766:	6862      	ldr	r2, [r4, #4]
 8026768:	4628      	mov	r0, r5
 802676a:	f000 f9b5 	bl	8026ad8 <memchr>
 802676e:	b108      	cbz	r0, 8026774 <_printf_i+0x1e8>
 8026770:	1b40      	subs	r0, r0, r5
 8026772:	6060      	str	r0, [r4, #4]
 8026774:	6863      	ldr	r3, [r4, #4]
 8026776:	6123      	str	r3, [r4, #16]
 8026778:	2300      	movs	r3, #0
 802677a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802677e:	e7ab      	b.n	80266d8 <_printf_i+0x14c>
 8026780:	6923      	ldr	r3, [r4, #16]
 8026782:	462a      	mov	r2, r5
 8026784:	4649      	mov	r1, r9
 8026786:	4640      	mov	r0, r8
 8026788:	47d0      	blx	sl
 802678a:	3001      	adds	r0, #1
 802678c:	d0ae      	beq.n	80266ec <_printf_i+0x160>
 802678e:	6823      	ldr	r3, [r4, #0]
 8026790:	079b      	lsls	r3, r3, #30
 8026792:	d413      	bmi.n	80267bc <_printf_i+0x230>
 8026794:	68e0      	ldr	r0, [r4, #12]
 8026796:	9b03      	ldr	r3, [sp, #12]
 8026798:	4298      	cmp	r0, r3
 802679a:	bfb8      	it	lt
 802679c:	4618      	movlt	r0, r3
 802679e:	e7a7      	b.n	80266f0 <_printf_i+0x164>
 80267a0:	2301      	movs	r3, #1
 80267a2:	4632      	mov	r2, r6
 80267a4:	4649      	mov	r1, r9
 80267a6:	4640      	mov	r0, r8
 80267a8:	47d0      	blx	sl
 80267aa:	3001      	adds	r0, #1
 80267ac:	d09e      	beq.n	80266ec <_printf_i+0x160>
 80267ae:	3501      	adds	r5, #1
 80267b0:	68e3      	ldr	r3, [r4, #12]
 80267b2:	9903      	ldr	r1, [sp, #12]
 80267b4:	1a5b      	subs	r3, r3, r1
 80267b6:	42ab      	cmp	r3, r5
 80267b8:	dcf2      	bgt.n	80267a0 <_printf_i+0x214>
 80267ba:	e7eb      	b.n	8026794 <_printf_i+0x208>
 80267bc:	2500      	movs	r5, #0
 80267be:	f104 0619 	add.w	r6, r4, #25
 80267c2:	e7f5      	b.n	80267b0 <_printf_i+0x224>
 80267c4:	08034d0b 	.word	0x08034d0b
 80267c8:	08034d1c 	.word	0x08034d1c

080267cc <__sflush_r>:
 80267cc:	898a      	ldrh	r2, [r1, #12]
 80267ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80267d2:	4605      	mov	r5, r0
 80267d4:	0710      	lsls	r0, r2, #28
 80267d6:	460c      	mov	r4, r1
 80267d8:	d458      	bmi.n	802688c <__sflush_r+0xc0>
 80267da:	684b      	ldr	r3, [r1, #4]
 80267dc:	2b00      	cmp	r3, #0
 80267de:	dc05      	bgt.n	80267ec <__sflush_r+0x20>
 80267e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80267e2:	2b00      	cmp	r3, #0
 80267e4:	dc02      	bgt.n	80267ec <__sflush_r+0x20>
 80267e6:	2000      	movs	r0, #0
 80267e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80267ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80267ee:	2e00      	cmp	r6, #0
 80267f0:	d0f9      	beq.n	80267e6 <__sflush_r+0x1a>
 80267f2:	2300      	movs	r3, #0
 80267f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80267f8:	682f      	ldr	r7, [r5, #0]
 80267fa:	6a21      	ldr	r1, [r4, #32]
 80267fc:	602b      	str	r3, [r5, #0]
 80267fe:	d032      	beq.n	8026866 <__sflush_r+0x9a>
 8026800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026802:	89a3      	ldrh	r3, [r4, #12]
 8026804:	075a      	lsls	r2, r3, #29
 8026806:	d505      	bpl.n	8026814 <__sflush_r+0x48>
 8026808:	6863      	ldr	r3, [r4, #4]
 802680a:	1ac0      	subs	r0, r0, r3
 802680c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802680e:	b10b      	cbz	r3, 8026814 <__sflush_r+0x48>
 8026810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026812:	1ac0      	subs	r0, r0, r3
 8026814:	2300      	movs	r3, #0
 8026816:	4602      	mov	r2, r0
 8026818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802681a:	4628      	mov	r0, r5
 802681c:	6a21      	ldr	r1, [r4, #32]
 802681e:	47b0      	blx	r6
 8026820:	1c43      	adds	r3, r0, #1
 8026822:	89a3      	ldrh	r3, [r4, #12]
 8026824:	d106      	bne.n	8026834 <__sflush_r+0x68>
 8026826:	6829      	ldr	r1, [r5, #0]
 8026828:	291d      	cmp	r1, #29
 802682a:	d82b      	bhi.n	8026884 <__sflush_r+0xb8>
 802682c:	4a28      	ldr	r2, [pc, #160]	; (80268d0 <__sflush_r+0x104>)
 802682e:	410a      	asrs	r2, r1
 8026830:	07d6      	lsls	r6, r2, #31
 8026832:	d427      	bmi.n	8026884 <__sflush_r+0xb8>
 8026834:	2200      	movs	r2, #0
 8026836:	04d9      	lsls	r1, r3, #19
 8026838:	6062      	str	r2, [r4, #4]
 802683a:	6922      	ldr	r2, [r4, #16]
 802683c:	6022      	str	r2, [r4, #0]
 802683e:	d504      	bpl.n	802684a <__sflush_r+0x7e>
 8026840:	1c42      	adds	r2, r0, #1
 8026842:	d101      	bne.n	8026848 <__sflush_r+0x7c>
 8026844:	682b      	ldr	r3, [r5, #0]
 8026846:	b903      	cbnz	r3, 802684a <__sflush_r+0x7e>
 8026848:	6560      	str	r0, [r4, #84]	; 0x54
 802684a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802684c:	602f      	str	r7, [r5, #0]
 802684e:	2900      	cmp	r1, #0
 8026850:	d0c9      	beq.n	80267e6 <__sflush_r+0x1a>
 8026852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026856:	4299      	cmp	r1, r3
 8026858:	d002      	beq.n	8026860 <__sflush_r+0x94>
 802685a:	4628      	mov	r0, r5
 802685c:	f7ff fc60 	bl	8026120 <_free_r>
 8026860:	2000      	movs	r0, #0
 8026862:	6360      	str	r0, [r4, #52]	; 0x34
 8026864:	e7c0      	b.n	80267e8 <__sflush_r+0x1c>
 8026866:	2301      	movs	r3, #1
 8026868:	4628      	mov	r0, r5
 802686a:	47b0      	blx	r6
 802686c:	1c41      	adds	r1, r0, #1
 802686e:	d1c8      	bne.n	8026802 <__sflush_r+0x36>
 8026870:	682b      	ldr	r3, [r5, #0]
 8026872:	2b00      	cmp	r3, #0
 8026874:	d0c5      	beq.n	8026802 <__sflush_r+0x36>
 8026876:	2b1d      	cmp	r3, #29
 8026878:	d001      	beq.n	802687e <__sflush_r+0xb2>
 802687a:	2b16      	cmp	r3, #22
 802687c:	d101      	bne.n	8026882 <__sflush_r+0xb6>
 802687e:	602f      	str	r7, [r5, #0]
 8026880:	e7b1      	b.n	80267e6 <__sflush_r+0x1a>
 8026882:	89a3      	ldrh	r3, [r4, #12]
 8026884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026888:	81a3      	strh	r3, [r4, #12]
 802688a:	e7ad      	b.n	80267e8 <__sflush_r+0x1c>
 802688c:	690f      	ldr	r7, [r1, #16]
 802688e:	2f00      	cmp	r7, #0
 8026890:	d0a9      	beq.n	80267e6 <__sflush_r+0x1a>
 8026892:	0793      	lsls	r3, r2, #30
 8026894:	680e      	ldr	r6, [r1, #0]
 8026896:	600f      	str	r7, [r1, #0]
 8026898:	bf0c      	ite	eq
 802689a:	694b      	ldreq	r3, [r1, #20]
 802689c:	2300      	movne	r3, #0
 802689e:	eba6 0807 	sub.w	r8, r6, r7
 80268a2:	608b      	str	r3, [r1, #8]
 80268a4:	f1b8 0f00 	cmp.w	r8, #0
 80268a8:	dd9d      	ble.n	80267e6 <__sflush_r+0x1a>
 80268aa:	4643      	mov	r3, r8
 80268ac:	463a      	mov	r2, r7
 80268ae:	6a21      	ldr	r1, [r4, #32]
 80268b0:	4628      	mov	r0, r5
 80268b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80268b4:	47b0      	blx	r6
 80268b6:	2800      	cmp	r0, #0
 80268b8:	dc06      	bgt.n	80268c8 <__sflush_r+0xfc>
 80268ba:	89a3      	ldrh	r3, [r4, #12]
 80268bc:	f04f 30ff 	mov.w	r0, #4294967295
 80268c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80268c4:	81a3      	strh	r3, [r4, #12]
 80268c6:	e78f      	b.n	80267e8 <__sflush_r+0x1c>
 80268c8:	4407      	add	r7, r0
 80268ca:	eba8 0800 	sub.w	r8, r8, r0
 80268ce:	e7e9      	b.n	80268a4 <__sflush_r+0xd8>
 80268d0:	dfbffffe 	.word	0xdfbffffe

080268d4 <_fflush_r>:
 80268d4:	b538      	push	{r3, r4, r5, lr}
 80268d6:	690b      	ldr	r3, [r1, #16]
 80268d8:	4605      	mov	r5, r0
 80268da:	460c      	mov	r4, r1
 80268dc:	b913      	cbnz	r3, 80268e4 <_fflush_r+0x10>
 80268de:	2500      	movs	r5, #0
 80268e0:	4628      	mov	r0, r5
 80268e2:	bd38      	pop	{r3, r4, r5, pc}
 80268e4:	b118      	cbz	r0, 80268ee <_fflush_r+0x1a>
 80268e6:	6a03      	ldr	r3, [r0, #32]
 80268e8:	b90b      	cbnz	r3, 80268ee <_fflush_r+0x1a>
 80268ea:	f7ff fa0d 	bl	8025d08 <__sinit>
 80268ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80268f2:	2b00      	cmp	r3, #0
 80268f4:	d0f3      	beq.n	80268de <_fflush_r+0xa>
 80268f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80268f8:	07d0      	lsls	r0, r2, #31
 80268fa:	d404      	bmi.n	8026906 <_fflush_r+0x32>
 80268fc:	0599      	lsls	r1, r3, #22
 80268fe:	d402      	bmi.n	8026906 <_fflush_r+0x32>
 8026900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026902:	f7ff fbef 	bl	80260e4 <__retarget_lock_acquire_recursive>
 8026906:	4628      	mov	r0, r5
 8026908:	4621      	mov	r1, r4
 802690a:	f7ff ff5f 	bl	80267cc <__sflush_r>
 802690e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026910:	4605      	mov	r5, r0
 8026912:	07da      	lsls	r2, r3, #31
 8026914:	d4e4      	bmi.n	80268e0 <_fflush_r+0xc>
 8026916:	89a3      	ldrh	r3, [r4, #12]
 8026918:	059b      	lsls	r3, r3, #22
 802691a:	d4e1      	bmi.n	80268e0 <_fflush_r+0xc>
 802691c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802691e:	f7ff fbe2 	bl	80260e6 <__retarget_lock_release_recursive>
 8026922:	e7dd      	b.n	80268e0 <_fflush_r+0xc>

08026924 <__swbuf_r>:
 8026924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026926:	460e      	mov	r6, r1
 8026928:	4614      	mov	r4, r2
 802692a:	4605      	mov	r5, r0
 802692c:	b118      	cbz	r0, 8026936 <__swbuf_r+0x12>
 802692e:	6a03      	ldr	r3, [r0, #32]
 8026930:	b90b      	cbnz	r3, 8026936 <__swbuf_r+0x12>
 8026932:	f7ff f9e9 	bl	8025d08 <__sinit>
 8026936:	69a3      	ldr	r3, [r4, #24]
 8026938:	60a3      	str	r3, [r4, #8]
 802693a:	89a3      	ldrh	r3, [r4, #12]
 802693c:	071a      	lsls	r2, r3, #28
 802693e:	d525      	bpl.n	802698c <__swbuf_r+0x68>
 8026940:	6923      	ldr	r3, [r4, #16]
 8026942:	b31b      	cbz	r3, 802698c <__swbuf_r+0x68>
 8026944:	6823      	ldr	r3, [r4, #0]
 8026946:	b2f6      	uxtb	r6, r6
 8026948:	6922      	ldr	r2, [r4, #16]
 802694a:	4637      	mov	r7, r6
 802694c:	1a98      	subs	r0, r3, r2
 802694e:	6963      	ldr	r3, [r4, #20]
 8026950:	4283      	cmp	r3, r0
 8026952:	dc04      	bgt.n	802695e <__swbuf_r+0x3a>
 8026954:	4621      	mov	r1, r4
 8026956:	4628      	mov	r0, r5
 8026958:	f7ff ffbc 	bl	80268d4 <_fflush_r>
 802695c:	b9e0      	cbnz	r0, 8026998 <__swbuf_r+0x74>
 802695e:	68a3      	ldr	r3, [r4, #8]
 8026960:	3b01      	subs	r3, #1
 8026962:	60a3      	str	r3, [r4, #8]
 8026964:	6823      	ldr	r3, [r4, #0]
 8026966:	1c5a      	adds	r2, r3, #1
 8026968:	6022      	str	r2, [r4, #0]
 802696a:	701e      	strb	r6, [r3, #0]
 802696c:	1c43      	adds	r3, r0, #1
 802696e:	6962      	ldr	r2, [r4, #20]
 8026970:	429a      	cmp	r2, r3
 8026972:	d004      	beq.n	802697e <__swbuf_r+0x5a>
 8026974:	89a3      	ldrh	r3, [r4, #12]
 8026976:	07db      	lsls	r3, r3, #31
 8026978:	d506      	bpl.n	8026988 <__swbuf_r+0x64>
 802697a:	2e0a      	cmp	r6, #10
 802697c:	d104      	bne.n	8026988 <__swbuf_r+0x64>
 802697e:	4621      	mov	r1, r4
 8026980:	4628      	mov	r0, r5
 8026982:	f7ff ffa7 	bl	80268d4 <_fflush_r>
 8026986:	b938      	cbnz	r0, 8026998 <__swbuf_r+0x74>
 8026988:	4638      	mov	r0, r7
 802698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802698c:	4621      	mov	r1, r4
 802698e:	4628      	mov	r0, r5
 8026990:	f000 f806 	bl	80269a0 <__swsetup_r>
 8026994:	2800      	cmp	r0, #0
 8026996:	d0d5      	beq.n	8026944 <__swbuf_r+0x20>
 8026998:	f04f 37ff 	mov.w	r7, #4294967295
 802699c:	e7f4      	b.n	8026988 <__swbuf_r+0x64>
	...

080269a0 <__swsetup_r>:
 80269a0:	b538      	push	{r3, r4, r5, lr}
 80269a2:	4b2a      	ldr	r3, [pc, #168]	; (8026a4c <__swsetup_r+0xac>)
 80269a4:	4605      	mov	r5, r0
 80269a6:	460c      	mov	r4, r1
 80269a8:	6818      	ldr	r0, [r3, #0]
 80269aa:	b118      	cbz	r0, 80269b4 <__swsetup_r+0x14>
 80269ac:	6a03      	ldr	r3, [r0, #32]
 80269ae:	b90b      	cbnz	r3, 80269b4 <__swsetup_r+0x14>
 80269b0:	f7ff f9aa 	bl	8025d08 <__sinit>
 80269b4:	89a3      	ldrh	r3, [r4, #12]
 80269b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80269ba:	0718      	lsls	r0, r3, #28
 80269bc:	d422      	bmi.n	8026a04 <__swsetup_r+0x64>
 80269be:	06d9      	lsls	r1, r3, #27
 80269c0:	d407      	bmi.n	80269d2 <__swsetup_r+0x32>
 80269c2:	2309      	movs	r3, #9
 80269c4:	602b      	str	r3, [r5, #0]
 80269c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80269ca:	f04f 30ff 	mov.w	r0, #4294967295
 80269ce:	81a3      	strh	r3, [r4, #12]
 80269d0:	e034      	b.n	8026a3c <__swsetup_r+0x9c>
 80269d2:	0758      	lsls	r0, r3, #29
 80269d4:	d512      	bpl.n	80269fc <__swsetup_r+0x5c>
 80269d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80269d8:	b141      	cbz	r1, 80269ec <__swsetup_r+0x4c>
 80269da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80269de:	4299      	cmp	r1, r3
 80269e0:	d002      	beq.n	80269e8 <__swsetup_r+0x48>
 80269e2:	4628      	mov	r0, r5
 80269e4:	f7ff fb9c 	bl	8026120 <_free_r>
 80269e8:	2300      	movs	r3, #0
 80269ea:	6363      	str	r3, [r4, #52]	; 0x34
 80269ec:	89a3      	ldrh	r3, [r4, #12]
 80269ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80269f2:	81a3      	strh	r3, [r4, #12]
 80269f4:	2300      	movs	r3, #0
 80269f6:	6063      	str	r3, [r4, #4]
 80269f8:	6923      	ldr	r3, [r4, #16]
 80269fa:	6023      	str	r3, [r4, #0]
 80269fc:	89a3      	ldrh	r3, [r4, #12]
 80269fe:	f043 0308 	orr.w	r3, r3, #8
 8026a02:	81a3      	strh	r3, [r4, #12]
 8026a04:	6923      	ldr	r3, [r4, #16]
 8026a06:	b94b      	cbnz	r3, 8026a1c <__swsetup_r+0x7c>
 8026a08:	89a3      	ldrh	r3, [r4, #12]
 8026a0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026a12:	d003      	beq.n	8026a1c <__swsetup_r+0x7c>
 8026a14:	4621      	mov	r1, r4
 8026a16:	4628      	mov	r0, r5
 8026a18:	f000 f891 	bl	8026b3e <__smakebuf_r>
 8026a1c:	89a0      	ldrh	r0, [r4, #12]
 8026a1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026a22:	f010 0301 	ands.w	r3, r0, #1
 8026a26:	d00a      	beq.n	8026a3e <__swsetup_r+0x9e>
 8026a28:	2300      	movs	r3, #0
 8026a2a:	60a3      	str	r3, [r4, #8]
 8026a2c:	6963      	ldr	r3, [r4, #20]
 8026a2e:	425b      	negs	r3, r3
 8026a30:	61a3      	str	r3, [r4, #24]
 8026a32:	6923      	ldr	r3, [r4, #16]
 8026a34:	b943      	cbnz	r3, 8026a48 <__swsetup_r+0xa8>
 8026a36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026a3a:	d1c4      	bne.n	80269c6 <__swsetup_r+0x26>
 8026a3c:	bd38      	pop	{r3, r4, r5, pc}
 8026a3e:	0781      	lsls	r1, r0, #30
 8026a40:	bf58      	it	pl
 8026a42:	6963      	ldrpl	r3, [r4, #20]
 8026a44:	60a3      	str	r3, [r4, #8]
 8026a46:	e7f4      	b.n	8026a32 <__swsetup_r+0x92>
 8026a48:	2000      	movs	r0, #0
 8026a4a:	e7f7      	b.n	8026a3c <__swsetup_r+0x9c>
 8026a4c:	200005c4 	.word	0x200005c4

08026a50 <_raise_r>:
 8026a50:	291f      	cmp	r1, #31
 8026a52:	b538      	push	{r3, r4, r5, lr}
 8026a54:	4604      	mov	r4, r0
 8026a56:	460d      	mov	r5, r1
 8026a58:	d904      	bls.n	8026a64 <_raise_r+0x14>
 8026a5a:	2316      	movs	r3, #22
 8026a5c:	6003      	str	r3, [r0, #0]
 8026a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8026a62:	bd38      	pop	{r3, r4, r5, pc}
 8026a64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8026a66:	b112      	cbz	r2, 8026a6e <_raise_r+0x1e>
 8026a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026a6c:	b94b      	cbnz	r3, 8026a82 <_raise_r+0x32>
 8026a6e:	4620      	mov	r0, r4
 8026a70:	f000 f830 	bl	8026ad4 <_getpid_r>
 8026a74:	462a      	mov	r2, r5
 8026a76:	4601      	mov	r1, r0
 8026a78:	4620      	mov	r0, r4
 8026a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026a7e:	f000 b817 	b.w	8026ab0 <_kill_r>
 8026a82:	2b01      	cmp	r3, #1
 8026a84:	d00a      	beq.n	8026a9c <_raise_r+0x4c>
 8026a86:	1c59      	adds	r1, r3, #1
 8026a88:	d103      	bne.n	8026a92 <_raise_r+0x42>
 8026a8a:	2316      	movs	r3, #22
 8026a8c:	6003      	str	r3, [r0, #0]
 8026a8e:	2001      	movs	r0, #1
 8026a90:	e7e7      	b.n	8026a62 <_raise_r+0x12>
 8026a92:	2400      	movs	r4, #0
 8026a94:	4628      	mov	r0, r5
 8026a96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026a9a:	4798      	blx	r3
 8026a9c:	2000      	movs	r0, #0
 8026a9e:	e7e0      	b.n	8026a62 <_raise_r+0x12>

08026aa0 <raise>:
 8026aa0:	4b02      	ldr	r3, [pc, #8]	; (8026aac <raise+0xc>)
 8026aa2:	4601      	mov	r1, r0
 8026aa4:	6818      	ldr	r0, [r3, #0]
 8026aa6:	f7ff bfd3 	b.w	8026a50 <_raise_r>
 8026aaa:	bf00      	nop
 8026aac:	200005c4 	.word	0x200005c4

08026ab0 <_kill_r>:
 8026ab0:	b538      	push	{r3, r4, r5, lr}
 8026ab2:	2300      	movs	r3, #0
 8026ab4:	4d06      	ldr	r5, [pc, #24]	; (8026ad0 <_kill_r+0x20>)
 8026ab6:	4604      	mov	r4, r0
 8026ab8:	4608      	mov	r0, r1
 8026aba:	4611      	mov	r1, r2
 8026abc:	602b      	str	r3, [r5, #0]
 8026abe:	f7de fa43 	bl	8004f48 <_kill>
 8026ac2:	1c43      	adds	r3, r0, #1
 8026ac4:	d102      	bne.n	8026acc <_kill_r+0x1c>
 8026ac6:	682b      	ldr	r3, [r5, #0]
 8026ac8:	b103      	cbz	r3, 8026acc <_kill_r+0x1c>
 8026aca:	6023      	str	r3, [r4, #0]
 8026acc:	bd38      	pop	{r3, r4, r5, pc}
 8026ace:	bf00      	nop
 8026ad0:	20002b2c 	.word	0x20002b2c

08026ad4 <_getpid_r>:
 8026ad4:	f7de ba30 	b.w	8004f38 <_getpid>

08026ad8 <memchr>:
 8026ad8:	b2c9      	uxtb	r1, r1
 8026ada:	4402      	add	r2, r0
 8026adc:	b510      	push	{r4, lr}
 8026ade:	4290      	cmp	r0, r2
 8026ae0:	4603      	mov	r3, r0
 8026ae2:	d101      	bne.n	8026ae8 <memchr+0x10>
 8026ae4:	2300      	movs	r3, #0
 8026ae6:	e003      	b.n	8026af0 <memchr+0x18>
 8026ae8:	781c      	ldrb	r4, [r3, #0]
 8026aea:	3001      	adds	r0, #1
 8026aec:	428c      	cmp	r4, r1
 8026aee:	d1f6      	bne.n	8026ade <memchr+0x6>
 8026af0:	4618      	mov	r0, r3
 8026af2:	bd10      	pop	{r4, pc}

08026af4 <__swhatbuf_r>:
 8026af4:	b570      	push	{r4, r5, r6, lr}
 8026af6:	460c      	mov	r4, r1
 8026af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026afc:	b096      	sub	sp, #88	; 0x58
 8026afe:	4615      	mov	r5, r2
 8026b00:	2900      	cmp	r1, #0
 8026b02:	461e      	mov	r6, r3
 8026b04:	da0c      	bge.n	8026b20 <__swhatbuf_r+0x2c>
 8026b06:	89a3      	ldrh	r3, [r4, #12]
 8026b08:	2100      	movs	r1, #0
 8026b0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8026b0e:	bf0c      	ite	eq
 8026b10:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8026b14:	2340      	movne	r3, #64	; 0x40
 8026b16:	2000      	movs	r0, #0
 8026b18:	6031      	str	r1, [r6, #0]
 8026b1a:	602b      	str	r3, [r5, #0]
 8026b1c:	b016      	add	sp, #88	; 0x58
 8026b1e:	bd70      	pop	{r4, r5, r6, pc}
 8026b20:	466a      	mov	r2, sp
 8026b22:	f000 f849 	bl	8026bb8 <_fstat_r>
 8026b26:	2800      	cmp	r0, #0
 8026b28:	dbed      	blt.n	8026b06 <__swhatbuf_r+0x12>
 8026b2a:	9901      	ldr	r1, [sp, #4]
 8026b2c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8026b30:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8026b34:	4259      	negs	r1, r3
 8026b36:	4159      	adcs	r1, r3
 8026b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026b3c:	e7eb      	b.n	8026b16 <__swhatbuf_r+0x22>

08026b3e <__smakebuf_r>:
 8026b3e:	898b      	ldrh	r3, [r1, #12]
 8026b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026b42:	079d      	lsls	r5, r3, #30
 8026b44:	4606      	mov	r6, r0
 8026b46:	460c      	mov	r4, r1
 8026b48:	d507      	bpl.n	8026b5a <__smakebuf_r+0x1c>
 8026b4a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026b4e:	6023      	str	r3, [r4, #0]
 8026b50:	6123      	str	r3, [r4, #16]
 8026b52:	2301      	movs	r3, #1
 8026b54:	6163      	str	r3, [r4, #20]
 8026b56:	b002      	add	sp, #8
 8026b58:	bd70      	pop	{r4, r5, r6, pc}
 8026b5a:	ab01      	add	r3, sp, #4
 8026b5c:	466a      	mov	r2, sp
 8026b5e:	f7ff ffc9 	bl	8026af4 <__swhatbuf_r>
 8026b62:	9900      	ldr	r1, [sp, #0]
 8026b64:	4605      	mov	r5, r0
 8026b66:	4630      	mov	r0, r6
 8026b68:	f7fe fe36 	bl	80257d8 <_malloc_r>
 8026b6c:	b948      	cbnz	r0, 8026b82 <__smakebuf_r+0x44>
 8026b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b72:	059a      	lsls	r2, r3, #22
 8026b74:	d4ef      	bmi.n	8026b56 <__smakebuf_r+0x18>
 8026b76:	f023 0303 	bic.w	r3, r3, #3
 8026b7a:	f043 0302 	orr.w	r3, r3, #2
 8026b7e:	81a3      	strh	r3, [r4, #12]
 8026b80:	e7e3      	b.n	8026b4a <__smakebuf_r+0xc>
 8026b82:	89a3      	ldrh	r3, [r4, #12]
 8026b84:	6020      	str	r0, [r4, #0]
 8026b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026b8a:	6120      	str	r0, [r4, #16]
 8026b8c:	81a3      	strh	r3, [r4, #12]
 8026b8e:	9b00      	ldr	r3, [sp, #0]
 8026b90:	6163      	str	r3, [r4, #20]
 8026b92:	9b01      	ldr	r3, [sp, #4]
 8026b94:	b15b      	cbz	r3, 8026bae <__smakebuf_r+0x70>
 8026b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b9a:	4630      	mov	r0, r6
 8026b9c:	f000 f81e 	bl	8026bdc <_isatty_r>
 8026ba0:	b128      	cbz	r0, 8026bae <__smakebuf_r+0x70>
 8026ba2:	89a3      	ldrh	r3, [r4, #12]
 8026ba4:	f023 0303 	bic.w	r3, r3, #3
 8026ba8:	f043 0301 	orr.w	r3, r3, #1
 8026bac:	81a3      	strh	r3, [r4, #12]
 8026bae:	89a3      	ldrh	r3, [r4, #12]
 8026bb0:	431d      	orrs	r5, r3
 8026bb2:	81a5      	strh	r5, [r4, #12]
 8026bb4:	e7cf      	b.n	8026b56 <__smakebuf_r+0x18>
	...

08026bb8 <_fstat_r>:
 8026bb8:	b538      	push	{r3, r4, r5, lr}
 8026bba:	2300      	movs	r3, #0
 8026bbc:	4d06      	ldr	r5, [pc, #24]	; (8026bd8 <_fstat_r+0x20>)
 8026bbe:	4604      	mov	r4, r0
 8026bc0:	4608      	mov	r0, r1
 8026bc2:	4611      	mov	r1, r2
 8026bc4:	602b      	str	r3, [r5, #0]
 8026bc6:	f7de fa1e 	bl	8005006 <_fstat>
 8026bca:	1c43      	adds	r3, r0, #1
 8026bcc:	d102      	bne.n	8026bd4 <_fstat_r+0x1c>
 8026bce:	682b      	ldr	r3, [r5, #0]
 8026bd0:	b103      	cbz	r3, 8026bd4 <_fstat_r+0x1c>
 8026bd2:	6023      	str	r3, [r4, #0]
 8026bd4:	bd38      	pop	{r3, r4, r5, pc}
 8026bd6:	bf00      	nop
 8026bd8:	20002b2c 	.word	0x20002b2c

08026bdc <_isatty_r>:
 8026bdc:	b538      	push	{r3, r4, r5, lr}
 8026bde:	2300      	movs	r3, #0
 8026be0:	4d05      	ldr	r5, [pc, #20]	; (8026bf8 <_isatty_r+0x1c>)
 8026be2:	4604      	mov	r4, r0
 8026be4:	4608      	mov	r0, r1
 8026be6:	602b      	str	r3, [r5, #0]
 8026be8:	f7de fa1d 	bl	8005026 <_isatty>
 8026bec:	1c43      	adds	r3, r0, #1
 8026bee:	d102      	bne.n	8026bf6 <_isatty_r+0x1a>
 8026bf0:	682b      	ldr	r3, [r5, #0]
 8026bf2:	b103      	cbz	r3, 8026bf6 <_isatty_r+0x1a>
 8026bf4:	6023      	str	r3, [r4, #0]
 8026bf6:	bd38      	pop	{r3, r4, r5, pc}
 8026bf8:	20002b2c 	.word	0x20002b2c

08026bfc <atan2>:
 8026bfc:	f000 b974 	b.w	8026ee8 <__ieee754_atan2>

08026c00 <powf>:
 8026c00:	b508      	push	{r3, lr}
 8026c02:	ed2d 8b04 	vpush	{d8-d9}
 8026c06:	eeb0 8a60 	vmov.f32	s16, s1
 8026c0a:	eeb0 9a40 	vmov.f32	s18, s0
 8026c0e:	f000 fd63 	bl	80276d8 <__ieee754_powf>
 8026c12:	eef0 8a40 	vmov.f32	s17, s0
 8026c16:	eeb4 8a48 	vcmp.f32	s16, s16
 8026c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c1e:	d63e      	bvs.n	8026c9e <powf+0x9e>
 8026c20:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8026c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c28:	d112      	bne.n	8026c50 <powf+0x50>
 8026c2a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8026c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c32:	d039      	beq.n	8026ca8 <powf+0xa8>
 8026c34:	eeb0 0a48 	vmov.f32	s0, s16
 8026c38:	f000 f90e 	bl	8026e58 <finitef>
 8026c3c:	b378      	cbz	r0, 8026c9e <powf+0x9e>
 8026c3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8026c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c46:	d52a      	bpl.n	8026c9e <powf+0x9e>
 8026c48:	f7ff fa22 	bl	8026090 <__errno>
 8026c4c:	2322      	movs	r3, #34	; 0x22
 8026c4e:	e014      	b.n	8026c7a <powf+0x7a>
 8026c50:	f000 f902 	bl	8026e58 <finitef>
 8026c54:	b998      	cbnz	r0, 8026c7e <powf+0x7e>
 8026c56:	eeb0 0a49 	vmov.f32	s0, s18
 8026c5a:	f000 f8fd 	bl	8026e58 <finitef>
 8026c5e:	b170      	cbz	r0, 8026c7e <powf+0x7e>
 8026c60:	eeb0 0a48 	vmov.f32	s0, s16
 8026c64:	f000 f8f8 	bl	8026e58 <finitef>
 8026c68:	b148      	cbz	r0, 8026c7e <powf+0x7e>
 8026c6a:	eef4 8a68 	vcmp.f32	s17, s17
 8026c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c72:	d7e9      	bvc.n	8026c48 <powf+0x48>
 8026c74:	f7ff fa0c 	bl	8026090 <__errno>
 8026c78:	2321      	movs	r3, #33	; 0x21
 8026c7a:	6003      	str	r3, [r0, #0]
 8026c7c:	e00f      	b.n	8026c9e <powf+0x9e>
 8026c7e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8026c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c86:	d10a      	bne.n	8026c9e <powf+0x9e>
 8026c88:	eeb0 0a49 	vmov.f32	s0, s18
 8026c8c:	f000 f8e4 	bl	8026e58 <finitef>
 8026c90:	b128      	cbz	r0, 8026c9e <powf+0x9e>
 8026c92:	eeb0 0a48 	vmov.f32	s0, s16
 8026c96:	f000 f8df 	bl	8026e58 <finitef>
 8026c9a:	2800      	cmp	r0, #0
 8026c9c:	d1d4      	bne.n	8026c48 <powf+0x48>
 8026c9e:	eeb0 0a68 	vmov.f32	s0, s17
 8026ca2:	ecbd 8b04 	vpop	{d8-d9}
 8026ca6:	bd08      	pop	{r3, pc}
 8026ca8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8026cac:	e7f7      	b.n	8026c9e <powf+0x9e>
	...

08026cb0 <sqrtf>:
 8026cb0:	b508      	push	{r3, lr}
 8026cb2:	ed2d 8b02 	vpush	{d8}
 8026cb6:	eeb0 8a40 	vmov.f32	s16, s0
 8026cba:	f000 f906 	bl	8026eca <__ieee754_sqrtf>
 8026cbe:	eeb4 8a48 	vcmp.f32	s16, s16
 8026cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cc6:	d60c      	bvs.n	8026ce2 <sqrtf+0x32>
 8026cc8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8026ce8 <sqrtf+0x38>
 8026ccc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8026cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cd4:	d505      	bpl.n	8026ce2 <sqrtf+0x32>
 8026cd6:	f7ff f9db 	bl	8026090 <__errno>
 8026cda:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8026cde:	2321      	movs	r3, #33	; 0x21
 8026ce0:	6003      	str	r3, [r0, #0]
 8026ce2:	ecbd 8b02 	vpop	{d8}
 8026ce6:	bd08      	pop	{r3, pc}
 8026ce8:	00000000 	.word	0x00000000

08026cec <cosf>:
 8026cec:	ee10 3a10 	vmov	r3, s0
 8026cf0:	b507      	push	{r0, r1, r2, lr}
 8026cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026cf6:	4a1d      	ldr	r2, [pc, #116]	; (8026d6c <cosf+0x80>)
 8026cf8:	4293      	cmp	r3, r2
 8026cfa:	dc06      	bgt.n	8026d0a <cosf+0x1e>
 8026cfc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8026d70 <cosf+0x84>
 8026d00:	b003      	add	sp, #12
 8026d02:	f85d eb04 	ldr.w	lr, [sp], #4
 8026d06:	f000 bb61 	b.w	80273cc <__kernel_cosf>
 8026d0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026d0e:	db04      	blt.n	8026d1a <cosf+0x2e>
 8026d10:	ee30 0a40 	vsub.f32	s0, s0, s0
 8026d14:	b003      	add	sp, #12
 8026d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8026d1a:	4668      	mov	r0, sp
 8026d1c:	f000 ffaa 	bl	8027c74 <__ieee754_rem_pio2f>
 8026d20:	f000 0003 	and.w	r0, r0, #3
 8026d24:	2801      	cmp	r0, #1
 8026d26:	d009      	beq.n	8026d3c <cosf+0x50>
 8026d28:	2802      	cmp	r0, #2
 8026d2a:	d010      	beq.n	8026d4e <cosf+0x62>
 8026d2c:	b9b0      	cbnz	r0, 8026d5c <cosf+0x70>
 8026d2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8026d32:	ed9d 0a00 	vldr	s0, [sp]
 8026d36:	f000 fb49 	bl	80273cc <__kernel_cosf>
 8026d3a:	e7eb      	b.n	8026d14 <cosf+0x28>
 8026d3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8026d40:	ed9d 0a00 	vldr	s0, [sp]
 8026d44:	f000 fba0 	bl	8027488 <__kernel_sinf>
 8026d48:	eeb1 0a40 	vneg.f32	s0, s0
 8026d4c:	e7e2      	b.n	8026d14 <cosf+0x28>
 8026d4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8026d52:	ed9d 0a00 	vldr	s0, [sp]
 8026d56:	f000 fb39 	bl	80273cc <__kernel_cosf>
 8026d5a:	e7f5      	b.n	8026d48 <cosf+0x5c>
 8026d5c:	2001      	movs	r0, #1
 8026d5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8026d62:	ed9d 0a00 	vldr	s0, [sp]
 8026d66:	f000 fb8f 	bl	8027488 <__kernel_sinf>
 8026d6a:	e7d3      	b.n	8026d14 <cosf+0x28>
 8026d6c:	3f490fd8 	.word	0x3f490fd8
 8026d70:	00000000 	.word	0x00000000

08026d74 <sinf>:
 8026d74:	ee10 3a10 	vmov	r3, s0
 8026d78:	b507      	push	{r0, r1, r2, lr}
 8026d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026d7e:	4a1e      	ldr	r2, [pc, #120]	; (8026df8 <sinf+0x84>)
 8026d80:	4293      	cmp	r3, r2
 8026d82:	dc07      	bgt.n	8026d94 <sinf+0x20>
 8026d84:	2000      	movs	r0, #0
 8026d86:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8026dfc <sinf+0x88>
 8026d8a:	b003      	add	sp, #12
 8026d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026d90:	f000 bb7a 	b.w	8027488 <__kernel_sinf>
 8026d94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026d98:	db04      	blt.n	8026da4 <sinf+0x30>
 8026d9a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8026d9e:	b003      	add	sp, #12
 8026da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8026da4:	4668      	mov	r0, sp
 8026da6:	f000 ff65 	bl	8027c74 <__ieee754_rem_pio2f>
 8026daa:	f000 0003 	and.w	r0, r0, #3
 8026dae:	2801      	cmp	r0, #1
 8026db0:	d00a      	beq.n	8026dc8 <sinf+0x54>
 8026db2:	2802      	cmp	r0, #2
 8026db4:	d00f      	beq.n	8026dd6 <sinf+0x62>
 8026db6:	b9c0      	cbnz	r0, 8026dea <sinf+0x76>
 8026db8:	2001      	movs	r0, #1
 8026dba:	eddd 0a01 	vldr	s1, [sp, #4]
 8026dbe:	ed9d 0a00 	vldr	s0, [sp]
 8026dc2:	f000 fb61 	bl	8027488 <__kernel_sinf>
 8026dc6:	e7ea      	b.n	8026d9e <sinf+0x2a>
 8026dc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8026dcc:	ed9d 0a00 	vldr	s0, [sp]
 8026dd0:	f000 fafc 	bl	80273cc <__kernel_cosf>
 8026dd4:	e7e3      	b.n	8026d9e <sinf+0x2a>
 8026dd6:	2001      	movs	r0, #1
 8026dd8:	eddd 0a01 	vldr	s1, [sp, #4]
 8026ddc:	ed9d 0a00 	vldr	s0, [sp]
 8026de0:	f000 fb52 	bl	8027488 <__kernel_sinf>
 8026de4:	eeb1 0a40 	vneg.f32	s0, s0
 8026de8:	e7d9      	b.n	8026d9e <sinf+0x2a>
 8026dea:	eddd 0a01 	vldr	s1, [sp, #4]
 8026dee:	ed9d 0a00 	vldr	s0, [sp]
 8026df2:	f000 faeb 	bl	80273cc <__kernel_cosf>
 8026df6:	e7f5      	b.n	8026de4 <sinf+0x70>
 8026df8:	3f490fd8 	.word	0x3f490fd8
 8026dfc:	00000000 	.word	0x00000000

08026e00 <tanf>:
 8026e00:	ee10 3a10 	vmov	r3, s0
 8026e04:	b507      	push	{r0, r1, r2, lr}
 8026e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026e0a:	4a11      	ldr	r2, [pc, #68]	; (8026e50 <tanf+0x50>)
 8026e0c:	4293      	cmp	r3, r2
 8026e0e:	dc07      	bgt.n	8026e20 <tanf+0x20>
 8026e10:	2001      	movs	r0, #1
 8026e12:	eddf 0a10 	vldr	s1, [pc, #64]	; 8026e54 <tanf+0x54>
 8026e16:	b003      	add	sp, #12
 8026e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8026e1c:	f000 bb7c 	b.w	8027518 <__kernel_tanf>
 8026e20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8026e24:	db04      	blt.n	8026e30 <tanf+0x30>
 8026e26:	ee30 0a40 	vsub.f32	s0, s0, s0
 8026e2a:	b003      	add	sp, #12
 8026e2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8026e30:	4668      	mov	r0, sp
 8026e32:	f000 ff1f 	bl	8027c74 <__ieee754_rem_pio2f>
 8026e36:	eddd 0a01 	vldr	s1, [sp, #4]
 8026e3a:	0040      	lsls	r0, r0, #1
 8026e3c:	ed9d 0a00 	vldr	s0, [sp]
 8026e40:	f000 0002 	and.w	r0, r0, #2
 8026e44:	f1c0 0001 	rsb	r0, r0, #1
 8026e48:	f000 fb66 	bl	8027518 <__kernel_tanf>
 8026e4c:	e7ed      	b.n	8026e2a <tanf+0x2a>
 8026e4e:	bf00      	nop
 8026e50:	3f490fda 	.word	0x3f490fda
 8026e54:	00000000 	.word	0x00000000

08026e58 <finitef>:
 8026e58:	b082      	sub	sp, #8
 8026e5a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8026e5e:	9801      	ldr	r0, [sp, #4]
 8026e60:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026e64:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8026e68:	bfac      	ite	ge
 8026e6a:	2000      	movge	r0, #0
 8026e6c:	2001      	movlt	r0, #1
 8026e6e:	b002      	add	sp, #8
 8026e70:	4770      	bx	lr

08026e72 <lroundf>:
 8026e72:	ee10 1a10 	vmov	r1, s0
 8026e76:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8026e7a:	2900      	cmp	r1, #0
 8026e7c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8026e80:	bfb4      	ite	lt
 8026e82:	f04f 30ff 	movlt.w	r0, #4294967295
 8026e86:	2001      	movge	r0, #1
 8026e88:	2a1e      	cmp	r2, #30
 8026e8a:	dc19      	bgt.n	8026ec0 <lroundf+0x4e>
 8026e8c:	2a00      	cmp	r2, #0
 8026e8e:	da03      	bge.n	8026e98 <lroundf+0x26>
 8026e90:	3201      	adds	r2, #1
 8026e92:	bf18      	it	ne
 8026e94:	2000      	movne	r0, #0
 8026e96:	4770      	bx	lr
 8026e98:	2a16      	cmp	r2, #22
 8026e9a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8026e9e:	bfd8      	it	le
 8026ea0:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 8026ea4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8026ea8:	bfcd      	iteet	gt
 8026eaa:	3b96      	subgt	r3, #150	; 0x96
 8026eac:	4113      	asrle	r3, r2
 8026eae:	f1c2 0217 	rsble	r2, r2, #23
 8026eb2:	fa01 f303 	lslgt.w	r3, r1, r3
 8026eb6:	bfdc      	itt	le
 8026eb8:	185b      	addle	r3, r3, r1
 8026eba:	40d3      	lsrle	r3, r2
 8026ebc:	4358      	muls	r0, r3
 8026ebe:	4770      	bx	lr
 8026ec0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8026ec4:	ee17 0a90 	vmov	r0, s15
 8026ec8:	4770      	bx	lr

08026eca <__ieee754_sqrtf>:
 8026eca:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8026ece:	4770      	bx	lr

08026ed0 <ceilf>:
 8026ed0:	feba 0a40 	vrintp.f32	s0, s0
 8026ed4:	4770      	bx	lr

08026ed6 <floorf>:
 8026ed6:	febb 0a40 	vrintm.f32	s0, s0
 8026eda:	4770      	bx	lr

08026edc <roundf>:
 8026edc:	feb8 0a40 	vrinta.f32	s0, s0
 8026ee0:	4770      	bx	lr

08026ee2 <truncf>:
 8026ee2:	eeb6 0ac0 	vrintz.f32	s0, s0
 8026ee6:	4770      	bx	lr

08026ee8 <__ieee754_atan2>:
 8026ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026eec:	ec57 6b11 	vmov	r6, r7, d1
 8026ef0:	4273      	negs	r3, r6
 8026ef2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8026ef6:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8027070 <__ieee754_atan2+0x188>
 8026efa:	ee11 5a10 	vmov	r5, s2
 8026efe:	4333      	orrs	r3, r6
 8026f00:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8026f04:	4543      	cmp	r3, r8
 8026f06:	ec51 0b10 	vmov	r0, r1, d0
 8026f0a:	d80a      	bhi.n	8026f22 <__ieee754_atan2+0x3a>
 8026f0c:	4244      	negs	r4, r0
 8026f0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8026f12:	468e      	mov	lr, r1
 8026f14:	ee10 9a10 	vmov	r9, s0
 8026f18:	4304      	orrs	r4, r0
 8026f1a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8026f1e:	4544      	cmp	r4, r8
 8026f20:	d907      	bls.n	8026f32 <__ieee754_atan2+0x4a>
 8026f22:	4632      	mov	r2, r6
 8026f24:	463b      	mov	r3, r7
 8026f26:	f7d9 f9bf 	bl	80002a8 <__adddf3>
 8026f2a:	ec41 0b10 	vmov	d0, r0, r1
 8026f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026f32:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8026f36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8026f3a:	4334      	orrs	r4, r6
 8026f3c:	d103      	bne.n	8026f46 <__ieee754_atan2+0x5e>
 8026f3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026f42:	f000 b899 	b.w	8027078 <atan>
 8026f46:	17bc      	asrs	r4, r7, #30
 8026f48:	ea53 0909 	orrs.w	r9, r3, r9
 8026f4c:	f004 0402 	and.w	r4, r4, #2
 8026f50:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8026f54:	d107      	bne.n	8026f66 <__ieee754_atan2+0x7e>
 8026f56:	2c02      	cmp	r4, #2
 8026f58:	d05f      	beq.n	802701a <__ieee754_atan2+0x132>
 8026f5a:	2c03      	cmp	r4, #3
 8026f5c:	d1e5      	bne.n	8026f2a <__ieee754_atan2+0x42>
 8026f5e:	a140      	add	r1, pc, #256	; (adr r1, 8027060 <__ieee754_atan2+0x178>)
 8026f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026f64:	e7e1      	b.n	8026f2a <__ieee754_atan2+0x42>
 8026f66:	4315      	orrs	r5, r2
 8026f68:	d106      	bne.n	8026f78 <__ieee754_atan2+0x90>
 8026f6a:	f1be 0f00 	cmp.w	lr, #0
 8026f6e:	da5f      	bge.n	8027030 <__ieee754_atan2+0x148>
 8026f70:	a13d      	add	r1, pc, #244	; (adr r1, 8027068 <__ieee754_atan2+0x180>)
 8026f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026f76:	e7d8      	b.n	8026f2a <__ieee754_atan2+0x42>
 8026f78:	4542      	cmp	r2, r8
 8026f7a:	d10f      	bne.n	8026f9c <__ieee754_atan2+0xb4>
 8026f7c:	4293      	cmp	r3, r2
 8026f7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8026f82:	d107      	bne.n	8026f94 <__ieee754_atan2+0xac>
 8026f84:	2c02      	cmp	r4, #2
 8026f86:	d84c      	bhi.n	8027022 <__ieee754_atan2+0x13a>
 8026f88:	4b33      	ldr	r3, [pc, #204]	; (8027058 <__ieee754_atan2+0x170>)
 8026f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8026f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026f92:	e7ca      	b.n	8026f2a <__ieee754_atan2+0x42>
 8026f94:	2c02      	cmp	r4, #2
 8026f96:	d848      	bhi.n	802702a <__ieee754_atan2+0x142>
 8026f98:	4b30      	ldr	r3, [pc, #192]	; (802705c <__ieee754_atan2+0x174>)
 8026f9a:	e7f6      	b.n	8026f8a <__ieee754_atan2+0xa2>
 8026f9c:	4543      	cmp	r3, r8
 8026f9e:	d0e4      	beq.n	8026f6a <__ieee754_atan2+0x82>
 8026fa0:	1a9b      	subs	r3, r3, r2
 8026fa2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8026fa6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8026faa:	da1e      	bge.n	8026fea <__ieee754_atan2+0x102>
 8026fac:	2f00      	cmp	r7, #0
 8026fae:	da01      	bge.n	8026fb4 <__ieee754_atan2+0xcc>
 8026fb0:	323c      	adds	r2, #60	; 0x3c
 8026fb2:	db1e      	blt.n	8026ff2 <__ieee754_atan2+0x10a>
 8026fb4:	4632      	mov	r2, r6
 8026fb6:	463b      	mov	r3, r7
 8026fb8:	f7d9 fc56 	bl	8000868 <__aeabi_ddiv>
 8026fbc:	ec41 0b10 	vmov	d0, r0, r1
 8026fc0:	f000 f9fa 	bl	80273b8 <fabs>
 8026fc4:	f000 f858 	bl	8027078 <atan>
 8026fc8:	ec51 0b10 	vmov	r0, r1, d0
 8026fcc:	2c01      	cmp	r4, #1
 8026fce:	d013      	beq.n	8026ff8 <__ieee754_atan2+0x110>
 8026fd0:	2c02      	cmp	r4, #2
 8026fd2:	d015      	beq.n	8027000 <__ieee754_atan2+0x118>
 8026fd4:	2c00      	cmp	r4, #0
 8026fd6:	d0a8      	beq.n	8026f2a <__ieee754_atan2+0x42>
 8026fd8:	a317      	add	r3, pc, #92	; (adr r3, 8027038 <__ieee754_atan2+0x150>)
 8026fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fde:	f7d9 f961 	bl	80002a4 <__aeabi_dsub>
 8026fe2:	a317      	add	r3, pc, #92	; (adr r3, 8027040 <__ieee754_atan2+0x158>)
 8026fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fe8:	e014      	b.n	8027014 <__ieee754_atan2+0x12c>
 8026fea:	a117      	add	r1, pc, #92	; (adr r1, 8027048 <__ieee754_atan2+0x160>)
 8026fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026ff0:	e7ec      	b.n	8026fcc <__ieee754_atan2+0xe4>
 8026ff2:	2000      	movs	r0, #0
 8026ff4:	2100      	movs	r1, #0
 8026ff6:	e7e9      	b.n	8026fcc <__ieee754_atan2+0xe4>
 8026ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026ffc:	4619      	mov	r1, r3
 8026ffe:	e794      	b.n	8026f2a <__ieee754_atan2+0x42>
 8027000:	a30d      	add	r3, pc, #52	; (adr r3, 8027038 <__ieee754_atan2+0x150>)
 8027002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027006:	f7d9 f94d 	bl	80002a4 <__aeabi_dsub>
 802700a:	4602      	mov	r2, r0
 802700c:	460b      	mov	r3, r1
 802700e:	a10c      	add	r1, pc, #48	; (adr r1, 8027040 <__ieee754_atan2+0x158>)
 8027010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027014:	f7d9 f946 	bl	80002a4 <__aeabi_dsub>
 8027018:	e787      	b.n	8026f2a <__ieee754_atan2+0x42>
 802701a:	a109      	add	r1, pc, #36	; (adr r1, 8027040 <__ieee754_atan2+0x158>)
 802701c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027020:	e783      	b.n	8026f2a <__ieee754_atan2+0x42>
 8027022:	a10b      	add	r1, pc, #44	; (adr r1, 8027050 <__ieee754_atan2+0x168>)
 8027024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027028:	e77f      	b.n	8026f2a <__ieee754_atan2+0x42>
 802702a:	2000      	movs	r0, #0
 802702c:	2100      	movs	r1, #0
 802702e:	e77c      	b.n	8026f2a <__ieee754_atan2+0x42>
 8027030:	a105      	add	r1, pc, #20	; (adr r1, 8027048 <__ieee754_atan2+0x160>)
 8027032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027036:	e778      	b.n	8026f2a <__ieee754_atan2+0x42>
 8027038:	33145c07 	.word	0x33145c07
 802703c:	3ca1a626 	.word	0x3ca1a626
 8027040:	54442d18 	.word	0x54442d18
 8027044:	400921fb 	.word	0x400921fb
 8027048:	54442d18 	.word	0x54442d18
 802704c:	3ff921fb 	.word	0x3ff921fb
 8027050:	54442d18 	.word	0x54442d18
 8027054:	3fe921fb 	.word	0x3fe921fb
 8027058:	08034d30 	.word	0x08034d30
 802705c:	08034d48 	.word	0x08034d48
 8027060:	54442d18 	.word	0x54442d18
 8027064:	c00921fb 	.word	0xc00921fb
 8027068:	54442d18 	.word	0x54442d18
 802706c:	bff921fb 	.word	0xbff921fb
 8027070:	7ff00000 	.word	0x7ff00000
 8027074:	00000000 	.word	0x00000000

08027078 <atan>:
 8027078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802707c:	ec55 4b10 	vmov	r4, r5, d0
 8027080:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8027084:	4bc2      	ldr	r3, [pc, #776]	; (8027390 <atan+0x318>)
 8027086:	46ab      	mov	fp, r5
 8027088:	429e      	cmp	r6, r3
 802708a:	dd18      	ble.n	80270be <atan+0x46>
 802708c:	4bc1      	ldr	r3, [pc, #772]	; (8027394 <atan+0x31c>)
 802708e:	429e      	cmp	r6, r3
 8027090:	dc01      	bgt.n	8027096 <atan+0x1e>
 8027092:	d109      	bne.n	80270a8 <atan+0x30>
 8027094:	b144      	cbz	r4, 80270a8 <atan+0x30>
 8027096:	4622      	mov	r2, r4
 8027098:	462b      	mov	r3, r5
 802709a:	4620      	mov	r0, r4
 802709c:	4629      	mov	r1, r5
 802709e:	f7d9 f903 	bl	80002a8 <__adddf3>
 80270a2:	4604      	mov	r4, r0
 80270a4:	460d      	mov	r5, r1
 80270a6:	e006      	b.n	80270b6 <atan+0x3e>
 80270a8:	f1bb 0f00 	cmp.w	fp, #0
 80270ac:	f300 8131 	bgt.w	8027312 <atan+0x29a>
 80270b0:	a59b      	add	r5, pc, #620	; (adr r5, 8027320 <atan+0x2a8>)
 80270b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80270b6:	ec45 4b10 	vmov	d0, r4, r5
 80270ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270be:	4bb6      	ldr	r3, [pc, #728]	; (8027398 <atan+0x320>)
 80270c0:	429e      	cmp	r6, r3
 80270c2:	dc14      	bgt.n	80270ee <atan+0x76>
 80270c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80270c8:	429e      	cmp	r6, r3
 80270ca:	dc0d      	bgt.n	80270e8 <atan+0x70>
 80270cc:	ee10 0a10 	vmov	r0, s0
 80270d0:	4629      	mov	r1, r5
 80270d2:	a395      	add	r3, pc, #596	; (adr r3, 8027328 <atan+0x2b0>)
 80270d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270d8:	f7d9 f8e6 	bl	80002a8 <__adddf3>
 80270dc:	2200      	movs	r2, #0
 80270de:	4baf      	ldr	r3, [pc, #700]	; (802739c <atan+0x324>)
 80270e0:	f7d9 fd28 	bl	8000b34 <__aeabi_dcmpgt>
 80270e4:	2800      	cmp	r0, #0
 80270e6:	d1e6      	bne.n	80270b6 <atan+0x3e>
 80270e8:	f04f 3aff 	mov.w	sl, #4294967295
 80270ec:	e02b      	b.n	8027146 <atan+0xce>
 80270ee:	f000 f963 	bl	80273b8 <fabs>
 80270f2:	4bab      	ldr	r3, [pc, #684]	; (80273a0 <atan+0x328>)
 80270f4:	429e      	cmp	r6, r3
 80270f6:	ec55 4b10 	vmov	r4, r5, d0
 80270fa:	f300 80bf 	bgt.w	802727c <atan+0x204>
 80270fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8027102:	429e      	cmp	r6, r3
 8027104:	f300 80a0 	bgt.w	8027248 <atan+0x1d0>
 8027108:	ee10 2a10 	vmov	r2, s0
 802710c:	ee10 0a10 	vmov	r0, s0
 8027110:	462b      	mov	r3, r5
 8027112:	4629      	mov	r1, r5
 8027114:	f7d9 f8c8 	bl	80002a8 <__adddf3>
 8027118:	2200      	movs	r2, #0
 802711a:	4ba0      	ldr	r3, [pc, #640]	; (802739c <atan+0x324>)
 802711c:	f04f 0a00 	mov.w	sl, #0
 8027120:	f7d9 f8c0 	bl	80002a4 <__aeabi_dsub>
 8027124:	4606      	mov	r6, r0
 8027126:	460f      	mov	r7, r1
 8027128:	2200      	movs	r2, #0
 802712a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802712e:	4620      	mov	r0, r4
 8027130:	4629      	mov	r1, r5
 8027132:	f7d9 f8b9 	bl	80002a8 <__adddf3>
 8027136:	4602      	mov	r2, r0
 8027138:	460b      	mov	r3, r1
 802713a:	4630      	mov	r0, r6
 802713c:	4639      	mov	r1, r7
 802713e:	f7d9 fb93 	bl	8000868 <__aeabi_ddiv>
 8027142:	4604      	mov	r4, r0
 8027144:	460d      	mov	r5, r1
 8027146:	4622      	mov	r2, r4
 8027148:	462b      	mov	r3, r5
 802714a:	4620      	mov	r0, r4
 802714c:	4629      	mov	r1, r5
 802714e:	f7d9 fa61 	bl	8000614 <__aeabi_dmul>
 8027152:	4602      	mov	r2, r0
 8027154:	460b      	mov	r3, r1
 8027156:	4680      	mov	r8, r0
 8027158:	4689      	mov	r9, r1
 802715a:	f7d9 fa5b 	bl	8000614 <__aeabi_dmul>
 802715e:	4606      	mov	r6, r0
 8027160:	460f      	mov	r7, r1
 8027162:	a373      	add	r3, pc, #460	; (adr r3, 8027330 <atan+0x2b8>)
 8027164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027168:	f7d9 fa54 	bl	8000614 <__aeabi_dmul>
 802716c:	a372      	add	r3, pc, #456	; (adr r3, 8027338 <atan+0x2c0>)
 802716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027172:	f7d9 f899 	bl	80002a8 <__adddf3>
 8027176:	4632      	mov	r2, r6
 8027178:	463b      	mov	r3, r7
 802717a:	f7d9 fa4b 	bl	8000614 <__aeabi_dmul>
 802717e:	a370      	add	r3, pc, #448	; (adr r3, 8027340 <atan+0x2c8>)
 8027180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027184:	f7d9 f890 	bl	80002a8 <__adddf3>
 8027188:	4632      	mov	r2, r6
 802718a:	463b      	mov	r3, r7
 802718c:	f7d9 fa42 	bl	8000614 <__aeabi_dmul>
 8027190:	a36d      	add	r3, pc, #436	; (adr r3, 8027348 <atan+0x2d0>)
 8027192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027196:	f7d9 f887 	bl	80002a8 <__adddf3>
 802719a:	4632      	mov	r2, r6
 802719c:	463b      	mov	r3, r7
 802719e:	f7d9 fa39 	bl	8000614 <__aeabi_dmul>
 80271a2:	a36b      	add	r3, pc, #428	; (adr r3, 8027350 <atan+0x2d8>)
 80271a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271a8:	f7d9 f87e 	bl	80002a8 <__adddf3>
 80271ac:	4632      	mov	r2, r6
 80271ae:	463b      	mov	r3, r7
 80271b0:	f7d9 fa30 	bl	8000614 <__aeabi_dmul>
 80271b4:	a368      	add	r3, pc, #416	; (adr r3, 8027358 <atan+0x2e0>)
 80271b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271ba:	f7d9 f875 	bl	80002a8 <__adddf3>
 80271be:	4642      	mov	r2, r8
 80271c0:	464b      	mov	r3, r9
 80271c2:	f7d9 fa27 	bl	8000614 <__aeabi_dmul>
 80271c6:	4680      	mov	r8, r0
 80271c8:	4689      	mov	r9, r1
 80271ca:	4630      	mov	r0, r6
 80271cc:	4639      	mov	r1, r7
 80271ce:	a364      	add	r3, pc, #400	; (adr r3, 8027360 <atan+0x2e8>)
 80271d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271d4:	f7d9 fa1e 	bl	8000614 <__aeabi_dmul>
 80271d8:	a363      	add	r3, pc, #396	; (adr r3, 8027368 <atan+0x2f0>)
 80271da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271de:	f7d9 f861 	bl	80002a4 <__aeabi_dsub>
 80271e2:	4632      	mov	r2, r6
 80271e4:	463b      	mov	r3, r7
 80271e6:	f7d9 fa15 	bl	8000614 <__aeabi_dmul>
 80271ea:	a361      	add	r3, pc, #388	; (adr r3, 8027370 <atan+0x2f8>)
 80271ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271f0:	f7d9 f858 	bl	80002a4 <__aeabi_dsub>
 80271f4:	4632      	mov	r2, r6
 80271f6:	463b      	mov	r3, r7
 80271f8:	f7d9 fa0c 	bl	8000614 <__aeabi_dmul>
 80271fc:	a35e      	add	r3, pc, #376	; (adr r3, 8027378 <atan+0x300>)
 80271fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027202:	f7d9 f84f 	bl	80002a4 <__aeabi_dsub>
 8027206:	4632      	mov	r2, r6
 8027208:	463b      	mov	r3, r7
 802720a:	f7d9 fa03 	bl	8000614 <__aeabi_dmul>
 802720e:	a35c      	add	r3, pc, #368	; (adr r3, 8027380 <atan+0x308>)
 8027210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027214:	f7d9 f846 	bl	80002a4 <__aeabi_dsub>
 8027218:	4632      	mov	r2, r6
 802721a:	463b      	mov	r3, r7
 802721c:	f7d9 f9fa 	bl	8000614 <__aeabi_dmul>
 8027220:	4602      	mov	r2, r0
 8027222:	460b      	mov	r3, r1
 8027224:	4640      	mov	r0, r8
 8027226:	4649      	mov	r1, r9
 8027228:	f7d9 f83e 	bl	80002a8 <__adddf3>
 802722c:	4622      	mov	r2, r4
 802722e:	462b      	mov	r3, r5
 8027230:	f7d9 f9f0 	bl	8000614 <__aeabi_dmul>
 8027234:	f1ba 3fff 	cmp.w	sl, #4294967295
 8027238:	4602      	mov	r2, r0
 802723a:	460b      	mov	r3, r1
 802723c:	d14b      	bne.n	80272d6 <atan+0x25e>
 802723e:	4620      	mov	r0, r4
 8027240:	4629      	mov	r1, r5
 8027242:	f7d9 f82f 	bl	80002a4 <__aeabi_dsub>
 8027246:	e72c      	b.n	80270a2 <atan+0x2a>
 8027248:	ee10 0a10 	vmov	r0, s0
 802724c:	2200      	movs	r2, #0
 802724e:	4b53      	ldr	r3, [pc, #332]	; (802739c <atan+0x324>)
 8027250:	4629      	mov	r1, r5
 8027252:	f7d9 f827 	bl	80002a4 <__aeabi_dsub>
 8027256:	4606      	mov	r6, r0
 8027258:	460f      	mov	r7, r1
 802725a:	2200      	movs	r2, #0
 802725c:	4b4f      	ldr	r3, [pc, #316]	; (802739c <atan+0x324>)
 802725e:	4620      	mov	r0, r4
 8027260:	4629      	mov	r1, r5
 8027262:	f04f 0a01 	mov.w	sl, #1
 8027266:	f7d9 f81f 	bl	80002a8 <__adddf3>
 802726a:	4602      	mov	r2, r0
 802726c:	460b      	mov	r3, r1
 802726e:	4630      	mov	r0, r6
 8027270:	4639      	mov	r1, r7
 8027272:	f7d9 faf9 	bl	8000868 <__aeabi_ddiv>
 8027276:	4604      	mov	r4, r0
 8027278:	460d      	mov	r5, r1
 802727a:	e764      	b.n	8027146 <atan+0xce>
 802727c:	4b49      	ldr	r3, [pc, #292]	; (80273a4 <atan+0x32c>)
 802727e:	429e      	cmp	r6, r3
 8027280:	da1d      	bge.n	80272be <atan+0x246>
 8027282:	ee10 0a10 	vmov	r0, s0
 8027286:	2200      	movs	r2, #0
 8027288:	4b47      	ldr	r3, [pc, #284]	; (80273a8 <atan+0x330>)
 802728a:	4629      	mov	r1, r5
 802728c:	f7d9 f80a 	bl	80002a4 <__aeabi_dsub>
 8027290:	2200      	movs	r2, #0
 8027292:	4606      	mov	r6, r0
 8027294:	460f      	mov	r7, r1
 8027296:	4b44      	ldr	r3, [pc, #272]	; (80273a8 <atan+0x330>)
 8027298:	4620      	mov	r0, r4
 802729a:	4629      	mov	r1, r5
 802729c:	f04f 0a02 	mov.w	sl, #2
 80272a0:	f7d9 f9b8 	bl	8000614 <__aeabi_dmul>
 80272a4:	2200      	movs	r2, #0
 80272a6:	4b3d      	ldr	r3, [pc, #244]	; (802739c <atan+0x324>)
 80272a8:	f7d8 fffe 	bl	80002a8 <__adddf3>
 80272ac:	4602      	mov	r2, r0
 80272ae:	460b      	mov	r3, r1
 80272b0:	4630      	mov	r0, r6
 80272b2:	4639      	mov	r1, r7
 80272b4:	f7d9 fad8 	bl	8000868 <__aeabi_ddiv>
 80272b8:	4604      	mov	r4, r0
 80272ba:	460d      	mov	r5, r1
 80272bc:	e743      	b.n	8027146 <atan+0xce>
 80272be:	462b      	mov	r3, r5
 80272c0:	ee10 2a10 	vmov	r2, s0
 80272c4:	2000      	movs	r0, #0
 80272c6:	4939      	ldr	r1, [pc, #228]	; (80273ac <atan+0x334>)
 80272c8:	f7d9 face 	bl	8000868 <__aeabi_ddiv>
 80272cc:	f04f 0a03 	mov.w	sl, #3
 80272d0:	4604      	mov	r4, r0
 80272d2:	460d      	mov	r5, r1
 80272d4:	e737      	b.n	8027146 <atan+0xce>
 80272d6:	4b36      	ldr	r3, [pc, #216]	; (80273b0 <atan+0x338>)
 80272d8:	4e36      	ldr	r6, [pc, #216]	; (80273b4 <atan+0x33c>)
 80272da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80272de:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80272e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80272e6:	f7d8 ffdd 	bl	80002a4 <__aeabi_dsub>
 80272ea:	4622      	mov	r2, r4
 80272ec:	462b      	mov	r3, r5
 80272ee:	f7d8 ffd9 	bl	80002a4 <__aeabi_dsub>
 80272f2:	4602      	mov	r2, r0
 80272f4:	460b      	mov	r3, r1
 80272f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80272fa:	f7d8 ffd3 	bl	80002a4 <__aeabi_dsub>
 80272fe:	f1bb 0f00 	cmp.w	fp, #0
 8027302:	4604      	mov	r4, r0
 8027304:	460d      	mov	r5, r1
 8027306:	f6bf aed6 	bge.w	80270b6 <atan+0x3e>
 802730a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802730e:	461d      	mov	r5, r3
 8027310:	e6d1      	b.n	80270b6 <atan+0x3e>
 8027312:	a51d      	add	r5, pc, #116	; (adr r5, 8027388 <atan+0x310>)
 8027314:	e9d5 4500 	ldrd	r4, r5, [r5]
 8027318:	e6cd      	b.n	80270b6 <atan+0x3e>
 802731a:	bf00      	nop
 802731c:	f3af 8000 	nop.w
 8027320:	54442d18 	.word	0x54442d18
 8027324:	bff921fb 	.word	0xbff921fb
 8027328:	8800759c 	.word	0x8800759c
 802732c:	7e37e43c 	.word	0x7e37e43c
 8027330:	e322da11 	.word	0xe322da11
 8027334:	3f90ad3a 	.word	0x3f90ad3a
 8027338:	24760deb 	.word	0x24760deb
 802733c:	3fa97b4b 	.word	0x3fa97b4b
 8027340:	a0d03d51 	.word	0xa0d03d51
 8027344:	3fb10d66 	.word	0x3fb10d66
 8027348:	c54c206e 	.word	0xc54c206e
 802734c:	3fb745cd 	.word	0x3fb745cd
 8027350:	920083ff 	.word	0x920083ff
 8027354:	3fc24924 	.word	0x3fc24924
 8027358:	5555550d 	.word	0x5555550d
 802735c:	3fd55555 	.word	0x3fd55555
 8027360:	2c6a6c2f 	.word	0x2c6a6c2f
 8027364:	bfa2b444 	.word	0xbfa2b444
 8027368:	52defd9a 	.word	0x52defd9a
 802736c:	3fadde2d 	.word	0x3fadde2d
 8027370:	af749a6d 	.word	0xaf749a6d
 8027374:	3fb3b0f2 	.word	0x3fb3b0f2
 8027378:	fe231671 	.word	0xfe231671
 802737c:	3fbc71c6 	.word	0x3fbc71c6
 8027380:	9998ebc4 	.word	0x9998ebc4
 8027384:	3fc99999 	.word	0x3fc99999
 8027388:	54442d18 	.word	0x54442d18
 802738c:	3ff921fb 	.word	0x3ff921fb
 8027390:	440fffff 	.word	0x440fffff
 8027394:	7ff00000 	.word	0x7ff00000
 8027398:	3fdbffff 	.word	0x3fdbffff
 802739c:	3ff00000 	.word	0x3ff00000
 80273a0:	3ff2ffff 	.word	0x3ff2ffff
 80273a4:	40038000 	.word	0x40038000
 80273a8:	3ff80000 	.word	0x3ff80000
 80273ac:	bff00000 	.word	0xbff00000
 80273b0:	08034d80 	.word	0x08034d80
 80273b4:	08034d60 	.word	0x08034d60

080273b8 <fabs>:
 80273b8:	ec51 0b10 	vmov	r0, r1, d0
 80273bc:	ee10 2a10 	vmov	r2, s0
 80273c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80273c4:	ec43 2b10 	vmov	d0, r2, r3
 80273c8:	4770      	bx	lr
	...

080273cc <__kernel_cosf>:
 80273cc:	ee10 3a10 	vmov	r3, s0
 80273d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80273d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80273d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80273dc:	da05      	bge.n	80273ea <__kernel_cosf+0x1e>
 80273de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80273e2:	ee17 2a90 	vmov	r2, s15
 80273e6:	2a00      	cmp	r2, #0
 80273e8:	d03b      	beq.n	8027462 <__kernel_cosf+0x96>
 80273ea:	ee20 7a00 	vmul.f32	s14, s0, s0
 80273ee:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8027468 <__kernel_cosf+0x9c>
 80273f2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 802746c <__kernel_cosf+0xa0>
 80273f6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80273fa:	4a1d      	ldr	r2, [pc, #116]	; (8027470 <__kernel_cosf+0xa4>)
 80273fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027400:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8027474 <__kernel_cosf+0xa8>
 8027404:	4293      	cmp	r3, r2
 8027406:	eee6 7a07 	vfma.f32	s15, s12, s14
 802740a:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8027478 <__kernel_cosf+0xac>
 802740e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027412:	eddf 7a1a 	vldr	s15, [pc, #104]	; 802747c <__kernel_cosf+0xb0>
 8027416:	eee6 7a07 	vfma.f32	s15, s12, s14
 802741a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8027480 <__kernel_cosf+0xb4>
 802741e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027422:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027426:	ee67 7a27 	vmul.f32	s15, s14, s15
 802742a:	ee26 6a07 	vmul.f32	s12, s12, s14
 802742e:	eee7 0a06 	vfma.f32	s1, s14, s12
 8027432:	dc04      	bgt.n	802743e <__kernel_cosf+0x72>
 8027434:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8027438:	ee36 0ae7 	vsub.f32	s0, s13, s15
 802743c:	4770      	bx	lr
 802743e:	4a11      	ldr	r2, [pc, #68]	; (8027484 <__kernel_cosf+0xb8>)
 8027440:	4293      	cmp	r3, r2
 8027442:	bfd6      	itet	le
 8027444:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8027448:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 802744c:	ee07 3a10 	vmovle	s14, r3
 8027450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027454:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8027458:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802745c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027460:	4770      	bx	lr
 8027462:	eeb0 0a66 	vmov.f32	s0, s13
 8027466:	4770      	bx	lr
 8027468:	ad47d74e 	.word	0xad47d74e
 802746c:	310f74f6 	.word	0x310f74f6
 8027470:	3e999999 	.word	0x3e999999
 8027474:	b493f27c 	.word	0xb493f27c
 8027478:	37d00d01 	.word	0x37d00d01
 802747c:	bab60b61 	.word	0xbab60b61
 8027480:	3d2aaaab 	.word	0x3d2aaaab
 8027484:	3f480000 	.word	0x3f480000

08027488 <__kernel_sinf>:
 8027488:	ee10 3a10 	vmov	r3, s0
 802748c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027490:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8027494:	da04      	bge.n	80274a0 <__kernel_sinf+0x18>
 8027496:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802749a:	ee17 3a90 	vmov	r3, s15
 802749e:	b35b      	cbz	r3, 80274f8 <__kernel_sinf+0x70>
 80274a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80274a4:	eddf 7a15 	vldr	s15, [pc, #84]	; 80274fc <__kernel_sinf+0x74>
 80274a8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8027500 <__kernel_sinf+0x78>
 80274ac:	eea7 6a27 	vfma.f32	s12, s14, s15
 80274b0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8027504 <__kernel_sinf+0x7c>
 80274b4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80274b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80274bc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8027508 <__kernel_sinf+0x80>
 80274c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80274c4:	eddf 7a11 	vldr	s15, [pc, #68]	; 802750c <__kernel_sinf+0x84>
 80274c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80274cc:	b930      	cbnz	r0, 80274dc <__kernel_sinf+0x54>
 80274ce:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8027510 <__kernel_sinf+0x88>
 80274d2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80274d6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80274da:	4770      	bx	lr
 80274dc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80274e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80274e4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80274e8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80274ec:	eddf 7a09 	vldr	s15, [pc, #36]	; 8027514 <__kernel_sinf+0x8c>
 80274f0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80274f4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80274f8:	4770      	bx	lr
 80274fa:	bf00      	nop
 80274fc:	2f2ec9d3 	.word	0x2f2ec9d3
 8027500:	b2d72f34 	.word	0xb2d72f34
 8027504:	3638ef1b 	.word	0x3638ef1b
 8027508:	b9500d01 	.word	0xb9500d01
 802750c:	3c088889 	.word	0x3c088889
 8027510:	be2aaaab 	.word	0xbe2aaaab
 8027514:	3e2aaaab 	.word	0x3e2aaaab

08027518 <__kernel_tanf>:
 8027518:	b508      	push	{r3, lr}
 802751a:	ee10 3a10 	vmov	r3, s0
 802751e:	eef0 7a40 	vmov.f32	s15, s0
 8027522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8027526:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 802752a:	da17      	bge.n	802755c <__kernel_tanf+0x44>
 802752c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8027530:	ee17 1a10 	vmov	r1, s14
 8027534:	bb39      	cbnz	r1, 8027586 <__kernel_tanf+0x6e>
 8027536:	1c43      	adds	r3, r0, #1
 8027538:	4313      	orrs	r3, r2
 802753a:	d108      	bne.n	802754e <__kernel_tanf+0x36>
 802753c:	f000 fcc4 	bl	8027ec8 <fabsf>
 8027540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027544:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027548:	eeb0 0a67 	vmov.f32	s0, s15
 802754c:	bd08      	pop	{r3, pc}
 802754e:	2801      	cmp	r0, #1
 8027550:	d0fa      	beq.n	8027548 <__kernel_tanf+0x30>
 8027552:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027556:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802755a:	e7f5      	b.n	8027548 <__kernel_tanf+0x30>
 802755c:	494c      	ldr	r1, [pc, #304]	; (8027690 <__kernel_tanf+0x178>)
 802755e:	428a      	cmp	r2, r1
 8027560:	db11      	blt.n	8027586 <__kernel_tanf+0x6e>
 8027562:	2b00      	cmp	r3, #0
 8027564:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8027694 <__kernel_tanf+0x17c>
 8027568:	bfbc      	itt	lt
 802756a:	eef1 7a40 	vneglt.f32	s15, s0
 802756e:	eef1 0a60 	vneglt.f32	s1, s1
 8027572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027576:	eddf 7a48 	vldr	s15, [pc, #288]	; 8027698 <__kernel_tanf+0x180>
 802757a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802757e:	eddf 0a47 	vldr	s1, [pc, #284]	; 802769c <__kernel_tanf+0x184>
 8027582:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027586:	ee67 6aa7 	vmul.f32	s13, s15, s15
 802758a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80276a0 <__kernel_tanf+0x188>
 802758e:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80276a4 <__kernel_tanf+0x18c>
 8027592:	ed9f 5a45 	vldr	s10, [pc, #276]	; 80276a8 <__kernel_tanf+0x190>
 8027596:	ee26 7aa6 	vmul.f32	s14, s13, s13
 802759a:	493d      	ldr	r1, [pc, #244]	; (8027690 <__kernel_tanf+0x178>)
 802759c:	428a      	cmp	r2, r1
 802759e:	eea7 6a25 	vfma.f32	s12, s14, s11
 80275a2:	eddf 5a42 	vldr	s11, [pc, #264]	; 80276ac <__kernel_tanf+0x194>
 80275a6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80275aa:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80276b0 <__kernel_tanf+0x198>
 80275ae:	eea5 6a87 	vfma.f32	s12, s11, s14
 80275b2:	eddf 5a40 	vldr	s11, [pc, #256]	; 80276b4 <__kernel_tanf+0x19c>
 80275b6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80275ba:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80276b8 <__kernel_tanf+0x1a0>
 80275be:	eea5 6a87 	vfma.f32	s12, s11, s14
 80275c2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80276bc <__kernel_tanf+0x1a4>
 80275c6:	eee7 5a05 	vfma.f32	s11, s14, s10
 80275ca:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80276c0 <__kernel_tanf+0x1a8>
 80275ce:	eea5 5a87 	vfma.f32	s10, s11, s14
 80275d2:	eddf 5a3c 	vldr	s11, [pc, #240]	; 80276c4 <__kernel_tanf+0x1ac>
 80275d6:	eee5 5a07 	vfma.f32	s11, s10, s14
 80275da:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 80276c8 <__kernel_tanf+0x1b0>
 80275de:	eea5 5a87 	vfma.f32	s10, s11, s14
 80275e2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80276cc <__kernel_tanf+0x1b4>
 80275e6:	eee5 5a07 	vfma.f32	s11, s10, s14
 80275ea:	eeb0 7a46 	vmov.f32	s14, s12
 80275ee:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80275f2:	eeb0 6a60 	vmov.f32	s12, s1
 80275f6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80275fa:	eea7 6a05 	vfma.f32	s12, s14, s10
 80275fe:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80276d0 <__kernel_tanf+0x1b8>
 8027602:	eee6 0a26 	vfma.f32	s1, s12, s13
 8027606:	eee5 0a07 	vfma.f32	s1, s10, s14
 802760a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 802760e:	db1d      	blt.n	802764c <__kernel_tanf+0x134>
 8027610:	ee07 0a10 	vmov	s14, r0
 8027614:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8027618:	179b      	asrs	r3, r3, #30
 802761a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802761e:	f003 0302 	and.w	r3, r3, #2
 8027622:	ee76 6a87 	vadd.f32	s13, s13, s14
 8027626:	f1c3 0301 	rsb	r3, r3, #1
 802762a:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 802762e:	ee76 6a60 	vsub.f32	s13, s12, s1
 8027632:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027636:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802763a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802763e:	ee07 3a90 	vmov	s15, r3
 8027642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8027646:	ee67 7a87 	vmul.f32	s15, s15, s14
 802764a:	e77d      	b.n	8027548 <__kernel_tanf+0x30>
 802764c:	2801      	cmp	r0, #1
 802764e:	d01b      	beq.n	8027688 <__kernel_tanf+0x170>
 8027650:	4b20      	ldr	r3, [pc, #128]	; (80276d4 <__kernel_tanf+0x1bc>)
 8027652:	ee16 2a90 	vmov	r2, s13
 8027656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802765a:	401a      	ands	r2, r3
 802765c:	ee05 2a90 	vmov	s11, r2
 8027660:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8027664:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027668:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 802766c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8027670:	ee16 2a10 	vmov	r2, s12
 8027674:	4013      	ands	r3, r2
 8027676:	ee07 3a90 	vmov	s15, r3
 802767a:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802767e:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8027682:	eee7 7a06 	vfma.f32	s15, s14, s12
 8027686:	e75f      	b.n	8027548 <__kernel_tanf+0x30>
 8027688:	eef0 7a66 	vmov.f32	s15, s13
 802768c:	e75c      	b.n	8027548 <__kernel_tanf+0x30>
 802768e:	bf00      	nop
 8027690:	3f2ca140 	.word	0x3f2ca140
 8027694:	3f490fda 	.word	0x3f490fda
 8027698:	33222168 	.word	0x33222168
 802769c:	00000000 	.word	0x00000000
 80276a0:	b79bae5f 	.word	0xb79bae5f
 80276a4:	38a3f445 	.word	0x38a3f445
 80276a8:	37d95384 	.word	0x37d95384
 80276ac:	3a1a26c8 	.word	0x3a1a26c8
 80276b0:	3b6b6916 	.word	0x3b6b6916
 80276b4:	3cb327a4 	.word	0x3cb327a4
 80276b8:	3e088889 	.word	0x3e088889
 80276bc:	3895c07a 	.word	0x3895c07a
 80276c0:	398137b9 	.word	0x398137b9
 80276c4:	3abede48 	.word	0x3abede48
 80276c8:	3c11371f 	.word	0x3c11371f
 80276cc:	3d5d0dd1 	.word	0x3d5d0dd1
 80276d0:	3eaaaaab 	.word	0x3eaaaaab
 80276d4:	fffff000 	.word	0xfffff000

080276d8 <__ieee754_powf>:
 80276d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80276dc:	ee10 4a90 	vmov	r4, s1
 80276e0:	ee10 7a10 	vmov	r7, s0
 80276e4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80276e8:	ed2d 8b02 	vpush	{d8}
 80276ec:	eeb0 8a40 	vmov.f32	s16, s0
 80276f0:	eef0 8a60 	vmov.f32	s17, s1
 80276f4:	d10c      	bne.n	8027710 <__ieee754_powf+0x38>
 80276f6:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 80276fa:	007f      	lsls	r7, r7, #1
 80276fc:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8027700:	f240 8296 	bls.w	8027c30 <__ieee754_powf+0x558>
 8027704:	ee38 0a28 	vadd.f32	s0, s16, s17
 8027708:	ecbd 8b02 	vpop	{d8}
 802770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027710:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8027714:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8027718:	dcf4      	bgt.n	8027704 <__ieee754_powf+0x2c>
 802771a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 802771e:	dd08      	ble.n	8027732 <__ieee754_powf+0x5a>
 8027720:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8027724:	d1ee      	bne.n	8027704 <__ieee754_powf+0x2c>
 8027726:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 802772a:	0064      	lsls	r4, r4, #1
 802772c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8027730:	e7e6      	b.n	8027700 <__ieee754_powf+0x28>
 8027732:	2f00      	cmp	r7, #0
 8027734:	da20      	bge.n	8027778 <__ieee754_powf+0xa0>
 8027736:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 802773a:	da2c      	bge.n	8027796 <__ieee754_powf+0xbe>
 802773c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8027740:	f2c0 827f 	blt.w	8027c42 <__ieee754_powf+0x56a>
 8027744:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8027748:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802774c:	fa48 f603 	asr.w	r6, r8, r3
 8027750:	fa06 f303 	lsl.w	r3, r6, r3
 8027754:	4543      	cmp	r3, r8
 8027756:	f040 8274 	bne.w	8027c42 <__ieee754_powf+0x56a>
 802775a:	f006 0601 	and.w	r6, r6, #1
 802775e:	f1c6 0602 	rsb	r6, r6, #2
 8027762:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8027766:	d11e      	bne.n	80277a6 <__ieee754_powf+0xce>
 8027768:	2c00      	cmp	r4, #0
 802776a:	f280 8267 	bge.w	8027c3c <__ieee754_powf+0x564>
 802776e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027772:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8027776:	e7c7      	b.n	8027708 <__ieee754_powf+0x30>
 8027778:	2600      	movs	r6, #0
 802777a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 802777e:	d1f0      	bne.n	8027762 <__ieee754_powf+0x8a>
 8027780:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8027784:	f000 8254 	beq.w	8027c30 <__ieee754_powf+0x558>
 8027788:	dd07      	ble.n	802779a <__ieee754_powf+0xc2>
 802778a:	2c00      	cmp	r4, #0
 802778c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8027a8c <__ieee754_powf+0x3b4>
 8027790:	fe28 0a80 	vselge.f32	s0, s17, s0
 8027794:	e7b8      	b.n	8027708 <__ieee754_powf+0x30>
 8027796:	2602      	movs	r6, #2
 8027798:	e7ef      	b.n	802777a <__ieee754_powf+0xa2>
 802779a:	2c00      	cmp	r4, #0
 802779c:	f280 824b 	bge.w	8027c36 <__ieee754_powf+0x55e>
 80277a0:	eeb1 0a68 	vneg.f32	s0, s17
 80277a4:	e7b0      	b.n	8027708 <__ieee754_powf+0x30>
 80277a6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80277aa:	d102      	bne.n	80277b2 <__ieee754_powf+0xda>
 80277ac:	ee28 0a08 	vmul.f32	s0, s16, s16
 80277b0:	e7aa      	b.n	8027708 <__ieee754_powf+0x30>
 80277b2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80277b6:	eeb0 0a48 	vmov.f32	s0, s16
 80277ba:	d107      	bne.n	80277cc <__ieee754_powf+0xf4>
 80277bc:	2f00      	cmp	r7, #0
 80277be:	db05      	blt.n	80277cc <__ieee754_powf+0xf4>
 80277c0:	ecbd 8b02 	vpop	{d8}
 80277c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80277c8:	f7ff bb7f 	b.w	8026eca <__ieee754_sqrtf>
 80277cc:	f000 fb7c 	bl	8027ec8 <fabsf>
 80277d0:	b125      	cbz	r5, 80277dc <__ieee754_powf+0x104>
 80277d2:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 80277d6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80277da:	d115      	bne.n	8027808 <__ieee754_powf+0x130>
 80277dc:	2c00      	cmp	r4, #0
 80277de:	bfbc      	itt	lt
 80277e0:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80277e4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80277e8:	2f00      	cmp	r7, #0
 80277ea:	da8d      	bge.n	8027708 <__ieee754_powf+0x30>
 80277ec:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80277f0:	4335      	orrs	r5, r6
 80277f2:	d104      	bne.n	80277fe <__ieee754_powf+0x126>
 80277f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80277f8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80277fc:	e784      	b.n	8027708 <__ieee754_powf+0x30>
 80277fe:	2e01      	cmp	r6, #1
 8027800:	d182      	bne.n	8027708 <__ieee754_powf+0x30>
 8027802:	eeb1 0a40 	vneg.f32	s0, s0
 8027806:	e77f      	b.n	8027708 <__ieee754_powf+0x30>
 8027808:	0ff8      	lsrs	r0, r7, #31
 802780a:	3801      	subs	r0, #1
 802780c:	ea56 0300 	orrs.w	r3, r6, r0
 8027810:	d104      	bne.n	802781c <__ieee754_powf+0x144>
 8027812:	ee38 8a48 	vsub.f32	s16, s16, s16
 8027816:	ee88 0a08 	vdiv.f32	s0, s16, s16
 802781a:	e775      	b.n	8027708 <__ieee754_powf+0x30>
 802781c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8027820:	dd72      	ble.n	8027908 <__ieee754_powf+0x230>
 8027822:	4b9b      	ldr	r3, [pc, #620]	; (8027a90 <__ieee754_powf+0x3b8>)
 8027824:	429d      	cmp	r5, r3
 8027826:	dc08      	bgt.n	802783a <__ieee754_powf+0x162>
 8027828:	2c00      	cmp	r4, #0
 802782a:	da0b      	bge.n	8027844 <__ieee754_powf+0x16c>
 802782c:	2000      	movs	r0, #0
 802782e:	ecbd 8b02 	vpop	{d8}
 8027832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027836:	f000 bbcf 	b.w	8027fd8 <__math_oflowf>
 802783a:	4b96      	ldr	r3, [pc, #600]	; (8027a94 <__ieee754_powf+0x3bc>)
 802783c:	429d      	cmp	r5, r3
 802783e:	dd08      	ble.n	8027852 <__ieee754_powf+0x17a>
 8027840:	2c00      	cmp	r4, #0
 8027842:	dcf3      	bgt.n	802782c <__ieee754_powf+0x154>
 8027844:	2000      	movs	r0, #0
 8027846:	ecbd 8b02 	vpop	{d8}
 802784a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802784e:	f000 bbbd 	b.w	8027fcc <__math_uflowf>
 8027852:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8027856:	eddf 6a90 	vldr	s13, [pc, #576]	; 8027a98 <__ieee754_powf+0x3c0>
 802785a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802785e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8027862:	ee20 7a00 	vmul.f32	s14, s0, s0
 8027866:	eee0 6a67 	vfms.f32	s13, s0, s15
 802786a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802786e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8027872:	ee27 7a27 	vmul.f32	s14, s14, s15
 8027876:	eddf 7a89 	vldr	s15, [pc, #548]	; 8027a9c <__ieee754_powf+0x3c4>
 802787a:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 802787e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8027aa0 <__ieee754_powf+0x3c8>
 8027882:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027886:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8027aa4 <__ieee754_powf+0x3cc>
 802788a:	eef0 6a67 	vmov.f32	s13, s15
 802788e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8027892:	ee16 3a90 	vmov	r3, s13
 8027896:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802789a:	f023 030f 	bic.w	r3, r3, #15
 802789e:	ee06 3a90 	vmov	s13, r3
 80278a2:	eee0 6a47 	vfms.f32	s13, s0, s14
 80278a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80278aa:	3e01      	subs	r6, #1
 80278ac:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80278b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80278b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80278b8:	4306      	orrs	r6, r0
 80278ba:	f024 040f 	bic.w	r4, r4, #15
 80278be:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80278c2:	ee07 3a90 	vmov	s15, r3
 80278c6:	fe07 8a08 	vseleq.f32	s16, s14, s16
 80278ca:	ee07 4a10 	vmov	s14, r4
 80278ce:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80278d2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80278d6:	ee07 4a10 	vmov	s14, r4
 80278da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80278de:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80278e2:	ee17 1a10 	vmov	r1, s14
 80278e6:	2900      	cmp	r1, #0
 80278e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80278ec:	f340 8182 	ble.w	8027bf4 <__ieee754_powf+0x51c>
 80278f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80278f4:	f340 80f8 	ble.w	8027ae8 <__ieee754_powf+0x410>
 80278f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80278fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027900:	bf4c      	ite	mi
 8027902:	2001      	movmi	r0, #1
 8027904:	2000      	movpl	r0, #0
 8027906:	e792      	b.n	802782e <__ieee754_powf+0x156>
 8027908:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 802790c:	bf05      	ittet	eq
 802790e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8027aa8 <__ieee754_powf+0x3d0>
 8027912:	f06f 0317 	mvneq.w	r3, #23
 8027916:	2300      	movne	r3, #0
 8027918:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 802791c:	bf08      	it	eq
 802791e:	ee17 5a90 	vmoveq	r5, s15
 8027922:	15ea      	asrs	r2, r5, #23
 8027924:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8027928:	3a7f      	subs	r2, #127	; 0x7f
 802792a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 802792e:	441a      	add	r2, r3
 8027930:	4b5e      	ldr	r3, [pc, #376]	; (8027aac <__ieee754_powf+0x3d4>)
 8027932:	429d      	cmp	r5, r3
 8027934:	dd06      	ble.n	8027944 <__ieee754_powf+0x26c>
 8027936:	4b5e      	ldr	r3, [pc, #376]	; (8027ab0 <__ieee754_powf+0x3d8>)
 8027938:	429d      	cmp	r5, r3
 802793a:	f340 80a4 	ble.w	8027a86 <__ieee754_powf+0x3ae>
 802793e:	3201      	adds	r2, #1
 8027940:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8027944:	2500      	movs	r5, #0
 8027946:	4b5b      	ldr	r3, [pc, #364]	; (8027ab4 <__ieee754_powf+0x3dc>)
 8027948:	ee07 1a10 	vmov	s14, r1
 802794c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8027950:	1049      	asrs	r1, r1, #1
 8027952:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8027956:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802795a:	edd3 5a00 	vldr	s11, [r3]
 802795e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8027962:	4b55      	ldr	r3, [pc, #340]	; (8027ab8 <__ieee754_powf+0x3e0>)
 8027964:	ee75 7a87 	vadd.f32	s15, s11, s14
 8027968:	ee37 6a65 	vsub.f32	s12, s14, s11
 802796c:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8027970:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8027974:	ee07 1a90 	vmov	s15, r1
 8027978:	ee77 5ae5 	vsub.f32	s11, s15, s11
 802797c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8027980:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8027abc <__ieee754_powf+0x3e4>
 8027984:	ee26 5a24 	vmul.f32	s10, s12, s9
 8027988:	ee15 7a10 	vmov	r7, s10
 802798c:	401f      	ands	r7, r3
 802798e:	ee06 7a90 	vmov	s13, r7
 8027992:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8027996:	ee65 7a05 	vmul.f32	s15, s10, s10
 802799a:	eea6 6ac7 	vfms.f32	s12, s13, s14
 802799e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8027ac0 <__ieee754_powf+0x3e8>
 80279a2:	eee7 5a87 	vfma.f32	s11, s15, s14
 80279a6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8027ac4 <__ieee754_powf+0x3ec>
 80279aa:	ee26 6a24 	vmul.f32	s12, s12, s9
 80279ae:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80279b2:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80279b6:	eddf 5a38 	vldr	s11, [pc, #224]	; 8027a98 <__ieee754_powf+0x3c0>
 80279ba:	eee7 5a27 	vfma.f32	s11, s14, s15
 80279be:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8027ac8 <__ieee754_powf+0x3f0>
 80279c2:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80279c6:	eddf 5a41 	vldr	s11, [pc, #260]	; 8027acc <__ieee754_powf+0x3f4>
 80279ca:	eee7 5a27 	vfma.f32	s11, s14, s15
 80279ce:	ee35 7a26 	vadd.f32	s14, s10, s13
 80279d2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80279d6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80279da:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80279de:	eef0 5a67 	vmov.f32	s11, s15
 80279e2:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80279e6:	ee75 5a87 	vadd.f32	s11, s11, s14
 80279ea:	ee15 1a90 	vmov	r1, s11
 80279ee:	4019      	ands	r1, r3
 80279f0:	ee05 1a90 	vmov	s11, r1
 80279f4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80279f8:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80279fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027a00:	ee67 7a85 	vmul.f32	s15, s15, s10
 8027a04:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027a08:	eeb0 6a67 	vmov.f32	s12, s15
 8027a0c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8027a10:	ee16 1a10 	vmov	r1, s12
 8027a14:	4019      	ands	r1, r3
 8027a16:	ee07 1a10 	vmov	s14, r1
 8027a1a:	ee06 1a10 	vmov	s12, r1
 8027a1e:	492c      	ldr	r1, [pc, #176]	; (8027ad0 <__ieee754_powf+0x3f8>)
 8027a20:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8027a24:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8027ad4 <__ieee754_powf+0x3fc>
 8027a28:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8027a2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027a30:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8027ad8 <__ieee754_powf+0x400>
 8027a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8027a38:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8027adc <__ieee754_powf+0x404>
 8027a3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8027a40:	ed91 7a00 	vldr	s14, [r1]
 8027a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027a48:	ee07 2a10 	vmov	s14, r2
 8027a4c:	4a24      	ldr	r2, [pc, #144]	; (8027ae0 <__ieee754_powf+0x408>)
 8027a4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027a52:	eef0 6a67 	vmov.f32	s13, s15
 8027a56:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8027a5a:	ed92 5a00 	vldr	s10, [r2]
 8027a5e:	eee6 6a25 	vfma.f32	s13, s12, s11
 8027a62:	ee76 6a85 	vadd.f32	s13, s13, s10
 8027a66:	ee76 6a87 	vadd.f32	s13, s13, s14
 8027a6a:	ee16 2a90 	vmov	r2, s13
 8027a6e:	4013      	ands	r3, r2
 8027a70:	ee06 3a90 	vmov	s13, r3
 8027a74:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8027a78:	ee37 7a45 	vsub.f32	s14, s14, s10
 8027a7c:	eea6 7a65 	vfms.f32	s14, s12, s11
 8027a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027a84:	e711      	b.n	80278aa <__ieee754_powf+0x1d2>
 8027a86:	2501      	movs	r5, #1
 8027a88:	e75d      	b.n	8027946 <__ieee754_powf+0x26e>
 8027a8a:	bf00      	nop
 8027a8c:	00000000 	.word	0x00000000
 8027a90:	3f7ffff3 	.word	0x3f7ffff3
 8027a94:	3f800007 	.word	0x3f800007
 8027a98:	3eaaaaab 	.word	0x3eaaaaab
 8027a9c:	3fb8aa3b 	.word	0x3fb8aa3b
 8027aa0:	36eca570 	.word	0x36eca570
 8027aa4:	3fb8aa00 	.word	0x3fb8aa00
 8027aa8:	4b800000 	.word	0x4b800000
 8027aac:	001cc471 	.word	0x001cc471
 8027ab0:	005db3d6 	.word	0x005db3d6
 8027ab4:	08034da0 	.word	0x08034da0
 8027ab8:	fffff000 	.word	0xfffff000
 8027abc:	3e6c3255 	.word	0x3e6c3255
 8027ac0:	3e53f142 	.word	0x3e53f142
 8027ac4:	3e8ba305 	.word	0x3e8ba305
 8027ac8:	3edb6db7 	.word	0x3edb6db7
 8027acc:	3f19999a 	.word	0x3f19999a
 8027ad0:	08034db0 	.word	0x08034db0
 8027ad4:	3f763800 	.word	0x3f763800
 8027ad8:	3f76384f 	.word	0x3f76384f
 8027adc:	369dc3a0 	.word	0x369dc3a0
 8027ae0:	08034da8 	.word	0x08034da8
 8027ae4:	3338aa3c 	.word	0x3338aa3c
 8027ae8:	f040 8099 	bne.w	8027c1e <__ieee754_powf+0x546>
 8027aec:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8027ae4 <__ieee754_powf+0x40c>
 8027af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027af4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8027af8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8027afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027b00:	f73f aefa 	bgt.w	80278f8 <__ieee754_powf+0x220>
 8027b04:	15db      	asrs	r3, r3, #23
 8027b06:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8027b0a:	4a4f      	ldr	r2, [pc, #316]	; (8027c48 <__ieee754_powf+0x570>)
 8027b0c:	2900      	cmp	r1, #0
 8027b0e:	f1a3 037e 	sub.w	r3, r3, #126	; 0x7e
 8027b12:	fa40 f003 	asr.w	r0, r0, r3
 8027b16:	4408      	add	r0, r1
 8027b18:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8027b1c:	f1a3 037f 	sub.w	r3, r3, #127	; 0x7f
 8027b20:	fa42 f203 	asr.w	r2, r2, r3
 8027b24:	f1c3 0317 	rsb	r3, r3, #23
 8027b28:	ea02 0200 	and.w	r2, r2, r0
 8027b2c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8027b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8027b34:	ee07 2a10 	vmov	s14, r2
 8027b38:	fa40 f003 	asr.w	r0, r0, r3
 8027b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027b40:	bfb8      	it	lt
 8027b42:	4240      	neglt	r0, r0
 8027b44:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8027b48:	eddf 6a40 	vldr	s13, [pc, #256]	; 8027c4c <__ieee754_powf+0x574>
 8027b4c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8027c50 <__ieee754_powf+0x578>
 8027b50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027b54:	ee17 3a10 	vmov	r3, s14
 8027b58:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8027b5c:	f023 030f 	bic.w	r3, r3, #15
 8027b60:	ee07 3a10 	vmov	s14, r3
 8027b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027b68:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8027b6c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8027c54 <__ieee754_powf+0x57c>
 8027b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027b74:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8027b78:	eef0 6a67 	vmov.f32	s13, s15
 8027b7c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8027b80:	eef0 5a66 	vmov.f32	s11, s13
 8027b84:	eee7 5a46 	vfms.f32	s11, s14, s12
 8027b88:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8027c58 <__ieee754_powf+0x580>
 8027b8c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8027b90:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8027b94:	eddf 5a31 	vldr	s11, [pc, #196]	; 8027c5c <__ieee754_powf+0x584>
 8027b98:	eea7 6a25 	vfma.f32	s12, s14, s11
 8027b9c:	eddf 5a30 	vldr	s11, [pc, #192]	; 8027c60 <__ieee754_powf+0x588>
 8027ba0:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8027ba4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027ba8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8027c64 <__ieee754_powf+0x58c>
 8027bac:	eea5 6a87 	vfma.f32	s12, s11, s14
 8027bb0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8027c68 <__ieee754_powf+0x590>
 8027bb4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8027bb8:	eeb0 6a66 	vmov.f32	s12, s13
 8027bbc:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8027bc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8027bc4:	ee66 5a86 	vmul.f32	s11, s13, s12
 8027bc8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8027bcc:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8027bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8027bd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027bd8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027bdc:	ee10 3a10 	vmov	r3, s0
 8027be0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8027be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8027be8:	da1f      	bge.n	8027c2a <__ieee754_powf+0x552>
 8027bea:	f000 f975 	bl	8027ed8 <scalbnf>
 8027bee:	ee20 0a08 	vmul.f32	s0, s0, s16
 8027bf2:	e589      	b.n	8027708 <__ieee754_powf+0x30>
 8027bf4:	4a1d      	ldr	r2, [pc, #116]	; (8027c6c <__ieee754_powf+0x594>)
 8027bf6:	4293      	cmp	r3, r2
 8027bf8:	dd07      	ble.n	8027c0a <__ieee754_powf+0x532>
 8027bfa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8027bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c02:	bf4c      	ite	mi
 8027c04:	2001      	movmi	r0, #1
 8027c06:	2000      	movpl	r0, #0
 8027c08:	e61d      	b.n	8027846 <__ieee754_powf+0x16e>
 8027c0a:	d108      	bne.n	8027c1e <__ieee754_powf+0x546>
 8027c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8027c10:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8027c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027c18:	f6ff af74 	blt.w	8027b04 <__ieee754_powf+0x42c>
 8027c1c:	e7ed      	b.n	8027bfa <__ieee754_powf+0x522>
 8027c1e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8027c22:	f73f af6f 	bgt.w	8027b04 <__ieee754_powf+0x42c>
 8027c26:	2000      	movs	r0, #0
 8027c28:	e78c      	b.n	8027b44 <__ieee754_powf+0x46c>
 8027c2a:	ee00 3a10 	vmov	s0, r3
 8027c2e:	e7de      	b.n	8027bee <__ieee754_powf+0x516>
 8027c30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027c34:	e568      	b.n	8027708 <__ieee754_powf+0x30>
 8027c36:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8027c70 <__ieee754_powf+0x598>
 8027c3a:	e565      	b.n	8027708 <__ieee754_powf+0x30>
 8027c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8027c40:	e562      	b.n	8027708 <__ieee754_powf+0x30>
 8027c42:	2600      	movs	r6, #0
 8027c44:	e58d      	b.n	8027762 <__ieee754_powf+0x8a>
 8027c46:	bf00      	nop
 8027c48:	ff800000 	.word	0xff800000
 8027c4c:	3f317218 	.word	0x3f317218
 8027c50:	3f317200 	.word	0x3f317200
 8027c54:	35bfbe8c 	.word	0x35bfbe8c
 8027c58:	b5ddea0e 	.word	0xb5ddea0e
 8027c5c:	3331bb4c 	.word	0x3331bb4c
 8027c60:	388ab355 	.word	0x388ab355
 8027c64:	bb360b61 	.word	0xbb360b61
 8027c68:	3e2aaaab 	.word	0x3e2aaaab
 8027c6c:	43160000 	.word	0x43160000
 8027c70:	00000000 	.word	0x00000000

08027c74 <__ieee754_rem_pio2f>:
 8027c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027c76:	ee10 6a10 	vmov	r6, s0
 8027c7a:	4b85      	ldr	r3, [pc, #532]	; (8027e90 <__ieee754_rem_pio2f+0x21c>)
 8027c7c:	b087      	sub	sp, #28
 8027c7e:	4604      	mov	r4, r0
 8027c80:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8027c84:	429d      	cmp	r5, r3
 8027c86:	dc05      	bgt.n	8027c94 <__ieee754_rem_pio2f+0x20>
 8027c88:	2300      	movs	r3, #0
 8027c8a:	ed80 0a00 	vstr	s0, [r0]
 8027c8e:	6043      	str	r3, [r0, #4]
 8027c90:	2000      	movs	r0, #0
 8027c92:	e020      	b.n	8027cd6 <__ieee754_rem_pio2f+0x62>
 8027c94:	4b7f      	ldr	r3, [pc, #508]	; (8027e94 <__ieee754_rem_pio2f+0x220>)
 8027c96:	429d      	cmp	r5, r3
 8027c98:	dc38      	bgt.n	8027d0c <__ieee754_rem_pio2f+0x98>
 8027c9a:	2e00      	cmp	r6, #0
 8027c9c:	f025 050f 	bic.w	r5, r5, #15
 8027ca0:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8027e98 <__ieee754_rem_pio2f+0x224>
 8027ca4:	4b7d      	ldr	r3, [pc, #500]	; (8027e9c <__ieee754_rem_pio2f+0x228>)
 8027ca6:	dd18      	ble.n	8027cda <__ieee754_rem_pio2f+0x66>
 8027ca8:	429d      	cmp	r5, r3
 8027caa:	ee70 7a47 	vsub.f32	s15, s0, s14
 8027cae:	bf09      	itett	eq
 8027cb0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8027ea0 <__ieee754_rem_pio2f+0x22c>
 8027cb4:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 8027ea4 <__ieee754_rem_pio2f+0x230>
 8027cb8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8027cbc:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 8027ea8 <__ieee754_rem_pio2f+0x234>
 8027cc0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8027cc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027cc8:	edc0 6a00 	vstr	s13, [r0]
 8027ccc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027cd0:	edc0 7a01 	vstr	s15, [r0, #4]
 8027cd4:	2001      	movs	r0, #1
 8027cd6:	b007      	add	sp, #28
 8027cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027cda:	429d      	cmp	r5, r3
 8027cdc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8027ce0:	bf09      	itett	eq
 8027ce2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8027ea0 <__ieee754_rem_pio2f+0x22c>
 8027ce6:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 8027ea4 <__ieee754_rem_pio2f+0x230>
 8027cea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8027cee:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 8027ea8 <__ieee754_rem_pio2f+0x234>
 8027cf2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8027cf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8027cfa:	edc0 6a00 	vstr	s13, [r0]
 8027cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027d02:	edc0 7a01 	vstr	s15, [r0, #4]
 8027d06:	f04f 30ff 	mov.w	r0, #4294967295
 8027d0a:	e7e4      	b.n	8027cd6 <__ieee754_rem_pio2f+0x62>
 8027d0c:	4b67      	ldr	r3, [pc, #412]	; (8027eac <__ieee754_rem_pio2f+0x238>)
 8027d0e:	429d      	cmp	r5, r3
 8027d10:	dc70      	bgt.n	8027df4 <__ieee754_rem_pio2f+0x180>
 8027d12:	f000 f8d9 	bl	8027ec8 <fabsf>
 8027d16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8027d1a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8027eb0 <__ieee754_rem_pio2f+0x23c>
 8027d1e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8027d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8027d2a:	ee17 0a90 	vmov	r0, s15
 8027d2e:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8027e98 <__ieee754_rem_pio2f+0x224>
 8027d32:	281f      	cmp	r0, #31
 8027d34:	eea7 0a67 	vfms.f32	s0, s14, s15
 8027d38:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8027ea4 <__ieee754_rem_pio2f+0x230>
 8027d3c:	eeb1 6a47 	vneg.f32	s12, s14
 8027d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027d44:	ee70 6a67 	vsub.f32	s13, s0, s15
 8027d48:	ee16 2a90 	vmov	r2, s13
 8027d4c:	dc1c      	bgt.n	8027d88 <__ieee754_rem_pio2f+0x114>
 8027d4e:	1e47      	subs	r7, r0, #1
 8027d50:	4958      	ldr	r1, [pc, #352]	; (8027eb4 <__ieee754_rem_pio2f+0x240>)
 8027d52:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8027d56:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8027d5a:	428b      	cmp	r3, r1
 8027d5c:	d014      	beq.n	8027d88 <__ieee754_rem_pio2f+0x114>
 8027d5e:	6022      	str	r2, [r4, #0]
 8027d60:	ed94 7a00 	vldr	s14, [r4]
 8027d64:	2e00      	cmp	r6, #0
 8027d66:	ee30 0a47 	vsub.f32	s0, s0, s14
 8027d6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027d6e:	ed84 0a01 	vstr	s0, [r4, #4]
 8027d72:	dab0      	bge.n	8027cd6 <__ieee754_rem_pio2f+0x62>
 8027d74:	eeb1 7a47 	vneg.f32	s14, s14
 8027d78:	eeb1 0a40 	vneg.f32	s0, s0
 8027d7c:	ed84 7a00 	vstr	s14, [r4]
 8027d80:	ed84 0a01 	vstr	s0, [r4, #4]
 8027d84:	4240      	negs	r0, r0
 8027d86:	e7a6      	b.n	8027cd6 <__ieee754_rem_pio2f+0x62>
 8027d88:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027d8c:	15eb      	asrs	r3, r5, #23
 8027d8e:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8027d92:	2908      	cmp	r1, #8
 8027d94:	dde3      	ble.n	8027d5e <__ieee754_rem_pio2f+0xea>
 8027d96:	eef0 6a40 	vmov.f32	s13, s0
 8027d9a:	eddf 5a41 	vldr	s11, [pc, #260]	; 8027ea0 <__ieee754_rem_pio2f+0x22c>
 8027d9e:	eee6 6a25 	vfma.f32	s13, s12, s11
 8027da2:	ee70 7a66 	vsub.f32	s15, s0, s13
 8027da6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027daa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8027ea8 <__ieee754_rem_pio2f+0x234>
 8027dae:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8027db2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8027db6:	ee15 2a90 	vmov	r2, s11
 8027dba:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027dbe:	1a5b      	subs	r3, r3, r1
 8027dc0:	2b19      	cmp	r3, #25
 8027dc2:	dc04      	bgt.n	8027dce <__ieee754_rem_pio2f+0x15a>
 8027dc4:	eeb0 0a66 	vmov.f32	s0, s13
 8027dc8:	edc4 5a00 	vstr	s11, [r4]
 8027dcc:	e7c8      	b.n	8027d60 <__ieee754_rem_pio2f+0xec>
 8027dce:	eeb0 0a66 	vmov.f32	s0, s13
 8027dd2:	eddf 5a39 	vldr	s11, [pc, #228]	; 8027eb8 <__ieee754_rem_pio2f+0x244>
 8027dd6:	eea6 0a25 	vfma.f32	s0, s12, s11
 8027dda:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8027dde:	eddf 6a37 	vldr	s13, [pc, #220]	; 8027ebc <__ieee754_rem_pio2f+0x248>
 8027de2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8027de6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8027dea:	ee30 7a67 	vsub.f32	s14, s0, s15
 8027dee:	ed84 7a00 	vstr	s14, [r4]
 8027df2:	e7b5      	b.n	8027d60 <__ieee754_rem_pio2f+0xec>
 8027df4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8027df8:	db06      	blt.n	8027e08 <__ieee754_rem_pio2f+0x194>
 8027dfa:	ee70 7a40 	vsub.f32	s15, s0, s0
 8027dfe:	edc0 7a01 	vstr	s15, [r0, #4]
 8027e02:	edc0 7a00 	vstr	s15, [r0]
 8027e06:	e743      	b.n	8027c90 <__ieee754_rem_pio2f+0x1c>
 8027e08:	15ea      	asrs	r2, r5, #23
 8027e0a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8027ec0 <__ieee754_rem_pio2f+0x24c>
 8027e0e:	3a86      	subs	r2, #134	; 0x86
 8027e10:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8027e14:	ee07 3a90 	vmov	s15, r3
 8027e18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027e1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027e20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027e24:	ed8d 7a03 	vstr	s14, [sp, #12]
 8027e28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027e2c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027e30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027e38:	ed8d 7a04 	vstr	s14, [sp, #16]
 8027e3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027e40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8027e44:	edcd 7a05 	vstr	s15, [sp, #20]
 8027e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e4c:	d11e      	bne.n	8027e8c <__ieee754_rem_pio2f+0x218>
 8027e4e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8027e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e56:	bf14      	ite	ne
 8027e58:	2302      	movne	r3, #2
 8027e5a:	2301      	moveq	r3, #1
 8027e5c:	4919      	ldr	r1, [pc, #100]	; (8027ec4 <__ieee754_rem_pio2f+0x250>)
 8027e5e:	a803      	add	r0, sp, #12
 8027e60:	9101      	str	r1, [sp, #4]
 8027e62:	2102      	movs	r1, #2
 8027e64:	9100      	str	r1, [sp, #0]
 8027e66:	4621      	mov	r1, r4
 8027e68:	f000 f8bc 	bl	8027fe4 <__kernel_rem_pio2f>
 8027e6c:	2e00      	cmp	r6, #0
 8027e6e:	f6bf af32 	bge.w	8027cd6 <__ieee754_rem_pio2f+0x62>
 8027e72:	edd4 7a00 	vldr	s15, [r4]
 8027e76:	eef1 7a67 	vneg.f32	s15, s15
 8027e7a:	edc4 7a00 	vstr	s15, [r4]
 8027e7e:	edd4 7a01 	vldr	s15, [r4, #4]
 8027e82:	eef1 7a67 	vneg.f32	s15, s15
 8027e86:	edc4 7a01 	vstr	s15, [r4, #4]
 8027e8a:	e77b      	b.n	8027d84 <__ieee754_rem_pio2f+0x110>
 8027e8c:	2303      	movs	r3, #3
 8027e8e:	e7e5      	b.n	8027e5c <__ieee754_rem_pio2f+0x1e8>
 8027e90:	3f490fd8 	.word	0x3f490fd8
 8027e94:	4016cbe3 	.word	0x4016cbe3
 8027e98:	3fc90f80 	.word	0x3fc90f80
 8027e9c:	3fc90fd0 	.word	0x3fc90fd0
 8027ea0:	37354400 	.word	0x37354400
 8027ea4:	37354443 	.word	0x37354443
 8027ea8:	2e85a308 	.word	0x2e85a308
 8027eac:	43490f80 	.word	0x43490f80
 8027eb0:	3f22f984 	.word	0x3f22f984
 8027eb4:	08034db8 	.word	0x08034db8
 8027eb8:	2e85a300 	.word	0x2e85a300
 8027ebc:	248d3132 	.word	0x248d3132
 8027ec0:	43800000 	.word	0x43800000
 8027ec4:	08034e38 	.word	0x08034e38

08027ec8 <fabsf>:
 8027ec8:	ee10 3a10 	vmov	r3, s0
 8027ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027ed0:	ee00 3a10 	vmov	s0, r3
 8027ed4:	4770      	bx	lr
	...

08027ed8 <scalbnf>:
 8027ed8:	ee10 3a10 	vmov	r3, s0
 8027edc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8027ee0:	d02a      	beq.n	8027f38 <scalbnf+0x60>
 8027ee2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8027ee6:	d302      	bcc.n	8027eee <scalbnf+0x16>
 8027ee8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027eec:	4770      	bx	lr
 8027eee:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8027ef2:	d122      	bne.n	8027f3a <scalbnf+0x62>
 8027ef4:	4b23      	ldr	r3, [pc, #140]	; (8027f84 <scalbnf+0xac>)
 8027ef6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8027f88 <scalbnf+0xb0>
 8027efa:	4298      	cmp	r0, r3
 8027efc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8027f00:	db16      	blt.n	8027f30 <scalbnf+0x58>
 8027f02:	ee10 3a10 	vmov	r3, s0
 8027f06:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8027f0a:	3a19      	subs	r2, #25
 8027f0c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8027f10:	4288      	cmp	r0, r1
 8027f12:	dd14      	ble.n	8027f3e <scalbnf+0x66>
 8027f14:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8027f8c <scalbnf+0xb4>
 8027f18:	ee10 3a10 	vmov	r3, s0
 8027f1c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8027f90 <scalbnf+0xb8>
 8027f20:	eeb0 7a67 	vmov.f32	s14, s15
 8027f24:	2b00      	cmp	r3, #0
 8027f26:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8027f2a:	ee27 0a87 	vmul.f32	s0, s15, s14
 8027f2e:	4770      	bx	lr
 8027f30:	eddf 7a18 	vldr	s15, [pc, #96]	; 8027f94 <scalbnf+0xbc>
 8027f34:	ee27 0a80 	vmul.f32	s0, s15, s0
 8027f38:	4770      	bx	lr
 8027f3a:	0dd2      	lsrs	r2, r2, #23
 8027f3c:	e7e6      	b.n	8027f0c <scalbnf+0x34>
 8027f3e:	4410      	add	r0, r2
 8027f40:	28fe      	cmp	r0, #254	; 0xfe
 8027f42:	dce7      	bgt.n	8027f14 <scalbnf+0x3c>
 8027f44:	2800      	cmp	r0, #0
 8027f46:	dd06      	ble.n	8027f56 <scalbnf+0x7e>
 8027f48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8027f4c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8027f50:	ee00 3a10 	vmov	s0, r3
 8027f54:	4770      	bx	lr
 8027f56:	f110 0f16 	cmn.w	r0, #22
 8027f5a:	da09      	bge.n	8027f70 <scalbnf+0x98>
 8027f5c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8027f94 <scalbnf+0xbc>
 8027f60:	ee10 3a10 	vmov	r3, s0
 8027f64:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8027f98 <scalbnf+0xc0>
 8027f68:	eeb0 7a67 	vmov.f32	s14, s15
 8027f6c:	2b00      	cmp	r3, #0
 8027f6e:	e7da      	b.n	8027f26 <scalbnf+0x4e>
 8027f70:	3019      	adds	r0, #25
 8027f72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8027f76:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8027f9c <scalbnf+0xc4>
 8027f7a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8027f7e:	ee07 3a90 	vmov	s15, r3
 8027f82:	e7d7      	b.n	8027f34 <scalbnf+0x5c>
 8027f84:	ffff3cb0 	.word	0xffff3cb0
 8027f88:	4c000000 	.word	0x4c000000
 8027f8c:	7149f2ca 	.word	0x7149f2ca
 8027f90:	f149f2ca 	.word	0xf149f2ca
 8027f94:	0da24260 	.word	0x0da24260
 8027f98:	8da24260 	.word	0x8da24260
 8027f9c:	33000000 	.word	0x33000000

08027fa0 <with_errnof>:
 8027fa0:	b513      	push	{r0, r1, r4, lr}
 8027fa2:	4604      	mov	r4, r0
 8027fa4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8027fa8:	f7fe f872 	bl	8026090 <__errno>
 8027fac:	ed9d 0a01 	vldr	s0, [sp, #4]
 8027fb0:	6004      	str	r4, [r0, #0]
 8027fb2:	b002      	add	sp, #8
 8027fb4:	bd10      	pop	{r4, pc}

08027fb6 <xflowf>:
 8027fb6:	b130      	cbz	r0, 8027fc6 <xflowf+0x10>
 8027fb8:	eef1 7a40 	vneg.f32	s15, s0
 8027fbc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8027fc0:	2022      	movs	r0, #34	; 0x22
 8027fc2:	f7ff bfed 	b.w	8027fa0 <with_errnof>
 8027fc6:	eef0 7a40 	vmov.f32	s15, s0
 8027fca:	e7f7      	b.n	8027fbc <xflowf+0x6>

08027fcc <__math_uflowf>:
 8027fcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027fd4 <__math_uflowf+0x8>
 8027fd0:	f7ff bff1 	b.w	8027fb6 <xflowf>
 8027fd4:	10000000 	.word	0x10000000

08027fd8 <__math_oflowf>:
 8027fd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027fe0 <__math_oflowf+0x8>
 8027fdc:	f7ff bfeb 	b.w	8027fb6 <xflowf>
 8027fe0:	70000000 	.word	0x70000000

08027fe4 <__kernel_rem_pio2f>:
 8027fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fe8:	ed2d 8b04 	vpush	{d8-d9}
 8027fec:	b0d9      	sub	sp, #356	; 0x164
 8027fee:	4688      	mov	r8, r1
 8027ff0:	49b9      	ldr	r1, [pc, #740]	; (80282d8 <__kernel_rem_pio2f+0x2f4>)
 8027ff2:	9002      	str	r0, [sp, #8]
 8027ff4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8027ff6:	9301      	str	r3, [sp, #4]
 8027ff8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8027ffc:	9901      	ldr	r1, [sp, #4]
 8027ffe:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8028000:	f101 3bff 	add.w	fp, r1, #4294967295
 8028004:	1d11      	adds	r1, r2, #4
 8028006:	db25      	blt.n	8028054 <__kernel_rem_pio2f+0x70>
 8028008:	1ed0      	subs	r0, r2, #3
 802800a:	bf48      	it	mi
 802800c:	1d10      	addmi	r0, r2, #4
 802800e:	10c0      	asrs	r0, r0, #3
 8028010:	1c45      	adds	r5, r0, #1
 8028012:	eba0 070b 	sub.w	r7, r0, fp
 8028016:	eb0a 0c0b 	add.w	ip, sl, fp
 802801a:	ae1c      	add	r6, sp, #112	; 0x70
 802801c:	00e9      	lsls	r1, r5, #3
 802801e:	2400      	movs	r4, #0
 8028020:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8028024:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80282e8 <__kernel_rem_pio2f+0x304>
 8028028:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 802802c:	9103      	str	r1, [sp, #12]
 802802e:	4564      	cmp	r4, ip
 8028030:	dd12      	ble.n	8028058 <__kernel_rem_pio2f+0x74>
 8028032:	ac1c      	add	r4, sp, #112	; 0x70
 8028034:	9901      	ldr	r1, [sp, #4]
 8028036:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 802803a:	f04f 0c00 	mov.w	ip, #0
 802803e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8028042:	45d4      	cmp	ip, sl
 8028044:	dc29      	bgt.n	802809a <__kernel_rem_pio2f+0xb6>
 8028046:	f8dd e008 	ldr.w	lr, [sp, #8]
 802804a:	4627      	mov	r7, r4
 802804c:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80282e8 <__kernel_rem_pio2f+0x304>
 8028050:	2600      	movs	r6, #0
 8028052:	e018      	b.n	8028086 <__kernel_rem_pio2f+0xa2>
 8028054:	2000      	movs	r0, #0
 8028056:	e7db      	b.n	8028010 <__kernel_rem_pio2f+0x2c>
 8028058:	42e7      	cmn	r7, r4
 802805a:	bf54      	ite	pl
 802805c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8028060:	eef0 7a47 	vmovmi.f32	s15, s14
 8028064:	f104 0401 	add.w	r4, r4, #1
 8028068:	bf5c      	itt	pl
 802806a:	ee07 1a90 	vmovpl	s15, r1
 802806e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8028072:	ece6 7a01 	vstmia	r6!, {s15}
 8028076:	e7da      	b.n	802802e <__kernel_rem_pio2f+0x4a>
 8028078:	ecfe 6a01 	vldmia	lr!, {s13}
 802807c:	3601      	adds	r6, #1
 802807e:	ed97 7a00 	vldr	s14, [r7]
 8028082:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028086:	455e      	cmp	r6, fp
 8028088:	f1a7 0704 	sub.w	r7, r7, #4
 802808c:	ddf4      	ble.n	8028078 <__kernel_rem_pio2f+0x94>
 802808e:	f10c 0c01 	add.w	ip, ip, #1
 8028092:	3404      	adds	r4, #4
 8028094:	ece9 7a01 	vstmia	r9!, {s15}
 8028098:	e7d3      	b.n	8028042 <__kernel_rem_pio2f+0x5e>
 802809a:	a908      	add	r1, sp, #32
 802809c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80280a0:	4656      	mov	r6, sl
 80280a2:	eddf 8a90 	vldr	s17, [pc, #576]	; 80282e4 <__kernel_rem_pio2f+0x300>
 80280a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80280aa:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80282e0 <__kernel_rem_pio2f+0x2fc>
 80280ae:	9304      	str	r3, [sp, #16]
 80280b0:	9105      	str	r1, [sp, #20]
 80280b2:	00b3      	lsls	r3, r6, #2
 80280b4:	ac08      	add	r4, sp, #32
 80280b6:	4637      	mov	r7, r6
 80280b8:	9306      	str	r3, [sp, #24]
 80280ba:	ab58      	add	r3, sp, #352	; 0x160
 80280bc:	46a4      	mov	ip, r4
 80280be:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80280c2:	ab44      	add	r3, sp, #272	; 0x110
 80280c4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80280c8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80280cc:	2f00      	cmp	r7, #0
 80280ce:	f1a0 0004 	sub.w	r0, r0, #4
 80280d2:	dc4a      	bgt.n	802816a <__kernel_rem_pio2f+0x186>
 80280d4:	4628      	mov	r0, r5
 80280d6:	9207      	str	r2, [sp, #28]
 80280d8:	f7ff fefe 	bl	8027ed8 <scalbnf>
 80280dc:	eeb0 8a40 	vmov.f32	s16, s0
 80280e0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80280e4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80280e8:	f7fe fef5 	bl	8026ed6 <floorf>
 80280ec:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80280f0:	2d00      	cmp	r5, #0
 80280f2:	9a07      	ldr	r2, [sp, #28]
 80280f4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80280f8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80280fc:	ee17 9a90 	vmov	r9, s15
 8028100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028104:	ee38 8a67 	vsub.f32	s16, s16, s15
 8028108:	dd41      	ble.n	802818e <__kernel_rem_pio2f+0x1aa>
 802810a:	f106 3cff 	add.w	ip, r6, #4294967295
 802810e:	ab08      	add	r3, sp, #32
 8028110:	f1c5 0e08 	rsb	lr, r5, #8
 8028114:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8028118:	fa47 f00e 	asr.w	r0, r7, lr
 802811c:	4481      	add	r9, r0
 802811e:	fa00 f00e 	lsl.w	r0, r0, lr
 8028122:	1a3f      	subs	r7, r7, r0
 8028124:	f1c5 0007 	rsb	r0, r5, #7
 8028128:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 802812c:	4107      	asrs	r7, r0
 802812e:	2f00      	cmp	r7, #0
 8028130:	dd3c      	ble.n	80281ac <__kernel_rem_pio2f+0x1c8>
 8028132:	f04f 0e00 	mov.w	lr, #0
 8028136:	f109 0901 	add.w	r9, r9, #1
 802813a:	4671      	mov	r1, lr
 802813c:	4576      	cmp	r6, lr
 802813e:	dc67      	bgt.n	8028210 <__kernel_rem_pio2f+0x22c>
 8028140:	2d00      	cmp	r5, #0
 8028142:	dd03      	ble.n	802814c <__kernel_rem_pio2f+0x168>
 8028144:	2d01      	cmp	r5, #1
 8028146:	d074      	beq.n	8028232 <__kernel_rem_pio2f+0x24e>
 8028148:	2d02      	cmp	r5, #2
 802814a:	d07b      	beq.n	8028244 <__kernel_rem_pio2f+0x260>
 802814c:	2f02      	cmp	r7, #2
 802814e:	d12d      	bne.n	80281ac <__kernel_rem_pio2f+0x1c8>
 8028150:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028154:	ee30 8a48 	vsub.f32	s16, s0, s16
 8028158:	b341      	cbz	r1, 80281ac <__kernel_rem_pio2f+0x1c8>
 802815a:	4628      	mov	r0, r5
 802815c:	9207      	str	r2, [sp, #28]
 802815e:	f7ff febb 	bl	8027ed8 <scalbnf>
 8028162:	9a07      	ldr	r2, [sp, #28]
 8028164:	ee38 8a40 	vsub.f32	s16, s16, s0
 8028168:	e020      	b.n	80281ac <__kernel_rem_pio2f+0x1c8>
 802816a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802816e:	3f01      	subs	r7, #1
 8028170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028178:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802817c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028180:	ecac 0a01 	vstmia	ip!, {s0}
 8028184:	ed90 0a00 	vldr	s0, [r0]
 8028188:	ee37 0a80 	vadd.f32	s0, s15, s0
 802818c:	e79e      	b.n	80280cc <__kernel_rem_pio2f+0xe8>
 802818e:	d105      	bne.n	802819c <__kernel_rem_pio2f+0x1b8>
 8028190:	1e70      	subs	r0, r6, #1
 8028192:	ab08      	add	r3, sp, #32
 8028194:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8028198:	11ff      	asrs	r7, r7, #7
 802819a:	e7c8      	b.n	802812e <__kernel_rem_pio2f+0x14a>
 802819c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80281a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80281a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281a8:	da30      	bge.n	802820c <__kernel_rem_pio2f+0x228>
 80281aa:	2700      	movs	r7, #0
 80281ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80281b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80281b4:	f040 809a 	bne.w	80282ec <__kernel_rem_pio2f+0x308>
 80281b8:	1e74      	subs	r4, r6, #1
 80281ba:	2100      	movs	r1, #0
 80281bc:	46a4      	mov	ip, r4
 80281be:	45d4      	cmp	ip, sl
 80281c0:	da47      	bge.n	8028252 <__kernel_rem_pio2f+0x26e>
 80281c2:	2900      	cmp	r1, #0
 80281c4:	d063      	beq.n	802828e <__kernel_rem_pio2f+0x2aa>
 80281c6:	ab08      	add	r3, sp, #32
 80281c8:	3d08      	subs	r5, #8
 80281ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80281ce:	2b00      	cmp	r3, #0
 80281d0:	d07f      	beq.n	80282d2 <__kernel_rem_pio2f+0x2ee>
 80281d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80281d6:	4628      	mov	r0, r5
 80281d8:	f7ff fe7e 	bl	8027ed8 <scalbnf>
 80281dc:	1c63      	adds	r3, r4, #1
 80281de:	aa44      	add	r2, sp, #272	; 0x110
 80281e0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80282e4 <__kernel_rem_pio2f+0x300>
 80281e4:	0099      	lsls	r1, r3, #2
 80281e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80281ea:	4623      	mov	r3, r4
 80281ec:	2b00      	cmp	r3, #0
 80281ee:	f280 80ad 	bge.w	802834c <__kernel_rem_pio2f+0x368>
 80281f2:	4623      	mov	r3, r4
 80281f4:	2b00      	cmp	r3, #0
 80281f6:	f2c0 80cb 	blt.w	8028390 <__kernel_rem_pio2f+0x3ac>
 80281fa:	aa44      	add	r2, sp, #272	; 0x110
 80281fc:	4e37      	ldr	r6, [pc, #220]	; (80282dc <__kernel_rem_pio2f+0x2f8>)
 80281fe:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80282e8 <__kernel_rem_pio2f+0x304>
 8028202:	2000      	movs	r0, #0
 8028204:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8028208:	1ae2      	subs	r2, r4, r3
 802820a:	e0b6      	b.n	802837a <__kernel_rem_pio2f+0x396>
 802820c:	2702      	movs	r7, #2
 802820e:	e790      	b.n	8028132 <__kernel_rem_pio2f+0x14e>
 8028210:	6820      	ldr	r0, [r4, #0]
 8028212:	b949      	cbnz	r1, 8028228 <__kernel_rem_pio2f+0x244>
 8028214:	b118      	cbz	r0, 802821e <__kernel_rem_pio2f+0x23a>
 8028216:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802821a:	6020      	str	r0, [r4, #0]
 802821c:	2001      	movs	r0, #1
 802821e:	f10e 0e01 	add.w	lr, lr, #1
 8028222:	3404      	adds	r4, #4
 8028224:	4601      	mov	r1, r0
 8028226:	e789      	b.n	802813c <__kernel_rem_pio2f+0x158>
 8028228:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 802822c:	6020      	str	r0, [r4, #0]
 802822e:	4608      	mov	r0, r1
 8028230:	e7f5      	b.n	802821e <__kernel_rem_pio2f+0x23a>
 8028232:	1e74      	subs	r4, r6, #1
 8028234:	ab08      	add	r3, sp, #32
 8028236:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802823a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802823e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8028242:	e783      	b.n	802814c <__kernel_rem_pio2f+0x168>
 8028244:	1e74      	subs	r4, r6, #1
 8028246:	ab08      	add	r3, sp, #32
 8028248:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802824c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8028250:	e7f5      	b.n	802823e <__kernel_rem_pio2f+0x25a>
 8028252:	ab08      	add	r3, sp, #32
 8028254:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8028258:	f10c 3cff 	add.w	ip, ip, #4294967295
 802825c:	4301      	orrs	r1, r0
 802825e:	e7ae      	b.n	80281be <__kernel_rem_pio2f+0x1da>
 8028260:	3001      	adds	r0, #1
 8028262:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8028266:	2f00      	cmp	r7, #0
 8028268:	d0fa      	beq.n	8028260 <__kernel_rem_pio2f+0x27c>
 802826a:	9b06      	ldr	r3, [sp, #24]
 802826c:	f106 0c01 	add.w	ip, r6, #1
 8028270:	4430      	add	r0, r6
 8028272:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8028276:	eb0d 0403 	add.w	r4, sp, r3
 802827a:	9b01      	ldr	r3, [sp, #4]
 802827c:	18f7      	adds	r7, r6, r3
 802827e:	ab1c      	add	r3, sp, #112	; 0x70
 8028280:	3c4c      	subs	r4, #76	; 0x4c
 8028282:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8028286:	4560      	cmp	r0, ip
 8028288:	da04      	bge.n	8028294 <__kernel_rem_pio2f+0x2b0>
 802828a:	4606      	mov	r6, r0
 802828c:	e711      	b.n	80280b2 <__kernel_rem_pio2f+0xce>
 802828e:	9c05      	ldr	r4, [sp, #20]
 8028290:	2001      	movs	r0, #1
 8028292:	e7e6      	b.n	8028262 <__kernel_rem_pio2f+0x27e>
 8028294:	9b04      	ldr	r3, [sp, #16]
 8028296:	2600      	movs	r6, #0
 8028298:	f8dd e008 	ldr.w	lr, [sp, #8]
 802829c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80282a0:	ee07 3a90 	vmov	s15, r3
 80282a4:	9306      	str	r3, [sp, #24]
 80282a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80282aa:	ece7 7a01 	vstmia	r7!, {s15}
 80282ae:	46b9      	mov	r9, r7
 80282b0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80282e8 <__kernel_rem_pio2f+0x304>
 80282b4:	455e      	cmp	r6, fp
 80282b6:	dd04      	ble.n	80282c2 <__kernel_rem_pio2f+0x2de>
 80282b8:	f10c 0c01 	add.w	ip, ip, #1
 80282bc:	ece4 7a01 	vstmia	r4!, {s15}
 80282c0:	e7e1      	b.n	8028286 <__kernel_rem_pio2f+0x2a2>
 80282c2:	ecfe 6a01 	vldmia	lr!, {s13}
 80282c6:	3601      	adds	r6, #1
 80282c8:	ed39 7a01 	vldmdb	r9!, {s14}
 80282cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80282d0:	e7f0      	b.n	80282b4 <__kernel_rem_pio2f+0x2d0>
 80282d2:	3c01      	subs	r4, #1
 80282d4:	e777      	b.n	80281c6 <__kernel_rem_pio2f+0x1e2>
 80282d6:	bf00      	nop
 80282d8:	0803517c 	.word	0x0803517c
 80282dc:	08035150 	.word	0x08035150
 80282e0:	43800000 	.word	0x43800000
 80282e4:	3b800000 	.word	0x3b800000
 80282e8:	00000000 	.word	0x00000000
 80282ec:	9b03      	ldr	r3, [sp, #12]
 80282ee:	eeb0 0a48 	vmov.f32	s0, s16
 80282f2:	1a98      	subs	r0, r3, r2
 80282f4:	f7ff fdf0 	bl	8027ed8 <scalbnf>
 80282f8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80282e0 <__kernel_rem_pio2f+0x2fc>
 80282fc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8028300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028304:	db19      	blt.n	802833a <__kernel_rem_pio2f+0x356>
 8028306:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80282e4 <__kernel_rem_pio2f+0x300>
 802830a:	aa08      	add	r2, sp, #32
 802830c:	1c74      	adds	r4, r6, #1
 802830e:	3508      	adds	r5, #8
 8028310:	ee60 7a27 	vmul.f32	s15, s0, s15
 8028314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802831c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8028320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028324:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028328:	ee10 3a10 	vmov	r3, s0
 802832c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8028330:	ee17 3a90 	vmov	r3, s15
 8028334:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8028338:	e74b      	b.n	80281d2 <__kernel_rem_pio2f+0x1ee>
 802833a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802833e:	aa08      	add	r2, sp, #32
 8028340:	4634      	mov	r4, r6
 8028342:	ee10 3a10 	vmov	r3, s0
 8028346:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802834a:	e742      	b.n	80281d2 <__kernel_rem_pio2f+0x1ee>
 802834c:	a808      	add	r0, sp, #32
 802834e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8028352:	3b01      	subs	r3, #1
 8028354:	ee07 0a90 	vmov	s15, r0
 8028358:	9001      	str	r0, [sp, #4]
 802835a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802835e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8028362:	ee20 0a07 	vmul.f32	s0, s0, s14
 8028366:	ed62 7a01 	vstmdb	r2!, {s15}
 802836a:	e73f      	b.n	80281ec <__kernel_rem_pio2f+0x208>
 802836c:	ecf6 6a01 	vldmia	r6!, {s13}
 8028370:	3001      	adds	r0, #1
 8028372:	ecb5 7a01 	vldmia	r5!, {s14}
 8028376:	eee6 7a87 	vfma.f32	s15, s13, s14
 802837a:	4550      	cmp	r0, sl
 802837c:	dc01      	bgt.n	8028382 <__kernel_rem_pio2f+0x39e>
 802837e:	4290      	cmp	r0, r2
 8028380:	ddf4      	ble.n	802836c <__kernel_rem_pio2f+0x388>
 8028382:	a858      	add	r0, sp, #352	; 0x160
 8028384:	3b01      	subs	r3, #1
 8028386:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802838a:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 802838e:	e731      	b.n	80281f4 <__kernel_rem_pio2f+0x210>
 8028390:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8028392:	2b02      	cmp	r3, #2
 8028394:	dc09      	bgt.n	80283aa <__kernel_rem_pio2f+0x3c6>
 8028396:	2b00      	cmp	r3, #0
 8028398:	dc2b      	bgt.n	80283f2 <__kernel_rem_pio2f+0x40e>
 802839a:	d044      	beq.n	8028426 <__kernel_rem_pio2f+0x442>
 802839c:	f009 0007 	and.w	r0, r9, #7
 80283a0:	b059      	add	sp, #356	; 0x164
 80283a2:	ecbd 8b04 	vpop	{d8-d9}
 80283a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80283aa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80283ac:	2b03      	cmp	r3, #3
 80283ae:	d1f5      	bne.n	802839c <__kernel_rem_pio2f+0x3b8>
 80283b0:	aa30      	add	r2, sp, #192	; 0xc0
 80283b2:	1f0b      	subs	r3, r1, #4
 80283b4:	4620      	mov	r0, r4
 80283b6:	4413      	add	r3, r2
 80283b8:	461a      	mov	r2, r3
 80283ba:	2800      	cmp	r0, #0
 80283bc:	f1a2 0204 	sub.w	r2, r2, #4
 80283c0:	dc52      	bgt.n	8028468 <__kernel_rem_pio2f+0x484>
 80283c2:	4622      	mov	r2, r4
 80283c4:	2a01      	cmp	r2, #1
 80283c6:	f1a3 0304 	sub.w	r3, r3, #4
 80283ca:	dc5d      	bgt.n	8028488 <__kernel_rem_pio2f+0x4a4>
 80283cc:	ab30      	add	r3, sp, #192	; 0xc0
 80283ce:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80282e8 <__kernel_rem_pio2f+0x304>
 80283d2:	440b      	add	r3, r1
 80283d4:	2c01      	cmp	r4, #1
 80283d6:	dc67      	bgt.n	80284a8 <__kernel_rem_pio2f+0x4c4>
 80283d8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80283dc:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80283e0:	2f00      	cmp	r7, #0
 80283e2:	d167      	bne.n	80284b4 <__kernel_rem_pio2f+0x4d0>
 80283e4:	edc8 6a00 	vstr	s13, [r8]
 80283e8:	ed88 7a01 	vstr	s14, [r8, #4]
 80283ec:	edc8 7a02 	vstr	s15, [r8, #8]
 80283f0:	e7d4      	b.n	802839c <__kernel_rem_pio2f+0x3b8>
 80283f2:	ab30      	add	r3, sp, #192	; 0xc0
 80283f4:	4622      	mov	r2, r4
 80283f6:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80282e8 <__kernel_rem_pio2f+0x304>
 80283fa:	440b      	add	r3, r1
 80283fc:	2a00      	cmp	r2, #0
 80283fe:	da24      	bge.n	802844a <__kernel_rem_pio2f+0x466>
 8028400:	b34f      	cbz	r7, 8028456 <__kernel_rem_pio2f+0x472>
 8028402:	eef1 7a47 	vneg.f32	s15, s14
 8028406:	edc8 7a00 	vstr	s15, [r8]
 802840a:	aa31      	add	r2, sp, #196	; 0xc4
 802840c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8028410:	2301      	movs	r3, #1
 8028412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8028416:	429c      	cmp	r4, r3
 8028418:	da20      	bge.n	802845c <__kernel_rem_pio2f+0x478>
 802841a:	b10f      	cbz	r7, 8028420 <__kernel_rem_pio2f+0x43c>
 802841c:	eef1 7a67 	vneg.f32	s15, s15
 8028420:	edc8 7a01 	vstr	s15, [r8, #4]
 8028424:	e7ba      	b.n	802839c <__kernel_rem_pio2f+0x3b8>
 8028426:	ab30      	add	r3, sp, #192	; 0xc0
 8028428:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80282e8 <__kernel_rem_pio2f+0x304>
 802842c:	440b      	add	r3, r1
 802842e:	2c00      	cmp	r4, #0
 8028430:	da05      	bge.n	802843e <__kernel_rem_pio2f+0x45a>
 8028432:	b10f      	cbz	r7, 8028438 <__kernel_rem_pio2f+0x454>
 8028434:	eef1 7a67 	vneg.f32	s15, s15
 8028438:	edc8 7a00 	vstr	s15, [r8]
 802843c:	e7ae      	b.n	802839c <__kernel_rem_pio2f+0x3b8>
 802843e:	ed33 7a01 	vldmdb	r3!, {s14}
 8028442:	3c01      	subs	r4, #1
 8028444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028448:	e7f1      	b.n	802842e <__kernel_rem_pio2f+0x44a>
 802844a:	ed73 7a01 	vldmdb	r3!, {s15}
 802844e:	3a01      	subs	r2, #1
 8028450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8028454:	e7d2      	b.n	80283fc <__kernel_rem_pio2f+0x418>
 8028456:	eef0 7a47 	vmov.f32	s15, s14
 802845a:	e7d4      	b.n	8028406 <__kernel_rem_pio2f+0x422>
 802845c:	ecb2 7a01 	vldmia	r2!, {s14}
 8028460:	3301      	adds	r3, #1
 8028462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028466:	e7d6      	b.n	8028416 <__kernel_rem_pio2f+0x432>
 8028468:	edd2 7a00 	vldr	s15, [r2]
 802846c:	3801      	subs	r0, #1
 802846e:	edd2 6a01 	vldr	s13, [r2, #4]
 8028472:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028476:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802847a:	ed82 7a00 	vstr	s14, [r2]
 802847e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028482:	edc2 7a01 	vstr	s15, [r2, #4]
 8028486:	e798      	b.n	80283ba <__kernel_rem_pio2f+0x3d6>
 8028488:	edd3 7a00 	vldr	s15, [r3]
 802848c:	3a01      	subs	r2, #1
 802848e:	edd3 6a01 	vldr	s13, [r3, #4]
 8028492:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8028496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802849a:	ed83 7a00 	vstr	s14, [r3]
 802849e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80284a2:	edc3 7a01 	vstr	s15, [r3, #4]
 80284a6:	e78d      	b.n	80283c4 <__kernel_rem_pio2f+0x3e0>
 80284a8:	ed33 7a01 	vldmdb	r3!, {s14}
 80284ac:	3c01      	subs	r4, #1
 80284ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80284b2:	e78f      	b.n	80283d4 <__kernel_rem_pio2f+0x3f0>
 80284b4:	eef1 6a66 	vneg.f32	s13, s13
 80284b8:	eeb1 7a47 	vneg.f32	s14, s14
 80284bc:	eef1 7a67 	vneg.f32	s15, s15
 80284c0:	edc8 6a00 	vstr	s13, [r8]
 80284c4:	ed88 7a01 	vstr	s14, [r8, #4]
 80284c8:	e790      	b.n	80283ec <__kernel_rem_pio2f+0x408>
 80284ca:	bf00      	nop

080284cc <_init>:
 80284cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80284ce:	bf00      	nop
 80284d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80284d2:	bc08      	pop	{r3}
 80284d4:	469e      	mov	lr, r3
 80284d6:	4770      	bx	lr

080284d8 <_fini>:
 80284d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80284da:	bf00      	nop
 80284dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80284de:	bc08      	pop	{r3}
 80284e0:	469e      	mov	lr, r3
 80284e2:	4770      	bx	lr
