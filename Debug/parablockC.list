
parablockC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce4  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000009  20000000  08002ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  2000000c  08003005  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000078  08003005  00020078  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e1ae  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001df7  00000000  00000000  0002e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dc8  00000000  00000000  00030028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a92  00000000  00000000  00030df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030be0  00000000  00000000  00031882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f361  00000000  00000000  00062462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00137ce5  00000000  00000000  000717c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000039c0  00000000  00000000  001a94a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  001ace68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08002f04 	.word	0x08002f04

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08002f04 	.word	0x08002f04

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 fad4 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f809 	bl	8000296 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000284:	f000 f850 	bl	8000328 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 f8a0 	bl	80003cc <MX_GPIO_Init>
  MX_ICACHE_Init();
 800028c:	f000 f85c 	bl	8000348 <MX_ICACHE_Init>
  MX_MEMORYMAP_Init();
 8000290:	f000 f894 	bl	80003bc <MX_MEMORYMAP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	e7fe      	b.n	8000294 <main+0x1c>

08000296 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b09e      	sub	sp, #120	; 0x78
 800029a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	2260      	movs	r2, #96	; 0x60
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fe01 	bl	8002eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	463b      	mov	r3, r7
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
 80002b8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 fe84 	bl	8000fc8 <HAL_PWREx_ControlVoltageScaling>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002c6:	f000 f985 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ca:	2310      	movs	r3, #16
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80002d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002dc:	2300      	movs	r3, #0
 80002de:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 ff6b 	bl	80011c0 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002f0:	f000 f970 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	231f      	movs	r3, #31
 80002f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002f8:	2300      	movs	r3, #0
 80002fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030c:	463b      	mov	r3, r7
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fe31 	bl	8001f78 <HAL_RCC_ClockConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800031c:	f000 f95a 	bl	80005d4 <Error_Handler>
  }
}
 8000320:	bf00      	nop
 8000322:	3778      	adds	r7, #120	; 0x78
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800032c:	f000 ff28 	bl	8001180 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000330:	f000 ff36 	bl	80011a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000334:	2002      	movs	r0, #2
 8000336:	f000 fed3 	bl	80010e0 <HAL_PWREx_ConfigSupply>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000340:	f000 f948 	bl	80005d4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 800035c:	f000 fdb2 	bl	8000ec4 <HAL_ICACHE_Disable>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000366:	f000 f935 	bl	80005d4 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 800036a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 8000370:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000374:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000376:	2301      	movs	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	2000      	movs	r0, #0
 8000388:	f000 fdcc 	bl	8000f24 <HAL_ICACHE_EnableRemapRegion>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 8000392:	f000 f91f 	bl	80005d4 <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000396:	2000      	movs	r0, #0
 8000398:	f000 fd64 	bl	8000e64 <HAL_ICACHE_ConfigAssociativityMode>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ICACHE_Init+0x5e>
  {
    Error_Handler();
 80003a2:	f000 f917 	bl	80005d4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003a6:	f000 fd7d 	bl	8000ea4 <HAL_ICACHE_Enable>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ICACHE_Init+0x6c>
  {
    Error_Handler();
 80003b0:	f000 f910 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e2:	4b6d      	ldr	r3, [pc, #436]	; (8000598 <MX_GPIO_Init+0x1cc>)
 80003e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003e8:	4a6b      	ldr	r2, [pc, #428]	; (8000598 <MX_GPIO_Init+0x1cc>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80003f2:	4b69      	ldr	r3, [pc, #420]	; (8000598 <MX_GPIO_Init+0x1cc>)
 80003f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b65      	ldr	r3, [pc, #404]	; (8000598 <MX_GPIO_Init+0x1cc>)
 8000402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000406:	4a64      	ldr	r2, [pc, #400]	; (8000598 <MX_GPIO_Init+0x1cc>)
 8000408:	f043 0302 	orr.w	r3, r3, #2
 800040c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000410:	4b61      	ldr	r3, [pc, #388]	; (8000598 <MX_GPIO_Init+0x1cc>)
 8000412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000416:	f003 0302 	and.w	r3, r3, #2
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800041e:	4b5e      	ldr	r3, [pc, #376]	; (8000598 <MX_GPIO_Init+0x1cc>)
 8000420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000424:	4a5c      	ldr	r2, [pc, #368]	; (8000598 <MX_GPIO_Init+0x1cc>)
 8000426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800042a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800042e:	4b5a      	ldr	r3, [pc, #360]	; (8000598 <MX_GPIO_Init+0x1cc>)
 8000430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b56      	ldr	r3, [pc, #344]	; (8000598 <MX_GPIO_Init+0x1cc>)
 800043e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000442:	4a55      	ldr	r2, [pc, #340]	; (8000598 <MX_GPIO_Init+0x1cc>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800044c:	4b52      	ldr	r3, [pc, #328]	; (8000598 <MX_GPIO_Init+0x1cc>)
 800044e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2104      	movs	r1, #4
 800045e:	484f      	ldr	r0, [pc, #316]	; (800059c <MX_GPIO_Init+0x1d0>)
 8000460:	f000 fce8 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2180      	movs	r1, #128	; 0x80
 8000468:	484d      	ldr	r0, [pc, #308]	; (80005a0 <MX_GPIO_Init+0x1d4>)
 800046a:	f000 fce3 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	21a0      	movs	r1, #160	; 0xa0
 8000472:	484c      	ldr	r0, [pc, #304]	; (80005a4 <MX_GPIO_Init+0x1d8>)
 8000474:	f000 fcde 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800047e:	4b4a      	ldr	r3, [pc, #296]	; (80005a8 <MX_GPIO_Init+0x1dc>)
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	4844      	ldr	r0, [pc, #272]	; (80005a0 <MX_GPIO_Init+0x1d4>)
 800048e:	f000 faf9 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000492:	2304      	movs	r3, #4
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000496:	2303      	movs	r3, #3
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	4619      	mov	r1, r3
 80004a4:	483e      	ldr	r0, [pc, #248]	; (80005a0 <MX_GPIO_Init+0x1d4>)
 80004a6:	f000 faed 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80004aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	4619      	mov	r1, r3
 80004be:	4839      	ldr	r0, [pc, #228]	; (80005a4 <MX_GPIO_Init+0x1d8>)
 80004c0:	f000 fae0 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ca:	2303      	movs	r3, #3
 80004cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4619      	mov	r1, r3
 80004d8:	4832      	ldr	r0, [pc, #200]	; (80005a4 <MX_GPIO_Init+0x1d8>)
 80004da:	f000 fad3 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80004de:	2304      	movs	r3, #4
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2300      	movs	r3, #0
 80004ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4619      	mov	r1, r3
 80004f4:	4829      	ldr	r0, [pc, #164]	; (800059c <MX_GPIO_Init+0x1d0>)
 80004f6:	f000 fac5 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <MX_GPIO_Init+0x1d4>)
 8000512:	f000 fab7 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000516:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	2302      	movs	r3, #2
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000528:	2307      	movs	r3, #7
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4619      	mov	r1, r3
 8000532:	481e      	ldr	r0, [pc, #120]	; (80005ac <MX_GPIO_Init+0x1e0>)
 8000534:	f000 faa6 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000538:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053e:	2302      	movs	r3, #2
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800054a:	230a      	movs	r3, #10
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4619      	mov	r1, r3
 8000554:	4815      	ldr	r0, [pc, #84]	; (80005ac <MX_GPIO_Init+0x1e0>)
 8000556:	f000 fa95 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800055a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000560:	2303      	movs	r3, #3
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	480f      	ldr	r0, [pc, #60]	; (80005ac <MX_GPIO_Init+0x1e0>)
 8000570:	f000 fa88 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8000574:	23a0      	movs	r3, #160	; 0xa0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_GPIO_Init+0x1d8>)
 800058c:	f000 fa7a 	bl	8000a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000590:	bf00      	nop
 8000592:	3728      	adds	r7, #40	; 0x28
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	46020c00 	.word	0x46020c00
 800059c:	42021800 	.word	0x42021800
 80005a0:	42020800 	.word	0x42020800
 80005a4:	42020400 	.word	0x42020400
 80005a8:	10110000 	.word	0x10110000
 80005ac:	42020000 	.word	0x42020000

080005b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d101      	bne.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005c2:	f000 f95f 	bl	8000884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40014800 	.word	0x40014800

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <Error_Handler+0x8>
	...

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <HAL_MspInit+0x34>)
 80005e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <HAL_MspInit+0x34>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <HAL_MspInit+0x34>)
 80005f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000604:	2004      	movs	r0, #4
 8000606:	f000 fa0a 	bl	8000a1e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	46020c00 	.word	0x46020c00

08000618 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000628:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <HAL_InitTick+0xcc>)
 800062a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800062e:	4a2d      	ldr	r2, [pc, #180]	; (80006e4 <HAL_InitTick+0xcc>)
 8000630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000634:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <HAL_InitTick+0xcc>)
 800063a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800063e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000646:	f107 0210 	add.w	r2, r7, #16
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f001 ffb3 	bl	80025bc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000656:	f001 ff9d 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 800065a:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <HAL_InitTick+0xd0>)
 8000660:	fba2 2303 	umull	r2, r3, r2, r3
 8000664:	0c9b      	lsrs	r3, r3, #18
 8000666:	3b01      	subs	r3, #1
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <HAL_InitTick+0xd4>)
 800066c:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <HAL_InitTick+0xd8>)
 800066e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <HAL_InitTick+0xd4>)
 8000672:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000676:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000678:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <HAL_InitTick+0xd4>)
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_InitTick+0xd4>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_InitTick+0xd4>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <HAL_InitTick+0xd4>)
 800068c:	f002 f854 	bl	8002738 <HAL_TIM_Base_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000696:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800069a:	2b00      	cmp	r3, #0
 800069c:	d118      	bne.n	80006d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800069e:	4813      	ldr	r0, [pc, #76]	; (80006ec <HAL_InitTick+0xd4>)
 80006a0:	f002 f8ac 	bl	80027fc <HAL_TIM_Base_Start_IT>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80006aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d10e      	bne.n	80006d0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d808      	bhi.n	80006ca <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2047      	movs	r0, #71	; 0x47
 80006be:	f000 f9b9 	bl	8000a34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c2:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <HAL_InitTick+0xdc>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	e002      	b.n	80006d0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80006d0:	2047      	movs	r0, #71	; 0x47
 80006d2:	f000 f9c9 	bl	8000a68 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80006d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3738      	adds	r7, #56	; 0x38
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	46020c00 	.word	0x46020c00
 80006e8:	431bde83 	.word	0x431bde83
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40014800 	.word	0x40014800
 80006f4:	20000004 	.word	0x20000004

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <TIM17_IRQHandler+0x10>)
 8000756:	f002 f8f1 	bl	800293c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000028 	.word	0x20000028

08000764 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <SystemInit+0x68>)
 800076a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <SystemInit+0x68>)
 8000770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <SystemInit+0x6c>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <SystemInit+0x6c>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <SystemInit+0x6c>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <SystemInit+0x6c>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <SystemInit+0x6c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <SystemInit+0x6c>)
 8000796:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800079a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800079e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <SystemInit+0x6c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <SystemInit+0x6c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <SystemInit+0x6c>)
 80007ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <SystemInit+0x6c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SystemInit+0x68>)
 80007ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007be:	609a      	str	r2, [r3, #8]
  #endif
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00
 80007d0:	46020c00 	.word	0x46020c00

080007d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80007d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800080c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d8:	f7ff ffc4 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007de:	e003      	b.n	80007e8 <LoopCopyDataInit>

080007e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007e6:	3104      	adds	r1, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007f0:	d3f6      	bcc.n	80007e0 <CopyDataInit>
	ldr	r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopForever+0x12>)
	b	LoopFillZerobss
 80007f4:	e002      	b.n	80007fc <LoopFillZerobss>

080007f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007f8:	f842 3b04 	str.w	r3, [r2], #4

080007fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <LoopForever+0x16>)
	cmp	r2, r3
 80007fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000800:	d3f9      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f002 fb5b 	bl	8002ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000806:	f7ff fd37 	bl	8000278 <main>

0800080a <LoopForever>:

LoopForever:
    b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800080c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000810:	08002ffc 	.word	0x08002ffc
	ldr	r0, =_sdata
 8000814:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000818:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 800081c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000820:	20000078 	.word	0x20000078

08000824 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_IRQHandler>
	...

08000828 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_Init+0x4c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_Init+0x4c>)
 8000832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 f8f0 	bl	8000a1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800083e:	f001 fd8d 	bl	800235c <HAL_RCC_GetSysClockFreq>
 8000842:	4602      	mov	r2, r0
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_Init+0x50>)
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	f003 030f 	and.w	r3, r3, #15
 800084c:	490b      	ldr	r1, [pc, #44]	; (800087c <HAL_Init+0x54>)
 800084e:	5ccb      	ldrb	r3, [r1, r3]
 8000850:	fa22 f303 	lsr.w	r3, r2, r3
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_Init+0x58>)
 8000856:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000858:	2007      	movs	r0, #7
 800085a:	f7ff fedd 	bl	8000618 <HAL_InitTick>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	e002      	b.n	800086e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff feba 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40022000 	.word	0x40022000
 8000878:	46020c00 	.word	0x46020c00
 800087c:	08002f1c 	.word	0x08002f1c
 8000880:	20000000 	.word	0x20000000

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_IncTick+0x20>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_IncTick+0x24>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_IncTick+0x24>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000074 	.word	0x20000074

080008ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <HAL_GetTick+0x14>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000074 	.word	0x20000074

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	db0b      	blt.n	8000952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 021f 	and.w	r2, r3, #31
 8000940:	4907      	ldr	r1, [pc, #28]	; (8000960 <__NVIC_EnableIRQ+0x38>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	2001      	movs	r0, #1
 800094a:	fa00 f202 	lsl.w	r2, r0, r2
 800094e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ff4c 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a42:	f7ff ff63 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	68b9      	ldr	r1, [r7, #8]
 8000a4c:	6978      	ldr	r0, [r7, #20]
 8000a4e:	f7ff ffb3 	bl	80009b8 <NVIC_EncodePriority>
 8000a52:	4602      	mov	r2, r0
 8000a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff82 	bl	8000964 <__NVIC_SetPriority>
}
 8000a60:	bf00      	nop
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff56 	bl	8000928 <__NVIC_EnableIRQ>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000a96:	e1ba      	b.n	8000e0e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 81aa 	beq.w	8000e08 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a55      	ldr	r2, [pc, #340]	; (8000c0c <HAL_GPIO_Init+0x188>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d15d      	bne.n	8000b78 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	69fa      	ldr	r2, [r7, #28]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0201 	and.w	r2, r3, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	69fa      	ldr	r2, [r7, #28]
 8000aea:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000aec:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <HAL_GPIO_Init+0x18c>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000af4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000af6:	4a46      	ldr	r2, [pc, #280]	; (8000c10 <HAL_GPIO_Init+0x18c>)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	4413      	add	r3, r2
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	08da      	lsrs	r2, r3, #3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	3208      	adds	r2, #8
 8000b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	220f      	movs	r2, #15
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	69fa      	ldr	r2, [r7, #28]
 8000b22:	4013      	ands	r3, r2
 8000b24:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	220b      	movs	r2, #11
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	69fa      	ldr	r2, [r7, #28]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	3208      	adds	r2, #8
 8000b42:	69f9      	ldr	r1, [r7, #28]
 8000b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2202      	movs	r2, #2
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	e067      	b.n	8000c48 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x104>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b12      	cmp	r3, #18
 8000b86:	d145      	bne.n	8000c14 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	08da      	lsrs	r2, r3, #3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3208      	adds	r2, #8
 8000b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f003 0307 	and.w	r3, r3, #7
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	f003 020f 	and.w	r2, r3, #15
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69fa      	ldr	r2, [r7, #28]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	69f9      	ldr	r1, [r7, #28]
 8000bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69fa      	ldr	r2, [r7, #28]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0203 	and.w	r2, r3, #3
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69fa      	ldr	r2, [r7, #28]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	69fa      	ldr	r2, [r7, #28]
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e01e      	b.n	8000c48 <HAL_GPIO_Init+0x1c4>
 8000c0a:	bf00      	nop
 8000c0c:	46020000 	.word	0x46020000
 8000c10:	08002f74 	.word	0x08002f74
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0203 	and.w	r2, r3, #3
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69fa      	ldr	r2, [r7, #28]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	69fa      	ldr	r2, [r7, #28]
 8000c46:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d00b      	beq.n	8000c68 <HAL_GPIO_Init+0x1e4>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d007      	beq.n	8000c68 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5c:	2b11      	cmp	r3, #17
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b12      	cmp	r3, #18
 8000c66:	d130      	bne.n	8000cca <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69fa      	ldr	r2, [r7, #28]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	f003 0201 	and.w	r2, r3, #1
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d017      	beq.n	8000d02 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d07c      	beq.n	8000e08 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d0e:	4a47      	ldr	r2, [pc, #284]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3318      	adds	r3, #24
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	220f      	movs	r2, #15
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69fa      	ldr	r2, [r7, #28]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	0a9a      	lsrs	r2, r3, #10
 8000d36:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <HAL_GPIO_Init+0x3ac>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	4093      	lsls	r3, r2
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000d4a:	4938      	ldr	r1, [pc, #224]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3318      	adds	r3, #24
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d58:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000d74:	69fa      	ldr	r2, [r7, #28]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000d7c:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000da6:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000db2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000dca:	69fa      	ldr	r2, [r7, #28]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000dd2:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000de0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000df8:	69fa      	ldr	r2, [r7, #28]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_GPIO_Init+0x3a8>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa22 f303 	lsr.w	r3, r2, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f47f ae3d 	bne.w	8000a98 <HAL_GPIO_Init+0x14>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3724      	adds	r7, #36	; 0x24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	46022000 	.word	0x46022000
 8000e30:	002f7f7f 	.word	0x002f7f7f

08000e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e007      	b.n	8000e92 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 0204 	bic.w	r2, r3, #4
 8000e8a:	4905      	ldr	r1, [pc, #20]	; (8000ea0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40030400 	.word	0x40030400

08000ea4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_ICACHE_Enable+0x1c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_ICACHE_Enable+0x1c>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	40030400 	.word	0x40030400

08000ec4 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_ICACHE_Disable+0x5c>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_ICACHE_Disable+0x5c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_ICACHE_Disable+0x5c>)
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee0:	f7ff fce4 	bl	80008ac <HAL_GetTick>
 8000ee4:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000ee6:	e00f      	b.n	8000f08 <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8000ee8:	f7ff fce0 	bl	80008ac <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d908      	bls.n	8000f08 <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_ICACHE_Disable+0x5c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	71fb      	strb	r3, [r7, #7]
        break;
 8000f06:	e005      	b.n	8000f14 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_ICACHE_Disable+0x5c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1e9      	bne.n	8000ee8 <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40030400 	.word	0x40030400

08000f24 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000f32:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_ICACHE_EnableRemapRegion+0x98>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	75fb      	strb	r3, [r7, #23]
 8000f42:	e034      	b.n	8000fae <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	009a      	lsls	r2, r3, #2
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8000f4a:	4413      	add	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	75fb      	strb	r3, [r7, #23]
 8000f5e:	e026      	b.n	8000fae <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8000f80:	401a      	ands	r2, r3
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	025a      	lsls	r2, r3, #9
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40030400 	.word	0x40030400
 8000fc0:	40030420 	.word	0x40030420
 8000fc4:	07ff0000 	.word	0x07ff0000

08000fc8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000fd0:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d10b      	bne.n	8000ffa <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d905      	bls.n	8000ff6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	4a32      	ldr	r2, [pc, #200]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e057      	b.n	80010aa <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001000:	d90a      	bls.n	8001018 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4313      	orrs	r3, r2
 800100e:	4a2a      	ldr	r2, [pc, #168]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	60d3      	str	r3, [r2, #12]
 8001016:	e007      	b.n	8001028 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001020:	4925      	ldr	r1, [pc, #148]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	099b      	lsrs	r3, r3, #6
 8001034:	2232      	movs	r2, #50	; 0x32
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	099b      	lsrs	r3, r3, #6
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001046:	e002      	b.n	800104e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <HAL_PWREx_ControlVoltageScaling+0x98>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f3      	bne.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d01b      	beq.n	800109e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800106c:	fba2 2303 	umull	r2, r3, r2, r3
 8001070:	099b      	lsrs	r3, r3, #6
 8001072:	2232      	movs	r2, #50	; 0x32
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	099b      	lsrs	r3, r3, #6
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001084:	e002      	b.n	800108c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3b01      	subs	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800108e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f3      	bne.n	8001086 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e000      	b.n	80010aa <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	46020800 	.word	0x46020800
 80010bc:	20000000 	.word	0x20000000
 80010c0:	10624dd3 	.word	0x10624dd3

080010c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	46020800 	.word	0x46020800

080010e0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_PWREx_ConfigSupply+0x94>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <HAL_PWREx_ConfigSupply+0x98>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	099b      	lsrs	r3, r3, #6
 80010f4:	2232      	movs	r2, #50	; 0x32
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a1f      	ldr	r2, [pc, #124]	; (8001178 <HAL_PWREx_ConfigSupply+0x98>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	3301      	adds	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d113      	bne.n	8001134 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_PWREx_ConfigSupply+0x9c>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a1a      	ldr	r2, [pc, #104]	; (800117c <HAL_PWREx_ConfigSupply+0x9c>)
 8001112:	f023 0302 	bic.w	r3, r3, #2
 8001116:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001118:	e002      	b.n	8001120 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3b01      	subs	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_PWREx_ConfigSupply+0x9c>)
 8001122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b02      	cmp	r3, #2
 800112a:	d116      	bne.n	800115a <HAL_PWREx_ConfigSupply+0x7a>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f3      	bne.n	800111a <HAL_PWREx_ConfigSupply+0x3a>
 8001132:	e012      	b.n	800115a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_PWREx_ConfigSupply+0x9c>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_PWREx_ConfigSupply+0x9c>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001140:	e002      	b.n	8001148 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3b01      	subs	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_PWREx_ConfigSupply+0x9c>)
 800114a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <HAL_PWREx_ConfigSupply+0x7a>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f3      	bne.n	8001142 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e000      	b.n	8001166 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000000 	.word	0x20000000
 8001178:	10624dd3 	.word	0x10624dd3
 800117c:	46020800 	.word	0x46020800

08001180 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_PWREx_EnableVddIO2+0x1c>)
 800118a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800118e:	6113      	str	r3, [r2, #16]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	46020800 	.word	0x46020800

080011a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	46020800 	.word	0x46020800

080011c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f000 bec8 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011da:	4b99      	ldr	r3, [pc, #612]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e4:	4b96      	ldr	r3, [pc, #600]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80011e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 816c 	beq.w	80014d4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d007      	beq.n	8001212 <HAL_RCC_OscConfig+0x52>
 8001202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001204:	2b0c      	cmp	r3, #12
 8001206:	f040 80de 	bne.w	80013c6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	2b01      	cmp	r3, #1
 800120e:	f040 80da 	bne.w	80013c6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	f000 bea5 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001224:	4b86      	ldr	r3, [pc, #536]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_RCC_OscConfig+0x7a>
 8001230:	4b83      	ldr	r3, [pc, #524]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001238:	e005      	b.n	8001246 <HAL_RCC_OscConfig+0x86>
 800123a:	4b81      	ldr	r3, [pc, #516]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800123c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001246:	4293      	cmp	r3, r2
 8001248:	d255      	bcs.n	80012f6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10a      	bne.n	8001266 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	4618      	mov	r0, r3
 8001256:	f001 f9e9 	bl	800262c <RCC_SetFlashLatencyFromMSIRange>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	f000 be82 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4a75      	ldr	r2, [pc, #468]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800126c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001270:	6093      	str	r3, [r2, #8]
 8001272:	4b73      	ldr	r3, [pc, #460]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	4970      	ldr	r1, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001280:	4313      	orrs	r3, r2
 8001282:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800128c:	d309      	bcc.n	80012a2 <HAL_RCC_OscConfig+0xe2>
 800128e:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f023 021f 	bic.w	r2, r3, #31
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4969      	ldr	r1, [pc, #420]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800129c:	4313      	orrs	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
 80012a0:	e07e      	b.n	80013a0 <HAL_RCC_OscConfig+0x1e0>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da0a      	bge.n	80012c0 <HAL_RCC_OscConfig+0x100>
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	015b      	lsls	r3, r3, #5
 80012b8:	4961      	ldr	r1, [pc, #388]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60cb      	str	r3, [r1, #12]
 80012be:	e06f      	b.n	80013a0 <HAL_RCC_OscConfig+0x1e0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d30a      	bcc.n	80012e0 <HAL_RCC_OscConfig+0x120>
 80012ca:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	029b      	lsls	r3, r3, #10
 80012d8:	4959      	ldr	r1, [pc, #356]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60cb      	str	r3, [r1, #12]
 80012de:	e05f      	b.n	80013a0 <HAL_RCC_OscConfig+0x1e0>
 80012e0:	4b57      	ldr	r3, [pc, #348]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	03db      	lsls	r3, r3, #15
 80012ee:	4954      	ldr	r1, [pc, #336]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60cb      	str	r3, [r1, #12]
 80012f4:	e054      	b.n	80013a0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80012f6:	4b52      	ldr	r3, [pc, #328]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80012fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001300:	6093      	str	r3, [r2, #8]
 8001302:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	494c      	ldr	r1, [pc, #304]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001310:	4313      	orrs	r3, r2
 8001312:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800131c:	d309      	bcc.n	8001332 <HAL_RCC_OscConfig+0x172>
 800131e:	4b48      	ldr	r3, [pc, #288]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f023 021f 	bic.w	r2, r3, #31
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4945      	ldr	r1, [pc, #276]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
 8001330:	e028      	b.n	8001384 <HAL_RCC_OscConfig+0x1c4>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	2b00      	cmp	r3, #0
 8001338:	da0a      	bge.n	8001350 <HAL_RCC_OscConfig+0x190>
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	015b      	lsls	r3, r3, #5
 8001348:	493d      	ldr	r1, [pc, #244]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800134a:	4313      	orrs	r3, r2
 800134c:	60cb      	str	r3, [r1, #12]
 800134e:	e019      	b.n	8001384 <HAL_RCC_OscConfig+0x1c4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001358:	d30a      	bcc.n	8001370 <HAL_RCC_OscConfig+0x1b0>
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800136a:	4313      	orrs	r3, r2
 800136c:	60cb      	str	r3, [r1, #12]
 800136e:	e009      	b.n	8001384 <HAL_RCC_OscConfig+0x1c4>
 8001370:	4b33      	ldr	r3, [pc, #204]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	03db      	lsls	r3, r3, #15
 800137e:	4930      	ldr	r1, [pc, #192]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001380:	4313      	orrs	r3, r2
 8001382:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10a      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	4618      	mov	r0, r3
 8001390:	f001 f94c 	bl	800262c <RCC_SetFlashLatencyFromMSIRange>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	f000 bde5 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80013a0:	f001 f8de 	bl	8002560 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_RCC_OscConfig+0x284>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f935 	bl	8000618 <HAL_InitTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80013b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 808a 	beq.w	80014d2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80013be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c2:	f000 bdd2 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d066      	beq.n	800149c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80013da:	f7ff fa67 	bl	80008ac <HAL_GetTick>
 80013de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80013e0:	e009      	b.n	80013f6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e2:	f7ff fa63 	bl	80008ac <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d902      	bls.n	80013f6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f000 bdba 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0ef      	beq.n	80013e2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800140c:	6093      	str	r3, [r2, #8]
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	4909      	ldr	r1, [pc, #36]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001428:	d30e      	bcc.n	8001448 <HAL_RCC_OscConfig+0x288>
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f023 021f 	bic.w	r2, r3, #31
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4902      	ldr	r1, [pc, #8]	; (8001440 <HAL_RCC_OscConfig+0x280>)
 8001438:	4313      	orrs	r3, r2
 800143a:	60cb      	str	r3, [r1, #12]
 800143c:	e04a      	b.n	80014d4 <HAL_RCC_OscConfig+0x314>
 800143e:	bf00      	nop
 8001440:	46020c00 	.word	0x46020c00
 8001444:	20000004 	.word	0x20000004
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	2b00      	cmp	r3, #0
 800144e:	da0a      	bge.n	8001466 <HAL_RCC_OscConfig+0x2a6>
 8001450:	4b98      	ldr	r3, [pc, #608]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	4995      	ldr	r1, [pc, #596]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	60cb      	str	r3, [r1, #12]
 8001464:	e036      	b.n	80014d4 <HAL_RCC_OscConfig+0x314>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146e:	d30a      	bcc.n	8001486 <HAL_RCC_OscConfig+0x2c6>
 8001470:	4b90      	ldr	r3, [pc, #576]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	029b      	lsls	r3, r3, #10
 800147e:	498d      	ldr	r1, [pc, #564]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e026      	b.n	80014d4 <HAL_RCC_OscConfig+0x314>
 8001486:	4b8b      	ldr	r3, [pc, #556]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	03db      	lsls	r3, r3, #15
 8001494:	4987      	ldr	r1, [pc, #540]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	60cb      	str	r3, [r1, #12]
 800149a:	e01b      	b.n	80014d4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800149c:	4b85      	ldr	r3, [pc, #532]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a84      	ldr	r2, [pc, #528]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80014a8:	f7ff fa00 	bl	80008ac <HAL_GetTick>
 80014ac:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80014ae:	e009      	b.n	80014c4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b0:	f7ff f9fc 	bl	80008ac <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d902      	bls.n	80014c4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	f000 bd53 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80014c4:	4b7b      	ldr	r3, [pc, #492]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1ef      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2f0>
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 808b 	beq.w	80015f8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80014e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_OscConfig+0x334>
 80014e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d17d      	bne.n	80015f8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f000 bd34 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x35a>
 800150c:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a68      	ldr	r2, [pc, #416]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e041      	b.n	800159e <HAL_RCC_OscConfig+0x3de>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001522:	d112      	bne.n	800154a <HAL_RCC_OscConfig+0x38a>
 8001524:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a62      	ldr	r2, [pc, #392]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b60      	ldr	r3, [pc, #384]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a5f      	ldr	r2, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a5c      	ldr	r2, [pc, #368]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e029      	b.n	800159e <HAL_RCC_OscConfig+0x3de>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001552:	d112      	bne.n	800157a <HAL_RCC_OscConfig+0x3ba>
 8001554:	4b57      	ldr	r3, [pc, #348]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a56      	ldr	r2, [pc, #344]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b54      	ldr	r3, [pc, #336]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a53      	ldr	r2, [pc, #332]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e011      	b.n	800159e <HAL_RCC_OscConfig+0x3de>
 800157a:	4b4e      	ldr	r3, [pc, #312]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b48      	ldr	r3, [pc, #288]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a47      	ldr	r2, [pc, #284]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800159c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d014      	beq.n	80015d0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80015a6:	f7ff f981 	bl	80008ac <HAL_GetTick>
 80015aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ae:	f7ff f97d 	bl	80008ac <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d902      	bls.n	80015c2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	f000 bcd4 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c2:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0ef      	beq.n	80015ae <HAL_RCC_OscConfig+0x3ee>
 80015ce:	e013      	b.n	80015f8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80015d0:	f7ff f96c 	bl	80008ac <HAL_GetTick>
 80015d4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d6:	e009      	b.n	80015ec <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff f968 	bl	80008ac <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d902      	bls.n	80015ec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	f000 bcbf 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1ef      	bne.n	80015d8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05f      	beq.n	80016c4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001606:	2b04      	cmp	r3, #4
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x456>
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	2b0c      	cmp	r3, #12
 800160e:	d114      	bne.n	800163a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001612:	2b02      	cmp	r3, #2
 8001614:	d111      	bne.n	800163a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f000 bca3 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	4920      	ldr	r1, [pc, #128]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	4313      	orrs	r3, r2
 8001636:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001638:	e044      	b.n	80016c4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d024      	beq.n	800168c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800164e:	f7ff f92d 	bl	80008ac <HAL_GetTick>
 8001652:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	e009      	b.n	800166a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff f929 	bl	80008ac <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d902      	bls.n	800166a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	f000 bc80 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0ef      	beq.n	8001656 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	490b      	ldr	r1, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001686:	4313      	orrs	r3, r2
 8001688:	610b      	str	r3, [r1, #16]
 800168a:	e01b      	b.n	80016c4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001698:	f7ff f908 	bl	80008ac <HAL_GetTick>
 800169c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff f904 	bl	80008ac <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d904      	bls.n	80016b8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f000 bc5b 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
 80016b4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b8:	4baf      	ldr	r3, [pc, #700]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ed      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80c8 	beq.w	8001862 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d8:	4ba7      	ldr	r3, [pc, #668]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80016da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d111      	bne.n	800170a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4ba4      	ldr	r3, [pc, #656]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ec:	4aa2      	ldr	r2, [pc, #648]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80016f6:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001704:	2301      	movs	r3, #1
 8001706:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800170a:	4b9c      	ldr	r3, [pc, #624]	; (800197c <HAL_RCC_OscConfig+0x7bc>)
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d119      	bne.n	800174a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001716:	4b99      	ldr	r3, [pc, #612]	; (800197c <HAL_RCC_OscConfig+0x7bc>)
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	4a98      	ldr	r2, [pc, #608]	; (800197c <HAL_RCC_OscConfig+0x7bc>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001722:	f7ff f8c3 	bl	80008ac <HAL_GetTick>
 8001726:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001728:	e009      	b.n	800173e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff f8bf 	bl	80008ac <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d902      	bls.n	800173e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	f000 bc16 	b.w	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800173e:	4b8f      	ldr	r3, [pc, #572]	; (800197c <HAL_RCC_OscConfig+0x7bc>)
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0ef      	beq.n	800172a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d05f      	beq.n	8001812 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001752:	4b89      	ldr	r3, [pc, #548]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001758:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	429a      	cmp	r2, r3
 8001766:	d037      	beq.n	80017d8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d006      	beq.n	8001780 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e3f4      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01b      	beq.n	80017c2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800178a:	4b7b      	ldr	r3, [pc, #492]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 800178c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001790:	4a79      	ldr	r2, [pc, #484]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001792:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001796:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800179a:	f7ff f887 	bl	80008ac <HAL_GetTick>
 800179e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff f883 	bl	80008ac <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e3da      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80017b4:	4b70      	ldr	r3, [pc, #448]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80017b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ef      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80017c2:	4b6d      	ldr	r3, [pc, #436]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80017c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4969      	ldr	r1, [pc, #420]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80017d8:	4b67      	ldr	r3, [pc, #412]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80017da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017de:	4a66      	ldr	r2, [pc, #408]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 80017e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80017e8:	f7ff f860 	bl	80008ac <HAL_GetTick>
 80017ec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff f85c 	bl	80008ac <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e3b3      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ef      	beq.n	80017f0 <HAL_RCC_OscConfig+0x630>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001812:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001818:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 800181a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800181e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001822:	f7ff f843 	bl	80008ac <HAL_GetTick>
 8001826:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff f83f 	bl	80008ac <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b05      	cmp	r3, #5
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e396      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800183c:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 800183e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800184a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001858:	4a47      	ldr	r2, [pc, #284]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8111 	beq.w	8001a92 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b40      	ldr	r3, [pc, #256]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d111      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800188a:	4a3b      	ldr	r2, [pc, #236]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001894:	4b38      	ldr	r3, [pc, #224]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018a8:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_RCC_OscConfig+0x7bc>)
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d118      	bne.n	80018e6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <HAL_RCC_OscConfig+0x7bc>)
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	4a30      	ldr	r2, [pc, #192]	; (800197c <HAL_RCC_OscConfig+0x7bc>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c0:	f7fe fff4 	bl	80008ac <HAL_GetTick>
 80018c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c8:	f7fe fff0 	bl	80008ac <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e347      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <HAL_RCC_OscConfig+0x7bc>)
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d01f      	beq.n	8001932 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d010      	beq.n	8001920 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001914:	4a18      	ldr	r2, [pc, #96]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800191e:	e018      	b.n	8001952 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001926:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001930:	e00f      	b.n	8001952 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001938:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 8001944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <HAL_RCC_OscConfig+0x7b8>)
 800194a:	f023 0304 	bic.w	r3, r3, #4
 800194e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d057      	beq.n	8001a0a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800195a:	f7fe ffa7 	bl	80008ac <HAL_GetTick>
 800195e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001960:	e00e      	b.n	8001980 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7fe ffa3 	bl	80008ac <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d905      	bls.n	8001980 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e2f8      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
 8001978:	46020c00 	.word	0x46020c00
 800197c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001980:	4b9c      	ldr	r3, [pc, #624]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0e9      	beq.n	8001962 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800199a:	4b96      	ldr	r3, [pc, #600]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 800199c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019a0:	4a94      	ldr	r2, [pc, #592]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 80019a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7fe ff7e 	bl	80008ac <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e2d3      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019c2:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 80019c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ed      	beq.n	80019ac <HAL_RCC_OscConfig+0x7ec>
 80019d0:	e053      	b.n	8001a7a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019d2:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 80019d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d8:	4a86      	ldr	r2, [pc, #536]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 80019da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7fe ff62 	bl	80008ac <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e2b7      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019fa:	4b7e      	ldr	r3, [pc, #504]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 80019fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ed      	bne.n	80019e4 <HAL_RCC_OscConfig+0x824>
 8001a08:	e037      	b.n	8001a7a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001a0a:	f7fe ff4f 	bl	80008ac <HAL_GetTick>
 8001a0e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7fe ff4b 	bl	80008ac <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e2a0      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a28:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ed      	bne.n	8001a12 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01a      	beq.n	8001a7a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a44:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a4a:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7fe ff29 	bl	80008ac <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e27e      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a6c:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ed      	bne.n	8001a56 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a7a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a82:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a88:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d036      	beq.n	8001b0c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d019      	beq.n	8001ada <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ab2:	f7fe fefb 	bl	80008ac <HAL_GetTick>
 8001ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aba:	f7fe fef7 	bl	80008ac <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e24e      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001acc:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x8fa>
 8001ad8:	e018      	b.n	8001b0c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a45      	ldr	r2, [pc, #276]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ae4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ae6:	f7fe fee1 	bl	80008ac <HAL_GetTick>
 8001aea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aee:	f7fe fedd 	bl	80008ac <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e234      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001b00:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d036      	beq.n	8001b86 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d019      	beq.n	8001b54 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b2c:	f7fe febe 	bl	80008ac <HAL_GetTick>
 8001b30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b34:	f7fe feba 	bl	80008ac <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e211      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x974>
 8001b52:	e018      	b.n	8001b86 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b60:	f7fe fea4 	bl	80008ac <HAL_GetTick>
 8001b64:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001b68:	f7fe fea0 	bl	80008ac <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1f7      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d07f      	beq.n	8001c92 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d062      	beq.n	8001c60 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ba4:	6093      	str	r3, [r2, #8]
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	4910      	ldr	r1, [pc, #64]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001bc0:	d309      	bcc.n	8001bd6 <HAL_RCC_OscConfig+0xa16>
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f023 021f 	bic.w	r2, r3, #31
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e02a      	b.n	8001c2c <HAL_RCC_OscConfig+0xa6c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	da0c      	bge.n	8001bf8 <HAL_RCC_OscConfig+0xa38>
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	4901      	ldr	r1, [pc, #4]	; (8001bf4 <HAL_RCC_OscConfig+0xa34>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60cb      	str	r3, [r1, #12]
 8001bf2:	e01b      	b.n	8001c2c <HAL_RCC_OscConfig+0xa6c>
 8001bf4:	46020c00 	.word	0x46020c00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	d30a      	bcc.n	8001c18 <HAL_RCC_OscConfig+0xa58>
 8001c02:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	029b      	lsls	r3, r3, #10
 8001c10:	499d      	ldr	r1, [pc, #628]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60cb      	str	r3, [r1, #12]
 8001c16:	e009      	b.n	8001c2c <HAL_RCC_OscConfig+0xa6c>
 8001c18:	4b9b      	ldr	r3, [pc, #620]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	03db      	lsls	r3, r3, #15
 8001c26:	4998      	ldr	r1, [pc, #608]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001c2c:	4b96      	ldr	r3, [pc, #600]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a95      	ldr	r2, [pc, #596]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c38:	f7fe fe38 	bl	80008ac <HAL_GetTick>
 8001c3c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c40:	f7fe fe34 	bl	80008ac <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e18b      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001c52:	4b8d      	ldr	r3, [pc, #564]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xa80>
 8001c5e:	e018      	b.n	8001c92 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001c60:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a88      	ldr	r2, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c66:	f023 0310 	bic.w	r3, r3, #16
 8001c6a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c6c:	f7fe fe1e 	bl	80008ac <HAL_GetTick>
 8001c70:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001c74:	f7fe fe1a 	bl	80008ac <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e171      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001c86:	4b80      	ldr	r3, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8166 	beq.w	8001f68 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca2:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	f000 80f2 	beq.w	8001e94 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	f040 80c5 	bne.w	8001e44 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a72      	ldr	r2, [pc, #456]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cc6:	f7fe fdf1 	bl	80008ac <HAL_GetTick>
 8001cca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7fe fded 	bl	80008ac <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e144      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ce0:	4b69      	ldr	r3, [pc, #420]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cec:	4b66      	ldr	r3, [pc, #408]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d111      	bne.n	8001d1e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d00:	4a61      	ldr	r2, [pc, #388]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <HAL_RCC_OscConfig+0xccc>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d2a:	d102      	bne.n	8001d32 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0xccc>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <HAL_RCC_OscConfig+0xccc>)
 8001d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001d3e:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d46:	f023 0303 	bic.w	r3, r3, #3
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d52:	3a01      	subs	r2, #1
 8001d54:	0212      	lsls	r2, r2, #8
 8001d56:	4311      	orrs	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	494a      	ldr	r1, [pc, #296]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	628b      	str	r3, [r1, #40]	; 0x28
 8001d64:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d68:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <HAL_RCC_OscConfig+0xcd0>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d70:	3a01      	subs	r2, #1
 8001d72:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	0252      	lsls	r2, r2, #9
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d86:	3a01      	subs	r2, #1
 8001d88:	0412      	lsls	r2, r2, #16
 8001d8a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d94:	3a01      	subs	r2, #1
 8001d96:	0612      	lsls	r2, r2, #24
 8001d98:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	493a      	ldr	r1, [pc, #232]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	4a37      	ldr	r2, [pc, #220]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001daa:	f023 0310 	bic.w	r3, r3, #16
 8001dae:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001dc0:	f043 0310 	orr.w	r3, r3, #16
 8001dc4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	f023 020c 	bic.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	492d      	ldr	r1, [pc, #180]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001dd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_OscConfig+0xccc>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a29      	ldr	r2, [pc, #164]	; (8001e8c <HAL_RCC_OscConfig+0xccc>)
 8001de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dea:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001dec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e1c:	f7fe fd46 	bl	80008ac <HAL_GetTick>
 8001e20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f7fe fd42 	bl	80008ac <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e099      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0xc64>
 8001e42:	e091      	b.n	8001f68 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e50:	f7fe fd2c 	bl	80008ac <HAL_GetTick>
 8001e54:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7fe fd28 	bl	80008ac <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e6a:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	4a03      	ldr	r2, [pc, #12]	; (8001e88 <HAL_RCC_OscConfig+0xcc8>)
 8001e7c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001e80:	f023 0303 	bic.w	r3, r3, #3
 8001e84:	6293      	str	r3, [r2, #40]	; 0x28
 8001e86:	e06f      	b.n	8001f68 <HAL_RCC_OscConfig+0xda8>
 8001e88:	46020c00 	.word	0x46020c00
 8001e8c:	46020800 	.word	0x46020800
 8001e90:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_OscConfig+0xdb4>)
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0xdb4>)
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d039      	beq.n	8001f1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d132      	bne.n	8001f1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d129      	bne.n	8001f1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d122      	bne.n	8001f1c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d11a      	bne.n	8001f1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	0a5b      	lsrs	r3, r3, #9
 8001eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d111      	bne.n	8001f1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f04:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d108      	bne.n	8001f1c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	0e1b      	lsrs	r3, r3, #24
 8001f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e024      	b.n	8001f6a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCC_OscConfig+0xdb4>)
 8001f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d01a      	beq.n	8001f68 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0xdb4>)
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_RCC_OscConfig+0xdb4>)
 8001f38:	f023 0310 	bic.w	r3, r3, #16
 8001f3c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fcb5 	bl	80008ac <HAL_GetTick>
 8001f42:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001f44:	bf00      	nop
 8001f46:	f7fe fcb1 	bl	80008ac <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d0f9      	beq.n	8001f46 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_RCC_OscConfig+0xdb4>)
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_RCC_OscConfig+0xdb4>)
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_RCC_OscConfig+0xdb4>)
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3738      	adds	r7, #56	; 0x38
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	46020c00 	.word	0x46020c00

08001f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e1d9      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b9b      	ldr	r3, [pc, #620]	; (80021fc <HAL_RCC_ClockConfig+0x284>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d910      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b98      	ldr	r3, [pc, #608]	; (80021fc <HAL_RCC_ClockConfig+0x284>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 020f 	bic.w	r2, r3, #15
 8001fa2:	4996      	ldr	r1, [pc, #600]	; (80021fc <HAL_RCC_ClockConfig+0x284>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b94      	ldr	r3, [pc, #592]	; (80021fc <HAL_RCC_ClockConfig+0x284>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e1c1      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d908      	bls.n	8001fea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001fd8:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	4986      	ldr	r1, [pc, #536]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d012      	beq.n	800201c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	4b81      	ldr	r3, [pc, #516]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002004:	429a      	cmp	r2, r3
 8002006:	d909      	bls.n	800201c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002008:	4b7d      	ldr	r3, [pc, #500]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	497a      	ldr	r1, [pc, #488]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002018:	4313      	orrs	r3, r2
 800201a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b74      	ldr	r3, [pc, #464]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002034:	429a      	cmp	r2, r3
 8002036:	d908      	bls.n	800204a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b71      	ldr	r3, [pc, #452]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	496e      	ldr	r1, [pc, #440]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002046:	4313      	orrs	r3, r2
 8002048:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d010      	beq.n	8002078 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4b69      	ldr	r3, [pc, #420]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	429a      	cmp	r2, r3
 8002064:	d908      	bls.n	8002078 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002066:	4b66      	ldr	r3, [pc, #408]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	f023 020f 	bic.w	r2, r3, #15
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	4963      	ldr	r1, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002074:	4313      	orrs	r3, r2
 8002076:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80d2 	beq.w	800222a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d143      	bne.n	800211a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d110      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b57      	ldr	r3, [pc, #348]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	4a56      	ldr	r2, [pc, #344]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80020c2:	f7fe fbf3 	bl	80008ac <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <HAL_RCC_ClockConfig+0x28c>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00f      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80020d6:	f7fe fbe9 	bl	80008ac <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e12b      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_ClockConfig+0x28c>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 80020fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002100:	4a3f      	ldr	r2, [pc, #252]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002102:	f023 0304 	bic.w	r3, r3, #4
 8002106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d121      	bne.n	800215a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e112      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d115      	bne.n	800215a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e106      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e0fa      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0f2      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4926      	ldr	r1, [pc, #152]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002168:	4313      	orrs	r3, r2
 800216a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800216c:	f7fe fb9e 	bl	80008ac <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d112      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7fe fb96 	bl	80008ac <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e0d6      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b0c      	cmp	r3, #12
 800219c:	d1ee      	bne.n	800217c <HAL_RCC_ClockConfig+0x204>
 800219e:	e044      	b.n	800222a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d112      	bne.n	80021ce <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021aa:	f7fe fb7f 	bl	80008ac <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0bf      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d1ee      	bne.n	80021aa <HAL_RCC_ClockConfig+0x232>
 80021cc:	e02d      	b.n	800222a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d123      	bne.n	800221e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe fb68 	bl	80008ac <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0a8      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <HAL_RCC_ClockConfig+0x288>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x260>
 80021fa:	e016      	b.n	800222a <HAL_RCC_ClockConfig+0x2b2>
 80021fc:	40022000 	.word	0x40022000
 8002200:	46020c00 	.word	0x46020c00
 8002204:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe fb50 	bl	80008ac <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e090      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d010      	beq.n	8002258 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	429a      	cmp	r2, r3
 8002244:	d208      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	f023 020f 	bic.w	r2, r3, #15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	493d      	ldr	r1, [pc, #244]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b3c      	ldr	r3, [pc, #240]	; (800234c <HAL_RCC_ClockConfig+0x3d4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d210      	bcs.n	8002288 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_ClockConfig+0x3d4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 020f 	bic.w	r2, r3, #15
 800226e:	4937      	ldr	r1, [pc, #220]	; (800234c <HAL_RCC_ClockConfig+0x3d4>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_RCC_ClockConfig+0x3d4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e05b      	b.n	8002340 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d208      	bcs.n	80022b6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4925      	ldr	r1, [pc, #148]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d012      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d209      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	4919      	ldr	r1, [pc, #100]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002300:	429a      	cmp	r2, r3
 8002302:	d208      	bcs.n	8002316 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	490d      	ldr	r1, [pc, #52]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 8002312:	4313      	orrs	r3, r2
 8002314:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002316:	f000 f821 	bl	800235c <HAL_RCC_GetSysClockFreq>
 800231a:	4602      	mov	r2, r0
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x3d0>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	490a      	ldr	r1, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x3d8>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	4a09      	ldr	r2, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x3dc>)
 800232e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x3e0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f96f 	bl	8000618 <HAL_InitTick>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]

  return status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	46020c00 	.word	0x46020c00
 800234c:	40022000 	.word	0x40022000
 8002350:	08002f1c 	.word	0x08002f1c
 8002354:	20000000 	.word	0x20000000
 8002358:	20000004 	.word	0x20000004

0800235c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b08b      	sub	sp, #44	; 0x2c
 8002360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4b78      	ldr	r3, [pc, #480]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002374:	4b75      	ldr	r3, [pc, #468]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x34>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d121      	bne.n	80023ce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d11e      	bne.n	80023ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002390:	4b6e      	ldr	r3, [pc, #440]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800239c:	4b6b      	ldr	r3, [pc, #428]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800239e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a2:	0b1b      	lsrs	r3, r3, #12
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	e005      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80023ac:	4b67      	ldr	r3, [pc, #412]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	0f1b      	lsrs	r3, r3, #28
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023b8:	4a65      	ldr	r2, [pc, #404]	; (8002550 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d110      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023cc:	e00d      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d102      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023da:	4b5e      	ldr	r3, [pc, #376]	; (8002554 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	e004      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80023e8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	f040 80a5 	bne.w	800253c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80023f2:	4b56      	ldr	r3, [pc, #344]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d003      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0xe4>
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d022      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x128>
 800243e:	e043      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002558 <HAL_RCC_GetSysClockFreq+0x1fc>
 800244e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002462:	ed97 6a01 	vldr	s12, [r7, #4]
 8002466:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800255c <HAL_RCC_GetSysClockFreq+0x200>
 800246a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800246e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002476:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002482:	e046      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002558 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024a6:	ed97 6a01 	vldr	s12, [r7, #4]
 80024aa:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800255c <HAL_RCC_GetSysClockFreq+0x200>
 80024ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024c6:	e024      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80024e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80024f0:	ed97 6a01 	vldr	s12, [r7, #4]
 80024f4:	eddf 5a19 	vldr	s11, [pc, #100]	; 800255c <HAL_RCC_GetSysClockFreq+0x200>
 80024f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002504:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002510:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	0e1b      	lsrs	r3, r3, #24
 8002518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800251c:	3301      	adds	r3, #1
 800251e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800252a:	edd7 6a07 	vldr	s13, [r7, #28]
 800252e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002536:	ee17 3a90 	vmov	r3, s15
 800253a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800253c:	6a3b      	ldr	r3, [r7, #32]
}
 800253e:	4618      	mov	r0, r3
 8002540:	372c      	adds	r7, #44	; 0x2c
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	46020c00 	.word	0x46020c00
 8002550:	08002f34 	.word	0x08002f34
 8002554:	00f42400 	.word	0x00f42400
 8002558:	4b742400 	.word	0x4b742400
 800255c:	46000000 	.word	0x46000000

08002560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002564:	f7ff fefa 	bl	800235c <HAL_RCC_GetSysClockFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <HAL_RCC_GetHCLKFreq+0x28>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	4906      	ldr	r1, [pc, #24]	; (800258c <HAL_RCC_GetHCLKFreq+0x2c>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <HAL_RCC_GetHCLKFreq+0x30>)
 800257c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_RCC_GetHCLKFreq+0x30>)
 8002580:	681b      	ldr	r3, [r3, #0]
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	46020c00 	.word	0x46020c00
 800258c:	08002f1c 	.word	0x08002f1c
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002598:	f7ff ffe2 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	46020c00 	.word	0x46020c00
 80025b8:	08002f2c 	.word	0x08002f2c

080025bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	221f      	movs	r2, #31
 80025ca:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_RCC_GetClockConfig+0x68>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f003 0203 	and.w	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_GetClockConfig+0x68>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <HAL_RCC_GetClockConfig+0x68>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_RCC_GetClockConfig+0x68>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_GetClockConfig+0x68>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RCC_GetClockConfig+0x6c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 020f 	and.w	r2, r3, #15
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	46020c00 	.word	0x46020c00
 8002628:	40022000 	.word	0x40022000

0800262c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002642:	f7fe fd3f 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 8002646:	6178      	str	r0, [r7, #20]
 8002648:	e019      	b.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002650:	4a37      	ldr	r2, [pc, #220]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800265a:	4b35      	ldr	r3, [pc, #212]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800265c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002668:	f7fe fd2c 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 800266c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002674:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002684:	d003      	beq.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800268c:	d109      	bne.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002694:	d202      	bcs.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002696:	2301      	movs	r3, #1
 8002698:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800269a:	e033      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80026a0:	e030      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026a8:	d208      	bcs.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d102      	bne.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80026b2:	2303      	movs	r3, #3
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	e025      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e035      	b.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c2:	d90f      	bls.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026d0:	d902      	bls.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e015      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	e012      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e00f      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ea:	d109      	bne.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f2:	d102      	bne.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80026f4:	2301      	movs	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	e004      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80026fa:	2302      	movs	r3, #2
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e001      	b.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002700:	2301      	movs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 020f 	bic.w	r2, r3, #15
 800270c:	4909      	ldr	r1, [pc, #36]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	46020c00 	.word	0x46020c00
 8002734:	40022000 	.word	0x40022000

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e049      	b.n	80027de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f841 	bl	80027e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 fa58 	bl	8002c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d001      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e072      	b.n	80028fa <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a35      	ldr	r2, [pc, #212]	; (8002908 <HAL_TIM_Base_Start_IT+0x10c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d040      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a34      	ldr	r2, [pc, #208]	; (800290c <HAL_TIM_Base_Start_IT+0x110>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d03b      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d036      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002852:	d031      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2d      	ldr	r2, [pc, #180]	; (8002910 <HAL_TIM_Base_Start_IT+0x114>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02c      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <HAL_TIM_Base_Start_IT+0x118>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d027      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <HAL_TIM_Base_Start_IT+0x11c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d022      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a29      	ldr	r2, [pc, #164]	; (800291c <HAL_TIM_Base_Start_IT+0x120>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d01d      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a27      	ldr	r2, [pc, #156]	; (8002920 <HAL_TIM_Base_Start_IT+0x124>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d018      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a26      	ldr	r2, [pc, #152]	; (8002924 <HAL_TIM_Base_Start_IT+0x128>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d013      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a24      	ldr	r2, [pc, #144]	; (8002928 <HAL_TIM_Base_Start_IT+0x12c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00e      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a23      	ldr	r2, [pc, #140]	; (800292c <HAL_TIM_Base_Start_IT+0x130>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d009      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a21      	ldr	r2, [pc, #132]	; (8002930 <HAL_TIM_Base_Start_IT+0x134>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0xbc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_TIM_Base_Start_IT+0x138>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d115      	bne.n	80028e4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_TIM_Base_Start_IT+0x13c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d015      	beq.n	80028f6 <HAL_TIM_Base_Start_IT+0xfa>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d011      	beq.n	80028f6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e2:	e008      	b.n	80028f6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e000      	b.n	80028f8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40012c00 	.word	0x40012c00
 800290c:	50012c00 	.word	0x50012c00
 8002910:	40000400 	.word	0x40000400
 8002914:	50000400 	.word	0x50000400
 8002918:	40000800 	.word	0x40000800
 800291c:	50000800 	.word	0x50000800
 8002920:	40000c00 	.word	0x40000c00
 8002924:	50000c00 	.word	0x50000c00
 8002928:	40013400 	.word	0x40013400
 800292c:	50013400 	.word	0x50013400
 8002930:	40014000 	.word	0x40014000
 8002934:	50014000 	.word	0x50014000
 8002938:	00010007 	.word	0x00010007

0800293c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d020      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0202 	mvn.w	r2, #2
 8002970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f931 	bl	8002bee <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f923 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f934 	bl	8002c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d020      	beq.n	80029ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0204 	mvn.w	r2, #4
 80029bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f90b 	bl	8002bee <HAL_TIM_IC_CaptureCallback>
 80029d8:	e005      	b.n	80029e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8fd 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f90e 	bl	8002c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d020      	beq.n	8002a38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01b      	beq.n	8002a38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0208 	mvn.w	r2, #8
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8e5 	bl	8002bee <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8d7 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f8e8 	bl	8002c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d020      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01b      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0210 	mvn.w	r2, #16
 8002a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8bf 	bl	8002bee <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8b1 	bl	8002bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8c2 	bl	8002c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0201 	mvn.w	r2, #1
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fd fd84 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f9af 	bl	8002e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f9a7 	bl	8002e48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f87c 	bl	8002c16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00c      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f06f 0220 	mvn.w	r2, #32
 8002b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f96f 	bl	8002e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00c      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f97b 	bl	8002e5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00c      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f973 	bl	8002e70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00c      	beq.n	8002bae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f96b 	bl	8002e84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f963 	bl	8002e98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a68      	ldr	r2, [pc, #416]	; (8002de0 <TIM_Base_SetConfig+0x1b4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d02b      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a67      	ldr	r2, [pc, #412]	; (8002de4 <TIM_Base_SetConfig+0x1b8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d027      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d023      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5a:	d01f      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a62      	ldr	r2, [pc, #392]	; (8002de8 <TIM_Base_SetConfig+0x1bc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d01b      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a61      	ldr	r2, [pc, #388]	; (8002dec <TIM_Base_SetConfig+0x1c0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d017      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a60      	ldr	r2, [pc, #384]	; (8002df0 <TIM_Base_SetConfig+0x1c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a5f      	ldr	r2, [pc, #380]	; (8002df4 <TIM_Base_SetConfig+0x1c8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00f      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <TIM_Base_SetConfig+0x1cc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00b      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a5d      	ldr	r2, [pc, #372]	; (8002dfc <TIM_Base_SetConfig+0x1d0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a5c      	ldr	r2, [pc, #368]	; (8002e00 <TIM_Base_SetConfig+0x1d4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_Base_SetConfig+0x70>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a5b      	ldr	r2, [pc, #364]	; (8002e04 <TIM_Base_SetConfig+0x1d8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d108      	bne.n	8002cae <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	; (8002de0 <TIM_Base_SetConfig+0x1b4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d043      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <TIM_Base_SetConfig+0x1b8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d03f      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d03b      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ccc:	d037      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a45      	ldr	r2, [pc, #276]	; (8002de8 <TIM_Base_SetConfig+0x1bc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d033      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a44      	ldr	r2, [pc, #272]	; (8002dec <TIM_Base_SetConfig+0x1c0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d02f      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <TIM_Base_SetConfig+0x1c4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02b      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <TIM_Base_SetConfig+0x1c8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d027      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a41      	ldr	r2, [pc, #260]	; (8002df8 <TIM_Base_SetConfig+0x1cc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d023      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <TIM_Base_SetConfig+0x1d0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a3f      	ldr	r2, [pc, #252]	; (8002e00 <TIM_Base_SetConfig+0x1d4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01b      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a3e      	ldr	r2, [pc, #248]	; (8002e04 <TIM_Base_SetConfig+0x1d8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d017      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a3d      	ldr	r2, [pc, #244]	; (8002e08 <TIM_Base_SetConfig+0x1dc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d013      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <TIM_Base_SetConfig+0x1e0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00f      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <TIM_Base_SetConfig+0x1e4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a3a      	ldr	r2, [pc, #232]	; (8002e14 <TIM_Base_SetConfig+0x1e8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a39      	ldr	r2, [pc, #228]	; (8002e18 <TIM_Base_SetConfig+0x1ec>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_Base_SetConfig+0x112>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <TIM_Base_SetConfig+0x1f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d108      	bne.n	8002d50 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <TIM_Base_SetConfig+0x1b4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d023      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <TIM_Base_SetConfig+0x1b8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d01f      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <TIM_Base_SetConfig+0x1d4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01b      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <TIM_Base_SetConfig+0x1d8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d017      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <TIM_Base_SetConfig+0x1dc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a1b      	ldr	r2, [pc, #108]	; (8002e0c <TIM_Base_SetConfig+0x1e0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00f      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <TIM_Base_SetConfig+0x1e4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <TIM_Base_SetConfig+0x1e8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <TIM_Base_SetConfig+0x1ec>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_Base_SetConfig+0x198>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <TIM_Base_SetConfig+0x1f0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	50012c00 	.word	0x50012c00
 8002de8:	40000400 	.word	0x40000400
 8002dec:	50000400 	.word	0x50000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	50000800 	.word	0x50000800
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	50000c00 	.word	0x50000c00
 8002e00:	40013400 	.word	0x40013400
 8002e04:	50013400 	.word	0x50013400
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	50014000 	.word	0x50014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	50014400 	.word	0x50014400
 8002e18:	40014800 	.word	0x40014800
 8002e1c:	50014800 	.word	0x50014800

08002e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <memset>:
 8002eac:	4402      	add	r2, r0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <__libc_init_array>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	4d0d      	ldr	r5, [pc, #52]	; (8002ef4 <__libc_init_array+0x38>)
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	4c0d      	ldr	r4, [pc, #52]	; (8002ef8 <__libc_init_array+0x3c>)
 8002ec4:	1b64      	subs	r4, r4, r5
 8002ec6:	10a4      	asrs	r4, r4, #2
 8002ec8:	42a6      	cmp	r6, r4
 8002eca:	d109      	bne.n	8002ee0 <__libc_init_array+0x24>
 8002ecc:	4d0b      	ldr	r5, [pc, #44]	; (8002efc <__libc_init_array+0x40>)
 8002ece:	2600      	movs	r6, #0
 8002ed0:	4c0b      	ldr	r4, [pc, #44]	; (8002f00 <__libc_init_array+0x44>)
 8002ed2:	f000 f817 	bl	8002f04 <_init>
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	42a6      	cmp	r6, r4
 8002edc:	d105      	bne.n	8002eea <__libc_init_array+0x2e>
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
 8002ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	4798      	blx	r3
 8002ee8:	e7ee      	b.n	8002ec8 <__libc_init_array+0xc>
 8002eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eee:	3601      	adds	r6, #1
 8002ef0:	4798      	blx	r3
 8002ef2:	e7f2      	b.n	8002eda <__libc_init_array+0x1e>
 8002ef4:	08002ff4 	.word	0x08002ff4
 8002ef8:	08002ff4 	.word	0x08002ff4
 8002efc:	08002ff4 	.word	0x08002ff4
 8002f00:	08002ff8 	.word	0x08002ff8

08002f04 <_init>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	bf00      	nop
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr

08002f10 <_fini>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	bf00      	nop
 8002f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f16:	bc08      	pop	{r3}
 8002f18:	469e      	mov	lr, r3
 8002f1a:	4770      	bx	lr
